
import
  json, options, hashes, uri, rest, os, uri, strutils, times, httpcore, httpclient,
  asyncdispatch, jwt

## auto-generated via openapi macro
## title: DCM/DFA Reporting And Trafficking
## version: v3.1
## termsOfService: https://developers.google.com/terms/
## license:
##     name: Creative Commons Attribution 3.0
##     url: http://creativecommons.org/licenses/by/3.0/
## 
## Manages your DoubleClick Campaign Manager ad campaigns and reports.
## 
## https://developers.google.com/doubleclick-advertisers/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_578364 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_578364](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_578364): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  gcpServiceName = "dfareporting"
proc composeQueryString(query: JsonNode): string
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_DfareportingFilesGet_578635 = ref object of OpenApiRestCall_578364
proc url_DfareportingFilesGet_578637(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "reportId" in path, "`reportId` is a required path parameter"
  assert "fileId" in path, "`fileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId"),
               (kind: ConstantSegment, value: "/files/"),
               (kind: VariableSegment, value: "fileId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFilesGet_578636(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a report file by its report ID and file ID. This method supports media download.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   fileId: JString (required)
  ##         : The ID of the report file.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `fileId` field"
  var valid_578763 = path.getOrDefault("fileId")
  valid_578763 = validateParameter(valid_578763, JString, required = true,
                                 default = nil)
  if valid_578763 != nil:
    section.add "fileId", valid_578763
  var valid_578764 = path.getOrDefault("reportId")
  valid_578764 = validateParameter(valid_578764, JString, required = true,
                                 default = nil)
  if valid_578764 != nil:
    section.add "reportId", valid_578764
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_578765 = query.getOrDefault("key")
  valid_578765 = validateParameter(valid_578765, JString, required = false,
                                 default = nil)
  if valid_578765 != nil:
    section.add "key", valid_578765
  var valid_578779 = query.getOrDefault("prettyPrint")
  valid_578779 = validateParameter(valid_578779, JBool, required = false,
                                 default = newJBool(true))
  if valid_578779 != nil:
    section.add "prettyPrint", valid_578779
  var valid_578780 = query.getOrDefault("oauth_token")
  valid_578780 = validateParameter(valid_578780, JString, required = false,
                                 default = nil)
  if valid_578780 != nil:
    section.add "oauth_token", valid_578780
  var valid_578781 = query.getOrDefault("alt")
  valid_578781 = validateParameter(valid_578781, JString, required = false,
                                 default = newJString("json"))
  if valid_578781 != nil:
    section.add "alt", valid_578781
  var valid_578782 = query.getOrDefault("userIp")
  valid_578782 = validateParameter(valid_578782, JString, required = false,
                                 default = nil)
  if valid_578782 != nil:
    section.add "userIp", valid_578782
  var valid_578783 = query.getOrDefault("quotaUser")
  valid_578783 = validateParameter(valid_578783, JString, required = false,
                                 default = nil)
  if valid_578783 != nil:
    section.add "quotaUser", valid_578783
  var valid_578784 = query.getOrDefault("fields")
  valid_578784 = validateParameter(valid_578784, JString, required = false,
                                 default = nil)
  if valid_578784 != nil:
    section.add "fields", valid_578784
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_578807: Call_DfareportingFilesGet_578635; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a report file by its report ID and file ID. This method supports media download.
  ## 
  let valid = call_578807.validator(path, query, header, formData, body)
  let scheme = call_578807.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_578807.url(scheme.get, call_578807.host, call_578807.base,
                         call_578807.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_578807, url, valid)

proc call*(call_578878: Call_DfareportingFilesGet_578635; fileId: string;
          reportId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingFilesGet
  ## Retrieves a report file by its report ID and file ID. This method supports media download.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fileId: string (required)
  ##         : The ID of the report file.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_578879 = newJObject()
  var query_578881 = newJObject()
  add(query_578881, "key", newJString(key))
  add(query_578881, "prettyPrint", newJBool(prettyPrint))
  add(query_578881, "oauth_token", newJString(oauthToken))
  add(query_578881, "alt", newJString(alt))
  add(query_578881, "userIp", newJString(userIp))
  add(query_578881, "quotaUser", newJString(quotaUser))
  add(path_578879, "fileId", newJString(fileId))
  add(path_578879, "reportId", newJString(reportId))
  add(query_578881, "fields", newJString(fields))
  result = call_578878.call(path_578879, query_578881, nil, nil, nil)

var dfareportingFilesGet* = Call_DfareportingFilesGet_578635(
    name: "dfareportingFilesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/reports/{reportId}/files/{fileId}",
    validator: validate_DfareportingFilesGet_578636, base: "/dfareporting/v3.1",
    url: url_DfareportingFilesGet_578637, schemes: {Scheme.Https})
type
  Call_DfareportingUserProfilesList_578920 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserProfilesList_578922(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  result.path = base & route

proc validate_DfareportingUserProfilesList_578921(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves list of user profiles for a user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_578923 = query.getOrDefault("key")
  valid_578923 = validateParameter(valid_578923, JString, required = false,
                                 default = nil)
  if valid_578923 != nil:
    section.add "key", valid_578923
  var valid_578924 = query.getOrDefault("prettyPrint")
  valid_578924 = validateParameter(valid_578924, JBool, required = false,
                                 default = newJBool(true))
  if valid_578924 != nil:
    section.add "prettyPrint", valid_578924
  var valid_578925 = query.getOrDefault("oauth_token")
  valid_578925 = validateParameter(valid_578925, JString, required = false,
                                 default = nil)
  if valid_578925 != nil:
    section.add "oauth_token", valid_578925
  var valid_578926 = query.getOrDefault("alt")
  valid_578926 = validateParameter(valid_578926, JString, required = false,
                                 default = newJString("json"))
  if valid_578926 != nil:
    section.add "alt", valid_578926
  var valid_578927 = query.getOrDefault("userIp")
  valid_578927 = validateParameter(valid_578927, JString, required = false,
                                 default = nil)
  if valid_578927 != nil:
    section.add "userIp", valid_578927
  var valid_578928 = query.getOrDefault("quotaUser")
  valid_578928 = validateParameter(valid_578928, JString, required = false,
                                 default = nil)
  if valid_578928 != nil:
    section.add "quotaUser", valid_578928
  var valid_578929 = query.getOrDefault("fields")
  valid_578929 = validateParameter(valid_578929, JString, required = false,
                                 default = nil)
  if valid_578929 != nil:
    section.add "fields", valid_578929
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_578930: Call_DfareportingUserProfilesList_578920; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves list of user profiles for a user.
  ## 
  let valid = call_578930.validator(path, query, header, formData, body)
  let scheme = call_578930.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_578930.url(scheme.get, call_578930.host, call_578930.base,
                         call_578930.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_578930, url, valid)

proc call*(call_578931: Call_DfareportingUserProfilesList_578920; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingUserProfilesList
  ## Retrieves list of user profiles for a user.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var query_578932 = newJObject()
  add(query_578932, "key", newJString(key))
  add(query_578932, "prettyPrint", newJBool(prettyPrint))
  add(query_578932, "oauth_token", newJString(oauthToken))
  add(query_578932, "alt", newJString(alt))
  add(query_578932, "userIp", newJString(userIp))
  add(query_578932, "quotaUser", newJString(quotaUser))
  add(query_578932, "fields", newJString(fields))
  result = call_578931.call(nil, query_578932, nil, nil, nil)

var dfareportingUserProfilesList* = Call_DfareportingUserProfilesList_578920(
    name: "dfareportingUserProfilesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles",
    validator: validate_DfareportingUserProfilesList_578921,
    base: "/dfareporting/v3.1", url: url_DfareportingUserProfilesList_578922,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserProfilesGet_578933 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserProfilesGet_578935(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserProfilesGet_578934(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one user profile by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_578936 = path.getOrDefault("profileId")
  valid_578936 = validateParameter(valid_578936, JString, required = true,
                                 default = nil)
  if valid_578936 != nil:
    section.add "profileId", valid_578936
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_578937 = query.getOrDefault("key")
  valid_578937 = validateParameter(valid_578937, JString, required = false,
                                 default = nil)
  if valid_578937 != nil:
    section.add "key", valid_578937
  var valid_578938 = query.getOrDefault("prettyPrint")
  valid_578938 = validateParameter(valid_578938, JBool, required = false,
                                 default = newJBool(true))
  if valid_578938 != nil:
    section.add "prettyPrint", valid_578938
  var valid_578939 = query.getOrDefault("oauth_token")
  valid_578939 = validateParameter(valid_578939, JString, required = false,
                                 default = nil)
  if valid_578939 != nil:
    section.add "oauth_token", valid_578939
  var valid_578940 = query.getOrDefault("alt")
  valid_578940 = validateParameter(valid_578940, JString, required = false,
                                 default = newJString("json"))
  if valid_578940 != nil:
    section.add "alt", valid_578940
  var valid_578941 = query.getOrDefault("userIp")
  valid_578941 = validateParameter(valid_578941, JString, required = false,
                                 default = nil)
  if valid_578941 != nil:
    section.add "userIp", valid_578941
  var valid_578942 = query.getOrDefault("quotaUser")
  valid_578942 = validateParameter(valid_578942, JString, required = false,
                                 default = nil)
  if valid_578942 != nil:
    section.add "quotaUser", valid_578942
  var valid_578943 = query.getOrDefault("fields")
  valid_578943 = validateParameter(valid_578943, JString, required = false,
                                 default = nil)
  if valid_578943 != nil:
    section.add "fields", valid_578943
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_578944: Call_DfareportingUserProfilesGet_578933; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one user profile by ID.
  ## 
  let valid = call_578944.validator(path, query, header, formData, body)
  let scheme = call_578944.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_578944.url(scheme.get, call_578944.host, call_578944.base,
                         call_578944.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_578944, url, valid)

proc call*(call_578945: Call_DfareportingUserProfilesGet_578933; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingUserProfilesGet
  ## Gets one user profile by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : The user profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_578946 = newJObject()
  var query_578947 = newJObject()
  add(query_578947, "key", newJString(key))
  add(query_578947, "prettyPrint", newJBool(prettyPrint))
  add(query_578947, "oauth_token", newJString(oauthToken))
  add(path_578946, "profileId", newJString(profileId))
  add(query_578947, "alt", newJString(alt))
  add(query_578947, "userIp", newJString(userIp))
  add(query_578947, "quotaUser", newJString(quotaUser))
  add(query_578947, "fields", newJString(fields))
  result = call_578945.call(path_578946, query_578947, nil, nil, nil)

var dfareportingUserProfilesGet* = Call_DfareportingUserProfilesGet_578933(
    name: "dfareportingUserProfilesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}",
    validator: validate_DfareportingUserProfilesGet_578934,
    base: "/dfareporting/v3.1", url: url_DfareportingUserProfilesGet_578935,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountActiveAdSummariesGet_578948 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountActiveAdSummariesGet_578950(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "summaryAccountId" in path,
        "`summaryAccountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountActiveAdSummaries/"),
               (kind: VariableSegment, value: "summaryAccountId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountActiveAdSummariesGet_578949(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the account's active ad summary by account ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   summaryAccountId: JString (required)
  ##                   : Account ID.
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `summaryAccountId` field"
  var valid_578951 = path.getOrDefault("summaryAccountId")
  valid_578951 = validateParameter(valid_578951, JString, required = true,
                                 default = nil)
  if valid_578951 != nil:
    section.add "summaryAccountId", valid_578951
  var valid_578952 = path.getOrDefault("profileId")
  valid_578952 = validateParameter(valid_578952, JString, required = true,
                                 default = nil)
  if valid_578952 != nil:
    section.add "profileId", valid_578952
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_578953 = query.getOrDefault("key")
  valid_578953 = validateParameter(valid_578953, JString, required = false,
                                 default = nil)
  if valid_578953 != nil:
    section.add "key", valid_578953
  var valid_578954 = query.getOrDefault("prettyPrint")
  valid_578954 = validateParameter(valid_578954, JBool, required = false,
                                 default = newJBool(true))
  if valid_578954 != nil:
    section.add "prettyPrint", valid_578954
  var valid_578955 = query.getOrDefault("oauth_token")
  valid_578955 = validateParameter(valid_578955, JString, required = false,
                                 default = nil)
  if valid_578955 != nil:
    section.add "oauth_token", valid_578955
  var valid_578956 = query.getOrDefault("alt")
  valid_578956 = validateParameter(valid_578956, JString, required = false,
                                 default = newJString("json"))
  if valid_578956 != nil:
    section.add "alt", valid_578956
  var valid_578957 = query.getOrDefault("userIp")
  valid_578957 = validateParameter(valid_578957, JString, required = false,
                                 default = nil)
  if valid_578957 != nil:
    section.add "userIp", valid_578957
  var valid_578958 = query.getOrDefault("quotaUser")
  valid_578958 = validateParameter(valid_578958, JString, required = false,
                                 default = nil)
  if valid_578958 != nil:
    section.add "quotaUser", valid_578958
  var valid_578959 = query.getOrDefault("fields")
  valid_578959 = validateParameter(valid_578959, JString, required = false,
                                 default = nil)
  if valid_578959 != nil:
    section.add "fields", valid_578959
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_578960: Call_DfareportingAccountActiveAdSummariesGet_578948;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the account's active ad summary by account ID.
  ## 
  let valid = call_578960.validator(path, query, header, formData, body)
  let scheme = call_578960.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_578960.url(scheme.get, call_578960.host, call_578960.base,
                         call_578960.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_578960, url, valid)

proc call*(call_578961: Call_DfareportingAccountActiveAdSummariesGet_578948;
          summaryAccountId: string; profileId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingAccountActiveAdSummariesGet
  ## Gets the account's active ad summary by account ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   summaryAccountId: string (required)
  ##                   : Account ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_578962 = newJObject()
  var query_578963 = newJObject()
  add(query_578963, "key", newJString(key))
  add(query_578963, "prettyPrint", newJBool(prettyPrint))
  add(query_578963, "oauth_token", newJString(oauthToken))
  add(path_578962, "summaryAccountId", newJString(summaryAccountId))
  add(path_578962, "profileId", newJString(profileId))
  add(query_578963, "alt", newJString(alt))
  add(query_578963, "userIp", newJString(userIp))
  add(query_578963, "quotaUser", newJString(quotaUser))
  add(query_578963, "fields", newJString(fields))
  result = call_578961.call(path_578962, query_578963, nil, nil, nil)

var dfareportingAccountActiveAdSummariesGet* = Call_DfareportingAccountActiveAdSummariesGet_578948(
    name: "dfareportingAccountActiveAdSummariesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accountActiveAdSummaries/{summaryAccountId}",
    validator: validate_DfareportingAccountActiveAdSummariesGet_578949,
    base: "/dfareporting/v3.1", url: url_DfareportingAccountActiveAdSummariesGet_578950,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountPermissionGroupsList_578964 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountPermissionGroupsList_578966(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountPermissionGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountPermissionGroupsList_578965(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the list of account permission groups.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_578967 = path.getOrDefault("profileId")
  valid_578967 = validateParameter(valid_578967, JString, required = true,
                                 default = nil)
  if valid_578967 != nil:
    section.add "profileId", valid_578967
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_578968 = query.getOrDefault("key")
  valid_578968 = validateParameter(valid_578968, JString, required = false,
                                 default = nil)
  if valid_578968 != nil:
    section.add "key", valid_578968
  var valid_578969 = query.getOrDefault("prettyPrint")
  valid_578969 = validateParameter(valid_578969, JBool, required = false,
                                 default = newJBool(true))
  if valid_578969 != nil:
    section.add "prettyPrint", valid_578969
  var valid_578970 = query.getOrDefault("oauth_token")
  valid_578970 = validateParameter(valid_578970, JString, required = false,
                                 default = nil)
  if valid_578970 != nil:
    section.add "oauth_token", valid_578970
  var valid_578971 = query.getOrDefault("alt")
  valid_578971 = validateParameter(valid_578971, JString, required = false,
                                 default = newJString("json"))
  if valid_578971 != nil:
    section.add "alt", valid_578971
  var valid_578972 = query.getOrDefault("userIp")
  valid_578972 = validateParameter(valid_578972, JString, required = false,
                                 default = nil)
  if valid_578972 != nil:
    section.add "userIp", valid_578972
  var valid_578973 = query.getOrDefault("quotaUser")
  valid_578973 = validateParameter(valid_578973, JString, required = false,
                                 default = nil)
  if valid_578973 != nil:
    section.add "quotaUser", valid_578973
  var valid_578974 = query.getOrDefault("fields")
  valid_578974 = validateParameter(valid_578974, JString, required = false,
                                 default = nil)
  if valid_578974 != nil:
    section.add "fields", valid_578974
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_578975: Call_DfareportingAccountPermissionGroupsList_578964;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the list of account permission groups.
  ## 
  let valid = call_578975.validator(path, query, header, formData, body)
  let scheme = call_578975.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_578975.url(scheme.get, call_578975.host, call_578975.base,
                         call_578975.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_578975, url, valid)

proc call*(call_578976: Call_DfareportingAccountPermissionGroupsList_578964;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingAccountPermissionGroupsList
  ## Retrieves the list of account permission groups.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_578977 = newJObject()
  var query_578978 = newJObject()
  add(query_578978, "key", newJString(key))
  add(query_578978, "prettyPrint", newJBool(prettyPrint))
  add(query_578978, "oauth_token", newJString(oauthToken))
  add(path_578977, "profileId", newJString(profileId))
  add(query_578978, "alt", newJString(alt))
  add(query_578978, "userIp", newJString(userIp))
  add(query_578978, "quotaUser", newJString(quotaUser))
  add(query_578978, "fields", newJString(fields))
  result = call_578976.call(path_578977, query_578978, nil, nil, nil)

var dfareportingAccountPermissionGroupsList* = Call_DfareportingAccountPermissionGroupsList_578964(
    name: "dfareportingAccountPermissionGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountPermissionGroups",
    validator: validate_DfareportingAccountPermissionGroupsList_578965,
    base: "/dfareporting/v3.1", url: url_DfareportingAccountPermissionGroupsList_578966,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountPermissionGroupsGet_578979 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountPermissionGroupsGet_578981(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountPermissionGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountPermissionGroupsGet_578980(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one account permission group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Account permission group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_578982 = path.getOrDefault("profileId")
  valid_578982 = validateParameter(valid_578982, JString, required = true,
                                 default = nil)
  if valid_578982 != nil:
    section.add "profileId", valid_578982
  var valid_578983 = path.getOrDefault("id")
  valid_578983 = validateParameter(valid_578983, JString, required = true,
                                 default = nil)
  if valid_578983 != nil:
    section.add "id", valid_578983
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_578984 = query.getOrDefault("key")
  valid_578984 = validateParameter(valid_578984, JString, required = false,
                                 default = nil)
  if valid_578984 != nil:
    section.add "key", valid_578984
  var valid_578985 = query.getOrDefault("prettyPrint")
  valid_578985 = validateParameter(valid_578985, JBool, required = false,
                                 default = newJBool(true))
  if valid_578985 != nil:
    section.add "prettyPrint", valid_578985
  var valid_578986 = query.getOrDefault("oauth_token")
  valid_578986 = validateParameter(valid_578986, JString, required = false,
                                 default = nil)
  if valid_578986 != nil:
    section.add "oauth_token", valid_578986
  var valid_578987 = query.getOrDefault("alt")
  valid_578987 = validateParameter(valid_578987, JString, required = false,
                                 default = newJString("json"))
  if valid_578987 != nil:
    section.add "alt", valid_578987
  var valid_578988 = query.getOrDefault("userIp")
  valid_578988 = validateParameter(valid_578988, JString, required = false,
                                 default = nil)
  if valid_578988 != nil:
    section.add "userIp", valid_578988
  var valid_578989 = query.getOrDefault("quotaUser")
  valid_578989 = validateParameter(valid_578989, JString, required = false,
                                 default = nil)
  if valid_578989 != nil:
    section.add "quotaUser", valid_578989
  var valid_578990 = query.getOrDefault("fields")
  valid_578990 = validateParameter(valid_578990, JString, required = false,
                                 default = nil)
  if valid_578990 != nil:
    section.add "fields", valid_578990
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_578991: Call_DfareportingAccountPermissionGroupsGet_578979;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one account permission group by ID.
  ## 
  let valid = call_578991.validator(path, query, header, formData, body)
  let scheme = call_578991.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_578991.url(scheme.get, call_578991.host, call_578991.base,
                         call_578991.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_578991, url, valid)

proc call*(call_578992: Call_DfareportingAccountPermissionGroupsGet_578979;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingAccountPermissionGroupsGet
  ## Gets one account permission group by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Account permission group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_578993 = newJObject()
  var query_578994 = newJObject()
  add(query_578994, "key", newJString(key))
  add(query_578994, "prettyPrint", newJBool(prettyPrint))
  add(query_578994, "oauth_token", newJString(oauthToken))
  add(path_578993, "profileId", newJString(profileId))
  add(path_578993, "id", newJString(id))
  add(query_578994, "alt", newJString(alt))
  add(query_578994, "userIp", newJString(userIp))
  add(query_578994, "quotaUser", newJString(quotaUser))
  add(query_578994, "fields", newJString(fields))
  result = call_578992.call(path_578993, query_578994, nil, nil, nil)

var dfareportingAccountPermissionGroupsGet* = Call_DfareportingAccountPermissionGroupsGet_578979(
    name: "dfareportingAccountPermissionGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountPermissionGroups/{id}",
    validator: validate_DfareportingAccountPermissionGroupsGet_578980,
    base: "/dfareporting/v3.1", url: url_DfareportingAccountPermissionGroupsGet_578981,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountPermissionsList_578995 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountPermissionsList_578997(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountPermissions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountPermissionsList_578996(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the list of account permissions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_578998 = path.getOrDefault("profileId")
  valid_578998 = validateParameter(valid_578998, JString, required = true,
                                 default = nil)
  if valid_578998 != nil:
    section.add "profileId", valid_578998
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_578999 = query.getOrDefault("key")
  valid_578999 = validateParameter(valid_578999, JString, required = false,
                                 default = nil)
  if valid_578999 != nil:
    section.add "key", valid_578999
  var valid_579000 = query.getOrDefault("prettyPrint")
  valid_579000 = validateParameter(valid_579000, JBool, required = false,
                                 default = newJBool(true))
  if valid_579000 != nil:
    section.add "prettyPrint", valid_579000
  var valid_579001 = query.getOrDefault("oauth_token")
  valid_579001 = validateParameter(valid_579001, JString, required = false,
                                 default = nil)
  if valid_579001 != nil:
    section.add "oauth_token", valid_579001
  var valid_579002 = query.getOrDefault("alt")
  valid_579002 = validateParameter(valid_579002, JString, required = false,
                                 default = newJString("json"))
  if valid_579002 != nil:
    section.add "alt", valid_579002
  var valid_579003 = query.getOrDefault("userIp")
  valid_579003 = validateParameter(valid_579003, JString, required = false,
                                 default = nil)
  if valid_579003 != nil:
    section.add "userIp", valid_579003
  var valid_579004 = query.getOrDefault("quotaUser")
  valid_579004 = validateParameter(valid_579004, JString, required = false,
                                 default = nil)
  if valid_579004 != nil:
    section.add "quotaUser", valid_579004
  var valid_579005 = query.getOrDefault("fields")
  valid_579005 = validateParameter(valid_579005, JString, required = false,
                                 default = nil)
  if valid_579005 != nil:
    section.add "fields", valid_579005
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579006: Call_DfareportingAccountPermissionsList_578995;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the list of account permissions.
  ## 
  let valid = call_579006.validator(path, query, header, formData, body)
  let scheme = call_579006.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579006.url(scheme.get, call_579006.host, call_579006.base,
                         call_579006.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579006, url, valid)

proc call*(call_579007: Call_DfareportingAccountPermissionsList_578995;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingAccountPermissionsList
  ## Retrieves the list of account permissions.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579008 = newJObject()
  var query_579009 = newJObject()
  add(query_579009, "key", newJString(key))
  add(query_579009, "prettyPrint", newJBool(prettyPrint))
  add(query_579009, "oauth_token", newJString(oauthToken))
  add(path_579008, "profileId", newJString(profileId))
  add(query_579009, "alt", newJString(alt))
  add(query_579009, "userIp", newJString(userIp))
  add(query_579009, "quotaUser", newJString(quotaUser))
  add(query_579009, "fields", newJString(fields))
  result = call_579007.call(path_579008, query_579009, nil, nil, nil)

var dfareportingAccountPermissionsList* = Call_DfareportingAccountPermissionsList_578995(
    name: "dfareportingAccountPermissionsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountPermissions",
    validator: validate_DfareportingAccountPermissionsList_578996,
    base: "/dfareporting/v3.1", url: url_DfareportingAccountPermissionsList_578997,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountPermissionsGet_579010 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountPermissionsGet_579012(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountPermissions/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountPermissionsGet_579011(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one account permission by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Account permission ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579013 = path.getOrDefault("profileId")
  valid_579013 = validateParameter(valid_579013, JString, required = true,
                                 default = nil)
  if valid_579013 != nil:
    section.add "profileId", valid_579013
  var valid_579014 = path.getOrDefault("id")
  valid_579014 = validateParameter(valid_579014, JString, required = true,
                                 default = nil)
  if valid_579014 != nil:
    section.add "id", valid_579014
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579015 = query.getOrDefault("key")
  valid_579015 = validateParameter(valid_579015, JString, required = false,
                                 default = nil)
  if valid_579015 != nil:
    section.add "key", valid_579015
  var valid_579016 = query.getOrDefault("prettyPrint")
  valid_579016 = validateParameter(valid_579016, JBool, required = false,
                                 default = newJBool(true))
  if valid_579016 != nil:
    section.add "prettyPrint", valid_579016
  var valid_579017 = query.getOrDefault("oauth_token")
  valid_579017 = validateParameter(valid_579017, JString, required = false,
                                 default = nil)
  if valid_579017 != nil:
    section.add "oauth_token", valid_579017
  var valid_579018 = query.getOrDefault("alt")
  valid_579018 = validateParameter(valid_579018, JString, required = false,
                                 default = newJString("json"))
  if valid_579018 != nil:
    section.add "alt", valid_579018
  var valid_579019 = query.getOrDefault("userIp")
  valid_579019 = validateParameter(valid_579019, JString, required = false,
                                 default = nil)
  if valid_579019 != nil:
    section.add "userIp", valid_579019
  var valid_579020 = query.getOrDefault("quotaUser")
  valid_579020 = validateParameter(valid_579020, JString, required = false,
                                 default = nil)
  if valid_579020 != nil:
    section.add "quotaUser", valid_579020
  var valid_579021 = query.getOrDefault("fields")
  valid_579021 = validateParameter(valid_579021, JString, required = false,
                                 default = nil)
  if valid_579021 != nil:
    section.add "fields", valid_579021
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579022: Call_DfareportingAccountPermissionsGet_579010;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one account permission by ID.
  ## 
  let valid = call_579022.validator(path, query, header, formData, body)
  let scheme = call_579022.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579022.url(scheme.get, call_579022.host, call_579022.base,
                         call_579022.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579022, url, valid)

proc call*(call_579023: Call_DfareportingAccountPermissionsGet_579010;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingAccountPermissionsGet
  ## Gets one account permission by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Account permission ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579024 = newJObject()
  var query_579025 = newJObject()
  add(query_579025, "key", newJString(key))
  add(query_579025, "prettyPrint", newJBool(prettyPrint))
  add(query_579025, "oauth_token", newJString(oauthToken))
  add(path_579024, "profileId", newJString(profileId))
  add(path_579024, "id", newJString(id))
  add(query_579025, "alt", newJString(alt))
  add(query_579025, "userIp", newJString(userIp))
  add(query_579025, "quotaUser", newJString(quotaUser))
  add(query_579025, "fields", newJString(fields))
  result = call_579023.call(path_579024, query_579025, nil, nil, nil)

var dfareportingAccountPermissionsGet* = Call_DfareportingAccountPermissionsGet_579010(
    name: "dfareportingAccountPermissionsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountPermissions/{id}",
    validator: validate_DfareportingAccountPermissionsGet_579011,
    base: "/dfareporting/v3.1", url: url_DfareportingAccountPermissionsGet_579012,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesUpdate_579051 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountUserProfilesUpdate_579053(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesUpdate_579052(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing account user profile.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579054 = path.getOrDefault("profileId")
  valid_579054 = validateParameter(valid_579054, JString, required = true,
                                 default = nil)
  if valid_579054 != nil:
    section.add "profileId", valid_579054
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579055 = query.getOrDefault("key")
  valid_579055 = validateParameter(valid_579055, JString, required = false,
                                 default = nil)
  if valid_579055 != nil:
    section.add "key", valid_579055
  var valid_579056 = query.getOrDefault("prettyPrint")
  valid_579056 = validateParameter(valid_579056, JBool, required = false,
                                 default = newJBool(true))
  if valid_579056 != nil:
    section.add "prettyPrint", valid_579056
  var valid_579057 = query.getOrDefault("oauth_token")
  valid_579057 = validateParameter(valid_579057, JString, required = false,
                                 default = nil)
  if valid_579057 != nil:
    section.add "oauth_token", valid_579057
  var valid_579058 = query.getOrDefault("alt")
  valid_579058 = validateParameter(valid_579058, JString, required = false,
                                 default = newJString("json"))
  if valid_579058 != nil:
    section.add "alt", valid_579058
  var valid_579059 = query.getOrDefault("userIp")
  valid_579059 = validateParameter(valid_579059, JString, required = false,
                                 default = nil)
  if valid_579059 != nil:
    section.add "userIp", valid_579059
  var valid_579060 = query.getOrDefault("quotaUser")
  valid_579060 = validateParameter(valid_579060, JString, required = false,
                                 default = nil)
  if valid_579060 != nil:
    section.add "quotaUser", valid_579060
  var valid_579061 = query.getOrDefault("fields")
  valid_579061 = validateParameter(valid_579061, JString, required = false,
                                 default = nil)
  if valid_579061 != nil:
    section.add "fields", valid_579061
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579063: Call_DfareportingAccountUserProfilesUpdate_579051;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing account user profile.
  ## 
  let valid = call_579063.validator(path, query, header, formData, body)
  let scheme = call_579063.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579063.url(scheme.get, call_579063.host, call_579063.base,
                         call_579063.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579063, url, valid)

proc call*(call_579064: Call_DfareportingAccountUserProfilesUpdate_579051;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAccountUserProfilesUpdate
  ## Updates an existing account user profile.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579065 = newJObject()
  var query_579066 = newJObject()
  var body_579067 = newJObject()
  add(query_579066, "key", newJString(key))
  add(query_579066, "prettyPrint", newJBool(prettyPrint))
  add(query_579066, "oauth_token", newJString(oauthToken))
  add(path_579065, "profileId", newJString(profileId))
  add(query_579066, "alt", newJString(alt))
  add(query_579066, "userIp", newJString(userIp))
  add(query_579066, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579067 = body
  add(query_579066, "fields", newJString(fields))
  result = call_579064.call(path_579065, query_579066, nil, nil, body_579067)

var dfareportingAccountUserProfilesUpdate* = Call_DfareportingAccountUserProfilesUpdate_579051(
    name: "dfareportingAccountUserProfilesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles",
    validator: validate_DfareportingAccountUserProfilesUpdate_579052,
    base: "/dfareporting/v3.1", url: url_DfareportingAccountUserProfilesUpdate_579053,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesInsert_579068 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountUserProfilesInsert_579070(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesInsert_579069(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new account user profile.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579071 = path.getOrDefault("profileId")
  valid_579071 = validateParameter(valid_579071, JString, required = true,
                                 default = nil)
  if valid_579071 != nil:
    section.add "profileId", valid_579071
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579072 = query.getOrDefault("key")
  valid_579072 = validateParameter(valid_579072, JString, required = false,
                                 default = nil)
  if valid_579072 != nil:
    section.add "key", valid_579072
  var valid_579073 = query.getOrDefault("prettyPrint")
  valid_579073 = validateParameter(valid_579073, JBool, required = false,
                                 default = newJBool(true))
  if valid_579073 != nil:
    section.add "prettyPrint", valid_579073
  var valid_579074 = query.getOrDefault("oauth_token")
  valid_579074 = validateParameter(valid_579074, JString, required = false,
                                 default = nil)
  if valid_579074 != nil:
    section.add "oauth_token", valid_579074
  var valid_579075 = query.getOrDefault("alt")
  valid_579075 = validateParameter(valid_579075, JString, required = false,
                                 default = newJString("json"))
  if valid_579075 != nil:
    section.add "alt", valid_579075
  var valid_579076 = query.getOrDefault("userIp")
  valid_579076 = validateParameter(valid_579076, JString, required = false,
                                 default = nil)
  if valid_579076 != nil:
    section.add "userIp", valid_579076
  var valid_579077 = query.getOrDefault("quotaUser")
  valid_579077 = validateParameter(valid_579077, JString, required = false,
                                 default = nil)
  if valid_579077 != nil:
    section.add "quotaUser", valid_579077
  var valid_579078 = query.getOrDefault("fields")
  valid_579078 = validateParameter(valid_579078, JString, required = false,
                                 default = nil)
  if valid_579078 != nil:
    section.add "fields", valid_579078
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579080: Call_DfareportingAccountUserProfilesInsert_579068;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new account user profile.
  ## 
  let valid = call_579080.validator(path, query, header, formData, body)
  let scheme = call_579080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579080.url(scheme.get, call_579080.host, call_579080.base,
                         call_579080.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579080, url, valid)

proc call*(call_579081: Call_DfareportingAccountUserProfilesInsert_579068;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAccountUserProfilesInsert
  ## Inserts a new account user profile.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579082 = newJObject()
  var query_579083 = newJObject()
  var body_579084 = newJObject()
  add(query_579083, "key", newJString(key))
  add(query_579083, "prettyPrint", newJBool(prettyPrint))
  add(query_579083, "oauth_token", newJString(oauthToken))
  add(path_579082, "profileId", newJString(profileId))
  add(query_579083, "alt", newJString(alt))
  add(query_579083, "userIp", newJString(userIp))
  add(query_579083, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579084 = body
  add(query_579083, "fields", newJString(fields))
  result = call_579081.call(path_579082, query_579083, nil, nil, body_579084)

var dfareportingAccountUserProfilesInsert* = Call_DfareportingAccountUserProfilesInsert_579068(
    name: "dfareportingAccountUserProfilesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles",
    validator: validate_DfareportingAccountUserProfilesInsert_579069,
    base: "/dfareporting/v3.1", url: url_DfareportingAccountUserProfilesInsert_579070,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesList_579026 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountUserProfilesList_579028(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesList_579027(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of account user profiles, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579029 = path.getOrDefault("profileId")
  valid_579029 = validateParameter(valid_579029, JString, required = true,
                                 default = nil)
  if valid_579029 != nil:
    section.add "profileId", valid_579029
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   active: JBool
  ##         : Select only active user profiles.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "user profile*2015" will return objects with names like "user profile June 2015", "user profile April 2015", or simply "user profile 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "user profile" will match objects with name "my user profile", "user profile 2015", or simply "user profile".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   userRoleId: JString
  ##             : Select only user profiles with the specified user role ID.
  ##   subaccountId: JString
  ##               : Select only user profiles with the specified subaccount ID.
  ##   ids: JArray
  ##      : Select only user profiles with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_579030 = query.getOrDefault("key")
  valid_579030 = validateParameter(valid_579030, JString, required = false,
                                 default = nil)
  if valid_579030 != nil:
    section.add "key", valid_579030
  var valid_579031 = query.getOrDefault("prettyPrint")
  valid_579031 = validateParameter(valid_579031, JBool, required = false,
                                 default = newJBool(true))
  if valid_579031 != nil:
    section.add "prettyPrint", valid_579031
  var valid_579032 = query.getOrDefault("oauth_token")
  valid_579032 = validateParameter(valid_579032, JString, required = false,
                                 default = nil)
  if valid_579032 != nil:
    section.add "oauth_token", valid_579032
  var valid_579033 = query.getOrDefault("active")
  valid_579033 = validateParameter(valid_579033, JBool, required = false, default = nil)
  if valid_579033 != nil:
    section.add "active", valid_579033
  var valid_579034 = query.getOrDefault("sortField")
  valid_579034 = validateParameter(valid_579034, JString, required = false,
                                 default = newJString("ID"))
  if valid_579034 != nil:
    section.add "sortField", valid_579034
  var valid_579035 = query.getOrDefault("alt")
  valid_579035 = validateParameter(valid_579035, JString, required = false,
                                 default = newJString("json"))
  if valid_579035 != nil:
    section.add "alt", valid_579035
  var valid_579036 = query.getOrDefault("userIp")
  valid_579036 = validateParameter(valid_579036, JString, required = false,
                                 default = nil)
  if valid_579036 != nil:
    section.add "userIp", valid_579036
  var valid_579037 = query.getOrDefault("quotaUser")
  valid_579037 = validateParameter(valid_579037, JString, required = false,
                                 default = nil)
  if valid_579037 != nil:
    section.add "quotaUser", valid_579037
  var valid_579038 = query.getOrDefault("pageToken")
  valid_579038 = validateParameter(valid_579038, JString, required = false,
                                 default = nil)
  if valid_579038 != nil:
    section.add "pageToken", valid_579038
  var valid_579039 = query.getOrDefault("searchString")
  valid_579039 = validateParameter(valid_579039, JString, required = false,
                                 default = nil)
  if valid_579039 != nil:
    section.add "searchString", valid_579039
  var valid_579040 = query.getOrDefault("sortOrder")
  valid_579040 = validateParameter(valid_579040, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_579040 != nil:
    section.add "sortOrder", valid_579040
  var valid_579041 = query.getOrDefault("userRoleId")
  valid_579041 = validateParameter(valid_579041, JString, required = false,
                                 default = nil)
  if valid_579041 != nil:
    section.add "userRoleId", valid_579041
  var valid_579042 = query.getOrDefault("subaccountId")
  valid_579042 = validateParameter(valid_579042, JString, required = false,
                                 default = nil)
  if valid_579042 != nil:
    section.add "subaccountId", valid_579042
  var valid_579043 = query.getOrDefault("ids")
  valid_579043 = validateParameter(valid_579043, JArray, required = false,
                                 default = nil)
  if valid_579043 != nil:
    section.add "ids", valid_579043
  var valid_579044 = query.getOrDefault("fields")
  valid_579044 = validateParameter(valid_579044, JString, required = false,
                                 default = nil)
  if valid_579044 != nil:
    section.add "fields", valid_579044
  var valid_579046 = query.getOrDefault("maxResults")
  valid_579046 = validateParameter(valid_579046, JInt, required = false,
                                 default = newJInt(1000))
  if valid_579046 != nil:
    section.add "maxResults", valid_579046
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579047: Call_DfareportingAccountUserProfilesList_579026;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of account user profiles, possibly filtered. This method supports paging.
  ## 
  let valid = call_579047.validator(path, query, header, formData, body)
  let scheme = call_579047.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579047.url(scheme.get, call_579047.host, call_579047.base,
                         call_579047.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579047, url, valid)

proc call*(call_579048: Call_DfareportingAccountUserProfilesList_579026;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; active: bool = false; sortField: string = "ID";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          pageToken: string = ""; searchString: string = "";
          sortOrder: string = "ASCENDING"; userRoleId: string = "";
          subaccountId: string = ""; ids: JsonNode = nil; fields: string = "";
          maxResults: int = 1000): Recallable =
  ## dfareportingAccountUserProfilesList
  ## Retrieves a list of account user profiles, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   active: bool
  ##         : Select only active user profiles.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "user profile*2015" will return objects with names like "user profile June 2015", "user profile April 2015", or simply "user profile 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "user profile" will match objects with name "my user profile", "user profile 2015", or simply "user profile".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   userRoleId: string
  ##             : Select only user profiles with the specified user role ID.
  ##   subaccountId: string
  ##               : Select only user profiles with the specified subaccount ID.
  ##   ids: JArray
  ##      : Select only user profiles with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_579049 = newJObject()
  var query_579050 = newJObject()
  add(query_579050, "key", newJString(key))
  add(query_579050, "prettyPrint", newJBool(prettyPrint))
  add(query_579050, "oauth_token", newJString(oauthToken))
  add(query_579050, "active", newJBool(active))
  add(path_579049, "profileId", newJString(profileId))
  add(query_579050, "sortField", newJString(sortField))
  add(query_579050, "alt", newJString(alt))
  add(query_579050, "userIp", newJString(userIp))
  add(query_579050, "quotaUser", newJString(quotaUser))
  add(query_579050, "pageToken", newJString(pageToken))
  add(query_579050, "searchString", newJString(searchString))
  add(query_579050, "sortOrder", newJString(sortOrder))
  add(query_579050, "userRoleId", newJString(userRoleId))
  add(query_579050, "subaccountId", newJString(subaccountId))
  if ids != nil:
    query_579050.add "ids", ids
  add(query_579050, "fields", newJString(fields))
  add(query_579050, "maxResults", newJInt(maxResults))
  result = call_579048.call(path_579049, query_579050, nil, nil, nil)

var dfareportingAccountUserProfilesList* = Call_DfareportingAccountUserProfilesList_579026(
    name: "dfareportingAccountUserProfilesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles",
    validator: validate_DfareportingAccountUserProfilesList_579027,
    base: "/dfareporting/v3.1", url: url_DfareportingAccountUserProfilesList_579028,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesPatch_579085 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountUserProfilesPatch_579087(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesPatch_579086(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing account user profile. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579088 = path.getOrDefault("profileId")
  valid_579088 = validateParameter(valid_579088, JString, required = true,
                                 default = nil)
  if valid_579088 != nil:
    section.add "profileId", valid_579088
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : User profile ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579089 = query.getOrDefault("key")
  valid_579089 = validateParameter(valid_579089, JString, required = false,
                                 default = nil)
  if valid_579089 != nil:
    section.add "key", valid_579089
  var valid_579090 = query.getOrDefault("prettyPrint")
  valid_579090 = validateParameter(valid_579090, JBool, required = false,
                                 default = newJBool(true))
  if valid_579090 != nil:
    section.add "prettyPrint", valid_579090
  var valid_579091 = query.getOrDefault("oauth_token")
  valid_579091 = validateParameter(valid_579091, JString, required = false,
                                 default = nil)
  if valid_579091 != nil:
    section.add "oauth_token", valid_579091
  var valid_579092 = query.getOrDefault("alt")
  valid_579092 = validateParameter(valid_579092, JString, required = false,
                                 default = newJString("json"))
  if valid_579092 != nil:
    section.add "alt", valid_579092
  var valid_579093 = query.getOrDefault("userIp")
  valid_579093 = validateParameter(valid_579093, JString, required = false,
                                 default = nil)
  if valid_579093 != nil:
    section.add "userIp", valid_579093
  var valid_579094 = query.getOrDefault("quotaUser")
  valid_579094 = validateParameter(valid_579094, JString, required = false,
                                 default = nil)
  if valid_579094 != nil:
    section.add "quotaUser", valid_579094
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_579095 = query.getOrDefault("id")
  valid_579095 = validateParameter(valid_579095, JString, required = true,
                                 default = nil)
  if valid_579095 != nil:
    section.add "id", valid_579095
  var valid_579096 = query.getOrDefault("fields")
  valid_579096 = validateParameter(valid_579096, JString, required = false,
                                 default = nil)
  if valid_579096 != nil:
    section.add "fields", valid_579096
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579098: Call_DfareportingAccountUserProfilesPatch_579085;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing account user profile. This method supports patch semantics.
  ## 
  let valid = call_579098.validator(path, query, header, formData, body)
  let scheme = call_579098.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579098.url(scheme.get, call_579098.host, call_579098.base,
                         call_579098.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579098, url, valid)

proc call*(call_579099: Call_DfareportingAccountUserProfilesPatch_579085;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAccountUserProfilesPatch
  ## Updates an existing account user profile. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : User profile ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579100 = newJObject()
  var query_579101 = newJObject()
  var body_579102 = newJObject()
  add(query_579101, "key", newJString(key))
  add(query_579101, "prettyPrint", newJBool(prettyPrint))
  add(query_579101, "oauth_token", newJString(oauthToken))
  add(path_579100, "profileId", newJString(profileId))
  add(query_579101, "alt", newJString(alt))
  add(query_579101, "userIp", newJString(userIp))
  add(query_579101, "quotaUser", newJString(quotaUser))
  add(query_579101, "id", newJString(id))
  if body != nil:
    body_579102 = body
  add(query_579101, "fields", newJString(fields))
  result = call_579099.call(path_579100, query_579101, nil, nil, body_579102)

var dfareportingAccountUserProfilesPatch* = Call_DfareportingAccountUserProfilesPatch_579085(
    name: "dfareportingAccountUserProfilesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles",
    validator: validate_DfareportingAccountUserProfilesPatch_579086,
    base: "/dfareporting/v3.1", url: url_DfareportingAccountUserProfilesPatch_579087,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesGet_579103 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountUserProfilesGet_579105(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesGet_579104(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one account user profile by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579106 = path.getOrDefault("profileId")
  valid_579106 = validateParameter(valid_579106, JString, required = true,
                                 default = nil)
  if valid_579106 != nil:
    section.add "profileId", valid_579106
  var valid_579107 = path.getOrDefault("id")
  valid_579107 = validateParameter(valid_579107, JString, required = true,
                                 default = nil)
  if valid_579107 != nil:
    section.add "id", valid_579107
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579108 = query.getOrDefault("key")
  valid_579108 = validateParameter(valid_579108, JString, required = false,
                                 default = nil)
  if valid_579108 != nil:
    section.add "key", valid_579108
  var valid_579109 = query.getOrDefault("prettyPrint")
  valid_579109 = validateParameter(valid_579109, JBool, required = false,
                                 default = newJBool(true))
  if valid_579109 != nil:
    section.add "prettyPrint", valid_579109
  var valid_579110 = query.getOrDefault("oauth_token")
  valid_579110 = validateParameter(valid_579110, JString, required = false,
                                 default = nil)
  if valid_579110 != nil:
    section.add "oauth_token", valid_579110
  var valid_579111 = query.getOrDefault("alt")
  valid_579111 = validateParameter(valid_579111, JString, required = false,
                                 default = newJString("json"))
  if valid_579111 != nil:
    section.add "alt", valid_579111
  var valid_579112 = query.getOrDefault("userIp")
  valid_579112 = validateParameter(valid_579112, JString, required = false,
                                 default = nil)
  if valid_579112 != nil:
    section.add "userIp", valid_579112
  var valid_579113 = query.getOrDefault("quotaUser")
  valid_579113 = validateParameter(valid_579113, JString, required = false,
                                 default = nil)
  if valid_579113 != nil:
    section.add "quotaUser", valid_579113
  var valid_579114 = query.getOrDefault("fields")
  valid_579114 = validateParameter(valid_579114, JString, required = false,
                                 default = nil)
  if valid_579114 != nil:
    section.add "fields", valid_579114
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579115: Call_DfareportingAccountUserProfilesGet_579103;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one account user profile by ID.
  ## 
  let valid = call_579115.validator(path, query, header, formData, body)
  let scheme = call_579115.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579115.url(scheme.get, call_579115.host, call_579115.base,
                         call_579115.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579115, url, valid)

proc call*(call_579116: Call_DfareportingAccountUserProfilesGet_579103;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingAccountUserProfilesGet
  ## Gets one account user profile by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : User profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579117 = newJObject()
  var query_579118 = newJObject()
  add(query_579118, "key", newJString(key))
  add(query_579118, "prettyPrint", newJBool(prettyPrint))
  add(query_579118, "oauth_token", newJString(oauthToken))
  add(path_579117, "profileId", newJString(profileId))
  add(path_579117, "id", newJString(id))
  add(query_579118, "alt", newJString(alt))
  add(query_579118, "userIp", newJString(userIp))
  add(query_579118, "quotaUser", newJString(quotaUser))
  add(query_579118, "fields", newJString(fields))
  result = call_579116.call(path_579117, query_579118, nil, nil, nil)

var dfareportingAccountUserProfilesGet* = Call_DfareportingAccountUserProfilesGet_579103(
    name: "dfareportingAccountUserProfilesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles/{id}",
    validator: validate_DfareportingAccountUserProfilesGet_579104,
    base: "/dfareporting/v3.1", url: url_DfareportingAccountUserProfilesGet_579105,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountsUpdate_579141 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountsUpdate_579143(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountsUpdate_579142(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing account.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579144 = path.getOrDefault("profileId")
  valid_579144 = validateParameter(valid_579144, JString, required = true,
                                 default = nil)
  if valid_579144 != nil:
    section.add "profileId", valid_579144
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579145 = query.getOrDefault("key")
  valid_579145 = validateParameter(valid_579145, JString, required = false,
                                 default = nil)
  if valid_579145 != nil:
    section.add "key", valid_579145
  var valid_579146 = query.getOrDefault("prettyPrint")
  valid_579146 = validateParameter(valid_579146, JBool, required = false,
                                 default = newJBool(true))
  if valid_579146 != nil:
    section.add "prettyPrint", valid_579146
  var valid_579147 = query.getOrDefault("oauth_token")
  valid_579147 = validateParameter(valid_579147, JString, required = false,
                                 default = nil)
  if valid_579147 != nil:
    section.add "oauth_token", valid_579147
  var valid_579148 = query.getOrDefault("alt")
  valid_579148 = validateParameter(valid_579148, JString, required = false,
                                 default = newJString("json"))
  if valid_579148 != nil:
    section.add "alt", valid_579148
  var valid_579149 = query.getOrDefault("userIp")
  valid_579149 = validateParameter(valid_579149, JString, required = false,
                                 default = nil)
  if valid_579149 != nil:
    section.add "userIp", valid_579149
  var valid_579150 = query.getOrDefault("quotaUser")
  valid_579150 = validateParameter(valid_579150, JString, required = false,
                                 default = nil)
  if valid_579150 != nil:
    section.add "quotaUser", valid_579150
  var valid_579151 = query.getOrDefault("fields")
  valid_579151 = validateParameter(valid_579151, JString, required = false,
                                 default = nil)
  if valid_579151 != nil:
    section.add "fields", valid_579151
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579153: Call_DfareportingAccountsUpdate_579141; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing account.
  ## 
  let valid = call_579153.validator(path, query, header, formData, body)
  let scheme = call_579153.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579153.url(scheme.get, call_579153.host, call_579153.base,
                         call_579153.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579153, url, valid)

proc call*(call_579154: Call_DfareportingAccountsUpdate_579141; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAccountsUpdate
  ## Updates an existing account.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579155 = newJObject()
  var query_579156 = newJObject()
  var body_579157 = newJObject()
  add(query_579156, "key", newJString(key))
  add(query_579156, "prettyPrint", newJBool(prettyPrint))
  add(query_579156, "oauth_token", newJString(oauthToken))
  add(path_579155, "profileId", newJString(profileId))
  add(query_579156, "alt", newJString(alt))
  add(query_579156, "userIp", newJString(userIp))
  add(query_579156, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579157 = body
  add(query_579156, "fields", newJString(fields))
  result = call_579154.call(path_579155, query_579156, nil, nil, body_579157)

var dfareportingAccountsUpdate* = Call_DfareportingAccountsUpdate_579141(
    name: "dfareportingAccountsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accounts",
    validator: validate_DfareportingAccountsUpdate_579142,
    base: "/dfareporting/v3.1", url: url_DfareportingAccountsUpdate_579143,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountsList_579119 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountsList_579121(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountsList_579120(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the list of accounts, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579122 = path.getOrDefault("profileId")
  valid_579122 = validateParameter(valid_579122, JString, required = true,
                                 default = nil)
  if valid_579122 != nil:
    section.add "profileId", valid_579122
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   active: JBool
  ##         : Select only active accounts. Don't set this field to select both active and non-active accounts.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "account*2015" will return objects with names like "account June 2015", "account April 2015", or simply "account 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "account" will match objects with name "my account", "account 2015", or simply "account".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only accounts with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_579123 = query.getOrDefault("key")
  valid_579123 = validateParameter(valid_579123, JString, required = false,
                                 default = nil)
  if valid_579123 != nil:
    section.add "key", valid_579123
  var valid_579124 = query.getOrDefault("prettyPrint")
  valid_579124 = validateParameter(valid_579124, JBool, required = false,
                                 default = newJBool(true))
  if valid_579124 != nil:
    section.add "prettyPrint", valid_579124
  var valid_579125 = query.getOrDefault("oauth_token")
  valid_579125 = validateParameter(valid_579125, JString, required = false,
                                 default = nil)
  if valid_579125 != nil:
    section.add "oauth_token", valid_579125
  var valid_579126 = query.getOrDefault("active")
  valid_579126 = validateParameter(valid_579126, JBool, required = false, default = nil)
  if valid_579126 != nil:
    section.add "active", valid_579126
  var valid_579127 = query.getOrDefault("sortField")
  valid_579127 = validateParameter(valid_579127, JString, required = false,
                                 default = newJString("ID"))
  if valid_579127 != nil:
    section.add "sortField", valid_579127
  var valid_579128 = query.getOrDefault("alt")
  valid_579128 = validateParameter(valid_579128, JString, required = false,
                                 default = newJString("json"))
  if valid_579128 != nil:
    section.add "alt", valid_579128
  var valid_579129 = query.getOrDefault("userIp")
  valid_579129 = validateParameter(valid_579129, JString, required = false,
                                 default = nil)
  if valid_579129 != nil:
    section.add "userIp", valid_579129
  var valid_579130 = query.getOrDefault("quotaUser")
  valid_579130 = validateParameter(valid_579130, JString, required = false,
                                 default = nil)
  if valid_579130 != nil:
    section.add "quotaUser", valid_579130
  var valid_579131 = query.getOrDefault("pageToken")
  valid_579131 = validateParameter(valid_579131, JString, required = false,
                                 default = nil)
  if valid_579131 != nil:
    section.add "pageToken", valid_579131
  var valid_579132 = query.getOrDefault("searchString")
  valid_579132 = validateParameter(valid_579132, JString, required = false,
                                 default = nil)
  if valid_579132 != nil:
    section.add "searchString", valid_579132
  var valid_579133 = query.getOrDefault("sortOrder")
  valid_579133 = validateParameter(valid_579133, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_579133 != nil:
    section.add "sortOrder", valid_579133
  var valid_579134 = query.getOrDefault("ids")
  valid_579134 = validateParameter(valid_579134, JArray, required = false,
                                 default = nil)
  if valid_579134 != nil:
    section.add "ids", valid_579134
  var valid_579135 = query.getOrDefault("fields")
  valid_579135 = validateParameter(valid_579135, JString, required = false,
                                 default = nil)
  if valid_579135 != nil:
    section.add "fields", valid_579135
  var valid_579136 = query.getOrDefault("maxResults")
  valid_579136 = validateParameter(valid_579136, JInt, required = false,
                                 default = newJInt(1000))
  if valid_579136 != nil:
    section.add "maxResults", valid_579136
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579137: Call_DfareportingAccountsList_579119; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the list of accounts, possibly filtered. This method supports paging.
  ## 
  let valid = call_579137.validator(path, query, header, formData, body)
  let scheme = call_579137.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579137.url(scheme.get, call_579137.host, call_579137.base,
                         call_579137.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579137, url, valid)

proc call*(call_579138: Call_DfareportingAccountsList_579119; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          active: bool = false; sortField: string = "ID"; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          ids: JsonNode = nil; fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingAccountsList
  ## Retrieves the list of accounts, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   active: bool
  ##         : Select only active accounts. Don't set this field to select both active and non-active accounts.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "account*2015" will return objects with names like "account June 2015", "account April 2015", or simply "account 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "account" will match objects with name "my account", "account 2015", or simply "account".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only accounts with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_579139 = newJObject()
  var query_579140 = newJObject()
  add(query_579140, "key", newJString(key))
  add(query_579140, "prettyPrint", newJBool(prettyPrint))
  add(query_579140, "oauth_token", newJString(oauthToken))
  add(query_579140, "active", newJBool(active))
  add(path_579139, "profileId", newJString(profileId))
  add(query_579140, "sortField", newJString(sortField))
  add(query_579140, "alt", newJString(alt))
  add(query_579140, "userIp", newJString(userIp))
  add(query_579140, "quotaUser", newJString(quotaUser))
  add(query_579140, "pageToken", newJString(pageToken))
  add(query_579140, "searchString", newJString(searchString))
  add(query_579140, "sortOrder", newJString(sortOrder))
  if ids != nil:
    query_579140.add "ids", ids
  add(query_579140, "fields", newJString(fields))
  add(query_579140, "maxResults", newJInt(maxResults))
  result = call_579138.call(path_579139, query_579140, nil, nil, nil)

var dfareportingAccountsList* = Call_DfareportingAccountsList_579119(
    name: "dfareportingAccountsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accounts",
    validator: validate_DfareportingAccountsList_579120,
    base: "/dfareporting/v3.1", url: url_DfareportingAccountsList_579121,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountsPatch_579158 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountsPatch_579160(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountsPatch_579159(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing account. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579161 = path.getOrDefault("profileId")
  valid_579161 = validateParameter(valid_579161, JString, required = true,
                                 default = nil)
  if valid_579161 != nil:
    section.add "profileId", valid_579161
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Account ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579162 = query.getOrDefault("key")
  valid_579162 = validateParameter(valid_579162, JString, required = false,
                                 default = nil)
  if valid_579162 != nil:
    section.add "key", valid_579162
  var valid_579163 = query.getOrDefault("prettyPrint")
  valid_579163 = validateParameter(valid_579163, JBool, required = false,
                                 default = newJBool(true))
  if valid_579163 != nil:
    section.add "prettyPrint", valid_579163
  var valid_579164 = query.getOrDefault("oauth_token")
  valid_579164 = validateParameter(valid_579164, JString, required = false,
                                 default = nil)
  if valid_579164 != nil:
    section.add "oauth_token", valid_579164
  var valid_579165 = query.getOrDefault("alt")
  valid_579165 = validateParameter(valid_579165, JString, required = false,
                                 default = newJString("json"))
  if valid_579165 != nil:
    section.add "alt", valid_579165
  var valid_579166 = query.getOrDefault("userIp")
  valid_579166 = validateParameter(valid_579166, JString, required = false,
                                 default = nil)
  if valid_579166 != nil:
    section.add "userIp", valid_579166
  var valid_579167 = query.getOrDefault("quotaUser")
  valid_579167 = validateParameter(valid_579167, JString, required = false,
                                 default = nil)
  if valid_579167 != nil:
    section.add "quotaUser", valid_579167
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_579168 = query.getOrDefault("id")
  valid_579168 = validateParameter(valid_579168, JString, required = true,
                                 default = nil)
  if valid_579168 != nil:
    section.add "id", valid_579168
  var valid_579169 = query.getOrDefault("fields")
  valid_579169 = validateParameter(valid_579169, JString, required = false,
                                 default = nil)
  if valid_579169 != nil:
    section.add "fields", valid_579169
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579171: Call_DfareportingAccountsPatch_579158; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing account. This method supports patch semantics.
  ## 
  let valid = call_579171.validator(path, query, header, formData, body)
  let scheme = call_579171.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579171.url(scheme.get, call_579171.host, call_579171.base,
                         call_579171.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579171, url, valid)

proc call*(call_579172: Call_DfareportingAccountsPatch_579158; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAccountsPatch
  ## Updates an existing account. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Account ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579173 = newJObject()
  var query_579174 = newJObject()
  var body_579175 = newJObject()
  add(query_579174, "key", newJString(key))
  add(query_579174, "prettyPrint", newJBool(prettyPrint))
  add(query_579174, "oauth_token", newJString(oauthToken))
  add(path_579173, "profileId", newJString(profileId))
  add(query_579174, "alt", newJString(alt))
  add(query_579174, "userIp", newJString(userIp))
  add(query_579174, "quotaUser", newJString(quotaUser))
  add(query_579174, "id", newJString(id))
  if body != nil:
    body_579175 = body
  add(query_579174, "fields", newJString(fields))
  result = call_579172.call(path_579173, query_579174, nil, nil, body_579175)

var dfareportingAccountsPatch* = Call_DfareportingAccountsPatch_579158(
    name: "dfareportingAccountsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accounts",
    validator: validate_DfareportingAccountsPatch_579159,
    base: "/dfareporting/v3.1", url: url_DfareportingAccountsPatch_579160,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountsGet_579176 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountsGet_579178(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accounts/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountsGet_579177(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one account by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Account ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579179 = path.getOrDefault("profileId")
  valid_579179 = validateParameter(valid_579179, JString, required = true,
                                 default = nil)
  if valid_579179 != nil:
    section.add "profileId", valid_579179
  var valid_579180 = path.getOrDefault("id")
  valid_579180 = validateParameter(valid_579180, JString, required = true,
                                 default = nil)
  if valid_579180 != nil:
    section.add "id", valid_579180
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579181 = query.getOrDefault("key")
  valid_579181 = validateParameter(valid_579181, JString, required = false,
                                 default = nil)
  if valid_579181 != nil:
    section.add "key", valid_579181
  var valid_579182 = query.getOrDefault("prettyPrint")
  valid_579182 = validateParameter(valid_579182, JBool, required = false,
                                 default = newJBool(true))
  if valid_579182 != nil:
    section.add "prettyPrint", valid_579182
  var valid_579183 = query.getOrDefault("oauth_token")
  valid_579183 = validateParameter(valid_579183, JString, required = false,
                                 default = nil)
  if valid_579183 != nil:
    section.add "oauth_token", valid_579183
  var valid_579184 = query.getOrDefault("alt")
  valid_579184 = validateParameter(valid_579184, JString, required = false,
                                 default = newJString("json"))
  if valid_579184 != nil:
    section.add "alt", valid_579184
  var valid_579185 = query.getOrDefault("userIp")
  valid_579185 = validateParameter(valid_579185, JString, required = false,
                                 default = nil)
  if valid_579185 != nil:
    section.add "userIp", valid_579185
  var valid_579186 = query.getOrDefault("quotaUser")
  valid_579186 = validateParameter(valid_579186, JString, required = false,
                                 default = nil)
  if valid_579186 != nil:
    section.add "quotaUser", valid_579186
  var valid_579187 = query.getOrDefault("fields")
  valid_579187 = validateParameter(valid_579187, JString, required = false,
                                 default = nil)
  if valid_579187 != nil:
    section.add "fields", valid_579187
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579188: Call_DfareportingAccountsGet_579176; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one account by ID.
  ## 
  let valid = call_579188.validator(path, query, header, formData, body)
  let scheme = call_579188.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579188.url(scheme.get, call_579188.host, call_579188.base,
                         call_579188.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579188, url, valid)

proc call*(call_579189: Call_DfareportingAccountsGet_579176; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingAccountsGet
  ## Gets one account by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Account ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579190 = newJObject()
  var query_579191 = newJObject()
  add(query_579191, "key", newJString(key))
  add(query_579191, "prettyPrint", newJBool(prettyPrint))
  add(query_579191, "oauth_token", newJString(oauthToken))
  add(path_579190, "profileId", newJString(profileId))
  add(path_579190, "id", newJString(id))
  add(query_579191, "alt", newJString(alt))
  add(query_579191, "userIp", newJString(userIp))
  add(query_579191, "quotaUser", newJString(quotaUser))
  add(query_579191, "fields", newJString(fields))
  result = call_579189.call(path_579190, query_579191, nil, nil, nil)

var dfareportingAccountsGet* = Call_DfareportingAccountsGet_579176(
    name: "dfareportingAccountsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accounts/{id}",
    validator: validate_DfareportingAccountsGet_579177,
    base: "/dfareporting/v3.1", url: url_DfareportingAccountsGet_579178,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdsUpdate_579230 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdsUpdate_579232(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsUpdate_579231(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing ad.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579233 = path.getOrDefault("profileId")
  valid_579233 = validateParameter(valid_579233, JString, required = true,
                                 default = nil)
  if valid_579233 != nil:
    section.add "profileId", valid_579233
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579234 = query.getOrDefault("key")
  valid_579234 = validateParameter(valid_579234, JString, required = false,
                                 default = nil)
  if valid_579234 != nil:
    section.add "key", valid_579234
  var valid_579235 = query.getOrDefault("prettyPrint")
  valid_579235 = validateParameter(valid_579235, JBool, required = false,
                                 default = newJBool(true))
  if valid_579235 != nil:
    section.add "prettyPrint", valid_579235
  var valid_579236 = query.getOrDefault("oauth_token")
  valid_579236 = validateParameter(valid_579236, JString, required = false,
                                 default = nil)
  if valid_579236 != nil:
    section.add "oauth_token", valid_579236
  var valid_579237 = query.getOrDefault("alt")
  valid_579237 = validateParameter(valid_579237, JString, required = false,
                                 default = newJString("json"))
  if valid_579237 != nil:
    section.add "alt", valid_579237
  var valid_579238 = query.getOrDefault("userIp")
  valid_579238 = validateParameter(valid_579238, JString, required = false,
                                 default = nil)
  if valid_579238 != nil:
    section.add "userIp", valid_579238
  var valid_579239 = query.getOrDefault("quotaUser")
  valid_579239 = validateParameter(valid_579239, JString, required = false,
                                 default = nil)
  if valid_579239 != nil:
    section.add "quotaUser", valid_579239
  var valid_579240 = query.getOrDefault("fields")
  valid_579240 = validateParameter(valid_579240, JString, required = false,
                                 default = nil)
  if valid_579240 != nil:
    section.add "fields", valid_579240
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579242: Call_DfareportingAdsUpdate_579230; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing ad.
  ## 
  let valid = call_579242.validator(path, query, header, formData, body)
  let scheme = call_579242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579242.url(scheme.get, call_579242.host, call_579242.base,
                         call_579242.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579242, url, valid)

proc call*(call_579243: Call_DfareportingAdsUpdate_579230; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdsUpdate
  ## Updates an existing ad.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579244 = newJObject()
  var query_579245 = newJObject()
  var body_579246 = newJObject()
  add(query_579245, "key", newJString(key))
  add(query_579245, "prettyPrint", newJBool(prettyPrint))
  add(query_579245, "oauth_token", newJString(oauthToken))
  add(path_579244, "profileId", newJString(profileId))
  add(query_579245, "alt", newJString(alt))
  add(query_579245, "userIp", newJString(userIp))
  add(query_579245, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579246 = body
  add(query_579245, "fields", newJString(fields))
  result = call_579243.call(path_579244, query_579245, nil, nil, body_579246)

var dfareportingAdsUpdate* = Call_DfareportingAdsUpdate_579230(
    name: "dfareportingAdsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads",
    validator: validate_DfareportingAdsUpdate_579231, base: "/dfareporting/v3.1",
    url: url_DfareportingAdsUpdate_579232, schemes: {Scheme.Https})
type
  Call_DfareportingAdsInsert_579247 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdsInsert_579249(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsInsert_579248(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new ad.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579250 = path.getOrDefault("profileId")
  valid_579250 = validateParameter(valid_579250, JString, required = true,
                                 default = nil)
  if valid_579250 != nil:
    section.add "profileId", valid_579250
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579251 = query.getOrDefault("key")
  valid_579251 = validateParameter(valid_579251, JString, required = false,
                                 default = nil)
  if valid_579251 != nil:
    section.add "key", valid_579251
  var valid_579252 = query.getOrDefault("prettyPrint")
  valid_579252 = validateParameter(valid_579252, JBool, required = false,
                                 default = newJBool(true))
  if valid_579252 != nil:
    section.add "prettyPrint", valid_579252
  var valid_579253 = query.getOrDefault("oauth_token")
  valid_579253 = validateParameter(valid_579253, JString, required = false,
                                 default = nil)
  if valid_579253 != nil:
    section.add "oauth_token", valid_579253
  var valid_579254 = query.getOrDefault("alt")
  valid_579254 = validateParameter(valid_579254, JString, required = false,
                                 default = newJString("json"))
  if valid_579254 != nil:
    section.add "alt", valid_579254
  var valid_579255 = query.getOrDefault("userIp")
  valid_579255 = validateParameter(valid_579255, JString, required = false,
                                 default = nil)
  if valid_579255 != nil:
    section.add "userIp", valid_579255
  var valid_579256 = query.getOrDefault("quotaUser")
  valid_579256 = validateParameter(valid_579256, JString, required = false,
                                 default = nil)
  if valid_579256 != nil:
    section.add "quotaUser", valid_579256
  var valid_579257 = query.getOrDefault("fields")
  valid_579257 = validateParameter(valid_579257, JString, required = false,
                                 default = nil)
  if valid_579257 != nil:
    section.add "fields", valid_579257
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579259: Call_DfareportingAdsInsert_579247; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new ad.
  ## 
  let valid = call_579259.validator(path, query, header, formData, body)
  let scheme = call_579259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579259.url(scheme.get, call_579259.host, call_579259.base,
                         call_579259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579259, url, valid)

proc call*(call_579260: Call_DfareportingAdsInsert_579247; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdsInsert
  ## Inserts a new ad.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579261 = newJObject()
  var query_579262 = newJObject()
  var body_579263 = newJObject()
  add(query_579262, "key", newJString(key))
  add(query_579262, "prettyPrint", newJBool(prettyPrint))
  add(query_579262, "oauth_token", newJString(oauthToken))
  add(path_579261, "profileId", newJString(profileId))
  add(query_579262, "alt", newJString(alt))
  add(query_579262, "userIp", newJString(userIp))
  add(query_579262, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579263 = body
  add(query_579262, "fields", newJString(fields))
  result = call_579260.call(path_579261, query_579262, nil, nil, body_579263)

var dfareportingAdsInsert* = Call_DfareportingAdsInsert_579247(
    name: "dfareportingAdsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads",
    validator: validate_DfareportingAdsInsert_579248, base: "/dfareporting/v3.1",
    url: url_DfareportingAdsInsert_579249, schemes: {Scheme.Https})
type
  Call_DfareportingAdsList_579192 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdsList_579194(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsList_579193(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Retrieves a list of ads, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579195 = path.getOrDefault("profileId")
  valid_579195 = validateParameter(valid_579195, JString, required = true,
                                 default = nil)
  if valid_579195 != nil:
    section.add "profileId", valid_579195
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   remarketingListIds: JArray
  ##                     : Select only ads whose list targeting expression use these remarketing list IDs.
  ##   audienceSegmentIds: JArray
  ##                     : Select only ads with these audience segment IDs.
  ##   active: JBool
  ##         : Select only active ads.
  ##   landingPageIds: JArray
  ##                 : Select only ads with these landing page IDs.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived ads.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   placementIds: JArray
  ##               : Select only ads with these placement IDs assigned.
  ##   overriddenEventTagId: JString
  ##                       : Select only ads with this event tag override ID.
  ##   type: JArray
  ##       : Select only ads with these types.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "ad*2015" will return objects with names like "ad June 2015", "ad April 2015", or simply "ad 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "ad" will match objects with name "my ad", "ad 2015", or simply "ad".
  ##   compatibility: JString
  ##                : Select default ads with the specified compatibility. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering an in-stream video ads developed with the VAST standard.
  ##   sizeIds: JArray
  ##          : Select only ads with these size IDs.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   sslCompliant: JBool
  ##               : Select only ads that are SSL-compliant.
  ##   advertiserId: JString
  ##               : Select only ads with this advertiser ID.
  ##   dynamicClickTracker: JBool
  ##                      : Select only dynamic click trackers. Applicable when type is AD_SERVING_CLICK_TRACKER. If true, select dynamic click trackers. If false, select static click trackers. Leave unset to select both.
  ##   campaignIds: JArray
  ##              : Select only ads with these campaign IDs.
  ##   ids: JArray
  ##      : Select only ads with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   creativeOptimizationConfigurationIds: JArray
  ##                                       : Select only ads with these creative optimization configuration IDs.
  ##   sslRequired: JBool
  ##              : Select only ads that require SSL.
  ##   creativeIds: JArray
  ##              : Select only ads with these creative IDs assigned.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_579196 = query.getOrDefault("key")
  valid_579196 = validateParameter(valid_579196, JString, required = false,
                                 default = nil)
  if valid_579196 != nil:
    section.add "key", valid_579196
  var valid_579197 = query.getOrDefault("prettyPrint")
  valid_579197 = validateParameter(valid_579197, JBool, required = false,
                                 default = newJBool(true))
  if valid_579197 != nil:
    section.add "prettyPrint", valid_579197
  var valid_579198 = query.getOrDefault("oauth_token")
  valid_579198 = validateParameter(valid_579198, JString, required = false,
                                 default = nil)
  if valid_579198 != nil:
    section.add "oauth_token", valid_579198
  var valid_579199 = query.getOrDefault("remarketingListIds")
  valid_579199 = validateParameter(valid_579199, JArray, required = false,
                                 default = nil)
  if valid_579199 != nil:
    section.add "remarketingListIds", valid_579199
  var valid_579200 = query.getOrDefault("audienceSegmentIds")
  valid_579200 = validateParameter(valid_579200, JArray, required = false,
                                 default = nil)
  if valid_579200 != nil:
    section.add "audienceSegmentIds", valid_579200
  var valid_579201 = query.getOrDefault("active")
  valid_579201 = validateParameter(valid_579201, JBool, required = false, default = nil)
  if valid_579201 != nil:
    section.add "active", valid_579201
  var valid_579202 = query.getOrDefault("landingPageIds")
  valid_579202 = validateParameter(valid_579202, JArray, required = false,
                                 default = nil)
  if valid_579202 != nil:
    section.add "landingPageIds", valid_579202
  var valid_579203 = query.getOrDefault("sortField")
  valid_579203 = validateParameter(valid_579203, JString, required = false,
                                 default = newJString("ID"))
  if valid_579203 != nil:
    section.add "sortField", valid_579203
  var valid_579204 = query.getOrDefault("alt")
  valid_579204 = validateParameter(valid_579204, JString, required = false,
                                 default = newJString("json"))
  if valid_579204 != nil:
    section.add "alt", valid_579204
  var valid_579205 = query.getOrDefault("userIp")
  valid_579205 = validateParameter(valid_579205, JString, required = false,
                                 default = nil)
  if valid_579205 != nil:
    section.add "userIp", valid_579205
  var valid_579206 = query.getOrDefault("archived")
  valid_579206 = validateParameter(valid_579206, JBool, required = false, default = nil)
  if valid_579206 != nil:
    section.add "archived", valid_579206
  var valid_579207 = query.getOrDefault("quotaUser")
  valid_579207 = validateParameter(valid_579207, JString, required = false,
                                 default = nil)
  if valid_579207 != nil:
    section.add "quotaUser", valid_579207
  var valid_579208 = query.getOrDefault("placementIds")
  valid_579208 = validateParameter(valid_579208, JArray, required = false,
                                 default = nil)
  if valid_579208 != nil:
    section.add "placementIds", valid_579208
  var valid_579209 = query.getOrDefault("overriddenEventTagId")
  valid_579209 = validateParameter(valid_579209, JString, required = false,
                                 default = nil)
  if valid_579209 != nil:
    section.add "overriddenEventTagId", valid_579209
  var valid_579210 = query.getOrDefault("type")
  valid_579210 = validateParameter(valid_579210, JArray, required = false,
                                 default = nil)
  if valid_579210 != nil:
    section.add "type", valid_579210
  var valid_579211 = query.getOrDefault("pageToken")
  valid_579211 = validateParameter(valid_579211, JString, required = false,
                                 default = nil)
  if valid_579211 != nil:
    section.add "pageToken", valid_579211
  var valid_579212 = query.getOrDefault("searchString")
  valid_579212 = validateParameter(valid_579212, JString, required = false,
                                 default = nil)
  if valid_579212 != nil:
    section.add "searchString", valid_579212
  var valid_579213 = query.getOrDefault("compatibility")
  valid_579213 = validateParameter(valid_579213, JString, required = false,
                                 default = newJString("APP"))
  if valid_579213 != nil:
    section.add "compatibility", valid_579213
  var valid_579214 = query.getOrDefault("sizeIds")
  valid_579214 = validateParameter(valid_579214, JArray, required = false,
                                 default = nil)
  if valid_579214 != nil:
    section.add "sizeIds", valid_579214
  var valid_579215 = query.getOrDefault("sortOrder")
  valid_579215 = validateParameter(valid_579215, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_579215 != nil:
    section.add "sortOrder", valid_579215
  var valid_579216 = query.getOrDefault("sslCompliant")
  valid_579216 = validateParameter(valid_579216, JBool, required = false, default = nil)
  if valid_579216 != nil:
    section.add "sslCompliant", valid_579216
  var valid_579217 = query.getOrDefault("advertiserId")
  valid_579217 = validateParameter(valid_579217, JString, required = false,
                                 default = nil)
  if valid_579217 != nil:
    section.add "advertiserId", valid_579217
  var valid_579218 = query.getOrDefault("dynamicClickTracker")
  valid_579218 = validateParameter(valid_579218, JBool, required = false, default = nil)
  if valid_579218 != nil:
    section.add "dynamicClickTracker", valid_579218
  var valid_579219 = query.getOrDefault("campaignIds")
  valid_579219 = validateParameter(valid_579219, JArray, required = false,
                                 default = nil)
  if valid_579219 != nil:
    section.add "campaignIds", valid_579219
  var valid_579220 = query.getOrDefault("ids")
  valid_579220 = validateParameter(valid_579220, JArray, required = false,
                                 default = nil)
  if valid_579220 != nil:
    section.add "ids", valid_579220
  var valid_579221 = query.getOrDefault("fields")
  valid_579221 = validateParameter(valid_579221, JString, required = false,
                                 default = nil)
  if valid_579221 != nil:
    section.add "fields", valid_579221
  var valid_579222 = query.getOrDefault("creativeOptimizationConfigurationIds")
  valid_579222 = validateParameter(valid_579222, JArray, required = false,
                                 default = nil)
  if valid_579222 != nil:
    section.add "creativeOptimizationConfigurationIds", valid_579222
  var valid_579223 = query.getOrDefault("sslRequired")
  valid_579223 = validateParameter(valid_579223, JBool, required = false, default = nil)
  if valid_579223 != nil:
    section.add "sslRequired", valid_579223
  var valid_579224 = query.getOrDefault("creativeIds")
  valid_579224 = validateParameter(valid_579224, JArray, required = false,
                                 default = nil)
  if valid_579224 != nil:
    section.add "creativeIds", valid_579224
  var valid_579225 = query.getOrDefault("maxResults")
  valid_579225 = validateParameter(valid_579225, JInt, required = false,
                                 default = newJInt(1000))
  if valid_579225 != nil:
    section.add "maxResults", valid_579225
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579226: Call_DfareportingAdsList_579192; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of ads, possibly filtered. This method supports paging.
  ## 
  let valid = call_579226.validator(path, query, header, formData, body)
  let scheme = call_579226.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579226.url(scheme.get, call_579226.host, call_579226.base,
                         call_579226.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579226, url, valid)

proc call*(call_579227: Call_DfareportingAdsList_579192; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          remarketingListIds: JsonNode = nil; audienceSegmentIds: JsonNode = nil;
          active: bool = false; landingPageIds: JsonNode = nil;
          sortField: string = "ID"; alt: string = "json"; userIp: string = "";
          archived: bool = false; quotaUser: string = ""; placementIds: JsonNode = nil;
          overriddenEventTagId: string = ""; `type`: JsonNode = nil;
          pageToken: string = ""; searchString: string = "";
          compatibility: string = "APP"; sizeIds: JsonNode = nil;
          sortOrder: string = "ASCENDING"; sslCompliant: bool = false;
          advertiserId: string = ""; dynamicClickTracker: bool = false;
          campaignIds: JsonNode = nil; ids: JsonNode = nil; fields: string = "";
          creativeOptimizationConfigurationIds: JsonNode = nil;
          sslRequired: bool = false; creativeIds: JsonNode = nil; maxResults: int = 1000): Recallable =
  ## dfareportingAdsList
  ## Retrieves a list of ads, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   remarketingListIds: JArray
  ##                     : Select only ads whose list targeting expression use these remarketing list IDs.
  ##   audienceSegmentIds: JArray
  ##                     : Select only ads with these audience segment IDs.
  ##   active: bool
  ##         : Select only active ads.
  ##   landingPageIds: JArray
  ##                 : Select only ads with these landing page IDs.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived ads.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   placementIds: JArray
  ##               : Select only ads with these placement IDs assigned.
  ##   overriddenEventTagId: string
  ##                       : Select only ads with this event tag override ID.
  ##   type: JArray
  ##       : Select only ads with these types.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "ad*2015" will return objects with names like "ad June 2015", "ad April 2015", or simply "ad 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "ad" will match objects with name "my ad", "ad 2015", or simply "ad".
  ##   compatibility: string
  ##                : Select default ads with the specified compatibility. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering an in-stream video ads developed with the VAST standard.
  ##   sizeIds: JArray
  ##          : Select only ads with these size IDs.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   sslCompliant: bool
  ##               : Select only ads that are SSL-compliant.
  ##   advertiserId: string
  ##               : Select only ads with this advertiser ID.
  ##   dynamicClickTracker: bool
  ##                      : Select only dynamic click trackers. Applicable when type is AD_SERVING_CLICK_TRACKER. If true, select dynamic click trackers. If false, select static click trackers. Leave unset to select both.
  ##   campaignIds: JArray
  ##              : Select only ads with these campaign IDs.
  ##   ids: JArray
  ##      : Select only ads with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   creativeOptimizationConfigurationIds: JArray
  ##                                       : Select only ads with these creative optimization configuration IDs.
  ##   sslRequired: bool
  ##              : Select only ads that require SSL.
  ##   creativeIds: JArray
  ##              : Select only ads with these creative IDs assigned.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_579228 = newJObject()
  var query_579229 = newJObject()
  add(query_579229, "key", newJString(key))
  add(query_579229, "prettyPrint", newJBool(prettyPrint))
  add(query_579229, "oauth_token", newJString(oauthToken))
  if remarketingListIds != nil:
    query_579229.add "remarketingListIds", remarketingListIds
  if audienceSegmentIds != nil:
    query_579229.add "audienceSegmentIds", audienceSegmentIds
  add(query_579229, "active", newJBool(active))
  if landingPageIds != nil:
    query_579229.add "landingPageIds", landingPageIds
  add(path_579228, "profileId", newJString(profileId))
  add(query_579229, "sortField", newJString(sortField))
  add(query_579229, "alt", newJString(alt))
  add(query_579229, "userIp", newJString(userIp))
  add(query_579229, "archived", newJBool(archived))
  add(query_579229, "quotaUser", newJString(quotaUser))
  if placementIds != nil:
    query_579229.add "placementIds", placementIds
  add(query_579229, "overriddenEventTagId", newJString(overriddenEventTagId))
  if `type` != nil:
    query_579229.add "type", `type`
  add(query_579229, "pageToken", newJString(pageToken))
  add(query_579229, "searchString", newJString(searchString))
  add(query_579229, "compatibility", newJString(compatibility))
  if sizeIds != nil:
    query_579229.add "sizeIds", sizeIds
  add(query_579229, "sortOrder", newJString(sortOrder))
  add(query_579229, "sslCompliant", newJBool(sslCompliant))
  add(query_579229, "advertiserId", newJString(advertiserId))
  add(query_579229, "dynamicClickTracker", newJBool(dynamicClickTracker))
  if campaignIds != nil:
    query_579229.add "campaignIds", campaignIds
  if ids != nil:
    query_579229.add "ids", ids
  add(query_579229, "fields", newJString(fields))
  if creativeOptimizationConfigurationIds != nil:
    query_579229.add "creativeOptimizationConfigurationIds",
                    creativeOptimizationConfigurationIds
  add(query_579229, "sslRequired", newJBool(sslRequired))
  if creativeIds != nil:
    query_579229.add "creativeIds", creativeIds
  add(query_579229, "maxResults", newJInt(maxResults))
  result = call_579227.call(path_579228, query_579229, nil, nil, nil)

var dfareportingAdsList* = Call_DfareportingAdsList_579192(
    name: "dfareportingAdsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads",
    validator: validate_DfareportingAdsList_579193, base: "/dfareporting/v3.1",
    url: url_DfareportingAdsList_579194, schemes: {Scheme.Https})
type
  Call_DfareportingAdsPatch_579264 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdsPatch_579266(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsPatch_579265(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing ad. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579267 = path.getOrDefault("profileId")
  valid_579267 = validateParameter(valid_579267, JString, required = true,
                                 default = nil)
  if valid_579267 != nil:
    section.add "profileId", valid_579267
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Ad ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579268 = query.getOrDefault("key")
  valid_579268 = validateParameter(valid_579268, JString, required = false,
                                 default = nil)
  if valid_579268 != nil:
    section.add "key", valid_579268
  var valid_579269 = query.getOrDefault("prettyPrint")
  valid_579269 = validateParameter(valid_579269, JBool, required = false,
                                 default = newJBool(true))
  if valid_579269 != nil:
    section.add "prettyPrint", valid_579269
  var valid_579270 = query.getOrDefault("oauth_token")
  valid_579270 = validateParameter(valid_579270, JString, required = false,
                                 default = nil)
  if valid_579270 != nil:
    section.add "oauth_token", valid_579270
  var valid_579271 = query.getOrDefault("alt")
  valid_579271 = validateParameter(valid_579271, JString, required = false,
                                 default = newJString("json"))
  if valid_579271 != nil:
    section.add "alt", valid_579271
  var valid_579272 = query.getOrDefault("userIp")
  valid_579272 = validateParameter(valid_579272, JString, required = false,
                                 default = nil)
  if valid_579272 != nil:
    section.add "userIp", valid_579272
  var valid_579273 = query.getOrDefault("quotaUser")
  valid_579273 = validateParameter(valid_579273, JString, required = false,
                                 default = nil)
  if valid_579273 != nil:
    section.add "quotaUser", valid_579273
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_579274 = query.getOrDefault("id")
  valid_579274 = validateParameter(valid_579274, JString, required = true,
                                 default = nil)
  if valid_579274 != nil:
    section.add "id", valid_579274
  var valid_579275 = query.getOrDefault("fields")
  valid_579275 = validateParameter(valid_579275, JString, required = false,
                                 default = nil)
  if valid_579275 != nil:
    section.add "fields", valid_579275
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579277: Call_DfareportingAdsPatch_579264; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing ad. This method supports patch semantics.
  ## 
  let valid = call_579277.validator(path, query, header, formData, body)
  let scheme = call_579277.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579277.url(scheme.get, call_579277.host, call_579277.base,
                         call_579277.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579277, url, valid)

proc call*(call_579278: Call_DfareportingAdsPatch_579264; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdsPatch
  ## Updates an existing ad. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Ad ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579279 = newJObject()
  var query_579280 = newJObject()
  var body_579281 = newJObject()
  add(query_579280, "key", newJString(key))
  add(query_579280, "prettyPrint", newJBool(prettyPrint))
  add(query_579280, "oauth_token", newJString(oauthToken))
  add(path_579279, "profileId", newJString(profileId))
  add(query_579280, "alt", newJString(alt))
  add(query_579280, "userIp", newJString(userIp))
  add(query_579280, "quotaUser", newJString(quotaUser))
  add(query_579280, "id", newJString(id))
  if body != nil:
    body_579281 = body
  add(query_579280, "fields", newJString(fields))
  result = call_579278.call(path_579279, query_579280, nil, nil, body_579281)

var dfareportingAdsPatch* = Call_DfareportingAdsPatch_579264(
    name: "dfareportingAdsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads",
    validator: validate_DfareportingAdsPatch_579265, base: "/dfareporting/v3.1",
    url: url_DfareportingAdsPatch_579266, schemes: {Scheme.Https})
type
  Call_DfareportingAdsGet_579282 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdsGet_579284(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsGet_579283(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets one ad by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Ad ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579285 = path.getOrDefault("profileId")
  valid_579285 = validateParameter(valid_579285, JString, required = true,
                                 default = nil)
  if valid_579285 != nil:
    section.add "profileId", valid_579285
  var valid_579286 = path.getOrDefault("id")
  valid_579286 = validateParameter(valid_579286, JString, required = true,
                                 default = nil)
  if valid_579286 != nil:
    section.add "id", valid_579286
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579287 = query.getOrDefault("key")
  valid_579287 = validateParameter(valid_579287, JString, required = false,
                                 default = nil)
  if valid_579287 != nil:
    section.add "key", valid_579287
  var valid_579288 = query.getOrDefault("prettyPrint")
  valid_579288 = validateParameter(valid_579288, JBool, required = false,
                                 default = newJBool(true))
  if valid_579288 != nil:
    section.add "prettyPrint", valid_579288
  var valid_579289 = query.getOrDefault("oauth_token")
  valid_579289 = validateParameter(valid_579289, JString, required = false,
                                 default = nil)
  if valid_579289 != nil:
    section.add "oauth_token", valid_579289
  var valid_579290 = query.getOrDefault("alt")
  valid_579290 = validateParameter(valid_579290, JString, required = false,
                                 default = newJString("json"))
  if valid_579290 != nil:
    section.add "alt", valid_579290
  var valid_579291 = query.getOrDefault("userIp")
  valid_579291 = validateParameter(valid_579291, JString, required = false,
                                 default = nil)
  if valid_579291 != nil:
    section.add "userIp", valid_579291
  var valid_579292 = query.getOrDefault("quotaUser")
  valid_579292 = validateParameter(valid_579292, JString, required = false,
                                 default = nil)
  if valid_579292 != nil:
    section.add "quotaUser", valid_579292
  var valid_579293 = query.getOrDefault("fields")
  valid_579293 = validateParameter(valid_579293, JString, required = false,
                                 default = nil)
  if valid_579293 != nil:
    section.add "fields", valid_579293
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579294: Call_DfareportingAdsGet_579282; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one ad by ID.
  ## 
  let valid = call_579294.validator(path, query, header, formData, body)
  let scheme = call_579294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579294.url(scheme.get, call_579294.host, call_579294.base,
                         call_579294.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579294, url, valid)

proc call*(call_579295: Call_DfareportingAdsGet_579282; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingAdsGet
  ## Gets one ad by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Ad ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579296 = newJObject()
  var query_579297 = newJObject()
  add(query_579297, "key", newJString(key))
  add(query_579297, "prettyPrint", newJBool(prettyPrint))
  add(query_579297, "oauth_token", newJString(oauthToken))
  add(path_579296, "profileId", newJString(profileId))
  add(path_579296, "id", newJString(id))
  add(query_579297, "alt", newJString(alt))
  add(query_579297, "userIp", newJString(userIp))
  add(query_579297, "quotaUser", newJString(quotaUser))
  add(query_579297, "fields", newJString(fields))
  result = call_579295.call(path_579296, query_579297, nil, nil, nil)

var dfareportingAdsGet* = Call_DfareportingAdsGet_579282(
    name: "dfareportingAdsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads/{id}",
    validator: validate_DfareportingAdsGet_579283, base: "/dfareporting/v3.1",
    url: url_DfareportingAdsGet_579284, schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsUpdate_579319 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserGroupsUpdate_579321(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsUpdate_579320(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing advertiser group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579322 = path.getOrDefault("profileId")
  valid_579322 = validateParameter(valid_579322, JString, required = true,
                                 default = nil)
  if valid_579322 != nil:
    section.add "profileId", valid_579322
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579323 = query.getOrDefault("key")
  valid_579323 = validateParameter(valid_579323, JString, required = false,
                                 default = nil)
  if valid_579323 != nil:
    section.add "key", valid_579323
  var valid_579324 = query.getOrDefault("prettyPrint")
  valid_579324 = validateParameter(valid_579324, JBool, required = false,
                                 default = newJBool(true))
  if valid_579324 != nil:
    section.add "prettyPrint", valid_579324
  var valid_579325 = query.getOrDefault("oauth_token")
  valid_579325 = validateParameter(valid_579325, JString, required = false,
                                 default = nil)
  if valid_579325 != nil:
    section.add "oauth_token", valid_579325
  var valid_579326 = query.getOrDefault("alt")
  valid_579326 = validateParameter(valid_579326, JString, required = false,
                                 default = newJString("json"))
  if valid_579326 != nil:
    section.add "alt", valid_579326
  var valid_579327 = query.getOrDefault("userIp")
  valid_579327 = validateParameter(valid_579327, JString, required = false,
                                 default = nil)
  if valid_579327 != nil:
    section.add "userIp", valid_579327
  var valid_579328 = query.getOrDefault("quotaUser")
  valid_579328 = validateParameter(valid_579328, JString, required = false,
                                 default = nil)
  if valid_579328 != nil:
    section.add "quotaUser", valid_579328
  var valid_579329 = query.getOrDefault("fields")
  valid_579329 = validateParameter(valid_579329, JString, required = false,
                                 default = nil)
  if valid_579329 != nil:
    section.add "fields", valid_579329
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579331: Call_DfareportingAdvertiserGroupsUpdate_579319;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing advertiser group.
  ## 
  let valid = call_579331.validator(path, query, header, formData, body)
  let scheme = call_579331.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579331.url(scheme.get, call_579331.host, call_579331.base,
                         call_579331.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579331, url, valid)

proc call*(call_579332: Call_DfareportingAdvertiserGroupsUpdate_579319;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdvertiserGroupsUpdate
  ## Updates an existing advertiser group.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579333 = newJObject()
  var query_579334 = newJObject()
  var body_579335 = newJObject()
  add(query_579334, "key", newJString(key))
  add(query_579334, "prettyPrint", newJBool(prettyPrint))
  add(query_579334, "oauth_token", newJString(oauthToken))
  add(path_579333, "profileId", newJString(profileId))
  add(query_579334, "alt", newJString(alt))
  add(query_579334, "userIp", newJString(userIp))
  add(query_579334, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579335 = body
  add(query_579334, "fields", newJString(fields))
  result = call_579332.call(path_579333, query_579334, nil, nil, body_579335)

var dfareportingAdvertiserGroupsUpdate* = Call_DfareportingAdvertiserGroupsUpdate_579319(
    name: "dfareportingAdvertiserGroupsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups",
    validator: validate_DfareportingAdvertiserGroupsUpdate_579320,
    base: "/dfareporting/v3.1", url: url_DfareportingAdvertiserGroupsUpdate_579321,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsInsert_579336 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserGroupsInsert_579338(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsInsert_579337(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new advertiser group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579339 = path.getOrDefault("profileId")
  valid_579339 = validateParameter(valid_579339, JString, required = true,
                                 default = nil)
  if valid_579339 != nil:
    section.add "profileId", valid_579339
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579340 = query.getOrDefault("key")
  valid_579340 = validateParameter(valid_579340, JString, required = false,
                                 default = nil)
  if valid_579340 != nil:
    section.add "key", valid_579340
  var valid_579341 = query.getOrDefault("prettyPrint")
  valid_579341 = validateParameter(valid_579341, JBool, required = false,
                                 default = newJBool(true))
  if valid_579341 != nil:
    section.add "prettyPrint", valid_579341
  var valid_579342 = query.getOrDefault("oauth_token")
  valid_579342 = validateParameter(valid_579342, JString, required = false,
                                 default = nil)
  if valid_579342 != nil:
    section.add "oauth_token", valid_579342
  var valid_579343 = query.getOrDefault("alt")
  valid_579343 = validateParameter(valid_579343, JString, required = false,
                                 default = newJString("json"))
  if valid_579343 != nil:
    section.add "alt", valid_579343
  var valid_579344 = query.getOrDefault("userIp")
  valid_579344 = validateParameter(valid_579344, JString, required = false,
                                 default = nil)
  if valid_579344 != nil:
    section.add "userIp", valid_579344
  var valid_579345 = query.getOrDefault("quotaUser")
  valid_579345 = validateParameter(valid_579345, JString, required = false,
                                 default = nil)
  if valid_579345 != nil:
    section.add "quotaUser", valid_579345
  var valid_579346 = query.getOrDefault("fields")
  valid_579346 = validateParameter(valid_579346, JString, required = false,
                                 default = nil)
  if valid_579346 != nil:
    section.add "fields", valid_579346
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579348: Call_DfareportingAdvertiserGroupsInsert_579336;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new advertiser group.
  ## 
  let valid = call_579348.validator(path, query, header, formData, body)
  let scheme = call_579348.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579348.url(scheme.get, call_579348.host, call_579348.base,
                         call_579348.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579348, url, valid)

proc call*(call_579349: Call_DfareportingAdvertiserGroupsInsert_579336;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdvertiserGroupsInsert
  ## Inserts a new advertiser group.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579350 = newJObject()
  var query_579351 = newJObject()
  var body_579352 = newJObject()
  add(query_579351, "key", newJString(key))
  add(query_579351, "prettyPrint", newJBool(prettyPrint))
  add(query_579351, "oauth_token", newJString(oauthToken))
  add(path_579350, "profileId", newJString(profileId))
  add(query_579351, "alt", newJString(alt))
  add(query_579351, "userIp", newJString(userIp))
  add(query_579351, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579352 = body
  add(query_579351, "fields", newJString(fields))
  result = call_579349.call(path_579350, query_579351, nil, nil, body_579352)

var dfareportingAdvertiserGroupsInsert* = Call_DfareportingAdvertiserGroupsInsert_579336(
    name: "dfareportingAdvertiserGroupsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups",
    validator: validate_DfareportingAdvertiserGroupsInsert_579337,
    base: "/dfareporting/v3.1", url: url_DfareportingAdvertiserGroupsInsert_579338,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsList_579298 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserGroupsList_579300(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsList_579299(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of advertiser groups, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579301 = path.getOrDefault("profileId")
  valid_579301 = validateParameter(valid_579301, JString, required = true,
                                 default = nil)
  if valid_579301 != nil:
    section.add "profileId", valid_579301
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser group June 2015", "advertiser group April 2015", or simply "advertiser group 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertisergroup" will match objects with name "my advertisergroup", "advertisergroup 2015", or simply "advertisergroup".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only advertiser groups with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_579302 = query.getOrDefault("key")
  valid_579302 = validateParameter(valid_579302, JString, required = false,
                                 default = nil)
  if valid_579302 != nil:
    section.add "key", valid_579302
  var valid_579303 = query.getOrDefault("prettyPrint")
  valid_579303 = validateParameter(valid_579303, JBool, required = false,
                                 default = newJBool(true))
  if valid_579303 != nil:
    section.add "prettyPrint", valid_579303
  var valid_579304 = query.getOrDefault("oauth_token")
  valid_579304 = validateParameter(valid_579304, JString, required = false,
                                 default = nil)
  if valid_579304 != nil:
    section.add "oauth_token", valid_579304
  var valid_579305 = query.getOrDefault("sortField")
  valid_579305 = validateParameter(valid_579305, JString, required = false,
                                 default = newJString("ID"))
  if valid_579305 != nil:
    section.add "sortField", valid_579305
  var valid_579306 = query.getOrDefault("alt")
  valid_579306 = validateParameter(valid_579306, JString, required = false,
                                 default = newJString("json"))
  if valid_579306 != nil:
    section.add "alt", valid_579306
  var valid_579307 = query.getOrDefault("userIp")
  valid_579307 = validateParameter(valid_579307, JString, required = false,
                                 default = nil)
  if valid_579307 != nil:
    section.add "userIp", valid_579307
  var valid_579308 = query.getOrDefault("quotaUser")
  valid_579308 = validateParameter(valid_579308, JString, required = false,
                                 default = nil)
  if valid_579308 != nil:
    section.add "quotaUser", valid_579308
  var valid_579309 = query.getOrDefault("pageToken")
  valid_579309 = validateParameter(valid_579309, JString, required = false,
                                 default = nil)
  if valid_579309 != nil:
    section.add "pageToken", valid_579309
  var valid_579310 = query.getOrDefault("searchString")
  valid_579310 = validateParameter(valid_579310, JString, required = false,
                                 default = nil)
  if valid_579310 != nil:
    section.add "searchString", valid_579310
  var valid_579311 = query.getOrDefault("sortOrder")
  valid_579311 = validateParameter(valid_579311, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_579311 != nil:
    section.add "sortOrder", valid_579311
  var valid_579312 = query.getOrDefault("ids")
  valid_579312 = validateParameter(valid_579312, JArray, required = false,
                                 default = nil)
  if valid_579312 != nil:
    section.add "ids", valid_579312
  var valid_579313 = query.getOrDefault("fields")
  valid_579313 = validateParameter(valid_579313, JString, required = false,
                                 default = nil)
  if valid_579313 != nil:
    section.add "fields", valid_579313
  var valid_579314 = query.getOrDefault("maxResults")
  valid_579314 = validateParameter(valid_579314, JInt, required = false,
                                 default = newJInt(1000))
  if valid_579314 != nil:
    section.add "maxResults", valid_579314
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579315: Call_DfareportingAdvertiserGroupsList_579298;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of advertiser groups, possibly filtered. This method supports paging.
  ## 
  let valid = call_579315.validator(path, query, header, formData, body)
  let scheme = call_579315.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579315.url(scheme.get, call_579315.host, call_579315.base,
                         call_579315.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579315, url, valid)

proc call*(call_579316: Call_DfareportingAdvertiserGroupsList_579298;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; sortField: string = "ID"; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          ids: JsonNode = nil; fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingAdvertiserGroupsList
  ## Retrieves a list of advertiser groups, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser group June 2015", "advertiser group April 2015", or simply "advertiser group 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertisergroup" will match objects with name "my advertisergroup", "advertisergroup 2015", or simply "advertisergroup".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only advertiser groups with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_579317 = newJObject()
  var query_579318 = newJObject()
  add(query_579318, "key", newJString(key))
  add(query_579318, "prettyPrint", newJBool(prettyPrint))
  add(query_579318, "oauth_token", newJString(oauthToken))
  add(path_579317, "profileId", newJString(profileId))
  add(query_579318, "sortField", newJString(sortField))
  add(query_579318, "alt", newJString(alt))
  add(query_579318, "userIp", newJString(userIp))
  add(query_579318, "quotaUser", newJString(quotaUser))
  add(query_579318, "pageToken", newJString(pageToken))
  add(query_579318, "searchString", newJString(searchString))
  add(query_579318, "sortOrder", newJString(sortOrder))
  if ids != nil:
    query_579318.add "ids", ids
  add(query_579318, "fields", newJString(fields))
  add(query_579318, "maxResults", newJInt(maxResults))
  result = call_579316.call(path_579317, query_579318, nil, nil, nil)

var dfareportingAdvertiserGroupsList* = Call_DfareportingAdvertiserGroupsList_579298(
    name: "dfareportingAdvertiserGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups",
    validator: validate_DfareportingAdvertiserGroupsList_579299,
    base: "/dfareporting/v3.1", url: url_DfareportingAdvertiserGroupsList_579300,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsPatch_579353 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserGroupsPatch_579355(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsPatch_579354(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing advertiser group. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579356 = path.getOrDefault("profileId")
  valid_579356 = validateParameter(valid_579356, JString, required = true,
                                 default = nil)
  if valid_579356 != nil:
    section.add "profileId", valid_579356
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Advertiser group ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579357 = query.getOrDefault("key")
  valid_579357 = validateParameter(valid_579357, JString, required = false,
                                 default = nil)
  if valid_579357 != nil:
    section.add "key", valid_579357
  var valid_579358 = query.getOrDefault("prettyPrint")
  valid_579358 = validateParameter(valid_579358, JBool, required = false,
                                 default = newJBool(true))
  if valid_579358 != nil:
    section.add "prettyPrint", valid_579358
  var valid_579359 = query.getOrDefault("oauth_token")
  valid_579359 = validateParameter(valid_579359, JString, required = false,
                                 default = nil)
  if valid_579359 != nil:
    section.add "oauth_token", valid_579359
  var valid_579360 = query.getOrDefault("alt")
  valid_579360 = validateParameter(valid_579360, JString, required = false,
                                 default = newJString("json"))
  if valid_579360 != nil:
    section.add "alt", valid_579360
  var valid_579361 = query.getOrDefault("userIp")
  valid_579361 = validateParameter(valid_579361, JString, required = false,
                                 default = nil)
  if valid_579361 != nil:
    section.add "userIp", valid_579361
  var valid_579362 = query.getOrDefault("quotaUser")
  valid_579362 = validateParameter(valid_579362, JString, required = false,
                                 default = nil)
  if valid_579362 != nil:
    section.add "quotaUser", valid_579362
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_579363 = query.getOrDefault("id")
  valid_579363 = validateParameter(valid_579363, JString, required = true,
                                 default = nil)
  if valid_579363 != nil:
    section.add "id", valid_579363
  var valid_579364 = query.getOrDefault("fields")
  valid_579364 = validateParameter(valid_579364, JString, required = false,
                                 default = nil)
  if valid_579364 != nil:
    section.add "fields", valid_579364
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579366: Call_DfareportingAdvertiserGroupsPatch_579353;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing advertiser group. This method supports patch semantics.
  ## 
  let valid = call_579366.validator(path, query, header, formData, body)
  let scheme = call_579366.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579366.url(scheme.get, call_579366.host, call_579366.base,
                         call_579366.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579366, url, valid)

proc call*(call_579367: Call_DfareportingAdvertiserGroupsPatch_579353;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdvertiserGroupsPatch
  ## Updates an existing advertiser group. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Advertiser group ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579368 = newJObject()
  var query_579369 = newJObject()
  var body_579370 = newJObject()
  add(query_579369, "key", newJString(key))
  add(query_579369, "prettyPrint", newJBool(prettyPrint))
  add(query_579369, "oauth_token", newJString(oauthToken))
  add(path_579368, "profileId", newJString(profileId))
  add(query_579369, "alt", newJString(alt))
  add(query_579369, "userIp", newJString(userIp))
  add(query_579369, "quotaUser", newJString(quotaUser))
  add(query_579369, "id", newJString(id))
  if body != nil:
    body_579370 = body
  add(query_579369, "fields", newJString(fields))
  result = call_579367.call(path_579368, query_579369, nil, nil, body_579370)

var dfareportingAdvertiserGroupsPatch* = Call_DfareportingAdvertiserGroupsPatch_579353(
    name: "dfareportingAdvertiserGroupsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups",
    validator: validate_DfareportingAdvertiserGroupsPatch_579354,
    base: "/dfareporting/v3.1", url: url_DfareportingAdvertiserGroupsPatch_579355,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsGet_579371 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserGroupsGet_579373(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsGet_579372(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one advertiser group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Advertiser group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579374 = path.getOrDefault("profileId")
  valid_579374 = validateParameter(valid_579374, JString, required = true,
                                 default = nil)
  if valid_579374 != nil:
    section.add "profileId", valid_579374
  var valid_579375 = path.getOrDefault("id")
  valid_579375 = validateParameter(valid_579375, JString, required = true,
                                 default = nil)
  if valid_579375 != nil:
    section.add "id", valid_579375
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579376 = query.getOrDefault("key")
  valid_579376 = validateParameter(valid_579376, JString, required = false,
                                 default = nil)
  if valid_579376 != nil:
    section.add "key", valid_579376
  var valid_579377 = query.getOrDefault("prettyPrint")
  valid_579377 = validateParameter(valid_579377, JBool, required = false,
                                 default = newJBool(true))
  if valid_579377 != nil:
    section.add "prettyPrint", valid_579377
  var valid_579378 = query.getOrDefault("oauth_token")
  valid_579378 = validateParameter(valid_579378, JString, required = false,
                                 default = nil)
  if valid_579378 != nil:
    section.add "oauth_token", valid_579378
  var valid_579379 = query.getOrDefault("alt")
  valid_579379 = validateParameter(valid_579379, JString, required = false,
                                 default = newJString("json"))
  if valid_579379 != nil:
    section.add "alt", valid_579379
  var valid_579380 = query.getOrDefault("userIp")
  valid_579380 = validateParameter(valid_579380, JString, required = false,
                                 default = nil)
  if valid_579380 != nil:
    section.add "userIp", valid_579380
  var valid_579381 = query.getOrDefault("quotaUser")
  valid_579381 = validateParameter(valid_579381, JString, required = false,
                                 default = nil)
  if valid_579381 != nil:
    section.add "quotaUser", valid_579381
  var valid_579382 = query.getOrDefault("fields")
  valid_579382 = validateParameter(valid_579382, JString, required = false,
                                 default = nil)
  if valid_579382 != nil:
    section.add "fields", valid_579382
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579383: Call_DfareportingAdvertiserGroupsGet_579371;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one advertiser group by ID.
  ## 
  let valid = call_579383.validator(path, query, header, formData, body)
  let scheme = call_579383.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579383.url(scheme.get, call_579383.host, call_579383.base,
                         call_579383.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579383, url, valid)

proc call*(call_579384: Call_DfareportingAdvertiserGroupsGet_579371;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingAdvertiserGroupsGet
  ## Gets one advertiser group by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Advertiser group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579385 = newJObject()
  var query_579386 = newJObject()
  add(query_579386, "key", newJString(key))
  add(query_579386, "prettyPrint", newJBool(prettyPrint))
  add(query_579386, "oauth_token", newJString(oauthToken))
  add(path_579385, "profileId", newJString(profileId))
  add(path_579385, "id", newJString(id))
  add(query_579386, "alt", newJString(alt))
  add(query_579386, "userIp", newJString(userIp))
  add(query_579386, "quotaUser", newJString(quotaUser))
  add(query_579386, "fields", newJString(fields))
  result = call_579384.call(path_579385, query_579386, nil, nil, nil)

var dfareportingAdvertiserGroupsGet* = Call_DfareportingAdvertiserGroupsGet_579371(
    name: "dfareportingAdvertiserGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups/{id}",
    validator: validate_DfareportingAdvertiserGroupsGet_579372,
    base: "/dfareporting/v3.1", url: url_DfareportingAdvertiserGroupsGet_579373,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsDelete_579387 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserGroupsDelete_579389(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsDelete_579388(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing advertiser group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Advertiser group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579390 = path.getOrDefault("profileId")
  valid_579390 = validateParameter(valid_579390, JString, required = true,
                                 default = nil)
  if valid_579390 != nil:
    section.add "profileId", valid_579390
  var valid_579391 = path.getOrDefault("id")
  valid_579391 = validateParameter(valid_579391, JString, required = true,
                                 default = nil)
  if valid_579391 != nil:
    section.add "id", valid_579391
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579392 = query.getOrDefault("key")
  valid_579392 = validateParameter(valid_579392, JString, required = false,
                                 default = nil)
  if valid_579392 != nil:
    section.add "key", valid_579392
  var valid_579393 = query.getOrDefault("prettyPrint")
  valid_579393 = validateParameter(valid_579393, JBool, required = false,
                                 default = newJBool(true))
  if valid_579393 != nil:
    section.add "prettyPrint", valid_579393
  var valid_579394 = query.getOrDefault("oauth_token")
  valid_579394 = validateParameter(valid_579394, JString, required = false,
                                 default = nil)
  if valid_579394 != nil:
    section.add "oauth_token", valid_579394
  var valid_579395 = query.getOrDefault("alt")
  valid_579395 = validateParameter(valid_579395, JString, required = false,
                                 default = newJString("json"))
  if valid_579395 != nil:
    section.add "alt", valid_579395
  var valid_579396 = query.getOrDefault("userIp")
  valid_579396 = validateParameter(valid_579396, JString, required = false,
                                 default = nil)
  if valid_579396 != nil:
    section.add "userIp", valid_579396
  var valid_579397 = query.getOrDefault("quotaUser")
  valid_579397 = validateParameter(valid_579397, JString, required = false,
                                 default = nil)
  if valid_579397 != nil:
    section.add "quotaUser", valid_579397
  var valid_579398 = query.getOrDefault("fields")
  valid_579398 = validateParameter(valid_579398, JString, required = false,
                                 default = nil)
  if valid_579398 != nil:
    section.add "fields", valid_579398
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579399: Call_DfareportingAdvertiserGroupsDelete_579387;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing advertiser group.
  ## 
  let valid = call_579399.validator(path, query, header, formData, body)
  let scheme = call_579399.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579399.url(scheme.get, call_579399.host, call_579399.base,
                         call_579399.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579399, url, valid)

proc call*(call_579400: Call_DfareportingAdvertiserGroupsDelete_579387;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingAdvertiserGroupsDelete
  ## Deletes an existing advertiser group.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Advertiser group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579401 = newJObject()
  var query_579402 = newJObject()
  add(query_579402, "key", newJString(key))
  add(query_579402, "prettyPrint", newJBool(prettyPrint))
  add(query_579402, "oauth_token", newJString(oauthToken))
  add(path_579401, "profileId", newJString(profileId))
  add(path_579401, "id", newJString(id))
  add(query_579402, "alt", newJString(alt))
  add(query_579402, "userIp", newJString(userIp))
  add(query_579402, "quotaUser", newJString(quotaUser))
  add(query_579402, "fields", newJString(fields))
  result = call_579400.call(path_579401, query_579402, nil, nil, nil)

var dfareportingAdvertiserGroupsDelete* = Call_DfareportingAdvertiserGroupsDelete_579387(
    name: "dfareportingAdvertiserGroupsDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups/{id}",
    validator: validate_DfareportingAdvertiserGroupsDelete_579388,
    base: "/dfareporting/v3.1", url: url_DfareportingAdvertiserGroupsDelete_579389,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesUpdate_579428 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserLandingPagesUpdate_579430(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesUpdate_579429(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing landing page.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579431 = path.getOrDefault("profileId")
  valid_579431 = validateParameter(valid_579431, JString, required = true,
                                 default = nil)
  if valid_579431 != nil:
    section.add "profileId", valid_579431
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579432 = query.getOrDefault("key")
  valid_579432 = validateParameter(valid_579432, JString, required = false,
                                 default = nil)
  if valid_579432 != nil:
    section.add "key", valid_579432
  var valid_579433 = query.getOrDefault("prettyPrint")
  valid_579433 = validateParameter(valid_579433, JBool, required = false,
                                 default = newJBool(true))
  if valid_579433 != nil:
    section.add "prettyPrint", valid_579433
  var valid_579434 = query.getOrDefault("oauth_token")
  valid_579434 = validateParameter(valid_579434, JString, required = false,
                                 default = nil)
  if valid_579434 != nil:
    section.add "oauth_token", valid_579434
  var valid_579435 = query.getOrDefault("alt")
  valid_579435 = validateParameter(valid_579435, JString, required = false,
                                 default = newJString("json"))
  if valid_579435 != nil:
    section.add "alt", valid_579435
  var valid_579436 = query.getOrDefault("userIp")
  valid_579436 = validateParameter(valid_579436, JString, required = false,
                                 default = nil)
  if valid_579436 != nil:
    section.add "userIp", valid_579436
  var valid_579437 = query.getOrDefault("quotaUser")
  valid_579437 = validateParameter(valid_579437, JString, required = false,
                                 default = nil)
  if valid_579437 != nil:
    section.add "quotaUser", valid_579437
  var valid_579438 = query.getOrDefault("fields")
  valid_579438 = validateParameter(valid_579438, JString, required = false,
                                 default = nil)
  if valid_579438 != nil:
    section.add "fields", valid_579438
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579440: Call_DfareportingAdvertiserLandingPagesUpdate_579428;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing landing page.
  ## 
  let valid = call_579440.validator(path, query, header, formData, body)
  let scheme = call_579440.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579440.url(scheme.get, call_579440.host, call_579440.base,
                         call_579440.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579440, url, valid)

proc call*(call_579441: Call_DfareportingAdvertiserLandingPagesUpdate_579428;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdvertiserLandingPagesUpdate
  ## Updates an existing landing page.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579442 = newJObject()
  var query_579443 = newJObject()
  var body_579444 = newJObject()
  add(query_579443, "key", newJString(key))
  add(query_579443, "prettyPrint", newJBool(prettyPrint))
  add(query_579443, "oauth_token", newJString(oauthToken))
  add(path_579442, "profileId", newJString(profileId))
  add(query_579443, "alt", newJString(alt))
  add(query_579443, "userIp", newJString(userIp))
  add(query_579443, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579444 = body
  add(query_579443, "fields", newJString(fields))
  result = call_579441.call(path_579442, query_579443, nil, nil, body_579444)

var dfareportingAdvertiserLandingPagesUpdate* = Call_DfareportingAdvertiserLandingPagesUpdate_579428(
    name: "dfareportingAdvertiserLandingPagesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages",
    validator: validate_DfareportingAdvertiserLandingPagesUpdate_579429,
    base: "/dfareporting/v3.1", url: url_DfareportingAdvertiserLandingPagesUpdate_579430,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesInsert_579445 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserLandingPagesInsert_579447(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesInsert_579446(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new landing page.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579448 = path.getOrDefault("profileId")
  valid_579448 = validateParameter(valid_579448, JString, required = true,
                                 default = nil)
  if valid_579448 != nil:
    section.add "profileId", valid_579448
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579449 = query.getOrDefault("key")
  valid_579449 = validateParameter(valid_579449, JString, required = false,
                                 default = nil)
  if valid_579449 != nil:
    section.add "key", valid_579449
  var valid_579450 = query.getOrDefault("prettyPrint")
  valid_579450 = validateParameter(valid_579450, JBool, required = false,
                                 default = newJBool(true))
  if valid_579450 != nil:
    section.add "prettyPrint", valid_579450
  var valid_579451 = query.getOrDefault("oauth_token")
  valid_579451 = validateParameter(valid_579451, JString, required = false,
                                 default = nil)
  if valid_579451 != nil:
    section.add "oauth_token", valid_579451
  var valid_579452 = query.getOrDefault("alt")
  valid_579452 = validateParameter(valid_579452, JString, required = false,
                                 default = newJString("json"))
  if valid_579452 != nil:
    section.add "alt", valid_579452
  var valid_579453 = query.getOrDefault("userIp")
  valid_579453 = validateParameter(valid_579453, JString, required = false,
                                 default = nil)
  if valid_579453 != nil:
    section.add "userIp", valid_579453
  var valid_579454 = query.getOrDefault("quotaUser")
  valid_579454 = validateParameter(valid_579454, JString, required = false,
                                 default = nil)
  if valid_579454 != nil:
    section.add "quotaUser", valid_579454
  var valid_579455 = query.getOrDefault("fields")
  valid_579455 = validateParameter(valid_579455, JString, required = false,
                                 default = nil)
  if valid_579455 != nil:
    section.add "fields", valid_579455
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579457: Call_DfareportingAdvertiserLandingPagesInsert_579445;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new landing page.
  ## 
  let valid = call_579457.validator(path, query, header, formData, body)
  let scheme = call_579457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579457.url(scheme.get, call_579457.host, call_579457.base,
                         call_579457.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579457, url, valid)

proc call*(call_579458: Call_DfareportingAdvertiserLandingPagesInsert_579445;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdvertiserLandingPagesInsert
  ## Inserts a new landing page.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579459 = newJObject()
  var query_579460 = newJObject()
  var body_579461 = newJObject()
  add(query_579460, "key", newJString(key))
  add(query_579460, "prettyPrint", newJBool(prettyPrint))
  add(query_579460, "oauth_token", newJString(oauthToken))
  add(path_579459, "profileId", newJString(profileId))
  add(query_579460, "alt", newJString(alt))
  add(query_579460, "userIp", newJString(userIp))
  add(query_579460, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579461 = body
  add(query_579460, "fields", newJString(fields))
  result = call_579458.call(path_579459, query_579460, nil, nil, body_579461)

var dfareportingAdvertiserLandingPagesInsert* = Call_DfareportingAdvertiserLandingPagesInsert_579445(
    name: "dfareportingAdvertiserLandingPagesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages",
    validator: validate_DfareportingAdvertiserLandingPagesInsert_579446,
    base: "/dfareporting/v3.1", url: url_DfareportingAdvertiserLandingPagesInsert_579447,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesList_579403 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserLandingPagesList_579405(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesList_579404(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of landing pages.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579406 = path.getOrDefault("profileId")
  valid_579406 = validateParameter(valid_579406, JString, required = true,
                                 default = nil)
  if valid_579406 != nil:
    section.add "profileId", valid_579406
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   advertiserIds: JArray
  ##                : Select only landing pages that belong to these advertisers.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived landing pages. Don't set this field to select both archived and non-archived landing pages.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for landing pages by name or ID. Wildcards (*) are allowed. For example, "landingpage*2017" will return landing pages with names like "landingpage July 2017", "landingpage March 2017", or simply "landingpage 2017". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "landingpage" will match campaigns with name "my landingpage", "landingpage 2015", or simply "landingpage".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   subaccountId: JString
  ##               : Select only landing pages that belong to this subaccount.
  ##   campaignIds: JArray
  ##              : Select only landing pages that are associated with these campaigns.
  ##   ids: JArray
  ##      : Select only landing pages with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_579407 = query.getOrDefault("key")
  valid_579407 = validateParameter(valid_579407, JString, required = false,
                                 default = nil)
  if valid_579407 != nil:
    section.add "key", valid_579407
  var valid_579408 = query.getOrDefault("prettyPrint")
  valid_579408 = validateParameter(valid_579408, JBool, required = false,
                                 default = newJBool(true))
  if valid_579408 != nil:
    section.add "prettyPrint", valid_579408
  var valid_579409 = query.getOrDefault("oauth_token")
  valid_579409 = validateParameter(valid_579409, JString, required = false,
                                 default = nil)
  if valid_579409 != nil:
    section.add "oauth_token", valid_579409
  var valid_579410 = query.getOrDefault("sortField")
  valid_579410 = validateParameter(valid_579410, JString, required = false,
                                 default = newJString("ID"))
  if valid_579410 != nil:
    section.add "sortField", valid_579410
  var valid_579411 = query.getOrDefault("advertiserIds")
  valid_579411 = validateParameter(valid_579411, JArray, required = false,
                                 default = nil)
  if valid_579411 != nil:
    section.add "advertiserIds", valid_579411
  var valid_579412 = query.getOrDefault("alt")
  valid_579412 = validateParameter(valid_579412, JString, required = false,
                                 default = newJString("json"))
  if valid_579412 != nil:
    section.add "alt", valid_579412
  var valid_579413 = query.getOrDefault("userIp")
  valid_579413 = validateParameter(valid_579413, JString, required = false,
                                 default = nil)
  if valid_579413 != nil:
    section.add "userIp", valid_579413
  var valid_579414 = query.getOrDefault("archived")
  valid_579414 = validateParameter(valid_579414, JBool, required = false, default = nil)
  if valid_579414 != nil:
    section.add "archived", valid_579414
  var valid_579415 = query.getOrDefault("quotaUser")
  valid_579415 = validateParameter(valid_579415, JString, required = false,
                                 default = nil)
  if valid_579415 != nil:
    section.add "quotaUser", valid_579415
  var valid_579416 = query.getOrDefault("pageToken")
  valid_579416 = validateParameter(valid_579416, JString, required = false,
                                 default = nil)
  if valid_579416 != nil:
    section.add "pageToken", valid_579416
  var valid_579417 = query.getOrDefault("searchString")
  valid_579417 = validateParameter(valid_579417, JString, required = false,
                                 default = nil)
  if valid_579417 != nil:
    section.add "searchString", valid_579417
  var valid_579418 = query.getOrDefault("sortOrder")
  valid_579418 = validateParameter(valid_579418, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_579418 != nil:
    section.add "sortOrder", valid_579418
  var valid_579419 = query.getOrDefault("subaccountId")
  valid_579419 = validateParameter(valid_579419, JString, required = false,
                                 default = nil)
  if valid_579419 != nil:
    section.add "subaccountId", valid_579419
  var valid_579420 = query.getOrDefault("campaignIds")
  valid_579420 = validateParameter(valid_579420, JArray, required = false,
                                 default = nil)
  if valid_579420 != nil:
    section.add "campaignIds", valid_579420
  var valid_579421 = query.getOrDefault("ids")
  valid_579421 = validateParameter(valid_579421, JArray, required = false,
                                 default = nil)
  if valid_579421 != nil:
    section.add "ids", valid_579421
  var valid_579422 = query.getOrDefault("fields")
  valid_579422 = validateParameter(valid_579422, JString, required = false,
                                 default = nil)
  if valid_579422 != nil:
    section.add "fields", valid_579422
  var valid_579423 = query.getOrDefault("maxResults")
  valid_579423 = validateParameter(valid_579423, JInt, required = false,
                                 default = newJInt(1000))
  if valid_579423 != nil:
    section.add "maxResults", valid_579423
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579424: Call_DfareportingAdvertiserLandingPagesList_579403;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of landing pages.
  ## 
  let valid = call_579424.validator(path, query, header, formData, body)
  let scheme = call_579424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579424.url(scheme.get, call_579424.host, call_579424.base,
                         call_579424.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579424, url, valid)

proc call*(call_579425: Call_DfareportingAdvertiserLandingPagesList_579403;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; sortField: string = "ID";
          advertiserIds: JsonNode = nil; alt: string = "json"; userIp: string = "";
          archived: bool = false; quotaUser: string = ""; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          subaccountId: string = ""; campaignIds: JsonNode = nil; ids: JsonNode = nil;
          fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingAdvertiserLandingPagesList
  ## Retrieves a list of landing pages.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   advertiserIds: JArray
  ##                : Select only landing pages that belong to these advertisers.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived landing pages. Don't set this field to select both archived and non-archived landing pages.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for landing pages by name or ID. Wildcards (*) are allowed. For example, "landingpage*2017" will return landing pages with names like "landingpage July 2017", "landingpage March 2017", or simply "landingpage 2017". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "landingpage" will match campaigns with name "my landingpage", "landingpage 2015", or simply "landingpage".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   subaccountId: string
  ##               : Select only landing pages that belong to this subaccount.
  ##   campaignIds: JArray
  ##              : Select only landing pages that are associated with these campaigns.
  ##   ids: JArray
  ##      : Select only landing pages with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_579426 = newJObject()
  var query_579427 = newJObject()
  add(query_579427, "key", newJString(key))
  add(query_579427, "prettyPrint", newJBool(prettyPrint))
  add(query_579427, "oauth_token", newJString(oauthToken))
  add(path_579426, "profileId", newJString(profileId))
  add(query_579427, "sortField", newJString(sortField))
  if advertiserIds != nil:
    query_579427.add "advertiserIds", advertiserIds
  add(query_579427, "alt", newJString(alt))
  add(query_579427, "userIp", newJString(userIp))
  add(query_579427, "archived", newJBool(archived))
  add(query_579427, "quotaUser", newJString(quotaUser))
  add(query_579427, "pageToken", newJString(pageToken))
  add(query_579427, "searchString", newJString(searchString))
  add(query_579427, "sortOrder", newJString(sortOrder))
  add(query_579427, "subaccountId", newJString(subaccountId))
  if campaignIds != nil:
    query_579427.add "campaignIds", campaignIds
  if ids != nil:
    query_579427.add "ids", ids
  add(query_579427, "fields", newJString(fields))
  add(query_579427, "maxResults", newJInt(maxResults))
  result = call_579425.call(path_579426, query_579427, nil, nil, nil)

var dfareportingAdvertiserLandingPagesList* = Call_DfareportingAdvertiserLandingPagesList_579403(
    name: "dfareportingAdvertiserLandingPagesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages",
    validator: validate_DfareportingAdvertiserLandingPagesList_579404,
    base: "/dfareporting/v3.1", url: url_DfareportingAdvertiserLandingPagesList_579405,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesPatch_579462 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserLandingPagesPatch_579464(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesPatch_579463(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing landing page. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579465 = path.getOrDefault("profileId")
  valid_579465 = validateParameter(valid_579465, JString, required = true,
                                 default = nil)
  if valid_579465 != nil:
    section.add "profileId", valid_579465
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Landing page ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579466 = query.getOrDefault("key")
  valid_579466 = validateParameter(valid_579466, JString, required = false,
                                 default = nil)
  if valid_579466 != nil:
    section.add "key", valid_579466
  var valid_579467 = query.getOrDefault("prettyPrint")
  valid_579467 = validateParameter(valid_579467, JBool, required = false,
                                 default = newJBool(true))
  if valid_579467 != nil:
    section.add "prettyPrint", valid_579467
  var valid_579468 = query.getOrDefault("oauth_token")
  valid_579468 = validateParameter(valid_579468, JString, required = false,
                                 default = nil)
  if valid_579468 != nil:
    section.add "oauth_token", valid_579468
  var valid_579469 = query.getOrDefault("alt")
  valid_579469 = validateParameter(valid_579469, JString, required = false,
                                 default = newJString("json"))
  if valid_579469 != nil:
    section.add "alt", valid_579469
  var valid_579470 = query.getOrDefault("userIp")
  valid_579470 = validateParameter(valid_579470, JString, required = false,
                                 default = nil)
  if valid_579470 != nil:
    section.add "userIp", valid_579470
  var valid_579471 = query.getOrDefault("quotaUser")
  valid_579471 = validateParameter(valid_579471, JString, required = false,
                                 default = nil)
  if valid_579471 != nil:
    section.add "quotaUser", valid_579471
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_579472 = query.getOrDefault("id")
  valid_579472 = validateParameter(valid_579472, JString, required = true,
                                 default = nil)
  if valid_579472 != nil:
    section.add "id", valid_579472
  var valid_579473 = query.getOrDefault("fields")
  valid_579473 = validateParameter(valid_579473, JString, required = false,
                                 default = nil)
  if valid_579473 != nil:
    section.add "fields", valid_579473
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579475: Call_DfareportingAdvertiserLandingPagesPatch_579462;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing landing page. This method supports patch semantics.
  ## 
  let valid = call_579475.validator(path, query, header, formData, body)
  let scheme = call_579475.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579475.url(scheme.get, call_579475.host, call_579475.base,
                         call_579475.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579475, url, valid)

proc call*(call_579476: Call_DfareportingAdvertiserLandingPagesPatch_579462;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdvertiserLandingPagesPatch
  ## Updates an existing landing page. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Landing page ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579477 = newJObject()
  var query_579478 = newJObject()
  var body_579479 = newJObject()
  add(query_579478, "key", newJString(key))
  add(query_579478, "prettyPrint", newJBool(prettyPrint))
  add(query_579478, "oauth_token", newJString(oauthToken))
  add(path_579477, "profileId", newJString(profileId))
  add(query_579478, "alt", newJString(alt))
  add(query_579478, "userIp", newJString(userIp))
  add(query_579478, "quotaUser", newJString(quotaUser))
  add(query_579478, "id", newJString(id))
  if body != nil:
    body_579479 = body
  add(query_579478, "fields", newJString(fields))
  result = call_579476.call(path_579477, query_579478, nil, nil, body_579479)

var dfareportingAdvertiserLandingPagesPatch* = Call_DfareportingAdvertiserLandingPagesPatch_579462(
    name: "dfareportingAdvertiserLandingPagesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages",
    validator: validate_DfareportingAdvertiserLandingPagesPatch_579463,
    base: "/dfareporting/v3.1", url: url_DfareportingAdvertiserLandingPagesPatch_579464,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesGet_579480 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserLandingPagesGet_579482(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesGet_579481(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one landing page by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Landing page ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579483 = path.getOrDefault("profileId")
  valid_579483 = validateParameter(valid_579483, JString, required = true,
                                 default = nil)
  if valid_579483 != nil:
    section.add "profileId", valid_579483
  var valid_579484 = path.getOrDefault("id")
  valid_579484 = validateParameter(valid_579484, JString, required = true,
                                 default = nil)
  if valid_579484 != nil:
    section.add "id", valid_579484
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579485 = query.getOrDefault("key")
  valid_579485 = validateParameter(valid_579485, JString, required = false,
                                 default = nil)
  if valid_579485 != nil:
    section.add "key", valid_579485
  var valid_579486 = query.getOrDefault("prettyPrint")
  valid_579486 = validateParameter(valid_579486, JBool, required = false,
                                 default = newJBool(true))
  if valid_579486 != nil:
    section.add "prettyPrint", valid_579486
  var valid_579487 = query.getOrDefault("oauth_token")
  valid_579487 = validateParameter(valid_579487, JString, required = false,
                                 default = nil)
  if valid_579487 != nil:
    section.add "oauth_token", valid_579487
  var valid_579488 = query.getOrDefault("alt")
  valid_579488 = validateParameter(valid_579488, JString, required = false,
                                 default = newJString("json"))
  if valid_579488 != nil:
    section.add "alt", valid_579488
  var valid_579489 = query.getOrDefault("userIp")
  valid_579489 = validateParameter(valid_579489, JString, required = false,
                                 default = nil)
  if valid_579489 != nil:
    section.add "userIp", valid_579489
  var valid_579490 = query.getOrDefault("quotaUser")
  valid_579490 = validateParameter(valid_579490, JString, required = false,
                                 default = nil)
  if valid_579490 != nil:
    section.add "quotaUser", valid_579490
  var valid_579491 = query.getOrDefault("fields")
  valid_579491 = validateParameter(valid_579491, JString, required = false,
                                 default = nil)
  if valid_579491 != nil:
    section.add "fields", valid_579491
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579492: Call_DfareportingAdvertiserLandingPagesGet_579480;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one landing page by ID.
  ## 
  let valid = call_579492.validator(path, query, header, formData, body)
  let scheme = call_579492.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579492.url(scheme.get, call_579492.host, call_579492.base,
                         call_579492.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579492, url, valid)

proc call*(call_579493: Call_DfareportingAdvertiserLandingPagesGet_579480;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingAdvertiserLandingPagesGet
  ## Gets one landing page by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Landing page ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579494 = newJObject()
  var query_579495 = newJObject()
  add(query_579495, "key", newJString(key))
  add(query_579495, "prettyPrint", newJBool(prettyPrint))
  add(query_579495, "oauth_token", newJString(oauthToken))
  add(path_579494, "profileId", newJString(profileId))
  add(path_579494, "id", newJString(id))
  add(query_579495, "alt", newJString(alt))
  add(query_579495, "userIp", newJString(userIp))
  add(query_579495, "quotaUser", newJString(quotaUser))
  add(query_579495, "fields", newJString(fields))
  result = call_579493.call(path_579494, query_579495, nil, nil, nil)

var dfareportingAdvertiserLandingPagesGet* = Call_DfareportingAdvertiserLandingPagesGet_579480(
    name: "dfareportingAdvertiserLandingPagesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages/{id}",
    validator: validate_DfareportingAdvertiserLandingPagesGet_579481,
    base: "/dfareporting/v3.1", url: url_DfareportingAdvertiserLandingPagesGet_579482,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersUpdate_579523 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertisersUpdate_579525(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersUpdate_579524(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing advertiser.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579526 = path.getOrDefault("profileId")
  valid_579526 = validateParameter(valid_579526, JString, required = true,
                                 default = nil)
  if valid_579526 != nil:
    section.add "profileId", valid_579526
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579527 = query.getOrDefault("key")
  valid_579527 = validateParameter(valid_579527, JString, required = false,
                                 default = nil)
  if valid_579527 != nil:
    section.add "key", valid_579527
  var valid_579528 = query.getOrDefault("prettyPrint")
  valid_579528 = validateParameter(valid_579528, JBool, required = false,
                                 default = newJBool(true))
  if valid_579528 != nil:
    section.add "prettyPrint", valid_579528
  var valid_579529 = query.getOrDefault("oauth_token")
  valid_579529 = validateParameter(valid_579529, JString, required = false,
                                 default = nil)
  if valid_579529 != nil:
    section.add "oauth_token", valid_579529
  var valid_579530 = query.getOrDefault("alt")
  valid_579530 = validateParameter(valid_579530, JString, required = false,
                                 default = newJString("json"))
  if valid_579530 != nil:
    section.add "alt", valid_579530
  var valid_579531 = query.getOrDefault("userIp")
  valid_579531 = validateParameter(valid_579531, JString, required = false,
                                 default = nil)
  if valid_579531 != nil:
    section.add "userIp", valid_579531
  var valid_579532 = query.getOrDefault("quotaUser")
  valid_579532 = validateParameter(valid_579532, JString, required = false,
                                 default = nil)
  if valid_579532 != nil:
    section.add "quotaUser", valid_579532
  var valid_579533 = query.getOrDefault("fields")
  valid_579533 = validateParameter(valid_579533, JString, required = false,
                                 default = nil)
  if valid_579533 != nil:
    section.add "fields", valid_579533
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579535: Call_DfareportingAdvertisersUpdate_579523; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing advertiser.
  ## 
  let valid = call_579535.validator(path, query, header, formData, body)
  let scheme = call_579535.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579535.url(scheme.get, call_579535.host, call_579535.base,
                         call_579535.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579535, url, valid)

proc call*(call_579536: Call_DfareportingAdvertisersUpdate_579523;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdvertisersUpdate
  ## Updates an existing advertiser.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579537 = newJObject()
  var query_579538 = newJObject()
  var body_579539 = newJObject()
  add(query_579538, "key", newJString(key))
  add(query_579538, "prettyPrint", newJBool(prettyPrint))
  add(query_579538, "oauth_token", newJString(oauthToken))
  add(path_579537, "profileId", newJString(profileId))
  add(query_579538, "alt", newJString(alt))
  add(query_579538, "userIp", newJString(userIp))
  add(query_579538, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579539 = body
  add(query_579538, "fields", newJString(fields))
  result = call_579536.call(path_579537, query_579538, nil, nil, body_579539)

var dfareportingAdvertisersUpdate* = Call_DfareportingAdvertisersUpdate_579523(
    name: "dfareportingAdvertisersUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/advertisers",
    validator: validate_DfareportingAdvertisersUpdate_579524,
    base: "/dfareporting/v3.1", url: url_DfareportingAdvertisersUpdate_579525,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersInsert_579540 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertisersInsert_579542(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersInsert_579541(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new advertiser.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579543 = path.getOrDefault("profileId")
  valid_579543 = validateParameter(valid_579543, JString, required = true,
                                 default = nil)
  if valid_579543 != nil:
    section.add "profileId", valid_579543
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579544 = query.getOrDefault("key")
  valid_579544 = validateParameter(valid_579544, JString, required = false,
                                 default = nil)
  if valid_579544 != nil:
    section.add "key", valid_579544
  var valid_579545 = query.getOrDefault("prettyPrint")
  valid_579545 = validateParameter(valid_579545, JBool, required = false,
                                 default = newJBool(true))
  if valid_579545 != nil:
    section.add "prettyPrint", valid_579545
  var valid_579546 = query.getOrDefault("oauth_token")
  valid_579546 = validateParameter(valid_579546, JString, required = false,
                                 default = nil)
  if valid_579546 != nil:
    section.add "oauth_token", valid_579546
  var valid_579547 = query.getOrDefault("alt")
  valid_579547 = validateParameter(valid_579547, JString, required = false,
                                 default = newJString("json"))
  if valid_579547 != nil:
    section.add "alt", valid_579547
  var valid_579548 = query.getOrDefault("userIp")
  valid_579548 = validateParameter(valid_579548, JString, required = false,
                                 default = nil)
  if valid_579548 != nil:
    section.add "userIp", valid_579548
  var valid_579549 = query.getOrDefault("quotaUser")
  valid_579549 = validateParameter(valid_579549, JString, required = false,
                                 default = nil)
  if valid_579549 != nil:
    section.add "quotaUser", valid_579549
  var valid_579550 = query.getOrDefault("fields")
  valid_579550 = validateParameter(valid_579550, JString, required = false,
                                 default = nil)
  if valid_579550 != nil:
    section.add "fields", valid_579550
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579552: Call_DfareportingAdvertisersInsert_579540; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new advertiser.
  ## 
  let valid = call_579552.validator(path, query, header, formData, body)
  let scheme = call_579552.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579552.url(scheme.get, call_579552.host, call_579552.base,
                         call_579552.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579552, url, valid)

proc call*(call_579553: Call_DfareportingAdvertisersInsert_579540;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdvertisersInsert
  ## Inserts a new advertiser.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579554 = newJObject()
  var query_579555 = newJObject()
  var body_579556 = newJObject()
  add(query_579555, "key", newJString(key))
  add(query_579555, "prettyPrint", newJBool(prettyPrint))
  add(query_579555, "oauth_token", newJString(oauthToken))
  add(path_579554, "profileId", newJString(profileId))
  add(query_579555, "alt", newJString(alt))
  add(query_579555, "userIp", newJString(userIp))
  add(query_579555, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579556 = body
  add(query_579555, "fields", newJString(fields))
  result = call_579553.call(path_579554, query_579555, nil, nil, body_579556)

var dfareportingAdvertisersInsert* = Call_DfareportingAdvertisersInsert_579540(
    name: "dfareportingAdvertisersInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/advertisers",
    validator: validate_DfareportingAdvertisersInsert_579541,
    base: "/dfareporting/v3.1", url: url_DfareportingAdvertisersInsert_579542,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersList_579496 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertisersList_579498(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersList_579497(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of advertisers, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579499 = path.getOrDefault("profileId")
  valid_579499 = validateParameter(valid_579499, JString, required = true,
                                 default = nil)
  if valid_579499 != nil:
    section.add "profileId", valid_579499
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   floodlightConfigurationIds: JArray
  ##                             : Select only advertisers with these floodlight configuration IDs.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser June 2015", "advertiser April 2015", or simply "advertiser 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertiser" will match objects with name "my advertiser", "advertiser 2015", or simply "advertiser".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   subaccountId: JString
  ##               : Select only advertisers with these subaccount IDs.
  ##   onlyParent: JBool
  ##             : Select only advertisers which use another advertiser's floodlight configuration.
  ##   status: JString
  ##         : Select only advertisers with the specified status.
  ##   ids: JArray
  ##      : Select only advertisers with these IDs.
  ##   includeAdvertisersWithoutGroupsOnly: JBool
  ##                                      : Select only advertisers which do not belong to any advertiser group.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   advertiserGroupIds: JArray
  ##                     : Select only advertisers with these advertiser group IDs.
  section = newJObject()
  var valid_579500 = query.getOrDefault("key")
  valid_579500 = validateParameter(valid_579500, JString, required = false,
                                 default = nil)
  if valid_579500 != nil:
    section.add "key", valid_579500
  var valid_579501 = query.getOrDefault("prettyPrint")
  valid_579501 = validateParameter(valid_579501, JBool, required = false,
                                 default = newJBool(true))
  if valid_579501 != nil:
    section.add "prettyPrint", valid_579501
  var valid_579502 = query.getOrDefault("oauth_token")
  valid_579502 = validateParameter(valid_579502, JString, required = false,
                                 default = nil)
  if valid_579502 != nil:
    section.add "oauth_token", valid_579502
  var valid_579503 = query.getOrDefault("floodlightConfigurationIds")
  valid_579503 = validateParameter(valid_579503, JArray, required = false,
                                 default = nil)
  if valid_579503 != nil:
    section.add "floodlightConfigurationIds", valid_579503
  var valid_579504 = query.getOrDefault("sortField")
  valid_579504 = validateParameter(valid_579504, JString, required = false,
                                 default = newJString("ID"))
  if valid_579504 != nil:
    section.add "sortField", valid_579504
  var valid_579505 = query.getOrDefault("alt")
  valid_579505 = validateParameter(valid_579505, JString, required = false,
                                 default = newJString("json"))
  if valid_579505 != nil:
    section.add "alt", valid_579505
  var valid_579506 = query.getOrDefault("userIp")
  valid_579506 = validateParameter(valid_579506, JString, required = false,
                                 default = nil)
  if valid_579506 != nil:
    section.add "userIp", valid_579506
  var valid_579507 = query.getOrDefault("quotaUser")
  valid_579507 = validateParameter(valid_579507, JString, required = false,
                                 default = nil)
  if valid_579507 != nil:
    section.add "quotaUser", valid_579507
  var valid_579508 = query.getOrDefault("pageToken")
  valid_579508 = validateParameter(valid_579508, JString, required = false,
                                 default = nil)
  if valid_579508 != nil:
    section.add "pageToken", valid_579508
  var valid_579509 = query.getOrDefault("searchString")
  valid_579509 = validateParameter(valid_579509, JString, required = false,
                                 default = nil)
  if valid_579509 != nil:
    section.add "searchString", valid_579509
  var valid_579510 = query.getOrDefault("sortOrder")
  valid_579510 = validateParameter(valid_579510, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_579510 != nil:
    section.add "sortOrder", valid_579510
  var valid_579511 = query.getOrDefault("subaccountId")
  valid_579511 = validateParameter(valid_579511, JString, required = false,
                                 default = nil)
  if valid_579511 != nil:
    section.add "subaccountId", valid_579511
  var valid_579512 = query.getOrDefault("onlyParent")
  valid_579512 = validateParameter(valid_579512, JBool, required = false, default = nil)
  if valid_579512 != nil:
    section.add "onlyParent", valid_579512
  var valid_579513 = query.getOrDefault("status")
  valid_579513 = validateParameter(valid_579513, JString, required = false,
                                 default = newJString("APPROVED"))
  if valid_579513 != nil:
    section.add "status", valid_579513
  var valid_579514 = query.getOrDefault("ids")
  valid_579514 = validateParameter(valid_579514, JArray, required = false,
                                 default = nil)
  if valid_579514 != nil:
    section.add "ids", valid_579514
  var valid_579515 = query.getOrDefault("includeAdvertisersWithoutGroupsOnly")
  valid_579515 = validateParameter(valid_579515, JBool, required = false, default = nil)
  if valid_579515 != nil:
    section.add "includeAdvertisersWithoutGroupsOnly", valid_579515
  var valid_579516 = query.getOrDefault("fields")
  valid_579516 = validateParameter(valid_579516, JString, required = false,
                                 default = nil)
  if valid_579516 != nil:
    section.add "fields", valid_579516
  var valid_579517 = query.getOrDefault("maxResults")
  valid_579517 = validateParameter(valid_579517, JInt, required = false,
                                 default = newJInt(1000))
  if valid_579517 != nil:
    section.add "maxResults", valid_579517
  var valid_579518 = query.getOrDefault("advertiserGroupIds")
  valid_579518 = validateParameter(valid_579518, JArray, required = false,
                                 default = nil)
  if valid_579518 != nil:
    section.add "advertiserGroupIds", valid_579518
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579519: Call_DfareportingAdvertisersList_579496; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of advertisers, possibly filtered. This method supports paging.
  ## 
  let valid = call_579519.validator(path, query, header, formData, body)
  let scheme = call_579519.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579519.url(scheme.get, call_579519.host, call_579519.base,
                         call_579519.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579519, url, valid)

proc call*(call_579520: Call_DfareportingAdvertisersList_579496; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          floodlightConfigurationIds: JsonNode = nil; sortField: string = "ID";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          pageToken: string = ""; searchString: string = "";
          sortOrder: string = "ASCENDING"; subaccountId: string = "";
          onlyParent: bool = false; status: string = "APPROVED"; ids: JsonNode = nil;
          includeAdvertisersWithoutGroupsOnly: bool = false; fields: string = "";
          maxResults: int = 1000; advertiserGroupIds: JsonNode = nil): Recallable =
  ## dfareportingAdvertisersList
  ## Retrieves a list of advertisers, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   floodlightConfigurationIds: JArray
  ##                             : Select only advertisers with these floodlight configuration IDs.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser June 2015", "advertiser April 2015", or simply "advertiser 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertiser" will match objects with name "my advertiser", "advertiser 2015", or simply "advertiser".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   subaccountId: string
  ##               : Select only advertisers with these subaccount IDs.
  ##   onlyParent: bool
  ##             : Select only advertisers which use another advertiser's floodlight configuration.
  ##   status: string
  ##         : Select only advertisers with the specified status.
  ##   ids: JArray
  ##      : Select only advertisers with these IDs.
  ##   includeAdvertisersWithoutGroupsOnly: bool
  ##                                      : Select only advertisers which do not belong to any advertiser group.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   advertiserGroupIds: JArray
  ##                     : Select only advertisers with these advertiser group IDs.
  var path_579521 = newJObject()
  var query_579522 = newJObject()
  add(query_579522, "key", newJString(key))
  add(query_579522, "prettyPrint", newJBool(prettyPrint))
  add(query_579522, "oauth_token", newJString(oauthToken))
  if floodlightConfigurationIds != nil:
    query_579522.add "floodlightConfigurationIds", floodlightConfigurationIds
  add(path_579521, "profileId", newJString(profileId))
  add(query_579522, "sortField", newJString(sortField))
  add(query_579522, "alt", newJString(alt))
  add(query_579522, "userIp", newJString(userIp))
  add(query_579522, "quotaUser", newJString(quotaUser))
  add(query_579522, "pageToken", newJString(pageToken))
  add(query_579522, "searchString", newJString(searchString))
  add(query_579522, "sortOrder", newJString(sortOrder))
  add(query_579522, "subaccountId", newJString(subaccountId))
  add(query_579522, "onlyParent", newJBool(onlyParent))
  add(query_579522, "status", newJString(status))
  if ids != nil:
    query_579522.add "ids", ids
  add(query_579522, "includeAdvertisersWithoutGroupsOnly",
      newJBool(includeAdvertisersWithoutGroupsOnly))
  add(query_579522, "fields", newJString(fields))
  add(query_579522, "maxResults", newJInt(maxResults))
  if advertiserGroupIds != nil:
    query_579522.add "advertiserGroupIds", advertiserGroupIds
  result = call_579520.call(path_579521, query_579522, nil, nil, nil)

var dfareportingAdvertisersList* = Call_DfareportingAdvertisersList_579496(
    name: "dfareportingAdvertisersList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/advertisers",
    validator: validate_DfareportingAdvertisersList_579497,
    base: "/dfareporting/v3.1", url: url_DfareportingAdvertisersList_579498,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersPatch_579557 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertisersPatch_579559(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersPatch_579558(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing advertiser. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579560 = path.getOrDefault("profileId")
  valid_579560 = validateParameter(valid_579560, JString, required = true,
                                 default = nil)
  if valid_579560 != nil:
    section.add "profileId", valid_579560
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Advertiser ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579561 = query.getOrDefault("key")
  valid_579561 = validateParameter(valid_579561, JString, required = false,
                                 default = nil)
  if valid_579561 != nil:
    section.add "key", valid_579561
  var valid_579562 = query.getOrDefault("prettyPrint")
  valid_579562 = validateParameter(valid_579562, JBool, required = false,
                                 default = newJBool(true))
  if valid_579562 != nil:
    section.add "prettyPrint", valid_579562
  var valid_579563 = query.getOrDefault("oauth_token")
  valid_579563 = validateParameter(valid_579563, JString, required = false,
                                 default = nil)
  if valid_579563 != nil:
    section.add "oauth_token", valid_579563
  var valid_579564 = query.getOrDefault("alt")
  valid_579564 = validateParameter(valid_579564, JString, required = false,
                                 default = newJString("json"))
  if valid_579564 != nil:
    section.add "alt", valid_579564
  var valid_579565 = query.getOrDefault("userIp")
  valid_579565 = validateParameter(valid_579565, JString, required = false,
                                 default = nil)
  if valid_579565 != nil:
    section.add "userIp", valid_579565
  var valid_579566 = query.getOrDefault("quotaUser")
  valid_579566 = validateParameter(valid_579566, JString, required = false,
                                 default = nil)
  if valid_579566 != nil:
    section.add "quotaUser", valid_579566
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_579567 = query.getOrDefault("id")
  valid_579567 = validateParameter(valid_579567, JString, required = true,
                                 default = nil)
  if valid_579567 != nil:
    section.add "id", valid_579567
  var valid_579568 = query.getOrDefault("fields")
  valid_579568 = validateParameter(valid_579568, JString, required = false,
                                 default = nil)
  if valid_579568 != nil:
    section.add "fields", valid_579568
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579570: Call_DfareportingAdvertisersPatch_579557; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing advertiser. This method supports patch semantics.
  ## 
  let valid = call_579570.validator(path, query, header, formData, body)
  let scheme = call_579570.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579570.url(scheme.get, call_579570.host, call_579570.base,
                         call_579570.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579570, url, valid)

proc call*(call_579571: Call_DfareportingAdvertisersPatch_579557;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdvertisersPatch
  ## Updates an existing advertiser. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Advertiser ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579572 = newJObject()
  var query_579573 = newJObject()
  var body_579574 = newJObject()
  add(query_579573, "key", newJString(key))
  add(query_579573, "prettyPrint", newJBool(prettyPrint))
  add(query_579573, "oauth_token", newJString(oauthToken))
  add(path_579572, "profileId", newJString(profileId))
  add(query_579573, "alt", newJString(alt))
  add(query_579573, "userIp", newJString(userIp))
  add(query_579573, "quotaUser", newJString(quotaUser))
  add(query_579573, "id", newJString(id))
  if body != nil:
    body_579574 = body
  add(query_579573, "fields", newJString(fields))
  result = call_579571.call(path_579572, query_579573, nil, nil, body_579574)

var dfareportingAdvertisersPatch* = Call_DfareportingAdvertisersPatch_579557(
    name: "dfareportingAdvertisersPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/advertisers",
    validator: validate_DfareportingAdvertisersPatch_579558,
    base: "/dfareporting/v3.1", url: url_DfareportingAdvertisersPatch_579559,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersGet_579575 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertisersGet_579577(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersGet_579576(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one advertiser by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Advertiser ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579578 = path.getOrDefault("profileId")
  valid_579578 = validateParameter(valid_579578, JString, required = true,
                                 default = nil)
  if valid_579578 != nil:
    section.add "profileId", valid_579578
  var valid_579579 = path.getOrDefault("id")
  valid_579579 = validateParameter(valid_579579, JString, required = true,
                                 default = nil)
  if valid_579579 != nil:
    section.add "id", valid_579579
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579580 = query.getOrDefault("key")
  valid_579580 = validateParameter(valid_579580, JString, required = false,
                                 default = nil)
  if valid_579580 != nil:
    section.add "key", valid_579580
  var valid_579581 = query.getOrDefault("prettyPrint")
  valid_579581 = validateParameter(valid_579581, JBool, required = false,
                                 default = newJBool(true))
  if valid_579581 != nil:
    section.add "prettyPrint", valid_579581
  var valid_579582 = query.getOrDefault("oauth_token")
  valid_579582 = validateParameter(valid_579582, JString, required = false,
                                 default = nil)
  if valid_579582 != nil:
    section.add "oauth_token", valid_579582
  var valid_579583 = query.getOrDefault("alt")
  valid_579583 = validateParameter(valid_579583, JString, required = false,
                                 default = newJString("json"))
  if valid_579583 != nil:
    section.add "alt", valid_579583
  var valid_579584 = query.getOrDefault("userIp")
  valid_579584 = validateParameter(valid_579584, JString, required = false,
                                 default = nil)
  if valid_579584 != nil:
    section.add "userIp", valid_579584
  var valid_579585 = query.getOrDefault("quotaUser")
  valid_579585 = validateParameter(valid_579585, JString, required = false,
                                 default = nil)
  if valid_579585 != nil:
    section.add "quotaUser", valid_579585
  var valid_579586 = query.getOrDefault("fields")
  valid_579586 = validateParameter(valid_579586, JString, required = false,
                                 default = nil)
  if valid_579586 != nil:
    section.add "fields", valid_579586
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579587: Call_DfareportingAdvertisersGet_579575; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one advertiser by ID.
  ## 
  let valid = call_579587.validator(path, query, header, formData, body)
  let scheme = call_579587.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579587.url(scheme.get, call_579587.host, call_579587.base,
                         call_579587.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579587, url, valid)

proc call*(call_579588: Call_DfareportingAdvertisersGet_579575; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingAdvertisersGet
  ## Gets one advertiser by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Advertiser ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579589 = newJObject()
  var query_579590 = newJObject()
  add(query_579590, "key", newJString(key))
  add(query_579590, "prettyPrint", newJBool(prettyPrint))
  add(query_579590, "oauth_token", newJString(oauthToken))
  add(path_579589, "profileId", newJString(profileId))
  add(path_579589, "id", newJString(id))
  add(query_579590, "alt", newJString(alt))
  add(query_579590, "userIp", newJString(userIp))
  add(query_579590, "quotaUser", newJString(quotaUser))
  add(query_579590, "fields", newJString(fields))
  result = call_579588.call(path_579589, query_579590, nil, nil, nil)

var dfareportingAdvertisersGet* = Call_DfareportingAdvertisersGet_579575(
    name: "dfareportingAdvertisersGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertisers/{id}",
    validator: validate_DfareportingAdvertisersGet_579576,
    base: "/dfareporting/v3.1", url: url_DfareportingAdvertisersGet_579577,
    schemes: {Scheme.Https})
type
  Call_DfareportingBrowsersList_579591 = ref object of OpenApiRestCall_578364
proc url_DfareportingBrowsersList_579593(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/browsers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingBrowsersList_579592(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of browsers.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579594 = path.getOrDefault("profileId")
  valid_579594 = validateParameter(valid_579594, JString, required = true,
                                 default = nil)
  if valid_579594 != nil:
    section.add "profileId", valid_579594
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579595 = query.getOrDefault("key")
  valid_579595 = validateParameter(valid_579595, JString, required = false,
                                 default = nil)
  if valid_579595 != nil:
    section.add "key", valid_579595
  var valid_579596 = query.getOrDefault("prettyPrint")
  valid_579596 = validateParameter(valid_579596, JBool, required = false,
                                 default = newJBool(true))
  if valid_579596 != nil:
    section.add "prettyPrint", valid_579596
  var valid_579597 = query.getOrDefault("oauth_token")
  valid_579597 = validateParameter(valid_579597, JString, required = false,
                                 default = nil)
  if valid_579597 != nil:
    section.add "oauth_token", valid_579597
  var valid_579598 = query.getOrDefault("alt")
  valid_579598 = validateParameter(valid_579598, JString, required = false,
                                 default = newJString("json"))
  if valid_579598 != nil:
    section.add "alt", valid_579598
  var valid_579599 = query.getOrDefault("userIp")
  valid_579599 = validateParameter(valid_579599, JString, required = false,
                                 default = nil)
  if valid_579599 != nil:
    section.add "userIp", valid_579599
  var valid_579600 = query.getOrDefault("quotaUser")
  valid_579600 = validateParameter(valid_579600, JString, required = false,
                                 default = nil)
  if valid_579600 != nil:
    section.add "quotaUser", valid_579600
  var valid_579601 = query.getOrDefault("fields")
  valid_579601 = validateParameter(valid_579601, JString, required = false,
                                 default = nil)
  if valid_579601 != nil:
    section.add "fields", valid_579601
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579602: Call_DfareportingBrowsersList_579591; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of browsers.
  ## 
  let valid = call_579602.validator(path, query, header, formData, body)
  let scheme = call_579602.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579602.url(scheme.get, call_579602.host, call_579602.base,
                         call_579602.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579602, url, valid)

proc call*(call_579603: Call_DfareportingBrowsersList_579591; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingBrowsersList
  ## Retrieves a list of browsers.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579604 = newJObject()
  var query_579605 = newJObject()
  add(query_579605, "key", newJString(key))
  add(query_579605, "prettyPrint", newJBool(prettyPrint))
  add(query_579605, "oauth_token", newJString(oauthToken))
  add(path_579604, "profileId", newJString(profileId))
  add(query_579605, "alt", newJString(alt))
  add(query_579605, "userIp", newJString(userIp))
  add(query_579605, "quotaUser", newJString(quotaUser))
  add(query_579605, "fields", newJString(fields))
  result = call_579603.call(path_579604, query_579605, nil, nil, nil)

var dfareportingBrowsersList* = Call_DfareportingBrowsersList_579591(
    name: "dfareportingBrowsersList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/browsers",
    validator: validate_DfareportingBrowsersList_579592,
    base: "/dfareporting/v3.1", url: url_DfareportingBrowsersList_579593,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsUpdate_579634 = ref object of OpenApiRestCall_578364
proc url_DfareportingCampaignsUpdate_579636(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsUpdate_579635(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing campaign.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579637 = path.getOrDefault("profileId")
  valid_579637 = validateParameter(valid_579637, JString, required = true,
                                 default = nil)
  if valid_579637 != nil:
    section.add "profileId", valid_579637
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579638 = query.getOrDefault("key")
  valid_579638 = validateParameter(valid_579638, JString, required = false,
                                 default = nil)
  if valid_579638 != nil:
    section.add "key", valid_579638
  var valid_579639 = query.getOrDefault("prettyPrint")
  valid_579639 = validateParameter(valid_579639, JBool, required = false,
                                 default = newJBool(true))
  if valid_579639 != nil:
    section.add "prettyPrint", valid_579639
  var valid_579640 = query.getOrDefault("oauth_token")
  valid_579640 = validateParameter(valid_579640, JString, required = false,
                                 default = nil)
  if valid_579640 != nil:
    section.add "oauth_token", valid_579640
  var valid_579641 = query.getOrDefault("alt")
  valid_579641 = validateParameter(valid_579641, JString, required = false,
                                 default = newJString("json"))
  if valid_579641 != nil:
    section.add "alt", valid_579641
  var valid_579642 = query.getOrDefault("userIp")
  valid_579642 = validateParameter(valid_579642, JString, required = false,
                                 default = nil)
  if valid_579642 != nil:
    section.add "userIp", valid_579642
  var valid_579643 = query.getOrDefault("quotaUser")
  valid_579643 = validateParameter(valid_579643, JString, required = false,
                                 default = nil)
  if valid_579643 != nil:
    section.add "quotaUser", valid_579643
  var valid_579644 = query.getOrDefault("fields")
  valid_579644 = validateParameter(valid_579644, JString, required = false,
                                 default = nil)
  if valid_579644 != nil:
    section.add "fields", valid_579644
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579646: Call_DfareportingCampaignsUpdate_579634; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing campaign.
  ## 
  let valid = call_579646.validator(path, query, header, formData, body)
  let scheme = call_579646.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579646.url(scheme.get, call_579646.host, call_579646.base,
                         call_579646.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579646, url, valid)

proc call*(call_579647: Call_DfareportingCampaignsUpdate_579634; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCampaignsUpdate
  ## Updates an existing campaign.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579648 = newJObject()
  var query_579649 = newJObject()
  var body_579650 = newJObject()
  add(query_579649, "key", newJString(key))
  add(query_579649, "prettyPrint", newJBool(prettyPrint))
  add(query_579649, "oauth_token", newJString(oauthToken))
  add(path_579648, "profileId", newJString(profileId))
  add(query_579649, "alt", newJString(alt))
  add(query_579649, "userIp", newJString(userIp))
  add(query_579649, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579650 = body
  add(query_579649, "fields", newJString(fields))
  result = call_579647.call(path_579648, query_579649, nil, nil, body_579650)

var dfareportingCampaignsUpdate* = Call_DfareportingCampaignsUpdate_579634(
    name: "dfareportingCampaignsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns",
    validator: validate_DfareportingCampaignsUpdate_579635,
    base: "/dfareporting/v3.1", url: url_DfareportingCampaignsUpdate_579636,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsInsert_579651 = ref object of OpenApiRestCall_578364
proc url_DfareportingCampaignsInsert_579653(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsInsert_579652(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new campaign.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579654 = path.getOrDefault("profileId")
  valid_579654 = validateParameter(valid_579654, JString, required = true,
                                 default = nil)
  if valid_579654 != nil:
    section.add "profileId", valid_579654
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579655 = query.getOrDefault("key")
  valid_579655 = validateParameter(valid_579655, JString, required = false,
                                 default = nil)
  if valid_579655 != nil:
    section.add "key", valid_579655
  var valid_579656 = query.getOrDefault("prettyPrint")
  valid_579656 = validateParameter(valid_579656, JBool, required = false,
                                 default = newJBool(true))
  if valid_579656 != nil:
    section.add "prettyPrint", valid_579656
  var valid_579657 = query.getOrDefault("oauth_token")
  valid_579657 = validateParameter(valid_579657, JString, required = false,
                                 default = nil)
  if valid_579657 != nil:
    section.add "oauth_token", valid_579657
  var valid_579658 = query.getOrDefault("alt")
  valid_579658 = validateParameter(valid_579658, JString, required = false,
                                 default = newJString("json"))
  if valid_579658 != nil:
    section.add "alt", valid_579658
  var valid_579659 = query.getOrDefault("userIp")
  valid_579659 = validateParameter(valid_579659, JString, required = false,
                                 default = nil)
  if valid_579659 != nil:
    section.add "userIp", valid_579659
  var valid_579660 = query.getOrDefault("quotaUser")
  valid_579660 = validateParameter(valid_579660, JString, required = false,
                                 default = nil)
  if valid_579660 != nil:
    section.add "quotaUser", valid_579660
  var valid_579661 = query.getOrDefault("fields")
  valid_579661 = validateParameter(valid_579661, JString, required = false,
                                 default = nil)
  if valid_579661 != nil:
    section.add "fields", valid_579661
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579663: Call_DfareportingCampaignsInsert_579651; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new campaign.
  ## 
  let valid = call_579663.validator(path, query, header, formData, body)
  let scheme = call_579663.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579663.url(scheme.get, call_579663.host, call_579663.base,
                         call_579663.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579663, url, valid)

proc call*(call_579664: Call_DfareportingCampaignsInsert_579651; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCampaignsInsert
  ## Inserts a new campaign.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579665 = newJObject()
  var query_579666 = newJObject()
  var body_579667 = newJObject()
  add(query_579666, "key", newJString(key))
  add(query_579666, "prettyPrint", newJBool(prettyPrint))
  add(query_579666, "oauth_token", newJString(oauthToken))
  add(path_579665, "profileId", newJString(profileId))
  add(query_579666, "alt", newJString(alt))
  add(query_579666, "userIp", newJString(userIp))
  add(query_579666, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579667 = body
  add(query_579666, "fields", newJString(fields))
  result = call_579664.call(path_579665, query_579666, nil, nil, body_579667)

var dfareportingCampaignsInsert* = Call_DfareportingCampaignsInsert_579651(
    name: "dfareportingCampaignsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns",
    validator: validate_DfareportingCampaignsInsert_579652,
    base: "/dfareporting/v3.1", url: url_DfareportingCampaignsInsert_579653,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsList_579606 = ref object of OpenApiRestCall_578364
proc url_DfareportingCampaignsList_579608(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsList_579607(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of campaigns, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579609 = path.getOrDefault("profileId")
  valid_579609 = validateParameter(valid_579609, JString, required = true,
                                 default = nil)
  if valid_579609 != nil:
    section.add "profileId", valid_579609
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   advertiserIds: JArray
  ##                : Select only campaigns that belong to these advertisers.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived campaigns. Don't set this field to select both archived and non-archived campaigns.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   overriddenEventTagId: JString
  ##                       : Select only campaigns that have overridden this event tag ID.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for campaigns by name or ID. Wildcards (*) are allowed. For example, "campaign*2015" will return campaigns with names like "campaign June 2015", "campaign April 2015", or simply "campaign 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "campaign" will match campaigns with name "my campaign", "campaign 2015", or simply "campaign".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   subaccountId: JString
  ##               : Select only campaigns that belong to this subaccount.
  ##   atLeastOneOptimizationActivity: JBool
  ##                                 : Select only campaigns that have at least one optimization activity.
  ##   ids: JArray
  ##      : Select only campaigns with these IDs.
  ##   excludedIds: JArray
  ##              : Exclude campaigns with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   advertiserGroupIds: JArray
  ##                     : Select only campaigns whose advertisers belong to these advertiser groups.
  section = newJObject()
  var valid_579610 = query.getOrDefault("key")
  valid_579610 = validateParameter(valid_579610, JString, required = false,
                                 default = nil)
  if valid_579610 != nil:
    section.add "key", valid_579610
  var valid_579611 = query.getOrDefault("prettyPrint")
  valid_579611 = validateParameter(valid_579611, JBool, required = false,
                                 default = newJBool(true))
  if valid_579611 != nil:
    section.add "prettyPrint", valid_579611
  var valid_579612 = query.getOrDefault("oauth_token")
  valid_579612 = validateParameter(valid_579612, JString, required = false,
                                 default = nil)
  if valid_579612 != nil:
    section.add "oauth_token", valid_579612
  var valid_579613 = query.getOrDefault("sortField")
  valid_579613 = validateParameter(valid_579613, JString, required = false,
                                 default = newJString("ID"))
  if valid_579613 != nil:
    section.add "sortField", valid_579613
  var valid_579614 = query.getOrDefault("advertiserIds")
  valid_579614 = validateParameter(valid_579614, JArray, required = false,
                                 default = nil)
  if valid_579614 != nil:
    section.add "advertiserIds", valid_579614
  var valid_579615 = query.getOrDefault("alt")
  valid_579615 = validateParameter(valid_579615, JString, required = false,
                                 default = newJString("json"))
  if valid_579615 != nil:
    section.add "alt", valid_579615
  var valid_579616 = query.getOrDefault("userIp")
  valid_579616 = validateParameter(valid_579616, JString, required = false,
                                 default = nil)
  if valid_579616 != nil:
    section.add "userIp", valid_579616
  var valid_579617 = query.getOrDefault("archived")
  valid_579617 = validateParameter(valid_579617, JBool, required = false, default = nil)
  if valid_579617 != nil:
    section.add "archived", valid_579617
  var valid_579618 = query.getOrDefault("quotaUser")
  valid_579618 = validateParameter(valid_579618, JString, required = false,
                                 default = nil)
  if valid_579618 != nil:
    section.add "quotaUser", valid_579618
  var valid_579619 = query.getOrDefault("overriddenEventTagId")
  valid_579619 = validateParameter(valid_579619, JString, required = false,
                                 default = nil)
  if valid_579619 != nil:
    section.add "overriddenEventTagId", valid_579619
  var valid_579620 = query.getOrDefault("pageToken")
  valid_579620 = validateParameter(valid_579620, JString, required = false,
                                 default = nil)
  if valid_579620 != nil:
    section.add "pageToken", valid_579620
  var valid_579621 = query.getOrDefault("searchString")
  valid_579621 = validateParameter(valid_579621, JString, required = false,
                                 default = nil)
  if valid_579621 != nil:
    section.add "searchString", valid_579621
  var valid_579622 = query.getOrDefault("sortOrder")
  valid_579622 = validateParameter(valid_579622, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_579622 != nil:
    section.add "sortOrder", valid_579622
  var valid_579623 = query.getOrDefault("subaccountId")
  valid_579623 = validateParameter(valid_579623, JString, required = false,
                                 default = nil)
  if valid_579623 != nil:
    section.add "subaccountId", valid_579623
  var valid_579624 = query.getOrDefault("atLeastOneOptimizationActivity")
  valid_579624 = validateParameter(valid_579624, JBool, required = false, default = nil)
  if valid_579624 != nil:
    section.add "atLeastOneOptimizationActivity", valid_579624
  var valid_579625 = query.getOrDefault("ids")
  valid_579625 = validateParameter(valid_579625, JArray, required = false,
                                 default = nil)
  if valid_579625 != nil:
    section.add "ids", valid_579625
  var valid_579626 = query.getOrDefault("excludedIds")
  valid_579626 = validateParameter(valid_579626, JArray, required = false,
                                 default = nil)
  if valid_579626 != nil:
    section.add "excludedIds", valid_579626
  var valid_579627 = query.getOrDefault("fields")
  valid_579627 = validateParameter(valid_579627, JString, required = false,
                                 default = nil)
  if valid_579627 != nil:
    section.add "fields", valid_579627
  var valid_579628 = query.getOrDefault("maxResults")
  valid_579628 = validateParameter(valid_579628, JInt, required = false,
                                 default = newJInt(1000))
  if valid_579628 != nil:
    section.add "maxResults", valid_579628
  var valid_579629 = query.getOrDefault("advertiserGroupIds")
  valid_579629 = validateParameter(valid_579629, JArray, required = false,
                                 default = nil)
  if valid_579629 != nil:
    section.add "advertiserGroupIds", valid_579629
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579630: Call_DfareportingCampaignsList_579606; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of campaigns, possibly filtered. This method supports paging.
  ## 
  let valid = call_579630.validator(path, query, header, formData, body)
  let scheme = call_579630.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579630.url(scheme.get, call_579630.host, call_579630.base,
                         call_579630.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579630, url, valid)

proc call*(call_579631: Call_DfareportingCampaignsList_579606; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          sortField: string = "ID"; advertiserIds: JsonNode = nil; alt: string = "json";
          userIp: string = ""; archived: bool = false; quotaUser: string = "";
          overriddenEventTagId: string = ""; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          subaccountId: string = ""; atLeastOneOptimizationActivity: bool = false;
          ids: JsonNode = nil; excludedIds: JsonNode = nil; fields: string = "";
          maxResults: int = 1000; advertiserGroupIds: JsonNode = nil): Recallable =
  ## dfareportingCampaignsList
  ## Retrieves a list of campaigns, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   advertiserIds: JArray
  ##                : Select only campaigns that belong to these advertisers.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived campaigns. Don't set this field to select both archived and non-archived campaigns.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   overriddenEventTagId: string
  ##                       : Select only campaigns that have overridden this event tag ID.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for campaigns by name or ID. Wildcards (*) are allowed. For example, "campaign*2015" will return campaigns with names like "campaign June 2015", "campaign April 2015", or simply "campaign 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "campaign" will match campaigns with name "my campaign", "campaign 2015", or simply "campaign".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   subaccountId: string
  ##               : Select only campaigns that belong to this subaccount.
  ##   atLeastOneOptimizationActivity: bool
  ##                                 : Select only campaigns that have at least one optimization activity.
  ##   ids: JArray
  ##      : Select only campaigns with these IDs.
  ##   excludedIds: JArray
  ##              : Exclude campaigns with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   advertiserGroupIds: JArray
  ##                     : Select only campaigns whose advertisers belong to these advertiser groups.
  var path_579632 = newJObject()
  var query_579633 = newJObject()
  add(query_579633, "key", newJString(key))
  add(query_579633, "prettyPrint", newJBool(prettyPrint))
  add(query_579633, "oauth_token", newJString(oauthToken))
  add(path_579632, "profileId", newJString(profileId))
  add(query_579633, "sortField", newJString(sortField))
  if advertiserIds != nil:
    query_579633.add "advertiserIds", advertiserIds
  add(query_579633, "alt", newJString(alt))
  add(query_579633, "userIp", newJString(userIp))
  add(query_579633, "archived", newJBool(archived))
  add(query_579633, "quotaUser", newJString(quotaUser))
  add(query_579633, "overriddenEventTagId", newJString(overriddenEventTagId))
  add(query_579633, "pageToken", newJString(pageToken))
  add(query_579633, "searchString", newJString(searchString))
  add(query_579633, "sortOrder", newJString(sortOrder))
  add(query_579633, "subaccountId", newJString(subaccountId))
  add(query_579633, "atLeastOneOptimizationActivity",
      newJBool(atLeastOneOptimizationActivity))
  if ids != nil:
    query_579633.add "ids", ids
  if excludedIds != nil:
    query_579633.add "excludedIds", excludedIds
  add(query_579633, "fields", newJString(fields))
  add(query_579633, "maxResults", newJInt(maxResults))
  if advertiserGroupIds != nil:
    query_579633.add "advertiserGroupIds", advertiserGroupIds
  result = call_579631.call(path_579632, query_579633, nil, nil, nil)

var dfareportingCampaignsList* = Call_DfareportingCampaignsList_579606(
    name: "dfareportingCampaignsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns",
    validator: validate_DfareportingCampaignsList_579607,
    base: "/dfareporting/v3.1", url: url_DfareportingCampaignsList_579608,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsPatch_579668 = ref object of OpenApiRestCall_578364
proc url_DfareportingCampaignsPatch_579670(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsPatch_579669(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing campaign. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579671 = path.getOrDefault("profileId")
  valid_579671 = validateParameter(valid_579671, JString, required = true,
                                 default = nil)
  if valid_579671 != nil:
    section.add "profileId", valid_579671
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Campaign ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579672 = query.getOrDefault("key")
  valid_579672 = validateParameter(valid_579672, JString, required = false,
                                 default = nil)
  if valid_579672 != nil:
    section.add "key", valid_579672
  var valid_579673 = query.getOrDefault("prettyPrint")
  valid_579673 = validateParameter(valid_579673, JBool, required = false,
                                 default = newJBool(true))
  if valid_579673 != nil:
    section.add "prettyPrint", valid_579673
  var valid_579674 = query.getOrDefault("oauth_token")
  valid_579674 = validateParameter(valid_579674, JString, required = false,
                                 default = nil)
  if valid_579674 != nil:
    section.add "oauth_token", valid_579674
  var valid_579675 = query.getOrDefault("alt")
  valid_579675 = validateParameter(valid_579675, JString, required = false,
                                 default = newJString("json"))
  if valid_579675 != nil:
    section.add "alt", valid_579675
  var valid_579676 = query.getOrDefault("userIp")
  valid_579676 = validateParameter(valid_579676, JString, required = false,
                                 default = nil)
  if valid_579676 != nil:
    section.add "userIp", valid_579676
  var valid_579677 = query.getOrDefault("quotaUser")
  valid_579677 = validateParameter(valid_579677, JString, required = false,
                                 default = nil)
  if valid_579677 != nil:
    section.add "quotaUser", valid_579677
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_579678 = query.getOrDefault("id")
  valid_579678 = validateParameter(valid_579678, JString, required = true,
                                 default = nil)
  if valid_579678 != nil:
    section.add "id", valid_579678
  var valid_579679 = query.getOrDefault("fields")
  valid_579679 = validateParameter(valid_579679, JString, required = false,
                                 default = nil)
  if valid_579679 != nil:
    section.add "fields", valid_579679
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579681: Call_DfareportingCampaignsPatch_579668; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing campaign. This method supports patch semantics.
  ## 
  let valid = call_579681.validator(path, query, header, formData, body)
  let scheme = call_579681.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579681.url(scheme.get, call_579681.host, call_579681.base,
                         call_579681.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579681, url, valid)

proc call*(call_579682: Call_DfareportingCampaignsPatch_579668; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCampaignsPatch
  ## Updates an existing campaign. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Campaign ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579683 = newJObject()
  var query_579684 = newJObject()
  var body_579685 = newJObject()
  add(query_579684, "key", newJString(key))
  add(query_579684, "prettyPrint", newJBool(prettyPrint))
  add(query_579684, "oauth_token", newJString(oauthToken))
  add(path_579683, "profileId", newJString(profileId))
  add(query_579684, "alt", newJString(alt))
  add(query_579684, "userIp", newJString(userIp))
  add(query_579684, "quotaUser", newJString(quotaUser))
  add(query_579684, "id", newJString(id))
  if body != nil:
    body_579685 = body
  add(query_579684, "fields", newJString(fields))
  result = call_579682.call(path_579683, query_579684, nil, nil, body_579685)

var dfareportingCampaignsPatch* = Call_DfareportingCampaignsPatch_579668(
    name: "dfareportingCampaignsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns",
    validator: validate_DfareportingCampaignsPatch_579669,
    base: "/dfareporting/v3.1", url: url_DfareportingCampaignsPatch_579670,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignCreativeAssociationsInsert_579705 = ref object of OpenApiRestCall_578364
proc url_DfareportingCampaignCreativeAssociationsInsert_579707(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "campaignId" in path, "`campaignId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns/"),
               (kind: VariableSegment, value: "campaignId"),
               (kind: ConstantSegment, value: "/campaignCreativeAssociations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignCreativeAssociationsInsert_579706(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   campaignId: JString (required)
  ##             : Campaign ID in this association.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579708 = path.getOrDefault("profileId")
  valid_579708 = validateParameter(valid_579708, JString, required = true,
                                 default = nil)
  if valid_579708 != nil:
    section.add "profileId", valid_579708
  var valid_579709 = path.getOrDefault("campaignId")
  valid_579709 = validateParameter(valid_579709, JString, required = true,
                                 default = nil)
  if valid_579709 != nil:
    section.add "campaignId", valid_579709
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579710 = query.getOrDefault("key")
  valid_579710 = validateParameter(valid_579710, JString, required = false,
                                 default = nil)
  if valid_579710 != nil:
    section.add "key", valid_579710
  var valid_579711 = query.getOrDefault("prettyPrint")
  valid_579711 = validateParameter(valid_579711, JBool, required = false,
                                 default = newJBool(true))
  if valid_579711 != nil:
    section.add "prettyPrint", valid_579711
  var valid_579712 = query.getOrDefault("oauth_token")
  valid_579712 = validateParameter(valid_579712, JString, required = false,
                                 default = nil)
  if valid_579712 != nil:
    section.add "oauth_token", valid_579712
  var valid_579713 = query.getOrDefault("alt")
  valid_579713 = validateParameter(valid_579713, JString, required = false,
                                 default = newJString("json"))
  if valid_579713 != nil:
    section.add "alt", valid_579713
  var valid_579714 = query.getOrDefault("userIp")
  valid_579714 = validateParameter(valid_579714, JString, required = false,
                                 default = nil)
  if valid_579714 != nil:
    section.add "userIp", valid_579714
  var valid_579715 = query.getOrDefault("quotaUser")
  valid_579715 = validateParameter(valid_579715, JString, required = false,
                                 default = nil)
  if valid_579715 != nil:
    section.add "quotaUser", valid_579715
  var valid_579716 = query.getOrDefault("fields")
  valid_579716 = validateParameter(valid_579716, JString, required = false,
                                 default = nil)
  if valid_579716 != nil:
    section.add "fields", valid_579716
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579718: Call_DfareportingCampaignCreativeAssociationsInsert_579705;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already.
  ## 
  let valid = call_579718.validator(path, query, header, formData, body)
  let scheme = call_579718.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579718.url(scheme.get, call_579718.host, call_579718.base,
                         call_579718.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579718, url, valid)

proc call*(call_579719: Call_DfareportingCampaignCreativeAssociationsInsert_579705;
          profileId: string; campaignId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; body: JsonNode = nil;
          fields: string = ""): Recallable =
  ## dfareportingCampaignCreativeAssociationsInsert
  ## Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   campaignId: string (required)
  ##             : Campaign ID in this association.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579720 = newJObject()
  var query_579721 = newJObject()
  var body_579722 = newJObject()
  add(query_579721, "key", newJString(key))
  add(query_579721, "prettyPrint", newJBool(prettyPrint))
  add(query_579721, "oauth_token", newJString(oauthToken))
  add(path_579720, "profileId", newJString(profileId))
  add(query_579721, "alt", newJString(alt))
  add(query_579721, "userIp", newJString(userIp))
  add(query_579721, "quotaUser", newJString(quotaUser))
  add(path_579720, "campaignId", newJString(campaignId))
  if body != nil:
    body_579722 = body
  add(query_579721, "fields", newJString(fields))
  result = call_579719.call(path_579720, query_579721, nil, nil, body_579722)

var dfareportingCampaignCreativeAssociationsInsert* = Call_DfareportingCampaignCreativeAssociationsInsert_579705(
    name: "dfareportingCampaignCreativeAssociationsInsert",
    meth: HttpMethod.HttpPost, host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations",
    validator: validate_DfareportingCampaignCreativeAssociationsInsert_579706,
    base: "/dfareporting/v3.1",
    url: url_DfareportingCampaignCreativeAssociationsInsert_579707,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignCreativeAssociationsList_579686 = ref object of OpenApiRestCall_578364
proc url_DfareportingCampaignCreativeAssociationsList_579688(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "campaignId" in path, "`campaignId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns/"),
               (kind: VariableSegment, value: "campaignId"),
               (kind: ConstantSegment, value: "/campaignCreativeAssociations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignCreativeAssociationsList_579687(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the list of creative IDs associated with the specified campaign. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   campaignId: JString (required)
  ##             : Campaign ID in this association.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579689 = path.getOrDefault("profileId")
  valid_579689 = validateParameter(valid_579689, JString, required = true,
                                 default = nil)
  if valid_579689 != nil:
    section.add "profileId", valid_579689
  var valid_579690 = path.getOrDefault("campaignId")
  valid_579690 = validateParameter(valid_579690, JString, required = true,
                                 default = nil)
  if valid_579690 != nil:
    section.add "campaignId", valid_579690
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_579691 = query.getOrDefault("key")
  valid_579691 = validateParameter(valid_579691, JString, required = false,
                                 default = nil)
  if valid_579691 != nil:
    section.add "key", valid_579691
  var valid_579692 = query.getOrDefault("prettyPrint")
  valid_579692 = validateParameter(valid_579692, JBool, required = false,
                                 default = newJBool(true))
  if valid_579692 != nil:
    section.add "prettyPrint", valid_579692
  var valid_579693 = query.getOrDefault("oauth_token")
  valid_579693 = validateParameter(valid_579693, JString, required = false,
                                 default = nil)
  if valid_579693 != nil:
    section.add "oauth_token", valid_579693
  var valid_579694 = query.getOrDefault("alt")
  valid_579694 = validateParameter(valid_579694, JString, required = false,
                                 default = newJString("json"))
  if valid_579694 != nil:
    section.add "alt", valid_579694
  var valid_579695 = query.getOrDefault("userIp")
  valid_579695 = validateParameter(valid_579695, JString, required = false,
                                 default = nil)
  if valid_579695 != nil:
    section.add "userIp", valid_579695
  var valid_579696 = query.getOrDefault("quotaUser")
  valid_579696 = validateParameter(valid_579696, JString, required = false,
                                 default = nil)
  if valid_579696 != nil:
    section.add "quotaUser", valid_579696
  var valid_579697 = query.getOrDefault("pageToken")
  valid_579697 = validateParameter(valid_579697, JString, required = false,
                                 default = nil)
  if valid_579697 != nil:
    section.add "pageToken", valid_579697
  var valid_579698 = query.getOrDefault("sortOrder")
  valid_579698 = validateParameter(valid_579698, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_579698 != nil:
    section.add "sortOrder", valid_579698
  var valid_579699 = query.getOrDefault("fields")
  valid_579699 = validateParameter(valid_579699, JString, required = false,
                                 default = nil)
  if valid_579699 != nil:
    section.add "fields", valid_579699
  var valid_579700 = query.getOrDefault("maxResults")
  valid_579700 = validateParameter(valid_579700, JInt, required = false,
                                 default = newJInt(1000))
  if valid_579700 != nil:
    section.add "maxResults", valid_579700
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579701: Call_DfareportingCampaignCreativeAssociationsList_579686;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the list of creative IDs associated with the specified campaign. This method supports paging.
  ## 
  let valid = call_579701.validator(path, query, header, formData, body)
  let scheme = call_579701.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579701.url(scheme.get, call_579701.host, call_579701.base,
                         call_579701.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579701, url, valid)

proc call*(call_579702: Call_DfareportingCampaignCreativeAssociationsList_579686;
          profileId: string; campaignId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; pageToken: string = "";
          sortOrder: string = "ASCENDING"; fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingCampaignCreativeAssociationsList
  ## Retrieves the list of creative IDs associated with the specified campaign. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   campaignId: string (required)
  ##             : Campaign ID in this association.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_579703 = newJObject()
  var query_579704 = newJObject()
  add(query_579704, "key", newJString(key))
  add(query_579704, "prettyPrint", newJBool(prettyPrint))
  add(query_579704, "oauth_token", newJString(oauthToken))
  add(path_579703, "profileId", newJString(profileId))
  add(query_579704, "alt", newJString(alt))
  add(query_579704, "userIp", newJString(userIp))
  add(query_579704, "quotaUser", newJString(quotaUser))
  add(query_579704, "pageToken", newJString(pageToken))
  add(query_579704, "sortOrder", newJString(sortOrder))
  add(path_579703, "campaignId", newJString(campaignId))
  add(query_579704, "fields", newJString(fields))
  add(query_579704, "maxResults", newJInt(maxResults))
  result = call_579702.call(path_579703, query_579704, nil, nil, nil)

var dfareportingCampaignCreativeAssociationsList* = Call_DfareportingCampaignCreativeAssociationsList_579686(
    name: "dfareportingCampaignCreativeAssociationsList",
    meth: HttpMethod.HttpGet, host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations",
    validator: validate_DfareportingCampaignCreativeAssociationsList_579687,
    base: "/dfareporting/v3.1",
    url: url_DfareportingCampaignCreativeAssociationsList_579688,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsGet_579723 = ref object of OpenApiRestCall_578364
proc url_DfareportingCampaignsGet_579725(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsGet_579724(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one campaign by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Campaign ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579726 = path.getOrDefault("profileId")
  valid_579726 = validateParameter(valid_579726, JString, required = true,
                                 default = nil)
  if valid_579726 != nil:
    section.add "profileId", valid_579726
  var valid_579727 = path.getOrDefault("id")
  valid_579727 = validateParameter(valid_579727, JString, required = true,
                                 default = nil)
  if valid_579727 != nil:
    section.add "id", valid_579727
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579728 = query.getOrDefault("key")
  valid_579728 = validateParameter(valid_579728, JString, required = false,
                                 default = nil)
  if valid_579728 != nil:
    section.add "key", valid_579728
  var valid_579729 = query.getOrDefault("prettyPrint")
  valid_579729 = validateParameter(valid_579729, JBool, required = false,
                                 default = newJBool(true))
  if valid_579729 != nil:
    section.add "prettyPrint", valid_579729
  var valid_579730 = query.getOrDefault("oauth_token")
  valid_579730 = validateParameter(valid_579730, JString, required = false,
                                 default = nil)
  if valid_579730 != nil:
    section.add "oauth_token", valid_579730
  var valid_579731 = query.getOrDefault("alt")
  valid_579731 = validateParameter(valid_579731, JString, required = false,
                                 default = newJString("json"))
  if valid_579731 != nil:
    section.add "alt", valid_579731
  var valid_579732 = query.getOrDefault("userIp")
  valid_579732 = validateParameter(valid_579732, JString, required = false,
                                 default = nil)
  if valid_579732 != nil:
    section.add "userIp", valid_579732
  var valid_579733 = query.getOrDefault("quotaUser")
  valid_579733 = validateParameter(valid_579733, JString, required = false,
                                 default = nil)
  if valid_579733 != nil:
    section.add "quotaUser", valid_579733
  var valid_579734 = query.getOrDefault("fields")
  valid_579734 = validateParameter(valid_579734, JString, required = false,
                                 default = nil)
  if valid_579734 != nil:
    section.add "fields", valid_579734
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579735: Call_DfareportingCampaignsGet_579723; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one campaign by ID.
  ## 
  let valid = call_579735.validator(path, query, header, formData, body)
  let scheme = call_579735.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579735.url(scheme.get, call_579735.host, call_579735.base,
                         call_579735.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579735, url, valid)

proc call*(call_579736: Call_DfareportingCampaignsGet_579723; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingCampaignsGet
  ## Gets one campaign by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Campaign ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579737 = newJObject()
  var query_579738 = newJObject()
  add(query_579738, "key", newJString(key))
  add(query_579738, "prettyPrint", newJBool(prettyPrint))
  add(query_579738, "oauth_token", newJString(oauthToken))
  add(path_579737, "profileId", newJString(profileId))
  add(path_579737, "id", newJString(id))
  add(query_579738, "alt", newJString(alt))
  add(query_579738, "userIp", newJString(userIp))
  add(query_579738, "quotaUser", newJString(quotaUser))
  add(query_579738, "fields", newJString(fields))
  result = call_579736.call(path_579737, query_579738, nil, nil, nil)

var dfareportingCampaignsGet* = Call_DfareportingCampaignsGet_579723(
    name: "dfareportingCampaignsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns/{id}",
    validator: validate_DfareportingCampaignsGet_579724,
    base: "/dfareporting/v3.1", url: url_DfareportingCampaignsGet_579725,
    schemes: {Scheme.Https})
type
  Call_DfareportingChangeLogsList_579739 = ref object of OpenApiRestCall_578364
proc url_DfareportingChangeLogsList_579741(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/changeLogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingChangeLogsList_579740(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of change logs. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579742 = path.getOrDefault("profileId")
  valid_579742 = validateParameter(valid_579742, JString, required = true,
                                 default = nil)
  if valid_579742 != nil:
    section.add "profileId", valid_579742
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   objectType: JString
  ##             : Select only change logs with the specified object type.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   action: JString
  ##         : Select only change logs with the specified action.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   objectIds: JArray
  ##            : Select only change logs with these object IDs.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Select only change logs whose object ID, user name, old or new values match the search string.
  ##   userProfileIds: JArray
  ##                 : Select only change logs with these user profile IDs.
  ##   maxChangeTime: JString
  ##                : Select only change logs whose change time is before the specified maxChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
  ##   ids: JArray
  ##      : Select only change logs with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   minChangeTime: JString
  ##                : Select only change logs whose change time is before the specified minChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_579743 = query.getOrDefault("key")
  valid_579743 = validateParameter(valid_579743, JString, required = false,
                                 default = nil)
  if valid_579743 != nil:
    section.add "key", valid_579743
  var valid_579744 = query.getOrDefault("objectType")
  valid_579744 = validateParameter(valid_579744, JString, required = false,
                                 default = newJString("OBJECT_ACCOUNT"))
  if valid_579744 != nil:
    section.add "objectType", valid_579744
  var valid_579745 = query.getOrDefault("prettyPrint")
  valid_579745 = validateParameter(valid_579745, JBool, required = false,
                                 default = newJBool(true))
  if valid_579745 != nil:
    section.add "prettyPrint", valid_579745
  var valid_579746 = query.getOrDefault("oauth_token")
  valid_579746 = validateParameter(valid_579746, JString, required = false,
                                 default = nil)
  if valid_579746 != nil:
    section.add "oauth_token", valid_579746
  var valid_579747 = query.getOrDefault("action")
  valid_579747 = validateParameter(valid_579747, JString, required = false,
                                 default = newJString("ACTION_ADD"))
  if valid_579747 != nil:
    section.add "action", valid_579747
  var valid_579748 = query.getOrDefault("alt")
  valid_579748 = validateParameter(valid_579748, JString, required = false,
                                 default = newJString("json"))
  if valid_579748 != nil:
    section.add "alt", valid_579748
  var valid_579749 = query.getOrDefault("userIp")
  valid_579749 = validateParameter(valid_579749, JString, required = false,
                                 default = nil)
  if valid_579749 != nil:
    section.add "userIp", valid_579749
  var valid_579750 = query.getOrDefault("quotaUser")
  valid_579750 = validateParameter(valid_579750, JString, required = false,
                                 default = nil)
  if valid_579750 != nil:
    section.add "quotaUser", valid_579750
  var valid_579751 = query.getOrDefault("objectIds")
  valid_579751 = validateParameter(valid_579751, JArray, required = false,
                                 default = nil)
  if valid_579751 != nil:
    section.add "objectIds", valid_579751
  var valid_579752 = query.getOrDefault("pageToken")
  valid_579752 = validateParameter(valid_579752, JString, required = false,
                                 default = nil)
  if valid_579752 != nil:
    section.add "pageToken", valid_579752
  var valid_579753 = query.getOrDefault("searchString")
  valid_579753 = validateParameter(valid_579753, JString, required = false,
                                 default = nil)
  if valid_579753 != nil:
    section.add "searchString", valid_579753
  var valid_579754 = query.getOrDefault("userProfileIds")
  valid_579754 = validateParameter(valid_579754, JArray, required = false,
                                 default = nil)
  if valid_579754 != nil:
    section.add "userProfileIds", valid_579754
  var valid_579755 = query.getOrDefault("maxChangeTime")
  valid_579755 = validateParameter(valid_579755, JString, required = false,
                                 default = nil)
  if valid_579755 != nil:
    section.add "maxChangeTime", valid_579755
  var valid_579756 = query.getOrDefault("ids")
  valid_579756 = validateParameter(valid_579756, JArray, required = false,
                                 default = nil)
  if valid_579756 != nil:
    section.add "ids", valid_579756
  var valid_579757 = query.getOrDefault("fields")
  valid_579757 = validateParameter(valid_579757, JString, required = false,
                                 default = nil)
  if valid_579757 != nil:
    section.add "fields", valid_579757
  var valid_579758 = query.getOrDefault("minChangeTime")
  valid_579758 = validateParameter(valid_579758, JString, required = false,
                                 default = nil)
  if valid_579758 != nil:
    section.add "minChangeTime", valid_579758
  var valid_579759 = query.getOrDefault("maxResults")
  valid_579759 = validateParameter(valid_579759, JInt, required = false,
                                 default = newJInt(1000))
  if valid_579759 != nil:
    section.add "maxResults", valid_579759
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579760: Call_DfareportingChangeLogsList_579739; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of change logs. This method supports paging.
  ## 
  let valid = call_579760.validator(path, query, header, formData, body)
  let scheme = call_579760.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579760.url(scheme.get, call_579760.host, call_579760.base,
                         call_579760.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579760, url, valid)

proc call*(call_579761: Call_DfareportingChangeLogsList_579739; profileId: string;
          key: string = ""; objectType: string = "OBJECT_ACCOUNT";
          prettyPrint: bool = true; oauthToken: string = "";
          action: string = "ACTION_ADD"; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; objectIds: JsonNode = nil; pageToken: string = "";
          searchString: string = ""; userProfileIds: JsonNode = nil;
          maxChangeTime: string = ""; ids: JsonNode = nil; fields: string = "";
          minChangeTime: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingChangeLogsList
  ## Retrieves a list of change logs. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   objectType: string
  ##             : Select only change logs with the specified object type.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   action: string
  ##         : Select only change logs with the specified action.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   objectIds: JArray
  ##            : Select only change logs with these object IDs.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Select only change logs whose object ID, user name, old or new values match the search string.
  ##   userProfileIds: JArray
  ##                 : Select only change logs with these user profile IDs.
  ##   maxChangeTime: string
  ##                : Select only change logs whose change time is before the specified maxChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
  ##   ids: JArray
  ##      : Select only change logs with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   minChangeTime: string
  ##                : Select only change logs whose change time is before the specified minChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_579762 = newJObject()
  var query_579763 = newJObject()
  add(query_579763, "key", newJString(key))
  add(query_579763, "objectType", newJString(objectType))
  add(query_579763, "prettyPrint", newJBool(prettyPrint))
  add(query_579763, "oauth_token", newJString(oauthToken))
  add(path_579762, "profileId", newJString(profileId))
  add(query_579763, "action", newJString(action))
  add(query_579763, "alt", newJString(alt))
  add(query_579763, "userIp", newJString(userIp))
  add(query_579763, "quotaUser", newJString(quotaUser))
  if objectIds != nil:
    query_579763.add "objectIds", objectIds
  add(query_579763, "pageToken", newJString(pageToken))
  add(query_579763, "searchString", newJString(searchString))
  if userProfileIds != nil:
    query_579763.add "userProfileIds", userProfileIds
  add(query_579763, "maxChangeTime", newJString(maxChangeTime))
  if ids != nil:
    query_579763.add "ids", ids
  add(query_579763, "fields", newJString(fields))
  add(query_579763, "minChangeTime", newJString(minChangeTime))
  add(query_579763, "maxResults", newJInt(maxResults))
  result = call_579761.call(path_579762, query_579763, nil, nil, nil)

var dfareportingChangeLogsList* = Call_DfareportingChangeLogsList_579739(
    name: "dfareportingChangeLogsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/changeLogs",
    validator: validate_DfareportingChangeLogsList_579740,
    base: "/dfareporting/v3.1", url: url_DfareportingChangeLogsList_579741,
    schemes: {Scheme.Https})
type
  Call_DfareportingChangeLogsGet_579764 = ref object of OpenApiRestCall_578364
proc url_DfareportingChangeLogsGet_579766(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/changeLogs/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingChangeLogsGet_579765(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one change log by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Change log ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579767 = path.getOrDefault("profileId")
  valid_579767 = validateParameter(valid_579767, JString, required = true,
                                 default = nil)
  if valid_579767 != nil:
    section.add "profileId", valid_579767
  var valid_579768 = path.getOrDefault("id")
  valid_579768 = validateParameter(valid_579768, JString, required = true,
                                 default = nil)
  if valid_579768 != nil:
    section.add "id", valid_579768
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579769 = query.getOrDefault("key")
  valid_579769 = validateParameter(valid_579769, JString, required = false,
                                 default = nil)
  if valid_579769 != nil:
    section.add "key", valid_579769
  var valid_579770 = query.getOrDefault("prettyPrint")
  valid_579770 = validateParameter(valid_579770, JBool, required = false,
                                 default = newJBool(true))
  if valid_579770 != nil:
    section.add "prettyPrint", valid_579770
  var valid_579771 = query.getOrDefault("oauth_token")
  valid_579771 = validateParameter(valid_579771, JString, required = false,
                                 default = nil)
  if valid_579771 != nil:
    section.add "oauth_token", valid_579771
  var valid_579772 = query.getOrDefault("alt")
  valid_579772 = validateParameter(valid_579772, JString, required = false,
                                 default = newJString("json"))
  if valid_579772 != nil:
    section.add "alt", valid_579772
  var valid_579773 = query.getOrDefault("userIp")
  valid_579773 = validateParameter(valid_579773, JString, required = false,
                                 default = nil)
  if valid_579773 != nil:
    section.add "userIp", valid_579773
  var valid_579774 = query.getOrDefault("quotaUser")
  valid_579774 = validateParameter(valid_579774, JString, required = false,
                                 default = nil)
  if valid_579774 != nil:
    section.add "quotaUser", valid_579774
  var valid_579775 = query.getOrDefault("fields")
  valid_579775 = validateParameter(valid_579775, JString, required = false,
                                 default = nil)
  if valid_579775 != nil:
    section.add "fields", valid_579775
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579776: Call_DfareportingChangeLogsGet_579764; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one change log by ID.
  ## 
  let valid = call_579776.validator(path, query, header, formData, body)
  let scheme = call_579776.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579776.url(scheme.get, call_579776.host, call_579776.base,
                         call_579776.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579776, url, valid)

proc call*(call_579777: Call_DfareportingChangeLogsGet_579764; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingChangeLogsGet
  ## Gets one change log by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Change log ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579778 = newJObject()
  var query_579779 = newJObject()
  add(query_579779, "key", newJString(key))
  add(query_579779, "prettyPrint", newJBool(prettyPrint))
  add(query_579779, "oauth_token", newJString(oauthToken))
  add(path_579778, "profileId", newJString(profileId))
  add(path_579778, "id", newJString(id))
  add(query_579779, "alt", newJString(alt))
  add(query_579779, "userIp", newJString(userIp))
  add(query_579779, "quotaUser", newJString(quotaUser))
  add(query_579779, "fields", newJString(fields))
  result = call_579777.call(path_579778, query_579779, nil, nil, nil)

var dfareportingChangeLogsGet* = Call_DfareportingChangeLogsGet_579764(
    name: "dfareportingChangeLogsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/changeLogs/{id}",
    validator: validate_DfareportingChangeLogsGet_579765,
    base: "/dfareporting/v3.1", url: url_DfareportingChangeLogsGet_579766,
    schemes: {Scheme.Https})
type
  Call_DfareportingCitiesList_579780 = ref object of OpenApiRestCall_578364
proc url_DfareportingCitiesList_579782(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/cities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCitiesList_579781(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of cities, possibly filtered.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579783 = path.getOrDefault("profileId")
  valid_579783 = validateParameter(valid_579783, JString, required = true,
                                 default = nil)
  if valid_579783 != nil:
    section.add "profileId", valid_579783
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   countryDartIds: JArray
  ##                 : Select only cities from these countries.
  ##   namePrefix: JString
  ##             : Select only cities with names starting with this prefix.
  ##   regionDartIds: JArray
  ##                : Select only cities from these regions.
  ##   dartIds: JArray
  ##          : Select only cities with these DART IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579784 = query.getOrDefault("key")
  valid_579784 = validateParameter(valid_579784, JString, required = false,
                                 default = nil)
  if valid_579784 != nil:
    section.add "key", valid_579784
  var valid_579785 = query.getOrDefault("prettyPrint")
  valid_579785 = validateParameter(valid_579785, JBool, required = false,
                                 default = newJBool(true))
  if valid_579785 != nil:
    section.add "prettyPrint", valid_579785
  var valid_579786 = query.getOrDefault("oauth_token")
  valid_579786 = validateParameter(valid_579786, JString, required = false,
                                 default = nil)
  if valid_579786 != nil:
    section.add "oauth_token", valid_579786
  var valid_579787 = query.getOrDefault("alt")
  valid_579787 = validateParameter(valid_579787, JString, required = false,
                                 default = newJString("json"))
  if valid_579787 != nil:
    section.add "alt", valid_579787
  var valid_579788 = query.getOrDefault("userIp")
  valid_579788 = validateParameter(valid_579788, JString, required = false,
                                 default = nil)
  if valid_579788 != nil:
    section.add "userIp", valid_579788
  var valid_579789 = query.getOrDefault("quotaUser")
  valid_579789 = validateParameter(valid_579789, JString, required = false,
                                 default = nil)
  if valid_579789 != nil:
    section.add "quotaUser", valid_579789
  var valid_579790 = query.getOrDefault("countryDartIds")
  valid_579790 = validateParameter(valid_579790, JArray, required = false,
                                 default = nil)
  if valid_579790 != nil:
    section.add "countryDartIds", valid_579790
  var valid_579791 = query.getOrDefault("namePrefix")
  valid_579791 = validateParameter(valid_579791, JString, required = false,
                                 default = nil)
  if valid_579791 != nil:
    section.add "namePrefix", valid_579791
  var valid_579792 = query.getOrDefault("regionDartIds")
  valid_579792 = validateParameter(valid_579792, JArray, required = false,
                                 default = nil)
  if valid_579792 != nil:
    section.add "regionDartIds", valid_579792
  var valid_579793 = query.getOrDefault("dartIds")
  valid_579793 = validateParameter(valid_579793, JArray, required = false,
                                 default = nil)
  if valid_579793 != nil:
    section.add "dartIds", valid_579793
  var valid_579794 = query.getOrDefault("fields")
  valid_579794 = validateParameter(valid_579794, JString, required = false,
                                 default = nil)
  if valid_579794 != nil:
    section.add "fields", valid_579794
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579795: Call_DfareportingCitiesList_579780; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of cities, possibly filtered.
  ## 
  let valid = call_579795.validator(path, query, header, formData, body)
  let scheme = call_579795.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579795.url(scheme.get, call_579795.host, call_579795.base,
                         call_579795.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579795, url, valid)

proc call*(call_579796: Call_DfareportingCitiesList_579780; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          countryDartIds: JsonNode = nil; namePrefix: string = "";
          regionDartIds: JsonNode = nil; dartIds: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCitiesList
  ## Retrieves a list of cities, possibly filtered.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   countryDartIds: JArray
  ##                 : Select only cities from these countries.
  ##   namePrefix: string
  ##             : Select only cities with names starting with this prefix.
  ##   regionDartIds: JArray
  ##                : Select only cities from these regions.
  ##   dartIds: JArray
  ##          : Select only cities with these DART IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579797 = newJObject()
  var query_579798 = newJObject()
  add(query_579798, "key", newJString(key))
  add(query_579798, "prettyPrint", newJBool(prettyPrint))
  add(query_579798, "oauth_token", newJString(oauthToken))
  add(path_579797, "profileId", newJString(profileId))
  add(query_579798, "alt", newJString(alt))
  add(query_579798, "userIp", newJString(userIp))
  add(query_579798, "quotaUser", newJString(quotaUser))
  if countryDartIds != nil:
    query_579798.add "countryDartIds", countryDartIds
  add(query_579798, "namePrefix", newJString(namePrefix))
  if regionDartIds != nil:
    query_579798.add "regionDartIds", regionDartIds
  if dartIds != nil:
    query_579798.add "dartIds", dartIds
  add(query_579798, "fields", newJString(fields))
  result = call_579796.call(path_579797, query_579798, nil, nil, nil)

var dfareportingCitiesList* = Call_DfareportingCitiesList_579780(
    name: "dfareportingCitiesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/cities",
    validator: validate_DfareportingCitiesList_579781, base: "/dfareporting/v3.1",
    url: url_DfareportingCitiesList_579782, schemes: {Scheme.Https})
type
  Call_DfareportingConnectionTypesList_579799 = ref object of OpenApiRestCall_578364
proc url_DfareportingConnectionTypesList_579801(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/connectionTypes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingConnectionTypesList_579800(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of connection types.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579802 = path.getOrDefault("profileId")
  valid_579802 = validateParameter(valid_579802, JString, required = true,
                                 default = nil)
  if valid_579802 != nil:
    section.add "profileId", valid_579802
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579803 = query.getOrDefault("key")
  valid_579803 = validateParameter(valid_579803, JString, required = false,
                                 default = nil)
  if valid_579803 != nil:
    section.add "key", valid_579803
  var valid_579804 = query.getOrDefault("prettyPrint")
  valid_579804 = validateParameter(valid_579804, JBool, required = false,
                                 default = newJBool(true))
  if valid_579804 != nil:
    section.add "prettyPrint", valid_579804
  var valid_579805 = query.getOrDefault("oauth_token")
  valid_579805 = validateParameter(valid_579805, JString, required = false,
                                 default = nil)
  if valid_579805 != nil:
    section.add "oauth_token", valid_579805
  var valid_579806 = query.getOrDefault("alt")
  valid_579806 = validateParameter(valid_579806, JString, required = false,
                                 default = newJString("json"))
  if valid_579806 != nil:
    section.add "alt", valid_579806
  var valid_579807 = query.getOrDefault("userIp")
  valid_579807 = validateParameter(valid_579807, JString, required = false,
                                 default = nil)
  if valid_579807 != nil:
    section.add "userIp", valid_579807
  var valid_579808 = query.getOrDefault("quotaUser")
  valid_579808 = validateParameter(valid_579808, JString, required = false,
                                 default = nil)
  if valid_579808 != nil:
    section.add "quotaUser", valid_579808
  var valid_579809 = query.getOrDefault("fields")
  valid_579809 = validateParameter(valid_579809, JString, required = false,
                                 default = nil)
  if valid_579809 != nil:
    section.add "fields", valid_579809
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579810: Call_DfareportingConnectionTypesList_579799;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of connection types.
  ## 
  let valid = call_579810.validator(path, query, header, formData, body)
  let scheme = call_579810.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579810.url(scheme.get, call_579810.host, call_579810.base,
                         call_579810.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579810, url, valid)

proc call*(call_579811: Call_DfareportingConnectionTypesList_579799;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingConnectionTypesList
  ## Retrieves a list of connection types.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579812 = newJObject()
  var query_579813 = newJObject()
  add(query_579813, "key", newJString(key))
  add(query_579813, "prettyPrint", newJBool(prettyPrint))
  add(query_579813, "oauth_token", newJString(oauthToken))
  add(path_579812, "profileId", newJString(profileId))
  add(query_579813, "alt", newJString(alt))
  add(query_579813, "userIp", newJString(userIp))
  add(query_579813, "quotaUser", newJString(quotaUser))
  add(query_579813, "fields", newJString(fields))
  result = call_579811.call(path_579812, query_579813, nil, nil, nil)

var dfareportingConnectionTypesList* = Call_DfareportingConnectionTypesList_579799(
    name: "dfareportingConnectionTypesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/connectionTypes",
    validator: validate_DfareportingConnectionTypesList_579800,
    base: "/dfareporting/v3.1", url: url_DfareportingConnectionTypesList_579801,
    schemes: {Scheme.Https})
type
  Call_DfareportingConnectionTypesGet_579814 = ref object of OpenApiRestCall_578364
proc url_DfareportingConnectionTypesGet_579816(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/connectionTypes/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingConnectionTypesGet_579815(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one connection type by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Connection type ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579817 = path.getOrDefault("profileId")
  valid_579817 = validateParameter(valid_579817, JString, required = true,
                                 default = nil)
  if valid_579817 != nil:
    section.add "profileId", valid_579817
  var valid_579818 = path.getOrDefault("id")
  valid_579818 = validateParameter(valid_579818, JString, required = true,
                                 default = nil)
  if valid_579818 != nil:
    section.add "id", valid_579818
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579819 = query.getOrDefault("key")
  valid_579819 = validateParameter(valid_579819, JString, required = false,
                                 default = nil)
  if valid_579819 != nil:
    section.add "key", valid_579819
  var valid_579820 = query.getOrDefault("prettyPrint")
  valid_579820 = validateParameter(valid_579820, JBool, required = false,
                                 default = newJBool(true))
  if valid_579820 != nil:
    section.add "prettyPrint", valid_579820
  var valid_579821 = query.getOrDefault("oauth_token")
  valid_579821 = validateParameter(valid_579821, JString, required = false,
                                 default = nil)
  if valid_579821 != nil:
    section.add "oauth_token", valid_579821
  var valid_579822 = query.getOrDefault("alt")
  valid_579822 = validateParameter(valid_579822, JString, required = false,
                                 default = newJString("json"))
  if valid_579822 != nil:
    section.add "alt", valid_579822
  var valid_579823 = query.getOrDefault("userIp")
  valid_579823 = validateParameter(valid_579823, JString, required = false,
                                 default = nil)
  if valid_579823 != nil:
    section.add "userIp", valid_579823
  var valid_579824 = query.getOrDefault("quotaUser")
  valid_579824 = validateParameter(valid_579824, JString, required = false,
                                 default = nil)
  if valid_579824 != nil:
    section.add "quotaUser", valid_579824
  var valid_579825 = query.getOrDefault("fields")
  valid_579825 = validateParameter(valid_579825, JString, required = false,
                                 default = nil)
  if valid_579825 != nil:
    section.add "fields", valid_579825
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579826: Call_DfareportingConnectionTypesGet_579814; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one connection type by ID.
  ## 
  let valid = call_579826.validator(path, query, header, formData, body)
  let scheme = call_579826.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579826.url(scheme.get, call_579826.host, call_579826.base,
                         call_579826.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579826, url, valid)

proc call*(call_579827: Call_DfareportingConnectionTypesGet_579814;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingConnectionTypesGet
  ## Gets one connection type by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Connection type ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579828 = newJObject()
  var query_579829 = newJObject()
  add(query_579829, "key", newJString(key))
  add(query_579829, "prettyPrint", newJBool(prettyPrint))
  add(query_579829, "oauth_token", newJString(oauthToken))
  add(path_579828, "profileId", newJString(profileId))
  add(path_579828, "id", newJString(id))
  add(query_579829, "alt", newJString(alt))
  add(query_579829, "userIp", newJString(userIp))
  add(query_579829, "quotaUser", newJString(quotaUser))
  add(query_579829, "fields", newJString(fields))
  result = call_579827.call(path_579828, query_579829, nil, nil, nil)

var dfareportingConnectionTypesGet* = Call_DfareportingConnectionTypesGet_579814(
    name: "dfareportingConnectionTypesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/connectionTypes/{id}",
    validator: validate_DfareportingConnectionTypesGet_579815,
    base: "/dfareporting/v3.1", url: url_DfareportingConnectionTypesGet_579816,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesUpdate_579851 = ref object of OpenApiRestCall_578364
proc url_DfareportingContentCategoriesUpdate_579853(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesUpdate_579852(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing content category.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579854 = path.getOrDefault("profileId")
  valid_579854 = validateParameter(valid_579854, JString, required = true,
                                 default = nil)
  if valid_579854 != nil:
    section.add "profileId", valid_579854
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579855 = query.getOrDefault("key")
  valid_579855 = validateParameter(valid_579855, JString, required = false,
                                 default = nil)
  if valid_579855 != nil:
    section.add "key", valid_579855
  var valid_579856 = query.getOrDefault("prettyPrint")
  valid_579856 = validateParameter(valid_579856, JBool, required = false,
                                 default = newJBool(true))
  if valid_579856 != nil:
    section.add "prettyPrint", valid_579856
  var valid_579857 = query.getOrDefault("oauth_token")
  valid_579857 = validateParameter(valid_579857, JString, required = false,
                                 default = nil)
  if valid_579857 != nil:
    section.add "oauth_token", valid_579857
  var valid_579858 = query.getOrDefault("alt")
  valid_579858 = validateParameter(valid_579858, JString, required = false,
                                 default = newJString("json"))
  if valid_579858 != nil:
    section.add "alt", valid_579858
  var valid_579859 = query.getOrDefault("userIp")
  valid_579859 = validateParameter(valid_579859, JString, required = false,
                                 default = nil)
  if valid_579859 != nil:
    section.add "userIp", valid_579859
  var valid_579860 = query.getOrDefault("quotaUser")
  valid_579860 = validateParameter(valid_579860, JString, required = false,
                                 default = nil)
  if valid_579860 != nil:
    section.add "quotaUser", valid_579860
  var valid_579861 = query.getOrDefault("fields")
  valid_579861 = validateParameter(valid_579861, JString, required = false,
                                 default = nil)
  if valid_579861 != nil:
    section.add "fields", valid_579861
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579863: Call_DfareportingContentCategoriesUpdate_579851;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing content category.
  ## 
  let valid = call_579863.validator(path, query, header, formData, body)
  let scheme = call_579863.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579863.url(scheme.get, call_579863.host, call_579863.base,
                         call_579863.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579863, url, valid)

proc call*(call_579864: Call_DfareportingContentCategoriesUpdate_579851;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingContentCategoriesUpdate
  ## Updates an existing content category.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579865 = newJObject()
  var query_579866 = newJObject()
  var body_579867 = newJObject()
  add(query_579866, "key", newJString(key))
  add(query_579866, "prettyPrint", newJBool(prettyPrint))
  add(query_579866, "oauth_token", newJString(oauthToken))
  add(path_579865, "profileId", newJString(profileId))
  add(query_579866, "alt", newJString(alt))
  add(query_579866, "userIp", newJString(userIp))
  add(query_579866, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579867 = body
  add(query_579866, "fields", newJString(fields))
  result = call_579864.call(path_579865, query_579866, nil, nil, body_579867)

var dfareportingContentCategoriesUpdate* = Call_DfareportingContentCategoriesUpdate_579851(
    name: "dfareportingContentCategoriesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories",
    validator: validate_DfareportingContentCategoriesUpdate_579852,
    base: "/dfareporting/v3.1", url: url_DfareportingContentCategoriesUpdate_579853,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesInsert_579868 = ref object of OpenApiRestCall_578364
proc url_DfareportingContentCategoriesInsert_579870(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesInsert_579869(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new content category.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579871 = path.getOrDefault("profileId")
  valid_579871 = validateParameter(valid_579871, JString, required = true,
                                 default = nil)
  if valid_579871 != nil:
    section.add "profileId", valid_579871
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579872 = query.getOrDefault("key")
  valid_579872 = validateParameter(valid_579872, JString, required = false,
                                 default = nil)
  if valid_579872 != nil:
    section.add "key", valid_579872
  var valid_579873 = query.getOrDefault("prettyPrint")
  valid_579873 = validateParameter(valid_579873, JBool, required = false,
                                 default = newJBool(true))
  if valid_579873 != nil:
    section.add "prettyPrint", valid_579873
  var valid_579874 = query.getOrDefault("oauth_token")
  valid_579874 = validateParameter(valid_579874, JString, required = false,
                                 default = nil)
  if valid_579874 != nil:
    section.add "oauth_token", valid_579874
  var valid_579875 = query.getOrDefault("alt")
  valid_579875 = validateParameter(valid_579875, JString, required = false,
                                 default = newJString("json"))
  if valid_579875 != nil:
    section.add "alt", valid_579875
  var valid_579876 = query.getOrDefault("userIp")
  valid_579876 = validateParameter(valid_579876, JString, required = false,
                                 default = nil)
  if valid_579876 != nil:
    section.add "userIp", valid_579876
  var valid_579877 = query.getOrDefault("quotaUser")
  valid_579877 = validateParameter(valid_579877, JString, required = false,
                                 default = nil)
  if valid_579877 != nil:
    section.add "quotaUser", valid_579877
  var valid_579878 = query.getOrDefault("fields")
  valid_579878 = validateParameter(valid_579878, JString, required = false,
                                 default = nil)
  if valid_579878 != nil:
    section.add "fields", valid_579878
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579880: Call_DfareportingContentCategoriesInsert_579868;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new content category.
  ## 
  let valid = call_579880.validator(path, query, header, formData, body)
  let scheme = call_579880.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579880.url(scheme.get, call_579880.host, call_579880.base,
                         call_579880.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579880, url, valid)

proc call*(call_579881: Call_DfareportingContentCategoriesInsert_579868;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingContentCategoriesInsert
  ## Inserts a new content category.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579882 = newJObject()
  var query_579883 = newJObject()
  var body_579884 = newJObject()
  add(query_579883, "key", newJString(key))
  add(query_579883, "prettyPrint", newJBool(prettyPrint))
  add(query_579883, "oauth_token", newJString(oauthToken))
  add(path_579882, "profileId", newJString(profileId))
  add(query_579883, "alt", newJString(alt))
  add(query_579883, "userIp", newJString(userIp))
  add(query_579883, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579884 = body
  add(query_579883, "fields", newJString(fields))
  result = call_579881.call(path_579882, query_579883, nil, nil, body_579884)

var dfareportingContentCategoriesInsert* = Call_DfareportingContentCategoriesInsert_579868(
    name: "dfareportingContentCategoriesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories",
    validator: validate_DfareportingContentCategoriesInsert_579869,
    base: "/dfareporting/v3.1", url: url_DfareportingContentCategoriesInsert_579870,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesList_579830 = ref object of OpenApiRestCall_578364
proc url_DfareportingContentCategoriesList_579832(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesList_579831(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of content categories, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579833 = path.getOrDefault("profileId")
  valid_579833 = validateParameter(valid_579833, JString, required = true,
                                 default = nil)
  if valid_579833 != nil:
    section.add "profileId", valid_579833
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "contentcategory*2015" will return objects with names like "contentcategory June 2015", "contentcategory April 2015", or simply "contentcategory 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "contentcategory" will match objects with name "my contentcategory", "contentcategory 2015", or simply "contentcategory".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only content categories with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_579834 = query.getOrDefault("key")
  valid_579834 = validateParameter(valid_579834, JString, required = false,
                                 default = nil)
  if valid_579834 != nil:
    section.add "key", valid_579834
  var valid_579835 = query.getOrDefault("prettyPrint")
  valid_579835 = validateParameter(valid_579835, JBool, required = false,
                                 default = newJBool(true))
  if valid_579835 != nil:
    section.add "prettyPrint", valid_579835
  var valid_579836 = query.getOrDefault("oauth_token")
  valid_579836 = validateParameter(valid_579836, JString, required = false,
                                 default = nil)
  if valid_579836 != nil:
    section.add "oauth_token", valid_579836
  var valid_579837 = query.getOrDefault("sortField")
  valid_579837 = validateParameter(valid_579837, JString, required = false,
                                 default = newJString("ID"))
  if valid_579837 != nil:
    section.add "sortField", valid_579837
  var valid_579838 = query.getOrDefault("alt")
  valid_579838 = validateParameter(valid_579838, JString, required = false,
                                 default = newJString("json"))
  if valid_579838 != nil:
    section.add "alt", valid_579838
  var valid_579839 = query.getOrDefault("userIp")
  valid_579839 = validateParameter(valid_579839, JString, required = false,
                                 default = nil)
  if valid_579839 != nil:
    section.add "userIp", valid_579839
  var valid_579840 = query.getOrDefault("quotaUser")
  valid_579840 = validateParameter(valid_579840, JString, required = false,
                                 default = nil)
  if valid_579840 != nil:
    section.add "quotaUser", valid_579840
  var valid_579841 = query.getOrDefault("pageToken")
  valid_579841 = validateParameter(valid_579841, JString, required = false,
                                 default = nil)
  if valid_579841 != nil:
    section.add "pageToken", valid_579841
  var valid_579842 = query.getOrDefault("searchString")
  valid_579842 = validateParameter(valid_579842, JString, required = false,
                                 default = nil)
  if valid_579842 != nil:
    section.add "searchString", valid_579842
  var valid_579843 = query.getOrDefault("sortOrder")
  valid_579843 = validateParameter(valid_579843, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_579843 != nil:
    section.add "sortOrder", valid_579843
  var valid_579844 = query.getOrDefault("ids")
  valid_579844 = validateParameter(valid_579844, JArray, required = false,
                                 default = nil)
  if valid_579844 != nil:
    section.add "ids", valid_579844
  var valid_579845 = query.getOrDefault("fields")
  valid_579845 = validateParameter(valid_579845, JString, required = false,
                                 default = nil)
  if valid_579845 != nil:
    section.add "fields", valid_579845
  var valid_579846 = query.getOrDefault("maxResults")
  valid_579846 = validateParameter(valid_579846, JInt, required = false,
                                 default = newJInt(1000))
  if valid_579846 != nil:
    section.add "maxResults", valid_579846
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579847: Call_DfareportingContentCategoriesList_579830;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of content categories, possibly filtered. This method supports paging.
  ## 
  let valid = call_579847.validator(path, query, header, formData, body)
  let scheme = call_579847.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579847.url(scheme.get, call_579847.host, call_579847.base,
                         call_579847.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579847, url, valid)

proc call*(call_579848: Call_DfareportingContentCategoriesList_579830;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; sortField: string = "ID"; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          ids: JsonNode = nil; fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingContentCategoriesList
  ## Retrieves a list of content categories, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "contentcategory*2015" will return objects with names like "contentcategory June 2015", "contentcategory April 2015", or simply "contentcategory 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "contentcategory" will match objects with name "my contentcategory", "contentcategory 2015", or simply "contentcategory".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only content categories with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_579849 = newJObject()
  var query_579850 = newJObject()
  add(query_579850, "key", newJString(key))
  add(query_579850, "prettyPrint", newJBool(prettyPrint))
  add(query_579850, "oauth_token", newJString(oauthToken))
  add(path_579849, "profileId", newJString(profileId))
  add(query_579850, "sortField", newJString(sortField))
  add(query_579850, "alt", newJString(alt))
  add(query_579850, "userIp", newJString(userIp))
  add(query_579850, "quotaUser", newJString(quotaUser))
  add(query_579850, "pageToken", newJString(pageToken))
  add(query_579850, "searchString", newJString(searchString))
  add(query_579850, "sortOrder", newJString(sortOrder))
  if ids != nil:
    query_579850.add "ids", ids
  add(query_579850, "fields", newJString(fields))
  add(query_579850, "maxResults", newJInt(maxResults))
  result = call_579848.call(path_579849, query_579850, nil, nil, nil)

var dfareportingContentCategoriesList* = Call_DfareportingContentCategoriesList_579830(
    name: "dfareportingContentCategoriesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories",
    validator: validate_DfareportingContentCategoriesList_579831,
    base: "/dfareporting/v3.1", url: url_DfareportingContentCategoriesList_579832,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesPatch_579885 = ref object of OpenApiRestCall_578364
proc url_DfareportingContentCategoriesPatch_579887(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesPatch_579886(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing content category. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579888 = path.getOrDefault("profileId")
  valid_579888 = validateParameter(valid_579888, JString, required = true,
                                 default = nil)
  if valid_579888 != nil:
    section.add "profileId", valid_579888
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Content category ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579889 = query.getOrDefault("key")
  valid_579889 = validateParameter(valid_579889, JString, required = false,
                                 default = nil)
  if valid_579889 != nil:
    section.add "key", valid_579889
  var valid_579890 = query.getOrDefault("prettyPrint")
  valid_579890 = validateParameter(valid_579890, JBool, required = false,
                                 default = newJBool(true))
  if valid_579890 != nil:
    section.add "prettyPrint", valid_579890
  var valid_579891 = query.getOrDefault("oauth_token")
  valid_579891 = validateParameter(valid_579891, JString, required = false,
                                 default = nil)
  if valid_579891 != nil:
    section.add "oauth_token", valid_579891
  var valid_579892 = query.getOrDefault("alt")
  valid_579892 = validateParameter(valid_579892, JString, required = false,
                                 default = newJString("json"))
  if valid_579892 != nil:
    section.add "alt", valid_579892
  var valid_579893 = query.getOrDefault("userIp")
  valid_579893 = validateParameter(valid_579893, JString, required = false,
                                 default = nil)
  if valid_579893 != nil:
    section.add "userIp", valid_579893
  var valid_579894 = query.getOrDefault("quotaUser")
  valid_579894 = validateParameter(valid_579894, JString, required = false,
                                 default = nil)
  if valid_579894 != nil:
    section.add "quotaUser", valid_579894
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_579895 = query.getOrDefault("id")
  valid_579895 = validateParameter(valid_579895, JString, required = true,
                                 default = nil)
  if valid_579895 != nil:
    section.add "id", valid_579895
  var valid_579896 = query.getOrDefault("fields")
  valid_579896 = validateParameter(valid_579896, JString, required = false,
                                 default = nil)
  if valid_579896 != nil:
    section.add "fields", valid_579896
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579898: Call_DfareportingContentCategoriesPatch_579885;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing content category. This method supports patch semantics.
  ## 
  let valid = call_579898.validator(path, query, header, formData, body)
  let scheme = call_579898.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579898.url(scheme.get, call_579898.host, call_579898.base,
                         call_579898.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579898, url, valid)

proc call*(call_579899: Call_DfareportingContentCategoriesPatch_579885;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingContentCategoriesPatch
  ## Updates an existing content category. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Content category ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579900 = newJObject()
  var query_579901 = newJObject()
  var body_579902 = newJObject()
  add(query_579901, "key", newJString(key))
  add(query_579901, "prettyPrint", newJBool(prettyPrint))
  add(query_579901, "oauth_token", newJString(oauthToken))
  add(path_579900, "profileId", newJString(profileId))
  add(query_579901, "alt", newJString(alt))
  add(query_579901, "userIp", newJString(userIp))
  add(query_579901, "quotaUser", newJString(quotaUser))
  add(query_579901, "id", newJString(id))
  if body != nil:
    body_579902 = body
  add(query_579901, "fields", newJString(fields))
  result = call_579899.call(path_579900, query_579901, nil, nil, body_579902)

var dfareportingContentCategoriesPatch* = Call_DfareportingContentCategoriesPatch_579885(
    name: "dfareportingContentCategoriesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories",
    validator: validate_DfareportingContentCategoriesPatch_579886,
    base: "/dfareporting/v3.1", url: url_DfareportingContentCategoriesPatch_579887,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesGet_579903 = ref object of OpenApiRestCall_578364
proc url_DfareportingContentCategoriesGet_579905(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesGet_579904(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one content category by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Content category ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579906 = path.getOrDefault("profileId")
  valid_579906 = validateParameter(valid_579906, JString, required = true,
                                 default = nil)
  if valid_579906 != nil:
    section.add "profileId", valid_579906
  var valid_579907 = path.getOrDefault("id")
  valid_579907 = validateParameter(valid_579907, JString, required = true,
                                 default = nil)
  if valid_579907 != nil:
    section.add "id", valid_579907
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579908 = query.getOrDefault("key")
  valid_579908 = validateParameter(valid_579908, JString, required = false,
                                 default = nil)
  if valid_579908 != nil:
    section.add "key", valid_579908
  var valid_579909 = query.getOrDefault("prettyPrint")
  valid_579909 = validateParameter(valid_579909, JBool, required = false,
                                 default = newJBool(true))
  if valid_579909 != nil:
    section.add "prettyPrint", valid_579909
  var valid_579910 = query.getOrDefault("oauth_token")
  valid_579910 = validateParameter(valid_579910, JString, required = false,
                                 default = nil)
  if valid_579910 != nil:
    section.add "oauth_token", valid_579910
  var valid_579911 = query.getOrDefault("alt")
  valid_579911 = validateParameter(valid_579911, JString, required = false,
                                 default = newJString("json"))
  if valid_579911 != nil:
    section.add "alt", valid_579911
  var valid_579912 = query.getOrDefault("userIp")
  valid_579912 = validateParameter(valid_579912, JString, required = false,
                                 default = nil)
  if valid_579912 != nil:
    section.add "userIp", valid_579912
  var valid_579913 = query.getOrDefault("quotaUser")
  valid_579913 = validateParameter(valid_579913, JString, required = false,
                                 default = nil)
  if valid_579913 != nil:
    section.add "quotaUser", valid_579913
  var valid_579914 = query.getOrDefault("fields")
  valid_579914 = validateParameter(valid_579914, JString, required = false,
                                 default = nil)
  if valid_579914 != nil:
    section.add "fields", valid_579914
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579915: Call_DfareportingContentCategoriesGet_579903;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one content category by ID.
  ## 
  let valid = call_579915.validator(path, query, header, formData, body)
  let scheme = call_579915.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579915.url(scheme.get, call_579915.host, call_579915.base,
                         call_579915.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579915, url, valid)

proc call*(call_579916: Call_DfareportingContentCategoriesGet_579903;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingContentCategoriesGet
  ## Gets one content category by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Content category ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579917 = newJObject()
  var query_579918 = newJObject()
  add(query_579918, "key", newJString(key))
  add(query_579918, "prettyPrint", newJBool(prettyPrint))
  add(query_579918, "oauth_token", newJString(oauthToken))
  add(path_579917, "profileId", newJString(profileId))
  add(path_579917, "id", newJString(id))
  add(query_579918, "alt", newJString(alt))
  add(query_579918, "userIp", newJString(userIp))
  add(query_579918, "quotaUser", newJString(quotaUser))
  add(query_579918, "fields", newJString(fields))
  result = call_579916.call(path_579917, query_579918, nil, nil, nil)

var dfareportingContentCategoriesGet* = Call_DfareportingContentCategoriesGet_579903(
    name: "dfareportingContentCategoriesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories/{id}",
    validator: validate_DfareportingContentCategoriesGet_579904,
    base: "/dfareporting/v3.1", url: url_DfareportingContentCategoriesGet_579905,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesDelete_579919 = ref object of OpenApiRestCall_578364
proc url_DfareportingContentCategoriesDelete_579921(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesDelete_579920(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing content category.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Content category ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579922 = path.getOrDefault("profileId")
  valid_579922 = validateParameter(valid_579922, JString, required = true,
                                 default = nil)
  if valid_579922 != nil:
    section.add "profileId", valid_579922
  var valid_579923 = path.getOrDefault("id")
  valid_579923 = validateParameter(valid_579923, JString, required = true,
                                 default = nil)
  if valid_579923 != nil:
    section.add "id", valid_579923
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579924 = query.getOrDefault("key")
  valid_579924 = validateParameter(valid_579924, JString, required = false,
                                 default = nil)
  if valid_579924 != nil:
    section.add "key", valid_579924
  var valid_579925 = query.getOrDefault("prettyPrint")
  valid_579925 = validateParameter(valid_579925, JBool, required = false,
                                 default = newJBool(true))
  if valid_579925 != nil:
    section.add "prettyPrint", valid_579925
  var valid_579926 = query.getOrDefault("oauth_token")
  valid_579926 = validateParameter(valid_579926, JString, required = false,
                                 default = nil)
  if valid_579926 != nil:
    section.add "oauth_token", valid_579926
  var valid_579927 = query.getOrDefault("alt")
  valid_579927 = validateParameter(valid_579927, JString, required = false,
                                 default = newJString("json"))
  if valid_579927 != nil:
    section.add "alt", valid_579927
  var valid_579928 = query.getOrDefault("userIp")
  valid_579928 = validateParameter(valid_579928, JString, required = false,
                                 default = nil)
  if valid_579928 != nil:
    section.add "userIp", valid_579928
  var valid_579929 = query.getOrDefault("quotaUser")
  valid_579929 = validateParameter(valid_579929, JString, required = false,
                                 default = nil)
  if valid_579929 != nil:
    section.add "quotaUser", valid_579929
  var valid_579930 = query.getOrDefault("fields")
  valid_579930 = validateParameter(valid_579930, JString, required = false,
                                 default = nil)
  if valid_579930 != nil:
    section.add "fields", valid_579930
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579931: Call_DfareportingContentCategoriesDelete_579919;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing content category.
  ## 
  let valid = call_579931.validator(path, query, header, formData, body)
  let scheme = call_579931.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579931.url(scheme.get, call_579931.host, call_579931.base,
                         call_579931.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579931, url, valid)

proc call*(call_579932: Call_DfareportingContentCategoriesDelete_579919;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingContentCategoriesDelete
  ## Deletes an existing content category.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Content category ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579933 = newJObject()
  var query_579934 = newJObject()
  add(query_579934, "key", newJString(key))
  add(query_579934, "prettyPrint", newJBool(prettyPrint))
  add(query_579934, "oauth_token", newJString(oauthToken))
  add(path_579933, "profileId", newJString(profileId))
  add(path_579933, "id", newJString(id))
  add(query_579934, "alt", newJString(alt))
  add(query_579934, "userIp", newJString(userIp))
  add(query_579934, "quotaUser", newJString(quotaUser))
  add(query_579934, "fields", newJString(fields))
  result = call_579932.call(path_579933, query_579934, nil, nil, nil)

var dfareportingContentCategoriesDelete* = Call_DfareportingContentCategoriesDelete_579919(
    name: "dfareportingContentCategoriesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories/{id}",
    validator: validate_DfareportingContentCategoriesDelete_579920,
    base: "/dfareporting/v3.1", url: url_DfareportingContentCategoriesDelete_579921,
    schemes: {Scheme.Https})
type
  Call_DfareportingConversionsBatchinsert_579935 = ref object of OpenApiRestCall_578364
proc url_DfareportingConversionsBatchinsert_579937(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/conversions/batchinsert")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingConversionsBatchinsert_579936(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts conversions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579938 = path.getOrDefault("profileId")
  valid_579938 = validateParameter(valid_579938, JString, required = true,
                                 default = nil)
  if valid_579938 != nil:
    section.add "profileId", valid_579938
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579939 = query.getOrDefault("key")
  valid_579939 = validateParameter(valid_579939, JString, required = false,
                                 default = nil)
  if valid_579939 != nil:
    section.add "key", valid_579939
  var valid_579940 = query.getOrDefault("prettyPrint")
  valid_579940 = validateParameter(valid_579940, JBool, required = false,
                                 default = newJBool(true))
  if valid_579940 != nil:
    section.add "prettyPrint", valid_579940
  var valid_579941 = query.getOrDefault("oauth_token")
  valid_579941 = validateParameter(valid_579941, JString, required = false,
                                 default = nil)
  if valid_579941 != nil:
    section.add "oauth_token", valid_579941
  var valid_579942 = query.getOrDefault("alt")
  valid_579942 = validateParameter(valid_579942, JString, required = false,
                                 default = newJString("json"))
  if valid_579942 != nil:
    section.add "alt", valid_579942
  var valid_579943 = query.getOrDefault("userIp")
  valid_579943 = validateParameter(valid_579943, JString, required = false,
                                 default = nil)
  if valid_579943 != nil:
    section.add "userIp", valid_579943
  var valid_579944 = query.getOrDefault("quotaUser")
  valid_579944 = validateParameter(valid_579944, JString, required = false,
                                 default = nil)
  if valid_579944 != nil:
    section.add "quotaUser", valid_579944
  var valid_579945 = query.getOrDefault("fields")
  valid_579945 = validateParameter(valid_579945, JString, required = false,
                                 default = nil)
  if valid_579945 != nil:
    section.add "fields", valid_579945
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579947: Call_DfareportingConversionsBatchinsert_579935;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts conversions.
  ## 
  let valid = call_579947.validator(path, query, header, formData, body)
  let scheme = call_579947.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579947.url(scheme.get, call_579947.host, call_579947.base,
                         call_579947.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579947, url, valid)

proc call*(call_579948: Call_DfareportingConversionsBatchinsert_579935;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingConversionsBatchinsert
  ## Inserts conversions.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579949 = newJObject()
  var query_579950 = newJObject()
  var body_579951 = newJObject()
  add(query_579950, "key", newJString(key))
  add(query_579950, "prettyPrint", newJBool(prettyPrint))
  add(query_579950, "oauth_token", newJString(oauthToken))
  add(path_579949, "profileId", newJString(profileId))
  add(query_579950, "alt", newJString(alt))
  add(query_579950, "userIp", newJString(userIp))
  add(query_579950, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579951 = body
  add(query_579950, "fields", newJString(fields))
  result = call_579948.call(path_579949, query_579950, nil, nil, body_579951)

var dfareportingConversionsBatchinsert* = Call_DfareportingConversionsBatchinsert_579935(
    name: "dfareportingConversionsBatchinsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/conversions/batchinsert",
    validator: validate_DfareportingConversionsBatchinsert_579936,
    base: "/dfareporting/v3.1", url: url_DfareportingConversionsBatchinsert_579937,
    schemes: {Scheme.Https})
type
  Call_DfareportingConversionsBatchupdate_579952 = ref object of OpenApiRestCall_578364
proc url_DfareportingConversionsBatchupdate_579954(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/conversions/batchupdate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingConversionsBatchupdate_579953(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates existing conversions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579955 = path.getOrDefault("profileId")
  valid_579955 = validateParameter(valid_579955, JString, required = true,
                                 default = nil)
  if valid_579955 != nil:
    section.add "profileId", valid_579955
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579956 = query.getOrDefault("key")
  valid_579956 = validateParameter(valid_579956, JString, required = false,
                                 default = nil)
  if valid_579956 != nil:
    section.add "key", valid_579956
  var valid_579957 = query.getOrDefault("prettyPrint")
  valid_579957 = validateParameter(valid_579957, JBool, required = false,
                                 default = newJBool(true))
  if valid_579957 != nil:
    section.add "prettyPrint", valid_579957
  var valid_579958 = query.getOrDefault("oauth_token")
  valid_579958 = validateParameter(valid_579958, JString, required = false,
                                 default = nil)
  if valid_579958 != nil:
    section.add "oauth_token", valid_579958
  var valid_579959 = query.getOrDefault("alt")
  valid_579959 = validateParameter(valid_579959, JString, required = false,
                                 default = newJString("json"))
  if valid_579959 != nil:
    section.add "alt", valid_579959
  var valid_579960 = query.getOrDefault("userIp")
  valid_579960 = validateParameter(valid_579960, JString, required = false,
                                 default = nil)
  if valid_579960 != nil:
    section.add "userIp", valid_579960
  var valid_579961 = query.getOrDefault("quotaUser")
  valid_579961 = validateParameter(valid_579961, JString, required = false,
                                 default = nil)
  if valid_579961 != nil:
    section.add "quotaUser", valid_579961
  var valid_579962 = query.getOrDefault("fields")
  valid_579962 = validateParameter(valid_579962, JString, required = false,
                                 default = nil)
  if valid_579962 != nil:
    section.add "fields", valid_579962
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579964: Call_DfareportingConversionsBatchupdate_579952;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates existing conversions.
  ## 
  let valid = call_579964.validator(path, query, header, formData, body)
  let scheme = call_579964.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579964.url(scheme.get, call_579964.host, call_579964.base,
                         call_579964.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579964, url, valid)

proc call*(call_579965: Call_DfareportingConversionsBatchupdate_579952;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingConversionsBatchupdate
  ## Updates existing conversions.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579966 = newJObject()
  var query_579967 = newJObject()
  var body_579968 = newJObject()
  add(query_579967, "key", newJString(key))
  add(query_579967, "prettyPrint", newJBool(prettyPrint))
  add(query_579967, "oauth_token", newJString(oauthToken))
  add(path_579966, "profileId", newJString(profileId))
  add(query_579967, "alt", newJString(alt))
  add(query_579967, "userIp", newJString(userIp))
  add(query_579967, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579968 = body
  add(query_579967, "fields", newJString(fields))
  result = call_579965.call(path_579966, query_579967, nil, nil, body_579968)

var dfareportingConversionsBatchupdate* = Call_DfareportingConversionsBatchupdate_579952(
    name: "dfareportingConversionsBatchupdate", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/conversions/batchupdate",
    validator: validate_DfareportingConversionsBatchupdate_579953,
    base: "/dfareporting/v3.1", url: url_DfareportingConversionsBatchupdate_579954,
    schemes: {Scheme.Https})
type
  Call_DfareportingCountriesList_579969 = ref object of OpenApiRestCall_578364
proc url_DfareportingCountriesList_579971(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/countries")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCountriesList_579970(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of countries.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579972 = path.getOrDefault("profileId")
  valid_579972 = validateParameter(valid_579972, JString, required = true,
                                 default = nil)
  if valid_579972 != nil:
    section.add "profileId", valid_579972
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579973 = query.getOrDefault("key")
  valid_579973 = validateParameter(valid_579973, JString, required = false,
                                 default = nil)
  if valid_579973 != nil:
    section.add "key", valid_579973
  var valid_579974 = query.getOrDefault("prettyPrint")
  valid_579974 = validateParameter(valid_579974, JBool, required = false,
                                 default = newJBool(true))
  if valid_579974 != nil:
    section.add "prettyPrint", valid_579974
  var valid_579975 = query.getOrDefault("oauth_token")
  valid_579975 = validateParameter(valid_579975, JString, required = false,
                                 default = nil)
  if valid_579975 != nil:
    section.add "oauth_token", valid_579975
  var valid_579976 = query.getOrDefault("alt")
  valid_579976 = validateParameter(valid_579976, JString, required = false,
                                 default = newJString("json"))
  if valid_579976 != nil:
    section.add "alt", valid_579976
  var valid_579977 = query.getOrDefault("userIp")
  valid_579977 = validateParameter(valid_579977, JString, required = false,
                                 default = nil)
  if valid_579977 != nil:
    section.add "userIp", valid_579977
  var valid_579978 = query.getOrDefault("quotaUser")
  valid_579978 = validateParameter(valid_579978, JString, required = false,
                                 default = nil)
  if valid_579978 != nil:
    section.add "quotaUser", valid_579978
  var valid_579979 = query.getOrDefault("fields")
  valid_579979 = validateParameter(valid_579979, JString, required = false,
                                 default = nil)
  if valid_579979 != nil:
    section.add "fields", valid_579979
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579980: Call_DfareportingCountriesList_579969; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of countries.
  ## 
  let valid = call_579980.validator(path, query, header, formData, body)
  let scheme = call_579980.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579980.url(scheme.get, call_579980.host, call_579980.base,
                         call_579980.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579980, url, valid)

proc call*(call_579981: Call_DfareportingCountriesList_579969; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingCountriesList
  ## Retrieves a list of countries.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579982 = newJObject()
  var query_579983 = newJObject()
  add(query_579983, "key", newJString(key))
  add(query_579983, "prettyPrint", newJBool(prettyPrint))
  add(query_579983, "oauth_token", newJString(oauthToken))
  add(path_579982, "profileId", newJString(profileId))
  add(query_579983, "alt", newJString(alt))
  add(query_579983, "userIp", newJString(userIp))
  add(query_579983, "quotaUser", newJString(quotaUser))
  add(query_579983, "fields", newJString(fields))
  result = call_579981.call(path_579982, query_579983, nil, nil, nil)

var dfareportingCountriesList* = Call_DfareportingCountriesList_579969(
    name: "dfareportingCountriesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/countries",
    validator: validate_DfareportingCountriesList_579970,
    base: "/dfareporting/v3.1", url: url_DfareportingCountriesList_579971,
    schemes: {Scheme.Https})
type
  Call_DfareportingCountriesGet_579984 = ref object of OpenApiRestCall_578364
proc url_DfareportingCountriesGet_579986(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "dartId" in path, "`dartId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/countries/"),
               (kind: VariableSegment, value: "dartId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCountriesGet_579985(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one country by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   dartId: JString (required)
  ##         : Country DART ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579987 = path.getOrDefault("profileId")
  valid_579987 = validateParameter(valid_579987, JString, required = true,
                                 default = nil)
  if valid_579987 != nil:
    section.add "profileId", valid_579987
  var valid_579988 = path.getOrDefault("dartId")
  valid_579988 = validateParameter(valid_579988, JString, required = true,
                                 default = nil)
  if valid_579988 != nil:
    section.add "dartId", valid_579988
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579989 = query.getOrDefault("key")
  valid_579989 = validateParameter(valid_579989, JString, required = false,
                                 default = nil)
  if valid_579989 != nil:
    section.add "key", valid_579989
  var valid_579990 = query.getOrDefault("prettyPrint")
  valid_579990 = validateParameter(valid_579990, JBool, required = false,
                                 default = newJBool(true))
  if valid_579990 != nil:
    section.add "prettyPrint", valid_579990
  var valid_579991 = query.getOrDefault("oauth_token")
  valid_579991 = validateParameter(valid_579991, JString, required = false,
                                 default = nil)
  if valid_579991 != nil:
    section.add "oauth_token", valid_579991
  var valid_579992 = query.getOrDefault("alt")
  valid_579992 = validateParameter(valid_579992, JString, required = false,
                                 default = newJString("json"))
  if valid_579992 != nil:
    section.add "alt", valid_579992
  var valid_579993 = query.getOrDefault("userIp")
  valid_579993 = validateParameter(valid_579993, JString, required = false,
                                 default = nil)
  if valid_579993 != nil:
    section.add "userIp", valid_579993
  var valid_579994 = query.getOrDefault("quotaUser")
  valid_579994 = validateParameter(valid_579994, JString, required = false,
                                 default = nil)
  if valid_579994 != nil:
    section.add "quotaUser", valid_579994
  var valid_579995 = query.getOrDefault("fields")
  valid_579995 = validateParameter(valid_579995, JString, required = false,
                                 default = nil)
  if valid_579995 != nil:
    section.add "fields", valid_579995
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579996: Call_DfareportingCountriesGet_579984; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one country by ID.
  ## 
  let valid = call_579996.validator(path, query, header, formData, body)
  let scheme = call_579996.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579996.url(scheme.get, call_579996.host, call_579996.base,
                         call_579996.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579996, url, valid)

proc call*(call_579997: Call_DfareportingCountriesGet_579984; profileId: string;
          dartId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingCountriesGet
  ## Gets one country by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   dartId: string (required)
  ##         : Country DART ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579998 = newJObject()
  var query_579999 = newJObject()
  add(query_579999, "key", newJString(key))
  add(query_579999, "prettyPrint", newJBool(prettyPrint))
  add(query_579999, "oauth_token", newJString(oauthToken))
  add(path_579998, "profileId", newJString(profileId))
  add(query_579999, "alt", newJString(alt))
  add(query_579999, "userIp", newJString(userIp))
  add(query_579999, "quotaUser", newJString(quotaUser))
  add(path_579998, "dartId", newJString(dartId))
  add(query_579999, "fields", newJString(fields))
  result = call_579997.call(path_579998, query_579999, nil, nil, nil)

var dfareportingCountriesGet* = Call_DfareportingCountriesGet_579984(
    name: "dfareportingCountriesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/countries/{dartId}",
    validator: validate_DfareportingCountriesGet_579985,
    base: "/dfareporting/v3.1", url: url_DfareportingCountriesGet_579986,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeAssetsInsert_580000 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeAssetsInsert_580002(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "advertiserId" in path, "`advertiserId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeAssets/"),
               (kind: VariableSegment, value: "advertiserId"),
               (kind: ConstantSegment, value: "/creativeAssets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeAssetsInsert_580001(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative asset.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   advertiserId: JString (required)
  ##               : Advertiser ID of this creative. This is a required field.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580003 = path.getOrDefault("profileId")
  valid_580003 = validateParameter(valid_580003, JString, required = true,
                                 default = nil)
  if valid_580003 != nil:
    section.add "profileId", valid_580003
  var valid_580004 = path.getOrDefault("advertiserId")
  valid_580004 = validateParameter(valid_580004, JString, required = true,
                                 default = nil)
  if valid_580004 != nil:
    section.add "advertiserId", valid_580004
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580005 = query.getOrDefault("key")
  valid_580005 = validateParameter(valid_580005, JString, required = false,
                                 default = nil)
  if valid_580005 != nil:
    section.add "key", valid_580005
  var valid_580006 = query.getOrDefault("prettyPrint")
  valid_580006 = validateParameter(valid_580006, JBool, required = false,
                                 default = newJBool(true))
  if valid_580006 != nil:
    section.add "prettyPrint", valid_580006
  var valid_580007 = query.getOrDefault("oauth_token")
  valid_580007 = validateParameter(valid_580007, JString, required = false,
                                 default = nil)
  if valid_580007 != nil:
    section.add "oauth_token", valid_580007
  var valid_580008 = query.getOrDefault("alt")
  valid_580008 = validateParameter(valid_580008, JString, required = false,
                                 default = newJString("json"))
  if valid_580008 != nil:
    section.add "alt", valid_580008
  var valid_580009 = query.getOrDefault("userIp")
  valid_580009 = validateParameter(valid_580009, JString, required = false,
                                 default = nil)
  if valid_580009 != nil:
    section.add "userIp", valid_580009
  var valid_580010 = query.getOrDefault("quotaUser")
  valid_580010 = validateParameter(valid_580010, JString, required = false,
                                 default = nil)
  if valid_580010 != nil:
    section.add "quotaUser", valid_580010
  var valid_580011 = query.getOrDefault("fields")
  valid_580011 = validateParameter(valid_580011, JString, required = false,
                                 default = nil)
  if valid_580011 != nil:
    section.add "fields", valid_580011
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580013: Call_DfareportingCreativeAssetsInsert_580000;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new creative asset.
  ## 
  let valid = call_580013.validator(path, query, header, formData, body)
  let scheme = call_580013.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580013.url(scheme.get, call_580013.host, call_580013.base,
                         call_580013.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580013, url, valid)

proc call*(call_580014: Call_DfareportingCreativeAssetsInsert_580000;
          profileId: string; advertiserId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; body: JsonNode = nil;
          fields: string = ""): Recallable =
  ## dfareportingCreativeAssetsInsert
  ## Inserts a new creative asset.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   advertiserId: string (required)
  ##               : Advertiser ID of this creative. This is a required field.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580015 = newJObject()
  var query_580016 = newJObject()
  var body_580017 = newJObject()
  add(query_580016, "key", newJString(key))
  add(query_580016, "prettyPrint", newJBool(prettyPrint))
  add(query_580016, "oauth_token", newJString(oauthToken))
  add(path_580015, "profileId", newJString(profileId))
  add(query_580016, "alt", newJString(alt))
  add(query_580016, "userIp", newJString(userIp))
  add(query_580016, "quotaUser", newJString(quotaUser))
  add(path_580015, "advertiserId", newJString(advertiserId))
  if body != nil:
    body_580017 = body
  add(query_580016, "fields", newJString(fields))
  result = call_580014.call(path_580015, query_580016, nil, nil, body_580017)

var dfareportingCreativeAssetsInsert* = Call_DfareportingCreativeAssetsInsert_580000(
    name: "dfareportingCreativeAssetsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeAssets/{advertiserId}/creativeAssets",
    validator: validate_DfareportingCreativeAssetsInsert_580001,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativeAssetsInsert_580002,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsUpdate_580040 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldsUpdate_580042(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsUpdate_580041(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative field.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580043 = path.getOrDefault("profileId")
  valid_580043 = validateParameter(valid_580043, JString, required = true,
                                 default = nil)
  if valid_580043 != nil:
    section.add "profileId", valid_580043
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580044 = query.getOrDefault("key")
  valid_580044 = validateParameter(valid_580044, JString, required = false,
                                 default = nil)
  if valid_580044 != nil:
    section.add "key", valid_580044
  var valid_580045 = query.getOrDefault("prettyPrint")
  valid_580045 = validateParameter(valid_580045, JBool, required = false,
                                 default = newJBool(true))
  if valid_580045 != nil:
    section.add "prettyPrint", valid_580045
  var valid_580046 = query.getOrDefault("oauth_token")
  valid_580046 = validateParameter(valid_580046, JString, required = false,
                                 default = nil)
  if valid_580046 != nil:
    section.add "oauth_token", valid_580046
  var valid_580047 = query.getOrDefault("alt")
  valid_580047 = validateParameter(valid_580047, JString, required = false,
                                 default = newJString("json"))
  if valid_580047 != nil:
    section.add "alt", valid_580047
  var valid_580048 = query.getOrDefault("userIp")
  valid_580048 = validateParameter(valid_580048, JString, required = false,
                                 default = nil)
  if valid_580048 != nil:
    section.add "userIp", valid_580048
  var valid_580049 = query.getOrDefault("quotaUser")
  valid_580049 = validateParameter(valid_580049, JString, required = false,
                                 default = nil)
  if valid_580049 != nil:
    section.add "quotaUser", valid_580049
  var valid_580050 = query.getOrDefault("fields")
  valid_580050 = validateParameter(valid_580050, JString, required = false,
                                 default = nil)
  if valid_580050 != nil:
    section.add "fields", valid_580050
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580052: Call_DfareportingCreativeFieldsUpdate_580040;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative field.
  ## 
  let valid = call_580052.validator(path, query, header, formData, body)
  let scheme = call_580052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580052.url(scheme.get, call_580052.host, call_580052.base,
                         call_580052.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580052, url, valid)

proc call*(call_580053: Call_DfareportingCreativeFieldsUpdate_580040;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCreativeFieldsUpdate
  ## Updates an existing creative field.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580054 = newJObject()
  var query_580055 = newJObject()
  var body_580056 = newJObject()
  add(query_580055, "key", newJString(key))
  add(query_580055, "prettyPrint", newJBool(prettyPrint))
  add(query_580055, "oauth_token", newJString(oauthToken))
  add(path_580054, "profileId", newJString(profileId))
  add(query_580055, "alt", newJString(alt))
  add(query_580055, "userIp", newJString(userIp))
  add(query_580055, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580056 = body
  add(query_580055, "fields", newJString(fields))
  result = call_580053.call(path_580054, query_580055, nil, nil, body_580056)

var dfareportingCreativeFieldsUpdate* = Call_DfareportingCreativeFieldsUpdate_580040(
    name: "dfareportingCreativeFieldsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields",
    validator: validate_DfareportingCreativeFieldsUpdate_580041,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativeFieldsUpdate_580042,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsInsert_580057 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldsInsert_580059(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsInsert_580058(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative field.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580060 = path.getOrDefault("profileId")
  valid_580060 = validateParameter(valid_580060, JString, required = true,
                                 default = nil)
  if valid_580060 != nil:
    section.add "profileId", valid_580060
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580061 = query.getOrDefault("key")
  valid_580061 = validateParameter(valid_580061, JString, required = false,
                                 default = nil)
  if valid_580061 != nil:
    section.add "key", valid_580061
  var valid_580062 = query.getOrDefault("prettyPrint")
  valid_580062 = validateParameter(valid_580062, JBool, required = false,
                                 default = newJBool(true))
  if valid_580062 != nil:
    section.add "prettyPrint", valid_580062
  var valid_580063 = query.getOrDefault("oauth_token")
  valid_580063 = validateParameter(valid_580063, JString, required = false,
                                 default = nil)
  if valid_580063 != nil:
    section.add "oauth_token", valid_580063
  var valid_580064 = query.getOrDefault("alt")
  valid_580064 = validateParameter(valid_580064, JString, required = false,
                                 default = newJString("json"))
  if valid_580064 != nil:
    section.add "alt", valid_580064
  var valid_580065 = query.getOrDefault("userIp")
  valid_580065 = validateParameter(valid_580065, JString, required = false,
                                 default = nil)
  if valid_580065 != nil:
    section.add "userIp", valid_580065
  var valid_580066 = query.getOrDefault("quotaUser")
  valid_580066 = validateParameter(valid_580066, JString, required = false,
                                 default = nil)
  if valid_580066 != nil:
    section.add "quotaUser", valid_580066
  var valid_580067 = query.getOrDefault("fields")
  valid_580067 = validateParameter(valid_580067, JString, required = false,
                                 default = nil)
  if valid_580067 != nil:
    section.add "fields", valid_580067
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580069: Call_DfareportingCreativeFieldsInsert_580057;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new creative field.
  ## 
  let valid = call_580069.validator(path, query, header, formData, body)
  let scheme = call_580069.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580069.url(scheme.get, call_580069.host, call_580069.base,
                         call_580069.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580069, url, valid)

proc call*(call_580070: Call_DfareportingCreativeFieldsInsert_580057;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCreativeFieldsInsert
  ## Inserts a new creative field.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580071 = newJObject()
  var query_580072 = newJObject()
  var body_580073 = newJObject()
  add(query_580072, "key", newJString(key))
  add(query_580072, "prettyPrint", newJBool(prettyPrint))
  add(query_580072, "oauth_token", newJString(oauthToken))
  add(path_580071, "profileId", newJString(profileId))
  add(query_580072, "alt", newJString(alt))
  add(query_580072, "userIp", newJString(userIp))
  add(query_580072, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580073 = body
  add(query_580072, "fields", newJString(fields))
  result = call_580070.call(path_580071, query_580072, nil, nil, body_580073)

var dfareportingCreativeFieldsInsert* = Call_DfareportingCreativeFieldsInsert_580057(
    name: "dfareportingCreativeFieldsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields",
    validator: validate_DfareportingCreativeFieldsInsert_580058,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativeFieldsInsert_580059,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsList_580018 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldsList_580020(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsList_580019(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of creative fields, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580021 = path.getOrDefault("profileId")
  valid_580021 = validateParameter(valid_580021, JString, required = true,
                                 default = nil)
  if valid_580021 != nil:
    section.add "profileId", valid_580021
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   advertiserIds: JArray
  ##                : Select only creative fields that belong to these advertisers.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for creative fields by name or ID. Wildcards (*) are allowed. For example, "creativefield*2015" will return creative fields with names like "creativefield June 2015", "creativefield April 2015", or simply "creativefield 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativefield" will match creative fields with the name "my creativefield", "creativefield 2015", or simply "creativefield".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only creative fields with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_580022 = query.getOrDefault("key")
  valid_580022 = validateParameter(valid_580022, JString, required = false,
                                 default = nil)
  if valid_580022 != nil:
    section.add "key", valid_580022
  var valid_580023 = query.getOrDefault("prettyPrint")
  valid_580023 = validateParameter(valid_580023, JBool, required = false,
                                 default = newJBool(true))
  if valid_580023 != nil:
    section.add "prettyPrint", valid_580023
  var valid_580024 = query.getOrDefault("oauth_token")
  valid_580024 = validateParameter(valid_580024, JString, required = false,
                                 default = nil)
  if valid_580024 != nil:
    section.add "oauth_token", valid_580024
  var valid_580025 = query.getOrDefault("sortField")
  valid_580025 = validateParameter(valid_580025, JString, required = false,
                                 default = newJString("ID"))
  if valid_580025 != nil:
    section.add "sortField", valid_580025
  var valid_580026 = query.getOrDefault("advertiserIds")
  valid_580026 = validateParameter(valid_580026, JArray, required = false,
                                 default = nil)
  if valid_580026 != nil:
    section.add "advertiserIds", valid_580026
  var valid_580027 = query.getOrDefault("alt")
  valid_580027 = validateParameter(valid_580027, JString, required = false,
                                 default = newJString("json"))
  if valid_580027 != nil:
    section.add "alt", valid_580027
  var valid_580028 = query.getOrDefault("userIp")
  valid_580028 = validateParameter(valid_580028, JString, required = false,
                                 default = nil)
  if valid_580028 != nil:
    section.add "userIp", valid_580028
  var valid_580029 = query.getOrDefault("quotaUser")
  valid_580029 = validateParameter(valid_580029, JString, required = false,
                                 default = nil)
  if valid_580029 != nil:
    section.add "quotaUser", valid_580029
  var valid_580030 = query.getOrDefault("pageToken")
  valid_580030 = validateParameter(valid_580030, JString, required = false,
                                 default = nil)
  if valid_580030 != nil:
    section.add "pageToken", valid_580030
  var valid_580031 = query.getOrDefault("searchString")
  valid_580031 = validateParameter(valid_580031, JString, required = false,
                                 default = nil)
  if valid_580031 != nil:
    section.add "searchString", valid_580031
  var valid_580032 = query.getOrDefault("sortOrder")
  valid_580032 = validateParameter(valid_580032, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580032 != nil:
    section.add "sortOrder", valid_580032
  var valid_580033 = query.getOrDefault("ids")
  valid_580033 = validateParameter(valid_580033, JArray, required = false,
                                 default = nil)
  if valid_580033 != nil:
    section.add "ids", valid_580033
  var valid_580034 = query.getOrDefault("fields")
  valid_580034 = validateParameter(valid_580034, JString, required = false,
                                 default = nil)
  if valid_580034 != nil:
    section.add "fields", valid_580034
  var valid_580035 = query.getOrDefault("maxResults")
  valid_580035 = validateParameter(valid_580035, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580035 != nil:
    section.add "maxResults", valid_580035
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580036: Call_DfareportingCreativeFieldsList_580018; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of creative fields, possibly filtered. This method supports paging.
  ## 
  let valid = call_580036.validator(path, query, header, formData, body)
  let scheme = call_580036.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580036.url(scheme.get, call_580036.host, call_580036.base,
                         call_580036.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580036, url, valid)

proc call*(call_580037: Call_DfareportingCreativeFieldsList_580018;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; sortField: string = "ID";
          advertiserIds: JsonNode = nil; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; pageToken: string = ""; searchString: string = "";
          sortOrder: string = "ASCENDING"; ids: JsonNode = nil; fields: string = "";
          maxResults: int = 1000): Recallable =
  ## dfareportingCreativeFieldsList
  ## Retrieves a list of creative fields, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   advertiserIds: JArray
  ##                : Select only creative fields that belong to these advertisers.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for creative fields by name or ID. Wildcards (*) are allowed. For example, "creativefield*2015" will return creative fields with names like "creativefield June 2015", "creativefield April 2015", or simply "creativefield 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativefield" will match creative fields with the name "my creativefield", "creativefield 2015", or simply "creativefield".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only creative fields with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_580038 = newJObject()
  var query_580039 = newJObject()
  add(query_580039, "key", newJString(key))
  add(query_580039, "prettyPrint", newJBool(prettyPrint))
  add(query_580039, "oauth_token", newJString(oauthToken))
  add(path_580038, "profileId", newJString(profileId))
  add(query_580039, "sortField", newJString(sortField))
  if advertiserIds != nil:
    query_580039.add "advertiserIds", advertiserIds
  add(query_580039, "alt", newJString(alt))
  add(query_580039, "userIp", newJString(userIp))
  add(query_580039, "quotaUser", newJString(quotaUser))
  add(query_580039, "pageToken", newJString(pageToken))
  add(query_580039, "searchString", newJString(searchString))
  add(query_580039, "sortOrder", newJString(sortOrder))
  if ids != nil:
    query_580039.add "ids", ids
  add(query_580039, "fields", newJString(fields))
  add(query_580039, "maxResults", newJInt(maxResults))
  result = call_580037.call(path_580038, query_580039, nil, nil, nil)

var dfareportingCreativeFieldsList* = Call_DfareportingCreativeFieldsList_580018(
    name: "dfareportingCreativeFieldsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields",
    validator: validate_DfareportingCreativeFieldsList_580019,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativeFieldsList_580020,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsPatch_580074 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldsPatch_580076(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsPatch_580075(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative field. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580077 = path.getOrDefault("profileId")
  valid_580077 = validateParameter(valid_580077, JString, required = true,
                                 default = nil)
  if valid_580077 != nil:
    section.add "profileId", valid_580077
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Creative Field ID
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580078 = query.getOrDefault("key")
  valid_580078 = validateParameter(valid_580078, JString, required = false,
                                 default = nil)
  if valid_580078 != nil:
    section.add "key", valid_580078
  var valid_580079 = query.getOrDefault("prettyPrint")
  valid_580079 = validateParameter(valid_580079, JBool, required = false,
                                 default = newJBool(true))
  if valid_580079 != nil:
    section.add "prettyPrint", valid_580079
  var valid_580080 = query.getOrDefault("oauth_token")
  valid_580080 = validateParameter(valid_580080, JString, required = false,
                                 default = nil)
  if valid_580080 != nil:
    section.add "oauth_token", valid_580080
  var valid_580081 = query.getOrDefault("alt")
  valid_580081 = validateParameter(valid_580081, JString, required = false,
                                 default = newJString("json"))
  if valid_580081 != nil:
    section.add "alt", valid_580081
  var valid_580082 = query.getOrDefault("userIp")
  valid_580082 = validateParameter(valid_580082, JString, required = false,
                                 default = nil)
  if valid_580082 != nil:
    section.add "userIp", valid_580082
  var valid_580083 = query.getOrDefault("quotaUser")
  valid_580083 = validateParameter(valid_580083, JString, required = false,
                                 default = nil)
  if valid_580083 != nil:
    section.add "quotaUser", valid_580083
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580084 = query.getOrDefault("id")
  valid_580084 = validateParameter(valid_580084, JString, required = true,
                                 default = nil)
  if valid_580084 != nil:
    section.add "id", valid_580084
  var valid_580085 = query.getOrDefault("fields")
  valid_580085 = validateParameter(valid_580085, JString, required = false,
                                 default = nil)
  if valid_580085 != nil:
    section.add "fields", valid_580085
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580087: Call_DfareportingCreativeFieldsPatch_580074;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative field. This method supports patch semantics.
  ## 
  let valid = call_580087.validator(path, query, header, formData, body)
  let scheme = call_580087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580087.url(scheme.get, call_580087.host, call_580087.base,
                         call_580087.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580087, url, valid)

proc call*(call_580088: Call_DfareportingCreativeFieldsPatch_580074;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCreativeFieldsPatch
  ## Updates an existing creative field. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Creative Field ID
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580089 = newJObject()
  var query_580090 = newJObject()
  var body_580091 = newJObject()
  add(query_580090, "key", newJString(key))
  add(query_580090, "prettyPrint", newJBool(prettyPrint))
  add(query_580090, "oauth_token", newJString(oauthToken))
  add(path_580089, "profileId", newJString(profileId))
  add(query_580090, "alt", newJString(alt))
  add(query_580090, "userIp", newJString(userIp))
  add(query_580090, "quotaUser", newJString(quotaUser))
  add(query_580090, "id", newJString(id))
  if body != nil:
    body_580091 = body
  add(query_580090, "fields", newJString(fields))
  result = call_580088.call(path_580089, query_580090, nil, nil, body_580091)

var dfareportingCreativeFieldsPatch* = Call_DfareportingCreativeFieldsPatch_580074(
    name: "dfareportingCreativeFieldsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields",
    validator: validate_DfareportingCreativeFieldsPatch_580075,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativeFieldsPatch_580076,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesUpdate_580114 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldValuesUpdate_580116(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesUpdate_580115(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative field value.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580117 = path.getOrDefault("profileId")
  valid_580117 = validateParameter(valid_580117, JString, required = true,
                                 default = nil)
  if valid_580117 != nil:
    section.add "profileId", valid_580117
  var valid_580118 = path.getOrDefault("creativeFieldId")
  valid_580118 = validateParameter(valid_580118, JString, required = true,
                                 default = nil)
  if valid_580118 != nil:
    section.add "creativeFieldId", valid_580118
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580119 = query.getOrDefault("key")
  valid_580119 = validateParameter(valid_580119, JString, required = false,
                                 default = nil)
  if valid_580119 != nil:
    section.add "key", valid_580119
  var valid_580120 = query.getOrDefault("prettyPrint")
  valid_580120 = validateParameter(valid_580120, JBool, required = false,
                                 default = newJBool(true))
  if valid_580120 != nil:
    section.add "prettyPrint", valid_580120
  var valid_580121 = query.getOrDefault("oauth_token")
  valid_580121 = validateParameter(valid_580121, JString, required = false,
                                 default = nil)
  if valid_580121 != nil:
    section.add "oauth_token", valid_580121
  var valid_580122 = query.getOrDefault("alt")
  valid_580122 = validateParameter(valid_580122, JString, required = false,
                                 default = newJString("json"))
  if valid_580122 != nil:
    section.add "alt", valid_580122
  var valid_580123 = query.getOrDefault("userIp")
  valid_580123 = validateParameter(valid_580123, JString, required = false,
                                 default = nil)
  if valid_580123 != nil:
    section.add "userIp", valid_580123
  var valid_580124 = query.getOrDefault("quotaUser")
  valid_580124 = validateParameter(valid_580124, JString, required = false,
                                 default = nil)
  if valid_580124 != nil:
    section.add "quotaUser", valid_580124
  var valid_580125 = query.getOrDefault("fields")
  valid_580125 = validateParameter(valid_580125, JString, required = false,
                                 default = nil)
  if valid_580125 != nil:
    section.add "fields", valid_580125
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580127: Call_DfareportingCreativeFieldValuesUpdate_580114;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative field value.
  ## 
  let valid = call_580127.validator(path, query, header, formData, body)
  let scheme = call_580127.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580127.url(scheme.get, call_580127.host, call_580127.base,
                         call_580127.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580127, url, valid)

proc call*(call_580128: Call_DfareportingCreativeFieldValuesUpdate_580114;
          profileId: string; creativeFieldId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; body: JsonNode = nil;
          fields: string = ""): Recallable =
  ## dfareportingCreativeFieldValuesUpdate
  ## Updates an existing creative field value.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580129 = newJObject()
  var query_580130 = newJObject()
  var body_580131 = newJObject()
  add(query_580130, "key", newJString(key))
  add(query_580130, "prettyPrint", newJBool(prettyPrint))
  add(query_580130, "oauth_token", newJString(oauthToken))
  add(path_580129, "profileId", newJString(profileId))
  add(query_580130, "alt", newJString(alt))
  add(query_580130, "userIp", newJString(userIp))
  add(query_580130, "quotaUser", newJString(quotaUser))
  add(path_580129, "creativeFieldId", newJString(creativeFieldId))
  if body != nil:
    body_580131 = body
  add(query_580130, "fields", newJString(fields))
  result = call_580128.call(path_580129, query_580130, nil, nil, body_580131)

var dfareportingCreativeFieldValuesUpdate* = Call_DfareportingCreativeFieldValuesUpdate_580114(
    name: "dfareportingCreativeFieldValuesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
    validator: validate_DfareportingCreativeFieldValuesUpdate_580115,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativeFieldValuesUpdate_580116,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesInsert_580132 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldValuesInsert_580134(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesInsert_580133(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative field value.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580135 = path.getOrDefault("profileId")
  valid_580135 = validateParameter(valid_580135, JString, required = true,
                                 default = nil)
  if valid_580135 != nil:
    section.add "profileId", valid_580135
  var valid_580136 = path.getOrDefault("creativeFieldId")
  valid_580136 = validateParameter(valid_580136, JString, required = true,
                                 default = nil)
  if valid_580136 != nil:
    section.add "creativeFieldId", valid_580136
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580137 = query.getOrDefault("key")
  valid_580137 = validateParameter(valid_580137, JString, required = false,
                                 default = nil)
  if valid_580137 != nil:
    section.add "key", valid_580137
  var valid_580138 = query.getOrDefault("prettyPrint")
  valid_580138 = validateParameter(valid_580138, JBool, required = false,
                                 default = newJBool(true))
  if valid_580138 != nil:
    section.add "prettyPrint", valid_580138
  var valid_580139 = query.getOrDefault("oauth_token")
  valid_580139 = validateParameter(valid_580139, JString, required = false,
                                 default = nil)
  if valid_580139 != nil:
    section.add "oauth_token", valid_580139
  var valid_580140 = query.getOrDefault("alt")
  valid_580140 = validateParameter(valid_580140, JString, required = false,
                                 default = newJString("json"))
  if valid_580140 != nil:
    section.add "alt", valid_580140
  var valid_580141 = query.getOrDefault("userIp")
  valid_580141 = validateParameter(valid_580141, JString, required = false,
                                 default = nil)
  if valid_580141 != nil:
    section.add "userIp", valid_580141
  var valid_580142 = query.getOrDefault("quotaUser")
  valid_580142 = validateParameter(valid_580142, JString, required = false,
                                 default = nil)
  if valid_580142 != nil:
    section.add "quotaUser", valid_580142
  var valid_580143 = query.getOrDefault("fields")
  valid_580143 = validateParameter(valid_580143, JString, required = false,
                                 default = nil)
  if valid_580143 != nil:
    section.add "fields", valid_580143
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580145: Call_DfareportingCreativeFieldValuesInsert_580132;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new creative field value.
  ## 
  let valid = call_580145.validator(path, query, header, formData, body)
  let scheme = call_580145.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580145.url(scheme.get, call_580145.host, call_580145.base,
                         call_580145.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580145, url, valid)

proc call*(call_580146: Call_DfareportingCreativeFieldValuesInsert_580132;
          profileId: string; creativeFieldId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; body: JsonNode = nil;
          fields: string = ""): Recallable =
  ## dfareportingCreativeFieldValuesInsert
  ## Inserts a new creative field value.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580147 = newJObject()
  var query_580148 = newJObject()
  var body_580149 = newJObject()
  add(query_580148, "key", newJString(key))
  add(query_580148, "prettyPrint", newJBool(prettyPrint))
  add(query_580148, "oauth_token", newJString(oauthToken))
  add(path_580147, "profileId", newJString(profileId))
  add(query_580148, "alt", newJString(alt))
  add(query_580148, "userIp", newJString(userIp))
  add(query_580148, "quotaUser", newJString(quotaUser))
  add(path_580147, "creativeFieldId", newJString(creativeFieldId))
  if body != nil:
    body_580149 = body
  add(query_580148, "fields", newJString(fields))
  result = call_580146.call(path_580147, query_580148, nil, nil, body_580149)

var dfareportingCreativeFieldValuesInsert* = Call_DfareportingCreativeFieldValuesInsert_580132(
    name: "dfareportingCreativeFieldValuesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
    validator: validate_DfareportingCreativeFieldValuesInsert_580133,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativeFieldValuesInsert_580134,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesList_580092 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldValuesList_580094(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesList_580093(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of creative field values, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580095 = path.getOrDefault("profileId")
  valid_580095 = validateParameter(valid_580095, JString, required = true,
                                 default = nil)
  if valid_580095 != nil:
    section.add "profileId", valid_580095
  var valid_580096 = path.getOrDefault("creativeFieldId")
  valid_580096 = validateParameter(valid_580096, JString, required = true,
                                 default = nil)
  if valid_580096 != nil:
    section.add "creativeFieldId", valid_580096
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for creative field values by their values. Wildcards (e.g. *) are not allowed.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only creative field values with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_580097 = query.getOrDefault("key")
  valid_580097 = validateParameter(valid_580097, JString, required = false,
                                 default = nil)
  if valid_580097 != nil:
    section.add "key", valid_580097
  var valid_580098 = query.getOrDefault("prettyPrint")
  valid_580098 = validateParameter(valid_580098, JBool, required = false,
                                 default = newJBool(true))
  if valid_580098 != nil:
    section.add "prettyPrint", valid_580098
  var valid_580099 = query.getOrDefault("oauth_token")
  valid_580099 = validateParameter(valid_580099, JString, required = false,
                                 default = nil)
  if valid_580099 != nil:
    section.add "oauth_token", valid_580099
  var valid_580100 = query.getOrDefault("sortField")
  valid_580100 = validateParameter(valid_580100, JString, required = false,
                                 default = newJString("ID"))
  if valid_580100 != nil:
    section.add "sortField", valid_580100
  var valid_580101 = query.getOrDefault("alt")
  valid_580101 = validateParameter(valid_580101, JString, required = false,
                                 default = newJString("json"))
  if valid_580101 != nil:
    section.add "alt", valid_580101
  var valid_580102 = query.getOrDefault("userIp")
  valid_580102 = validateParameter(valid_580102, JString, required = false,
                                 default = nil)
  if valid_580102 != nil:
    section.add "userIp", valid_580102
  var valid_580103 = query.getOrDefault("quotaUser")
  valid_580103 = validateParameter(valid_580103, JString, required = false,
                                 default = nil)
  if valid_580103 != nil:
    section.add "quotaUser", valid_580103
  var valid_580104 = query.getOrDefault("pageToken")
  valid_580104 = validateParameter(valid_580104, JString, required = false,
                                 default = nil)
  if valid_580104 != nil:
    section.add "pageToken", valid_580104
  var valid_580105 = query.getOrDefault("searchString")
  valid_580105 = validateParameter(valid_580105, JString, required = false,
                                 default = nil)
  if valid_580105 != nil:
    section.add "searchString", valid_580105
  var valid_580106 = query.getOrDefault("sortOrder")
  valid_580106 = validateParameter(valid_580106, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580106 != nil:
    section.add "sortOrder", valid_580106
  var valid_580107 = query.getOrDefault("ids")
  valid_580107 = validateParameter(valid_580107, JArray, required = false,
                                 default = nil)
  if valid_580107 != nil:
    section.add "ids", valid_580107
  var valid_580108 = query.getOrDefault("fields")
  valid_580108 = validateParameter(valid_580108, JString, required = false,
                                 default = nil)
  if valid_580108 != nil:
    section.add "fields", valid_580108
  var valid_580109 = query.getOrDefault("maxResults")
  valid_580109 = validateParameter(valid_580109, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580109 != nil:
    section.add "maxResults", valid_580109
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580110: Call_DfareportingCreativeFieldValuesList_580092;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of creative field values, possibly filtered. This method supports paging.
  ## 
  let valid = call_580110.validator(path, query, header, formData, body)
  let scheme = call_580110.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580110.url(scheme.get, call_580110.host, call_580110.base,
                         call_580110.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580110, url, valid)

proc call*(call_580111: Call_DfareportingCreativeFieldValuesList_580092;
          profileId: string; creativeFieldId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; sortField: string = "ID";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          pageToken: string = ""; searchString: string = "";
          sortOrder: string = "ASCENDING"; ids: JsonNode = nil; fields: string = "";
          maxResults: int = 1000): Recallable =
  ## dfareportingCreativeFieldValuesList
  ## Retrieves a list of creative field values, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for creative field values by their values. Wildcards (e.g. *) are not allowed.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only creative field values with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_580112 = newJObject()
  var query_580113 = newJObject()
  add(query_580113, "key", newJString(key))
  add(query_580113, "prettyPrint", newJBool(prettyPrint))
  add(query_580113, "oauth_token", newJString(oauthToken))
  add(path_580112, "profileId", newJString(profileId))
  add(query_580113, "sortField", newJString(sortField))
  add(query_580113, "alt", newJString(alt))
  add(query_580113, "userIp", newJString(userIp))
  add(query_580113, "quotaUser", newJString(quotaUser))
  add(path_580112, "creativeFieldId", newJString(creativeFieldId))
  add(query_580113, "pageToken", newJString(pageToken))
  add(query_580113, "searchString", newJString(searchString))
  add(query_580113, "sortOrder", newJString(sortOrder))
  if ids != nil:
    query_580113.add "ids", ids
  add(query_580113, "fields", newJString(fields))
  add(query_580113, "maxResults", newJInt(maxResults))
  result = call_580111.call(path_580112, query_580113, nil, nil, nil)

var dfareportingCreativeFieldValuesList* = Call_DfareportingCreativeFieldValuesList_580092(
    name: "dfareportingCreativeFieldValuesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
    validator: validate_DfareportingCreativeFieldValuesList_580093,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativeFieldValuesList_580094,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesPatch_580150 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldValuesPatch_580152(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesPatch_580151(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative field value. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580153 = path.getOrDefault("profileId")
  valid_580153 = validateParameter(valid_580153, JString, required = true,
                                 default = nil)
  if valid_580153 != nil:
    section.add "profileId", valid_580153
  var valid_580154 = path.getOrDefault("creativeFieldId")
  valid_580154 = validateParameter(valid_580154, JString, required = true,
                                 default = nil)
  if valid_580154 != nil:
    section.add "creativeFieldId", valid_580154
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Creative Field Value ID
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580155 = query.getOrDefault("key")
  valid_580155 = validateParameter(valid_580155, JString, required = false,
                                 default = nil)
  if valid_580155 != nil:
    section.add "key", valid_580155
  var valid_580156 = query.getOrDefault("prettyPrint")
  valid_580156 = validateParameter(valid_580156, JBool, required = false,
                                 default = newJBool(true))
  if valid_580156 != nil:
    section.add "prettyPrint", valid_580156
  var valid_580157 = query.getOrDefault("oauth_token")
  valid_580157 = validateParameter(valid_580157, JString, required = false,
                                 default = nil)
  if valid_580157 != nil:
    section.add "oauth_token", valid_580157
  var valid_580158 = query.getOrDefault("alt")
  valid_580158 = validateParameter(valid_580158, JString, required = false,
                                 default = newJString("json"))
  if valid_580158 != nil:
    section.add "alt", valid_580158
  var valid_580159 = query.getOrDefault("userIp")
  valid_580159 = validateParameter(valid_580159, JString, required = false,
                                 default = nil)
  if valid_580159 != nil:
    section.add "userIp", valid_580159
  var valid_580160 = query.getOrDefault("quotaUser")
  valid_580160 = validateParameter(valid_580160, JString, required = false,
                                 default = nil)
  if valid_580160 != nil:
    section.add "quotaUser", valid_580160
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580161 = query.getOrDefault("id")
  valid_580161 = validateParameter(valid_580161, JString, required = true,
                                 default = nil)
  if valid_580161 != nil:
    section.add "id", valid_580161
  var valid_580162 = query.getOrDefault("fields")
  valid_580162 = validateParameter(valid_580162, JString, required = false,
                                 default = nil)
  if valid_580162 != nil:
    section.add "fields", valid_580162
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580164: Call_DfareportingCreativeFieldValuesPatch_580150;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative field value. This method supports patch semantics.
  ## 
  let valid = call_580164.validator(path, query, header, formData, body)
  let scheme = call_580164.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580164.url(scheme.get, call_580164.host, call_580164.base,
                         call_580164.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580164, url, valid)

proc call*(call_580165: Call_DfareportingCreativeFieldValuesPatch_580150;
          profileId: string; creativeFieldId: string; id: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; body: JsonNode = nil;
          fields: string = ""): Recallable =
  ## dfareportingCreativeFieldValuesPatch
  ## Updates an existing creative field value. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   id: string (required)
  ##     : Creative Field Value ID
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580166 = newJObject()
  var query_580167 = newJObject()
  var body_580168 = newJObject()
  add(query_580167, "key", newJString(key))
  add(query_580167, "prettyPrint", newJBool(prettyPrint))
  add(query_580167, "oauth_token", newJString(oauthToken))
  add(path_580166, "profileId", newJString(profileId))
  add(query_580167, "alt", newJString(alt))
  add(query_580167, "userIp", newJString(userIp))
  add(query_580167, "quotaUser", newJString(quotaUser))
  add(path_580166, "creativeFieldId", newJString(creativeFieldId))
  add(query_580167, "id", newJString(id))
  if body != nil:
    body_580168 = body
  add(query_580167, "fields", newJString(fields))
  result = call_580165.call(path_580166, query_580167, nil, nil, body_580168)

var dfareportingCreativeFieldValuesPatch* = Call_DfareportingCreativeFieldValuesPatch_580150(
    name: "dfareportingCreativeFieldValuesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
    validator: validate_DfareportingCreativeFieldValuesPatch_580151,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativeFieldValuesPatch_580152,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesGet_580169 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldValuesGet_580171(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesGet_580170(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one creative field value by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative Field Value ID
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580172 = path.getOrDefault("profileId")
  valid_580172 = validateParameter(valid_580172, JString, required = true,
                                 default = nil)
  if valid_580172 != nil:
    section.add "profileId", valid_580172
  var valid_580173 = path.getOrDefault("id")
  valid_580173 = validateParameter(valid_580173, JString, required = true,
                                 default = nil)
  if valid_580173 != nil:
    section.add "id", valid_580173
  var valid_580174 = path.getOrDefault("creativeFieldId")
  valid_580174 = validateParameter(valid_580174, JString, required = true,
                                 default = nil)
  if valid_580174 != nil:
    section.add "creativeFieldId", valid_580174
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580175 = query.getOrDefault("key")
  valid_580175 = validateParameter(valid_580175, JString, required = false,
                                 default = nil)
  if valid_580175 != nil:
    section.add "key", valid_580175
  var valid_580176 = query.getOrDefault("prettyPrint")
  valid_580176 = validateParameter(valid_580176, JBool, required = false,
                                 default = newJBool(true))
  if valid_580176 != nil:
    section.add "prettyPrint", valid_580176
  var valid_580177 = query.getOrDefault("oauth_token")
  valid_580177 = validateParameter(valid_580177, JString, required = false,
                                 default = nil)
  if valid_580177 != nil:
    section.add "oauth_token", valid_580177
  var valid_580178 = query.getOrDefault("alt")
  valid_580178 = validateParameter(valid_580178, JString, required = false,
                                 default = newJString("json"))
  if valid_580178 != nil:
    section.add "alt", valid_580178
  var valid_580179 = query.getOrDefault("userIp")
  valid_580179 = validateParameter(valid_580179, JString, required = false,
                                 default = nil)
  if valid_580179 != nil:
    section.add "userIp", valid_580179
  var valid_580180 = query.getOrDefault("quotaUser")
  valid_580180 = validateParameter(valid_580180, JString, required = false,
                                 default = nil)
  if valid_580180 != nil:
    section.add "quotaUser", valid_580180
  var valid_580181 = query.getOrDefault("fields")
  valid_580181 = validateParameter(valid_580181, JString, required = false,
                                 default = nil)
  if valid_580181 != nil:
    section.add "fields", valid_580181
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580182: Call_DfareportingCreativeFieldValuesGet_580169;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one creative field value by ID.
  ## 
  let valid = call_580182.validator(path, query, header, formData, body)
  let scheme = call_580182.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580182.url(scheme.get, call_580182.host, call_580182.base,
                         call_580182.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580182, url, valid)

proc call*(call_580183: Call_DfareportingCreativeFieldValuesGet_580169;
          profileId: string; id: string; creativeFieldId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingCreativeFieldValuesGet
  ## Gets one creative field value by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Creative Field Value ID
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580184 = newJObject()
  var query_580185 = newJObject()
  add(query_580185, "key", newJString(key))
  add(query_580185, "prettyPrint", newJBool(prettyPrint))
  add(query_580185, "oauth_token", newJString(oauthToken))
  add(path_580184, "profileId", newJString(profileId))
  add(path_580184, "id", newJString(id))
  add(query_580185, "alt", newJString(alt))
  add(query_580185, "userIp", newJString(userIp))
  add(query_580185, "quotaUser", newJString(quotaUser))
  add(path_580184, "creativeFieldId", newJString(creativeFieldId))
  add(query_580185, "fields", newJString(fields))
  result = call_580183.call(path_580184, query_580185, nil, nil, nil)

var dfareportingCreativeFieldValuesGet* = Call_DfareportingCreativeFieldValuesGet_580169(
    name: "dfareportingCreativeFieldValuesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}",
    validator: validate_DfareportingCreativeFieldValuesGet_580170,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativeFieldValuesGet_580171,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesDelete_580186 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldValuesDelete_580188(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesDelete_580187(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing creative field value.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative Field Value ID
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580189 = path.getOrDefault("profileId")
  valid_580189 = validateParameter(valid_580189, JString, required = true,
                                 default = nil)
  if valid_580189 != nil:
    section.add "profileId", valid_580189
  var valid_580190 = path.getOrDefault("id")
  valid_580190 = validateParameter(valid_580190, JString, required = true,
                                 default = nil)
  if valid_580190 != nil:
    section.add "id", valid_580190
  var valid_580191 = path.getOrDefault("creativeFieldId")
  valid_580191 = validateParameter(valid_580191, JString, required = true,
                                 default = nil)
  if valid_580191 != nil:
    section.add "creativeFieldId", valid_580191
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580192 = query.getOrDefault("key")
  valid_580192 = validateParameter(valid_580192, JString, required = false,
                                 default = nil)
  if valid_580192 != nil:
    section.add "key", valid_580192
  var valid_580193 = query.getOrDefault("prettyPrint")
  valid_580193 = validateParameter(valid_580193, JBool, required = false,
                                 default = newJBool(true))
  if valid_580193 != nil:
    section.add "prettyPrint", valid_580193
  var valid_580194 = query.getOrDefault("oauth_token")
  valid_580194 = validateParameter(valid_580194, JString, required = false,
                                 default = nil)
  if valid_580194 != nil:
    section.add "oauth_token", valid_580194
  var valid_580195 = query.getOrDefault("alt")
  valid_580195 = validateParameter(valid_580195, JString, required = false,
                                 default = newJString("json"))
  if valid_580195 != nil:
    section.add "alt", valid_580195
  var valid_580196 = query.getOrDefault("userIp")
  valid_580196 = validateParameter(valid_580196, JString, required = false,
                                 default = nil)
  if valid_580196 != nil:
    section.add "userIp", valid_580196
  var valid_580197 = query.getOrDefault("quotaUser")
  valid_580197 = validateParameter(valid_580197, JString, required = false,
                                 default = nil)
  if valid_580197 != nil:
    section.add "quotaUser", valid_580197
  var valid_580198 = query.getOrDefault("fields")
  valid_580198 = validateParameter(valid_580198, JString, required = false,
                                 default = nil)
  if valid_580198 != nil:
    section.add "fields", valid_580198
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580199: Call_DfareportingCreativeFieldValuesDelete_580186;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing creative field value.
  ## 
  let valid = call_580199.validator(path, query, header, formData, body)
  let scheme = call_580199.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580199.url(scheme.get, call_580199.host, call_580199.base,
                         call_580199.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580199, url, valid)

proc call*(call_580200: Call_DfareportingCreativeFieldValuesDelete_580186;
          profileId: string; id: string; creativeFieldId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingCreativeFieldValuesDelete
  ## Deletes an existing creative field value.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Creative Field Value ID
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580201 = newJObject()
  var query_580202 = newJObject()
  add(query_580202, "key", newJString(key))
  add(query_580202, "prettyPrint", newJBool(prettyPrint))
  add(query_580202, "oauth_token", newJString(oauthToken))
  add(path_580201, "profileId", newJString(profileId))
  add(path_580201, "id", newJString(id))
  add(query_580202, "alt", newJString(alt))
  add(query_580202, "userIp", newJString(userIp))
  add(query_580202, "quotaUser", newJString(quotaUser))
  add(path_580201, "creativeFieldId", newJString(creativeFieldId))
  add(query_580202, "fields", newJString(fields))
  result = call_580200.call(path_580201, query_580202, nil, nil, nil)

var dfareportingCreativeFieldValuesDelete* = Call_DfareportingCreativeFieldValuesDelete_580186(
    name: "dfareportingCreativeFieldValuesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}",
    validator: validate_DfareportingCreativeFieldValuesDelete_580187,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativeFieldValuesDelete_580188,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsGet_580203 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldsGet_580205(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsGet_580204(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one creative field by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative Field ID
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580206 = path.getOrDefault("profileId")
  valid_580206 = validateParameter(valid_580206, JString, required = true,
                                 default = nil)
  if valid_580206 != nil:
    section.add "profileId", valid_580206
  var valid_580207 = path.getOrDefault("id")
  valid_580207 = validateParameter(valid_580207, JString, required = true,
                                 default = nil)
  if valid_580207 != nil:
    section.add "id", valid_580207
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580208 = query.getOrDefault("key")
  valid_580208 = validateParameter(valid_580208, JString, required = false,
                                 default = nil)
  if valid_580208 != nil:
    section.add "key", valid_580208
  var valid_580209 = query.getOrDefault("prettyPrint")
  valid_580209 = validateParameter(valid_580209, JBool, required = false,
                                 default = newJBool(true))
  if valid_580209 != nil:
    section.add "prettyPrint", valid_580209
  var valid_580210 = query.getOrDefault("oauth_token")
  valid_580210 = validateParameter(valid_580210, JString, required = false,
                                 default = nil)
  if valid_580210 != nil:
    section.add "oauth_token", valid_580210
  var valid_580211 = query.getOrDefault("alt")
  valid_580211 = validateParameter(valid_580211, JString, required = false,
                                 default = newJString("json"))
  if valid_580211 != nil:
    section.add "alt", valid_580211
  var valid_580212 = query.getOrDefault("userIp")
  valid_580212 = validateParameter(valid_580212, JString, required = false,
                                 default = nil)
  if valid_580212 != nil:
    section.add "userIp", valid_580212
  var valid_580213 = query.getOrDefault("quotaUser")
  valid_580213 = validateParameter(valid_580213, JString, required = false,
                                 default = nil)
  if valid_580213 != nil:
    section.add "quotaUser", valid_580213
  var valid_580214 = query.getOrDefault("fields")
  valid_580214 = validateParameter(valid_580214, JString, required = false,
                                 default = nil)
  if valid_580214 != nil:
    section.add "fields", valid_580214
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580215: Call_DfareportingCreativeFieldsGet_580203; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one creative field by ID.
  ## 
  let valid = call_580215.validator(path, query, header, formData, body)
  let scheme = call_580215.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580215.url(scheme.get, call_580215.host, call_580215.base,
                         call_580215.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580215, url, valid)

proc call*(call_580216: Call_DfareportingCreativeFieldsGet_580203;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingCreativeFieldsGet
  ## Gets one creative field by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Creative Field ID
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580217 = newJObject()
  var query_580218 = newJObject()
  add(query_580218, "key", newJString(key))
  add(query_580218, "prettyPrint", newJBool(prettyPrint))
  add(query_580218, "oauth_token", newJString(oauthToken))
  add(path_580217, "profileId", newJString(profileId))
  add(path_580217, "id", newJString(id))
  add(query_580218, "alt", newJString(alt))
  add(query_580218, "userIp", newJString(userIp))
  add(query_580218, "quotaUser", newJString(quotaUser))
  add(query_580218, "fields", newJString(fields))
  result = call_580216.call(path_580217, query_580218, nil, nil, nil)

var dfareportingCreativeFieldsGet* = Call_DfareportingCreativeFieldsGet_580203(
    name: "dfareportingCreativeFieldsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/creativeFields/{id}",
    validator: validate_DfareportingCreativeFieldsGet_580204,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativeFieldsGet_580205,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsDelete_580219 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldsDelete_580221(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsDelete_580220(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing creative field.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative Field ID
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580222 = path.getOrDefault("profileId")
  valid_580222 = validateParameter(valid_580222, JString, required = true,
                                 default = nil)
  if valid_580222 != nil:
    section.add "profileId", valid_580222
  var valid_580223 = path.getOrDefault("id")
  valid_580223 = validateParameter(valid_580223, JString, required = true,
                                 default = nil)
  if valid_580223 != nil:
    section.add "id", valid_580223
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580224 = query.getOrDefault("key")
  valid_580224 = validateParameter(valid_580224, JString, required = false,
                                 default = nil)
  if valid_580224 != nil:
    section.add "key", valid_580224
  var valid_580225 = query.getOrDefault("prettyPrint")
  valid_580225 = validateParameter(valid_580225, JBool, required = false,
                                 default = newJBool(true))
  if valid_580225 != nil:
    section.add "prettyPrint", valid_580225
  var valid_580226 = query.getOrDefault("oauth_token")
  valid_580226 = validateParameter(valid_580226, JString, required = false,
                                 default = nil)
  if valid_580226 != nil:
    section.add "oauth_token", valid_580226
  var valid_580227 = query.getOrDefault("alt")
  valid_580227 = validateParameter(valid_580227, JString, required = false,
                                 default = newJString("json"))
  if valid_580227 != nil:
    section.add "alt", valid_580227
  var valid_580228 = query.getOrDefault("userIp")
  valid_580228 = validateParameter(valid_580228, JString, required = false,
                                 default = nil)
  if valid_580228 != nil:
    section.add "userIp", valid_580228
  var valid_580229 = query.getOrDefault("quotaUser")
  valid_580229 = validateParameter(valid_580229, JString, required = false,
                                 default = nil)
  if valid_580229 != nil:
    section.add "quotaUser", valid_580229
  var valid_580230 = query.getOrDefault("fields")
  valid_580230 = validateParameter(valid_580230, JString, required = false,
                                 default = nil)
  if valid_580230 != nil:
    section.add "fields", valid_580230
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580231: Call_DfareportingCreativeFieldsDelete_580219;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing creative field.
  ## 
  let valid = call_580231.validator(path, query, header, formData, body)
  let scheme = call_580231.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580231.url(scheme.get, call_580231.host, call_580231.base,
                         call_580231.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580231, url, valid)

proc call*(call_580232: Call_DfareportingCreativeFieldsDelete_580219;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingCreativeFieldsDelete
  ## Deletes an existing creative field.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Creative Field ID
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580233 = newJObject()
  var query_580234 = newJObject()
  add(query_580234, "key", newJString(key))
  add(query_580234, "prettyPrint", newJBool(prettyPrint))
  add(query_580234, "oauth_token", newJString(oauthToken))
  add(path_580233, "profileId", newJString(profileId))
  add(path_580233, "id", newJString(id))
  add(query_580234, "alt", newJString(alt))
  add(query_580234, "userIp", newJString(userIp))
  add(query_580234, "quotaUser", newJString(quotaUser))
  add(query_580234, "fields", newJString(fields))
  result = call_580232.call(path_580233, query_580234, nil, nil, nil)

var dfareportingCreativeFieldsDelete* = Call_DfareportingCreativeFieldsDelete_580219(
    name: "dfareportingCreativeFieldsDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/creativeFields/{id}",
    validator: validate_DfareportingCreativeFieldsDelete_580220,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativeFieldsDelete_580221,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsUpdate_580258 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeGroupsUpdate_580260(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsUpdate_580259(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580261 = path.getOrDefault("profileId")
  valid_580261 = validateParameter(valid_580261, JString, required = true,
                                 default = nil)
  if valid_580261 != nil:
    section.add "profileId", valid_580261
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580262 = query.getOrDefault("key")
  valid_580262 = validateParameter(valid_580262, JString, required = false,
                                 default = nil)
  if valid_580262 != nil:
    section.add "key", valid_580262
  var valid_580263 = query.getOrDefault("prettyPrint")
  valid_580263 = validateParameter(valid_580263, JBool, required = false,
                                 default = newJBool(true))
  if valid_580263 != nil:
    section.add "prettyPrint", valid_580263
  var valid_580264 = query.getOrDefault("oauth_token")
  valid_580264 = validateParameter(valid_580264, JString, required = false,
                                 default = nil)
  if valid_580264 != nil:
    section.add "oauth_token", valid_580264
  var valid_580265 = query.getOrDefault("alt")
  valid_580265 = validateParameter(valid_580265, JString, required = false,
                                 default = newJString("json"))
  if valid_580265 != nil:
    section.add "alt", valid_580265
  var valid_580266 = query.getOrDefault("userIp")
  valid_580266 = validateParameter(valid_580266, JString, required = false,
                                 default = nil)
  if valid_580266 != nil:
    section.add "userIp", valid_580266
  var valid_580267 = query.getOrDefault("quotaUser")
  valid_580267 = validateParameter(valid_580267, JString, required = false,
                                 default = nil)
  if valid_580267 != nil:
    section.add "quotaUser", valid_580267
  var valid_580268 = query.getOrDefault("fields")
  valid_580268 = validateParameter(valid_580268, JString, required = false,
                                 default = nil)
  if valid_580268 != nil:
    section.add "fields", valid_580268
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580270: Call_DfareportingCreativeGroupsUpdate_580258;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative group.
  ## 
  let valid = call_580270.validator(path, query, header, formData, body)
  let scheme = call_580270.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580270.url(scheme.get, call_580270.host, call_580270.base,
                         call_580270.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580270, url, valid)

proc call*(call_580271: Call_DfareportingCreativeGroupsUpdate_580258;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCreativeGroupsUpdate
  ## Updates an existing creative group.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580272 = newJObject()
  var query_580273 = newJObject()
  var body_580274 = newJObject()
  add(query_580273, "key", newJString(key))
  add(query_580273, "prettyPrint", newJBool(prettyPrint))
  add(query_580273, "oauth_token", newJString(oauthToken))
  add(path_580272, "profileId", newJString(profileId))
  add(query_580273, "alt", newJString(alt))
  add(query_580273, "userIp", newJString(userIp))
  add(query_580273, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580274 = body
  add(query_580273, "fields", newJString(fields))
  result = call_580271.call(path_580272, query_580273, nil, nil, body_580274)

var dfareportingCreativeGroupsUpdate* = Call_DfareportingCreativeGroupsUpdate_580258(
    name: "dfareportingCreativeGroupsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeGroups",
    validator: validate_DfareportingCreativeGroupsUpdate_580259,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativeGroupsUpdate_580260,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsInsert_580275 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeGroupsInsert_580277(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsInsert_580276(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580278 = path.getOrDefault("profileId")
  valid_580278 = validateParameter(valid_580278, JString, required = true,
                                 default = nil)
  if valid_580278 != nil:
    section.add "profileId", valid_580278
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580279 = query.getOrDefault("key")
  valid_580279 = validateParameter(valid_580279, JString, required = false,
                                 default = nil)
  if valid_580279 != nil:
    section.add "key", valid_580279
  var valid_580280 = query.getOrDefault("prettyPrint")
  valid_580280 = validateParameter(valid_580280, JBool, required = false,
                                 default = newJBool(true))
  if valid_580280 != nil:
    section.add "prettyPrint", valid_580280
  var valid_580281 = query.getOrDefault("oauth_token")
  valid_580281 = validateParameter(valid_580281, JString, required = false,
                                 default = nil)
  if valid_580281 != nil:
    section.add "oauth_token", valid_580281
  var valid_580282 = query.getOrDefault("alt")
  valid_580282 = validateParameter(valid_580282, JString, required = false,
                                 default = newJString("json"))
  if valid_580282 != nil:
    section.add "alt", valid_580282
  var valid_580283 = query.getOrDefault("userIp")
  valid_580283 = validateParameter(valid_580283, JString, required = false,
                                 default = nil)
  if valid_580283 != nil:
    section.add "userIp", valid_580283
  var valid_580284 = query.getOrDefault("quotaUser")
  valid_580284 = validateParameter(valid_580284, JString, required = false,
                                 default = nil)
  if valid_580284 != nil:
    section.add "quotaUser", valid_580284
  var valid_580285 = query.getOrDefault("fields")
  valid_580285 = validateParameter(valid_580285, JString, required = false,
                                 default = nil)
  if valid_580285 != nil:
    section.add "fields", valid_580285
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580287: Call_DfareportingCreativeGroupsInsert_580275;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new creative group.
  ## 
  let valid = call_580287.validator(path, query, header, formData, body)
  let scheme = call_580287.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580287.url(scheme.get, call_580287.host, call_580287.base,
                         call_580287.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580287, url, valid)

proc call*(call_580288: Call_DfareportingCreativeGroupsInsert_580275;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCreativeGroupsInsert
  ## Inserts a new creative group.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580289 = newJObject()
  var query_580290 = newJObject()
  var body_580291 = newJObject()
  add(query_580290, "key", newJString(key))
  add(query_580290, "prettyPrint", newJBool(prettyPrint))
  add(query_580290, "oauth_token", newJString(oauthToken))
  add(path_580289, "profileId", newJString(profileId))
  add(query_580290, "alt", newJString(alt))
  add(query_580290, "userIp", newJString(userIp))
  add(query_580290, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580291 = body
  add(query_580290, "fields", newJString(fields))
  result = call_580288.call(path_580289, query_580290, nil, nil, body_580291)

var dfareportingCreativeGroupsInsert* = Call_DfareportingCreativeGroupsInsert_580275(
    name: "dfareportingCreativeGroupsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeGroups",
    validator: validate_DfareportingCreativeGroupsInsert_580276,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativeGroupsInsert_580277,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsList_580235 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeGroupsList_580237(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsList_580236(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of creative groups, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580238 = path.getOrDefault("profileId")
  valid_580238 = validateParameter(valid_580238, JString, required = true,
                                 default = nil)
  if valid_580238 != nil:
    section.add "profileId", valid_580238
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   advertiserIds: JArray
  ##                : Select only creative groups that belong to these advertisers.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for creative groups by name or ID. Wildcards (*) are allowed. For example, "creativegroup*2015" will return creative groups with names like "creativegroup June 2015", "creativegroup April 2015", or simply "creativegroup 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativegroup" will match creative groups with the name "my creativegroup", "creativegroup 2015", or simply "creativegroup".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only creative groups with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   groupNumber: JInt
  ##              : Select only creative groups that belong to this subgroup.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_580239 = query.getOrDefault("key")
  valid_580239 = validateParameter(valid_580239, JString, required = false,
                                 default = nil)
  if valid_580239 != nil:
    section.add "key", valid_580239
  var valid_580240 = query.getOrDefault("prettyPrint")
  valid_580240 = validateParameter(valid_580240, JBool, required = false,
                                 default = newJBool(true))
  if valid_580240 != nil:
    section.add "prettyPrint", valid_580240
  var valid_580241 = query.getOrDefault("oauth_token")
  valid_580241 = validateParameter(valid_580241, JString, required = false,
                                 default = nil)
  if valid_580241 != nil:
    section.add "oauth_token", valid_580241
  var valid_580242 = query.getOrDefault("sortField")
  valid_580242 = validateParameter(valid_580242, JString, required = false,
                                 default = newJString("ID"))
  if valid_580242 != nil:
    section.add "sortField", valid_580242
  var valid_580243 = query.getOrDefault("advertiserIds")
  valid_580243 = validateParameter(valid_580243, JArray, required = false,
                                 default = nil)
  if valid_580243 != nil:
    section.add "advertiserIds", valid_580243
  var valid_580244 = query.getOrDefault("alt")
  valid_580244 = validateParameter(valid_580244, JString, required = false,
                                 default = newJString("json"))
  if valid_580244 != nil:
    section.add "alt", valid_580244
  var valid_580245 = query.getOrDefault("userIp")
  valid_580245 = validateParameter(valid_580245, JString, required = false,
                                 default = nil)
  if valid_580245 != nil:
    section.add "userIp", valid_580245
  var valid_580246 = query.getOrDefault("quotaUser")
  valid_580246 = validateParameter(valid_580246, JString, required = false,
                                 default = nil)
  if valid_580246 != nil:
    section.add "quotaUser", valid_580246
  var valid_580247 = query.getOrDefault("pageToken")
  valid_580247 = validateParameter(valid_580247, JString, required = false,
                                 default = nil)
  if valid_580247 != nil:
    section.add "pageToken", valid_580247
  var valid_580248 = query.getOrDefault("searchString")
  valid_580248 = validateParameter(valid_580248, JString, required = false,
                                 default = nil)
  if valid_580248 != nil:
    section.add "searchString", valid_580248
  var valid_580249 = query.getOrDefault("sortOrder")
  valid_580249 = validateParameter(valid_580249, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580249 != nil:
    section.add "sortOrder", valid_580249
  var valid_580250 = query.getOrDefault("ids")
  valid_580250 = validateParameter(valid_580250, JArray, required = false,
                                 default = nil)
  if valid_580250 != nil:
    section.add "ids", valid_580250
  var valid_580251 = query.getOrDefault("fields")
  valid_580251 = validateParameter(valid_580251, JString, required = false,
                                 default = nil)
  if valid_580251 != nil:
    section.add "fields", valid_580251
  var valid_580252 = query.getOrDefault("groupNumber")
  valid_580252 = validateParameter(valid_580252, JInt, required = false, default = nil)
  if valid_580252 != nil:
    section.add "groupNumber", valid_580252
  var valid_580253 = query.getOrDefault("maxResults")
  valid_580253 = validateParameter(valid_580253, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580253 != nil:
    section.add "maxResults", valid_580253
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580254: Call_DfareportingCreativeGroupsList_580235; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of creative groups, possibly filtered. This method supports paging.
  ## 
  let valid = call_580254.validator(path, query, header, formData, body)
  let scheme = call_580254.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580254.url(scheme.get, call_580254.host, call_580254.base,
                         call_580254.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580254, url, valid)

proc call*(call_580255: Call_DfareportingCreativeGroupsList_580235;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; sortField: string = "ID";
          advertiserIds: JsonNode = nil; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; pageToken: string = ""; searchString: string = "";
          sortOrder: string = "ASCENDING"; ids: JsonNode = nil; fields: string = "";
          groupNumber: int = 0; maxResults: int = 1000): Recallable =
  ## dfareportingCreativeGroupsList
  ## Retrieves a list of creative groups, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   advertiserIds: JArray
  ##                : Select only creative groups that belong to these advertisers.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for creative groups by name or ID. Wildcards (*) are allowed. For example, "creativegroup*2015" will return creative groups with names like "creativegroup June 2015", "creativegroup April 2015", or simply "creativegroup 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativegroup" will match creative groups with the name "my creativegroup", "creativegroup 2015", or simply "creativegroup".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only creative groups with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   groupNumber: int
  ##              : Select only creative groups that belong to this subgroup.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_580256 = newJObject()
  var query_580257 = newJObject()
  add(query_580257, "key", newJString(key))
  add(query_580257, "prettyPrint", newJBool(prettyPrint))
  add(query_580257, "oauth_token", newJString(oauthToken))
  add(path_580256, "profileId", newJString(profileId))
  add(query_580257, "sortField", newJString(sortField))
  if advertiserIds != nil:
    query_580257.add "advertiserIds", advertiserIds
  add(query_580257, "alt", newJString(alt))
  add(query_580257, "userIp", newJString(userIp))
  add(query_580257, "quotaUser", newJString(quotaUser))
  add(query_580257, "pageToken", newJString(pageToken))
  add(query_580257, "searchString", newJString(searchString))
  add(query_580257, "sortOrder", newJString(sortOrder))
  if ids != nil:
    query_580257.add "ids", ids
  add(query_580257, "fields", newJString(fields))
  add(query_580257, "groupNumber", newJInt(groupNumber))
  add(query_580257, "maxResults", newJInt(maxResults))
  result = call_580255.call(path_580256, query_580257, nil, nil, nil)

var dfareportingCreativeGroupsList* = Call_DfareportingCreativeGroupsList_580235(
    name: "dfareportingCreativeGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeGroups",
    validator: validate_DfareportingCreativeGroupsList_580236,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativeGroupsList_580237,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsPatch_580292 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeGroupsPatch_580294(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsPatch_580293(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative group. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580295 = path.getOrDefault("profileId")
  valid_580295 = validateParameter(valid_580295, JString, required = true,
                                 default = nil)
  if valid_580295 != nil:
    section.add "profileId", valid_580295
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Creative group ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580296 = query.getOrDefault("key")
  valid_580296 = validateParameter(valid_580296, JString, required = false,
                                 default = nil)
  if valid_580296 != nil:
    section.add "key", valid_580296
  var valid_580297 = query.getOrDefault("prettyPrint")
  valid_580297 = validateParameter(valid_580297, JBool, required = false,
                                 default = newJBool(true))
  if valid_580297 != nil:
    section.add "prettyPrint", valid_580297
  var valid_580298 = query.getOrDefault("oauth_token")
  valid_580298 = validateParameter(valid_580298, JString, required = false,
                                 default = nil)
  if valid_580298 != nil:
    section.add "oauth_token", valid_580298
  var valid_580299 = query.getOrDefault("alt")
  valid_580299 = validateParameter(valid_580299, JString, required = false,
                                 default = newJString("json"))
  if valid_580299 != nil:
    section.add "alt", valid_580299
  var valid_580300 = query.getOrDefault("userIp")
  valid_580300 = validateParameter(valid_580300, JString, required = false,
                                 default = nil)
  if valid_580300 != nil:
    section.add "userIp", valid_580300
  var valid_580301 = query.getOrDefault("quotaUser")
  valid_580301 = validateParameter(valid_580301, JString, required = false,
                                 default = nil)
  if valid_580301 != nil:
    section.add "quotaUser", valid_580301
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580302 = query.getOrDefault("id")
  valid_580302 = validateParameter(valid_580302, JString, required = true,
                                 default = nil)
  if valid_580302 != nil:
    section.add "id", valid_580302
  var valid_580303 = query.getOrDefault("fields")
  valid_580303 = validateParameter(valid_580303, JString, required = false,
                                 default = nil)
  if valid_580303 != nil:
    section.add "fields", valid_580303
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580305: Call_DfareportingCreativeGroupsPatch_580292;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative group. This method supports patch semantics.
  ## 
  let valid = call_580305.validator(path, query, header, formData, body)
  let scheme = call_580305.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580305.url(scheme.get, call_580305.host, call_580305.base,
                         call_580305.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580305, url, valid)

proc call*(call_580306: Call_DfareportingCreativeGroupsPatch_580292;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCreativeGroupsPatch
  ## Updates an existing creative group. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Creative group ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580307 = newJObject()
  var query_580308 = newJObject()
  var body_580309 = newJObject()
  add(query_580308, "key", newJString(key))
  add(query_580308, "prettyPrint", newJBool(prettyPrint))
  add(query_580308, "oauth_token", newJString(oauthToken))
  add(path_580307, "profileId", newJString(profileId))
  add(query_580308, "alt", newJString(alt))
  add(query_580308, "userIp", newJString(userIp))
  add(query_580308, "quotaUser", newJString(quotaUser))
  add(query_580308, "id", newJString(id))
  if body != nil:
    body_580309 = body
  add(query_580308, "fields", newJString(fields))
  result = call_580306.call(path_580307, query_580308, nil, nil, body_580309)

var dfareportingCreativeGroupsPatch* = Call_DfareportingCreativeGroupsPatch_580292(
    name: "dfareportingCreativeGroupsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeGroups",
    validator: validate_DfareportingCreativeGroupsPatch_580293,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativeGroupsPatch_580294,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsGet_580310 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeGroupsGet_580312(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsGet_580311(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one creative group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580313 = path.getOrDefault("profileId")
  valid_580313 = validateParameter(valid_580313, JString, required = true,
                                 default = nil)
  if valid_580313 != nil:
    section.add "profileId", valid_580313
  var valid_580314 = path.getOrDefault("id")
  valid_580314 = validateParameter(valid_580314, JString, required = true,
                                 default = nil)
  if valid_580314 != nil:
    section.add "id", valid_580314
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580315 = query.getOrDefault("key")
  valid_580315 = validateParameter(valid_580315, JString, required = false,
                                 default = nil)
  if valid_580315 != nil:
    section.add "key", valid_580315
  var valid_580316 = query.getOrDefault("prettyPrint")
  valid_580316 = validateParameter(valid_580316, JBool, required = false,
                                 default = newJBool(true))
  if valid_580316 != nil:
    section.add "prettyPrint", valid_580316
  var valid_580317 = query.getOrDefault("oauth_token")
  valid_580317 = validateParameter(valid_580317, JString, required = false,
                                 default = nil)
  if valid_580317 != nil:
    section.add "oauth_token", valid_580317
  var valid_580318 = query.getOrDefault("alt")
  valid_580318 = validateParameter(valid_580318, JString, required = false,
                                 default = newJString("json"))
  if valid_580318 != nil:
    section.add "alt", valid_580318
  var valid_580319 = query.getOrDefault("userIp")
  valid_580319 = validateParameter(valid_580319, JString, required = false,
                                 default = nil)
  if valid_580319 != nil:
    section.add "userIp", valid_580319
  var valid_580320 = query.getOrDefault("quotaUser")
  valid_580320 = validateParameter(valid_580320, JString, required = false,
                                 default = nil)
  if valid_580320 != nil:
    section.add "quotaUser", valid_580320
  var valid_580321 = query.getOrDefault("fields")
  valid_580321 = validateParameter(valid_580321, JString, required = false,
                                 default = nil)
  if valid_580321 != nil:
    section.add "fields", valid_580321
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580322: Call_DfareportingCreativeGroupsGet_580310; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one creative group by ID.
  ## 
  let valid = call_580322.validator(path, query, header, formData, body)
  let scheme = call_580322.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580322.url(scheme.get, call_580322.host, call_580322.base,
                         call_580322.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580322, url, valid)

proc call*(call_580323: Call_DfareportingCreativeGroupsGet_580310;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingCreativeGroupsGet
  ## Gets one creative group by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Creative group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580324 = newJObject()
  var query_580325 = newJObject()
  add(query_580325, "key", newJString(key))
  add(query_580325, "prettyPrint", newJBool(prettyPrint))
  add(query_580325, "oauth_token", newJString(oauthToken))
  add(path_580324, "profileId", newJString(profileId))
  add(path_580324, "id", newJString(id))
  add(query_580325, "alt", newJString(alt))
  add(query_580325, "userIp", newJString(userIp))
  add(query_580325, "quotaUser", newJString(quotaUser))
  add(query_580325, "fields", newJString(fields))
  result = call_580323.call(path_580324, query_580325, nil, nil, nil)

var dfareportingCreativeGroupsGet* = Call_DfareportingCreativeGroupsGet_580310(
    name: "dfareportingCreativeGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/creativeGroups/{id}",
    validator: validate_DfareportingCreativeGroupsGet_580311,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativeGroupsGet_580312,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesUpdate_580357 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativesUpdate_580359(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesUpdate_580358(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580360 = path.getOrDefault("profileId")
  valid_580360 = validateParameter(valid_580360, JString, required = true,
                                 default = nil)
  if valid_580360 != nil:
    section.add "profileId", valid_580360
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580361 = query.getOrDefault("key")
  valid_580361 = validateParameter(valid_580361, JString, required = false,
                                 default = nil)
  if valid_580361 != nil:
    section.add "key", valid_580361
  var valid_580362 = query.getOrDefault("prettyPrint")
  valid_580362 = validateParameter(valid_580362, JBool, required = false,
                                 default = newJBool(true))
  if valid_580362 != nil:
    section.add "prettyPrint", valid_580362
  var valid_580363 = query.getOrDefault("oauth_token")
  valid_580363 = validateParameter(valid_580363, JString, required = false,
                                 default = nil)
  if valid_580363 != nil:
    section.add "oauth_token", valid_580363
  var valid_580364 = query.getOrDefault("alt")
  valid_580364 = validateParameter(valid_580364, JString, required = false,
                                 default = newJString("json"))
  if valid_580364 != nil:
    section.add "alt", valid_580364
  var valid_580365 = query.getOrDefault("userIp")
  valid_580365 = validateParameter(valid_580365, JString, required = false,
                                 default = nil)
  if valid_580365 != nil:
    section.add "userIp", valid_580365
  var valid_580366 = query.getOrDefault("quotaUser")
  valid_580366 = validateParameter(valid_580366, JString, required = false,
                                 default = nil)
  if valid_580366 != nil:
    section.add "quotaUser", valid_580366
  var valid_580367 = query.getOrDefault("fields")
  valid_580367 = validateParameter(valid_580367, JString, required = false,
                                 default = nil)
  if valid_580367 != nil:
    section.add "fields", valid_580367
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580369: Call_DfareportingCreativesUpdate_580357; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing creative.
  ## 
  let valid = call_580369.validator(path, query, header, formData, body)
  let scheme = call_580369.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580369.url(scheme.get, call_580369.host, call_580369.base,
                         call_580369.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580369, url, valid)

proc call*(call_580370: Call_DfareportingCreativesUpdate_580357; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCreativesUpdate
  ## Updates an existing creative.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580371 = newJObject()
  var query_580372 = newJObject()
  var body_580373 = newJObject()
  add(query_580372, "key", newJString(key))
  add(query_580372, "prettyPrint", newJBool(prettyPrint))
  add(query_580372, "oauth_token", newJString(oauthToken))
  add(path_580371, "profileId", newJString(profileId))
  add(query_580372, "alt", newJString(alt))
  add(query_580372, "userIp", newJString(userIp))
  add(query_580372, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580373 = body
  add(query_580372, "fields", newJString(fields))
  result = call_580370.call(path_580371, query_580372, nil, nil, body_580373)

var dfareportingCreativesUpdate* = Call_DfareportingCreativesUpdate_580357(
    name: "dfareportingCreativesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives",
    validator: validate_DfareportingCreativesUpdate_580358,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativesUpdate_580359,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesInsert_580374 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativesInsert_580376(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesInsert_580375(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580377 = path.getOrDefault("profileId")
  valid_580377 = validateParameter(valid_580377, JString, required = true,
                                 default = nil)
  if valid_580377 != nil:
    section.add "profileId", valid_580377
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580378 = query.getOrDefault("key")
  valid_580378 = validateParameter(valid_580378, JString, required = false,
                                 default = nil)
  if valid_580378 != nil:
    section.add "key", valid_580378
  var valid_580379 = query.getOrDefault("prettyPrint")
  valid_580379 = validateParameter(valid_580379, JBool, required = false,
                                 default = newJBool(true))
  if valid_580379 != nil:
    section.add "prettyPrint", valid_580379
  var valid_580380 = query.getOrDefault("oauth_token")
  valid_580380 = validateParameter(valid_580380, JString, required = false,
                                 default = nil)
  if valid_580380 != nil:
    section.add "oauth_token", valid_580380
  var valid_580381 = query.getOrDefault("alt")
  valid_580381 = validateParameter(valid_580381, JString, required = false,
                                 default = newJString("json"))
  if valid_580381 != nil:
    section.add "alt", valid_580381
  var valid_580382 = query.getOrDefault("userIp")
  valid_580382 = validateParameter(valid_580382, JString, required = false,
                                 default = nil)
  if valid_580382 != nil:
    section.add "userIp", valid_580382
  var valid_580383 = query.getOrDefault("quotaUser")
  valid_580383 = validateParameter(valid_580383, JString, required = false,
                                 default = nil)
  if valid_580383 != nil:
    section.add "quotaUser", valid_580383
  var valid_580384 = query.getOrDefault("fields")
  valid_580384 = validateParameter(valid_580384, JString, required = false,
                                 default = nil)
  if valid_580384 != nil:
    section.add "fields", valid_580384
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580386: Call_DfareportingCreativesInsert_580374; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new creative.
  ## 
  let valid = call_580386.validator(path, query, header, formData, body)
  let scheme = call_580386.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580386.url(scheme.get, call_580386.host, call_580386.base,
                         call_580386.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580386, url, valid)

proc call*(call_580387: Call_DfareportingCreativesInsert_580374; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCreativesInsert
  ## Inserts a new creative.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580388 = newJObject()
  var query_580389 = newJObject()
  var body_580390 = newJObject()
  add(query_580389, "key", newJString(key))
  add(query_580389, "prettyPrint", newJBool(prettyPrint))
  add(query_580389, "oauth_token", newJString(oauthToken))
  add(path_580388, "profileId", newJString(profileId))
  add(query_580389, "alt", newJString(alt))
  add(query_580389, "userIp", newJString(userIp))
  add(query_580389, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580390 = body
  add(query_580389, "fields", newJString(fields))
  result = call_580387.call(path_580388, query_580389, nil, nil, body_580390)

var dfareportingCreativesInsert* = Call_DfareportingCreativesInsert_580374(
    name: "dfareportingCreativesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives",
    validator: validate_DfareportingCreativesInsert_580375,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativesInsert_580376,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesList_580326 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativesList_580328(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesList_580327(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of creatives, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580329 = path.getOrDefault("profileId")
  valid_580329 = validateParameter(valid_580329, JString, required = true,
                                 default = nil)
  if valid_580329 != nil:
    section.add "profileId", valid_580329
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   active: JBool
  ##         : Select only active creatives. Leave blank to select active and inactive creatives.
  ##   creativeFieldIds: JArray
  ##                   : Select only creatives with these creative field IDs.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived creatives. Leave blank to select archived and unarchived creatives.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   campaignId: JString
  ##             : Select only creatives with this campaign ID.
  ##   types: JArray
  ##        : Select only creatives with these creative types.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "creative*2015" will return objects with names like "creative June 2015", "creative April 2015", or simply "creative 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "creative" will match objects with name "my creative", "creative 2015", or simply "creative".
  ##   sizeIds: JArray
  ##          : Select only creatives with these size IDs.
  ##   companionCreativeIds: JArray
  ##                       : Select only in-stream video creatives with these companion IDs.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   renderingIds: JArray
  ##               : Select only creatives with these rendering IDs.
  ##   advertiserId: JString
  ##               : Select only creatives with this advertiser ID.
  ##   ids: JArray
  ##      : Select only creatives with these IDs.
  ##   studioCreativeId: JString
  ##                   : Select only creatives corresponding to this Studio creative ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_580330 = query.getOrDefault("key")
  valid_580330 = validateParameter(valid_580330, JString, required = false,
                                 default = nil)
  if valid_580330 != nil:
    section.add "key", valid_580330
  var valid_580331 = query.getOrDefault("prettyPrint")
  valid_580331 = validateParameter(valid_580331, JBool, required = false,
                                 default = newJBool(true))
  if valid_580331 != nil:
    section.add "prettyPrint", valid_580331
  var valid_580332 = query.getOrDefault("oauth_token")
  valid_580332 = validateParameter(valid_580332, JString, required = false,
                                 default = nil)
  if valid_580332 != nil:
    section.add "oauth_token", valid_580332
  var valid_580333 = query.getOrDefault("active")
  valid_580333 = validateParameter(valid_580333, JBool, required = false, default = nil)
  if valid_580333 != nil:
    section.add "active", valid_580333
  var valid_580334 = query.getOrDefault("creativeFieldIds")
  valid_580334 = validateParameter(valid_580334, JArray, required = false,
                                 default = nil)
  if valid_580334 != nil:
    section.add "creativeFieldIds", valid_580334
  var valid_580335 = query.getOrDefault("sortField")
  valid_580335 = validateParameter(valid_580335, JString, required = false,
                                 default = newJString("ID"))
  if valid_580335 != nil:
    section.add "sortField", valid_580335
  var valid_580336 = query.getOrDefault("alt")
  valid_580336 = validateParameter(valid_580336, JString, required = false,
                                 default = newJString("json"))
  if valid_580336 != nil:
    section.add "alt", valid_580336
  var valid_580337 = query.getOrDefault("userIp")
  valid_580337 = validateParameter(valid_580337, JString, required = false,
                                 default = nil)
  if valid_580337 != nil:
    section.add "userIp", valid_580337
  var valid_580338 = query.getOrDefault("archived")
  valid_580338 = validateParameter(valid_580338, JBool, required = false, default = nil)
  if valid_580338 != nil:
    section.add "archived", valid_580338
  var valid_580339 = query.getOrDefault("quotaUser")
  valid_580339 = validateParameter(valid_580339, JString, required = false,
                                 default = nil)
  if valid_580339 != nil:
    section.add "quotaUser", valid_580339
  var valid_580340 = query.getOrDefault("campaignId")
  valid_580340 = validateParameter(valid_580340, JString, required = false,
                                 default = nil)
  if valid_580340 != nil:
    section.add "campaignId", valid_580340
  var valid_580341 = query.getOrDefault("types")
  valid_580341 = validateParameter(valid_580341, JArray, required = false,
                                 default = nil)
  if valid_580341 != nil:
    section.add "types", valid_580341
  var valid_580342 = query.getOrDefault("pageToken")
  valid_580342 = validateParameter(valid_580342, JString, required = false,
                                 default = nil)
  if valid_580342 != nil:
    section.add "pageToken", valid_580342
  var valid_580343 = query.getOrDefault("searchString")
  valid_580343 = validateParameter(valid_580343, JString, required = false,
                                 default = nil)
  if valid_580343 != nil:
    section.add "searchString", valid_580343
  var valid_580344 = query.getOrDefault("sizeIds")
  valid_580344 = validateParameter(valid_580344, JArray, required = false,
                                 default = nil)
  if valid_580344 != nil:
    section.add "sizeIds", valid_580344
  var valid_580345 = query.getOrDefault("companionCreativeIds")
  valid_580345 = validateParameter(valid_580345, JArray, required = false,
                                 default = nil)
  if valid_580345 != nil:
    section.add "companionCreativeIds", valid_580345
  var valid_580346 = query.getOrDefault("sortOrder")
  valid_580346 = validateParameter(valid_580346, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580346 != nil:
    section.add "sortOrder", valid_580346
  var valid_580347 = query.getOrDefault("renderingIds")
  valid_580347 = validateParameter(valid_580347, JArray, required = false,
                                 default = nil)
  if valid_580347 != nil:
    section.add "renderingIds", valid_580347
  var valid_580348 = query.getOrDefault("advertiserId")
  valid_580348 = validateParameter(valid_580348, JString, required = false,
                                 default = nil)
  if valid_580348 != nil:
    section.add "advertiserId", valid_580348
  var valid_580349 = query.getOrDefault("ids")
  valid_580349 = validateParameter(valid_580349, JArray, required = false,
                                 default = nil)
  if valid_580349 != nil:
    section.add "ids", valid_580349
  var valid_580350 = query.getOrDefault("studioCreativeId")
  valid_580350 = validateParameter(valid_580350, JString, required = false,
                                 default = nil)
  if valid_580350 != nil:
    section.add "studioCreativeId", valid_580350
  var valid_580351 = query.getOrDefault("fields")
  valid_580351 = validateParameter(valid_580351, JString, required = false,
                                 default = nil)
  if valid_580351 != nil:
    section.add "fields", valid_580351
  var valid_580352 = query.getOrDefault("maxResults")
  valid_580352 = validateParameter(valid_580352, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580352 != nil:
    section.add "maxResults", valid_580352
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580353: Call_DfareportingCreativesList_580326; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of creatives, possibly filtered. This method supports paging.
  ## 
  let valid = call_580353.validator(path, query, header, formData, body)
  let scheme = call_580353.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580353.url(scheme.get, call_580353.host, call_580353.base,
                         call_580353.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580353, url, valid)

proc call*(call_580354: Call_DfareportingCreativesList_580326; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          active: bool = false; creativeFieldIds: JsonNode = nil;
          sortField: string = "ID"; alt: string = "json"; userIp: string = "";
          archived: bool = false; quotaUser: string = ""; campaignId: string = "";
          types: JsonNode = nil; pageToken: string = ""; searchString: string = "";
          sizeIds: JsonNode = nil; companionCreativeIds: JsonNode = nil;
          sortOrder: string = "ASCENDING"; renderingIds: JsonNode = nil;
          advertiserId: string = ""; ids: JsonNode = nil; studioCreativeId: string = "";
          fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingCreativesList
  ## Retrieves a list of creatives, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   active: bool
  ##         : Select only active creatives. Leave blank to select active and inactive creatives.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldIds: JArray
  ##                   : Select only creatives with these creative field IDs.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived creatives. Leave blank to select archived and unarchived creatives.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   campaignId: string
  ##             : Select only creatives with this campaign ID.
  ##   types: JArray
  ##        : Select only creatives with these creative types.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "creative*2015" will return objects with names like "creative June 2015", "creative April 2015", or simply "creative 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "creative" will match objects with name "my creative", "creative 2015", or simply "creative".
  ##   sizeIds: JArray
  ##          : Select only creatives with these size IDs.
  ##   companionCreativeIds: JArray
  ##                       : Select only in-stream video creatives with these companion IDs.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   renderingIds: JArray
  ##               : Select only creatives with these rendering IDs.
  ##   advertiserId: string
  ##               : Select only creatives with this advertiser ID.
  ##   ids: JArray
  ##      : Select only creatives with these IDs.
  ##   studioCreativeId: string
  ##                   : Select only creatives corresponding to this Studio creative ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_580355 = newJObject()
  var query_580356 = newJObject()
  add(query_580356, "key", newJString(key))
  add(query_580356, "prettyPrint", newJBool(prettyPrint))
  add(query_580356, "oauth_token", newJString(oauthToken))
  add(query_580356, "active", newJBool(active))
  add(path_580355, "profileId", newJString(profileId))
  if creativeFieldIds != nil:
    query_580356.add "creativeFieldIds", creativeFieldIds
  add(query_580356, "sortField", newJString(sortField))
  add(query_580356, "alt", newJString(alt))
  add(query_580356, "userIp", newJString(userIp))
  add(query_580356, "archived", newJBool(archived))
  add(query_580356, "quotaUser", newJString(quotaUser))
  add(query_580356, "campaignId", newJString(campaignId))
  if types != nil:
    query_580356.add "types", types
  add(query_580356, "pageToken", newJString(pageToken))
  add(query_580356, "searchString", newJString(searchString))
  if sizeIds != nil:
    query_580356.add "sizeIds", sizeIds
  if companionCreativeIds != nil:
    query_580356.add "companionCreativeIds", companionCreativeIds
  add(query_580356, "sortOrder", newJString(sortOrder))
  if renderingIds != nil:
    query_580356.add "renderingIds", renderingIds
  add(query_580356, "advertiserId", newJString(advertiserId))
  if ids != nil:
    query_580356.add "ids", ids
  add(query_580356, "studioCreativeId", newJString(studioCreativeId))
  add(query_580356, "fields", newJString(fields))
  add(query_580356, "maxResults", newJInt(maxResults))
  result = call_580354.call(path_580355, query_580356, nil, nil, nil)

var dfareportingCreativesList* = Call_DfareportingCreativesList_580326(
    name: "dfareportingCreativesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives",
    validator: validate_DfareportingCreativesList_580327,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativesList_580328,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesPatch_580391 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativesPatch_580393(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesPatch_580392(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580394 = path.getOrDefault("profileId")
  valid_580394 = validateParameter(valid_580394, JString, required = true,
                                 default = nil)
  if valid_580394 != nil:
    section.add "profileId", valid_580394
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Creative ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580395 = query.getOrDefault("key")
  valid_580395 = validateParameter(valid_580395, JString, required = false,
                                 default = nil)
  if valid_580395 != nil:
    section.add "key", valid_580395
  var valid_580396 = query.getOrDefault("prettyPrint")
  valid_580396 = validateParameter(valid_580396, JBool, required = false,
                                 default = newJBool(true))
  if valid_580396 != nil:
    section.add "prettyPrint", valid_580396
  var valid_580397 = query.getOrDefault("oauth_token")
  valid_580397 = validateParameter(valid_580397, JString, required = false,
                                 default = nil)
  if valid_580397 != nil:
    section.add "oauth_token", valid_580397
  var valid_580398 = query.getOrDefault("alt")
  valid_580398 = validateParameter(valid_580398, JString, required = false,
                                 default = newJString("json"))
  if valid_580398 != nil:
    section.add "alt", valid_580398
  var valid_580399 = query.getOrDefault("userIp")
  valid_580399 = validateParameter(valid_580399, JString, required = false,
                                 default = nil)
  if valid_580399 != nil:
    section.add "userIp", valid_580399
  var valid_580400 = query.getOrDefault("quotaUser")
  valid_580400 = validateParameter(valid_580400, JString, required = false,
                                 default = nil)
  if valid_580400 != nil:
    section.add "quotaUser", valid_580400
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580401 = query.getOrDefault("id")
  valid_580401 = validateParameter(valid_580401, JString, required = true,
                                 default = nil)
  if valid_580401 != nil:
    section.add "id", valid_580401
  var valid_580402 = query.getOrDefault("fields")
  valid_580402 = validateParameter(valid_580402, JString, required = false,
                                 default = nil)
  if valid_580402 != nil:
    section.add "fields", valid_580402
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580404: Call_DfareportingCreativesPatch_580391; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing creative. This method supports patch semantics.
  ## 
  let valid = call_580404.validator(path, query, header, formData, body)
  let scheme = call_580404.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580404.url(scheme.get, call_580404.host, call_580404.base,
                         call_580404.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580404, url, valid)

proc call*(call_580405: Call_DfareportingCreativesPatch_580391; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCreativesPatch
  ## Updates an existing creative. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Creative ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580406 = newJObject()
  var query_580407 = newJObject()
  var body_580408 = newJObject()
  add(query_580407, "key", newJString(key))
  add(query_580407, "prettyPrint", newJBool(prettyPrint))
  add(query_580407, "oauth_token", newJString(oauthToken))
  add(path_580406, "profileId", newJString(profileId))
  add(query_580407, "alt", newJString(alt))
  add(query_580407, "userIp", newJString(userIp))
  add(query_580407, "quotaUser", newJString(quotaUser))
  add(query_580407, "id", newJString(id))
  if body != nil:
    body_580408 = body
  add(query_580407, "fields", newJString(fields))
  result = call_580405.call(path_580406, query_580407, nil, nil, body_580408)

var dfareportingCreativesPatch* = Call_DfareportingCreativesPatch_580391(
    name: "dfareportingCreativesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives",
    validator: validate_DfareportingCreativesPatch_580392,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativesPatch_580393,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesGet_580409 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativesGet_580411(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesGet_580410(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one creative by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580412 = path.getOrDefault("profileId")
  valid_580412 = validateParameter(valid_580412, JString, required = true,
                                 default = nil)
  if valid_580412 != nil:
    section.add "profileId", valid_580412
  var valid_580413 = path.getOrDefault("id")
  valid_580413 = validateParameter(valid_580413, JString, required = true,
                                 default = nil)
  if valid_580413 != nil:
    section.add "id", valid_580413
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580414 = query.getOrDefault("key")
  valid_580414 = validateParameter(valid_580414, JString, required = false,
                                 default = nil)
  if valid_580414 != nil:
    section.add "key", valid_580414
  var valid_580415 = query.getOrDefault("prettyPrint")
  valid_580415 = validateParameter(valid_580415, JBool, required = false,
                                 default = newJBool(true))
  if valid_580415 != nil:
    section.add "prettyPrint", valid_580415
  var valid_580416 = query.getOrDefault("oauth_token")
  valid_580416 = validateParameter(valid_580416, JString, required = false,
                                 default = nil)
  if valid_580416 != nil:
    section.add "oauth_token", valid_580416
  var valid_580417 = query.getOrDefault("alt")
  valid_580417 = validateParameter(valid_580417, JString, required = false,
                                 default = newJString("json"))
  if valid_580417 != nil:
    section.add "alt", valid_580417
  var valid_580418 = query.getOrDefault("userIp")
  valid_580418 = validateParameter(valid_580418, JString, required = false,
                                 default = nil)
  if valid_580418 != nil:
    section.add "userIp", valid_580418
  var valid_580419 = query.getOrDefault("quotaUser")
  valid_580419 = validateParameter(valid_580419, JString, required = false,
                                 default = nil)
  if valid_580419 != nil:
    section.add "quotaUser", valid_580419
  var valid_580420 = query.getOrDefault("fields")
  valid_580420 = validateParameter(valid_580420, JString, required = false,
                                 default = nil)
  if valid_580420 != nil:
    section.add "fields", valid_580420
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580421: Call_DfareportingCreativesGet_580409; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one creative by ID.
  ## 
  let valid = call_580421.validator(path, query, header, formData, body)
  let scheme = call_580421.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580421.url(scheme.get, call_580421.host, call_580421.base,
                         call_580421.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580421, url, valid)

proc call*(call_580422: Call_DfareportingCreativesGet_580409; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingCreativesGet
  ## Gets one creative by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Creative ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580423 = newJObject()
  var query_580424 = newJObject()
  add(query_580424, "key", newJString(key))
  add(query_580424, "prettyPrint", newJBool(prettyPrint))
  add(query_580424, "oauth_token", newJString(oauthToken))
  add(path_580423, "profileId", newJString(profileId))
  add(path_580423, "id", newJString(id))
  add(query_580424, "alt", newJString(alt))
  add(query_580424, "userIp", newJString(userIp))
  add(query_580424, "quotaUser", newJString(quotaUser))
  add(query_580424, "fields", newJString(fields))
  result = call_580422.call(path_580423, query_580424, nil, nil, nil)

var dfareportingCreativesGet* = Call_DfareportingCreativesGet_580409(
    name: "dfareportingCreativesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives/{id}",
    validator: validate_DfareportingCreativesGet_580410,
    base: "/dfareporting/v3.1", url: url_DfareportingCreativesGet_580411,
    schemes: {Scheme.Https})
type
  Call_DfareportingDimensionValuesQuery_580425 = ref object of OpenApiRestCall_578364
proc url_DfareportingDimensionValuesQuery_580427(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/dimensionvalues/query")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDimensionValuesQuery_580426(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves list of report dimension values for a list of filters.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580428 = path.getOrDefault("profileId")
  valid_580428 = validateParameter(valid_580428, JString, required = true,
                                 default = nil)
  if valid_580428 != nil:
    section.add "profileId", valid_580428
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : The value of the nextToken from the previous result page.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_580429 = query.getOrDefault("key")
  valid_580429 = validateParameter(valid_580429, JString, required = false,
                                 default = nil)
  if valid_580429 != nil:
    section.add "key", valid_580429
  var valid_580430 = query.getOrDefault("prettyPrint")
  valid_580430 = validateParameter(valid_580430, JBool, required = false,
                                 default = newJBool(true))
  if valid_580430 != nil:
    section.add "prettyPrint", valid_580430
  var valid_580431 = query.getOrDefault("oauth_token")
  valid_580431 = validateParameter(valid_580431, JString, required = false,
                                 default = nil)
  if valid_580431 != nil:
    section.add "oauth_token", valid_580431
  var valid_580432 = query.getOrDefault("alt")
  valid_580432 = validateParameter(valid_580432, JString, required = false,
                                 default = newJString("json"))
  if valid_580432 != nil:
    section.add "alt", valid_580432
  var valid_580433 = query.getOrDefault("userIp")
  valid_580433 = validateParameter(valid_580433, JString, required = false,
                                 default = nil)
  if valid_580433 != nil:
    section.add "userIp", valid_580433
  var valid_580434 = query.getOrDefault("quotaUser")
  valid_580434 = validateParameter(valid_580434, JString, required = false,
                                 default = nil)
  if valid_580434 != nil:
    section.add "quotaUser", valid_580434
  var valid_580435 = query.getOrDefault("pageToken")
  valid_580435 = validateParameter(valid_580435, JString, required = false,
                                 default = nil)
  if valid_580435 != nil:
    section.add "pageToken", valid_580435
  var valid_580436 = query.getOrDefault("fields")
  valid_580436 = validateParameter(valid_580436, JString, required = false,
                                 default = nil)
  if valid_580436 != nil:
    section.add "fields", valid_580436
  var valid_580437 = query.getOrDefault("maxResults")
  valid_580437 = validateParameter(valid_580437, JInt, required = false,
                                 default = newJInt(100))
  if valid_580437 != nil:
    section.add "maxResults", valid_580437
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580439: Call_DfareportingDimensionValuesQuery_580425;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves list of report dimension values for a list of filters.
  ## 
  let valid = call_580439.validator(path, query, header, formData, body)
  let scheme = call_580439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580439.url(scheme.get, call_580439.host, call_580439.base,
                         call_580439.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580439, url, valid)

proc call*(call_580440: Call_DfareportingDimensionValuesQuery_580425;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; pageToken: string = ""; body: JsonNode = nil;
          fields: string = ""; maxResults: int = 100): Recallable =
  ## dfareportingDimensionValuesQuery
  ## Retrieves list of report dimension values for a list of filters.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : The value of the nextToken from the previous result page.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_580441 = newJObject()
  var query_580442 = newJObject()
  var body_580443 = newJObject()
  add(query_580442, "key", newJString(key))
  add(query_580442, "prettyPrint", newJBool(prettyPrint))
  add(query_580442, "oauth_token", newJString(oauthToken))
  add(path_580441, "profileId", newJString(profileId))
  add(query_580442, "alt", newJString(alt))
  add(query_580442, "userIp", newJString(userIp))
  add(query_580442, "quotaUser", newJString(quotaUser))
  add(query_580442, "pageToken", newJString(pageToken))
  if body != nil:
    body_580443 = body
  add(query_580442, "fields", newJString(fields))
  add(query_580442, "maxResults", newJInt(maxResults))
  result = call_580440.call(path_580441, query_580442, nil, nil, body_580443)

var dfareportingDimensionValuesQuery* = Call_DfareportingDimensionValuesQuery_580425(
    name: "dfareportingDimensionValuesQuery", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/dimensionvalues/query",
    validator: validate_DfareportingDimensionValuesQuery_580426,
    base: "/dfareporting/v3.1", url: url_DfareportingDimensionValuesQuery_580427,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySitesInsert_580470 = ref object of OpenApiRestCall_578364
proc url_DfareportingDirectorySitesInsert_580472(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySitesInsert_580471(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new directory site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580473 = path.getOrDefault("profileId")
  valid_580473 = validateParameter(valid_580473, JString, required = true,
                                 default = nil)
  if valid_580473 != nil:
    section.add "profileId", valid_580473
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580474 = query.getOrDefault("key")
  valid_580474 = validateParameter(valid_580474, JString, required = false,
                                 default = nil)
  if valid_580474 != nil:
    section.add "key", valid_580474
  var valid_580475 = query.getOrDefault("prettyPrint")
  valid_580475 = validateParameter(valid_580475, JBool, required = false,
                                 default = newJBool(true))
  if valid_580475 != nil:
    section.add "prettyPrint", valid_580475
  var valid_580476 = query.getOrDefault("oauth_token")
  valid_580476 = validateParameter(valid_580476, JString, required = false,
                                 default = nil)
  if valid_580476 != nil:
    section.add "oauth_token", valid_580476
  var valid_580477 = query.getOrDefault("alt")
  valid_580477 = validateParameter(valid_580477, JString, required = false,
                                 default = newJString("json"))
  if valid_580477 != nil:
    section.add "alt", valid_580477
  var valid_580478 = query.getOrDefault("userIp")
  valid_580478 = validateParameter(valid_580478, JString, required = false,
                                 default = nil)
  if valid_580478 != nil:
    section.add "userIp", valid_580478
  var valid_580479 = query.getOrDefault("quotaUser")
  valid_580479 = validateParameter(valid_580479, JString, required = false,
                                 default = nil)
  if valid_580479 != nil:
    section.add "quotaUser", valid_580479
  var valid_580480 = query.getOrDefault("fields")
  valid_580480 = validateParameter(valid_580480, JString, required = false,
                                 default = nil)
  if valid_580480 != nil:
    section.add "fields", valid_580480
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580482: Call_DfareportingDirectorySitesInsert_580470;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new directory site.
  ## 
  let valid = call_580482.validator(path, query, header, formData, body)
  let scheme = call_580482.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580482.url(scheme.get, call_580482.host, call_580482.base,
                         call_580482.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580482, url, valid)

proc call*(call_580483: Call_DfareportingDirectorySitesInsert_580470;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingDirectorySitesInsert
  ## Inserts a new directory site.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580484 = newJObject()
  var query_580485 = newJObject()
  var body_580486 = newJObject()
  add(query_580485, "key", newJString(key))
  add(query_580485, "prettyPrint", newJBool(prettyPrint))
  add(query_580485, "oauth_token", newJString(oauthToken))
  add(path_580484, "profileId", newJString(profileId))
  add(query_580485, "alt", newJString(alt))
  add(query_580485, "userIp", newJString(userIp))
  add(query_580485, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580486 = body
  add(query_580485, "fields", newJString(fields))
  result = call_580483.call(path_580484, query_580485, nil, nil, body_580486)

var dfareportingDirectorySitesInsert* = Call_DfareportingDirectorySitesInsert_580470(
    name: "dfareportingDirectorySitesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/directorySites",
    validator: validate_DfareportingDirectorySitesInsert_580471,
    base: "/dfareporting/v3.1", url: url_DfareportingDirectorySitesInsert_580472,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySitesList_580444 = ref object of OpenApiRestCall_578364
proc url_DfareportingDirectorySitesList_580446(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySitesList_580445(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of directory sites, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580447 = path.getOrDefault("profileId")
  valid_580447 = validateParameter(valid_580447, JString, required = true,
                                 default = nil)
  if valid_580447 != nil:
    section.add "profileId", valid_580447
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   acceptsPublisherPaidPlacements: JBool
  ##                                 : Select only directory sites that accept publisher paid placements. This field can be left blank.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   active: JBool
  ##         : Select only active directory sites. Leave blank to retrieve both active and inactive directory sites.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   acceptsInterstitialPlacements: JBool
  ##                                : This search filter is no longer supported and will have no effect on the results returned.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name, ID or URL. Wildcards (*) are allowed. For example, "directory site*2015" will return objects with names like "directory site June 2015", "directory site April 2015", or simply "directory site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "directory site" will match objects with name "my directory site", "directory site 2015" or simply, "directory site".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   dfpNetworkCode: JString
  ##                 : Select only directory sites with this Ad Manager network code.
  ##   acceptsInStreamVideoPlacements: JBool
  ##                                 : This search filter is no longer supported and will have no effect on the results returned.
  ##   ids: JArray
  ##      : Select only directory sites with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_580448 = query.getOrDefault("key")
  valid_580448 = validateParameter(valid_580448, JString, required = false,
                                 default = nil)
  if valid_580448 != nil:
    section.add "key", valid_580448
  var valid_580449 = query.getOrDefault("acceptsPublisherPaidPlacements")
  valid_580449 = validateParameter(valid_580449, JBool, required = false, default = nil)
  if valid_580449 != nil:
    section.add "acceptsPublisherPaidPlacements", valid_580449
  var valid_580450 = query.getOrDefault("prettyPrint")
  valid_580450 = validateParameter(valid_580450, JBool, required = false,
                                 default = newJBool(true))
  if valid_580450 != nil:
    section.add "prettyPrint", valid_580450
  var valid_580451 = query.getOrDefault("oauth_token")
  valid_580451 = validateParameter(valid_580451, JString, required = false,
                                 default = nil)
  if valid_580451 != nil:
    section.add "oauth_token", valid_580451
  var valid_580452 = query.getOrDefault("active")
  valid_580452 = validateParameter(valid_580452, JBool, required = false, default = nil)
  if valid_580452 != nil:
    section.add "active", valid_580452
  var valid_580453 = query.getOrDefault("sortField")
  valid_580453 = validateParameter(valid_580453, JString, required = false,
                                 default = newJString("ID"))
  if valid_580453 != nil:
    section.add "sortField", valid_580453
  var valid_580454 = query.getOrDefault("alt")
  valid_580454 = validateParameter(valid_580454, JString, required = false,
                                 default = newJString("json"))
  if valid_580454 != nil:
    section.add "alt", valid_580454
  var valid_580455 = query.getOrDefault("userIp")
  valid_580455 = validateParameter(valid_580455, JString, required = false,
                                 default = nil)
  if valid_580455 != nil:
    section.add "userIp", valid_580455
  var valid_580456 = query.getOrDefault("acceptsInterstitialPlacements")
  valid_580456 = validateParameter(valid_580456, JBool, required = false, default = nil)
  if valid_580456 != nil:
    section.add "acceptsInterstitialPlacements", valid_580456
  var valid_580457 = query.getOrDefault("quotaUser")
  valid_580457 = validateParameter(valid_580457, JString, required = false,
                                 default = nil)
  if valid_580457 != nil:
    section.add "quotaUser", valid_580457
  var valid_580458 = query.getOrDefault("pageToken")
  valid_580458 = validateParameter(valid_580458, JString, required = false,
                                 default = nil)
  if valid_580458 != nil:
    section.add "pageToken", valid_580458
  var valid_580459 = query.getOrDefault("searchString")
  valid_580459 = validateParameter(valid_580459, JString, required = false,
                                 default = nil)
  if valid_580459 != nil:
    section.add "searchString", valid_580459
  var valid_580460 = query.getOrDefault("sortOrder")
  valid_580460 = validateParameter(valid_580460, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580460 != nil:
    section.add "sortOrder", valid_580460
  var valid_580461 = query.getOrDefault("dfpNetworkCode")
  valid_580461 = validateParameter(valid_580461, JString, required = false,
                                 default = nil)
  if valid_580461 != nil:
    section.add "dfpNetworkCode", valid_580461
  var valid_580462 = query.getOrDefault("acceptsInStreamVideoPlacements")
  valid_580462 = validateParameter(valid_580462, JBool, required = false, default = nil)
  if valid_580462 != nil:
    section.add "acceptsInStreamVideoPlacements", valid_580462
  var valid_580463 = query.getOrDefault("ids")
  valid_580463 = validateParameter(valid_580463, JArray, required = false,
                                 default = nil)
  if valid_580463 != nil:
    section.add "ids", valid_580463
  var valid_580464 = query.getOrDefault("fields")
  valid_580464 = validateParameter(valid_580464, JString, required = false,
                                 default = nil)
  if valid_580464 != nil:
    section.add "fields", valid_580464
  var valid_580465 = query.getOrDefault("maxResults")
  valid_580465 = validateParameter(valid_580465, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580465 != nil:
    section.add "maxResults", valid_580465
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580466: Call_DfareportingDirectorySitesList_580444; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of directory sites, possibly filtered. This method supports paging.
  ## 
  let valid = call_580466.validator(path, query, header, formData, body)
  let scheme = call_580466.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580466.url(scheme.get, call_580466.host, call_580466.base,
                         call_580466.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580466, url, valid)

proc call*(call_580467: Call_DfareportingDirectorySitesList_580444;
          profileId: string; key: string = "";
          acceptsPublisherPaidPlacements: bool = false; prettyPrint: bool = true;
          oauthToken: string = ""; active: bool = false; sortField: string = "ID";
          alt: string = "json"; userIp: string = "";
          acceptsInterstitialPlacements: bool = false; quotaUser: string = "";
          pageToken: string = ""; searchString: string = "";
          sortOrder: string = "ASCENDING"; dfpNetworkCode: string = "";
          acceptsInStreamVideoPlacements: bool = false; ids: JsonNode = nil;
          fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingDirectorySitesList
  ## Retrieves a list of directory sites, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   acceptsPublisherPaidPlacements: bool
  ##                                 : Select only directory sites that accept publisher paid placements. This field can be left blank.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   active: bool
  ##         : Select only active directory sites. Leave blank to retrieve both active and inactive directory sites.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   acceptsInterstitialPlacements: bool
  ##                                : This search filter is no longer supported and will have no effect on the results returned.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name, ID or URL. Wildcards (*) are allowed. For example, "directory site*2015" will return objects with names like "directory site June 2015", "directory site April 2015", or simply "directory site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "directory site" will match objects with name "my directory site", "directory site 2015" or simply, "directory site".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   dfpNetworkCode: string
  ##                 : Select only directory sites with this Ad Manager network code.
  ##   acceptsInStreamVideoPlacements: bool
  ##                                 : This search filter is no longer supported and will have no effect on the results returned.
  ##   ids: JArray
  ##      : Select only directory sites with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_580468 = newJObject()
  var query_580469 = newJObject()
  add(query_580469, "key", newJString(key))
  add(query_580469, "acceptsPublisherPaidPlacements",
      newJBool(acceptsPublisherPaidPlacements))
  add(query_580469, "prettyPrint", newJBool(prettyPrint))
  add(query_580469, "oauth_token", newJString(oauthToken))
  add(query_580469, "active", newJBool(active))
  add(path_580468, "profileId", newJString(profileId))
  add(query_580469, "sortField", newJString(sortField))
  add(query_580469, "alt", newJString(alt))
  add(query_580469, "userIp", newJString(userIp))
  add(query_580469, "acceptsInterstitialPlacements",
      newJBool(acceptsInterstitialPlacements))
  add(query_580469, "quotaUser", newJString(quotaUser))
  add(query_580469, "pageToken", newJString(pageToken))
  add(query_580469, "searchString", newJString(searchString))
  add(query_580469, "sortOrder", newJString(sortOrder))
  add(query_580469, "dfpNetworkCode", newJString(dfpNetworkCode))
  add(query_580469, "acceptsInStreamVideoPlacements",
      newJBool(acceptsInStreamVideoPlacements))
  if ids != nil:
    query_580469.add "ids", ids
  add(query_580469, "fields", newJString(fields))
  add(query_580469, "maxResults", newJInt(maxResults))
  result = call_580467.call(path_580468, query_580469, nil, nil, nil)

var dfareportingDirectorySitesList* = Call_DfareportingDirectorySitesList_580444(
    name: "dfareportingDirectorySitesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/directorySites",
    validator: validate_DfareportingDirectorySitesList_580445,
    base: "/dfareporting/v3.1", url: url_DfareportingDirectorySitesList_580446,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySitesGet_580487 = ref object of OpenApiRestCall_578364
proc url_DfareportingDirectorySitesGet_580489(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySites/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySitesGet_580488(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one directory site by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Directory site ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580490 = path.getOrDefault("profileId")
  valid_580490 = validateParameter(valid_580490, JString, required = true,
                                 default = nil)
  if valid_580490 != nil:
    section.add "profileId", valid_580490
  var valid_580491 = path.getOrDefault("id")
  valid_580491 = validateParameter(valid_580491, JString, required = true,
                                 default = nil)
  if valid_580491 != nil:
    section.add "id", valid_580491
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580492 = query.getOrDefault("key")
  valid_580492 = validateParameter(valid_580492, JString, required = false,
                                 default = nil)
  if valid_580492 != nil:
    section.add "key", valid_580492
  var valid_580493 = query.getOrDefault("prettyPrint")
  valid_580493 = validateParameter(valid_580493, JBool, required = false,
                                 default = newJBool(true))
  if valid_580493 != nil:
    section.add "prettyPrint", valid_580493
  var valid_580494 = query.getOrDefault("oauth_token")
  valid_580494 = validateParameter(valid_580494, JString, required = false,
                                 default = nil)
  if valid_580494 != nil:
    section.add "oauth_token", valid_580494
  var valid_580495 = query.getOrDefault("alt")
  valid_580495 = validateParameter(valid_580495, JString, required = false,
                                 default = newJString("json"))
  if valid_580495 != nil:
    section.add "alt", valid_580495
  var valid_580496 = query.getOrDefault("userIp")
  valid_580496 = validateParameter(valid_580496, JString, required = false,
                                 default = nil)
  if valid_580496 != nil:
    section.add "userIp", valid_580496
  var valid_580497 = query.getOrDefault("quotaUser")
  valid_580497 = validateParameter(valid_580497, JString, required = false,
                                 default = nil)
  if valid_580497 != nil:
    section.add "quotaUser", valid_580497
  var valid_580498 = query.getOrDefault("fields")
  valid_580498 = validateParameter(valid_580498, JString, required = false,
                                 default = nil)
  if valid_580498 != nil:
    section.add "fields", valid_580498
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580499: Call_DfareportingDirectorySitesGet_580487; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one directory site by ID.
  ## 
  let valid = call_580499.validator(path, query, header, formData, body)
  let scheme = call_580499.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580499.url(scheme.get, call_580499.host, call_580499.base,
                         call_580499.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580499, url, valid)

proc call*(call_580500: Call_DfareportingDirectorySitesGet_580487;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingDirectorySitesGet
  ## Gets one directory site by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Directory site ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580501 = newJObject()
  var query_580502 = newJObject()
  add(query_580502, "key", newJString(key))
  add(query_580502, "prettyPrint", newJBool(prettyPrint))
  add(query_580502, "oauth_token", newJString(oauthToken))
  add(path_580501, "profileId", newJString(profileId))
  add(path_580501, "id", newJString(id))
  add(query_580502, "alt", newJString(alt))
  add(query_580502, "userIp", newJString(userIp))
  add(query_580502, "quotaUser", newJString(quotaUser))
  add(query_580502, "fields", newJString(fields))
  result = call_580500.call(path_580501, query_580502, nil, nil, nil)

var dfareportingDirectorySitesGet* = Call_DfareportingDirectorySitesGet_580487(
    name: "dfareportingDirectorySitesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/directorySites/{id}",
    validator: validate_DfareportingDirectorySitesGet_580488,
    base: "/dfareporting/v3.1", url: url_DfareportingDirectorySitesGet_580489,
    schemes: {Scheme.Https})
type
  Call_DfareportingDynamicTargetingKeysInsert_580522 = ref object of OpenApiRestCall_578364
proc url_DfareportingDynamicTargetingKeysInsert_580524(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/dynamicTargetingKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDynamicTargetingKeysInsert_580523(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580525 = path.getOrDefault("profileId")
  valid_580525 = validateParameter(valid_580525, JString, required = true,
                                 default = nil)
  if valid_580525 != nil:
    section.add "profileId", valid_580525
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580526 = query.getOrDefault("key")
  valid_580526 = validateParameter(valid_580526, JString, required = false,
                                 default = nil)
  if valid_580526 != nil:
    section.add "key", valid_580526
  var valid_580527 = query.getOrDefault("prettyPrint")
  valid_580527 = validateParameter(valid_580527, JBool, required = false,
                                 default = newJBool(true))
  if valid_580527 != nil:
    section.add "prettyPrint", valid_580527
  var valid_580528 = query.getOrDefault("oauth_token")
  valid_580528 = validateParameter(valid_580528, JString, required = false,
                                 default = nil)
  if valid_580528 != nil:
    section.add "oauth_token", valid_580528
  var valid_580529 = query.getOrDefault("alt")
  valid_580529 = validateParameter(valid_580529, JString, required = false,
                                 default = newJString("json"))
  if valid_580529 != nil:
    section.add "alt", valid_580529
  var valid_580530 = query.getOrDefault("userIp")
  valid_580530 = validateParameter(valid_580530, JString, required = false,
                                 default = nil)
  if valid_580530 != nil:
    section.add "userIp", valid_580530
  var valid_580531 = query.getOrDefault("quotaUser")
  valid_580531 = validateParameter(valid_580531, JString, required = false,
                                 default = nil)
  if valid_580531 != nil:
    section.add "quotaUser", valid_580531
  var valid_580532 = query.getOrDefault("fields")
  valid_580532 = validateParameter(valid_580532, JString, required = false,
                                 default = nil)
  if valid_580532 != nil:
    section.add "fields", valid_580532
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580534: Call_DfareportingDynamicTargetingKeysInsert_580522;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.
  ## 
  let valid = call_580534.validator(path, query, header, formData, body)
  let scheme = call_580534.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580534.url(scheme.get, call_580534.host, call_580534.base,
                         call_580534.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580534, url, valid)

proc call*(call_580535: Call_DfareportingDynamicTargetingKeysInsert_580522;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingDynamicTargetingKeysInsert
  ## Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580536 = newJObject()
  var query_580537 = newJObject()
  var body_580538 = newJObject()
  add(query_580537, "key", newJString(key))
  add(query_580537, "prettyPrint", newJBool(prettyPrint))
  add(query_580537, "oauth_token", newJString(oauthToken))
  add(path_580536, "profileId", newJString(profileId))
  add(query_580537, "alt", newJString(alt))
  add(query_580537, "userIp", newJString(userIp))
  add(query_580537, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580538 = body
  add(query_580537, "fields", newJString(fields))
  result = call_580535.call(path_580536, query_580537, nil, nil, body_580538)

var dfareportingDynamicTargetingKeysInsert* = Call_DfareportingDynamicTargetingKeysInsert_580522(
    name: "dfareportingDynamicTargetingKeysInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/dynamicTargetingKeys",
    validator: validate_DfareportingDynamicTargetingKeysInsert_580523,
    base: "/dfareporting/v3.1", url: url_DfareportingDynamicTargetingKeysInsert_580524,
    schemes: {Scheme.Https})
type
  Call_DfareportingDynamicTargetingKeysList_580503 = ref object of OpenApiRestCall_578364
proc url_DfareportingDynamicTargetingKeysList_580505(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/dynamicTargetingKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDynamicTargetingKeysList_580504(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of dynamic targeting keys.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580506 = path.getOrDefault("profileId")
  valid_580506 = validateParameter(valid_580506, JString, required = true,
                                 default = nil)
  if valid_580506 != nil:
    section.add "profileId", valid_580506
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   names: JArray
  ##        : Select only dynamic targeting keys exactly matching these names.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   objectType: JString
  ##             : Select only dynamic targeting keys with this object type.
  ##   objectId: JString
  ##           : Select only dynamic targeting keys with this object ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   advertiserId: JString
  ##               : Select only dynamic targeting keys whose object has this advertiser ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580507 = query.getOrDefault("key")
  valid_580507 = validateParameter(valid_580507, JString, required = false,
                                 default = nil)
  if valid_580507 != nil:
    section.add "key", valid_580507
  var valid_580508 = query.getOrDefault("names")
  valid_580508 = validateParameter(valid_580508, JArray, required = false,
                                 default = nil)
  if valid_580508 != nil:
    section.add "names", valid_580508
  var valid_580509 = query.getOrDefault("prettyPrint")
  valid_580509 = validateParameter(valid_580509, JBool, required = false,
                                 default = newJBool(true))
  if valid_580509 != nil:
    section.add "prettyPrint", valid_580509
  var valid_580510 = query.getOrDefault("oauth_token")
  valid_580510 = validateParameter(valid_580510, JString, required = false,
                                 default = nil)
  if valid_580510 != nil:
    section.add "oauth_token", valid_580510
  var valid_580511 = query.getOrDefault("objectType")
  valid_580511 = validateParameter(valid_580511, JString, required = false,
                                 default = newJString("OBJECT_AD"))
  if valid_580511 != nil:
    section.add "objectType", valid_580511
  var valid_580512 = query.getOrDefault("objectId")
  valid_580512 = validateParameter(valid_580512, JString, required = false,
                                 default = nil)
  if valid_580512 != nil:
    section.add "objectId", valid_580512
  var valid_580513 = query.getOrDefault("alt")
  valid_580513 = validateParameter(valid_580513, JString, required = false,
                                 default = newJString("json"))
  if valid_580513 != nil:
    section.add "alt", valid_580513
  var valid_580514 = query.getOrDefault("userIp")
  valid_580514 = validateParameter(valid_580514, JString, required = false,
                                 default = nil)
  if valid_580514 != nil:
    section.add "userIp", valid_580514
  var valid_580515 = query.getOrDefault("quotaUser")
  valid_580515 = validateParameter(valid_580515, JString, required = false,
                                 default = nil)
  if valid_580515 != nil:
    section.add "quotaUser", valid_580515
  var valid_580516 = query.getOrDefault("advertiserId")
  valid_580516 = validateParameter(valid_580516, JString, required = false,
                                 default = nil)
  if valid_580516 != nil:
    section.add "advertiserId", valid_580516
  var valid_580517 = query.getOrDefault("fields")
  valid_580517 = validateParameter(valid_580517, JString, required = false,
                                 default = nil)
  if valid_580517 != nil:
    section.add "fields", valid_580517
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580518: Call_DfareportingDynamicTargetingKeysList_580503;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of dynamic targeting keys.
  ## 
  let valid = call_580518.validator(path, query, header, formData, body)
  let scheme = call_580518.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580518.url(scheme.get, call_580518.host, call_580518.base,
                         call_580518.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580518, url, valid)

proc call*(call_580519: Call_DfareportingDynamicTargetingKeysList_580503;
          profileId: string; key: string = ""; names: JsonNode = nil;
          prettyPrint: bool = true; oauthToken: string = "";
          objectType: string = "OBJECT_AD"; objectId: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; advertiserId: string = "";
          fields: string = ""): Recallable =
  ## dfareportingDynamicTargetingKeysList
  ## Retrieves a list of dynamic targeting keys.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   names: JArray
  ##        : Select only dynamic targeting keys exactly matching these names.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   objectType: string
  ##             : Select only dynamic targeting keys with this object type.
  ##   objectId: string
  ##           : Select only dynamic targeting keys with this object ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   advertiserId: string
  ##               : Select only dynamic targeting keys whose object has this advertiser ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580520 = newJObject()
  var query_580521 = newJObject()
  add(query_580521, "key", newJString(key))
  if names != nil:
    query_580521.add "names", names
  add(query_580521, "prettyPrint", newJBool(prettyPrint))
  add(query_580521, "oauth_token", newJString(oauthToken))
  add(query_580521, "objectType", newJString(objectType))
  add(query_580521, "objectId", newJString(objectId))
  add(path_580520, "profileId", newJString(profileId))
  add(query_580521, "alt", newJString(alt))
  add(query_580521, "userIp", newJString(userIp))
  add(query_580521, "quotaUser", newJString(quotaUser))
  add(query_580521, "advertiserId", newJString(advertiserId))
  add(query_580521, "fields", newJString(fields))
  result = call_580519.call(path_580520, query_580521, nil, nil, nil)

var dfareportingDynamicTargetingKeysList* = Call_DfareportingDynamicTargetingKeysList_580503(
    name: "dfareportingDynamicTargetingKeysList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/dynamicTargetingKeys",
    validator: validate_DfareportingDynamicTargetingKeysList_580504,
    base: "/dfareporting/v3.1", url: url_DfareportingDynamicTargetingKeysList_580505,
    schemes: {Scheme.Https})
type
  Call_DfareportingDynamicTargetingKeysDelete_580539 = ref object of OpenApiRestCall_578364
proc url_DfareportingDynamicTargetingKeysDelete_580541(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "objectId" in path, "`objectId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/dynamicTargetingKeys/"),
               (kind: VariableSegment, value: "objectId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDynamicTargetingKeysDelete_580540(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing dynamic targeting key.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   objectId: JString (required)
  ##           : ID of the object of this dynamic targeting key. This is a required field.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580542 = path.getOrDefault("profileId")
  valid_580542 = validateParameter(valid_580542, JString, required = true,
                                 default = nil)
  if valid_580542 != nil:
    section.add "profileId", valid_580542
  var valid_580543 = path.getOrDefault("objectId")
  valid_580543 = validateParameter(valid_580543, JString, required = true,
                                 default = nil)
  if valid_580543 != nil:
    section.add "objectId", valid_580543
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   objectType: JString (required)
  ##             : Type of the object of this dynamic targeting key. This is a required field.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   name: JString (required)
  ##       : Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long and cannot contain commas. All characters are converted to lowercase.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580544 = query.getOrDefault("key")
  valid_580544 = validateParameter(valid_580544, JString, required = false,
                                 default = nil)
  if valid_580544 != nil:
    section.add "key", valid_580544
  assert query != nil,
        "query argument is necessary due to required `objectType` field"
  var valid_580545 = query.getOrDefault("objectType")
  valid_580545 = validateParameter(valid_580545, JString, required = true,
                                 default = newJString("OBJECT_AD"))
  if valid_580545 != nil:
    section.add "objectType", valid_580545
  var valid_580546 = query.getOrDefault("prettyPrint")
  valid_580546 = validateParameter(valid_580546, JBool, required = false,
                                 default = newJBool(true))
  if valid_580546 != nil:
    section.add "prettyPrint", valid_580546
  var valid_580547 = query.getOrDefault("oauth_token")
  valid_580547 = validateParameter(valid_580547, JString, required = false,
                                 default = nil)
  if valid_580547 != nil:
    section.add "oauth_token", valid_580547
  var valid_580548 = query.getOrDefault("name")
  valid_580548 = validateParameter(valid_580548, JString, required = true,
                                 default = nil)
  if valid_580548 != nil:
    section.add "name", valid_580548
  var valid_580549 = query.getOrDefault("alt")
  valid_580549 = validateParameter(valid_580549, JString, required = false,
                                 default = newJString("json"))
  if valid_580549 != nil:
    section.add "alt", valid_580549
  var valid_580550 = query.getOrDefault("userIp")
  valid_580550 = validateParameter(valid_580550, JString, required = false,
                                 default = nil)
  if valid_580550 != nil:
    section.add "userIp", valid_580550
  var valid_580551 = query.getOrDefault("quotaUser")
  valid_580551 = validateParameter(valid_580551, JString, required = false,
                                 default = nil)
  if valid_580551 != nil:
    section.add "quotaUser", valid_580551
  var valid_580552 = query.getOrDefault("fields")
  valid_580552 = validateParameter(valid_580552, JString, required = false,
                                 default = nil)
  if valid_580552 != nil:
    section.add "fields", valid_580552
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580553: Call_DfareportingDynamicTargetingKeysDelete_580539;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing dynamic targeting key.
  ## 
  let valid = call_580553.validator(path, query, header, formData, body)
  let scheme = call_580553.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580553.url(scheme.get, call_580553.host, call_580553.base,
                         call_580553.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580553, url, valid)

proc call*(call_580554: Call_DfareportingDynamicTargetingKeysDelete_580539;
          name: string; profileId: string; objectId: string; key: string = "";
          objectType: string = "OBJECT_AD"; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingDynamicTargetingKeysDelete
  ## Deletes an existing dynamic targeting key.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   objectType: string (required)
  ##             : Type of the object of this dynamic targeting key. This is a required field.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   name: string (required)
  ##       : Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long and cannot contain commas. All characters are converted to lowercase.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   objectId: string (required)
  ##           : ID of the object of this dynamic targeting key. This is a required field.
  var path_580555 = newJObject()
  var query_580556 = newJObject()
  add(query_580556, "key", newJString(key))
  add(query_580556, "objectType", newJString(objectType))
  add(query_580556, "prettyPrint", newJBool(prettyPrint))
  add(query_580556, "oauth_token", newJString(oauthToken))
  add(query_580556, "name", newJString(name))
  add(path_580555, "profileId", newJString(profileId))
  add(query_580556, "alt", newJString(alt))
  add(query_580556, "userIp", newJString(userIp))
  add(query_580556, "quotaUser", newJString(quotaUser))
  add(query_580556, "fields", newJString(fields))
  add(path_580555, "objectId", newJString(objectId))
  result = call_580554.call(path_580555, query_580556, nil, nil, nil)

var dfareportingDynamicTargetingKeysDelete* = Call_DfareportingDynamicTargetingKeysDelete_580539(
    name: "dfareportingDynamicTargetingKeysDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/dynamicTargetingKeys/{objectId}",
    validator: validate_DfareportingDynamicTargetingKeysDelete_580540,
    base: "/dfareporting/v3.1", url: url_DfareportingDynamicTargetingKeysDelete_580541,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsUpdate_580582 = ref object of OpenApiRestCall_578364
proc url_DfareportingEventTagsUpdate_580584(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsUpdate_580583(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing event tag.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580585 = path.getOrDefault("profileId")
  valid_580585 = validateParameter(valid_580585, JString, required = true,
                                 default = nil)
  if valid_580585 != nil:
    section.add "profileId", valid_580585
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580586 = query.getOrDefault("key")
  valid_580586 = validateParameter(valid_580586, JString, required = false,
                                 default = nil)
  if valid_580586 != nil:
    section.add "key", valid_580586
  var valid_580587 = query.getOrDefault("prettyPrint")
  valid_580587 = validateParameter(valid_580587, JBool, required = false,
                                 default = newJBool(true))
  if valid_580587 != nil:
    section.add "prettyPrint", valid_580587
  var valid_580588 = query.getOrDefault("oauth_token")
  valid_580588 = validateParameter(valid_580588, JString, required = false,
                                 default = nil)
  if valid_580588 != nil:
    section.add "oauth_token", valid_580588
  var valid_580589 = query.getOrDefault("alt")
  valid_580589 = validateParameter(valid_580589, JString, required = false,
                                 default = newJString("json"))
  if valid_580589 != nil:
    section.add "alt", valid_580589
  var valid_580590 = query.getOrDefault("userIp")
  valid_580590 = validateParameter(valid_580590, JString, required = false,
                                 default = nil)
  if valid_580590 != nil:
    section.add "userIp", valid_580590
  var valid_580591 = query.getOrDefault("quotaUser")
  valid_580591 = validateParameter(valid_580591, JString, required = false,
                                 default = nil)
  if valid_580591 != nil:
    section.add "quotaUser", valid_580591
  var valid_580592 = query.getOrDefault("fields")
  valid_580592 = validateParameter(valid_580592, JString, required = false,
                                 default = nil)
  if valid_580592 != nil:
    section.add "fields", valid_580592
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580594: Call_DfareportingEventTagsUpdate_580582; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing event tag.
  ## 
  let valid = call_580594.validator(path, query, header, formData, body)
  let scheme = call_580594.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580594.url(scheme.get, call_580594.host, call_580594.base,
                         call_580594.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580594, url, valid)

proc call*(call_580595: Call_DfareportingEventTagsUpdate_580582; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingEventTagsUpdate
  ## Updates an existing event tag.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580596 = newJObject()
  var query_580597 = newJObject()
  var body_580598 = newJObject()
  add(query_580597, "key", newJString(key))
  add(query_580597, "prettyPrint", newJBool(prettyPrint))
  add(query_580597, "oauth_token", newJString(oauthToken))
  add(path_580596, "profileId", newJString(profileId))
  add(query_580597, "alt", newJString(alt))
  add(query_580597, "userIp", newJString(userIp))
  add(query_580597, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580598 = body
  add(query_580597, "fields", newJString(fields))
  result = call_580595.call(path_580596, query_580597, nil, nil, body_580598)

var dfareportingEventTagsUpdate* = Call_DfareportingEventTagsUpdate_580582(
    name: "dfareportingEventTagsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags",
    validator: validate_DfareportingEventTagsUpdate_580583,
    base: "/dfareporting/v3.1", url: url_DfareportingEventTagsUpdate_580584,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsInsert_580599 = ref object of OpenApiRestCall_578364
proc url_DfareportingEventTagsInsert_580601(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsInsert_580600(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new event tag.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580602 = path.getOrDefault("profileId")
  valid_580602 = validateParameter(valid_580602, JString, required = true,
                                 default = nil)
  if valid_580602 != nil:
    section.add "profileId", valid_580602
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580603 = query.getOrDefault("key")
  valid_580603 = validateParameter(valid_580603, JString, required = false,
                                 default = nil)
  if valid_580603 != nil:
    section.add "key", valid_580603
  var valid_580604 = query.getOrDefault("prettyPrint")
  valid_580604 = validateParameter(valid_580604, JBool, required = false,
                                 default = newJBool(true))
  if valid_580604 != nil:
    section.add "prettyPrint", valid_580604
  var valid_580605 = query.getOrDefault("oauth_token")
  valid_580605 = validateParameter(valid_580605, JString, required = false,
                                 default = nil)
  if valid_580605 != nil:
    section.add "oauth_token", valid_580605
  var valid_580606 = query.getOrDefault("alt")
  valid_580606 = validateParameter(valid_580606, JString, required = false,
                                 default = newJString("json"))
  if valid_580606 != nil:
    section.add "alt", valid_580606
  var valid_580607 = query.getOrDefault("userIp")
  valid_580607 = validateParameter(valid_580607, JString, required = false,
                                 default = nil)
  if valid_580607 != nil:
    section.add "userIp", valid_580607
  var valid_580608 = query.getOrDefault("quotaUser")
  valid_580608 = validateParameter(valid_580608, JString, required = false,
                                 default = nil)
  if valid_580608 != nil:
    section.add "quotaUser", valid_580608
  var valid_580609 = query.getOrDefault("fields")
  valid_580609 = validateParameter(valid_580609, JString, required = false,
                                 default = nil)
  if valid_580609 != nil:
    section.add "fields", valid_580609
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580611: Call_DfareportingEventTagsInsert_580599; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new event tag.
  ## 
  let valid = call_580611.validator(path, query, header, formData, body)
  let scheme = call_580611.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580611.url(scheme.get, call_580611.host, call_580611.base,
                         call_580611.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580611, url, valid)

proc call*(call_580612: Call_DfareportingEventTagsInsert_580599; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingEventTagsInsert
  ## Inserts a new event tag.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580613 = newJObject()
  var query_580614 = newJObject()
  var body_580615 = newJObject()
  add(query_580614, "key", newJString(key))
  add(query_580614, "prettyPrint", newJBool(prettyPrint))
  add(query_580614, "oauth_token", newJString(oauthToken))
  add(path_580613, "profileId", newJString(profileId))
  add(query_580614, "alt", newJString(alt))
  add(query_580614, "userIp", newJString(userIp))
  add(query_580614, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580615 = body
  add(query_580614, "fields", newJString(fields))
  result = call_580612.call(path_580613, query_580614, nil, nil, body_580615)

var dfareportingEventTagsInsert* = Call_DfareportingEventTagsInsert_580599(
    name: "dfareportingEventTagsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags",
    validator: validate_DfareportingEventTagsInsert_580600,
    base: "/dfareporting/v3.1", url: url_DfareportingEventTagsInsert_580601,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsList_580557 = ref object of OpenApiRestCall_578364
proc url_DfareportingEventTagsList_580559(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsList_580558(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of event tags, possibly filtered.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580560 = path.getOrDefault("profileId")
  valid_580560 = validateParameter(valid_580560, JString, required = true,
                                 default = nil)
  if valid_580560 != nil:
    section.add "profileId", valid_580560
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   adId: JString
  ##       : Select only event tags that belong to this ad.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   definitionsOnly: JBool
  ##                  : Examine only the specified campaign or advertiser's event tags for matching selector criteria. When set to false, the parent advertiser and parent campaign of the specified ad or campaign is examined as well. In addition, when set to false, the status field is examined as well, along with the enabledByDefault field. This parameter can not be set to true when adId is specified as ads do not define their own even tags.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   campaignId: JString
  ##             : Select only event tags that belong to this campaign.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "eventtag*2015" will return objects with names like "eventtag June 2015", "eventtag April 2015", or simply "eventtag 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "eventtag" will match objects with name "my eventtag", "eventtag 2015", or simply "eventtag".
  ##   eventTagTypes: JArray
  ##                : Select only event tags with the specified event tag types. Event tag types can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   advertiserId: JString
  ##               : Select only event tags that belong to this advertiser.
  ##   enabled: JBool
  ##          : Select only enabled event tags. What is considered enabled or disabled depends on the definitionsOnly parameter. When definitionsOnly is set to true, only the specified advertiser or campaign's event tags' enabledByDefault field is examined. When definitionsOnly is set to false, the specified ad or specified campaign's parent advertiser's or parent campaign's event tags' enabledByDefault and status fields are examined as well.
  ##   ids: JArray
  ##      : Select only event tags with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580561 = query.getOrDefault("key")
  valid_580561 = validateParameter(valid_580561, JString, required = false,
                                 default = nil)
  if valid_580561 != nil:
    section.add "key", valid_580561
  var valid_580562 = query.getOrDefault("prettyPrint")
  valid_580562 = validateParameter(valid_580562, JBool, required = false,
                                 default = newJBool(true))
  if valid_580562 != nil:
    section.add "prettyPrint", valid_580562
  var valid_580563 = query.getOrDefault("oauth_token")
  valid_580563 = validateParameter(valid_580563, JString, required = false,
                                 default = nil)
  if valid_580563 != nil:
    section.add "oauth_token", valid_580563
  var valid_580564 = query.getOrDefault("adId")
  valid_580564 = validateParameter(valid_580564, JString, required = false,
                                 default = nil)
  if valid_580564 != nil:
    section.add "adId", valid_580564
  var valid_580565 = query.getOrDefault("sortField")
  valid_580565 = validateParameter(valid_580565, JString, required = false,
                                 default = newJString("ID"))
  if valid_580565 != nil:
    section.add "sortField", valid_580565
  var valid_580566 = query.getOrDefault("alt")
  valid_580566 = validateParameter(valid_580566, JString, required = false,
                                 default = newJString("json"))
  if valid_580566 != nil:
    section.add "alt", valid_580566
  var valid_580567 = query.getOrDefault("userIp")
  valid_580567 = validateParameter(valid_580567, JString, required = false,
                                 default = nil)
  if valid_580567 != nil:
    section.add "userIp", valid_580567
  var valid_580568 = query.getOrDefault("definitionsOnly")
  valid_580568 = validateParameter(valid_580568, JBool, required = false, default = nil)
  if valid_580568 != nil:
    section.add "definitionsOnly", valid_580568
  var valid_580569 = query.getOrDefault("quotaUser")
  valid_580569 = validateParameter(valid_580569, JString, required = false,
                                 default = nil)
  if valid_580569 != nil:
    section.add "quotaUser", valid_580569
  var valid_580570 = query.getOrDefault("campaignId")
  valid_580570 = validateParameter(valid_580570, JString, required = false,
                                 default = nil)
  if valid_580570 != nil:
    section.add "campaignId", valid_580570
  var valid_580571 = query.getOrDefault("searchString")
  valid_580571 = validateParameter(valid_580571, JString, required = false,
                                 default = nil)
  if valid_580571 != nil:
    section.add "searchString", valid_580571
  var valid_580572 = query.getOrDefault("eventTagTypes")
  valid_580572 = validateParameter(valid_580572, JArray, required = false,
                                 default = nil)
  if valid_580572 != nil:
    section.add "eventTagTypes", valid_580572
  var valid_580573 = query.getOrDefault("sortOrder")
  valid_580573 = validateParameter(valid_580573, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580573 != nil:
    section.add "sortOrder", valid_580573
  var valid_580574 = query.getOrDefault("advertiserId")
  valid_580574 = validateParameter(valid_580574, JString, required = false,
                                 default = nil)
  if valid_580574 != nil:
    section.add "advertiserId", valid_580574
  var valid_580575 = query.getOrDefault("enabled")
  valid_580575 = validateParameter(valid_580575, JBool, required = false, default = nil)
  if valid_580575 != nil:
    section.add "enabled", valid_580575
  var valid_580576 = query.getOrDefault("ids")
  valid_580576 = validateParameter(valid_580576, JArray, required = false,
                                 default = nil)
  if valid_580576 != nil:
    section.add "ids", valid_580576
  var valid_580577 = query.getOrDefault("fields")
  valid_580577 = validateParameter(valid_580577, JString, required = false,
                                 default = nil)
  if valid_580577 != nil:
    section.add "fields", valid_580577
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580578: Call_DfareportingEventTagsList_580557; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of event tags, possibly filtered.
  ## 
  let valid = call_580578.validator(path, query, header, formData, body)
  let scheme = call_580578.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580578.url(scheme.get, call_580578.host, call_580578.base,
                         call_580578.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580578, url, valid)

proc call*(call_580579: Call_DfareportingEventTagsList_580557; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          adId: string = ""; sortField: string = "ID"; alt: string = "json";
          userIp: string = ""; definitionsOnly: bool = false; quotaUser: string = "";
          campaignId: string = ""; searchString: string = "";
          eventTagTypes: JsonNode = nil; sortOrder: string = "ASCENDING";
          advertiserId: string = ""; enabled: bool = false; ids: JsonNode = nil;
          fields: string = ""): Recallable =
  ## dfareportingEventTagsList
  ## Retrieves a list of event tags, possibly filtered.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   adId: string
  ##       : Select only event tags that belong to this ad.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   definitionsOnly: bool
  ##                  : Examine only the specified campaign or advertiser's event tags for matching selector criteria. When set to false, the parent advertiser and parent campaign of the specified ad or campaign is examined as well. In addition, when set to false, the status field is examined as well, along with the enabledByDefault field. This parameter can not be set to true when adId is specified as ads do not define their own even tags.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   campaignId: string
  ##             : Select only event tags that belong to this campaign.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "eventtag*2015" will return objects with names like "eventtag June 2015", "eventtag April 2015", or simply "eventtag 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "eventtag" will match objects with name "my eventtag", "eventtag 2015", or simply "eventtag".
  ##   eventTagTypes: JArray
  ##                : Select only event tags with the specified event tag types. Event tag types can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   advertiserId: string
  ##               : Select only event tags that belong to this advertiser.
  ##   enabled: bool
  ##          : Select only enabled event tags. What is considered enabled or disabled depends on the definitionsOnly parameter. When definitionsOnly is set to true, only the specified advertiser or campaign's event tags' enabledByDefault field is examined. When definitionsOnly is set to false, the specified ad or specified campaign's parent advertiser's or parent campaign's event tags' enabledByDefault and status fields are examined as well.
  ##   ids: JArray
  ##      : Select only event tags with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580580 = newJObject()
  var query_580581 = newJObject()
  add(query_580581, "key", newJString(key))
  add(query_580581, "prettyPrint", newJBool(prettyPrint))
  add(query_580581, "oauth_token", newJString(oauthToken))
  add(path_580580, "profileId", newJString(profileId))
  add(query_580581, "adId", newJString(adId))
  add(query_580581, "sortField", newJString(sortField))
  add(query_580581, "alt", newJString(alt))
  add(query_580581, "userIp", newJString(userIp))
  add(query_580581, "definitionsOnly", newJBool(definitionsOnly))
  add(query_580581, "quotaUser", newJString(quotaUser))
  add(query_580581, "campaignId", newJString(campaignId))
  add(query_580581, "searchString", newJString(searchString))
  if eventTagTypes != nil:
    query_580581.add "eventTagTypes", eventTagTypes
  add(query_580581, "sortOrder", newJString(sortOrder))
  add(query_580581, "advertiserId", newJString(advertiserId))
  add(query_580581, "enabled", newJBool(enabled))
  if ids != nil:
    query_580581.add "ids", ids
  add(query_580581, "fields", newJString(fields))
  result = call_580579.call(path_580580, query_580581, nil, nil, nil)

var dfareportingEventTagsList* = Call_DfareportingEventTagsList_580557(
    name: "dfareportingEventTagsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags",
    validator: validate_DfareportingEventTagsList_580558,
    base: "/dfareporting/v3.1", url: url_DfareportingEventTagsList_580559,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsPatch_580616 = ref object of OpenApiRestCall_578364
proc url_DfareportingEventTagsPatch_580618(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsPatch_580617(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing event tag. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580619 = path.getOrDefault("profileId")
  valid_580619 = validateParameter(valid_580619, JString, required = true,
                                 default = nil)
  if valid_580619 != nil:
    section.add "profileId", valid_580619
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Event tag ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580620 = query.getOrDefault("key")
  valid_580620 = validateParameter(valid_580620, JString, required = false,
                                 default = nil)
  if valid_580620 != nil:
    section.add "key", valid_580620
  var valid_580621 = query.getOrDefault("prettyPrint")
  valid_580621 = validateParameter(valid_580621, JBool, required = false,
                                 default = newJBool(true))
  if valid_580621 != nil:
    section.add "prettyPrint", valid_580621
  var valid_580622 = query.getOrDefault("oauth_token")
  valid_580622 = validateParameter(valid_580622, JString, required = false,
                                 default = nil)
  if valid_580622 != nil:
    section.add "oauth_token", valid_580622
  var valid_580623 = query.getOrDefault("alt")
  valid_580623 = validateParameter(valid_580623, JString, required = false,
                                 default = newJString("json"))
  if valid_580623 != nil:
    section.add "alt", valid_580623
  var valid_580624 = query.getOrDefault("userIp")
  valid_580624 = validateParameter(valid_580624, JString, required = false,
                                 default = nil)
  if valid_580624 != nil:
    section.add "userIp", valid_580624
  var valid_580625 = query.getOrDefault("quotaUser")
  valid_580625 = validateParameter(valid_580625, JString, required = false,
                                 default = nil)
  if valid_580625 != nil:
    section.add "quotaUser", valid_580625
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580626 = query.getOrDefault("id")
  valid_580626 = validateParameter(valid_580626, JString, required = true,
                                 default = nil)
  if valid_580626 != nil:
    section.add "id", valid_580626
  var valid_580627 = query.getOrDefault("fields")
  valid_580627 = validateParameter(valid_580627, JString, required = false,
                                 default = nil)
  if valid_580627 != nil:
    section.add "fields", valid_580627
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580629: Call_DfareportingEventTagsPatch_580616; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing event tag. This method supports patch semantics.
  ## 
  let valid = call_580629.validator(path, query, header, formData, body)
  let scheme = call_580629.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580629.url(scheme.get, call_580629.host, call_580629.base,
                         call_580629.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580629, url, valid)

proc call*(call_580630: Call_DfareportingEventTagsPatch_580616; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingEventTagsPatch
  ## Updates an existing event tag. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Event tag ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580631 = newJObject()
  var query_580632 = newJObject()
  var body_580633 = newJObject()
  add(query_580632, "key", newJString(key))
  add(query_580632, "prettyPrint", newJBool(prettyPrint))
  add(query_580632, "oauth_token", newJString(oauthToken))
  add(path_580631, "profileId", newJString(profileId))
  add(query_580632, "alt", newJString(alt))
  add(query_580632, "userIp", newJString(userIp))
  add(query_580632, "quotaUser", newJString(quotaUser))
  add(query_580632, "id", newJString(id))
  if body != nil:
    body_580633 = body
  add(query_580632, "fields", newJString(fields))
  result = call_580630.call(path_580631, query_580632, nil, nil, body_580633)

var dfareportingEventTagsPatch* = Call_DfareportingEventTagsPatch_580616(
    name: "dfareportingEventTagsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags",
    validator: validate_DfareportingEventTagsPatch_580617,
    base: "/dfareporting/v3.1", url: url_DfareportingEventTagsPatch_580618,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsGet_580634 = ref object of OpenApiRestCall_578364
proc url_DfareportingEventTagsGet_580636(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsGet_580635(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one event tag by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Event tag ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580637 = path.getOrDefault("profileId")
  valid_580637 = validateParameter(valid_580637, JString, required = true,
                                 default = nil)
  if valid_580637 != nil:
    section.add "profileId", valid_580637
  var valid_580638 = path.getOrDefault("id")
  valid_580638 = validateParameter(valid_580638, JString, required = true,
                                 default = nil)
  if valid_580638 != nil:
    section.add "id", valid_580638
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580639 = query.getOrDefault("key")
  valid_580639 = validateParameter(valid_580639, JString, required = false,
                                 default = nil)
  if valid_580639 != nil:
    section.add "key", valid_580639
  var valid_580640 = query.getOrDefault("prettyPrint")
  valid_580640 = validateParameter(valid_580640, JBool, required = false,
                                 default = newJBool(true))
  if valid_580640 != nil:
    section.add "prettyPrint", valid_580640
  var valid_580641 = query.getOrDefault("oauth_token")
  valid_580641 = validateParameter(valid_580641, JString, required = false,
                                 default = nil)
  if valid_580641 != nil:
    section.add "oauth_token", valid_580641
  var valid_580642 = query.getOrDefault("alt")
  valid_580642 = validateParameter(valid_580642, JString, required = false,
                                 default = newJString("json"))
  if valid_580642 != nil:
    section.add "alt", valid_580642
  var valid_580643 = query.getOrDefault("userIp")
  valid_580643 = validateParameter(valid_580643, JString, required = false,
                                 default = nil)
  if valid_580643 != nil:
    section.add "userIp", valid_580643
  var valid_580644 = query.getOrDefault("quotaUser")
  valid_580644 = validateParameter(valid_580644, JString, required = false,
                                 default = nil)
  if valid_580644 != nil:
    section.add "quotaUser", valid_580644
  var valid_580645 = query.getOrDefault("fields")
  valid_580645 = validateParameter(valid_580645, JString, required = false,
                                 default = nil)
  if valid_580645 != nil:
    section.add "fields", valid_580645
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580646: Call_DfareportingEventTagsGet_580634; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one event tag by ID.
  ## 
  let valid = call_580646.validator(path, query, header, formData, body)
  let scheme = call_580646.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580646.url(scheme.get, call_580646.host, call_580646.base,
                         call_580646.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580646, url, valid)

proc call*(call_580647: Call_DfareportingEventTagsGet_580634; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingEventTagsGet
  ## Gets one event tag by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Event tag ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580648 = newJObject()
  var query_580649 = newJObject()
  add(query_580649, "key", newJString(key))
  add(query_580649, "prettyPrint", newJBool(prettyPrint))
  add(query_580649, "oauth_token", newJString(oauthToken))
  add(path_580648, "profileId", newJString(profileId))
  add(path_580648, "id", newJString(id))
  add(query_580649, "alt", newJString(alt))
  add(query_580649, "userIp", newJString(userIp))
  add(query_580649, "quotaUser", newJString(quotaUser))
  add(query_580649, "fields", newJString(fields))
  result = call_580647.call(path_580648, query_580649, nil, nil, nil)

var dfareportingEventTagsGet* = Call_DfareportingEventTagsGet_580634(
    name: "dfareportingEventTagsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags/{id}",
    validator: validate_DfareportingEventTagsGet_580635,
    base: "/dfareporting/v3.1", url: url_DfareportingEventTagsGet_580636,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsDelete_580650 = ref object of OpenApiRestCall_578364
proc url_DfareportingEventTagsDelete_580652(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsDelete_580651(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing event tag.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Event tag ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580653 = path.getOrDefault("profileId")
  valid_580653 = validateParameter(valid_580653, JString, required = true,
                                 default = nil)
  if valid_580653 != nil:
    section.add "profileId", valid_580653
  var valid_580654 = path.getOrDefault("id")
  valid_580654 = validateParameter(valid_580654, JString, required = true,
                                 default = nil)
  if valid_580654 != nil:
    section.add "id", valid_580654
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580655 = query.getOrDefault("key")
  valid_580655 = validateParameter(valid_580655, JString, required = false,
                                 default = nil)
  if valid_580655 != nil:
    section.add "key", valid_580655
  var valid_580656 = query.getOrDefault("prettyPrint")
  valid_580656 = validateParameter(valid_580656, JBool, required = false,
                                 default = newJBool(true))
  if valid_580656 != nil:
    section.add "prettyPrint", valid_580656
  var valid_580657 = query.getOrDefault("oauth_token")
  valid_580657 = validateParameter(valid_580657, JString, required = false,
                                 default = nil)
  if valid_580657 != nil:
    section.add "oauth_token", valid_580657
  var valid_580658 = query.getOrDefault("alt")
  valid_580658 = validateParameter(valid_580658, JString, required = false,
                                 default = newJString("json"))
  if valid_580658 != nil:
    section.add "alt", valid_580658
  var valid_580659 = query.getOrDefault("userIp")
  valid_580659 = validateParameter(valid_580659, JString, required = false,
                                 default = nil)
  if valid_580659 != nil:
    section.add "userIp", valid_580659
  var valid_580660 = query.getOrDefault("quotaUser")
  valid_580660 = validateParameter(valid_580660, JString, required = false,
                                 default = nil)
  if valid_580660 != nil:
    section.add "quotaUser", valid_580660
  var valid_580661 = query.getOrDefault("fields")
  valid_580661 = validateParameter(valid_580661, JString, required = false,
                                 default = nil)
  if valid_580661 != nil:
    section.add "fields", valid_580661
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580662: Call_DfareportingEventTagsDelete_580650; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing event tag.
  ## 
  let valid = call_580662.validator(path, query, header, formData, body)
  let scheme = call_580662.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580662.url(scheme.get, call_580662.host, call_580662.base,
                         call_580662.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580662, url, valid)

proc call*(call_580663: Call_DfareportingEventTagsDelete_580650; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingEventTagsDelete
  ## Deletes an existing event tag.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Event tag ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580664 = newJObject()
  var query_580665 = newJObject()
  add(query_580665, "key", newJString(key))
  add(query_580665, "prettyPrint", newJBool(prettyPrint))
  add(query_580665, "oauth_token", newJString(oauthToken))
  add(path_580664, "profileId", newJString(profileId))
  add(path_580664, "id", newJString(id))
  add(query_580665, "alt", newJString(alt))
  add(query_580665, "userIp", newJString(userIp))
  add(query_580665, "quotaUser", newJString(quotaUser))
  add(query_580665, "fields", newJString(fields))
  result = call_580663.call(path_580664, query_580665, nil, nil, nil)

var dfareportingEventTagsDelete* = Call_DfareportingEventTagsDelete_580650(
    name: "dfareportingEventTagsDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags/{id}",
    validator: validate_DfareportingEventTagsDelete_580651,
    base: "/dfareporting/v3.1", url: url_DfareportingEventTagsDelete_580652,
    schemes: {Scheme.Https})
type
  Call_DfareportingFilesList_580666 = ref object of OpenApiRestCall_578364
proc url_DfareportingFilesList_580668(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/files")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFilesList_580667(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists files for a user profile.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580669 = path.getOrDefault("profileId")
  valid_580669 = validateParameter(valid_580669, JString, required = true,
                                 default = nil)
  if valid_580669 != nil:
    section.add "profileId", valid_580669
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   scope: JString
  ##        : The scope that defines which results are returned.
  ##   sortField: JString
  ##            : The field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : The value of the nextToken from the previous result page.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_580670 = query.getOrDefault("key")
  valid_580670 = validateParameter(valid_580670, JString, required = false,
                                 default = nil)
  if valid_580670 != nil:
    section.add "key", valid_580670
  var valid_580671 = query.getOrDefault("prettyPrint")
  valid_580671 = validateParameter(valid_580671, JBool, required = false,
                                 default = newJBool(true))
  if valid_580671 != nil:
    section.add "prettyPrint", valid_580671
  var valid_580672 = query.getOrDefault("oauth_token")
  valid_580672 = validateParameter(valid_580672, JString, required = false,
                                 default = nil)
  if valid_580672 != nil:
    section.add "oauth_token", valid_580672
  var valid_580673 = query.getOrDefault("scope")
  valid_580673 = validateParameter(valid_580673, JString, required = false,
                                 default = newJString("MINE"))
  if valid_580673 != nil:
    section.add "scope", valid_580673
  var valid_580674 = query.getOrDefault("sortField")
  valid_580674 = validateParameter(valid_580674, JString, required = false,
                                 default = newJString("LAST_MODIFIED_TIME"))
  if valid_580674 != nil:
    section.add "sortField", valid_580674
  var valid_580675 = query.getOrDefault("alt")
  valid_580675 = validateParameter(valid_580675, JString, required = false,
                                 default = newJString("json"))
  if valid_580675 != nil:
    section.add "alt", valid_580675
  var valid_580676 = query.getOrDefault("userIp")
  valid_580676 = validateParameter(valid_580676, JString, required = false,
                                 default = nil)
  if valid_580676 != nil:
    section.add "userIp", valid_580676
  var valid_580677 = query.getOrDefault("quotaUser")
  valid_580677 = validateParameter(valid_580677, JString, required = false,
                                 default = nil)
  if valid_580677 != nil:
    section.add "quotaUser", valid_580677
  var valid_580678 = query.getOrDefault("pageToken")
  valid_580678 = validateParameter(valid_580678, JString, required = false,
                                 default = nil)
  if valid_580678 != nil:
    section.add "pageToken", valid_580678
  var valid_580679 = query.getOrDefault("sortOrder")
  valid_580679 = validateParameter(valid_580679, JString, required = false,
                                 default = newJString("DESCENDING"))
  if valid_580679 != nil:
    section.add "sortOrder", valid_580679
  var valid_580680 = query.getOrDefault("fields")
  valid_580680 = validateParameter(valid_580680, JString, required = false,
                                 default = nil)
  if valid_580680 != nil:
    section.add "fields", valid_580680
  var valid_580681 = query.getOrDefault("maxResults")
  valid_580681 = validateParameter(valid_580681, JInt, required = false,
                                 default = newJInt(10))
  if valid_580681 != nil:
    section.add "maxResults", valid_580681
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580682: Call_DfareportingFilesList_580666; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists files for a user profile.
  ## 
  let valid = call_580682.validator(path, query, header, formData, body)
  let scheme = call_580682.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580682.url(scheme.get, call_580682.host, call_580682.base,
                         call_580682.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580682, url, valid)

proc call*(call_580683: Call_DfareportingFilesList_580666; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          scope: string = "MINE"; sortField: string = "LAST_MODIFIED_TIME";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          pageToken: string = ""; sortOrder: string = "DESCENDING"; fields: string = "";
          maxResults: int = 10): Recallable =
  ## dfareportingFilesList
  ## Lists files for a user profile.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   scope: string
  ##        : The scope that defines which results are returned.
  ##   profileId: string (required)
  ##            : The DFA profile ID.
  ##   sortField: string
  ##            : The field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : The value of the nextToken from the previous result page.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_580684 = newJObject()
  var query_580685 = newJObject()
  add(query_580685, "key", newJString(key))
  add(query_580685, "prettyPrint", newJBool(prettyPrint))
  add(query_580685, "oauth_token", newJString(oauthToken))
  add(query_580685, "scope", newJString(scope))
  add(path_580684, "profileId", newJString(profileId))
  add(query_580685, "sortField", newJString(sortField))
  add(query_580685, "alt", newJString(alt))
  add(query_580685, "userIp", newJString(userIp))
  add(query_580685, "quotaUser", newJString(quotaUser))
  add(query_580685, "pageToken", newJString(pageToken))
  add(query_580685, "sortOrder", newJString(sortOrder))
  add(query_580685, "fields", newJString(fields))
  add(query_580685, "maxResults", newJInt(maxResults))
  result = call_580683.call(path_580684, query_580685, nil, nil, nil)

var dfareportingFilesList* = Call_DfareportingFilesList_580666(
    name: "dfareportingFilesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/files",
    validator: validate_DfareportingFilesList_580667, base: "/dfareporting/v3.1",
    url: url_DfareportingFilesList_580668, schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesUpdate_580714 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivitiesUpdate_580716(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesUpdate_580715(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight activity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580717 = path.getOrDefault("profileId")
  valid_580717 = validateParameter(valid_580717, JString, required = true,
                                 default = nil)
  if valid_580717 != nil:
    section.add "profileId", valid_580717
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580718 = query.getOrDefault("key")
  valid_580718 = validateParameter(valid_580718, JString, required = false,
                                 default = nil)
  if valid_580718 != nil:
    section.add "key", valid_580718
  var valid_580719 = query.getOrDefault("prettyPrint")
  valid_580719 = validateParameter(valid_580719, JBool, required = false,
                                 default = newJBool(true))
  if valid_580719 != nil:
    section.add "prettyPrint", valid_580719
  var valid_580720 = query.getOrDefault("oauth_token")
  valid_580720 = validateParameter(valid_580720, JString, required = false,
                                 default = nil)
  if valid_580720 != nil:
    section.add "oauth_token", valid_580720
  var valid_580721 = query.getOrDefault("alt")
  valid_580721 = validateParameter(valid_580721, JString, required = false,
                                 default = newJString("json"))
  if valid_580721 != nil:
    section.add "alt", valid_580721
  var valid_580722 = query.getOrDefault("userIp")
  valid_580722 = validateParameter(valid_580722, JString, required = false,
                                 default = nil)
  if valid_580722 != nil:
    section.add "userIp", valid_580722
  var valid_580723 = query.getOrDefault("quotaUser")
  valid_580723 = validateParameter(valid_580723, JString, required = false,
                                 default = nil)
  if valid_580723 != nil:
    section.add "quotaUser", valid_580723
  var valid_580724 = query.getOrDefault("fields")
  valid_580724 = validateParameter(valid_580724, JString, required = false,
                                 default = nil)
  if valid_580724 != nil:
    section.add "fields", valid_580724
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580726: Call_DfareportingFloodlightActivitiesUpdate_580714;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight activity.
  ## 
  let valid = call_580726.validator(path, query, header, formData, body)
  let scheme = call_580726.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580726.url(scheme.get, call_580726.host, call_580726.base,
                         call_580726.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580726, url, valid)

proc call*(call_580727: Call_DfareportingFloodlightActivitiesUpdate_580714;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingFloodlightActivitiesUpdate
  ## Updates an existing floodlight activity.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580728 = newJObject()
  var query_580729 = newJObject()
  var body_580730 = newJObject()
  add(query_580729, "key", newJString(key))
  add(query_580729, "prettyPrint", newJBool(prettyPrint))
  add(query_580729, "oauth_token", newJString(oauthToken))
  add(path_580728, "profileId", newJString(profileId))
  add(query_580729, "alt", newJString(alt))
  add(query_580729, "userIp", newJString(userIp))
  add(query_580729, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580730 = body
  add(query_580729, "fields", newJString(fields))
  result = call_580727.call(path_580728, query_580729, nil, nil, body_580730)

var dfareportingFloodlightActivitiesUpdate* = Call_DfareportingFloodlightActivitiesUpdate_580714(
    name: "dfareportingFloodlightActivitiesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities",
    validator: validate_DfareportingFloodlightActivitiesUpdate_580715,
    base: "/dfareporting/v3.1", url: url_DfareportingFloodlightActivitiesUpdate_580716,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesInsert_580731 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivitiesInsert_580733(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesInsert_580732(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new floodlight activity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580734 = path.getOrDefault("profileId")
  valid_580734 = validateParameter(valid_580734, JString, required = true,
                                 default = nil)
  if valid_580734 != nil:
    section.add "profileId", valid_580734
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580735 = query.getOrDefault("key")
  valid_580735 = validateParameter(valid_580735, JString, required = false,
                                 default = nil)
  if valid_580735 != nil:
    section.add "key", valid_580735
  var valid_580736 = query.getOrDefault("prettyPrint")
  valid_580736 = validateParameter(valid_580736, JBool, required = false,
                                 default = newJBool(true))
  if valid_580736 != nil:
    section.add "prettyPrint", valid_580736
  var valid_580737 = query.getOrDefault("oauth_token")
  valid_580737 = validateParameter(valid_580737, JString, required = false,
                                 default = nil)
  if valid_580737 != nil:
    section.add "oauth_token", valid_580737
  var valid_580738 = query.getOrDefault("alt")
  valid_580738 = validateParameter(valid_580738, JString, required = false,
                                 default = newJString("json"))
  if valid_580738 != nil:
    section.add "alt", valid_580738
  var valid_580739 = query.getOrDefault("userIp")
  valid_580739 = validateParameter(valid_580739, JString, required = false,
                                 default = nil)
  if valid_580739 != nil:
    section.add "userIp", valid_580739
  var valid_580740 = query.getOrDefault("quotaUser")
  valid_580740 = validateParameter(valid_580740, JString, required = false,
                                 default = nil)
  if valid_580740 != nil:
    section.add "quotaUser", valid_580740
  var valid_580741 = query.getOrDefault("fields")
  valid_580741 = validateParameter(valid_580741, JString, required = false,
                                 default = nil)
  if valid_580741 != nil:
    section.add "fields", valid_580741
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580743: Call_DfareportingFloodlightActivitiesInsert_580731;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new floodlight activity.
  ## 
  let valid = call_580743.validator(path, query, header, formData, body)
  let scheme = call_580743.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580743.url(scheme.get, call_580743.host, call_580743.base,
                         call_580743.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580743, url, valid)

proc call*(call_580744: Call_DfareportingFloodlightActivitiesInsert_580731;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingFloodlightActivitiesInsert
  ## Inserts a new floodlight activity.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580745 = newJObject()
  var query_580746 = newJObject()
  var body_580747 = newJObject()
  add(query_580746, "key", newJString(key))
  add(query_580746, "prettyPrint", newJBool(prettyPrint))
  add(query_580746, "oauth_token", newJString(oauthToken))
  add(path_580745, "profileId", newJString(profileId))
  add(query_580746, "alt", newJString(alt))
  add(query_580746, "userIp", newJString(userIp))
  add(query_580746, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580747 = body
  add(query_580746, "fields", newJString(fields))
  result = call_580744.call(path_580745, query_580746, nil, nil, body_580747)

var dfareportingFloodlightActivitiesInsert* = Call_DfareportingFloodlightActivitiesInsert_580731(
    name: "dfareportingFloodlightActivitiesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities",
    validator: validate_DfareportingFloodlightActivitiesInsert_580732,
    base: "/dfareporting/v3.1", url: url_DfareportingFloodlightActivitiesInsert_580733,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesList_580686 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivitiesList_580688(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesList_580687(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of floodlight activities, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580689 = path.getOrDefault("profileId")
  valid_580689 = validateParameter(valid_580689, JString, required = true,
                                 default = nil)
  if valid_580689 != nil:
    section.add "profileId", valid_580689
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   floodlightActivityGroupName: JString
  ##                              : Select only floodlight activities with the specified floodlight activity group name.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   floodlightActivityGroupType: JString
  ##                              : Select only floodlight activities with the specified floodlight activity group type.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   floodlightActivityGroupIds: JArray
  ##                             : Select only floodlight activities with the specified floodlight activity group IDs.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivity*2015" will return objects with names like "floodlightactivity June 2015", "floodlightactivity April 2015", or simply "floodlightactivity 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivity" will match objects with name "my floodlightactivity activity", "floodlightactivity 2015", or simply "floodlightactivity".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   floodlightConfigurationId: JString
  ##                            : Select only floodlight activities for the specified floodlight configuration ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   advertiserId: JString
  ##               : Select only floodlight activities for the specified advertiser ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   tagString: JString
  ##            : Select only floodlight activities with the specified tag string.
  ##   floodlightActivityGroupTagString: JString
  ##                                   : Select only floodlight activities with the specified floodlight activity group tag string.
  ##   ids: JArray
  ##      : Select only floodlight activities with the specified IDs. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_580690 = query.getOrDefault("key")
  valid_580690 = validateParameter(valid_580690, JString, required = false,
                                 default = nil)
  if valid_580690 != nil:
    section.add "key", valid_580690
  var valid_580691 = query.getOrDefault("prettyPrint")
  valid_580691 = validateParameter(valid_580691, JBool, required = false,
                                 default = newJBool(true))
  if valid_580691 != nil:
    section.add "prettyPrint", valid_580691
  var valid_580692 = query.getOrDefault("oauth_token")
  valid_580692 = validateParameter(valid_580692, JString, required = false,
                                 default = nil)
  if valid_580692 != nil:
    section.add "oauth_token", valid_580692
  var valid_580693 = query.getOrDefault("floodlightActivityGroupName")
  valid_580693 = validateParameter(valid_580693, JString, required = false,
                                 default = nil)
  if valid_580693 != nil:
    section.add "floodlightActivityGroupName", valid_580693
  var valid_580694 = query.getOrDefault("sortField")
  valid_580694 = validateParameter(valid_580694, JString, required = false,
                                 default = newJString("ID"))
  if valid_580694 != nil:
    section.add "sortField", valid_580694
  var valid_580695 = query.getOrDefault("floodlightActivityGroupType")
  valid_580695 = validateParameter(valid_580695, JString, required = false,
                                 default = newJString("COUNTER"))
  if valid_580695 != nil:
    section.add "floodlightActivityGroupType", valid_580695
  var valid_580696 = query.getOrDefault("alt")
  valid_580696 = validateParameter(valid_580696, JString, required = false,
                                 default = newJString("json"))
  if valid_580696 != nil:
    section.add "alt", valid_580696
  var valid_580697 = query.getOrDefault("userIp")
  valid_580697 = validateParameter(valid_580697, JString, required = false,
                                 default = nil)
  if valid_580697 != nil:
    section.add "userIp", valid_580697
  var valid_580698 = query.getOrDefault("quotaUser")
  valid_580698 = validateParameter(valid_580698, JString, required = false,
                                 default = nil)
  if valid_580698 != nil:
    section.add "quotaUser", valid_580698
  var valid_580699 = query.getOrDefault("floodlightActivityGroupIds")
  valid_580699 = validateParameter(valid_580699, JArray, required = false,
                                 default = nil)
  if valid_580699 != nil:
    section.add "floodlightActivityGroupIds", valid_580699
  var valid_580700 = query.getOrDefault("pageToken")
  valid_580700 = validateParameter(valid_580700, JString, required = false,
                                 default = nil)
  if valid_580700 != nil:
    section.add "pageToken", valid_580700
  var valid_580701 = query.getOrDefault("searchString")
  valid_580701 = validateParameter(valid_580701, JString, required = false,
                                 default = nil)
  if valid_580701 != nil:
    section.add "searchString", valid_580701
  var valid_580702 = query.getOrDefault("sortOrder")
  valid_580702 = validateParameter(valid_580702, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580702 != nil:
    section.add "sortOrder", valid_580702
  var valid_580703 = query.getOrDefault("floodlightConfigurationId")
  valid_580703 = validateParameter(valid_580703, JString, required = false,
                                 default = nil)
  if valid_580703 != nil:
    section.add "floodlightConfigurationId", valid_580703
  var valid_580704 = query.getOrDefault("advertiserId")
  valid_580704 = validateParameter(valid_580704, JString, required = false,
                                 default = nil)
  if valid_580704 != nil:
    section.add "advertiserId", valid_580704
  var valid_580705 = query.getOrDefault("tagString")
  valid_580705 = validateParameter(valid_580705, JString, required = false,
                                 default = nil)
  if valid_580705 != nil:
    section.add "tagString", valid_580705
  var valid_580706 = query.getOrDefault("floodlightActivityGroupTagString")
  valid_580706 = validateParameter(valid_580706, JString, required = false,
                                 default = nil)
  if valid_580706 != nil:
    section.add "floodlightActivityGroupTagString", valid_580706
  var valid_580707 = query.getOrDefault("ids")
  valid_580707 = validateParameter(valid_580707, JArray, required = false,
                                 default = nil)
  if valid_580707 != nil:
    section.add "ids", valid_580707
  var valid_580708 = query.getOrDefault("fields")
  valid_580708 = validateParameter(valid_580708, JString, required = false,
                                 default = nil)
  if valid_580708 != nil:
    section.add "fields", valid_580708
  var valid_580709 = query.getOrDefault("maxResults")
  valid_580709 = validateParameter(valid_580709, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580709 != nil:
    section.add "maxResults", valid_580709
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580710: Call_DfareportingFloodlightActivitiesList_580686;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of floodlight activities, possibly filtered. This method supports paging.
  ## 
  let valid = call_580710.validator(path, query, header, formData, body)
  let scheme = call_580710.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580710.url(scheme.get, call_580710.host, call_580710.base,
                         call_580710.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580710, url, valid)

proc call*(call_580711: Call_DfareportingFloodlightActivitiesList_580686;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; floodlightActivityGroupName: string = "";
          sortField: string = "ID"; floodlightActivityGroupType: string = "COUNTER";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          floodlightActivityGroupIds: JsonNode = nil; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          floodlightConfigurationId: string = ""; advertiserId: string = "";
          tagString: string = ""; floodlightActivityGroupTagString: string = "";
          ids: JsonNode = nil; fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingFloodlightActivitiesList
  ## Retrieves a list of floodlight activities, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   floodlightActivityGroupName: string
  ##                              : Select only floodlight activities with the specified floodlight activity group name.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   floodlightActivityGroupType: string
  ##                              : Select only floodlight activities with the specified floodlight activity group type.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   floodlightActivityGroupIds: JArray
  ##                             : Select only floodlight activities with the specified floodlight activity group IDs.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivity*2015" will return objects with names like "floodlightactivity June 2015", "floodlightactivity April 2015", or simply "floodlightactivity 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivity" will match objects with name "my floodlightactivity activity", "floodlightactivity 2015", or simply "floodlightactivity".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   floodlightConfigurationId: string
  ##                            : Select only floodlight activities for the specified floodlight configuration ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   advertiserId: string
  ##               : Select only floodlight activities for the specified advertiser ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   tagString: string
  ##            : Select only floodlight activities with the specified tag string.
  ##   floodlightActivityGroupTagString: string
  ##                                   : Select only floodlight activities with the specified floodlight activity group tag string.
  ##   ids: JArray
  ##      : Select only floodlight activities with the specified IDs. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_580712 = newJObject()
  var query_580713 = newJObject()
  add(query_580713, "key", newJString(key))
  add(query_580713, "prettyPrint", newJBool(prettyPrint))
  add(query_580713, "oauth_token", newJString(oauthToken))
  add(query_580713, "floodlightActivityGroupName",
      newJString(floodlightActivityGroupName))
  add(path_580712, "profileId", newJString(profileId))
  add(query_580713, "sortField", newJString(sortField))
  add(query_580713, "floodlightActivityGroupType",
      newJString(floodlightActivityGroupType))
  add(query_580713, "alt", newJString(alt))
  add(query_580713, "userIp", newJString(userIp))
  add(query_580713, "quotaUser", newJString(quotaUser))
  if floodlightActivityGroupIds != nil:
    query_580713.add "floodlightActivityGroupIds", floodlightActivityGroupIds
  add(query_580713, "pageToken", newJString(pageToken))
  add(query_580713, "searchString", newJString(searchString))
  add(query_580713, "sortOrder", newJString(sortOrder))
  add(query_580713, "floodlightConfigurationId",
      newJString(floodlightConfigurationId))
  add(query_580713, "advertiserId", newJString(advertiserId))
  add(query_580713, "tagString", newJString(tagString))
  add(query_580713, "floodlightActivityGroupTagString",
      newJString(floodlightActivityGroupTagString))
  if ids != nil:
    query_580713.add "ids", ids
  add(query_580713, "fields", newJString(fields))
  add(query_580713, "maxResults", newJInt(maxResults))
  result = call_580711.call(path_580712, query_580713, nil, nil, nil)

var dfareportingFloodlightActivitiesList* = Call_DfareportingFloodlightActivitiesList_580686(
    name: "dfareportingFloodlightActivitiesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities",
    validator: validate_DfareportingFloodlightActivitiesList_580687,
    base: "/dfareporting/v3.1", url: url_DfareportingFloodlightActivitiesList_580688,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesPatch_580748 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivitiesPatch_580750(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesPatch_580749(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight activity. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580751 = path.getOrDefault("profileId")
  valid_580751 = validateParameter(valid_580751, JString, required = true,
                                 default = nil)
  if valid_580751 != nil:
    section.add "profileId", valid_580751
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Floodlight activity ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580752 = query.getOrDefault("key")
  valid_580752 = validateParameter(valid_580752, JString, required = false,
                                 default = nil)
  if valid_580752 != nil:
    section.add "key", valid_580752
  var valid_580753 = query.getOrDefault("prettyPrint")
  valid_580753 = validateParameter(valid_580753, JBool, required = false,
                                 default = newJBool(true))
  if valid_580753 != nil:
    section.add "prettyPrint", valid_580753
  var valid_580754 = query.getOrDefault("oauth_token")
  valid_580754 = validateParameter(valid_580754, JString, required = false,
                                 default = nil)
  if valid_580754 != nil:
    section.add "oauth_token", valid_580754
  var valid_580755 = query.getOrDefault("alt")
  valid_580755 = validateParameter(valid_580755, JString, required = false,
                                 default = newJString("json"))
  if valid_580755 != nil:
    section.add "alt", valid_580755
  var valid_580756 = query.getOrDefault("userIp")
  valid_580756 = validateParameter(valid_580756, JString, required = false,
                                 default = nil)
  if valid_580756 != nil:
    section.add "userIp", valid_580756
  var valid_580757 = query.getOrDefault("quotaUser")
  valid_580757 = validateParameter(valid_580757, JString, required = false,
                                 default = nil)
  if valid_580757 != nil:
    section.add "quotaUser", valid_580757
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580758 = query.getOrDefault("id")
  valid_580758 = validateParameter(valid_580758, JString, required = true,
                                 default = nil)
  if valid_580758 != nil:
    section.add "id", valid_580758
  var valid_580759 = query.getOrDefault("fields")
  valid_580759 = validateParameter(valid_580759, JString, required = false,
                                 default = nil)
  if valid_580759 != nil:
    section.add "fields", valid_580759
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580761: Call_DfareportingFloodlightActivitiesPatch_580748;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight activity. This method supports patch semantics.
  ## 
  let valid = call_580761.validator(path, query, header, formData, body)
  let scheme = call_580761.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580761.url(scheme.get, call_580761.host, call_580761.base,
                         call_580761.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580761, url, valid)

proc call*(call_580762: Call_DfareportingFloodlightActivitiesPatch_580748;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingFloodlightActivitiesPatch
  ## Updates an existing floodlight activity. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Floodlight activity ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580763 = newJObject()
  var query_580764 = newJObject()
  var body_580765 = newJObject()
  add(query_580764, "key", newJString(key))
  add(query_580764, "prettyPrint", newJBool(prettyPrint))
  add(query_580764, "oauth_token", newJString(oauthToken))
  add(path_580763, "profileId", newJString(profileId))
  add(query_580764, "alt", newJString(alt))
  add(query_580764, "userIp", newJString(userIp))
  add(query_580764, "quotaUser", newJString(quotaUser))
  add(query_580764, "id", newJString(id))
  if body != nil:
    body_580765 = body
  add(query_580764, "fields", newJString(fields))
  result = call_580762.call(path_580763, query_580764, nil, nil, body_580765)

var dfareportingFloodlightActivitiesPatch* = Call_DfareportingFloodlightActivitiesPatch_580748(
    name: "dfareportingFloodlightActivitiesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities",
    validator: validate_DfareportingFloodlightActivitiesPatch_580749,
    base: "/dfareporting/v3.1", url: url_DfareportingFloodlightActivitiesPatch_580750,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesGeneratetag_580766 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivitiesGeneratetag_580768(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"), (kind: ConstantSegment,
        value: "/floodlightActivities/generatetag")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesGeneratetag_580767(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates a tag for a floodlight activity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580769 = path.getOrDefault("profileId")
  valid_580769 = validateParameter(valid_580769, JString, required = true,
                                 default = nil)
  if valid_580769 != nil:
    section.add "profileId", valid_580769
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   floodlightActivityId: JString
  ##                       : Floodlight activity ID for which we want to generate a tag.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580770 = query.getOrDefault("key")
  valid_580770 = validateParameter(valid_580770, JString, required = false,
                                 default = nil)
  if valid_580770 != nil:
    section.add "key", valid_580770
  var valid_580771 = query.getOrDefault("prettyPrint")
  valid_580771 = validateParameter(valid_580771, JBool, required = false,
                                 default = newJBool(true))
  if valid_580771 != nil:
    section.add "prettyPrint", valid_580771
  var valid_580772 = query.getOrDefault("oauth_token")
  valid_580772 = validateParameter(valid_580772, JString, required = false,
                                 default = nil)
  if valid_580772 != nil:
    section.add "oauth_token", valid_580772
  var valid_580773 = query.getOrDefault("floodlightActivityId")
  valid_580773 = validateParameter(valid_580773, JString, required = false,
                                 default = nil)
  if valid_580773 != nil:
    section.add "floodlightActivityId", valid_580773
  var valid_580774 = query.getOrDefault("alt")
  valid_580774 = validateParameter(valid_580774, JString, required = false,
                                 default = newJString("json"))
  if valid_580774 != nil:
    section.add "alt", valid_580774
  var valid_580775 = query.getOrDefault("userIp")
  valid_580775 = validateParameter(valid_580775, JString, required = false,
                                 default = nil)
  if valid_580775 != nil:
    section.add "userIp", valid_580775
  var valid_580776 = query.getOrDefault("quotaUser")
  valid_580776 = validateParameter(valid_580776, JString, required = false,
                                 default = nil)
  if valid_580776 != nil:
    section.add "quotaUser", valid_580776
  var valid_580777 = query.getOrDefault("fields")
  valid_580777 = validateParameter(valid_580777, JString, required = false,
                                 default = nil)
  if valid_580777 != nil:
    section.add "fields", valid_580777
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580778: Call_DfareportingFloodlightActivitiesGeneratetag_580766;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates a tag for a floodlight activity.
  ## 
  let valid = call_580778.validator(path, query, header, formData, body)
  let scheme = call_580778.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580778.url(scheme.get, call_580778.host, call_580778.base,
                         call_580778.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580778, url, valid)

proc call*(call_580779: Call_DfareportingFloodlightActivitiesGeneratetag_580766;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; floodlightActivityId: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingFloodlightActivitiesGeneratetag
  ## Generates a tag for a floodlight activity.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   floodlightActivityId: string
  ##                       : Floodlight activity ID for which we want to generate a tag.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580780 = newJObject()
  var query_580781 = newJObject()
  add(query_580781, "key", newJString(key))
  add(query_580781, "prettyPrint", newJBool(prettyPrint))
  add(query_580781, "oauth_token", newJString(oauthToken))
  add(query_580781, "floodlightActivityId", newJString(floodlightActivityId))
  add(path_580780, "profileId", newJString(profileId))
  add(query_580781, "alt", newJString(alt))
  add(query_580781, "userIp", newJString(userIp))
  add(query_580781, "quotaUser", newJString(quotaUser))
  add(query_580781, "fields", newJString(fields))
  result = call_580779.call(path_580780, query_580781, nil, nil, nil)

var dfareportingFloodlightActivitiesGeneratetag* = Call_DfareportingFloodlightActivitiesGeneratetag_580766(
    name: "dfareportingFloodlightActivitiesGeneratetag",
    meth: HttpMethod.HttpPost, host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities/generatetag",
    validator: validate_DfareportingFloodlightActivitiesGeneratetag_580767,
    base: "/dfareporting/v3.1",
    url: url_DfareportingFloodlightActivitiesGeneratetag_580768,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesGet_580782 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivitiesGet_580784(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesGet_580783(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one floodlight activity by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Floodlight activity ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580785 = path.getOrDefault("profileId")
  valid_580785 = validateParameter(valid_580785, JString, required = true,
                                 default = nil)
  if valid_580785 != nil:
    section.add "profileId", valid_580785
  var valid_580786 = path.getOrDefault("id")
  valid_580786 = validateParameter(valid_580786, JString, required = true,
                                 default = nil)
  if valid_580786 != nil:
    section.add "id", valid_580786
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580787 = query.getOrDefault("key")
  valid_580787 = validateParameter(valid_580787, JString, required = false,
                                 default = nil)
  if valid_580787 != nil:
    section.add "key", valid_580787
  var valid_580788 = query.getOrDefault("prettyPrint")
  valid_580788 = validateParameter(valid_580788, JBool, required = false,
                                 default = newJBool(true))
  if valid_580788 != nil:
    section.add "prettyPrint", valid_580788
  var valid_580789 = query.getOrDefault("oauth_token")
  valid_580789 = validateParameter(valid_580789, JString, required = false,
                                 default = nil)
  if valid_580789 != nil:
    section.add "oauth_token", valid_580789
  var valid_580790 = query.getOrDefault("alt")
  valid_580790 = validateParameter(valid_580790, JString, required = false,
                                 default = newJString("json"))
  if valid_580790 != nil:
    section.add "alt", valid_580790
  var valid_580791 = query.getOrDefault("userIp")
  valid_580791 = validateParameter(valid_580791, JString, required = false,
                                 default = nil)
  if valid_580791 != nil:
    section.add "userIp", valid_580791
  var valid_580792 = query.getOrDefault("quotaUser")
  valid_580792 = validateParameter(valid_580792, JString, required = false,
                                 default = nil)
  if valid_580792 != nil:
    section.add "quotaUser", valid_580792
  var valid_580793 = query.getOrDefault("fields")
  valid_580793 = validateParameter(valid_580793, JString, required = false,
                                 default = nil)
  if valid_580793 != nil:
    section.add "fields", valid_580793
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580794: Call_DfareportingFloodlightActivitiesGet_580782;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one floodlight activity by ID.
  ## 
  let valid = call_580794.validator(path, query, header, formData, body)
  let scheme = call_580794.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580794.url(scheme.get, call_580794.host, call_580794.base,
                         call_580794.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580794, url, valid)

proc call*(call_580795: Call_DfareportingFloodlightActivitiesGet_580782;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingFloodlightActivitiesGet
  ## Gets one floodlight activity by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Floodlight activity ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580796 = newJObject()
  var query_580797 = newJObject()
  add(query_580797, "key", newJString(key))
  add(query_580797, "prettyPrint", newJBool(prettyPrint))
  add(query_580797, "oauth_token", newJString(oauthToken))
  add(path_580796, "profileId", newJString(profileId))
  add(path_580796, "id", newJString(id))
  add(query_580797, "alt", newJString(alt))
  add(query_580797, "userIp", newJString(userIp))
  add(query_580797, "quotaUser", newJString(quotaUser))
  add(query_580797, "fields", newJString(fields))
  result = call_580795.call(path_580796, query_580797, nil, nil, nil)

var dfareportingFloodlightActivitiesGet* = Call_DfareportingFloodlightActivitiesGet_580782(
    name: "dfareportingFloodlightActivitiesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities/{id}",
    validator: validate_DfareportingFloodlightActivitiesGet_580783,
    base: "/dfareporting/v3.1", url: url_DfareportingFloodlightActivitiesGet_580784,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesDelete_580798 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivitiesDelete_580800(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesDelete_580799(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing floodlight activity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Floodlight activity ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580801 = path.getOrDefault("profileId")
  valid_580801 = validateParameter(valid_580801, JString, required = true,
                                 default = nil)
  if valid_580801 != nil:
    section.add "profileId", valid_580801
  var valid_580802 = path.getOrDefault("id")
  valid_580802 = validateParameter(valid_580802, JString, required = true,
                                 default = nil)
  if valid_580802 != nil:
    section.add "id", valid_580802
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580803 = query.getOrDefault("key")
  valid_580803 = validateParameter(valid_580803, JString, required = false,
                                 default = nil)
  if valid_580803 != nil:
    section.add "key", valid_580803
  var valid_580804 = query.getOrDefault("prettyPrint")
  valid_580804 = validateParameter(valid_580804, JBool, required = false,
                                 default = newJBool(true))
  if valid_580804 != nil:
    section.add "prettyPrint", valid_580804
  var valid_580805 = query.getOrDefault("oauth_token")
  valid_580805 = validateParameter(valid_580805, JString, required = false,
                                 default = nil)
  if valid_580805 != nil:
    section.add "oauth_token", valid_580805
  var valid_580806 = query.getOrDefault("alt")
  valid_580806 = validateParameter(valid_580806, JString, required = false,
                                 default = newJString("json"))
  if valid_580806 != nil:
    section.add "alt", valid_580806
  var valid_580807 = query.getOrDefault("userIp")
  valid_580807 = validateParameter(valid_580807, JString, required = false,
                                 default = nil)
  if valid_580807 != nil:
    section.add "userIp", valid_580807
  var valid_580808 = query.getOrDefault("quotaUser")
  valid_580808 = validateParameter(valid_580808, JString, required = false,
                                 default = nil)
  if valid_580808 != nil:
    section.add "quotaUser", valid_580808
  var valid_580809 = query.getOrDefault("fields")
  valid_580809 = validateParameter(valid_580809, JString, required = false,
                                 default = nil)
  if valid_580809 != nil:
    section.add "fields", valid_580809
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580810: Call_DfareportingFloodlightActivitiesDelete_580798;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing floodlight activity.
  ## 
  let valid = call_580810.validator(path, query, header, formData, body)
  let scheme = call_580810.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580810.url(scheme.get, call_580810.host, call_580810.base,
                         call_580810.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580810, url, valid)

proc call*(call_580811: Call_DfareportingFloodlightActivitiesDelete_580798;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingFloodlightActivitiesDelete
  ## Deletes an existing floodlight activity.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Floodlight activity ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580812 = newJObject()
  var query_580813 = newJObject()
  add(query_580813, "key", newJString(key))
  add(query_580813, "prettyPrint", newJBool(prettyPrint))
  add(query_580813, "oauth_token", newJString(oauthToken))
  add(path_580812, "profileId", newJString(profileId))
  add(path_580812, "id", newJString(id))
  add(query_580813, "alt", newJString(alt))
  add(query_580813, "userIp", newJString(userIp))
  add(query_580813, "quotaUser", newJString(quotaUser))
  add(query_580813, "fields", newJString(fields))
  result = call_580811.call(path_580812, query_580813, nil, nil, nil)

var dfareportingFloodlightActivitiesDelete* = Call_DfareportingFloodlightActivitiesDelete_580798(
    name: "dfareportingFloodlightActivitiesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities/{id}",
    validator: validate_DfareportingFloodlightActivitiesDelete_580799,
    base: "/dfareporting/v3.1", url: url_DfareportingFloodlightActivitiesDelete_580800,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsUpdate_580838 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivityGroupsUpdate_580840(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsUpdate_580839(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight activity group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580841 = path.getOrDefault("profileId")
  valid_580841 = validateParameter(valid_580841, JString, required = true,
                                 default = nil)
  if valid_580841 != nil:
    section.add "profileId", valid_580841
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580842 = query.getOrDefault("key")
  valid_580842 = validateParameter(valid_580842, JString, required = false,
                                 default = nil)
  if valid_580842 != nil:
    section.add "key", valid_580842
  var valid_580843 = query.getOrDefault("prettyPrint")
  valid_580843 = validateParameter(valid_580843, JBool, required = false,
                                 default = newJBool(true))
  if valid_580843 != nil:
    section.add "prettyPrint", valid_580843
  var valid_580844 = query.getOrDefault("oauth_token")
  valid_580844 = validateParameter(valid_580844, JString, required = false,
                                 default = nil)
  if valid_580844 != nil:
    section.add "oauth_token", valid_580844
  var valid_580845 = query.getOrDefault("alt")
  valid_580845 = validateParameter(valid_580845, JString, required = false,
                                 default = newJString("json"))
  if valid_580845 != nil:
    section.add "alt", valid_580845
  var valid_580846 = query.getOrDefault("userIp")
  valid_580846 = validateParameter(valid_580846, JString, required = false,
                                 default = nil)
  if valid_580846 != nil:
    section.add "userIp", valid_580846
  var valid_580847 = query.getOrDefault("quotaUser")
  valid_580847 = validateParameter(valid_580847, JString, required = false,
                                 default = nil)
  if valid_580847 != nil:
    section.add "quotaUser", valid_580847
  var valid_580848 = query.getOrDefault("fields")
  valid_580848 = validateParameter(valid_580848, JString, required = false,
                                 default = nil)
  if valid_580848 != nil:
    section.add "fields", valid_580848
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580850: Call_DfareportingFloodlightActivityGroupsUpdate_580838;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight activity group.
  ## 
  let valid = call_580850.validator(path, query, header, formData, body)
  let scheme = call_580850.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580850.url(scheme.get, call_580850.host, call_580850.base,
                         call_580850.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580850, url, valid)

proc call*(call_580851: Call_DfareportingFloodlightActivityGroupsUpdate_580838;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingFloodlightActivityGroupsUpdate
  ## Updates an existing floodlight activity group.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580852 = newJObject()
  var query_580853 = newJObject()
  var body_580854 = newJObject()
  add(query_580853, "key", newJString(key))
  add(query_580853, "prettyPrint", newJBool(prettyPrint))
  add(query_580853, "oauth_token", newJString(oauthToken))
  add(path_580852, "profileId", newJString(profileId))
  add(query_580853, "alt", newJString(alt))
  add(query_580853, "userIp", newJString(userIp))
  add(query_580853, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580854 = body
  add(query_580853, "fields", newJString(fields))
  result = call_580851.call(path_580852, query_580853, nil, nil, body_580854)

var dfareportingFloodlightActivityGroupsUpdate* = Call_DfareportingFloodlightActivityGroupsUpdate_580838(
    name: "dfareportingFloodlightActivityGroupsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups",
    validator: validate_DfareportingFloodlightActivityGroupsUpdate_580839,
    base: "/dfareporting/v3.1",
    url: url_DfareportingFloodlightActivityGroupsUpdate_580840,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsInsert_580855 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivityGroupsInsert_580857(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsInsert_580856(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new floodlight activity group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580858 = path.getOrDefault("profileId")
  valid_580858 = validateParameter(valid_580858, JString, required = true,
                                 default = nil)
  if valid_580858 != nil:
    section.add "profileId", valid_580858
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580859 = query.getOrDefault("key")
  valid_580859 = validateParameter(valid_580859, JString, required = false,
                                 default = nil)
  if valid_580859 != nil:
    section.add "key", valid_580859
  var valid_580860 = query.getOrDefault("prettyPrint")
  valid_580860 = validateParameter(valid_580860, JBool, required = false,
                                 default = newJBool(true))
  if valid_580860 != nil:
    section.add "prettyPrint", valid_580860
  var valid_580861 = query.getOrDefault("oauth_token")
  valid_580861 = validateParameter(valid_580861, JString, required = false,
                                 default = nil)
  if valid_580861 != nil:
    section.add "oauth_token", valid_580861
  var valid_580862 = query.getOrDefault("alt")
  valid_580862 = validateParameter(valid_580862, JString, required = false,
                                 default = newJString("json"))
  if valid_580862 != nil:
    section.add "alt", valid_580862
  var valid_580863 = query.getOrDefault("userIp")
  valid_580863 = validateParameter(valid_580863, JString, required = false,
                                 default = nil)
  if valid_580863 != nil:
    section.add "userIp", valid_580863
  var valid_580864 = query.getOrDefault("quotaUser")
  valid_580864 = validateParameter(valid_580864, JString, required = false,
                                 default = nil)
  if valid_580864 != nil:
    section.add "quotaUser", valid_580864
  var valid_580865 = query.getOrDefault("fields")
  valid_580865 = validateParameter(valid_580865, JString, required = false,
                                 default = nil)
  if valid_580865 != nil:
    section.add "fields", valid_580865
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580867: Call_DfareportingFloodlightActivityGroupsInsert_580855;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new floodlight activity group.
  ## 
  let valid = call_580867.validator(path, query, header, formData, body)
  let scheme = call_580867.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580867.url(scheme.get, call_580867.host, call_580867.base,
                         call_580867.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580867, url, valid)

proc call*(call_580868: Call_DfareportingFloodlightActivityGroupsInsert_580855;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingFloodlightActivityGroupsInsert
  ## Inserts a new floodlight activity group.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580869 = newJObject()
  var query_580870 = newJObject()
  var body_580871 = newJObject()
  add(query_580870, "key", newJString(key))
  add(query_580870, "prettyPrint", newJBool(prettyPrint))
  add(query_580870, "oauth_token", newJString(oauthToken))
  add(path_580869, "profileId", newJString(profileId))
  add(query_580870, "alt", newJString(alt))
  add(query_580870, "userIp", newJString(userIp))
  add(query_580870, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580871 = body
  add(query_580870, "fields", newJString(fields))
  result = call_580868.call(path_580869, query_580870, nil, nil, body_580871)

var dfareportingFloodlightActivityGroupsInsert* = Call_DfareportingFloodlightActivityGroupsInsert_580855(
    name: "dfareportingFloodlightActivityGroupsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups",
    validator: validate_DfareportingFloodlightActivityGroupsInsert_580856,
    base: "/dfareporting/v3.1",
    url: url_DfareportingFloodlightActivityGroupsInsert_580857,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsList_580814 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivityGroupsList_580816(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsList_580815(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580817 = path.getOrDefault("profileId")
  valid_580817 = validateParameter(valid_580817, JString, required = true,
                                 default = nil)
  if valid_580817 != nil:
    section.add "profileId", valid_580817
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   type: JString
  ##       : Select only floodlight activity groups with the specified floodlight activity group type.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivitygroup*2015" will return objects with names like "floodlightactivitygroup June 2015", "floodlightactivitygroup April 2015", or simply "floodlightactivitygroup 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivitygroup" will match objects with name "my floodlightactivitygroup activity", "floodlightactivitygroup 2015", or simply "floodlightactivitygroup".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   floodlightConfigurationId: JString
  ##                            : Select only floodlight activity groups with the specified floodlight configuration ID. Must specify either advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   advertiserId: JString
  ##               : Select only floodlight activity groups with the specified advertiser ID. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
  ##   ids: JArray
  ##      : Select only floodlight activity groups with the specified IDs. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_580818 = query.getOrDefault("key")
  valid_580818 = validateParameter(valid_580818, JString, required = false,
                                 default = nil)
  if valid_580818 != nil:
    section.add "key", valid_580818
  var valid_580819 = query.getOrDefault("prettyPrint")
  valid_580819 = validateParameter(valid_580819, JBool, required = false,
                                 default = newJBool(true))
  if valid_580819 != nil:
    section.add "prettyPrint", valid_580819
  var valid_580820 = query.getOrDefault("oauth_token")
  valid_580820 = validateParameter(valid_580820, JString, required = false,
                                 default = nil)
  if valid_580820 != nil:
    section.add "oauth_token", valid_580820
  var valid_580821 = query.getOrDefault("sortField")
  valid_580821 = validateParameter(valid_580821, JString, required = false,
                                 default = newJString("ID"))
  if valid_580821 != nil:
    section.add "sortField", valid_580821
  var valid_580822 = query.getOrDefault("alt")
  valid_580822 = validateParameter(valid_580822, JString, required = false,
                                 default = newJString("json"))
  if valid_580822 != nil:
    section.add "alt", valid_580822
  var valid_580823 = query.getOrDefault("userIp")
  valid_580823 = validateParameter(valid_580823, JString, required = false,
                                 default = nil)
  if valid_580823 != nil:
    section.add "userIp", valid_580823
  var valid_580824 = query.getOrDefault("quotaUser")
  valid_580824 = validateParameter(valid_580824, JString, required = false,
                                 default = nil)
  if valid_580824 != nil:
    section.add "quotaUser", valid_580824
  var valid_580825 = query.getOrDefault("type")
  valid_580825 = validateParameter(valid_580825, JString, required = false,
                                 default = newJString("COUNTER"))
  if valid_580825 != nil:
    section.add "type", valid_580825
  var valid_580826 = query.getOrDefault("pageToken")
  valid_580826 = validateParameter(valid_580826, JString, required = false,
                                 default = nil)
  if valid_580826 != nil:
    section.add "pageToken", valid_580826
  var valid_580827 = query.getOrDefault("searchString")
  valid_580827 = validateParameter(valid_580827, JString, required = false,
                                 default = nil)
  if valid_580827 != nil:
    section.add "searchString", valid_580827
  var valid_580828 = query.getOrDefault("sortOrder")
  valid_580828 = validateParameter(valid_580828, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580828 != nil:
    section.add "sortOrder", valid_580828
  var valid_580829 = query.getOrDefault("floodlightConfigurationId")
  valid_580829 = validateParameter(valid_580829, JString, required = false,
                                 default = nil)
  if valid_580829 != nil:
    section.add "floodlightConfigurationId", valid_580829
  var valid_580830 = query.getOrDefault("advertiserId")
  valid_580830 = validateParameter(valid_580830, JString, required = false,
                                 default = nil)
  if valid_580830 != nil:
    section.add "advertiserId", valid_580830
  var valid_580831 = query.getOrDefault("ids")
  valid_580831 = validateParameter(valid_580831, JArray, required = false,
                                 default = nil)
  if valid_580831 != nil:
    section.add "ids", valid_580831
  var valid_580832 = query.getOrDefault("fields")
  valid_580832 = validateParameter(valid_580832, JString, required = false,
                                 default = nil)
  if valid_580832 != nil:
    section.add "fields", valid_580832
  var valid_580833 = query.getOrDefault("maxResults")
  valid_580833 = validateParameter(valid_580833, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580833 != nil:
    section.add "maxResults", valid_580833
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580834: Call_DfareportingFloodlightActivityGroupsList_580814;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging.
  ## 
  let valid = call_580834.validator(path, query, header, formData, body)
  let scheme = call_580834.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580834.url(scheme.get, call_580834.host, call_580834.base,
                         call_580834.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580834, url, valid)

proc call*(call_580835: Call_DfareportingFloodlightActivityGroupsList_580814;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; sortField: string = "ID"; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; `type`: string = "COUNTER";
          pageToken: string = ""; searchString: string = "";
          sortOrder: string = "ASCENDING"; floodlightConfigurationId: string = "";
          advertiserId: string = ""; ids: JsonNode = nil; fields: string = "";
          maxResults: int = 1000): Recallable =
  ## dfareportingFloodlightActivityGroupsList
  ## Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   type: string
  ##       : Select only floodlight activity groups with the specified floodlight activity group type.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivitygroup*2015" will return objects with names like "floodlightactivitygroup June 2015", "floodlightactivitygroup April 2015", or simply "floodlightactivitygroup 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivitygroup" will match objects with name "my floodlightactivitygroup activity", "floodlightactivitygroup 2015", or simply "floodlightactivitygroup".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   floodlightConfigurationId: string
  ##                            : Select only floodlight activity groups with the specified floodlight configuration ID. Must specify either advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   advertiserId: string
  ##               : Select only floodlight activity groups with the specified advertiser ID. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
  ##   ids: JArray
  ##      : Select only floodlight activity groups with the specified IDs. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_580836 = newJObject()
  var query_580837 = newJObject()
  add(query_580837, "key", newJString(key))
  add(query_580837, "prettyPrint", newJBool(prettyPrint))
  add(query_580837, "oauth_token", newJString(oauthToken))
  add(path_580836, "profileId", newJString(profileId))
  add(query_580837, "sortField", newJString(sortField))
  add(query_580837, "alt", newJString(alt))
  add(query_580837, "userIp", newJString(userIp))
  add(query_580837, "quotaUser", newJString(quotaUser))
  add(query_580837, "type", newJString(`type`))
  add(query_580837, "pageToken", newJString(pageToken))
  add(query_580837, "searchString", newJString(searchString))
  add(query_580837, "sortOrder", newJString(sortOrder))
  add(query_580837, "floodlightConfigurationId",
      newJString(floodlightConfigurationId))
  add(query_580837, "advertiserId", newJString(advertiserId))
  if ids != nil:
    query_580837.add "ids", ids
  add(query_580837, "fields", newJString(fields))
  add(query_580837, "maxResults", newJInt(maxResults))
  result = call_580835.call(path_580836, query_580837, nil, nil, nil)

var dfareportingFloodlightActivityGroupsList* = Call_DfareportingFloodlightActivityGroupsList_580814(
    name: "dfareportingFloodlightActivityGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups",
    validator: validate_DfareportingFloodlightActivityGroupsList_580815,
    base: "/dfareporting/v3.1", url: url_DfareportingFloodlightActivityGroupsList_580816,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsPatch_580872 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivityGroupsPatch_580874(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsPatch_580873(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight activity group. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580875 = path.getOrDefault("profileId")
  valid_580875 = validateParameter(valid_580875, JString, required = true,
                                 default = nil)
  if valid_580875 != nil:
    section.add "profileId", valid_580875
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Floodlight activity Group ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580876 = query.getOrDefault("key")
  valid_580876 = validateParameter(valid_580876, JString, required = false,
                                 default = nil)
  if valid_580876 != nil:
    section.add "key", valid_580876
  var valid_580877 = query.getOrDefault("prettyPrint")
  valid_580877 = validateParameter(valid_580877, JBool, required = false,
                                 default = newJBool(true))
  if valid_580877 != nil:
    section.add "prettyPrint", valid_580877
  var valid_580878 = query.getOrDefault("oauth_token")
  valid_580878 = validateParameter(valid_580878, JString, required = false,
                                 default = nil)
  if valid_580878 != nil:
    section.add "oauth_token", valid_580878
  var valid_580879 = query.getOrDefault("alt")
  valid_580879 = validateParameter(valid_580879, JString, required = false,
                                 default = newJString("json"))
  if valid_580879 != nil:
    section.add "alt", valid_580879
  var valid_580880 = query.getOrDefault("userIp")
  valid_580880 = validateParameter(valid_580880, JString, required = false,
                                 default = nil)
  if valid_580880 != nil:
    section.add "userIp", valid_580880
  var valid_580881 = query.getOrDefault("quotaUser")
  valid_580881 = validateParameter(valid_580881, JString, required = false,
                                 default = nil)
  if valid_580881 != nil:
    section.add "quotaUser", valid_580881
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580882 = query.getOrDefault("id")
  valid_580882 = validateParameter(valid_580882, JString, required = true,
                                 default = nil)
  if valid_580882 != nil:
    section.add "id", valid_580882
  var valid_580883 = query.getOrDefault("fields")
  valid_580883 = validateParameter(valid_580883, JString, required = false,
                                 default = nil)
  if valid_580883 != nil:
    section.add "fields", valid_580883
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580885: Call_DfareportingFloodlightActivityGroupsPatch_580872;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight activity group. This method supports patch semantics.
  ## 
  let valid = call_580885.validator(path, query, header, formData, body)
  let scheme = call_580885.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580885.url(scheme.get, call_580885.host, call_580885.base,
                         call_580885.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580885, url, valid)

proc call*(call_580886: Call_DfareportingFloodlightActivityGroupsPatch_580872;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingFloodlightActivityGroupsPatch
  ## Updates an existing floodlight activity group. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Floodlight activity Group ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580887 = newJObject()
  var query_580888 = newJObject()
  var body_580889 = newJObject()
  add(query_580888, "key", newJString(key))
  add(query_580888, "prettyPrint", newJBool(prettyPrint))
  add(query_580888, "oauth_token", newJString(oauthToken))
  add(path_580887, "profileId", newJString(profileId))
  add(query_580888, "alt", newJString(alt))
  add(query_580888, "userIp", newJString(userIp))
  add(query_580888, "quotaUser", newJString(quotaUser))
  add(query_580888, "id", newJString(id))
  if body != nil:
    body_580889 = body
  add(query_580888, "fields", newJString(fields))
  result = call_580886.call(path_580887, query_580888, nil, nil, body_580889)

var dfareportingFloodlightActivityGroupsPatch* = Call_DfareportingFloodlightActivityGroupsPatch_580872(
    name: "dfareportingFloodlightActivityGroupsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups",
    validator: validate_DfareportingFloodlightActivityGroupsPatch_580873,
    base: "/dfareporting/v3.1",
    url: url_DfareportingFloodlightActivityGroupsPatch_580874,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsGet_580890 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivityGroupsGet_580892(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsGet_580891(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one floodlight activity group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Floodlight activity Group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580893 = path.getOrDefault("profileId")
  valid_580893 = validateParameter(valid_580893, JString, required = true,
                                 default = nil)
  if valid_580893 != nil:
    section.add "profileId", valid_580893
  var valid_580894 = path.getOrDefault("id")
  valid_580894 = validateParameter(valid_580894, JString, required = true,
                                 default = nil)
  if valid_580894 != nil:
    section.add "id", valid_580894
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580895 = query.getOrDefault("key")
  valid_580895 = validateParameter(valid_580895, JString, required = false,
                                 default = nil)
  if valid_580895 != nil:
    section.add "key", valid_580895
  var valid_580896 = query.getOrDefault("prettyPrint")
  valid_580896 = validateParameter(valid_580896, JBool, required = false,
                                 default = newJBool(true))
  if valid_580896 != nil:
    section.add "prettyPrint", valid_580896
  var valid_580897 = query.getOrDefault("oauth_token")
  valid_580897 = validateParameter(valid_580897, JString, required = false,
                                 default = nil)
  if valid_580897 != nil:
    section.add "oauth_token", valid_580897
  var valid_580898 = query.getOrDefault("alt")
  valid_580898 = validateParameter(valid_580898, JString, required = false,
                                 default = newJString("json"))
  if valid_580898 != nil:
    section.add "alt", valid_580898
  var valid_580899 = query.getOrDefault("userIp")
  valid_580899 = validateParameter(valid_580899, JString, required = false,
                                 default = nil)
  if valid_580899 != nil:
    section.add "userIp", valid_580899
  var valid_580900 = query.getOrDefault("quotaUser")
  valid_580900 = validateParameter(valid_580900, JString, required = false,
                                 default = nil)
  if valid_580900 != nil:
    section.add "quotaUser", valid_580900
  var valid_580901 = query.getOrDefault("fields")
  valid_580901 = validateParameter(valid_580901, JString, required = false,
                                 default = nil)
  if valid_580901 != nil:
    section.add "fields", valid_580901
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580902: Call_DfareportingFloodlightActivityGroupsGet_580890;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one floodlight activity group by ID.
  ## 
  let valid = call_580902.validator(path, query, header, formData, body)
  let scheme = call_580902.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580902.url(scheme.get, call_580902.host, call_580902.base,
                         call_580902.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580902, url, valid)

proc call*(call_580903: Call_DfareportingFloodlightActivityGroupsGet_580890;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingFloodlightActivityGroupsGet
  ## Gets one floodlight activity group by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Floodlight activity Group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580904 = newJObject()
  var query_580905 = newJObject()
  add(query_580905, "key", newJString(key))
  add(query_580905, "prettyPrint", newJBool(prettyPrint))
  add(query_580905, "oauth_token", newJString(oauthToken))
  add(path_580904, "profileId", newJString(profileId))
  add(path_580904, "id", newJString(id))
  add(query_580905, "alt", newJString(alt))
  add(query_580905, "userIp", newJString(userIp))
  add(query_580905, "quotaUser", newJString(quotaUser))
  add(query_580905, "fields", newJString(fields))
  result = call_580903.call(path_580904, query_580905, nil, nil, nil)

var dfareportingFloodlightActivityGroupsGet* = Call_DfareportingFloodlightActivityGroupsGet_580890(
    name: "dfareportingFloodlightActivityGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups/{id}",
    validator: validate_DfareportingFloodlightActivityGroupsGet_580891,
    base: "/dfareporting/v3.1", url: url_DfareportingFloodlightActivityGroupsGet_580892,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightConfigurationsUpdate_580922 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightConfigurationsUpdate_580924(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightConfigurations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightConfigurationsUpdate_580923(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight configuration.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580925 = path.getOrDefault("profileId")
  valid_580925 = validateParameter(valid_580925, JString, required = true,
                                 default = nil)
  if valid_580925 != nil:
    section.add "profileId", valid_580925
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580926 = query.getOrDefault("key")
  valid_580926 = validateParameter(valid_580926, JString, required = false,
                                 default = nil)
  if valid_580926 != nil:
    section.add "key", valid_580926
  var valid_580927 = query.getOrDefault("prettyPrint")
  valid_580927 = validateParameter(valid_580927, JBool, required = false,
                                 default = newJBool(true))
  if valid_580927 != nil:
    section.add "prettyPrint", valid_580927
  var valid_580928 = query.getOrDefault("oauth_token")
  valid_580928 = validateParameter(valid_580928, JString, required = false,
                                 default = nil)
  if valid_580928 != nil:
    section.add "oauth_token", valid_580928
  var valid_580929 = query.getOrDefault("alt")
  valid_580929 = validateParameter(valid_580929, JString, required = false,
                                 default = newJString("json"))
  if valid_580929 != nil:
    section.add "alt", valid_580929
  var valid_580930 = query.getOrDefault("userIp")
  valid_580930 = validateParameter(valid_580930, JString, required = false,
                                 default = nil)
  if valid_580930 != nil:
    section.add "userIp", valid_580930
  var valid_580931 = query.getOrDefault("quotaUser")
  valid_580931 = validateParameter(valid_580931, JString, required = false,
                                 default = nil)
  if valid_580931 != nil:
    section.add "quotaUser", valid_580931
  var valid_580932 = query.getOrDefault("fields")
  valid_580932 = validateParameter(valid_580932, JString, required = false,
                                 default = nil)
  if valid_580932 != nil:
    section.add "fields", valid_580932
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580934: Call_DfareportingFloodlightConfigurationsUpdate_580922;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight configuration.
  ## 
  let valid = call_580934.validator(path, query, header, formData, body)
  let scheme = call_580934.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580934.url(scheme.get, call_580934.host, call_580934.base,
                         call_580934.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580934, url, valid)

proc call*(call_580935: Call_DfareportingFloodlightConfigurationsUpdate_580922;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingFloodlightConfigurationsUpdate
  ## Updates an existing floodlight configuration.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580936 = newJObject()
  var query_580937 = newJObject()
  var body_580938 = newJObject()
  add(query_580937, "key", newJString(key))
  add(query_580937, "prettyPrint", newJBool(prettyPrint))
  add(query_580937, "oauth_token", newJString(oauthToken))
  add(path_580936, "profileId", newJString(profileId))
  add(query_580937, "alt", newJString(alt))
  add(query_580937, "userIp", newJString(userIp))
  add(query_580937, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580938 = body
  add(query_580937, "fields", newJString(fields))
  result = call_580935.call(path_580936, query_580937, nil, nil, body_580938)

var dfareportingFloodlightConfigurationsUpdate* = Call_DfareportingFloodlightConfigurationsUpdate_580922(
    name: "dfareportingFloodlightConfigurationsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightConfigurations",
    validator: validate_DfareportingFloodlightConfigurationsUpdate_580923,
    base: "/dfareporting/v3.1",
    url: url_DfareportingFloodlightConfigurationsUpdate_580924,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightConfigurationsList_580906 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightConfigurationsList_580908(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightConfigurations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightConfigurationsList_580907(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of floodlight configurations, possibly filtered.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580909 = path.getOrDefault("profileId")
  valid_580909 = validateParameter(valid_580909, JString, required = true,
                                 default = nil)
  if valid_580909 != nil:
    section.add "profileId", valid_580909
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   ids: JArray
  ##      : Set of IDs of floodlight configurations to retrieve. Required field; otherwise an empty list will be returned.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580910 = query.getOrDefault("key")
  valid_580910 = validateParameter(valid_580910, JString, required = false,
                                 default = nil)
  if valid_580910 != nil:
    section.add "key", valid_580910
  var valid_580911 = query.getOrDefault("prettyPrint")
  valid_580911 = validateParameter(valid_580911, JBool, required = false,
                                 default = newJBool(true))
  if valid_580911 != nil:
    section.add "prettyPrint", valid_580911
  var valid_580912 = query.getOrDefault("oauth_token")
  valid_580912 = validateParameter(valid_580912, JString, required = false,
                                 default = nil)
  if valid_580912 != nil:
    section.add "oauth_token", valid_580912
  var valid_580913 = query.getOrDefault("alt")
  valid_580913 = validateParameter(valid_580913, JString, required = false,
                                 default = newJString("json"))
  if valid_580913 != nil:
    section.add "alt", valid_580913
  var valid_580914 = query.getOrDefault("userIp")
  valid_580914 = validateParameter(valid_580914, JString, required = false,
                                 default = nil)
  if valid_580914 != nil:
    section.add "userIp", valid_580914
  var valid_580915 = query.getOrDefault("quotaUser")
  valid_580915 = validateParameter(valid_580915, JString, required = false,
                                 default = nil)
  if valid_580915 != nil:
    section.add "quotaUser", valid_580915
  var valid_580916 = query.getOrDefault("ids")
  valid_580916 = validateParameter(valid_580916, JArray, required = false,
                                 default = nil)
  if valid_580916 != nil:
    section.add "ids", valid_580916
  var valid_580917 = query.getOrDefault("fields")
  valid_580917 = validateParameter(valid_580917, JString, required = false,
                                 default = nil)
  if valid_580917 != nil:
    section.add "fields", valid_580917
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580918: Call_DfareportingFloodlightConfigurationsList_580906;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of floodlight configurations, possibly filtered.
  ## 
  let valid = call_580918.validator(path, query, header, formData, body)
  let scheme = call_580918.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580918.url(scheme.get, call_580918.host, call_580918.base,
                         call_580918.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580918, url, valid)

proc call*(call_580919: Call_DfareportingFloodlightConfigurationsList_580906;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; ids: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingFloodlightConfigurationsList
  ## Retrieves a list of floodlight configurations, possibly filtered.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   ids: JArray
  ##      : Set of IDs of floodlight configurations to retrieve. Required field; otherwise an empty list will be returned.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580920 = newJObject()
  var query_580921 = newJObject()
  add(query_580921, "key", newJString(key))
  add(query_580921, "prettyPrint", newJBool(prettyPrint))
  add(query_580921, "oauth_token", newJString(oauthToken))
  add(path_580920, "profileId", newJString(profileId))
  add(query_580921, "alt", newJString(alt))
  add(query_580921, "userIp", newJString(userIp))
  add(query_580921, "quotaUser", newJString(quotaUser))
  if ids != nil:
    query_580921.add "ids", ids
  add(query_580921, "fields", newJString(fields))
  result = call_580919.call(path_580920, query_580921, nil, nil, nil)

var dfareportingFloodlightConfigurationsList* = Call_DfareportingFloodlightConfigurationsList_580906(
    name: "dfareportingFloodlightConfigurationsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightConfigurations",
    validator: validate_DfareportingFloodlightConfigurationsList_580907,
    base: "/dfareporting/v3.1", url: url_DfareportingFloodlightConfigurationsList_580908,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightConfigurationsPatch_580939 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightConfigurationsPatch_580941(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightConfigurations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightConfigurationsPatch_580940(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight configuration. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580942 = path.getOrDefault("profileId")
  valid_580942 = validateParameter(valid_580942, JString, required = true,
                                 default = nil)
  if valid_580942 != nil:
    section.add "profileId", valid_580942
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Floodlight configuration ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580943 = query.getOrDefault("key")
  valid_580943 = validateParameter(valid_580943, JString, required = false,
                                 default = nil)
  if valid_580943 != nil:
    section.add "key", valid_580943
  var valid_580944 = query.getOrDefault("prettyPrint")
  valid_580944 = validateParameter(valid_580944, JBool, required = false,
                                 default = newJBool(true))
  if valid_580944 != nil:
    section.add "prettyPrint", valid_580944
  var valid_580945 = query.getOrDefault("oauth_token")
  valid_580945 = validateParameter(valid_580945, JString, required = false,
                                 default = nil)
  if valid_580945 != nil:
    section.add "oauth_token", valid_580945
  var valid_580946 = query.getOrDefault("alt")
  valid_580946 = validateParameter(valid_580946, JString, required = false,
                                 default = newJString("json"))
  if valid_580946 != nil:
    section.add "alt", valid_580946
  var valid_580947 = query.getOrDefault("userIp")
  valid_580947 = validateParameter(valid_580947, JString, required = false,
                                 default = nil)
  if valid_580947 != nil:
    section.add "userIp", valid_580947
  var valid_580948 = query.getOrDefault("quotaUser")
  valid_580948 = validateParameter(valid_580948, JString, required = false,
                                 default = nil)
  if valid_580948 != nil:
    section.add "quotaUser", valid_580948
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580949 = query.getOrDefault("id")
  valid_580949 = validateParameter(valid_580949, JString, required = true,
                                 default = nil)
  if valid_580949 != nil:
    section.add "id", valid_580949
  var valid_580950 = query.getOrDefault("fields")
  valid_580950 = validateParameter(valid_580950, JString, required = false,
                                 default = nil)
  if valid_580950 != nil:
    section.add "fields", valid_580950
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580952: Call_DfareportingFloodlightConfigurationsPatch_580939;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight configuration. This method supports patch semantics.
  ## 
  let valid = call_580952.validator(path, query, header, formData, body)
  let scheme = call_580952.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580952.url(scheme.get, call_580952.host, call_580952.base,
                         call_580952.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580952, url, valid)

proc call*(call_580953: Call_DfareportingFloodlightConfigurationsPatch_580939;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingFloodlightConfigurationsPatch
  ## Updates an existing floodlight configuration. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Floodlight configuration ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580954 = newJObject()
  var query_580955 = newJObject()
  var body_580956 = newJObject()
  add(query_580955, "key", newJString(key))
  add(query_580955, "prettyPrint", newJBool(prettyPrint))
  add(query_580955, "oauth_token", newJString(oauthToken))
  add(path_580954, "profileId", newJString(profileId))
  add(query_580955, "alt", newJString(alt))
  add(query_580955, "userIp", newJString(userIp))
  add(query_580955, "quotaUser", newJString(quotaUser))
  add(query_580955, "id", newJString(id))
  if body != nil:
    body_580956 = body
  add(query_580955, "fields", newJString(fields))
  result = call_580953.call(path_580954, query_580955, nil, nil, body_580956)

var dfareportingFloodlightConfigurationsPatch* = Call_DfareportingFloodlightConfigurationsPatch_580939(
    name: "dfareportingFloodlightConfigurationsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightConfigurations",
    validator: validate_DfareportingFloodlightConfigurationsPatch_580940,
    base: "/dfareporting/v3.1",
    url: url_DfareportingFloodlightConfigurationsPatch_580941,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightConfigurationsGet_580957 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightConfigurationsGet_580959(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightConfigurations/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightConfigurationsGet_580958(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one floodlight configuration by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Floodlight configuration ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580960 = path.getOrDefault("profileId")
  valid_580960 = validateParameter(valid_580960, JString, required = true,
                                 default = nil)
  if valid_580960 != nil:
    section.add "profileId", valid_580960
  var valid_580961 = path.getOrDefault("id")
  valid_580961 = validateParameter(valid_580961, JString, required = true,
                                 default = nil)
  if valid_580961 != nil:
    section.add "id", valid_580961
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580962 = query.getOrDefault("key")
  valid_580962 = validateParameter(valid_580962, JString, required = false,
                                 default = nil)
  if valid_580962 != nil:
    section.add "key", valid_580962
  var valid_580963 = query.getOrDefault("prettyPrint")
  valid_580963 = validateParameter(valid_580963, JBool, required = false,
                                 default = newJBool(true))
  if valid_580963 != nil:
    section.add "prettyPrint", valid_580963
  var valid_580964 = query.getOrDefault("oauth_token")
  valid_580964 = validateParameter(valid_580964, JString, required = false,
                                 default = nil)
  if valid_580964 != nil:
    section.add "oauth_token", valid_580964
  var valid_580965 = query.getOrDefault("alt")
  valid_580965 = validateParameter(valid_580965, JString, required = false,
                                 default = newJString("json"))
  if valid_580965 != nil:
    section.add "alt", valid_580965
  var valid_580966 = query.getOrDefault("userIp")
  valid_580966 = validateParameter(valid_580966, JString, required = false,
                                 default = nil)
  if valid_580966 != nil:
    section.add "userIp", valid_580966
  var valid_580967 = query.getOrDefault("quotaUser")
  valid_580967 = validateParameter(valid_580967, JString, required = false,
                                 default = nil)
  if valid_580967 != nil:
    section.add "quotaUser", valid_580967
  var valid_580968 = query.getOrDefault("fields")
  valid_580968 = validateParameter(valid_580968, JString, required = false,
                                 default = nil)
  if valid_580968 != nil:
    section.add "fields", valid_580968
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580969: Call_DfareportingFloodlightConfigurationsGet_580957;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one floodlight configuration by ID.
  ## 
  let valid = call_580969.validator(path, query, header, formData, body)
  let scheme = call_580969.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580969.url(scheme.get, call_580969.host, call_580969.base,
                         call_580969.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580969, url, valid)

proc call*(call_580970: Call_DfareportingFloodlightConfigurationsGet_580957;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingFloodlightConfigurationsGet
  ## Gets one floodlight configuration by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Floodlight configuration ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580971 = newJObject()
  var query_580972 = newJObject()
  add(query_580972, "key", newJString(key))
  add(query_580972, "prettyPrint", newJBool(prettyPrint))
  add(query_580972, "oauth_token", newJString(oauthToken))
  add(path_580971, "profileId", newJString(profileId))
  add(path_580971, "id", newJString(id))
  add(query_580972, "alt", newJString(alt))
  add(query_580972, "userIp", newJString(userIp))
  add(query_580972, "quotaUser", newJString(quotaUser))
  add(query_580972, "fields", newJString(fields))
  result = call_580970.call(path_580971, query_580972, nil, nil, nil)

var dfareportingFloodlightConfigurationsGet* = Call_DfareportingFloodlightConfigurationsGet_580957(
    name: "dfareportingFloodlightConfigurationsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightConfigurations/{id}",
    validator: validate_DfareportingFloodlightConfigurationsGet_580958,
    base: "/dfareporting/v3.1", url: url_DfareportingFloodlightConfigurationsGet_580959,
    schemes: {Scheme.Https})
type
  Call_DfareportingLanguagesList_580973 = ref object of OpenApiRestCall_578364
proc url_DfareportingLanguagesList_580975(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/languages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingLanguagesList_580974(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of languages.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580976 = path.getOrDefault("profileId")
  valid_580976 = validateParameter(valid_580976, JString, required = true,
                                 default = nil)
  if valid_580976 != nil:
    section.add "profileId", valid_580976
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580977 = query.getOrDefault("key")
  valid_580977 = validateParameter(valid_580977, JString, required = false,
                                 default = nil)
  if valid_580977 != nil:
    section.add "key", valid_580977
  var valid_580978 = query.getOrDefault("prettyPrint")
  valid_580978 = validateParameter(valid_580978, JBool, required = false,
                                 default = newJBool(true))
  if valid_580978 != nil:
    section.add "prettyPrint", valid_580978
  var valid_580979 = query.getOrDefault("oauth_token")
  valid_580979 = validateParameter(valid_580979, JString, required = false,
                                 default = nil)
  if valid_580979 != nil:
    section.add "oauth_token", valid_580979
  var valid_580980 = query.getOrDefault("alt")
  valid_580980 = validateParameter(valid_580980, JString, required = false,
                                 default = newJString("json"))
  if valid_580980 != nil:
    section.add "alt", valid_580980
  var valid_580981 = query.getOrDefault("userIp")
  valid_580981 = validateParameter(valid_580981, JString, required = false,
                                 default = nil)
  if valid_580981 != nil:
    section.add "userIp", valid_580981
  var valid_580982 = query.getOrDefault("quotaUser")
  valid_580982 = validateParameter(valid_580982, JString, required = false,
                                 default = nil)
  if valid_580982 != nil:
    section.add "quotaUser", valid_580982
  var valid_580983 = query.getOrDefault("fields")
  valid_580983 = validateParameter(valid_580983, JString, required = false,
                                 default = nil)
  if valid_580983 != nil:
    section.add "fields", valid_580983
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580984: Call_DfareportingLanguagesList_580973; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of languages.
  ## 
  let valid = call_580984.validator(path, query, header, formData, body)
  let scheme = call_580984.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580984.url(scheme.get, call_580984.host, call_580984.base,
                         call_580984.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580984, url, valid)

proc call*(call_580985: Call_DfareportingLanguagesList_580973; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingLanguagesList
  ## Retrieves a list of languages.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580986 = newJObject()
  var query_580987 = newJObject()
  add(query_580987, "key", newJString(key))
  add(query_580987, "prettyPrint", newJBool(prettyPrint))
  add(query_580987, "oauth_token", newJString(oauthToken))
  add(path_580986, "profileId", newJString(profileId))
  add(query_580987, "alt", newJString(alt))
  add(query_580987, "userIp", newJString(userIp))
  add(query_580987, "quotaUser", newJString(quotaUser))
  add(query_580987, "fields", newJString(fields))
  result = call_580985.call(path_580986, query_580987, nil, nil, nil)

var dfareportingLanguagesList* = Call_DfareportingLanguagesList_580973(
    name: "dfareportingLanguagesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/languages",
    validator: validate_DfareportingLanguagesList_580974,
    base: "/dfareporting/v3.1", url: url_DfareportingLanguagesList_580975,
    schemes: {Scheme.Https})
type
  Call_DfareportingMetrosList_580988 = ref object of OpenApiRestCall_578364
proc url_DfareportingMetrosList_580990(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/metros")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMetrosList_580989(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of metros.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580991 = path.getOrDefault("profileId")
  valid_580991 = validateParameter(valid_580991, JString, required = true,
                                 default = nil)
  if valid_580991 != nil:
    section.add "profileId", valid_580991
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580992 = query.getOrDefault("key")
  valid_580992 = validateParameter(valid_580992, JString, required = false,
                                 default = nil)
  if valid_580992 != nil:
    section.add "key", valid_580992
  var valid_580993 = query.getOrDefault("prettyPrint")
  valid_580993 = validateParameter(valid_580993, JBool, required = false,
                                 default = newJBool(true))
  if valid_580993 != nil:
    section.add "prettyPrint", valid_580993
  var valid_580994 = query.getOrDefault("oauth_token")
  valid_580994 = validateParameter(valid_580994, JString, required = false,
                                 default = nil)
  if valid_580994 != nil:
    section.add "oauth_token", valid_580994
  var valid_580995 = query.getOrDefault("alt")
  valid_580995 = validateParameter(valid_580995, JString, required = false,
                                 default = newJString("json"))
  if valid_580995 != nil:
    section.add "alt", valid_580995
  var valid_580996 = query.getOrDefault("userIp")
  valid_580996 = validateParameter(valid_580996, JString, required = false,
                                 default = nil)
  if valid_580996 != nil:
    section.add "userIp", valid_580996
  var valid_580997 = query.getOrDefault("quotaUser")
  valid_580997 = validateParameter(valid_580997, JString, required = false,
                                 default = nil)
  if valid_580997 != nil:
    section.add "quotaUser", valid_580997
  var valid_580998 = query.getOrDefault("fields")
  valid_580998 = validateParameter(valid_580998, JString, required = false,
                                 default = nil)
  if valid_580998 != nil:
    section.add "fields", valid_580998
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580999: Call_DfareportingMetrosList_580988; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of metros.
  ## 
  let valid = call_580999.validator(path, query, header, formData, body)
  let scheme = call_580999.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580999.url(scheme.get, call_580999.host, call_580999.base,
                         call_580999.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580999, url, valid)

proc call*(call_581000: Call_DfareportingMetrosList_580988; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingMetrosList
  ## Retrieves a list of metros.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581001 = newJObject()
  var query_581002 = newJObject()
  add(query_581002, "key", newJString(key))
  add(query_581002, "prettyPrint", newJBool(prettyPrint))
  add(query_581002, "oauth_token", newJString(oauthToken))
  add(path_581001, "profileId", newJString(profileId))
  add(query_581002, "alt", newJString(alt))
  add(query_581002, "userIp", newJString(userIp))
  add(query_581002, "quotaUser", newJString(quotaUser))
  add(query_581002, "fields", newJString(fields))
  result = call_581000.call(path_581001, query_581002, nil, nil, nil)

var dfareportingMetrosList* = Call_DfareportingMetrosList_580988(
    name: "dfareportingMetrosList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/metros",
    validator: validate_DfareportingMetrosList_580989, base: "/dfareporting/v3.1",
    url: url_DfareportingMetrosList_580990, schemes: {Scheme.Https})
type
  Call_DfareportingMobileAppsList_581003 = ref object of OpenApiRestCall_578364
proc url_DfareportingMobileAppsList_581005(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/mobileApps")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMobileAppsList_581004(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves list of available mobile apps.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581006 = path.getOrDefault("profileId")
  valid_581006 = validateParameter(valid_581006, JString, required = true,
                                 default = nil)
  if valid_581006 != nil:
    section.add "profileId", valid_581006
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   directories: JArray
  ##              : Select only apps from these directories.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "app*2015" will return objects with names like "app Jan 2018", "app Jan 2018", or simply "app 2018". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "app" will match objects with name "my app", "app 2018", or simply "app".
  ##   ids: JArray
  ##      : Select only apps with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_581007 = query.getOrDefault("key")
  valid_581007 = validateParameter(valid_581007, JString, required = false,
                                 default = nil)
  if valid_581007 != nil:
    section.add "key", valid_581007
  var valid_581008 = query.getOrDefault("prettyPrint")
  valid_581008 = validateParameter(valid_581008, JBool, required = false,
                                 default = newJBool(true))
  if valid_581008 != nil:
    section.add "prettyPrint", valid_581008
  var valid_581009 = query.getOrDefault("oauth_token")
  valid_581009 = validateParameter(valid_581009, JString, required = false,
                                 default = nil)
  if valid_581009 != nil:
    section.add "oauth_token", valid_581009
  var valid_581010 = query.getOrDefault("alt")
  valid_581010 = validateParameter(valid_581010, JString, required = false,
                                 default = newJString("json"))
  if valid_581010 != nil:
    section.add "alt", valid_581010
  var valid_581011 = query.getOrDefault("userIp")
  valid_581011 = validateParameter(valid_581011, JString, required = false,
                                 default = nil)
  if valid_581011 != nil:
    section.add "userIp", valid_581011
  var valid_581012 = query.getOrDefault("quotaUser")
  valid_581012 = validateParameter(valid_581012, JString, required = false,
                                 default = nil)
  if valid_581012 != nil:
    section.add "quotaUser", valid_581012
  var valid_581013 = query.getOrDefault("directories")
  valid_581013 = validateParameter(valid_581013, JArray, required = false,
                                 default = nil)
  if valid_581013 != nil:
    section.add "directories", valid_581013
  var valid_581014 = query.getOrDefault("pageToken")
  valid_581014 = validateParameter(valid_581014, JString, required = false,
                                 default = nil)
  if valid_581014 != nil:
    section.add "pageToken", valid_581014
  var valid_581015 = query.getOrDefault("searchString")
  valid_581015 = validateParameter(valid_581015, JString, required = false,
                                 default = nil)
  if valid_581015 != nil:
    section.add "searchString", valid_581015
  var valid_581016 = query.getOrDefault("ids")
  valid_581016 = validateParameter(valid_581016, JArray, required = false,
                                 default = nil)
  if valid_581016 != nil:
    section.add "ids", valid_581016
  var valid_581017 = query.getOrDefault("fields")
  valid_581017 = validateParameter(valid_581017, JString, required = false,
                                 default = nil)
  if valid_581017 != nil:
    section.add "fields", valid_581017
  var valid_581018 = query.getOrDefault("maxResults")
  valid_581018 = validateParameter(valid_581018, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581018 != nil:
    section.add "maxResults", valid_581018
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581019: Call_DfareportingMobileAppsList_581003; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves list of available mobile apps.
  ## 
  let valid = call_581019.validator(path, query, header, formData, body)
  let scheme = call_581019.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581019.url(scheme.get, call_581019.host, call_581019.base,
                         call_581019.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581019, url, valid)

proc call*(call_581020: Call_DfareportingMobileAppsList_581003; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          directories: JsonNode = nil; pageToken: string = "";
          searchString: string = ""; ids: JsonNode = nil; fields: string = "";
          maxResults: int = 1000): Recallable =
  ## dfareportingMobileAppsList
  ## Retrieves list of available mobile apps.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   directories: JArray
  ##              : Select only apps from these directories.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "app*2015" will return objects with names like "app Jan 2018", "app Jan 2018", or simply "app 2018". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "app" will match objects with name "my app", "app 2018", or simply "app".
  ##   ids: JArray
  ##      : Select only apps with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_581021 = newJObject()
  var query_581022 = newJObject()
  add(query_581022, "key", newJString(key))
  add(query_581022, "prettyPrint", newJBool(prettyPrint))
  add(query_581022, "oauth_token", newJString(oauthToken))
  add(path_581021, "profileId", newJString(profileId))
  add(query_581022, "alt", newJString(alt))
  add(query_581022, "userIp", newJString(userIp))
  add(query_581022, "quotaUser", newJString(quotaUser))
  if directories != nil:
    query_581022.add "directories", directories
  add(query_581022, "pageToken", newJString(pageToken))
  add(query_581022, "searchString", newJString(searchString))
  if ids != nil:
    query_581022.add "ids", ids
  add(query_581022, "fields", newJString(fields))
  add(query_581022, "maxResults", newJInt(maxResults))
  result = call_581020.call(path_581021, query_581022, nil, nil, nil)

var dfareportingMobileAppsList* = Call_DfareportingMobileAppsList_581003(
    name: "dfareportingMobileAppsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/mobileApps",
    validator: validate_DfareportingMobileAppsList_581004,
    base: "/dfareporting/v3.1", url: url_DfareportingMobileAppsList_581005,
    schemes: {Scheme.Https})
type
  Call_DfareportingMobileAppsGet_581023 = ref object of OpenApiRestCall_578364
proc url_DfareportingMobileAppsGet_581025(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/mobileApps/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMobileAppsGet_581024(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one mobile app by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Mobile app ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581026 = path.getOrDefault("profileId")
  valid_581026 = validateParameter(valid_581026, JString, required = true,
                                 default = nil)
  if valid_581026 != nil:
    section.add "profileId", valid_581026
  var valid_581027 = path.getOrDefault("id")
  valid_581027 = validateParameter(valid_581027, JString, required = true,
                                 default = nil)
  if valid_581027 != nil:
    section.add "id", valid_581027
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581028 = query.getOrDefault("key")
  valid_581028 = validateParameter(valid_581028, JString, required = false,
                                 default = nil)
  if valid_581028 != nil:
    section.add "key", valid_581028
  var valid_581029 = query.getOrDefault("prettyPrint")
  valid_581029 = validateParameter(valid_581029, JBool, required = false,
                                 default = newJBool(true))
  if valid_581029 != nil:
    section.add "prettyPrint", valid_581029
  var valid_581030 = query.getOrDefault("oauth_token")
  valid_581030 = validateParameter(valid_581030, JString, required = false,
                                 default = nil)
  if valid_581030 != nil:
    section.add "oauth_token", valid_581030
  var valid_581031 = query.getOrDefault("alt")
  valid_581031 = validateParameter(valid_581031, JString, required = false,
                                 default = newJString("json"))
  if valid_581031 != nil:
    section.add "alt", valid_581031
  var valid_581032 = query.getOrDefault("userIp")
  valid_581032 = validateParameter(valid_581032, JString, required = false,
                                 default = nil)
  if valid_581032 != nil:
    section.add "userIp", valid_581032
  var valid_581033 = query.getOrDefault("quotaUser")
  valid_581033 = validateParameter(valid_581033, JString, required = false,
                                 default = nil)
  if valid_581033 != nil:
    section.add "quotaUser", valid_581033
  var valid_581034 = query.getOrDefault("fields")
  valid_581034 = validateParameter(valid_581034, JString, required = false,
                                 default = nil)
  if valid_581034 != nil:
    section.add "fields", valid_581034
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581035: Call_DfareportingMobileAppsGet_581023; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one mobile app by ID.
  ## 
  let valid = call_581035.validator(path, query, header, formData, body)
  let scheme = call_581035.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581035.url(scheme.get, call_581035.host, call_581035.base,
                         call_581035.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581035, url, valid)

proc call*(call_581036: Call_DfareportingMobileAppsGet_581023; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingMobileAppsGet
  ## Gets one mobile app by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Mobile app ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581037 = newJObject()
  var query_581038 = newJObject()
  add(query_581038, "key", newJString(key))
  add(query_581038, "prettyPrint", newJBool(prettyPrint))
  add(query_581038, "oauth_token", newJString(oauthToken))
  add(path_581037, "profileId", newJString(profileId))
  add(path_581037, "id", newJString(id))
  add(query_581038, "alt", newJString(alt))
  add(query_581038, "userIp", newJString(userIp))
  add(query_581038, "quotaUser", newJString(quotaUser))
  add(query_581038, "fields", newJString(fields))
  result = call_581036.call(path_581037, query_581038, nil, nil, nil)

var dfareportingMobileAppsGet* = Call_DfareportingMobileAppsGet_581023(
    name: "dfareportingMobileAppsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/mobileApps/{id}",
    validator: validate_DfareportingMobileAppsGet_581024,
    base: "/dfareporting/v3.1", url: url_DfareportingMobileAppsGet_581025,
    schemes: {Scheme.Https})
type
  Call_DfareportingMobileCarriersList_581039 = ref object of OpenApiRestCall_578364
proc url_DfareportingMobileCarriersList_581041(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/mobileCarriers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMobileCarriersList_581040(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of mobile carriers.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581042 = path.getOrDefault("profileId")
  valid_581042 = validateParameter(valid_581042, JString, required = true,
                                 default = nil)
  if valid_581042 != nil:
    section.add "profileId", valid_581042
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581043 = query.getOrDefault("key")
  valid_581043 = validateParameter(valid_581043, JString, required = false,
                                 default = nil)
  if valid_581043 != nil:
    section.add "key", valid_581043
  var valid_581044 = query.getOrDefault("prettyPrint")
  valid_581044 = validateParameter(valid_581044, JBool, required = false,
                                 default = newJBool(true))
  if valid_581044 != nil:
    section.add "prettyPrint", valid_581044
  var valid_581045 = query.getOrDefault("oauth_token")
  valid_581045 = validateParameter(valid_581045, JString, required = false,
                                 default = nil)
  if valid_581045 != nil:
    section.add "oauth_token", valid_581045
  var valid_581046 = query.getOrDefault("alt")
  valid_581046 = validateParameter(valid_581046, JString, required = false,
                                 default = newJString("json"))
  if valid_581046 != nil:
    section.add "alt", valid_581046
  var valid_581047 = query.getOrDefault("userIp")
  valid_581047 = validateParameter(valid_581047, JString, required = false,
                                 default = nil)
  if valid_581047 != nil:
    section.add "userIp", valid_581047
  var valid_581048 = query.getOrDefault("quotaUser")
  valid_581048 = validateParameter(valid_581048, JString, required = false,
                                 default = nil)
  if valid_581048 != nil:
    section.add "quotaUser", valid_581048
  var valid_581049 = query.getOrDefault("fields")
  valid_581049 = validateParameter(valid_581049, JString, required = false,
                                 default = nil)
  if valid_581049 != nil:
    section.add "fields", valid_581049
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581050: Call_DfareportingMobileCarriersList_581039; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of mobile carriers.
  ## 
  let valid = call_581050.validator(path, query, header, formData, body)
  let scheme = call_581050.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581050.url(scheme.get, call_581050.host, call_581050.base,
                         call_581050.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581050, url, valid)

proc call*(call_581051: Call_DfareportingMobileCarriersList_581039;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingMobileCarriersList
  ## Retrieves a list of mobile carriers.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581052 = newJObject()
  var query_581053 = newJObject()
  add(query_581053, "key", newJString(key))
  add(query_581053, "prettyPrint", newJBool(prettyPrint))
  add(query_581053, "oauth_token", newJString(oauthToken))
  add(path_581052, "profileId", newJString(profileId))
  add(query_581053, "alt", newJString(alt))
  add(query_581053, "userIp", newJString(userIp))
  add(query_581053, "quotaUser", newJString(quotaUser))
  add(query_581053, "fields", newJString(fields))
  result = call_581051.call(path_581052, query_581053, nil, nil, nil)

var dfareportingMobileCarriersList* = Call_DfareportingMobileCarriersList_581039(
    name: "dfareportingMobileCarriersList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/mobileCarriers",
    validator: validate_DfareportingMobileCarriersList_581040,
    base: "/dfareporting/v3.1", url: url_DfareportingMobileCarriersList_581041,
    schemes: {Scheme.Https})
type
  Call_DfareportingMobileCarriersGet_581054 = ref object of OpenApiRestCall_578364
proc url_DfareportingMobileCarriersGet_581056(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/mobileCarriers/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMobileCarriersGet_581055(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one mobile carrier by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Mobile carrier ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581057 = path.getOrDefault("profileId")
  valid_581057 = validateParameter(valid_581057, JString, required = true,
                                 default = nil)
  if valid_581057 != nil:
    section.add "profileId", valid_581057
  var valid_581058 = path.getOrDefault("id")
  valid_581058 = validateParameter(valid_581058, JString, required = true,
                                 default = nil)
  if valid_581058 != nil:
    section.add "id", valid_581058
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581059 = query.getOrDefault("key")
  valid_581059 = validateParameter(valid_581059, JString, required = false,
                                 default = nil)
  if valid_581059 != nil:
    section.add "key", valid_581059
  var valid_581060 = query.getOrDefault("prettyPrint")
  valid_581060 = validateParameter(valid_581060, JBool, required = false,
                                 default = newJBool(true))
  if valid_581060 != nil:
    section.add "prettyPrint", valid_581060
  var valid_581061 = query.getOrDefault("oauth_token")
  valid_581061 = validateParameter(valid_581061, JString, required = false,
                                 default = nil)
  if valid_581061 != nil:
    section.add "oauth_token", valid_581061
  var valid_581062 = query.getOrDefault("alt")
  valid_581062 = validateParameter(valid_581062, JString, required = false,
                                 default = newJString("json"))
  if valid_581062 != nil:
    section.add "alt", valid_581062
  var valid_581063 = query.getOrDefault("userIp")
  valid_581063 = validateParameter(valid_581063, JString, required = false,
                                 default = nil)
  if valid_581063 != nil:
    section.add "userIp", valid_581063
  var valid_581064 = query.getOrDefault("quotaUser")
  valid_581064 = validateParameter(valid_581064, JString, required = false,
                                 default = nil)
  if valid_581064 != nil:
    section.add "quotaUser", valid_581064
  var valid_581065 = query.getOrDefault("fields")
  valid_581065 = validateParameter(valid_581065, JString, required = false,
                                 default = nil)
  if valid_581065 != nil:
    section.add "fields", valid_581065
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581066: Call_DfareportingMobileCarriersGet_581054; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one mobile carrier by ID.
  ## 
  let valid = call_581066.validator(path, query, header, formData, body)
  let scheme = call_581066.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581066.url(scheme.get, call_581066.host, call_581066.base,
                         call_581066.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581066, url, valid)

proc call*(call_581067: Call_DfareportingMobileCarriersGet_581054;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingMobileCarriersGet
  ## Gets one mobile carrier by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Mobile carrier ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581068 = newJObject()
  var query_581069 = newJObject()
  add(query_581069, "key", newJString(key))
  add(query_581069, "prettyPrint", newJBool(prettyPrint))
  add(query_581069, "oauth_token", newJString(oauthToken))
  add(path_581068, "profileId", newJString(profileId))
  add(path_581068, "id", newJString(id))
  add(query_581069, "alt", newJString(alt))
  add(query_581069, "userIp", newJString(userIp))
  add(query_581069, "quotaUser", newJString(quotaUser))
  add(query_581069, "fields", newJString(fields))
  result = call_581067.call(path_581068, query_581069, nil, nil, nil)

var dfareportingMobileCarriersGet* = Call_DfareportingMobileCarriersGet_581054(
    name: "dfareportingMobileCarriersGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/mobileCarriers/{id}",
    validator: validate_DfareportingMobileCarriersGet_581055,
    base: "/dfareporting/v3.1", url: url_DfareportingMobileCarriersGet_581056,
    schemes: {Scheme.Https})
type
  Call_DfareportingOperatingSystemVersionsList_581070 = ref object of OpenApiRestCall_578364
proc url_DfareportingOperatingSystemVersionsList_581072(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/operatingSystemVersions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOperatingSystemVersionsList_581071(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of operating system versions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581073 = path.getOrDefault("profileId")
  valid_581073 = validateParameter(valid_581073, JString, required = true,
                                 default = nil)
  if valid_581073 != nil:
    section.add "profileId", valid_581073
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581074 = query.getOrDefault("key")
  valid_581074 = validateParameter(valid_581074, JString, required = false,
                                 default = nil)
  if valid_581074 != nil:
    section.add "key", valid_581074
  var valid_581075 = query.getOrDefault("prettyPrint")
  valid_581075 = validateParameter(valid_581075, JBool, required = false,
                                 default = newJBool(true))
  if valid_581075 != nil:
    section.add "prettyPrint", valid_581075
  var valid_581076 = query.getOrDefault("oauth_token")
  valid_581076 = validateParameter(valid_581076, JString, required = false,
                                 default = nil)
  if valid_581076 != nil:
    section.add "oauth_token", valid_581076
  var valid_581077 = query.getOrDefault("alt")
  valid_581077 = validateParameter(valid_581077, JString, required = false,
                                 default = newJString("json"))
  if valid_581077 != nil:
    section.add "alt", valid_581077
  var valid_581078 = query.getOrDefault("userIp")
  valid_581078 = validateParameter(valid_581078, JString, required = false,
                                 default = nil)
  if valid_581078 != nil:
    section.add "userIp", valid_581078
  var valid_581079 = query.getOrDefault("quotaUser")
  valid_581079 = validateParameter(valid_581079, JString, required = false,
                                 default = nil)
  if valid_581079 != nil:
    section.add "quotaUser", valid_581079
  var valid_581080 = query.getOrDefault("fields")
  valid_581080 = validateParameter(valid_581080, JString, required = false,
                                 default = nil)
  if valid_581080 != nil:
    section.add "fields", valid_581080
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581081: Call_DfareportingOperatingSystemVersionsList_581070;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of operating system versions.
  ## 
  let valid = call_581081.validator(path, query, header, formData, body)
  let scheme = call_581081.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581081.url(scheme.get, call_581081.host, call_581081.base,
                         call_581081.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581081, url, valid)

proc call*(call_581082: Call_DfareportingOperatingSystemVersionsList_581070;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingOperatingSystemVersionsList
  ## Retrieves a list of operating system versions.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581083 = newJObject()
  var query_581084 = newJObject()
  add(query_581084, "key", newJString(key))
  add(query_581084, "prettyPrint", newJBool(prettyPrint))
  add(query_581084, "oauth_token", newJString(oauthToken))
  add(path_581083, "profileId", newJString(profileId))
  add(query_581084, "alt", newJString(alt))
  add(query_581084, "userIp", newJString(userIp))
  add(query_581084, "quotaUser", newJString(quotaUser))
  add(query_581084, "fields", newJString(fields))
  result = call_581082.call(path_581083, query_581084, nil, nil, nil)

var dfareportingOperatingSystemVersionsList* = Call_DfareportingOperatingSystemVersionsList_581070(
    name: "dfareportingOperatingSystemVersionsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/operatingSystemVersions",
    validator: validate_DfareportingOperatingSystemVersionsList_581071,
    base: "/dfareporting/v3.1", url: url_DfareportingOperatingSystemVersionsList_581072,
    schemes: {Scheme.Https})
type
  Call_DfareportingOperatingSystemVersionsGet_581085 = ref object of OpenApiRestCall_578364
proc url_DfareportingOperatingSystemVersionsGet_581087(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/operatingSystemVersions/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOperatingSystemVersionsGet_581086(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one operating system version by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Operating system version ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581088 = path.getOrDefault("profileId")
  valid_581088 = validateParameter(valid_581088, JString, required = true,
                                 default = nil)
  if valid_581088 != nil:
    section.add "profileId", valid_581088
  var valid_581089 = path.getOrDefault("id")
  valid_581089 = validateParameter(valid_581089, JString, required = true,
                                 default = nil)
  if valid_581089 != nil:
    section.add "id", valid_581089
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581090 = query.getOrDefault("key")
  valid_581090 = validateParameter(valid_581090, JString, required = false,
                                 default = nil)
  if valid_581090 != nil:
    section.add "key", valid_581090
  var valid_581091 = query.getOrDefault("prettyPrint")
  valid_581091 = validateParameter(valid_581091, JBool, required = false,
                                 default = newJBool(true))
  if valid_581091 != nil:
    section.add "prettyPrint", valid_581091
  var valid_581092 = query.getOrDefault("oauth_token")
  valid_581092 = validateParameter(valid_581092, JString, required = false,
                                 default = nil)
  if valid_581092 != nil:
    section.add "oauth_token", valid_581092
  var valid_581093 = query.getOrDefault("alt")
  valid_581093 = validateParameter(valid_581093, JString, required = false,
                                 default = newJString("json"))
  if valid_581093 != nil:
    section.add "alt", valid_581093
  var valid_581094 = query.getOrDefault("userIp")
  valid_581094 = validateParameter(valid_581094, JString, required = false,
                                 default = nil)
  if valid_581094 != nil:
    section.add "userIp", valid_581094
  var valid_581095 = query.getOrDefault("quotaUser")
  valid_581095 = validateParameter(valid_581095, JString, required = false,
                                 default = nil)
  if valid_581095 != nil:
    section.add "quotaUser", valid_581095
  var valid_581096 = query.getOrDefault("fields")
  valid_581096 = validateParameter(valid_581096, JString, required = false,
                                 default = nil)
  if valid_581096 != nil:
    section.add "fields", valid_581096
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581097: Call_DfareportingOperatingSystemVersionsGet_581085;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one operating system version by ID.
  ## 
  let valid = call_581097.validator(path, query, header, formData, body)
  let scheme = call_581097.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581097.url(scheme.get, call_581097.host, call_581097.base,
                         call_581097.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581097, url, valid)

proc call*(call_581098: Call_DfareportingOperatingSystemVersionsGet_581085;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingOperatingSystemVersionsGet
  ## Gets one operating system version by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Operating system version ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581099 = newJObject()
  var query_581100 = newJObject()
  add(query_581100, "key", newJString(key))
  add(query_581100, "prettyPrint", newJBool(prettyPrint))
  add(query_581100, "oauth_token", newJString(oauthToken))
  add(path_581099, "profileId", newJString(profileId))
  add(path_581099, "id", newJString(id))
  add(query_581100, "alt", newJString(alt))
  add(query_581100, "userIp", newJString(userIp))
  add(query_581100, "quotaUser", newJString(quotaUser))
  add(query_581100, "fields", newJString(fields))
  result = call_581098.call(path_581099, query_581100, nil, nil, nil)

var dfareportingOperatingSystemVersionsGet* = Call_DfareportingOperatingSystemVersionsGet_581085(
    name: "dfareportingOperatingSystemVersionsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/operatingSystemVersions/{id}",
    validator: validate_DfareportingOperatingSystemVersionsGet_581086,
    base: "/dfareporting/v3.1", url: url_DfareportingOperatingSystemVersionsGet_581087,
    schemes: {Scheme.Https})
type
  Call_DfareportingOperatingSystemsList_581101 = ref object of OpenApiRestCall_578364
proc url_DfareportingOperatingSystemsList_581103(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/operatingSystems")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOperatingSystemsList_581102(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of operating systems.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581104 = path.getOrDefault("profileId")
  valid_581104 = validateParameter(valid_581104, JString, required = true,
                                 default = nil)
  if valid_581104 != nil:
    section.add "profileId", valid_581104
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581105 = query.getOrDefault("key")
  valid_581105 = validateParameter(valid_581105, JString, required = false,
                                 default = nil)
  if valid_581105 != nil:
    section.add "key", valid_581105
  var valid_581106 = query.getOrDefault("prettyPrint")
  valid_581106 = validateParameter(valid_581106, JBool, required = false,
                                 default = newJBool(true))
  if valid_581106 != nil:
    section.add "prettyPrint", valid_581106
  var valid_581107 = query.getOrDefault("oauth_token")
  valid_581107 = validateParameter(valid_581107, JString, required = false,
                                 default = nil)
  if valid_581107 != nil:
    section.add "oauth_token", valid_581107
  var valid_581108 = query.getOrDefault("alt")
  valid_581108 = validateParameter(valid_581108, JString, required = false,
                                 default = newJString("json"))
  if valid_581108 != nil:
    section.add "alt", valid_581108
  var valid_581109 = query.getOrDefault("userIp")
  valid_581109 = validateParameter(valid_581109, JString, required = false,
                                 default = nil)
  if valid_581109 != nil:
    section.add "userIp", valid_581109
  var valid_581110 = query.getOrDefault("quotaUser")
  valid_581110 = validateParameter(valid_581110, JString, required = false,
                                 default = nil)
  if valid_581110 != nil:
    section.add "quotaUser", valid_581110
  var valid_581111 = query.getOrDefault("fields")
  valid_581111 = validateParameter(valid_581111, JString, required = false,
                                 default = nil)
  if valid_581111 != nil:
    section.add "fields", valid_581111
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581112: Call_DfareportingOperatingSystemsList_581101;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of operating systems.
  ## 
  let valid = call_581112.validator(path, query, header, formData, body)
  let scheme = call_581112.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581112.url(scheme.get, call_581112.host, call_581112.base,
                         call_581112.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581112, url, valid)

proc call*(call_581113: Call_DfareportingOperatingSystemsList_581101;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingOperatingSystemsList
  ## Retrieves a list of operating systems.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581114 = newJObject()
  var query_581115 = newJObject()
  add(query_581115, "key", newJString(key))
  add(query_581115, "prettyPrint", newJBool(prettyPrint))
  add(query_581115, "oauth_token", newJString(oauthToken))
  add(path_581114, "profileId", newJString(profileId))
  add(query_581115, "alt", newJString(alt))
  add(query_581115, "userIp", newJString(userIp))
  add(query_581115, "quotaUser", newJString(quotaUser))
  add(query_581115, "fields", newJString(fields))
  result = call_581113.call(path_581114, query_581115, nil, nil, nil)

var dfareportingOperatingSystemsList* = Call_DfareportingOperatingSystemsList_581101(
    name: "dfareportingOperatingSystemsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/operatingSystems",
    validator: validate_DfareportingOperatingSystemsList_581102,
    base: "/dfareporting/v3.1", url: url_DfareportingOperatingSystemsList_581103,
    schemes: {Scheme.Https})
type
  Call_DfareportingOperatingSystemsGet_581116 = ref object of OpenApiRestCall_578364
proc url_DfareportingOperatingSystemsGet_581118(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "dartId" in path, "`dartId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/operatingSystems/"),
               (kind: VariableSegment, value: "dartId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOperatingSystemsGet_581117(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one operating system by DART ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   dartId: JString (required)
  ##         : Operating system DART ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581119 = path.getOrDefault("profileId")
  valid_581119 = validateParameter(valid_581119, JString, required = true,
                                 default = nil)
  if valid_581119 != nil:
    section.add "profileId", valid_581119
  var valid_581120 = path.getOrDefault("dartId")
  valid_581120 = validateParameter(valid_581120, JString, required = true,
                                 default = nil)
  if valid_581120 != nil:
    section.add "dartId", valid_581120
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581121 = query.getOrDefault("key")
  valid_581121 = validateParameter(valid_581121, JString, required = false,
                                 default = nil)
  if valid_581121 != nil:
    section.add "key", valid_581121
  var valid_581122 = query.getOrDefault("prettyPrint")
  valid_581122 = validateParameter(valid_581122, JBool, required = false,
                                 default = newJBool(true))
  if valid_581122 != nil:
    section.add "prettyPrint", valid_581122
  var valid_581123 = query.getOrDefault("oauth_token")
  valid_581123 = validateParameter(valid_581123, JString, required = false,
                                 default = nil)
  if valid_581123 != nil:
    section.add "oauth_token", valid_581123
  var valid_581124 = query.getOrDefault("alt")
  valid_581124 = validateParameter(valid_581124, JString, required = false,
                                 default = newJString("json"))
  if valid_581124 != nil:
    section.add "alt", valid_581124
  var valid_581125 = query.getOrDefault("userIp")
  valid_581125 = validateParameter(valid_581125, JString, required = false,
                                 default = nil)
  if valid_581125 != nil:
    section.add "userIp", valid_581125
  var valid_581126 = query.getOrDefault("quotaUser")
  valid_581126 = validateParameter(valid_581126, JString, required = false,
                                 default = nil)
  if valid_581126 != nil:
    section.add "quotaUser", valid_581126
  var valid_581127 = query.getOrDefault("fields")
  valid_581127 = validateParameter(valid_581127, JString, required = false,
                                 default = nil)
  if valid_581127 != nil:
    section.add "fields", valid_581127
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581128: Call_DfareportingOperatingSystemsGet_581116;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one operating system by DART ID.
  ## 
  let valid = call_581128.validator(path, query, header, formData, body)
  let scheme = call_581128.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581128.url(scheme.get, call_581128.host, call_581128.base,
                         call_581128.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581128, url, valid)

proc call*(call_581129: Call_DfareportingOperatingSystemsGet_581116;
          profileId: string; dartId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingOperatingSystemsGet
  ## Gets one operating system by DART ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   dartId: string (required)
  ##         : Operating system DART ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581130 = newJObject()
  var query_581131 = newJObject()
  add(query_581131, "key", newJString(key))
  add(query_581131, "prettyPrint", newJBool(prettyPrint))
  add(query_581131, "oauth_token", newJString(oauthToken))
  add(path_581130, "profileId", newJString(profileId))
  add(query_581131, "alt", newJString(alt))
  add(query_581131, "userIp", newJString(userIp))
  add(query_581131, "quotaUser", newJString(quotaUser))
  add(path_581130, "dartId", newJString(dartId))
  add(query_581131, "fields", newJString(fields))
  result = call_581129.call(path_581130, query_581131, nil, nil, nil)

var dfareportingOperatingSystemsGet* = Call_DfareportingOperatingSystemsGet_581116(
    name: "dfareportingOperatingSystemsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/operatingSystems/{dartId}",
    validator: validate_DfareportingOperatingSystemsGet_581117,
    base: "/dfareporting/v3.1", url: url_DfareportingOperatingSystemsGet_581118,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsUpdate_581166 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementGroupsUpdate_581168(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsUpdate_581167(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581169 = path.getOrDefault("profileId")
  valid_581169 = validateParameter(valid_581169, JString, required = true,
                                 default = nil)
  if valid_581169 != nil:
    section.add "profileId", valid_581169
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581170 = query.getOrDefault("key")
  valid_581170 = validateParameter(valid_581170, JString, required = false,
                                 default = nil)
  if valid_581170 != nil:
    section.add "key", valid_581170
  var valid_581171 = query.getOrDefault("prettyPrint")
  valid_581171 = validateParameter(valid_581171, JBool, required = false,
                                 default = newJBool(true))
  if valid_581171 != nil:
    section.add "prettyPrint", valid_581171
  var valid_581172 = query.getOrDefault("oauth_token")
  valid_581172 = validateParameter(valid_581172, JString, required = false,
                                 default = nil)
  if valid_581172 != nil:
    section.add "oauth_token", valid_581172
  var valid_581173 = query.getOrDefault("alt")
  valid_581173 = validateParameter(valid_581173, JString, required = false,
                                 default = newJString("json"))
  if valid_581173 != nil:
    section.add "alt", valid_581173
  var valid_581174 = query.getOrDefault("userIp")
  valid_581174 = validateParameter(valid_581174, JString, required = false,
                                 default = nil)
  if valid_581174 != nil:
    section.add "userIp", valid_581174
  var valid_581175 = query.getOrDefault("quotaUser")
  valid_581175 = validateParameter(valid_581175, JString, required = false,
                                 default = nil)
  if valid_581175 != nil:
    section.add "quotaUser", valid_581175
  var valid_581176 = query.getOrDefault("fields")
  valid_581176 = validateParameter(valid_581176, JString, required = false,
                                 default = nil)
  if valid_581176 != nil:
    section.add "fields", valid_581176
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581178: Call_DfareportingPlacementGroupsUpdate_581166;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing placement group.
  ## 
  let valid = call_581178.validator(path, query, header, formData, body)
  let scheme = call_581178.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581178.url(scheme.get, call_581178.host, call_581178.base,
                         call_581178.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581178, url, valid)

proc call*(call_581179: Call_DfareportingPlacementGroupsUpdate_581166;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingPlacementGroupsUpdate
  ## Updates an existing placement group.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581180 = newJObject()
  var query_581181 = newJObject()
  var body_581182 = newJObject()
  add(query_581181, "key", newJString(key))
  add(query_581181, "prettyPrint", newJBool(prettyPrint))
  add(query_581181, "oauth_token", newJString(oauthToken))
  add(path_581180, "profileId", newJString(profileId))
  add(query_581181, "alt", newJString(alt))
  add(query_581181, "userIp", newJString(userIp))
  add(query_581181, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581182 = body
  add(query_581181, "fields", newJString(fields))
  result = call_581179.call(path_581180, query_581181, nil, nil, body_581182)

var dfareportingPlacementGroupsUpdate* = Call_DfareportingPlacementGroupsUpdate_581166(
    name: "dfareportingPlacementGroupsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups",
    validator: validate_DfareportingPlacementGroupsUpdate_581167,
    base: "/dfareporting/v3.1", url: url_DfareportingPlacementGroupsUpdate_581168,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsInsert_581183 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementGroupsInsert_581185(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsInsert_581184(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new placement group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581186 = path.getOrDefault("profileId")
  valid_581186 = validateParameter(valid_581186, JString, required = true,
                                 default = nil)
  if valid_581186 != nil:
    section.add "profileId", valid_581186
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581187 = query.getOrDefault("key")
  valid_581187 = validateParameter(valid_581187, JString, required = false,
                                 default = nil)
  if valid_581187 != nil:
    section.add "key", valid_581187
  var valid_581188 = query.getOrDefault("prettyPrint")
  valid_581188 = validateParameter(valid_581188, JBool, required = false,
                                 default = newJBool(true))
  if valid_581188 != nil:
    section.add "prettyPrint", valid_581188
  var valid_581189 = query.getOrDefault("oauth_token")
  valid_581189 = validateParameter(valid_581189, JString, required = false,
                                 default = nil)
  if valid_581189 != nil:
    section.add "oauth_token", valid_581189
  var valid_581190 = query.getOrDefault("alt")
  valid_581190 = validateParameter(valid_581190, JString, required = false,
                                 default = newJString("json"))
  if valid_581190 != nil:
    section.add "alt", valid_581190
  var valid_581191 = query.getOrDefault("userIp")
  valid_581191 = validateParameter(valid_581191, JString, required = false,
                                 default = nil)
  if valid_581191 != nil:
    section.add "userIp", valid_581191
  var valid_581192 = query.getOrDefault("quotaUser")
  valid_581192 = validateParameter(valid_581192, JString, required = false,
                                 default = nil)
  if valid_581192 != nil:
    section.add "quotaUser", valid_581192
  var valid_581193 = query.getOrDefault("fields")
  valid_581193 = validateParameter(valid_581193, JString, required = false,
                                 default = nil)
  if valid_581193 != nil:
    section.add "fields", valid_581193
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581195: Call_DfareportingPlacementGroupsInsert_581183;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new placement group.
  ## 
  let valid = call_581195.validator(path, query, header, formData, body)
  let scheme = call_581195.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581195.url(scheme.get, call_581195.host, call_581195.base,
                         call_581195.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581195, url, valid)

proc call*(call_581196: Call_DfareportingPlacementGroupsInsert_581183;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingPlacementGroupsInsert
  ## Inserts a new placement group.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581197 = newJObject()
  var query_581198 = newJObject()
  var body_581199 = newJObject()
  add(query_581198, "key", newJString(key))
  add(query_581198, "prettyPrint", newJBool(prettyPrint))
  add(query_581198, "oauth_token", newJString(oauthToken))
  add(path_581197, "profileId", newJString(profileId))
  add(query_581198, "alt", newJString(alt))
  add(query_581198, "userIp", newJString(userIp))
  add(query_581198, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581199 = body
  add(query_581198, "fields", newJString(fields))
  result = call_581196.call(path_581197, query_581198, nil, nil, body_581199)

var dfareportingPlacementGroupsInsert* = Call_DfareportingPlacementGroupsInsert_581183(
    name: "dfareportingPlacementGroupsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups",
    validator: validate_DfareportingPlacementGroupsInsert_581184,
    base: "/dfareporting/v3.1", url: url_DfareportingPlacementGroupsInsert_581185,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsList_581132 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementGroupsList_581134(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsList_581133(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of placement groups, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581135 = path.getOrDefault("profileId")
  valid_581135 = validateParameter(valid_581135, JString, required = true,
                                 default = nil)
  if valid_581135 != nil:
    section.add "profileId", valid_581135
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   maxStartDate: JString
  ##               : Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   placementStrategyIds: JArray
  ##                       : Select only placement groups that are associated with these placement strategies.
  ##   pricingTypes: JArray
  ##               : Select only placement groups with these pricing types.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   contentCategoryIds: JArray
  ##                     : Select only placement groups that are associated with these content categories.
  ##   advertiserIds: JArray
  ##                : Select only placement groups that belong to these advertisers.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived placements. Don't set this field to select both archived and non-archived placements.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   directorySiteIds: JArray
  ##                   : Select only placement groups that are associated with these directory sites.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   minStartDate: JString
  ##               : Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   searchString: JString
  ##               : Allows searching for placement groups by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placement groups with names like "placement group June 2015", "placement group May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementgroup" will match placement groups with name "my placementgroup", "placementgroup 2015", or simply "placementgroup".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   siteIds: JArray
  ##          : Select only placement groups that are associated with these sites.
  ##   maxEndDate: JString
  ##             : Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   campaignIds: JArray
  ##              : Select only placement groups that belong to these campaigns.
  ##   placementGroupType: JString
  ##                     : Select only placement groups belonging with this group type. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting.
  ##   ids: JArray
  ##      : Select only placement groups with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   minEndDate: JString
  ##             : Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
  section = newJObject()
  var valid_581136 = query.getOrDefault("key")
  valid_581136 = validateParameter(valid_581136, JString, required = false,
                                 default = nil)
  if valid_581136 != nil:
    section.add "key", valid_581136
  var valid_581137 = query.getOrDefault("maxStartDate")
  valid_581137 = validateParameter(valid_581137, JString, required = false,
                                 default = nil)
  if valid_581137 != nil:
    section.add "maxStartDate", valid_581137
  var valid_581138 = query.getOrDefault("prettyPrint")
  valid_581138 = validateParameter(valid_581138, JBool, required = false,
                                 default = newJBool(true))
  if valid_581138 != nil:
    section.add "prettyPrint", valid_581138
  var valid_581139 = query.getOrDefault("oauth_token")
  valid_581139 = validateParameter(valid_581139, JString, required = false,
                                 default = nil)
  if valid_581139 != nil:
    section.add "oauth_token", valid_581139
  var valid_581140 = query.getOrDefault("placementStrategyIds")
  valid_581140 = validateParameter(valid_581140, JArray, required = false,
                                 default = nil)
  if valid_581140 != nil:
    section.add "placementStrategyIds", valid_581140
  var valid_581141 = query.getOrDefault("pricingTypes")
  valid_581141 = validateParameter(valid_581141, JArray, required = false,
                                 default = nil)
  if valid_581141 != nil:
    section.add "pricingTypes", valid_581141
  var valid_581142 = query.getOrDefault("sortField")
  valid_581142 = validateParameter(valid_581142, JString, required = false,
                                 default = newJString("ID"))
  if valid_581142 != nil:
    section.add "sortField", valid_581142
  var valid_581143 = query.getOrDefault("contentCategoryIds")
  valid_581143 = validateParameter(valid_581143, JArray, required = false,
                                 default = nil)
  if valid_581143 != nil:
    section.add "contentCategoryIds", valid_581143
  var valid_581144 = query.getOrDefault("advertiserIds")
  valid_581144 = validateParameter(valid_581144, JArray, required = false,
                                 default = nil)
  if valid_581144 != nil:
    section.add "advertiserIds", valid_581144
  var valid_581145 = query.getOrDefault("alt")
  valid_581145 = validateParameter(valid_581145, JString, required = false,
                                 default = newJString("json"))
  if valid_581145 != nil:
    section.add "alt", valid_581145
  var valid_581146 = query.getOrDefault("userIp")
  valid_581146 = validateParameter(valid_581146, JString, required = false,
                                 default = nil)
  if valid_581146 != nil:
    section.add "userIp", valid_581146
  var valid_581147 = query.getOrDefault("archived")
  valid_581147 = validateParameter(valid_581147, JBool, required = false, default = nil)
  if valid_581147 != nil:
    section.add "archived", valid_581147
  var valid_581148 = query.getOrDefault("quotaUser")
  valid_581148 = validateParameter(valid_581148, JString, required = false,
                                 default = nil)
  if valid_581148 != nil:
    section.add "quotaUser", valid_581148
  var valid_581149 = query.getOrDefault("directorySiteIds")
  valid_581149 = validateParameter(valid_581149, JArray, required = false,
                                 default = nil)
  if valid_581149 != nil:
    section.add "directorySiteIds", valid_581149
  var valid_581150 = query.getOrDefault("pageToken")
  valid_581150 = validateParameter(valid_581150, JString, required = false,
                                 default = nil)
  if valid_581150 != nil:
    section.add "pageToken", valid_581150
  var valid_581151 = query.getOrDefault("minStartDate")
  valid_581151 = validateParameter(valid_581151, JString, required = false,
                                 default = nil)
  if valid_581151 != nil:
    section.add "minStartDate", valid_581151
  var valid_581152 = query.getOrDefault("searchString")
  valid_581152 = validateParameter(valid_581152, JString, required = false,
                                 default = nil)
  if valid_581152 != nil:
    section.add "searchString", valid_581152
  var valid_581153 = query.getOrDefault("sortOrder")
  valid_581153 = validateParameter(valid_581153, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581153 != nil:
    section.add "sortOrder", valid_581153
  var valid_581154 = query.getOrDefault("siteIds")
  valid_581154 = validateParameter(valid_581154, JArray, required = false,
                                 default = nil)
  if valid_581154 != nil:
    section.add "siteIds", valid_581154
  var valid_581155 = query.getOrDefault("maxEndDate")
  valid_581155 = validateParameter(valid_581155, JString, required = false,
                                 default = nil)
  if valid_581155 != nil:
    section.add "maxEndDate", valid_581155
  var valid_581156 = query.getOrDefault("campaignIds")
  valid_581156 = validateParameter(valid_581156, JArray, required = false,
                                 default = nil)
  if valid_581156 != nil:
    section.add "campaignIds", valid_581156
  var valid_581157 = query.getOrDefault("placementGroupType")
  valid_581157 = validateParameter(valid_581157, JString, required = false,
                                 default = newJString("PLACEMENT_PACKAGE"))
  if valid_581157 != nil:
    section.add "placementGroupType", valid_581157
  var valid_581158 = query.getOrDefault("ids")
  valid_581158 = validateParameter(valid_581158, JArray, required = false,
                                 default = nil)
  if valid_581158 != nil:
    section.add "ids", valid_581158
  var valid_581159 = query.getOrDefault("fields")
  valid_581159 = validateParameter(valid_581159, JString, required = false,
                                 default = nil)
  if valid_581159 != nil:
    section.add "fields", valid_581159
  var valid_581160 = query.getOrDefault("maxResults")
  valid_581160 = validateParameter(valid_581160, JInt, required = false,
                                 default = newJInt(800))
  if valid_581160 != nil:
    section.add "maxResults", valid_581160
  var valid_581161 = query.getOrDefault("minEndDate")
  valid_581161 = validateParameter(valid_581161, JString, required = false,
                                 default = nil)
  if valid_581161 != nil:
    section.add "minEndDate", valid_581161
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581162: Call_DfareportingPlacementGroupsList_581132;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of placement groups, possibly filtered. This method supports paging.
  ## 
  let valid = call_581162.validator(path, query, header, formData, body)
  let scheme = call_581162.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581162.url(scheme.get, call_581162.host, call_581162.base,
                         call_581162.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581162, url, valid)

proc call*(call_581163: Call_DfareportingPlacementGroupsList_581132;
          profileId: string; key: string = ""; maxStartDate: string = "";
          prettyPrint: bool = true; oauthToken: string = "";
          placementStrategyIds: JsonNode = nil; pricingTypes: JsonNode = nil;
          sortField: string = "ID"; contentCategoryIds: JsonNode = nil;
          advertiserIds: JsonNode = nil; alt: string = "json"; userIp: string = "";
          archived: bool = false; quotaUser: string = "";
          directorySiteIds: JsonNode = nil; pageToken: string = "";
          minStartDate: string = ""; searchString: string = "";
          sortOrder: string = "ASCENDING"; siteIds: JsonNode = nil;
          maxEndDate: string = ""; campaignIds: JsonNode = nil;
          placementGroupType: string = "PLACEMENT_PACKAGE"; ids: JsonNode = nil;
          fields: string = ""; maxResults: int = 800; minEndDate: string = ""): Recallable =
  ## dfareportingPlacementGroupsList
  ## Retrieves a list of placement groups, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   maxStartDate: string
  ##               : Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   placementStrategyIds: JArray
  ##                       : Select only placement groups that are associated with these placement strategies.
  ##   pricingTypes: JArray
  ##               : Select only placement groups with these pricing types.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   contentCategoryIds: JArray
  ##                     : Select only placement groups that are associated with these content categories.
  ##   advertiserIds: JArray
  ##                : Select only placement groups that belong to these advertisers.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived placements. Don't set this field to select both archived and non-archived placements.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   directorySiteIds: JArray
  ##                   : Select only placement groups that are associated with these directory sites.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   minStartDate: string
  ##               : Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   searchString: string
  ##               : Allows searching for placement groups by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placement groups with names like "placement group June 2015", "placement group May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementgroup" will match placement groups with name "my placementgroup", "placementgroup 2015", or simply "placementgroup".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   siteIds: JArray
  ##          : Select only placement groups that are associated with these sites.
  ##   maxEndDate: string
  ##             : Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   campaignIds: JArray
  ##              : Select only placement groups that belong to these campaigns.
  ##   placementGroupType: string
  ##                     : Select only placement groups belonging with this group type. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting.
  ##   ids: JArray
  ##      : Select only placement groups with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   minEndDate: string
  ##             : Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
  var path_581164 = newJObject()
  var query_581165 = newJObject()
  add(query_581165, "key", newJString(key))
  add(query_581165, "maxStartDate", newJString(maxStartDate))
  add(query_581165, "prettyPrint", newJBool(prettyPrint))
  add(query_581165, "oauth_token", newJString(oauthToken))
  if placementStrategyIds != nil:
    query_581165.add "placementStrategyIds", placementStrategyIds
  if pricingTypes != nil:
    query_581165.add "pricingTypes", pricingTypes
  add(path_581164, "profileId", newJString(profileId))
  add(query_581165, "sortField", newJString(sortField))
  if contentCategoryIds != nil:
    query_581165.add "contentCategoryIds", contentCategoryIds
  if advertiserIds != nil:
    query_581165.add "advertiserIds", advertiserIds
  add(query_581165, "alt", newJString(alt))
  add(query_581165, "userIp", newJString(userIp))
  add(query_581165, "archived", newJBool(archived))
  add(query_581165, "quotaUser", newJString(quotaUser))
  if directorySiteIds != nil:
    query_581165.add "directorySiteIds", directorySiteIds
  add(query_581165, "pageToken", newJString(pageToken))
  add(query_581165, "minStartDate", newJString(minStartDate))
  add(query_581165, "searchString", newJString(searchString))
  add(query_581165, "sortOrder", newJString(sortOrder))
  if siteIds != nil:
    query_581165.add "siteIds", siteIds
  add(query_581165, "maxEndDate", newJString(maxEndDate))
  if campaignIds != nil:
    query_581165.add "campaignIds", campaignIds
  add(query_581165, "placementGroupType", newJString(placementGroupType))
  if ids != nil:
    query_581165.add "ids", ids
  add(query_581165, "fields", newJString(fields))
  add(query_581165, "maxResults", newJInt(maxResults))
  add(query_581165, "minEndDate", newJString(minEndDate))
  result = call_581163.call(path_581164, query_581165, nil, nil, nil)

var dfareportingPlacementGroupsList* = Call_DfareportingPlacementGroupsList_581132(
    name: "dfareportingPlacementGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups",
    validator: validate_DfareportingPlacementGroupsList_581133,
    base: "/dfareporting/v3.1", url: url_DfareportingPlacementGroupsList_581134,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsPatch_581200 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementGroupsPatch_581202(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsPatch_581201(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement group. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581203 = path.getOrDefault("profileId")
  valid_581203 = validateParameter(valid_581203, JString, required = true,
                                 default = nil)
  if valid_581203 != nil:
    section.add "profileId", valid_581203
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Placement group ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581204 = query.getOrDefault("key")
  valid_581204 = validateParameter(valid_581204, JString, required = false,
                                 default = nil)
  if valid_581204 != nil:
    section.add "key", valid_581204
  var valid_581205 = query.getOrDefault("prettyPrint")
  valid_581205 = validateParameter(valid_581205, JBool, required = false,
                                 default = newJBool(true))
  if valid_581205 != nil:
    section.add "prettyPrint", valid_581205
  var valid_581206 = query.getOrDefault("oauth_token")
  valid_581206 = validateParameter(valid_581206, JString, required = false,
                                 default = nil)
  if valid_581206 != nil:
    section.add "oauth_token", valid_581206
  var valid_581207 = query.getOrDefault("alt")
  valid_581207 = validateParameter(valid_581207, JString, required = false,
                                 default = newJString("json"))
  if valid_581207 != nil:
    section.add "alt", valid_581207
  var valid_581208 = query.getOrDefault("userIp")
  valid_581208 = validateParameter(valid_581208, JString, required = false,
                                 default = nil)
  if valid_581208 != nil:
    section.add "userIp", valid_581208
  var valid_581209 = query.getOrDefault("quotaUser")
  valid_581209 = validateParameter(valid_581209, JString, required = false,
                                 default = nil)
  if valid_581209 != nil:
    section.add "quotaUser", valid_581209
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_581210 = query.getOrDefault("id")
  valid_581210 = validateParameter(valid_581210, JString, required = true,
                                 default = nil)
  if valid_581210 != nil:
    section.add "id", valid_581210
  var valid_581211 = query.getOrDefault("fields")
  valid_581211 = validateParameter(valid_581211, JString, required = false,
                                 default = nil)
  if valid_581211 != nil:
    section.add "fields", valid_581211
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581213: Call_DfareportingPlacementGroupsPatch_581200;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing placement group. This method supports patch semantics.
  ## 
  let valid = call_581213.validator(path, query, header, formData, body)
  let scheme = call_581213.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581213.url(scheme.get, call_581213.host, call_581213.base,
                         call_581213.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581213, url, valid)

proc call*(call_581214: Call_DfareportingPlacementGroupsPatch_581200;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingPlacementGroupsPatch
  ## Updates an existing placement group. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Placement group ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581215 = newJObject()
  var query_581216 = newJObject()
  var body_581217 = newJObject()
  add(query_581216, "key", newJString(key))
  add(query_581216, "prettyPrint", newJBool(prettyPrint))
  add(query_581216, "oauth_token", newJString(oauthToken))
  add(path_581215, "profileId", newJString(profileId))
  add(query_581216, "alt", newJString(alt))
  add(query_581216, "userIp", newJString(userIp))
  add(query_581216, "quotaUser", newJString(quotaUser))
  add(query_581216, "id", newJString(id))
  if body != nil:
    body_581217 = body
  add(query_581216, "fields", newJString(fields))
  result = call_581214.call(path_581215, query_581216, nil, nil, body_581217)

var dfareportingPlacementGroupsPatch* = Call_DfareportingPlacementGroupsPatch_581200(
    name: "dfareportingPlacementGroupsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups",
    validator: validate_DfareportingPlacementGroupsPatch_581201,
    base: "/dfareporting/v3.1", url: url_DfareportingPlacementGroupsPatch_581202,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsGet_581218 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementGroupsGet_581220(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsGet_581219(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one placement group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Placement group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581221 = path.getOrDefault("profileId")
  valid_581221 = validateParameter(valid_581221, JString, required = true,
                                 default = nil)
  if valid_581221 != nil:
    section.add "profileId", valid_581221
  var valid_581222 = path.getOrDefault("id")
  valid_581222 = validateParameter(valid_581222, JString, required = true,
                                 default = nil)
  if valid_581222 != nil:
    section.add "id", valid_581222
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581223 = query.getOrDefault("key")
  valid_581223 = validateParameter(valid_581223, JString, required = false,
                                 default = nil)
  if valid_581223 != nil:
    section.add "key", valid_581223
  var valid_581224 = query.getOrDefault("prettyPrint")
  valid_581224 = validateParameter(valid_581224, JBool, required = false,
                                 default = newJBool(true))
  if valid_581224 != nil:
    section.add "prettyPrint", valid_581224
  var valid_581225 = query.getOrDefault("oauth_token")
  valid_581225 = validateParameter(valid_581225, JString, required = false,
                                 default = nil)
  if valid_581225 != nil:
    section.add "oauth_token", valid_581225
  var valid_581226 = query.getOrDefault("alt")
  valid_581226 = validateParameter(valid_581226, JString, required = false,
                                 default = newJString("json"))
  if valid_581226 != nil:
    section.add "alt", valid_581226
  var valid_581227 = query.getOrDefault("userIp")
  valid_581227 = validateParameter(valid_581227, JString, required = false,
                                 default = nil)
  if valid_581227 != nil:
    section.add "userIp", valid_581227
  var valid_581228 = query.getOrDefault("quotaUser")
  valid_581228 = validateParameter(valid_581228, JString, required = false,
                                 default = nil)
  if valid_581228 != nil:
    section.add "quotaUser", valid_581228
  var valid_581229 = query.getOrDefault("fields")
  valid_581229 = validateParameter(valid_581229, JString, required = false,
                                 default = nil)
  if valid_581229 != nil:
    section.add "fields", valid_581229
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581230: Call_DfareportingPlacementGroupsGet_581218; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one placement group by ID.
  ## 
  let valid = call_581230.validator(path, query, header, formData, body)
  let scheme = call_581230.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581230.url(scheme.get, call_581230.host, call_581230.base,
                         call_581230.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581230, url, valid)

proc call*(call_581231: Call_DfareportingPlacementGroupsGet_581218;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingPlacementGroupsGet
  ## Gets one placement group by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Placement group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581232 = newJObject()
  var query_581233 = newJObject()
  add(query_581233, "key", newJString(key))
  add(query_581233, "prettyPrint", newJBool(prettyPrint))
  add(query_581233, "oauth_token", newJString(oauthToken))
  add(path_581232, "profileId", newJString(profileId))
  add(path_581232, "id", newJString(id))
  add(query_581233, "alt", newJString(alt))
  add(query_581233, "userIp", newJString(userIp))
  add(query_581233, "quotaUser", newJString(quotaUser))
  add(query_581233, "fields", newJString(fields))
  result = call_581231.call(path_581232, query_581233, nil, nil, nil)

var dfareportingPlacementGroupsGet* = Call_DfareportingPlacementGroupsGet_581218(
    name: "dfareportingPlacementGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups/{id}",
    validator: validate_DfareportingPlacementGroupsGet_581219,
    base: "/dfareporting/v3.1", url: url_DfareportingPlacementGroupsGet_581220,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesUpdate_581255 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementStrategiesUpdate_581257(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesUpdate_581256(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement strategy.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581258 = path.getOrDefault("profileId")
  valid_581258 = validateParameter(valid_581258, JString, required = true,
                                 default = nil)
  if valid_581258 != nil:
    section.add "profileId", valid_581258
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581259 = query.getOrDefault("key")
  valid_581259 = validateParameter(valid_581259, JString, required = false,
                                 default = nil)
  if valid_581259 != nil:
    section.add "key", valid_581259
  var valid_581260 = query.getOrDefault("prettyPrint")
  valid_581260 = validateParameter(valid_581260, JBool, required = false,
                                 default = newJBool(true))
  if valid_581260 != nil:
    section.add "prettyPrint", valid_581260
  var valid_581261 = query.getOrDefault("oauth_token")
  valid_581261 = validateParameter(valid_581261, JString, required = false,
                                 default = nil)
  if valid_581261 != nil:
    section.add "oauth_token", valid_581261
  var valid_581262 = query.getOrDefault("alt")
  valid_581262 = validateParameter(valid_581262, JString, required = false,
                                 default = newJString("json"))
  if valid_581262 != nil:
    section.add "alt", valid_581262
  var valid_581263 = query.getOrDefault("userIp")
  valid_581263 = validateParameter(valid_581263, JString, required = false,
                                 default = nil)
  if valid_581263 != nil:
    section.add "userIp", valid_581263
  var valid_581264 = query.getOrDefault("quotaUser")
  valid_581264 = validateParameter(valid_581264, JString, required = false,
                                 default = nil)
  if valid_581264 != nil:
    section.add "quotaUser", valid_581264
  var valid_581265 = query.getOrDefault("fields")
  valid_581265 = validateParameter(valid_581265, JString, required = false,
                                 default = nil)
  if valid_581265 != nil:
    section.add "fields", valid_581265
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581267: Call_DfareportingPlacementStrategiesUpdate_581255;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing placement strategy.
  ## 
  let valid = call_581267.validator(path, query, header, formData, body)
  let scheme = call_581267.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581267.url(scheme.get, call_581267.host, call_581267.base,
                         call_581267.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581267, url, valid)

proc call*(call_581268: Call_DfareportingPlacementStrategiesUpdate_581255;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingPlacementStrategiesUpdate
  ## Updates an existing placement strategy.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581269 = newJObject()
  var query_581270 = newJObject()
  var body_581271 = newJObject()
  add(query_581270, "key", newJString(key))
  add(query_581270, "prettyPrint", newJBool(prettyPrint))
  add(query_581270, "oauth_token", newJString(oauthToken))
  add(path_581269, "profileId", newJString(profileId))
  add(query_581270, "alt", newJString(alt))
  add(query_581270, "userIp", newJString(userIp))
  add(query_581270, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581271 = body
  add(query_581270, "fields", newJString(fields))
  result = call_581268.call(path_581269, query_581270, nil, nil, body_581271)

var dfareportingPlacementStrategiesUpdate* = Call_DfareportingPlacementStrategiesUpdate_581255(
    name: "dfareportingPlacementStrategiesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies",
    validator: validate_DfareportingPlacementStrategiesUpdate_581256,
    base: "/dfareporting/v3.1", url: url_DfareportingPlacementStrategiesUpdate_581257,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesInsert_581272 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementStrategiesInsert_581274(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesInsert_581273(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new placement strategy.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581275 = path.getOrDefault("profileId")
  valid_581275 = validateParameter(valid_581275, JString, required = true,
                                 default = nil)
  if valid_581275 != nil:
    section.add "profileId", valid_581275
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581276 = query.getOrDefault("key")
  valid_581276 = validateParameter(valid_581276, JString, required = false,
                                 default = nil)
  if valid_581276 != nil:
    section.add "key", valid_581276
  var valid_581277 = query.getOrDefault("prettyPrint")
  valid_581277 = validateParameter(valid_581277, JBool, required = false,
                                 default = newJBool(true))
  if valid_581277 != nil:
    section.add "prettyPrint", valid_581277
  var valid_581278 = query.getOrDefault("oauth_token")
  valid_581278 = validateParameter(valid_581278, JString, required = false,
                                 default = nil)
  if valid_581278 != nil:
    section.add "oauth_token", valid_581278
  var valid_581279 = query.getOrDefault("alt")
  valid_581279 = validateParameter(valid_581279, JString, required = false,
                                 default = newJString("json"))
  if valid_581279 != nil:
    section.add "alt", valid_581279
  var valid_581280 = query.getOrDefault("userIp")
  valid_581280 = validateParameter(valid_581280, JString, required = false,
                                 default = nil)
  if valid_581280 != nil:
    section.add "userIp", valid_581280
  var valid_581281 = query.getOrDefault("quotaUser")
  valid_581281 = validateParameter(valid_581281, JString, required = false,
                                 default = nil)
  if valid_581281 != nil:
    section.add "quotaUser", valid_581281
  var valid_581282 = query.getOrDefault("fields")
  valid_581282 = validateParameter(valid_581282, JString, required = false,
                                 default = nil)
  if valid_581282 != nil:
    section.add "fields", valid_581282
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581284: Call_DfareportingPlacementStrategiesInsert_581272;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new placement strategy.
  ## 
  let valid = call_581284.validator(path, query, header, formData, body)
  let scheme = call_581284.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581284.url(scheme.get, call_581284.host, call_581284.base,
                         call_581284.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581284, url, valid)

proc call*(call_581285: Call_DfareportingPlacementStrategiesInsert_581272;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingPlacementStrategiesInsert
  ## Inserts a new placement strategy.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581286 = newJObject()
  var query_581287 = newJObject()
  var body_581288 = newJObject()
  add(query_581287, "key", newJString(key))
  add(query_581287, "prettyPrint", newJBool(prettyPrint))
  add(query_581287, "oauth_token", newJString(oauthToken))
  add(path_581286, "profileId", newJString(profileId))
  add(query_581287, "alt", newJString(alt))
  add(query_581287, "userIp", newJString(userIp))
  add(query_581287, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581288 = body
  add(query_581287, "fields", newJString(fields))
  result = call_581285.call(path_581286, query_581287, nil, nil, body_581288)

var dfareportingPlacementStrategiesInsert* = Call_DfareportingPlacementStrategiesInsert_581272(
    name: "dfareportingPlacementStrategiesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies",
    validator: validate_DfareportingPlacementStrategiesInsert_581273,
    base: "/dfareporting/v3.1", url: url_DfareportingPlacementStrategiesInsert_581274,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesList_581234 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementStrategiesList_581236(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesList_581235(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of placement strategies, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581237 = path.getOrDefault("profileId")
  valid_581237 = validateParameter(valid_581237, JString, required = true,
                                 default = nil)
  if valid_581237 != nil:
    section.add "profileId", valid_581237
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "placementstrategy*2015" will return objects with names like "placementstrategy June 2015", "placementstrategy April 2015", or simply "placementstrategy 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementstrategy" will match objects with name "my placementstrategy", "placementstrategy 2015", or simply "placementstrategy".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only placement strategies with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_581238 = query.getOrDefault("key")
  valid_581238 = validateParameter(valid_581238, JString, required = false,
                                 default = nil)
  if valid_581238 != nil:
    section.add "key", valid_581238
  var valid_581239 = query.getOrDefault("prettyPrint")
  valid_581239 = validateParameter(valid_581239, JBool, required = false,
                                 default = newJBool(true))
  if valid_581239 != nil:
    section.add "prettyPrint", valid_581239
  var valid_581240 = query.getOrDefault("oauth_token")
  valid_581240 = validateParameter(valid_581240, JString, required = false,
                                 default = nil)
  if valid_581240 != nil:
    section.add "oauth_token", valid_581240
  var valid_581241 = query.getOrDefault("sortField")
  valid_581241 = validateParameter(valid_581241, JString, required = false,
                                 default = newJString("ID"))
  if valid_581241 != nil:
    section.add "sortField", valid_581241
  var valid_581242 = query.getOrDefault("alt")
  valid_581242 = validateParameter(valid_581242, JString, required = false,
                                 default = newJString("json"))
  if valid_581242 != nil:
    section.add "alt", valid_581242
  var valid_581243 = query.getOrDefault("userIp")
  valid_581243 = validateParameter(valid_581243, JString, required = false,
                                 default = nil)
  if valid_581243 != nil:
    section.add "userIp", valid_581243
  var valid_581244 = query.getOrDefault("quotaUser")
  valid_581244 = validateParameter(valid_581244, JString, required = false,
                                 default = nil)
  if valid_581244 != nil:
    section.add "quotaUser", valid_581244
  var valid_581245 = query.getOrDefault("pageToken")
  valid_581245 = validateParameter(valid_581245, JString, required = false,
                                 default = nil)
  if valid_581245 != nil:
    section.add "pageToken", valid_581245
  var valid_581246 = query.getOrDefault("searchString")
  valid_581246 = validateParameter(valid_581246, JString, required = false,
                                 default = nil)
  if valid_581246 != nil:
    section.add "searchString", valid_581246
  var valid_581247 = query.getOrDefault("sortOrder")
  valid_581247 = validateParameter(valid_581247, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581247 != nil:
    section.add "sortOrder", valid_581247
  var valid_581248 = query.getOrDefault("ids")
  valid_581248 = validateParameter(valid_581248, JArray, required = false,
                                 default = nil)
  if valid_581248 != nil:
    section.add "ids", valid_581248
  var valid_581249 = query.getOrDefault("fields")
  valid_581249 = validateParameter(valid_581249, JString, required = false,
                                 default = nil)
  if valid_581249 != nil:
    section.add "fields", valid_581249
  var valid_581250 = query.getOrDefault("maxResults")
  valid_581250 = validateParameter(valid_581250, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581250 != nil:
    section.add "maxResults", valid_581250
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581251: Call_DfareportingPlacementStrategiesList_581234;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of placement strategies, possibly filtered. This method supports paging.
  ## 
  let valid = call_581251.validator(path, query, header, formData, body)
  let scheme = call_581251.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581251.url(scheme.get, call_581251.host, call_581251.base,
                         call_581251.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581251, url, valid)

proc call*(call_581252: Call_DfareportingPlacementStrategiesList_581234;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; sortField: string = "ID"; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          ids: JsonNode = nil; fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingPlacementStrategiesList
  ## Retrieves a list of placement strategies, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "placementstrategy*2015" will return objects with names like "placementstrategy June 2015", "placementstrategy April 2015", or simply "placementstrategy 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementstrategy" will match objects with name "my placementstrategy", "placementstrategy 2015", or simply "placementstrategy".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only placement strategies with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_581253 = newJObject()
  var query_581254 = newJObject()
  add(query_581254, "key", newJString(key))
  add(query_581254, "prettyPrint", newJBool(prettyPrint))
  add(query_581254, "oauth_token", newJString(oauthToken))
  add(path_581253, "profileId", newJString(profileId))
  add(query_581254, "sortField", newJString(sortField))
  add(query_581254, "alt", newJString(alt))
  add(query_581254, "userIp", newJString(userIp))
  add(query_581254, "quotaUser", newJString(quotaUser))
  add(query_581254, "pageToken", newJString(pageToken))
  add(query_581254, "searchString", newJString(searchString))
  add(query_581254, "sortOrder", newJString(sortOrder))
  if ids != nil:
    query_581254.add "ids", ids
  add(query_581254, "fields", newJString(fields))
  add(query_581254, "maxResults", newJInt(maxResults))
  result = call_581252.call(path_581253, query_581254, nil, nil, nil)

var dfareportingPlacementStrategiesList* = Call_DfareportingPlacementStrategiesList_581234(
    name: "dfareportingPlacementStrategiesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies",
    validator: validate_DfareportingPlacementStrategiesList_581235,
    base: "/dfareporting/v3.1", url: url_DfareportingPlacementStrategiesList_581236,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesPatch_581289 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementStrategiesPatch_581291(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesPatch_581290(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement strategy. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581292 = path.getOrDefault("profileId")
  valid_581292 = validateParameter(valid_581292, JString, required = true,
                                 default = nil)
  if valid_581292 != nil:
    section.add "profileId", valid_581292
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Placement strategy ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581293 = query.getOrDefault("key")
  valid_581293 = validateParameter(valid_581293, JString, required = false,
                                 default = nil)
  if valid_581293 != nil:
    section.add "key", valid_581293
  var valid_581294 = query.getOrDefault("prettyPrint")
  valid_581294 = validateParameter(valid_581294, JBool, required = false,
                                 default = newJBool(true))
  if valid_581294 != nil:
    section.add "prettyPrint", valid_581294
  var valid_581295 = query.getOrDefault("oauth_token")
  valid_581295 = validateParameter(valid_581295, JString, required = false,
                                 default = nil)
  if valid_581295 != nil:
    section.add "oauth_token", valid_581295
  var valid_581296 = query.getOrDefault("alt")
  valid_581296 = validateParameter(valid_581296, JString, required = false,
                                 default = newJString("json"))
  if valid_581296 != nil:
    section.add "alt", valid_581296
  var valid_581297 = query.getOrDefault("userIp")
  valid_581297 = validateParameter(valid_581297, JString, required = false,
                                 default = nil)
  if valid_581297 != nil:
    section.add "userIp", valid_581297
  var valid_581298 = query.getOrDefault("quotaUser")
  valid_581298 = validateParameter(valid_581298, JString, required = false,
                                 default = nil)
  if valid_581298 != nil:
    section.add "quotaUser", valid_581298
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_581299 = query.getOrDefault("id")
  valid_581299 = validateParameter(valid_581299, JString, required = true,
                                 default = nil)
  if valid_581299 != nil:
    section.add "id", valid_581299
  var valid_581300 = query.getOrDefault("fields")
  valid_581300 = validateParameter(valid_581300, JString, required = false,
                                 default = nil)
  if valid_581300 != nil:
    section.add "fields", valid_581300
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581302: Call_DfareportingPlacementStrategiesPatch_581289;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing placement strategy. This method supports patch semantics.
  ## 
  let valid = call_581302.validator(path, query, header, formData, body)
  let scheme = call_581302.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581302.url(scheme.get, call_581302.host, call_581302.base,
                         call_581302.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581302, url, valid)

proc call*(call_581303: Call_DfareportingPlacementStrategiesPatch_581289;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingPlacementStrategiesPatch
  ## Updates an existing placement strategy. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Placement strategy ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581304 = newJObject()
  var query_581305 = newJObject()
  var body_581306 = newJObject()
  add(query_581305, "key", newJString(key))
  add(query_581305, "prettyPrint", newJBool(prettyPrint))
  add(query_581305, "oauth_token", newJString(oauthToken))
  add(path_581304, "profileId", newJString(profileId))
  add(query_581305, "alt", newJString(alt))
  add(query_581305, "userIp", newJString(userIp))
  add(query_581305, "quotaUser", newJString(quotaUser))
  add(query_581305, "id", newJString(id))
  if body != nil:
    body_581306 = body
  add(query_581305, "fields", newJString(fields))
  result = call_581303.call(path_581304, query_581305, nil, nil, body_581306)

var dfareportingPlacementStrategiesPatch* = Call_DfareportingPlacementStrategiesPatch_581289(
    name: "dfareportingPlacementStrategiesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies",
    validator: validate_DfareportingPlacementStrategiesPatch_581290,
    base: "/dfareporting/v3.1", url: url_DfareportingPlacementStrategiesPatch_581291,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesGet_581307 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementStrategiesGet_581309(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesGet_581308(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one placement strategy by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Placement strategy ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581310 = path.getOrDefault("profileId")
  valid_581310 = validateParameter(valid_581310, JString, required = true,
                                 default = nil)
  if valid_581310 != nil:
    section.add "profileId", valid_581310
  var valid_581311 = path.getOrDefault("id")
  valid_581311 = validateParameter(valid_581311, JString, required = true,
                                 default = nil)
  if valid_581311 != nil:
    section.add "id", valid_581311
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581312 = query.getOrDefault("key")
  valid_581312 = validateParameter(valid_581312, JString, required = false,
                                 default = nil)
  if valid_581312 != nil:
    section.add "key", valid_581312
  var valid_581313 = query.getOrDefault("prettyPrint")
  valid_581313 = validateParameter(valid_581313, JBool, required = false,
                                 default = newJBool(true))
  if valid_581313 != nil:
    section.add "prettyPrint", valid_581313
  var valid_581314 = query.getOrDefault("oauth_token")
  valid_581314 = validateParameter(valid_581314, JString, required = false,
                                 default = nil)
  if valid_581314 != nil:
    section.add "oauth_token", valid_581314
  var valid_581315 = query.getOrDefault("alt")
  valid_581315 = validateParameter(valid_581315, JString, required = false,
                                 default = newJString("json"))
  if valid_581315 != nil:
    section.add "alt", valid_581315
  var valid_581316 = query.getOrDefault("userIp")
  valid_581316 = validateParameter(valid_581316, JString, required = false,
                                 default = nil)
  if valid_581316 != nil:
    section.add "userIp", valid_581316
  var valid_581317 = query.getOrDefault("quotaUser")
  valid_581317 = validateParameter(valid_581317, JString, required = false,
                                 default = nil)
  if valid_581317 != nil:
    section.add "quotaUser", valid_581317
  var valid_581318 = query.getOrDefault("fields")
  valid_581318 = validateParameter(valid_581318, JString, required = false,
                                 default = nil)
  if valid_581318 != nil:
    section.add "fields", valid_581318
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581319: Call_DfareportingPlacementStrategiesGet_581307;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one placement strategy by ID.
  ## 
  let valid = call_581319.validator(path, query, header, formData, body)
  let scheme = call_581319.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581319.url(scheme.get, call_581319.host, call_581319.base,
                         call_581319.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581319, url, valid)

proc call*(call_581320: Call_DfareportingPlacementStrategiesGet_581307;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingPlacementStrategiesGet
  ## Gets one placement strategy by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Placement strategy ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581321 = newJObject()
  var query_581322 = newJObject()
  add(query_581322, "key", newJString(key))
  add(query_581322, "prettyPrint", newJBool(prettyPrint))
  add(query_581322, "oauth_token", newJString(oauthToken))
  add(path_581321, "profileId", newJString(profileId))
  add(path_581321, "id", newJString(id))
  add(query_581322, "alt", newJString(alt))
  add(query_581322, "userIp", newJString(userIp))
  add(query_581322, "quotaUser", newJString(quotaUser))
  add(query_581322, "fields", newJString(fields))
  result = call_581320.call(path_581321, query_581322, nil, nil, nil)

var dfareportingPlacementStrategiesGet* = Call_DfareportingPlacementStrategiesGet_581307(
    name: "dfareportingPlacementStrategiesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies/{id}",
    validator: validate_DfareportingPlacementStrategiesGet_581308,
    base: "/dfareporting/v3.1", url: url_DfareportingPlacementStrategiesGet_581309,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesDelete_581323 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementStrategiesDelete_581325(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesDelete_581324(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing placement strategy.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Placement strategy ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581326 = path.getOrDefault("profileId")
  valid_581326 = validateParameter(valid_581326, JString, required = true,
                                 default = nil)
  if valid_581326 != nil:
    section.add "profileId", valid_581326
  var valid_581327 = path.getOrDefault("id")
  valid_581327 = validateParameter(valid_581327, JString, required = true,
                                 default = nil)
  if valid_581327 != nil:
    section.add "id", valid_581327
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581328 = query.getOrDefault("key")
  valid_581328 = validateParameter(valid_581328, JString, required = false,
                                 default = nil)
  if valid_581328 != nil:
    section.add "key", valid_581328
  var valid_581329 = query.getOrDefault("prettyPrint")
  valid_581329 = validateParameter(valid_581329, JBool, required = false,
                                 default = newJBool(true))
  if valid_581329 != nil:
    section.add "prettyPrint", valid_581329
  var valid_581330 = query.getOrDefault("oauth_token")
  valid_581330 = validateParameter(valid_581330, JString, required = false,
                                 default = nil)
  if valid_581330 != nil:
    section.add "oauth_token", valid_581330
  var valid_581331 = query.getOrDefault("alt")
  valid_581331 = validateParameter(valid_581331, JString, required = false,
                                 default = newJString("json"))
  if valid_581331 != nil:
    section.add "alt", valid_581331
  var valid_581332 = query.getOrDefault("userIp")
  valid_581332 = validateParameter(valid_581332, JString, required = false,
                                 default = nil)
  if valid_581332 != nil:
    section.add "userIp", valid_581332
  var valid_581333 = query.getOrDefault("quotaUser")
  valid_581333 = validateParameter(valid_581333, JString, required = false,
                                 default = nil)
  if valid_581333 != nil:
    section.add "quotaUser", valid_581333
  var valid_581334 = query.getOrDefault("fields")
  valid_581334 = validateParameter(valid_581334, JString, required = false,
                                 default = nil)
  if valid_581334 != nil:
    section.add "fields", valid_581334
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581335: Call_DfareportingPlacementStrategiesDelete_581323;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing placement strategy.
  ## 
  let valid = call_581335.validator(path, query, header, formData, body)
  let scheme = call_581335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581335.url(scheme.get, call_581335.host, call_581335.base,
                         call_581335.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581335, url, valid)

proc call*(call_581336: Call_DfareportingPlacementStrategiesDelete_581323;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingPlacementStrategiesDelete
  ## Deletes an existing placement strategy.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Placement strategy ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581337 = newJObject()
  var query_581338 = newJObject()
  add(query_581338, "key", newJString(key))
  add(query_581338, "prettyPrint", newJBool(prettyPrint))
  add(query_581338, "oauth_token", newJString(oauthToken))
  add(path_581337, "profileId", newJString(profileId))
  add(path_581337, "id", newJString(id))
  add(query_581338, "alt", newJString(alt))
  add(query_581338, "userIp", newJString(userIp))
  add(query_581338, "quotaUser", newJString(quotaUser))
  add(query_581338, "fields", newJString(fields))
  result = call_581336.call(path_581337, query_581338, nil, nil, nil)

var dfareportingPlacementStrategiesDelete* = Call_DfareportingPlacementStrategiesDelete_581323(
    name: "dfareportingPlacementStrategiesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies/{id}",
    validator: validate_DfareportingPlacementStrategiesDelete_581324,
    base: "/dfareporting/v3.1", url: url_DfareportingPlacementStrategiesDelete_581325,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsUpdate_581376 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementsUpdate_581378(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsUpdate_581377(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581379 = path.getOrDefault("profileId")
  valid_581379 = validateParameter(valid_581379, JString, required = true,
                                 default = nil)
  if valid_581379 != nil:
    section.add "profileId", valid_581379
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581380 = query.getOrDefault("key")
  valid_581380 = validateParameter(valid_581380, JString, required = false,
                                 default = nil)
  if valid_581380 != nil:
    section.add "key", valid_581380
  var valid_581381 = query.getOrDefault("prettyPrint")
  valid_581381 = validateParameter(valid_581381, JBool, required = false,
                                 default = newJBool(true))
  if valid_581381 != nil:
    section.add "prettyPrint", valid_581381
  var valid_581382 = query.getOrDefault("oauth_token")
  valid_581382 = validateParameter(valid_581382, JString, required = false,
                                 default = nil)
  if valid_581382 != nil:
    section.add "oauth_token", valid_581382
  var valid_581383 = query.getOrDefault("alt")
  valid_581383 = validateParameter(valid_581383, JString, required = false,
                                 default = newJString("json"))
  if valid_581383 != nil:
    section.add "alt", valid_581383
  var valid_581384 = query.getOrDefault("userIp")
  valid_581384 = validateParameter(valid_581384, JString, required = false,
                                 default = nil)
  if valid_581384 != nil:
    section.add "userIp", valid_581384
  var valid_581385 = query.getOrDefault("quotaUser")
  valid_581385 = validateParameter(valid_581385, JString, required = false,
                                 default = nil)
  if valid_581385 != nil:
    section.add "quotaUser", valid_581385
  var valid_581386 = query.getOrDefault("fields")
  valid_581386 = validateParameter(valid_581386, JString, required = false,
                                 default = nil)
  if valid_581386 != nil:
    section.add "fields", valid_581386
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581388: Call_DfareportingPlacementsUpdate_581376; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing placement.
  ## 
  let valid = call_581388.validator(path, query, header, formData, body)
  let scheme = call_581388.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581388.url(scheme.get, call_581388.host, call_581388.base,
                         call_581388.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581388, url, valid)

proc call*(call_581389: Call_DfareportingPlacementsUpdate_581376;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingPlacementsUpdate
  ## Updates an existing placement.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581390 = newJObject()
  var query_581391 = newJObject()
  var body_581392 = newJObject()
  add(query_581391, "key", newJString(key))
  add(query_581391, "prettyPrint", newJBool(prettyPrint))
  add(query_581391, "oauth_token", newJString(oauthToken))
  add(path_581390, "profileId", newJString(profileId))
  add(query_581391, "alt", newJString(alt))
  add(query_581391, "userIp", newJString(userIp))
  add(query_581391, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581392 = body
  add(query_581391, "fields", newJString(fields))
  result = call_581389.call(path_581390, query_581391, nil, nil, body_581392)

var dfareportingPlacementsUpdate* = Call_DfareportingPlacementsUpdate_581376(
    name: "dfareportingPlacementsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/placements",
    validator: validate_DfareportingPlacementsUpdate_581377,
    base: "/dfareporting/v3.1", url: url_DfareportingPlacementsUpdate_581378,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsInsert_581393 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementsInsert_581395(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsInsert_581394(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new placement.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581396 = path.getOrDefault("profileId")
  valid_581396 = validateParameter(valid_581396, JString, required = true,
                                 default = nil)
  if valid_581396 != nil:
    section.add "profileId", valid_581396
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581397 = query.getOrDefault("key")
  valid_581397 = validateParameter(valid_581397, JString, required = false,
                                 default = nil)
  if valid_581397 != nil:
    section.add "key", valid_581397
  var valid_581398 = query.getOrDefault("prettyPrint")
  valid_581398 = validateParameter(valid_581398, JBool, required = false,
                                 default = newJBool(true))
  if valid_581398 != nil:
    section.add "prettyPrint", valid_581398
  var valid_581399 = query.getOrDefault("oauth_token")
  valid_581399 = validateParameter(valid_581399, JString, required = false,
                                 default = nil)
  if valid_581399 != nil:
    section.add "oauth_token", valid_581399
  var valid_581400 = query.getOrDefault("alt")
  valid_581400 = validateParameter(valid_581400, JString, required = false,
                                 default = newJString("json"))
  if valid_581400 != nil:
    section.add "alt", valid_581400
  var valid_581401 = query.getOrDefault("userIp")
  valid_581401 = validateParameter(valid_581401, JString, required = false,
                                 default = nil)
  if valid_581401 != nil:
    section.add "userIp", valid_581401
  var valid_581402 = query.getOrDefault("quotaUser")
  valid_581402 = validateParameter(valid_581402, JString, required = false,
                                 default = nil)
  if valid_581402 != nil:
    section.add "quotaUser", valid_581402
  var valid_581403 = query.getOrDefault("fields")
  valid_581403 = validateParameter(valid_581403, JString, required = false,
                                 default = nil)
  if valid_581403 != nil:
    section.add "fields", valid_581403
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581405: Call_DfareportingPlacementsInsert_581393; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new placement.
  ## 
  let valid = call_581405.validator(path, query, header, formData, body)
  let scheme = call_581405.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581405.url(scheme.get, call_581405.host, call_581405.base,
                         call_581405.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581405, url, valid)

proc call*(call_581406: Call_DfareportingPlacementsInsert_581393;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingPlacementsInsert
  ## Inserts a new placement.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581407 = newJObject()
  var query_581408 = newJObject()
  var body_581409 = newJObject()
  add(query_581408, "key", newJString(key))
  add(query_581408, "prettyPrint", newJBool(prettyPrint))
  add(query_581408, "oauth_token", newJString(oauthToken))
  add(path_581407, "profileId", newJString(profileId))
  add(query_581408, "alt", newJString(alt))
  add(query_581408, "userIp", newJString(userIp))
  add(query_581408, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581409 = body
  add(query_581408, "fields", newJString(fields))
  result = call_581406.call(path_581407, query_581408, nil, nil, body_581409)

var dfareportingPlacementsInsert* = Call_DfareportingPlacementsInsert_581393(
    name: "dfareportingPlacementsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/placements",
    validator: validate_DfareportingPlacementsInsert_581394,
    base: "/dfareporting/v3.1", url: url_DfareportingPlacementsInsert_581395,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsList_581339 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementsList_581341(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsList_581340(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of placements, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581342 = path.getOrDefault("profileId")
  valid_581342 = validateParameter(valid_581342, JString, required = true,
                                 default = nil)
  if valid_581342 != nil:
    section.add "profileId", valid_581342
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   maxStartDate: JString
  ##               : Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   placementStrategyIds: JArray
  ##                       : Select only placements that are associated with these placement strategies.
  ##   pricingTypes: JArray
  ##               : Select only placements with these pricing types.
  ##   paymentSource: JString
  ##                : Select only placements with this payment source.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   contentCategoryIds: JArray
  ##                     : Select only placements that are associated with these content categories.
  ##   advertiserIds: JArray
  ##                : Select only placements that belong to these advertisers.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived placements. Don't set this field to select both archived and non-archived placements.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   directorySiteIds: JArray
  ##                   : Select only placements that are associated with these directory sites.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   minStartDate: JString
  ##               : Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   searchString: JString
  ##               : Allows searching for placements by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placements with names like "placement June 2015", "placement May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placement" will match placements with name "my placement", "placement 2015", or simply "placement".
  ##   sizeIds: JArray
  ##          : Select only placements that are associated with these sizes.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   siteIds: JArray
  ##          : Select only placements that are associated with these sites.
  ##   maxEndDate: JString
  ##             : Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   compatibilities: JArray
  ##                  : Select only placements that are associated with these compatibilities. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.
  ##   campaignIds: JArray
  ##              : Select only placements that belong to these campaigns.
  ##   ids: JArray
  ##      : Select only placements with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   groupIds: JArray
  ##           : Select only placements that belong to these placement groups.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   minEndDate: JString
  ##             : Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
  section = newJObject()
  var valid_581343 = query.getOrDefault("key")
  valid_581343 = validateParameter(valid_581343, JString, required = false,
                                 default = nil)
  if valid_581343 != nil:
    section.add "key", valid_581343
  var valid_581344 = query.getOrDefault("maxStartDate")
  valid_581344 = validateParameter(valid_581344, JString, required = false,
                                 default = nil)
  if valid_581344 != nil:
    section.add "maxStartDate", valid_581344
  var valid_581345 = query.getOrDefault("prettyPrint")
  valid_581345 = validateParameter(valid_581345, JBool, required = false,
                                 default = newJBool(true))
  if valid_581345 != nil:
    section.add "prettyPrint", valid_581345
  var valid_581346 = query.getOrDefault("oauth_token")
  valid_581346 = validateParameter(valid_581346, JString, required = false,
                                 default = nil)
  if valid_581346 != nil:
    section.add "oauth_token", valid_581346
  var valid_581347 = query.getOrDefault("placementStrategyIds")
  valid_581347 = validateParameter(valid_581347, JArray, required = false,
                                 default = nil)
  if valid_581347 != nil:
    section.add "placementStrategyIds", valid_581347
  var valid_581348 = query.getOrDefault("pricingTypes")
  valid_581348 = validateParameter(valid_581348, JArray, required = false,
                                 default = nil)
  if valid_581348 != nil:
    section.add "pricingTypes", valid_581348
  var valid_581349 = query.getOrDefault("paymentSource")
  valid_581349 = validateParameter(valid_581349, JString, required = false,
                                 default = newJString("PLACEMENT_AGENCY_PAID"))
  if valid_581349 != nil:
    section.add "paymentSource", valid_581349
  var valid_581350 = query.getOrDefault("sortField")
  valid_581350 = validateParameter(valid_581350, JString, required = false,
                                 default = newJString("ID"))
  if valid_581350 != nil:
    section.add "sortField", valid_581350
  var valid_581351 = query.getOrDefault("contentCategoryIds")
  valid_581351 = validateParameter(valid_581351, JArray, required = false,
                                 default = nil)
  if valid_581351 != nil:
    section.add "contentCategoryIds", valid_581351
  var valid_581352 = query.getOrDefault("advertiserIds")
  valid_581352 = validateParameter(valid_581352, JArray, required = false,
                                 default = nil)
  if valid_581352 != nil:
    section.add "advertiserIds", valid_581352
  var valid_581353 = query.getOrDefault("alt")
  valid_581353 = validateParameter(valid_581353, JString, required = false,
                                 default = newJString("json"))
  if valid_581353 != nil:
    section.add "alt", valid_581353
  var valid_581354 = query.getOrDefault("userIp")
  valid_581354 = validateParameter(valid_581354, JString, required = false,
                                 default = nil)
  if valid_581354 != nil:
    section.add "userIp", valid_581354
  var valid_581355 = query.getOrDefault("archived")
  valid_581355 = validateParameter(valid_581355, JBool, required = false, default = nil)
  if valid_581355 != nil:
    section.add "archived", valid_581355
  var valid_581356 = query.getOrDefault("quotaUser")
  valid_581356 = validateParameter(valid_581356, JString, required = false,
                                 default = nil)
  if valid_581356 != nil:
    section.add "quotaUser", valid_581356
  var valid_581357 = query.getOrDefault("directorySiteIds")
  valid_581357 = validateParameter(valid_581357, JArray, required = false,
                                 default = nil)
  if valid_581357 != nil:
    section.add "directorySiteIds", valid_581357
  var valid_581358 = query.getOrDefault("pageToken")
  valid_581358 = validateParameter(valid_581358, JString, required = false,
                                 default = nil)
  if valid_581358 != nil:
    section.add "pageToken", valid_581358
  var valid_581359 = query.getOrDefault("minStartDate")
  valid_581359 = validateParameter(valid_581359, JString, required = false,
                                 default = nil)
  if valid_581359 != nil:
    section.add "minStartDate", valid_581359
  var valid_581360 = query.getOrDefault("searchString")
  valid_581360 = validateParameter(valid_581360, JString, required = false,
                                 default = nil)
  if valid_581360 != nil:
    section.add "searchString", valid_581360
  var valid_581361 = query.getOrDefault("sizeIds")
  valid_581361 = validateParameter(valid_581361, JArray, required = false,
                                 default = nil)
  if valid_581361 != nil:
    section.add "sizeIds", valid_581361
  var valid_581362 = query.getOrDefault("sortOrder")
  valid_581362 = validateParameter(valid_581362, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581362 != nil:
    section.add "sortOrder", valid_581362
  var valid_581363 = query.getOrDefault("siteIds")
  valid_581363 = validateParameter(valid_581363, JArray, required = false,
                                 default = nil)
  if valid_581363 != nil:
    section.add "siteIds", valid_581363
  var valid_581364 = query.getOrDefault("maxEndDate")
  valid_581364 = validateParameter(valid_581364, JString, required = false,
                                 default = nil)
  if valid_581364 != nil:
    section.add "maxEndDate", valid_581364
  var valid_581365 = query.getOrDefault("compatibilities")
  valid_581365 = validateParameter(valid_581365, JArray, required = false,
                                 default = nil)
  if valid_581365 != nil:
    section.add "compatibilities", valid_581365
  var valid_581366 = query.getOrDefault("campaignIds")
  valid_581366 = validateParameter(valid_581366, JArray, required = false,
                                 default = nil)
  if valid_581366 != nil:
    section.add "campaignIds", valid_581366
  var valid_581367 = query.getOrDefault("ids")
  valid_581367 = validateParameter(valid_581367, JArray, required = false,
                                 default = nil)
  if valid_581367 != nil:
    section.add "ids", valid_581367
  var valid_581368 = query.getOrDefault("fields")
  valid_581368 = validateParameter(valid_581368, JString, required = false,
                                 default = nil)
  if valid_581368 != nil:
    section.add "fields", valid_581368
  var valid_581369 = query.getOrDefault("groupIds")
  valid_581369 = validateParameter(valid_581369, JArray, required = false,
                                 default = nil)
  if valid_581369 != nil:
    section.add "groupIds", valid_581369
  var valid_581370 = query.getOrDefault("maxResults")
  valid_581370 = validateParameter(valid_581370, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581370 != nil:
    section.add "maxResults", valid_581370
  var valid_581371 = query.getOrDefault("minEndDate")
  valid_581371 = validateParameter(valid_581371, JString, required = false,
                                 default = nil)
  if valid_581371 != nil:
    section.add "minEndDate", valid_581371
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581372: Call_DfareportingPlacementsList_581339; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of placements, possibly filtered. This method supports paging.
  ## 
  let valid = call_581372.validator(path, query, header, formData, body)
  let scheme = call_581372.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581372.url(scheme.get, call_581372.host, call_581372.base,
                         call_581372.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581372, url, valid)

proc call*(call_581373: Call_DfareportingPlacementsList_581339; profileId: string;
          key: string = ""; maxStartDate: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; placementStrategyIds: JsonNode = nil;
          pricingTypes: JsonNode = nil;
          paymentSource: string = "PLACEMENT_AGENCY_PAID"; sortField: string = "ID";
          contentCategoryIds: JsonNode = nil; advertiserIds: JsonNode = nil;
          alt: string = "json"; userIp: string = ""; archived: bool = false;
          quotaUser: string = ""; directorySiteIds: JsonNode = nil;
          pageToken: string = ""; minStartDate: string = ""; searchString: string = "";
          sizeIds: JsonNode = nil; sortOrder: string = "ASCENDING";
          siteIds: JsonNode = nil; maxEndDate: string = "";
          compatibilities: JsonNode = nil; campaignIds: JsonNode = nil;
          ids: JsonNode = nil; fields: string = ""; groupIds: JsonNode = nil;
          maxResults: int = 1000; minEndDate: string = ""): Recallable =
  ## dfareportingPlacementsList
  ## Retrieves a list of placements, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   maxStartDate: string
  ##               : Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   placementStrategyIds: JArray
  ##                       : Select only placements that are associated with these placement strategies.
  ##   pricingTypes: JArray
  ##               : Select only placements with these pricing types.
  ##   paymentSource: string
  ##                : Select only placements with this payment source.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   contentCategoryIds: JArray
  ##                     : Select only placements that are associated with these content categories.
  ##   advertiserIds: JArray
  ##                : Select only placements that belong to these advertisers.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived placements. Don't set this field to select both archived and non-archived placements.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   directorySiteIds: JArray
  ##                   : Select only placements that are associated with these directory sites.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   minStartDate: string
  ##               : Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   searchString: string
  ##               : Allows searching for placements by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placements with names like "placement June 2015", "placement May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placement" will match placements with name "my placement", "placement 2015", or simply "placement".
  ##   sizeIds: JArray
  ##          : Select only placements that are associated with these sizes.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   siteIds: JArray
  ##          : Select only placements that are associated with these sites.
  ##   maxEndDate: string
  ##             : Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   compatibilities: JArray
  ##                  : Select only placements that are associated with these compatibilities. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.
  ##   campaignIds: JArray
  ##              : Select only placements that belong to these campaigns.
  ##   ids: JArray
  ##      : Select only placements with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   groupIds: JArray
  ##           : Select only placements that belong to these placement groups.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   minEndDate: string
  ##             : Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
  var path_581374 = newJObject()
  var query_581375 = newJObject()
  add(query_581375, "key", newJString(key))
  add(query_581375, "maxStartDate", newJString(maxStartDate))
  add(query_581375, "prettyPrint", newJBool(prettyPrint))
  add(query_581375, "oauth_token", newJString(oauthToken))
  if placementStrategyIds != nil:
    query_581375.add "placementStrategyIds", placementStrategyIds
  if pricingTypes != nil:
    query_581375.add "pricingTypes", pricingTypes
  add(query_581375, "paymentSource", newJString(paymentSource))
  add(path_581374, "profileId", newJString(profileId))
  add(query_581375, "sortField", newJString(sortField))
  if contentCategoryIds != nil:
    query_581375.add "contentCategoryIds", contentCategoryIds
  if advertiserIds != nil:
    query_581375.add "advertiserIds", advertiserIds
  add(query_581375, "alt", newJString(alt))
  add(query_581375, "userIp", newJString(userIp))
  add(query_581375, "archived", newJBool(archived))
  add(query_581375, "quotaUser", newJString(quotaUser))
  if directorySiteIds != nil:
    query_581375.add "directorySiteIds", directorySiteIds
  add(query_581375, "pageToken", newJString(pageToken))
  add(query_581375, "minStartDate", newJString(minStartDate))
  add(query_581375, "searchString", newJString(searchString))
  if sizeIds != nil:
    query_581375.add "sizeIds", sizeIds
  add(query_581375, "sortOrder", newJString(sortOrder))
  if siteIds != nil:
    query_581375.add "siteIds", siteIds
  add(query_581375, "maxEndDate", newJString(maxEndDate))
  if compatibilities != nil:
    query_581375.add "compatibilities", compatibilities
  if campaignIds != nil:
    query_581375.add "campaignIds", campaignIds
  if ids != nil:
    query_581375.add "ids", ids
  add(query_581375, "fields", newJString(fields))
  if groupIds != nil:
    query_581375.add "groupIds", groupIds
  add(query_581375, "maxResults", newJInt(maxResults))
  add(query_581375, "minEndDate", newJString(minEndDate))
  result = call_581373.call(path_581374, query_581375, nil, nil, nil)

var dfareportingPlacementsList* = Call_DfareportingPlacementsList_581339(
    name: "dfareportingPlacementsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/placements",
    validator: validate_DfareportingPlacementsList_581340,
    base: "/dfareporting/v3.1", url: url_DfareportingPlacementsList_581341,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsPatch_581410 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementsPatch_581412(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsPatch_581411(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581413 = path.getOrDefault("profileId")
  valid_581413 = validateParameter(valid_581413, JString, required = true,
                                 default = nil)
  if valid_581413 != nil:
    section.add "profileId", valid_581413
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Placement ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581414 = query.getOrDefault("key")
  valid_581414 = validateParameter(valid_581414, JString, required = false,
                                 default = nil)
  if valid_581414 != nil:
    section.add "key", valid_581414
  var valid_581415 = query.getOrDefault("prettyPrint")
  valid_581415 = validateParameter(valid_581415, JBool, required = false,
                                 default = newJBool(true))
  if valid_581415 != nil:
    section.add "prettyPrint", valid_581415
  var valid_581416 = query.getOrDefault("oauth_token")
  valid_581416 = validateParameter(valid_581416, JString, required = false,
                                 default = nil)
  if valid_581416 != nil:
    section.add "oauth_token", valid_581416
  var valid_581417 = query.getOrDefault("alt")
  valid_581417 = validateParameter(valid_581417, JString, required = false,
                                 default = newJString("json"))
  if valid_581417 != nil:
    section.add "alt", valid_581417
  var valid_581418 = query.getOrDefault("userIp")
  valid_581418 = validateParameter(valid_581418, JString, required = false,
                                 default = nil)
  if valid_581418 != nil:
    section.add "userIp", valid_581418
  var valid_581419 = query.getOrDefault("quotaUser")
  valid_581419 = validateParameter(valid_581419, JString, required = false,
                                 default = nil)
  if valid_581419 != nil:
    section.add "quotaUser", valid_581419
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_581420 = query.getOrDefault("id")
  valid_581420 = validateParameter(valid_581420, JString, required = true,
                                 default = nil)
  if valid_581420 != nil:
    section.add "id", valid_581420
  var valid_581421 = query.getOrDefault("fields")
  valid_581421 = validateParameter(valid_581421, JString, required = false,
                                 default = nil)
  if valid_581421 != nil:
    section.add "fields", valid_581421
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581423: Call_DfareportingPlacementsPatch_581410; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing placement. This method supports patch semantics.
  ## 
  let valid = call_581423.validator(path, query, header, formData, body)
  let scheme = call_581423.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581423.url(scheme.get, call_581423.host, call_581423.base,
                         call_581423.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581423, url, valid)

proc call*(call_581424: Call_DfareportingPlacementsPatch_581410; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingPlacementsPatch
  ## Updates an existing placement. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Placement ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581425 = newJObject()
  var query_581426 = newJObject()
  var body_581427 = newJObject()
  add(query_581426, "key", newJString(key))
  add(query_581426, "prettyPrint", newJBool(prettyPrint))
  add(query_581426, "oauth_token", newJString(oauthToken))
  add(path_581425, "profileId", newJString(profileId))
  add(query_581426, "alt", newJString(alt))
  add(query_581426, "userIp", newJString(userIp))
  add(query_581426, "quotaUser", newJString(quotaUser))
  add(query_581426, "id", newJString(id))
  if body != nil:
    body_581427 = body
  add(query_581426, "fields", newJString(fields))
  result = call_581424.call(path_581425, query_581426, nil, nil, body_581427)

var dfareportingPlacementsPatch* = Call_DfareportingPlacementsPatch_581410(
    name: "dfareportingPlacementsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/placements",
    validator: validate_DfareportingPlacementsPatch_581411,
    base: "/dfareporting/v3.1", url: url_DfareportingPlacementsPatch_581412,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsGeneratetags_581428 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementsGeneratetags_581430(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements/generatetags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsGeneratetags_581429(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates tags for a placement.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581431 = path.getOrDefault("profileId")
  valid_581431 = validateParameter(valid_581431, JString, required = true,
                                 default = nil)
  if valid_581431 != nil:
    section.add "profileId", valid_581431
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   campaignId: JString
  ##             : Generate placements belonging to this campaign. This is a required field.
  ##   placementIds: JArray
  ##               : Generate tags for these placements.
  ##   tagFormats: JArray
  ##             : Tag formats to generate for these placements.
  ## 
  ## Note: PLACEMENT_TAG_STANDARD can only be generated for 1x1 placements.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581432 = query.getOrDefault("key")
  valid_581432 = validateParameter(valid_581432, JString, required = false,
                                 default = nil)
  if valid_581432 != nil:
    section.add "key", valid_581432
  var valid_581433 = query.getOrDefault("prettyPrint")
  valid_581433 = validateParameter(valid_581433, JBool, required = false,
                                 default = newJBool(true))
  if valid_581433 != nil:
    section.add "prettyPrint", valid_581433
  var valid_581434 = query.getOrDefault("oauth_token")
  valid_581434 = validateParameter(valid_581434, JString, required = false,
                                 default = nil)
  if valid_581434 != nil:
    section.add "oauth_token", valid_581434
  var valid_581435 = query.getOrDefault("alt")
  valid_581435 = validateParameter(valid_581435, JString, required = false,
                                 default = newJString("json"))
  if valid_581435 != nil:
    section.add "alt", valid_581435
  var valid_581436 = query.getOrDefault("userIp")
  valid_581436 = validateParameter(valid_581436, JString, required = false,
                                 default = nil)
  if valid_581436 != nil:
    section.add "userIp", valid_581436
  var valid_581437 = query.getOrDefault("quotaUser")
  valid_581437 = validateParameter(valid_581437, JString, required = false,
                                 default = nil)
  if valid_581437 != nil:
    section.add "quotaUser", valid_581437
  var valid_581438 = query.getOrDefault("campaignId")
  valid_581438 = validateParameter(valid_581438, JString, required = false,
                                 default = nil)
  if valid_581438 != nil:
    section.add "campaignId", valid_581438
  var valid_581439 = query.getOrDefault("placementIds")
  valid_581439 = validateParameter(valid_581439, JArray, required = false,
                                 default = nil)
  if valid_581439 != nil:
    section.add "placementIds", valid_581439
  var valid_581440 = query.getOrDefault("tagFormats")
  valid_581440 = validateParameter(valid_581440, JArray, required = false,
                                 default = nil)
  if valid_581440 != nil:
    section.add "tagFormats", valid_581440
  var valid_581441 = query.getOrDefault("fields")
  valid_581441 = validateParameter(valid_581441, JString, required = false,
                                 default = nil)
  if valid_581441 != nil:
    section.add "fields", valid_581441
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581442: Call_DfareportingPlacementsGeneratetags_581428;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates tags for a placement.
  ## 
  let valid = call_581442.validator(path, query, header, formData, body)
  let scheme = call_581442.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581442.url(scheme.get, call_581442.host, call_581442.base,
                         call_581442.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581442, url, valid)

proc call*(call_581443: Call_DfareportingPlacementsGeneratetags_581428;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; campaignId: string = ""; placementIds: JsonNode = nil;
          tagFormats: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingPlacementsGeneratetags
  ## Generates tags for a placement.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   campaignId: string
  ##             : Generate placements belonging to this campaign. This is a required field.
  ##   placementIds: JArray
  ##               : Generate tags for these placements.
  ##   tagFormats: JArray
  ##             : Tag formats to generate for these placements.
  ## 
  ## Note: PLACEMENT_TAG_STANDARD can only be generated for 1x1 placements.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581444 = newJObject()
  var query_581445 = newJObject()
  add(query_581445, "key", newJString(key))
  add(query_581445, "prettyPrint", newJBool(prettyPrint))
  add(query_581445, "oauth_token", newJString(oauthToken))
  add(path_581444, "profileId", newJString(profileId))
  add(query_581445, "alt", newJString(alt))
  add(query_581445, "userIp", newJString(userIp))
  add(query_581445, "quotaUser", newJString(quotaUser))
  add(query_581445, "campaignId", newJString(campaignId))
  if placementIds != nil:
    query_581445.add "placementIds", placementIds
  if tagFormats != nil:
    query_581445.add "tagFormats", tagFormats
  add(query_581445, "fields", newJString(fields))
  result = call_581443.call(path_581444, query_581445, nil, nil, nil)

var dfareportingPlacementsGeneratetags* = Call_DfareportingPlacementsGeneratetags_581428(
    name: "dfareportingPlacementsGeneratetags", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placements/generatetags",
    validator: validate_DfareportingPlacementsGeneratetags_581429,
    base: "/dfareporting/v3.1", url: url_DfareportingPlacementsGeneratetags_581430,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsGet_581446 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementsGet_581448(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsGet_581447(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one placement by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Placement ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581449 = path.getOrDefault("profileId")
  valid_581449 = validateParameter(valid_581449, JString, required = true,
                                 default = nil)
  if valid_581449 != nil:
    section.add "profileId", valid_581449
  var valid_581450 = path.getOrDefault("id")
  valid_581450 = validateParameter(valid_581450, JString, required = true,
                                 default = nil)
  if valid_581450 != nil:
    section.add "id", valid_581450
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581451 = query.getOrDefault("key")
  valid_581451 = validateParameter(valid_581451, JString, required = false,
                                 default = nil)
  if valid_581451 != nil:
    section.add "key", valid_581451
  var valid_581452 = query.getOrDefault("prettyPrint")
  valid_581452 = validateParameter(valid_581452, JBool, required = false,
                                 default = newJBool(true))
  if valid_581452 != nil:
    section.add "prettyPrint", valid_581452
  var valid_581453 = query.getOrDefault("oauth_token")
  valid_581453 = validateParameter(valid_581453, JString, required = false,
                                 default = nil)
  if valid_581453 != nil:
    section.add "oauth_token", valid_581453
  var valid_581454 = query.getOrDefault("alt")
  valid_581454 = validateParameter(valid_581454, JString, required = false,
                                 default = newJString("json"))
  if valid_581454 != nil:
    section.add "alt", valid_581454
  var valid_581455 = query.getOrDefault("userIp")
  valid_581455 = validateParameter(valid_581455, JString, required = false,
                                 default = nil)
  if valid_581455 != nil:
    section.add "userIp", valid_581455
  var valid_581456 = query.getOrDefault("quotaUser")
  valid_581456 = validateParameter(valid_581456, JString, required = false,
                                 default = nil)
  if valid_581456 != nil:
    section.add "quotaUser", valid_581456
  var valid_581457 = query.getOrDefault("fields")
  valid_581457 = validateParameter(valid_581457, JString, required = false,
                                 default = nil)
  if valid_581457 != nil:
    section.add "fields", valid_581457
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581458: Call_DfareportingPlacementsGet_581446; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one placement by ID.
  ## 
  let valid = call_581458.validator(path, query, header, formData, body)
  let scheme = call_581458.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581458.url(scheme.get, call_581458.host, call_581458.base,
                         call_581458.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581458, url, valid)

proc call*(call_581459: Call_DfareportingPlacementsGet_581446; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingPlacementsGet
  ## Gets one placement by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Placement ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581460 = newJObject()
  var query_581461 = newJObject()
  add(query_581461, "key", newJString(key))
  add(query_581461, "prettyPrint", newJBool(prettyPrint))
  add(query_581461, "oauth_token", newJString(oauthToken))
  add(path_581460, "profileId", newJString(profileId))
  add(path_581460, "id", newJString(id))
  add(query_581461, "alt", newJString(alt))
  add(query_581461, "userIp", newJString(userIp))
  add(query_581461, "quotaUser", newJString(quotaUser))
  add(query_581461, "fields", newJString(fields))
  result = call_581459.call(path_581460, query_581461, nil, nil, nil)

var dfareportingPlacementsGet* = Call_DfareportingPlacementsGet_581446(
    name: "dfareportingPlacementsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placements/{id}",
    validator: validate_DfareportingPlacementsGet_581447,
    base: "/dfareporting/v3.1", url: url_DfareportingPlacementsGet_581448,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlatformTypesList_581462 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlatformTypesList_581464(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/platformTypes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlatformTypesList_581463(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of platform types.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581465 = path.getOrDefault("profileId")
  valid_581465 = validateParameter(valid_581465, JString, required = true,
                                 default = nil)
  if valid_581465 != nil:
    section.add "profileId", valid_581465
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581466 = query.getOrDefault("key")
  valid_581466 = validateParameter(valid_581466, JString, required = false,
                                 default = nil)
  if valid_581466 != nil:
    section.add "key", valid_581466
  var valid_581467 = query.getOrDefault("prettyPrint")
  valid_581467 = validateParameter(valid_581467, JBool, required = false,
                                 default = newJBool(true))
  if valid_581467 != nil:
    section.add "prettyPrint", valid_581467
  var valid_581468 = query.getOrDefault("oauth_token")
  valid_581468 = validateParameter(valid_581468, JString, required = false,
                                 default = nil)
  if valid_581468 != nil:
    section.add "oauth_token", valid_581468
  var valid_581469 = query.getOrDefault("alt")
  valid_581469 = validateParameter(valid_581469, JString, required = false,
                                 default = newJString("json"))
  if valid_581469 != nil:
    section.add "alt", valid_581469
  var valid_581470 = query.getOrDefault("userIp")
  valid_581470 = validateParameter(valid_581470, JString, required = false,
                                 default = nil)
  if valid_581470 != nil:
    section.add "userIp", valid_581470
  var valid_581471 = query.getOrDefault("quotaUser")
  valid_581471 = validateParameter(valid_581471, JString, required = false,
                                 default = nil)
  if valid_581471 != nil:
    section.add "quotaUser", valid_581471
  var valid_581472 = query.getOrDefault("fields")
  valid_581472 = validateParameter(valid_581472, JString, required = false,
                                 default = nil)
  if valid_581472 != nil:
    section.add "fields", valid_581472
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581473: Call_DfareportingPlatformTypesList_581462; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of platform types.
  ## 
  let valid = call_581473.validator(path, query, header, formData, body)
  let scheme = call_581473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581473.url(scheme.get, call_581473.host, call_581473.base,
                         call_581473.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581473, url, valid)

proc call*(call_581474: Call_DfareportingPlatformTypesList_581462;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingPlatformTypesList
  ## Retrieves a list of platform types.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581475 = newJObject()
  var query_581476 = newJObject()
  add(query_581476, "key", newJString(key))
  add(query_581476, "prettyPrint", newJBool(prettyPrint))
  add(query_581476, "oauth_token", newJString(oauthToken))
  add(path_581475, "profileId", newJString(profileId))
  add(query_581476, "alt", newJString(alt))
  add(query_581476, "userIp", newJString(userIp))
  add(query_581476, "quotaUser", newJString(quotaUser))
  add(query_581476, "fields", newJString(fields))
  result = call_581474.call(path_581475, query_581476, nil, nil, nil)

var dfareportingPlatformTypesList* = Call_DfareportingPlatformTypesList_581462(
    name: "dfareportingPlatformTypesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/platformTypes",
    validator: validate_DfareportingPlatformTypesList_581463,
    base: "/dfareporting/v3.1", url: url_DfareportingPlatformTypesList_581464,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlatformTypesGet_581477 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlatformTypesGet_581479(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/platformTypes/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlatformTypesGet_581478(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one platform type by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Platform type ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581480 = path.getOrDefault("profileId")
  valid_581480 = validateParameter(valid_581480, JString, required = true,
                                 default = nil)
  if valid_581480 != nil:
    section.add "profileId", valid_581480
  var valid_581481 = path.getOrDefault("id")
  valid_581481 = validateParameter(valid_581481, JString, required = true,
                                 default = nil)
  if valid_581481 != nil:
    section.add "id", valid_581481
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581482 = query.getOrDefault("key")
  valid_581482 = validateParameter(valid_581482, JString, required = false,
                                 default = nil)
  if valid_581482 != nil:
    section.add "key", valid_581482
  var valid_581483 = query.getOrDefault("prettyPrint")
  valid_581483 = validateParameter(valid_581483, JBool, required = false,
                                 default = newJBool(true))
  if valid_581483 != nil:
    section.add "prettyPrint", valid_581483
  var valid_581484 = query.getOrDefault("oauth_token")
  valid_581484 = validateParameter(valid_581484, JString, required = false,
                                 default = nil)
  if valid_581484 != nil:
    section.add "oauth_token", valid_581484
  var valid_581485 = query.getOrDefault("alt")
  valid_581485 = validateParameter(valid_581485, JString, required = false,
                                 default = newJString("json"))
  if valid_581485 != nil:
    section.add "alt", valid_581485
  var valid_581486 = query.getOrDefault("userIp")
  valid_581486 = validateParameter(valid_581486, JString, required = false,
                                 default = nil)
  if valid_581486 != nil:
    section.add "userIp", valid_581486
  var valid_581487 = query.getOrDefault("quotaUser")
  valid_581487 = validateParameter(valid_581487, JString, required = false,
                                 default = nil)
  if valid_581487 != nil:
    section.add "quotaUser", valid_581487
  var valid_581488 = query.getOrDefault("fields")
  valid_581488 = validateParameter(valid_581488, JString, required = false,
                                 default = nil)
  if valid_581488 != nil:
    section.add "fields", valid_581488
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581489: Call_DfareportingPlatformTypesGet_581477; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one platform type by ID.
  ## 
  let valid = call_581489.validator(path, query, header, formData, body)
  let scheme = call_581489.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581489.url(scheme.get, call_581489.host, call_581489.base,
                         call_581489.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581489, url, valid)

proc call*(call_581490: Call_DfareportingPlatformTypesGet_581477;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingPlatformTypesGet
  ## Gets one platform type by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Platform type ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581491 = newJObject()
  var query_581492 = newJObject()
  add(query_581492, "key", newJString(key))
  add(query_581492, "prettyPrint", newJBool(prettyPrint))
  add(query_581492, "oauth_token", newJString(oauthToken))
  add(path_581491, "profileId", newJString(profileId))
  add(path_581491, "id", newJString(id))
  add(query_581492, "alt", newJString(alt))
  add(query_581492, "userIp", newJString(userIp))
  add(query_581492, "quotaUser", newJString(quotaUser))
  add(query_581492, "fields", newJString(fields))
  result = call_581490.call(path_581491, query_581492, nil, nil, nil)

var dfareportingPlatformTypesGet* = Call_DfareportingPlatformTypesGet_581477(
    name: "dfareportingPlatformTypesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/platformTypes/{id}",
    validator: validate_DfareportingPlatformTypesGet_581478,
    base: "/dfareporting/v3.1", url: url_DfareportingPlatformTypesGet_581479,
    schemes: {Scheme.Https})
type
  Call_DfareportingPostalCodesList_581493 = ref object of OpenApiRestCall_578364
proc url_DfareportingPostalCodesList_581495(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/postalCodes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPostalCodesList_581494(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of postal codes.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581496 = path.getOrDefault("profileId")
  valid_581496 = validateParameter(valid_581496, JString, required = true,
                                 default = nil)
  if valid_581496 != nil:
    section.add "profileId", valid_581496
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581497 = query.getOrDefault("key")
  valid_581497 = validateParameter(valid_581497, JString, required = false,
                                 default = nil)
  if valid_581497 != nil:
    section.add "key", valid_581497
  var valid_581498 = query.getOrDefault("prettyPrint")
  valid_581498 = validateParameter(valid_581498, JBool, required = false,
                                 default = newJBool(true))
  if valid_581498 != nil:
    section.add "prettyPrint", valid_581498
  var valid_581499 = query.getOrDefault("oauth_token")
  valid_581499 = validateParameter(valid_581499, JString, required = false,
                                 default = nil)
  if valid_581499 != nil:
    section.add "oauth_token", valid_581499
  var valid_581500 = query.getOrDefault("alt")
  valid_581500 = validateParameter(valid_581500, JString, required = false,
                                 default = newJString("json"))
  if valid_581500 != nil:
    section.add "alt", valid_581500
  var valid_581501 = query.getOrDefault("userIp")
  valid_581501 = validateParameter(valid_581501, JString, required = false,
                                 default = nil)
  if valid_581501 != nil:
    section.add "userIp", valid_581501
  var valid_581502 = query.getOrDefault("quotaUser")
  valid_581502 = validateParameter(valid_581502, JString, required = false,
                                 default = nil)
  if valid_581502 != nil:
    section.add "quotaUser", valid_581502
  var valid_581503 = query.getOrDefault("fields")
  valid_581503 = validateParameter(valid_581503, JString, required = false,
                                 default = nil)
  if valid_581503 != nil:
    section.add "fields", valid_581503
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581504: Call_DfareportingPostalCodesList_581493; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of postal codes.
  ## 
  let valid = call_581504.validator(path, query, header, formData, body)
  let scheme = call_581504.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581504.url(scheme.get, call_581504.host, call_581504.base,
                         call_581504.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581504, url, valid)

proc call*(call_581505: Call_DfareportingPostalCodesList_581493; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingPostalCodesList
  ## Retrieves a list of postal codes.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581506 = newJObject()
  var query_581507 = newJObject()
  add(query_581507, "key", newJString(key))
  add(query_581507, "prettyPrint", newJBool(prettyPrint))
  add(query_581507, "oauth_token", newJString(oauthToken))
  add(path_581506, "profileId", newJString(profileId))
  add(query_581507, "alt", newJString(alt))
  add(query_581507, "userIp", newJString(userIp))
  add(query_581507, "quotaUser", newJString(quotaUser))
  add(query_581507, "fields", newJString(fields))
  result = call_581505.call(path_581506, query_581507, nil, nil, nil)

var dfareportingPostalCodesList* = Call_DfareportingPostalCodesList_581493(
    name: "dfareportingPostalCodesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/postalCodes",
    validator: validate_DfareportingPostalCodesList_581494,
    base: "/dfareporting/v3.1", url: url_DfareportingPostalCodesList_581495,
    schemes: {Scheme.Https})
type
  Call_DfareportingPostalCodesGet_581508 = ref object of OpenApiRestCall_578364
proc url_DfareportingPostalCodesGet_581510(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "code" in path, "`code` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/postalCodes/"),
               (kind: VariableSegment, value: "code")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPostalCodesGet_581509(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one postal code by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   code: JString (required)
  ##       : Postal code ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581511 = path.getOrDefault("profileId")
  valid_581511 = validateParameter(valid_581511, JString, required = true,
                                 default = nil)
  if valid_581511 != nil:
    section.add "profileId", valid_581511
  var valid_581512 = path.getOrDefault("code")
  valid_581512 = validateParameter(valid_581512, JString, required = true,
                                 default = nil)
  if valid_581512 != nil:
    section.add "code", valid_581512
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581513 = query.getOrDefault("key")
  valid_581513 = validateParameter(valid_581513, JString, required = false,
                                 default = nil)
  if valid_581513 != nil:
    section.add "key", valid_581513
  var valid_581514 = query.getOrDefault("prettyPrint")
  valid_581514 = validateParameter(valid_581514, JBool, required = false,
                                 default = newJBool(true))
  if valid_581514 != nil:
    section.add "prettyPrint", valid_581514
  var valid_581515 = query.getOrDefault("oauth_token")
  valid_581515 = validateParameter(valid_581515, JString, required = false,
                                 default = nil)
  if valid_581515 != nil:
    section.add "oauth_token", valid_581515
  var valid_581516 = query.getOrDefault("alt")
  valid_581516 = validateParameter(valid_581516, JString, required = false,
                                 default = newJString("json"))
  if valid_581516 != nil:
    section.add "alt", valid_581516
  var valid_581517 = query.getOrDefault("userIp")
  valid_581517 = validateParameter(valid_581517, JString, required = false,
                                 default = nil)
  if valid_581517 != nil:
    section.add "userIp", valid_581517
  var valid_581518 = query.getOrDefault("quotaUser")
  valid_581518 = validateParameter(valid_581518, JString, required = false,
                                 default = nil)
  if valid_581518 != nil:
    section.add "quotaUser", valid_581518
  var valid_581519 = query.getOrDefault("fields")
  valid_581519 = validateParameter(valid_581519, JString, required = false,
                                 default = nil)
  if valid_581519 != nil:
    section.add "fields", valid_581519
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581520: Call_DfareportingPostalCodesGet_581508; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one postal code by ID.
  ## 
  let valid = call_581520.validator(path, query, header, formData, body)
  let scheme = call_581520.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581520.url(scheme.get, call_581520.host, call_581520.base,
                         call_581520.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581520, url, valid)

proc call*(call_581521: Call_DfareportingPostalCodesGet_581508; profileId: string;
          code: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingPostalCodesGet
  ## Gets one postal code by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   code: string (required)
  ##       : Postal code ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581522 = newJObject()
  var query_581523 = newJObject()
  add(query_581523, "key", newJString(key))
  add(query_581523, "prettyPrint", newJBool(prettyPrint))
  add(query_581523, "oauth_token", newJString(oauthToken))
  add(path_581522, "profileId", newJString(profileId))
  add(query_581523, "alt", newJString(alt))
  add(query_581523, "userIp", newJString(userIp))
  add(query_581523, "quotaUser", newJString(quotaUser))
  add(path_581522, "code", newJString(code))
  add(query_581523, "fields", newJString(fields))
  result = call_581521.call(path_581522, query_581523, nil, nil, nil)

var dfareportingPostalCodesGet* = Call_DfareportingPostalCodesGet_581508(
    name: "dfareportingPostalCodesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/postalCodes/{code}",
    validator: validate_DfareportingPostalCodesGet_581509,
    base: "/dfareporting/v3.1", url: url_DfareportingPostalCodesGet_581510,
    schemes: {Scheme.Https})
type
  Call_DfareportingProjectsList_581524 = ref object of OpenApiRestCall_578364
proc url_DfareportingProjectsList_581526(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingProjectsList_581525(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of projects, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581527 = path.getOrDefault("profileId")
  valid_581527 = validateParameter(valid_581527, JString, required = true,
                                 default = nil)
  if valid_581527 != nil:
    section.add "profileId", valid_581527
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   advertiserIds: JArray
  ##                : Select only projects with these advertiser IDs.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for projects by name or ID. Wildcards (*) are allowed. For example, "project*2015" will return projects with names like "project June 2015", "project April 2015", or simply "project 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "project" will match projects with name "my project", "project 2015", or simply "project".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only projects with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_581528 = query.getOrDefault("key")
  valid_581528 = validateParameter(valid_581528, JString, required = false,
                                 default = nil)
  if valid_581528 != nil:
    section.add "key", valid_581528
  var valid_581529 = query.getOrDefault("prettyPrint")
  valid_581529 = validateParameter(valid_581529, JBool, required = false,
                                 default = newJBool(true))
  if valid_581529 != nil:
    section.add "prettyPrint", valid_581529
  var valid_581530 = query.getOrDefault("oauth_token")
  valid_581530 = validateParameter(valid_581530, JString, required = false,
                                 default = nil)
  if valid_581530 != nil:
    section.add "oauth_token", valid_581530
  var valid_581531 = query.getOrDefault("sortField")
  valid_581531 = validateParameter(valid_581531, JString, required = false,
                                 default = newJString("ID"))
  if valid_581531 != nil:
    section.add "sortField", valid_581531
  var valid_581532 = query.getOrDefault("advertiserIds")
  valid_581532 = validateParameter(valid_581532, JArray, required = false,
                                 default = nil)
  if valid_581532 != nil:
    section.add "advertiserIds", valid_581532
  var valid_581533 = query.getOrDefault("alt")
  valid_581533 = validateParameter(valid_581533, JString, required = false,
                                 default = newJString("json"))
  if valid_581533 != nil:
    section.add "alt", valid_581533
  var valid_581534 = query.getOrDefault("userIp")
  valid_581534 = validateParameter(valid_581534, JString, required = false,
                                 default = nil)
  if valid_581534 != nil:
    section.add "userIp", valid_581534
  var valid_581535 = query.getOrDefault("quotaUser")
  valid_581535 = validateParameter(valid_581535, JString, required = false,
                                 default = nil)
  if valid_581535 != nil:
    section.add "quotaUser", valid_581535
  var valid_581536 = query.getOrDefault("pageToken")
  valid_581536 = validateParameter(valid_581536, JString, required = false,
                                 default = nil)
  if valid_581536 != nil:
    section.add "pageToken", valid_581536
  var valid_581537 = query.getOrDefault("searchString")
  valid_581537 = validateParameter(valid_581537, JString, required = false,
                                 default = nil)
  if valid_581537 != nil:
    section.add "searchString", valid_581537
  var valid_581538 = query.getOrDefault("sortOrder")
  valid_581538 = validateParameter(valid_581538, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581538 != nil:
    section.add "sortOrder", valid_581538
  var valid_581539 = query.getOrDefault("ids")
  valid_581539 = validateParameter(valid_581539, JArray, required = false,
                                 default = nil)
  if valid_581539 != nil:
    section.add "ids", valid_581539
  var valid_581540 = query.getOrDefault("fields")
  valid_581540 = validateParameter(valid_581540, JString, required = false,
                                 default = nil)
  if valid_581540 != nil:
    section.add "fields", valid_581540
  var valid_581541 = query.getOrDefault("maxResults")
  valid_581541 = validateParameter(valid_581541, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581541 != nil:
    section.add "maxResults", valid_581541
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581542: Call_DfareportingProjectsList_581524; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of projects, possibly filtered. This method supports paging.
  ## 
  let valid = call_581542.validator(path, query, header, formData, body)
  let scheme = call_581542.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581542.url(scheme.get, call_581542.host, call_581542.base,
                         call_581542.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581542, url, valid)

proc call*(call_581543: Call_DfareportingProjectsList_581524; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          sortField: string = "ID"; advertiserIds: JsonNode = nil; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          ids: JsonNode = nil; fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingProjectsList
  ## Retrieves a list of projects, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   advertiserIds: JArray
  ##                : Select only projects with these advertiser IDs.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for projects by name or ID. Wildcards (*) are allowed. For example, "project*2015" will return projects with names like "project June 2015", "project April 2015", or simply "project 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "project" will match projects with name "my project", "project 2015", or simply "project".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only projects with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_581544 = newJObject()
  var query_581545 = newJObject()
  add(query_581545, "key", newJString(key))
  add(query_581545, "prettyPrint", newJBool(prettyPrint))
  add(query_581545, "oauth_token", newJString(oauthToken))
  add(path_581544, "profileId", newJString(profileId))
  add(query_581545, "sortField", newJString(sortField))
  if advertiserIds != nil:
    query_581545.add "advertiserIds", advertiserIds
  add(query_581545, "alt", newJString(alt))
  add(query_581545, "userIp", newJString(userIp))
  add(query_581545, "quotaUser", newJString(quotaUser))
  add(query_581545, "pageToken", newJString(pageToken))
  add(query_581545, "searchString", newJString(searchString))
  add(query_581545, "sortOrder", newJString(sortOrder))
  if ids != nil:
    query_581545.add "ids", ids
  add(query_581545, "fields", newJString(fields))
  add(query_581545, "maxResults", newJInt(maxResults))
  result = call_581543.call(path_581544, query_581545, nil, nil, nil)

var dfareportingProjectsList* = Call_DfareportingProjectsList_581524(
    name: "dfareportingProjectsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/projects",
    validator: validate_DfareportingProjectsList_581525,
    base: "/dfareporting/v3.1", url: url_DfareportingProjectsList_581526,
    schemes: {Scheme.Https})
type
  Call_DfareportingProjectsGet_581546 = ref object of OpenApiRestCall_578364
proc url_DfareportingProjectsGet_581548(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingProjectsGet_581547(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one project by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Project ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581549 = path.getOrDefault("profileId")
  valid_581549 = validateParameter(valid_581549, JString, required = true,
                                 default = nil)
  if valid_581549 != nil:
    section.add "profileId", valid_581549
  var valid_581550 = path.getOrDefault("id")
  valid_581550 = validateParameter(valid_581550, JString, required = true,
                                 default = nil)
  if valid_581550 != nil:
    section.add "id", valid_581550
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581551 = query.getOrDefault("key")
  valid_581551 = validateParameter(valid_581551, JString, required = false,
                                 default = nil)
  if valid_581551 != nil:
    section.add "key", valid_581551
  var valid_581552 = query.getOrDefault("prettyPrint")
  valid_581552 = validateParameter(valid_581552, JBool, required = false,
                                 default = newJBool(true))
  if valid_581552 != nil:
    section.add "prettyPrint", valid_581552
  var valid_581553 = query.getOrDefault("oauth_token")
  valid_581553 = validateParameter(valid_581553, JString, required = false,
                                 default = nil)
  if valid_581553 != nil:
    section.add "oauth_token", valid_581553
  var valid_581554 = query.getOrDefault("alt")
  valid_581554 = validateParameter(valid_581554, JString, required = false,
                                 default = newJString("json"))
  if valid_581554 != nil:
    section.add "alt", valid_581554
  var valid_581555 = query.getOrDefault("userIp")
  valid_581555 = validateParameter(valid_581555, JString, required = false,
                                 default = nil)
  if valid_581555 != nil:
    section.add "userIp", valid_581555
  var valid_581556 = query.getOrDefault("quotaUser")
  valid_581556 = validateParameter(valid_581556, JString, required = false,
                                 default = nil)
  if valid_581556 != nil:
    section.add "quotaUser", valid_581556
  var valid_581557 = query.getOrDefault("fields")
  valid_581557 = validateParameter(valid_581557, JString, required = false,
                                 default = nil)
  if valid_581557 != nil:
    section.add "fields", valid_581557
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581558: Call_DfareportingProjectsGet_581546; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one project by ID.
  ## 
  let valid = call_581558.validator(path, query, header, formData, body)
  let scheme = call_581558.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581558.url(scheme.get, call_581558.host, call_581558.base,
                         call_581558.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581558, url, valid)

proc call*(call_581559: Call_DfareportingProjectsGet_581546; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingProjectsGet
  ## Gets one project by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Project ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581560 = newJObject()
  var query_581561 = newJObject()
  add(query_581561, "key", newJString(key))
  add(query_581561, "prettyPrint", newJBool(prettyPrint))
  add(query_581561, "oauth_token", newJString(oauthToken))
  add(path_581560, "profileId", newJString(profileId))
  add(path_581560, "id", newJString(id))
  add(query_581561, "alt", newJString(alt))
  add(query_581561, "userIp", newJString(userIp))
  add(query_581561, "quotaUser", newJString(quotaUser))
  add(query_581561, "fields", newJString(fields))
  result = call_581559.call(path_581560, query_581561, nil, nil, nil)

var dfareportingProjectsGet* = Call_DfareportingProjectsGet_581546(
    name: "dfareportingProjectsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/projects/{id}",
    validator: validate_DfareportingProjectsGet_581547,
    base: "/dfareporting/v3.1", url: url_DfareportingProjectsGet_581548,
    schemes: {Scheme.Https})
type
  Call_DfareportingInventoryItemsList_581562 = ref object of OpenApiRestCall_578364
proc url_DfareportingInventoryItemsList_581564(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/inventoryItems")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingInventoryItemsList_581563(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of inventory items, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   projectId: JString (required)
  ##            : Project ID for order documents.
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `projectId` field"
  var valid_581565 = path.getOrDefault("projectId")
  valid_581565 = validateParameter(valid_581565, JString, required = true,
                                 default = nil)
  if valid_581565 != nil:
    section.add "projectId", valid_581565
  var valid_581566 = path.getOrDefault("profileId")
  valid_581566 = validateParameter(valid_581566, JString, required = true,
                                 default = nil)
  if valid_581566 != nil:
    section.add "profileId", valid_581566
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   inPlan: JBool
  ##         : Select only inventory items that are in plan.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   orderId: JArray
  ##          : Select only inventory items that belong to specified orders.
  ##   type: JString
  ##       : Select only inventory items with this type.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   siteId: JArray
  ##         : Select only inventory items that are associated with these sites.
  ##   ids: JArray
  ##      : Select only inventory items with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_581567 = query.getOrDefault("key")
  valid_581567 = validateParameter(valid_581567, JString, required = false,
                                 default = nil)
  if valid_581567 != nil:
    section.add "key", valid_581567
  var valid_581568 = query.getOrDefault("prettyPrint")
  valid_581568 = validateParameter(valid_581568, JBool, required = false,
                                 default = newJBool(true))
  if valid_581568 != nil:
    section.add "prettyPrint", valid_581568
  var valid_581569 = query.getOrDefault("oauth_token")
  valid_581569 = validateParameter(valid_581569, JString, required = false,
                                 default = nil)
  if valid_581569 != nil:
    section.add "oauth_token", valid_581569
  var valid_581570 = query.getOrDefault("sortField")
  valid_581570 = validateParameter(valid_581570, JString, required = false,
                                 default = newJString("ID"))
  if valid_581570 != nil:
    section.add "sortField", valid_581570
  var valid_581571 = query.getOrDefault("alt")
  valid_581571 = validateParameter(valid_581571, JString, required = false,
                                 default = newJString("json"))
  if valid_581571 != nil:
    section.add "alt", valid_581571
  var valid_581572 = query.getOrDefault("userIp")
  valid_581572 = validateParameter(valid_581572, JString, required = false,
                                 default = nil)
  if valid_581572 != nil:
    section.add "userIp", valid_581572
  var valid_581573 = query.getOrDefault("inPlan")
  valid_581573 = validateParameter(valid_581573, JBool, required = false, default = nil)
  if valid_581573 != nil:
    section.add "inPlan", valid_581573
  var valid_581574 = query.getOrDefault("quotaUser")
  valid_581574 = validateParameter(valid_581574, JString, required = false,
                                 default = nil)
  if valid_581574 != nil:
    section.add "quotaUser", valid_581574
  var valid_581575 = query.getOrDefault("orderId")
  valid_581575 = validateParameter(valid_581575, JArray, required = false,
                                 default = nil)
  if valid_581575 != nil:
    section.add "orderId", valid_581575
  var valid_581576 = query.getOrDefault("type")
  valid_581576 = validateParameter(valid_581576, JString, required = false, default = newJString(
      "PLANNING_PLACEMENT_TYPE_CREDIT"))
  if valid_581576 != nil:
    section.add "type", valid_581576
  var valid_581577 = query.getOrDefault("pageToken")
  valid_581577 = validateParameter(valid_581577, JString, required = false,
                                 default = nil)
  if valid_581577 != nil:
    section.add "pageToken", valid_581577
  var valid_581578 = query.getOrDefault("sortOrder")
  valid_581578 = validateParameter(valid_581578, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581578 != nil:
    section.add "sortOrder", valid_581578
  var valid_581579 = query.getOrDefault("siteId")
  valid_581579 = validateParameter(valid_581579, JArray, required = false,
                                 default = nil)
  if valid_581579 != nil:
    section.add "siteId", valid_581579
  var valid_581580 = query.getOrDefault("ids")
  valid_581580 = validateParameter(valid_581580, JArray, required = false,
                                 default = nil)
  if valid_581580 != nil:
    section.add "ids", valid_581580
  var valid_581581 = query.getOrDefault("fields")
  valid_581581 = validateParameter(valid_581581, JString, required = false,
                                 default = nil)
  if valid_581581 != nil:
    section.add "fields", valid_581581
  var valid_581582 = query.getOrDefault("maxResults")
  valid_581582 = validateParameter(valid_581582, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581582 != nil:
    section.add "maxResults", valid_581582
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581583: Call_DfareportingInventoryItemsList_581562; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of inventory items, possibly filtered. This method supports paging.
  ## 
  let valid = call_581583.validator(path, query, header, formData, body)
  let scheme = call_581583.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581583.url(scheme.get, call_581583.host, call_581583.base,
                         call_581583.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581583, url, valid)

proc call*(call_581584: Call_DfareportingInventoryItemsList_581562;
          projectId: string; profileId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; sortField: string = "ID";
          alt: string = "json"; userIp: string = ""; inPlan: bool = false;
          quotaUser: string = ""; orderId: JsonNode = nil;
          `type`: string = "PLANNING_PLACEMENT_TYPE_CREDIT"; pageToken: string = "";
          sortOrder: string = "ASCENDING"; siteId: JsonNode = nil; ids: JsonNode = nil;
          fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingInventoryItemsList
  ## Retrieves a list of inventory items, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   projectId: string (required)
  ##            : Project ID for order documents.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   inPlan: bool
  ##         : Select only inventory items that are in plan.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   orderId: JArray
  ##          : Select only inventory items that belong to specified orders.
  ##   type: string
  ##       : Select only inventory items with this type.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   siteId: JArray
  ##         : Select only inventory items that are associated with these sites.
  ##   ids: JArray
  ##      : Select only inventory items with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_581585 = newJObject()
  var query_581586 = newJObject()
  add(query_581586, "key", newJString(key))
  add(query_581586, "prettyPrint", newJBool(prettyPrint))
  add(query_581586, "oauth_token", newJString(oauthToken))
  add(path_581585, "projectId", newJString(projectId))
  add(path_581585, "profileId", newJString(profileId))
  add(query_581586, "sortField", newJString(sortField))
  add(query_581586, "alt", newJString(alt))
  add(query_581586, "userIp", newJString(userIp))
  add(query_581586, "inPlan", newJBool(inPlan))
  add(query_581586, "quotaUser", newJString(quotaUser))
  if orderId != nil:
    query_581586.add "orderId", orderId
  add(query_581586, "type", newJString(`type`))
  add(query_581586, "pageToken", newJString(pageToken))
  add(query_581586, "sortOrder", newJString(sortOrder))
  if siteId != nil:
    query_581586.add "siteId", siteId
  if ids != nil:
    query_581586.add "ids", ids
  add(query_581586, "fields", newJString(fields))
  add(query_581586, "maxResults", newJInt(maxResults))
  result = call_581584.call(path_581585, query_581586, nil, nil, nil)

var dfareportingInventoryItemsList* = Call_DfareportingInventoryItemsList_581562(
    name: "dfareportingInventoryItemsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/projects/{projectId}/inventoryItems",
    validator: validate_DfareportingInventoryItemsList_581563,
    base: "/dfareporting/v3.1", url: url_DfareportingInventoryItemsList_581564,
    schemes: {Scheme.Https})
type
  Call_DfareportingInventoryItemsGet_581587 = ref object of OpenApiRestCall_578364
proc url_DfareportingInventoryItemsGet_581589(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/inventoryItems/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingInventoryItemsGet_581588(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one inventory item by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   projectId: JString (required)
  ##            : Project ID for order documents.
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Inventory item ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `projectId` field"
  var valid_581590 = path.getOrDefault("projectId")
  valid_581590 = validateParameter(valid_581590, JString, required = true,
                                 default = nil)
  if valid_581590 != nil:
    section.add "projectId", valid_581590
  var valid_581591 = path.getOrDefault("profileId")
  valid_581591 = validateParameter(valid_581591, JString, required = true,
                                 default = nil)
  if valid_581591 != nil:
    section.add "profileId", valid_581591
  var valid_581592 = path.getOrDefault("id")
  valid_581592 = validateParameter(valid_581592, JString, required = true,
                                 default = nil)
  if valid_581592 != nil:
    section.add "id", valid_581592
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581593 = query.getOrDefault("key")
  valid_581593 = validateParameter(valid_581593, JString, required = false,
                                 default = nil)
  if valid_581593 != nil:
    section.add "key", valid_581593
  var valid_581594 = query.getOrDefault("prettyPrint")
  valid_581594 = validateParameter(valid_581594, JBool, required = false,
                                 default = newJBool(true))
  if valid_581594 != nil:
    section.add "prettyPrint", valid_581594
  var valid_581595 = query.getOrDefault("oauth_token")
  valid_581595 = validateParameter(valid_581595, JString, required = false,
                                 default = nil)
  if valid_581595 != nil:
    section.add "oauth_token", valid_581595
  var valid_581596 = query.getOrDefault("alt")
  valid_581596 = validateParameter(valid_581596, JString, required = false,
                                 default = newJString("json"))
  if valid_581596 != nil:
    section.add "alt", valid_581596
  var valid_581597 = query.getOrDefault("userIp")
  valid_581597 = validateParameter(valid_581597, JString, required = false,
                                 default = nil)
  if valid_581597 != nil:
    section.add "userIp", valid_581597
  var valid_581598 = query.getOrDefault("quotaUser")
  valid_581598 = validateParameter(valid_581598, JString, required = false,
                                 default = nil)
  if valid_581598 != nil:
    section.add "quotaUser", valid_581598
  var valid_581599 = query.getOrDefault("fields")
  valid_581599 = validateParameter(valid_581599, JString, required = false,
                                 default = nil)
  if valid_581599 != nil:
    section.add "fields", valid_581599
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581600: Call_DfareportingInventoryItemsGet_581587; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one inventory item by ID.
  ## 
  let valid = call_581600.validator(path, query, header, formData, body)
  let scheme = call_581600.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581600.url(scheme.get, call_581600.host, call_581600.base,
                         call_581600.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581600, url, valid)

proc call*(call_581601: Call_DfareportingInventoryItemsGet_581587;
          projectId: string; profileId: string; id: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingInventoryItemsGet
  ## Gets one inventory item by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   projectId: string (required)
  ##            : Project ID for order documents.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Inventory item ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581602 = newJObject()
  var query_581603 = newJObject()
  add(query_581603, "key", newJString(key))
  add(query_581603, "prettyPrint", newJBool(prettyPrint))
  add(query_581603, "oauth_token", newJString(oauthToken))
  add(path_581602, "projectId", newJString(projectId))
  add(path_581602, "profileId", newJString(profileId))
  add(path_581602, "id", newJString(id))
  add(query_581603, "alt", newJString(alt))
  add(query_581603, "userIp", newJString(userIp))
  add(query_581603, "quotaUser", newJString(quotaUser))
  add(query_581603, "fields", newJString(fields))
  result = call_581601.call(path_581602, query_581603, nil, nil, nil)

var dfareportingInventoryItemsGet* = Call_DfareportingInventoryItemsGet_581587(
    name: "dfareportingInventoryItemsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/projects/{projectId}/inventoryItems/{id}",
    validator: validate_DfareportingInventoryItemsGet_581588,
    base: "/dfareporting/v3.1", url: url_DfareportingInventoryItemsGet_581589,
    schemes: {Scheme.Https})
type
  Call_DfareportingOrderDocumentsList_581604 = ref object of OpenApiRestCall_578364
proc url_DfareportingOrderDocumentsList_581606(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/orderDocuments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOrderDocumentsList_581605(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of order documents, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   projectId: JString (required)
  ##            : Project ID for order documents.
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `projectId` field"
  var valid_581607 = path.getOrDefault("projectId")
  valid_581607 = validateParameter(valid_581607, JString, required = true,
                                 default = nil)
  if valid_581607 != nil:
    section.add "projectId", valid_581607
  var valid_581608 = path.getOrDefault("profileId")
  valid_581608 = validateParameter(valid_581608, JString, required = true,
                                 default = nil)
  if valid_581608 != nil:
    section.add "profileId", valid_581608
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   approved: JBool
  ##           : Select only order documents that have been approved by at least one user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   orderId: JArray
  ##          : Select only order documents for specified orders.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for order documents by name or ID. Wildcards (*) are allowed. For example, "orderdocument*2015" will return order documents with names like "orderdocument June 2015", "orderdocument April 2015", or simply "orderdocument 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "orderdocument" will match order documents with name "my orderdocument", "orderdocument 2015", or simply "orderdocument".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   siteId: JArray
  ##         : Select only order documents that are associated with these sites.
  ##   ids: JArray
  ##      : Select only order documents with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_581609 = query.getOrDefault("key")
  valid_581609 = validateParameter(valid_581609, JString, required = false,
                                 default = nil)
  if valid_581609 != nil:
    section.add "key", valid_581609
  var valid_581610 = query.getOrDefault("prettyPrint")
  valid_581610 = validateParameter(valid_581610, JBool, required = false,
                                 default = newJBool(true))
  if valid_581610 != nil:
    section.add "prettyPrint", valid_581610
  var valid_581611 = query.getOrDefault("oauth_token")
  valid_581611 = validateParameter(valid_581611, JString, required = false,
                                 default = nil)
  if valid_581611 != nil:
    section.add "oauth_token", valid_581611
  var valid_581612 = query.getOrDefault("approved")
  valid_581612 = validateParameter(valid_581612, JBool, required = false, default = nil)
  if valid_581612 != nil:
    section.add "approved", valid_581612
  var valid_581613 = query.getOrDefault("sortField")
  valid_581613 = validateParameter(valid_581613, JString, required = false,
                                 default = newJString("ID"))
  if valid_581613 != nil:
    section.add "sortField", valid_581613
  var valid_581614 = query.getOrDefault("alt")
  valid_581614 = validateParameter(valid_581614, JString, required = false,
                                 default = newJString("json"))
  if valid_581614 != nil:
    section.add "alt", valid_581614
  var valid_581615 = query.getOrDefault("userIp")
  valid_581615 = validateParameter(valid_581615, JString, required = false,
                                 default = nil)
  if valid_581615 != nil:
    section.add "userIp", valid_581615
  var valid_581616 = query.getOrDefault("quotaUser")
  valid_581616 = validateParameter(valid_581616, JString, required = false,
                                 default = nil)
  if valid_581616 != nil:
    section.add "quotaUser", valid_581616
  var valid_581617 = query.getOrDefault("orderId")
  valid_581617 = validateParameter(valid_581617, JArray, required = false,
                                 default = nil)
  if valid_581617 != nil:
    section.add "orderId", valid_581617
  var valid_581618 = query.getOrDefault("pageToken")
  valid_581618 = validateParameter(valid_581618, JString, required = false,
                                 default = nil)
  if valid_581618 != nil:
    section.add "pageToken", valid_581618
  var valid_581619 = query.getOrDefault("searchString")
  valid_581619 = validateParameter(valid_581619, JString, required = false,
                                 default = nil)
  if valid_581619 != nil:
    section.add "searchString", valid_581619
  var valid_581620 = query.getOrDefault("sortOrder")
  valid_581620 = validateParameter(valid_581620, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581620 != nil:
    section.add "sortOrder", valid_581620
  var valid_581621 = query.getOrDefault("siteId")
  valid_581621 = validateParameter(valid_581621, JArray, required = false,
                                 default = nil)
  if valid_581621 != nil:
    section.add "siteId", valid_581621
  var valid_581622 = query.getOrDefault("ids")
  valid_581622 = validateParameter(valid_581622, JArray, required = false,
                                 default = nil)
  if valid_581622 != nil:
    section.add "ids", valid_581622
  var valid_581623 = query.getOrDefault("fields")
  valid_581623 = validateParameter(valid_581623, JString, required = false,
                                 default = nil)
  if valid_581623 != nil:
    section.add "fields", valid_581623
  var valid_581624 = query.getOrDefault("maxResults")
  valid_581624 = validateParameter(valid_581624, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581624 != nil:
    section.add "maxResults", valid_581624
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581625: Call_DfareportingOrderDocumentsList_581604; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of order documents, possibly filtered. This method supports paging.
  ## 
  let valid = call_581625.validator(path, query, header, formData, body)
  let scheme = call_581625.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581625.url(scheme.get, call_581625.host, call_581625.base,
                         call_581625.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581625, url, valid)

proc call*(call_581626: Call_DfareportingOrderDocumentsList_581604;
          projectId: string; profileId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; approved: bool = false;
          sortField: string = "ID"; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; orderId: JsonNode = nil; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          siteId: JsonNode = nil; ids: JsonNode = nil; fields: string = "";
          maxResults: int = 1000): Recallable =
  ## dfareportingOrderDocumentsList
  ## Retrieves a list of order documents, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   projectId: string (required)
  ##            : Project ID for order documents.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   approved: bool
  ##           : Select only order documents that have been approved by at least one user.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   orderId: JArray
  ##          : Select only order documents for specified orders.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for order documents by name or ID. Wildcards (*) are allowed. For example, "orderdocument*2015" will return order documents with names like "orderdocument June 2015", "orderdocument April 2015", or simply "orderdocument 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "orderdocument" will match order documents with name "my orderdocument", "orderdocument 2015", or simply "orderdocument".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   siteId: JArray
  ##         : Select only order documents that are associated with these sites.
  ##   ids: JArray
  ##      : Select only order documents with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_581627 = newJObject()
  var query_581628 = newJObject()
  add(query_581628, "key", newJString(key))
  add(query_581628, "prettyPrint", newJBool(prettyPrint))
  add(query_581628, "oauth_token", newJString(oauthToken))
  add(path_581627, "projectId", newJString(projectId))
  add(path_581627, "profileId", newJString(profileId))
  add(query_581628, "approved", newJBool(approved))
  add(query_581628, "sortField", newJString(sortField))
  add(query_581628, "alt", newJString(alt))
  add(query_581628, "userIp", newJString(userIp))
  add(query_581628, "quotaUser", newJString(quotaUser))
  if orderId != nil:
    query_581628.add "orderId", orderId
  add(query_581628, "pageToken", newJString(pageToken))
  add(query_581628, "searchString", newJString(searchString))
  add(query_581628, "sortOrder", newJString(sortOrder))
  if siteId != nil:
    query_581628.add "siteId", siteId
  if ids != nil:
    query_581628.add "ids", ids
  add(query_581628, "fields", newJString(fields))
  add(query_581628, "maxResults", newJInt(maxResults))
  result = call_581626.call(path_581627, query_581628, nil, nil, nil)

var dfareportingOrderDocumentsList* = Call_DfareportingOrderDocumentsList_581604(
    name: "dfareportingOrderDocumentsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/projects/{projectId}/orderDocuments",
    validator: validate_DfareportingOrderDocumentsList_581605,
    base: "/dfareporting/v3.1", url: url_DfareportingOrderDocumentsList_581606,
    schemes: {Scheme.Https})
type
  Call_DfareportingOrderDocumentsGet_581629 = ref object of OpenApiRestCall_578364
proc url_DfareportingOrderDocumentsGet_581631(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/orderDocuments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOrderDocumentsGet_581630(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one order document by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   projectId: JString (required)
  ##            : Project ID for order documents.
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Order document ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `projectId` field"
  var valid_581632 = path.getOrDefault("projectId")
  valid_581632 = validateParameter(valid_581632, JString, required = true,
                                 default = nil)
  if valid_581632 != nil:
    section.add "projectId", valid_581632
  var valid_581633 = path.getOrDefault("profileId")
  valid_581633 = validateParameter(valid_581633, JString, required = true,
                                 default = nil)
  if valid_581633 != nil:
    section.add "profileId", valid_581633
  var valid_581634 = path.getOrDefault("id")
  valid_581634 = validateParameter(valid_581634, JString, required = true,
                                 default = nil)
  if valid_581634 != nil:
    section.add "id", valid_581634
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581635 = query.getOrDefault("key")
  valid_581635 = validateParameter(valid_581635, JString, required = false,
                                 default = nil)
  if valid_581635 != nil:
    section.add "key", valid_581635
  var valid_581636 = query.getOrDefault("prettyPrint")
  valid_581636 = validateParameter(valid_581636, JBool, required = false,
                                 default = newJBool(true))
  if valid_581636 != nil:
    section.add "prettyPrint", valid_581636
  var valid_581637 = query.getOrDefault("oauth_token")
  valid_581637 = validateParameter(valid_581637, JString, required = false,
                                 default = nil)
  if valid_581637 != nil:
    section.add "oauth_token", valid_581637
  var valid_581638 = query.getOrDefault("alt")
  valid_581638 = validateParameter(valid_581638, JString, required = false,
                                 default = newJString("json"))
  if valid_581638 != nil:
    section.add "alt", valid_581638
  var valid_581639 = query.getOrDefault("userIp")
  valid_581639 = validateParameter(valid_581639, JString, required = false,
                                 default = nil)
  if valid_581639 != nil:
    section.add "userIp", valid_581639
  var valid_581640 = query.getOrDefault("quotaUser")
  valid_581640 = validateParameter(valid_581640, JString, required = false,
                                 default = nil)
  if valid_581640 != nil:
    section.add "quotaUser", valid_581640
  var valid_581641 = query.getOrDefault("fields")
  valid_581641 = validateParameter(valid_581641, JString, required = false,
                                 default = nil)
  if valid_581641 != nil:
    section.add "fields", valid_581641
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581642: Call_DfareportingOrderDocumentsGet_581629; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one order document by ID.
  ## 
  let valid = call_581642.validator(path, query, header, formData, body)
  let scheme = call_581642.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581642.url(scheme.get, call_581642.host, call_581642.base,
                         call_581642.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581642, url, valid)

proc call*(call_581643: Call_DfareportingOrderDocumentsGet_581629;
          projectId: string; profileId: string; id: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingOrderDocumentsGet
  ## Gets one order document by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   projectId: string (required)
  ##            : Project ID for order documents.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Order document ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581644 = newJObject()
  var query_581645 = newJObject()
  add(query_581645, "key", newJString(key))
  add(query_581645, "prettyPrint", newJBool(prettyPrint))
  add(query_581645, "oauth_token", newJString(oauthToken))
  add(path_581644, "projectId", newJString(projectId))
  add(path_581644, "profileId", newJString(profileId))
  add(path_581644, "id", newJString(id))
  add(query_581645, "alt", newJString(alt))
  add(query_581645, "userIp", newJString(userIp))
  add(query_581645, "quotaUser", newJString(quotaUser))
  add(query_581645, "fields", newJString(fields))
  result = call_581643.call(path_581644, query_581645, nil, nil, nil)

var dfareportingOrderDocumentsGet* = Call_DfareportingOrderDocumentsGet_581629(
    name: "dfareportingOrderDocumentsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/projects/{projectId}/orderDocuments/{id}",
    validator: validate_DfareportingOrderDocumentsGet_581630,
    base: "/dfareporting/v3.1", url: url_DfareportingOrderDocumentsGet_581631,
    schemes: {Scheme.Https})
type
  Call_DfareportingOrdersList_581646 = ref object of OpenApiRestCall_578364
proc url_DfareportingOrdersList_581648(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/orders")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOrdersList_581647(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of orders, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   projectId: JString (required)
  ##            : Project ID for orders.
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `projectId` field"
  var valid_581649 = path.getOrDefault("projectId")
  valid_581649 = validateParameter(valid_581649, JString, required = true,
                                 default = nil)
  if valid_581649 != nil:
    section.add "projectId", valid_581649
  var valid_581650 = path.getOrDefault("profileId")
  valid_581650 = validateParameter(valid_581650, JString, required = true,
                                 default = nil)
  if valid_581650 != nil:
    section.add "profileId", valid_581650
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for orders by name or ID. Wildcards (*) are allowed. For example, "order*2015" will return orders with names like "order June 2015", "order April 2015", or simply "order 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "order" will match orders with name "my order", "order 2015", or simply "order".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   siteId: JArray
  ##         : Select only orders that are associated with these site IDs.
  ##   ids: JArray
  ##      : Select only orders with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_581651 = query.getOrDefault("key")
  valid_581651 = validateParameter(valid_581651, JString, required = false,
                                 default = nil)
  if valid_581651 != nil:
    section.add "key", valid_581651
  var valid_581652 = query.getOrDefault("prettyPrint")
  valid_581652 = validateParameter(valid_581652, JBool, required = false,
                                 default = newJBool(true))
  if valid_581652 != nil:
    section.add "prettyPrint", valid_581652
  var valid_581653 = query.getOrDefault("oauth_token")
  valid_581653 = validateParameter(valid_581653, JString, required = false,
                                 default = nil)
  if valid_581653 != nil:
    section.add "oauth_token", valid_581653
  var valid_581654 = query.getOrDefault("sortField")
  valid_581654 = validateParameter(valid_581654, JString, required = false,
                                 default = newJString("ID"))
  if valid_581654 != nil:
    section.add "sortField", valid_581654
  var valid_581655 = query.getOrDefault("alt")
  valid_581655 = validateParameter(valid_581655, JString, required = false,
                                 default = newJString("json"))
  if valid_581655 != nil:
    section.add "alt", valid_581655
  var valid_581656 = query.getOrDefault("userIp")
  valid_581656 = validateParameter(valid_581656, JString, required = false,
                                 default = nil)
  if valid_581656 != nil:
    section.add "userIp", valid_581656
  var valid_581657 = query.getOrDefault("quotaUser")
  valid_581657 = validateParameter(valid_581657, JString, required = false,
                                 default = nil)
  if valid_581657 != nil:
    section.add "quotaUser", valid_581657
  var valid_581658 = query.getOrDefault("pageToken")
  valid_581658 = validateParameter(valid_581658, JString, required = false,
                                 default = nil)
  if valid_581658 != nil:
    section.add "pageToken", valid_581658
  var valid_581659 = query.getOrDefault("searchString")
  valid_581659 = validateParameter(valid_581659, JString, required = false,
                                 default = nil)
  if valid_581659 != nil:
    section.add "searchString", valid_581659
  var valid_581660 = query.getOrDefault("sortOrder")
  valid_581660 = validateParameter(valid_581660, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581660 != nil:
    section.add "sortOrder", valid_581660
  var valid_581661 = query.getOrDefault("siteId")
  valid_581661 = validateParameter(valid_581661, JArray, required = false,
                                 default = nil)
  if valid_581661 != nil:
    section.add "siteId", valid_581661
  var valid_581662 = query.getOrDefault("ids")
  valid_581662 = validateParameter(valid_581662, JArray, required = false,
                                 default = nil)
  if valid_581662 != nil:
    section.add "ids", valid_581662
  var valid_581663 = query.getOrDefault("fields")
  valid_581663 = validateParameter(valid_581663, JString, required = false,
                                 default = nil)
  if valid_581663 != nil:
    section.add "fields", valid_581663
  var valid_581664 = query.getOrDefault("maxResults")
  valid_581664 = validateParameter(valid_581664, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581664 != nil:
    section.add "maxResults", valid_581664
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581665: Call_DfareportingOrdersList_581646; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of orders, possibly filtered. This method supports paging.
  ## 
  let valid = call_581665.validator(path, query, header, formData, body)
  let scheme = call_581665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581665.url(scheme.get, call_581665.host, call_581665.base,
                         call_581665.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581665, url, valid)

proc call*(call_581666: Call_DfareportingOrdersList_581646; projectId: string;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; sortField: string = "ID"; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          siteId: JsonNode = nil; ids: JsonNode = nil; fields: string = "";
          maxResults: int = 1000): Recallable =
  ## dfareportingOrdersList
  ## Retrieves a list of orders, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   projectId: string (required)
  ##            : Project ID for orders.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for orders by name or ID. Wildcards (*) are allowed. For example, "order*2015" will return orders with names like "order June 2015", "order April 2015", or simply "order 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "order" will match orders with name "my order", "order 2015", or simply "order".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   siteId: JArray
  ##         : Select only orders that are associated with these site IDs.
  ##   ids: JArray
  ##      : Select only orders with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_581667 = newJObject()
  var query_581668 = newJObject()
  add(query_581668, "key", newJString(key))
  add(query_581668, "prettyPrint", newJBool(prettyPrint))
  add(query_581668, "oauth_token", newJString(oauthToken))
  add(path_581667, "projectId", newJString(projectId))
  add(path_581667, "profileId", newJString(profileId))
  add(query_581668, "sortField", newJString(sortField))
  add(query_581668, "alt", newJString(alt))
  add(query_581668, "userIp", newJString(userIp))
  add(query_581668, "quotaUser", newJString(quotaUser))
  add(query_581668, "pageToken", newJString(pageToken))
  add(query_581668, "searchString", newJString(searchString))
  add(query_581668, "sortOrder", newJString(sortOrder))
  if siteId != nil:
    query_581668.add "siteId", siteId
  if ids != nil:
    query_581668.add "ids", ids
  add(query_581668, "fields", newJString(fields))
  add(query_581668, "maxResults", newJInt(maxResults))
  result = call_581666.call(path_581667, query_581668, nil, nil, nil)

var dfareportingOrdersList* = Call_DfareportingOrdersList_581646(
    name: "dfareportingOrdersList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/projects/{projectId}/orders",
    validator: validate_DfareportingOrdersList_581647, base: "/dfareporting/v3.1",
    url: url_DfareportingOrdersList_581648, schemes: {Scheme.Https})
type
  Call_DfareportingOrdersGet_581669 = ref object of OpenApiRestCall_578364
proc url_DfareportingOrdersGet_581671(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/orders/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOrdersGet_581670(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one order by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   projectId: JString (required)
  ##            : Project ID for orders.
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Order ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `projectId` field"
  var valid_581672 = path.getOrDefault("projectId")
  valid_581672 = validateParameter(valid_581672, JString, required = true,
                                 default = nil)
  if valid_581672 != nil:
    section.add "projectId", valid_581672
  var valid_581673 = path.getOrDefault("profileId")
  valid_581673 = validateParameter(valid_581673, JString, required = true,
                                 default = nil)
  if valid_581673 != nil:
    section.add "profileId", valid_581673
  var valid_581674 = path.getOrDefault("id")
  valid_581674 = validateParameter(valid_581674, JString, required = true,
                                 default = nil)
  if valid_581674 != nil:
    section.add "id", valid_581674
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581675 = query.getOrDefault("key")
  valid_581675 = validateParameter(valid_581675, JString, required = false,
                                 default = nil)
  if valid_581675 != nil:
    section.add "key", valid_581675
  var valid_581676 = query.getOrDefault("prettyPrint")
  valid_581676 = validateParameter(valid_581676, JBool, required = false,
                                 default = newJBool(true))
  if valid_581676 != nil:
    section.add "prettyPrint", valid_581676
  var valid_581677 = query.getOrDefault("oauth_token")
  valid_581677 = validateParameter(valid_581677, JString, required = false,
                                 default = nil)
  if valid_581677 != nil:
    section.add "oauth_token", valid_581677
  var valid_581678 = query.getOrDefault("alt")
  valid_581678 = validateParameter(valid_581678, JString, required = false,
                                 default = newJString("json"))
  if valid_581678 != nil:
    section.add "alt", valid_581678
  var valid_581679 = query.getOrDefault("userIp")
  valid_581679 = validateParameter(valid_581679, JString, required = false,
                                 default = nil)
  if valid_581679 != nil:
    section.add "userIp", valid_581679
  var valid_581680 = query.getOrDefault("quotaUser")
  valid_581680 = validateParameter(valid_581680, JString, required = false,
                                 default = nil)
  if valid_581680 != nil:
    section.add "quotaUser", valid_581680
  var valid_581681 = query.getOrDefault("fields")
  valid_581681 = validateParameter(valid_581681, JString, required = false,
                                 default = nil)
  if valid_581681 != nil:
    section.add "fields", valid_581681
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581682: Call_DfareportingOrdersGet_581669; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one order by ID.
  ## 
  let valid = call_581682.validator(path, query, header, formData, body)
  let scheme = call_581682.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581682.url(scheme.get, call_581682.host, call_581682.base,
                         call_581682.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581682, url, valid)

proc call*(call_581683: Call_DfareportingOrdersGet_581669; projectId: string;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingOrdersGet
  ## Gets one order by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   projectId: string (required)
  ##            : Project ID for orders.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Order ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581684 = newJObject()
  var query_581685 = newJObject()
  add(query_581685, "key", newJString(key))
  add(query_581685, "prettyPrint", newJBool(prettyPrint))
  add(query_581685, "oauth_token", newJString(oauthToken))
  add(path_581684, "projectId", newJString(projectId))
  add(path_581684, "profileId", newJString(profileId))
  add(path_581684, "id", newJString(id))
  add(query_581685, "alt", newJString(alt))
  add(query_581685, "userIp", newJString(userIp))
  add(query_581685, "quotaUser", newJString(quotaUser))
  add(query_581685, "fields", newJString(fields))
  result = call_581683.call(path_581684, query_581685, nil, nil, nil)

var dfareportingOrdersGet* = Call_DfareportingOrdersGet_581669(
    name: "dfareportingOrdersGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/projects/{projectId}/orders/{id}",
    validator: validate_DfareportingOrdersGet_581670, base: "/dfareporting/v3.1",
    url: url_DfareportingOrdersGet_581671, schemes: {Scheme.Https})
type
  Call_DfareportingRegionsList_581686 = ref object of OpenApiRestCall_578364
proc url_DfareportingRegionsList_581688(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/regions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRegionsList_581687(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of regions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581689 = path.getOrDefault("profileId")
  valid_581689 = validateParameter(valid_581689, JString, required = true,
                                 default = nil)
  if valid_581689 != nil:
    section.add "profileId", valid_581689
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581690 = query.getOrDefault("key")
  valid_581690 = validateParameter(valid_581690, JString, required = false,
                                 default = nil)
  if valid_581690 != nil:
    section.add "key", valid_581690
  var valid_581691 = query.getOrDefault("prettyPrint")
  valid_581691 = validateParameter(valid_581691, JBool, required = false,
                                 default = newJBool(true))
  if valid_581691 != nil:
    section.add "prettyPrint", valid_581691
  var valid_581692 = query.getOrDefault("oauth_token")
  valid_581692 = validateParameter(valid_581692, JString, required = false,
                                 default = nil)
  if valid_581692 != nil:
    section.add "oauth_token", valid_581692
  var valid_581693 = query.getOrDefault("alt")
  valid_581693 = validateParameter(valid_581693, JString, required = false,
                                 default = newJString("json"))
  if valid_581693 != nil:
    section.add "alt", valid_581693
  var valid_581694 = query.getOrDefault("userIp")
  valid_581694 = validateParameter(valid_581694, JString, required = false,
                                 default = nil)
  if valid_581694 != nil:
    section.add "userIp", valid_581694
  var valid_581695 = query.getOrDefault("quotaUser")
  valid_581695 = validateParameter(valid_581695, JString, required = false,
                                 default = nil)
  if valid_581695 != nil:
    section.add "quotaUser", valid_581695
  var valid_581696 = query.getOrDefault("fields")
  valid_581696 = validateParameter(valid_581696, JString, required = false,
                                 default = nil)
  if valid_581696 != nil:
    section.add "fields", valid_581696
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581697: Call_DfareportingRegionsList_581686; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of regions.
  ## 
  let valid = call_581697.validator(path, query, header, formData, body)
  let scheme = call_581697.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581697.url(scheme.get, call_581697.host, call_581697.base,
                         call_581697.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581697, url, valid)

proc call*(call_581698: Call_DfareportingRegionsList_581686; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingRegionsList
  ## Retrieves a list of regions.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581699 = newJObject()
  var query_581700 = newJObject()
  add(query_581700, "key", newJString(key))
  add(query_581700, "prettyPrint", newJBool(prettyPrint))
  add(query_581700, "oauth_token", newJString(oauthToken))
  add(path_581699, "profileId", newJString(profileId))
  add(query_581700, "alt", newJString(alt))
  add(query_581700, "userIp", newJString(userIp))
  add(query_581700, "quotaUser", newJString(quotaUser))
  add(query_581700, "fields", newJString(fields))
  result = call_581698.call(path_581699, query_581700, nil, nil, nil)

var dfareportingRegionsList* = Call_DfareportingRegionsList_581686(
    name: "dfareportingRegionsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/regions",
    validator: validate_DfareportingRegionsList_581687,
    base: "/dfareporting/v3.1", url: url_DfareportingRegionsList_581688,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListSharesUpdate_581701 = ref object of OpenApiRestCall_578364
proc url_DfareportingRemarketingListSharesUpdate_581703(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingListShares")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListSharesUpdate_581702(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing remarketing list share.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581704 = path.getOrDefault("profileId")
  valid_581704 = validateParameter(valid_581704, JString, required = true,
                                 default = nil)
  if valid_581704 != nil:
    section.add "profileId", valid_581704
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581705 = query.getOrDefault("key")
  valid_581705 = validateParameter(valid_581705, JString, required = false,
                                 default = nil)
  if valid_581705 != nil:
    section.add "key", valid_581705
  var valid_581706 = query.getOrDefault("prettyPrint")
  valid_581706 = validateParameter(valid_581706, JBool, required = false,
                                 default = newJBool(true))
  if valid_581706 != nil:
    section.add "prettyPrint", valid_581706
  var valid_581707 = query.getOrDefault("oauth_token")
  valid_581707 = validateParameter(valid_581707, JString, required = false,
                                 default = nil)
  if valid_581707 != nil:
    section.add "oauth_token", valid_581707
  var valid_581708 = query.getOrDefault("alt")
  valid_581708 = validateParameter(valid_581708, JString, required = false,
                                 default = newJString("json"))
  if valid_581708 != nil:
    section.add "alt", valid_581708
  var valid_581709 = query.getOrDefault("userIp")
  valid_581709 = validateParameter(valid_581709, JString, required = false,
                                 default = nil)
  if valid_581709 != nil:
    section.add "userIp", valid_581709
  var valid_581710 = query.getOrDefault("quotaUser")
  valid_581710 = validateParameter(valid_581710, JString, required = false,
                                 default = nil)
  if valid_581710 != nil:
    section.add "quotaUser", valid_581710
  var valid_581711 = query.getOrDefault("fields")
  valid_581711 = validateParameter(valid_581711, JString, required = false,
                                 default = nil)
  if valid_581711 != nil:
    section.add "fields", valid_581711
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581713: Call_DfareportingRemarketingListSharesUpdate_581701;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing remarketing list share.
  ## 
  let valid = call_581713.validator(path, query, header, formData, body)
  let scheme = call_581713.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581713.url(scheme.get, call_581713.host, call_581713.base,
                         call_581713.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581713, url, valid)

proc call*(call_581714: Call_DfareportingRemarketingListSharesUpdate_581701;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingRemarketingListSharesUpdate
  ## Updates an existing remarketing list share.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581715 = newJObject()
  var query_581716 = newJObject()
  var body_581717 = newJObject()
  add(query_581716, "key", newJString(key))
  add(query_581716, "prettyPrint", newJBool(prettyPrint))
  add(query_581716, "oauth_token", newJString(oauthToken))
  add(path_581715, "profileId", newJString(profileId))
  add(query_581716, "alt", newJString(alt))
  add(query_581716, "userIp", newJString(userIp))
  add(query_581716, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581717 = body
  add(query_581716, "fields", newJString(fields))
  result = call_581714.call(path_581715, query_581716, nil, nil, body_581717)

var dfareportingRemarketingListSharesUpdate* = Call_DfareportingRemarketingListSharesUpdate_581701(
    name: "dfareportingRemarketingListSharesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingListShares",
    validator: validate_DfareportingRemarketingListSharesUpdate_581702,
    base: "/dfareporting/v3.1", url: url_DfareportingRemarketingListSharesUpdate_581703,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListSharesPatch_581718 = ref object of OpenApiRestCall_578364
proc url_DfareportingRemarketingListSharesPatch_581720(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingListShares")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListSharesPatch_581719(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing remarketing list share. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581721 = path.getOrDefault("profileId")
  valid_581721 = validateParameter(valid_581721, JString, required = true,
                                 default = nil)
  if valid_581721 != nil:
    section.add "profileId", valid_581721
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   remarketingListId: JString (required)
  ##                    : Remarketing list ID.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581722 = query.getOrDefault("key")
  valid_581722 = validateParameter(valid_581722, JString, required = false,
                                 default = nil)
  if valid_581722 != nil:
    section.add "key", valid_581722
  assert query != nil,
        "query argument is necessary due to required `remarketingListId` field"
  var valid_581723 = query.getOrDefault("remarketingListId")
  valid_581723 = validateParameter(valid_581723, JString, required = true,
                                 default = nil)
  if valid_581723 != nil:
    section.add "remarketingListId", valid_581723
  var valid_581724 = query.getOrDefault("prettyPrint")
  valid_581724 = validateParameter(valid_581724, JBool, required = false,
                                 default = newJBool(true))
  if valid_581724 != nil:
    section.add "prettyPrint", valid_581724
  var valid_581725 = query.getOrDefault("oauth_token")
  valid_581725 = validateParameter(valid_581725, JString, required = false,
                                 default = nil)
  if valid_581725 != nil:
    section.add "oauth_token", valid_581725
  var valid_581726 = query.getOrDefault("alt")
  valid_581726 = validateParameter(valid_581726, JString, required = false,
                                 default = newJString("json"))
  if valid_581726 != nil:
    section.add "alt", valid_581726
  var valid_581727 = query.getOrDefault("userIp")
  valid_581727 = validateParameter(valid_581727, JString, required = false,
                                 default = nil)
  if valid_581727 != nil:
    section.add "userIp", valid_581727
  var valid_581728 = query.getOrDefault("quotaUser")
  valid_581728 = validateParameter(valid_581728, JString, required = false,
                                 default = nil)
  if valid_581728 != nil:
    section.add "quotaUser", valid_581728
  var valid_581729 = query.getOrDefault("fields")
  valid_581729 = validateParameter(valid_581729, JString, required = false,
                                 default = nil)
  if valid_581729 != nil:
    section.add "fields", valid_581729
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581731: Call_DfareportingRemarketingListSharesPatch_581718;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing remarketing list share. This method supports patch semantics.
  ## 
  let valid = call_581731.validator(path, query, header, formData, body)
  let scheme = call_581731.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581731.url(scheme.get, call_581731.host, call_581731.base,
                         call_581731.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581731, url, valid)

proc call*(call_581732: Call_DfareportingRemarketingListSharesPatch_581718;
          remarketingListId: string; profileId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; body: JsonNode = nil;
          fields: string = ""): Recallable =
  ## dfareportingRemarketingListSharesPatch
  ## Updates an existing remarketing list share. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   remarketingListId: string (required)
  ##                    : Remarketing list ID.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581733 = newJObject()
  var query_581734 = newJObject()
  var body_581735 = newJObject()
  add(query_581734, "key", newJString(key))
  add(query_581734, "remarketingListId", newJString(remarketingListId))
  add(query_581734, "prettyPrint", newJBool(prettyPrint))
  add(query_581734, "oauth_token", newJString(oauthToken))
  add(path_581733, "profileId", newJString(profileId))
  add(query_581734, "alt", newJString(alt))
  add(query_581734, "userIp", newJString(userIp))
  add(query_581734, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581735 = body
  add(query_581734, "fields", newJString(fields))
  result = call_581732.call(path_581733, query_581734, nil, nil, body_581735)

var dfareportingRemarketingListSharesPatch* = Call_DfareportingRemarketingListSharesPatch_581718(
    name: "dfareportingRemarketingListSharesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingListShares",
    validator: validate_DfareportingRemarketingListSharesPatch_581719,
    base: "/dfareporting/v3.1", url: url_DfareportingRemarketingListSharesPatch_581720,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListSharesGet_581736 = ref object of OpenApiRestCall_578364
proc url_DfareportingRemarketingListSharesGet_581738(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "remarketingListId" in path,
        "`remarketingListId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingListShares/"),
               (kind: VariableSegment, value: "remarketingListId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListSharesGet_581737(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one remarketing list share by remarketing list ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   remarketingListId: JString (required)
  ##                    : Remarketing list ID.
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `remarketingListId` field"
  var valid_581739 = path.getOrDefault("remarketingListId")
  valid_581739 = validateParameter(valid_581739, JString, required = true,
                                 default = nil)
  if valid_581739 != nil:
    section.add "remarketingListId", valid_581739
  var valid_581740 = path.getOrDefault("profileId")
  valid_581740 = validateParameter(valid_581740, JString, required = true,
                                 default = nil)
  if valid_581740 != nil:
    section.add "profileId", valid_581740
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581741 = query.getOrDefault("key")
  valid_581741 = validateParameter(valid_581741, JString, required = false,
                                 default = nil)
  if valid_581741 != nil:
    section.add "key", valid_581741
  var valid_581742 = query.getOrDefault("prettyPrint")
  valid_581742 = validateParameter(valid_581742, JBool, required = false,
                                 default = newJBool(true))
  if valid_581742 != nil:
    section.add "prettyPrint", valid_581742
  var valid_581743 = query.getOrDefault("oauth_token")
  valid_581743 = validateParameter(valid_581743, JString, required = false,
                                 default = nil)
  if valid_581743 != nil:
    section.add "oauth_token", valid_581743
  var valid_581744 = query.getOrDefault("alt")
  valid_581744 = validateParameter(valid_581744, JString, required = false,
                                 default = newJString("json"))
  if valid_581744 != nil:
    section.add "alt", valid_581744
  var valid_581745 = query.getOrDefault("userIp")
  valid_581745 = validateParameter(valid_581745, JString, required = false,
                                 default = nil)
  if valid_581745 != nil:
    section.add "userIp", valid_581745
  var valid_581746 = query.getOrDefault("quotaUser")
  valid_581746 = validateParameter(valid_581746, JString, required = false,
                                 default = nil)
  if valid_581746 != nil:
    section.add "quotaUser", valid_581746
  var valid_581747 = query.getOrDefault("fields")
  valid_581747 = validateParameter(valid_581747, JString, required = false,
                                 default = nil)
  if valid_581747 != nil:
    section.add "fields", valid_581747
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581748: Call_DfareportingRemarketingListSharesGet_581736;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one remarketing list share by remarketing list ID.
  ## 
  let valid = call_581748.validator(path, query, header, formData, body)
  let scheme = call_581748.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581748.url(scheme.get, call_581748.host, call_581748.base,
                         call_581748.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581748, url, valid)

proc call*(call_581749: Call_DfareportingRemarketingListSharesGet_581736;
          remarketingListId: string; profileId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingRemarketingListSharesGet
  ## Gets one remarketing list share by remarketing list ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   remarketingListId: string (required)
  ##                    : Remarketing list ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581750 = newJObject()
  var query_581751 = newJObject()
  add(query_581751, "key", newJString(key))
  add(query_581751, "prettyPrint", newJBool(prettyPrint))
  add(query_581751, "oauth_token", newJString(oauthToken))
  add(path_581750, "remarketingListId", newJString(remarketingListId))
  add(path_581750, "profileId", newJString(profileId))
  add(query_581751, "alt", newJString(alt))
  add(query_581751, "userIp", newJString(userIp))
  add(query_581751, "quotaUser", newJString(quotaUser))
  add(query_581751, "fields", newJString(fields))
  result = call_581749.call(path_581750, query_581751, nil, nil, nil)

var dfareportingRemarketingListSharesGet* = Call_DfareportingRemarketingListSharesGet_581736(
    name: "dfareportingRemarketingListSharesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/remarketingListShares/{remarketingListId}",
    validator: validate_DfareportingRemarketingListSharesGet_581737,
    base: "/dfareporting/v3.1", url: url_DfareportingRemarketingListSharesGet_581738,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsUpdate_581775 = ref object of OpenApiRestCall_578364
proc url_DfareportingRemarketingListsUpdate_581777(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsUpdate_581776(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing remarketing list.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581778 = path.getOrDefault("profileId")
  valid_581778 = validateParameter(valid_581778, JString, required = true,
                                 default = nil)
  if valid_581778 != nil:
    section.add "profileId", valid_581778
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581779 = query.getOrDefault("key")
  valid_581779 = validateParameter(valid_581779, JString, required = false,
                                 default = nil)
  if valid_581779 != nil:
    section.add "key", valid_581779
  var valid_581780 = query.getOrDefault("prettyPrint")
  valid_581780 = validateParameter(valid_581780, JBool, required = false,
                                 default = newJBool(true))
  if valid_581780 != nil:
    section.add "prettyPrint", valid_581780
  var valid_581781 = query.getOrDefault("oauth_token")
  valid_581781 = validateParameter(valid_581781, JString, required = false,
                                 default = nil)
  if valid_581781 != nil:
    section.add "oauth_token", valid_581781
  var valid_581782 = query.getOrDefault("alt")
  valid_581782 = validateParameter(valid_581782, JString, required = false,
                                 default = newJString("json"))
  if valid_581782 != nil:
    section.add "alt", valid_581782
  var valid_581783 = query.getOrDefault("userIp")
  valid_581783 = validateParameter(valid_581783, JString, required = false,
                                 default = nil)
  if valid_581783 != nil:
    section.add "userIp", valid_581783
  var valid_581784 = query.getOrDefault("quotaUser")
  valid_581784 = validateParameter(valid_581784, JString, required = false,
                                 default = nil)
  if valid_581784 != nil:
    section.add "quotaUser", valid_581784
  var valid_581785 = query.getOrDefault("fields")
  valid_581785 = validateParameter(valid_581785, JString, required = false,
                                 default = nil)
  if valid_581785 != nil:
    section.add "fields", valid_581785
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581787: Call_DfareportingRemarketingListsUpdate_581775;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing remarketing list.
  ## 
  let valid = call_581787.validator(path, query, header, formData, body)
  let scheme = call_581787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581787.url(scheme.get, call_581787.host, call_581787.base,
                         call_581787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581787, url, valid)

proc call*(call_581788: Call_DfareportingRemarketingListsUpdate_581775;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingRemarketingListsUpdate
  ## Updates an existing remarketing list.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581789 = newJObject()
  var query_581790 = newJObject()
  var body_581791 = newJObject()
  add(query_581790, "key", newJString(key))
  add(query_581790, "prettyPrint", newJBool(prettyPrint))
  add(query_581790, "oauth_token", newJString(oauthToken))
  add(path_581789, "profileId", newJString(profileId))
  add(query_581790, "alt", newJString(alt))
  add(query_581790, "userIp", newJString(userIp))
  add(query_581790, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581791 = body
  add(query_581790, "fields", newJString(fields))
  result = call_581788.call(path_581789, query_581790, nil, nil, body_581791)

var dfareportingRemarketingListsUpdate* = Call_DfareportingRemarketingListsUpdate_581775(
    name: "dfareportingRemarketingListsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists",
    validator: validate_DfareportingRemarketingListsUpdate_581776,
    base: "/dfareporting/v3.1", url: url_DfareportingRemarketingListsUpdate_581777,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsInsert_581792 = ref object of OpenApiRestCall_578364
proc url_DfareportingRemarketingListsInsert_581794(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsInsert_581793(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new remarketing list.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581795 = path.getOrDefault("profileId")
  valid_581795 = validateParameter(valid_581795, JString, required = true,
                                 default = nil)
  if valid_581795 != nil:
    section.add "profileId", valid_581795
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581796 = query.getOrDefault("key")
  valid_581796 = validateParameter(valid_581796, JString, required = false,
                                 default = nil)
  if valid_581796 != nil:
    section.add "key", valid_581796
  var valid_581797 = query.getOrDefault("prettyPrint")
  valid_581797 = validateParameter(valid_581797, JBool, required = false,
                                 default = newJBool(true))
  if valid_581797 != nil:
    section.add "prettyPrint", valid_581797
  var valid_581798 = query.getOrDefault("oauth_token")
  valid_581798 = validateParameter(valid_581798, JString, required = false,
                                 default = nil)
  if valid_581798 != nil:
    section.add "oauth_token", valid_581798
  var valid_581799 = query.getOrDefault("alt")
  valid_581799 = validateParameter(valid_581799, JString, required = false,
                                 default = newJString("json"))
  if valid_581799 != nil:
    section.add "alt", valid_581799
  var valid_581800 = query.getOrDefault("userIp")
  valid_581800 = validateParameter(valid_581800, JString, required = false,
                                 default = nil)
  if valid_581800 != nil:
    section.add "userIp", valid_581800
  var valid_581801 = query.getOrDefault("quotaUser")
  valid_581801 = validateParameter(valid_581801, JString, required = false,
                                 default = nil)
  if valid_581801 != nil:
    section.add "quotaUser", valid_581801
  var valid_581802 = query.getOrDefault("fields")
  valid_581802 = validateParameter(valid_581802, JString, required = false,
                                 default = nil)
  if valid_581802 != nil:
    section.add "fields", valid_581802
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581804: Call_DfareportingRemarketingListsInsert_581792;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new remarketing list.
  ## 
  let valid = call_581804.validator(path, query, header, formData, body)
  let scheme = call_581804.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581804.url(scheme.get, call_581804.host, call_581804.base,
                         call_581804.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581804, url, valid)

proc call*(call_581805: Call_DfareportingRemarketingListsInsert_581792;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingRemarketingListsInsert
  ## Inserts a new remarketing list.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581806 = newJObject()
  var query_581807 = newJObject()
  var body_581808 = newJObject()
  add(query_581807, "key", newJString(key))
  add(query_581807, "prettyPrint", newJBool(prettyPrint))
  add(query_581807, "oauth_token", newJString(oauthToken))
  add(path_581806, "profileId", newJString(profileId))
  add(query_581807, "alt", newJString(alt))
  add(query_581807, "userIp", newJString(userIp))
  add(query_581807, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581808 = body
  add(query_581807, "fields", newJString(fields))
  result = call_581805.call(path_581806, query_581807, nil, nil, body_581808)

var dfareportingRemarketingListsInsert* = Call_DfareportingRemarketingListsInsert_581792(
    name: "dfareportingRemarketingListsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists",
    validator: validate_DfareportingRemarketingListsInsert_581793,
    base: "/dfareporting/v3.1", url: url_DfareportingRemarketingListsInsert_581794,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsList_581752 = ref object of OpenApiRestCall_578364
proc url_DfareportingRemarketingListsList_581754(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsList_581753(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of remarketing lists, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581755 = path.getOrDefault("profileId")
  valid_581755 = validateParameter(valid_581755, JString, required = true,
                                 default = nil)
  if valid_581755 != nil:
    section.add "profileId", valid_581755
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   name: JString
  ##       : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
  ##   floodlightActivityId: JString
  ##                       : Select only remarketing lists that have this floodlight activity ID.
  ##   active: JBool
  ##         : Select only active or only inactive remarketing lists.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   advertiserId: JString (required)
  ##               : Select only remarketing lists owned by this advertiser.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_581756 = query.getOrDefault("key")
  valid_581756 = validateParameter(valid_581756, JString, required = false,
                                 default = nil)
  if valid_581756 != nil:
    section.add "key", valid_581756
  var valid_581757 = query.getOrDefault("prettyPrint")
  valid_581757 = validateParameter(valid_581757, JBool, required = false,
                                 default = newJBool(true))
  if valid_581757 != nil:
    section.add "prettyPrint", valid_581757
  var valid_581758 = query.getOrDefault("oauth_token")
  valid_581758 = validateParameter(valid_581758, JString, required = false,
                                 default = nil)
  if valid_581758 != nil:
    section.add "oauth_token", valid_581758
  var valid_581759 = query.getOrDefault("name")
  valid_581759 = validateParameter(valid_581759, JString, required = false,
                                 default = nil)
  if valid_581759 != nil:
    section.add "name", valid_581759
  var valid_581760 = query.getOrDefault("floodlightActivityId")
  valid_581760 = validateParameter(valid_581760, JString, required = false,
                                 default = nil)
  if valid_581760 != nil:
    section.add "floodlightActivityId", valid_581760
  var valid_581761 = query.getOrDefault("active")
  valid_581761 = validateParameter(valid_581761, JBool, required = false, default = nil)
  if valid_581761 != nil:
    section.add "active", valid_581761
  var valid_581762 = query.getOrDefault("sortField")
  valid_581762 = validateParameter(valid_581762, JString, required = false,
                                 default = newJString("ID"))
  if valid_581762 != nil:
    section.add "sortField", valid_581762
  var valid_581763 = query.getOrDefault("alt")
  valid_581763 = validateParameter(valid_581763, JString, required = false,
                                 default = newJString("json"))
  if valid_581763 != nil:
    section.add "alt", valid_581763
  var valid_581764 = query.getOrDefault("userIp")
  valid_581764 = validateParameter(valid_581764, JString, required = false,
                                 default = nil)
  if valid_581764 != nil:
    section.add "userIp", valid_581764
  var valid_581765 = query.getOrDefault("quotaUser")
  valid_581765 = validateParameter(valid_581765, JString, required = false,
                                 default = nil)
  if valid_581765 != nil:
    section.add "quotaUser", valid_581765
  var valid_581766 = query.getOrDefault("pageToken")
  valid_581766 = validateParameter(valid_581766, JString, required = false,
                                 default = nil)
  if valid_581766 != nil:
    section.add "pageToken", valid_581766
  var valid_581767 = query.getOrDefault("sortOrder")
  valid_581767 = validateParameter(valid_581767, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581767 != nil:
    section.add "sortOrder", valid_581767
  assert query != nil,
        "query argument is necessary due to required `advertiserId` field"
  var valid_581768 = query.getOrDefault("advertiserId")
  valid_581768 = validateParameter(valid_581768, JString, required = true,
                                 default = nil)
  if valid_581768 != nil:
    section.add "advertiserId", valid_581768
  var valid_581769 = query.getOrDefault("fields")
  valid_581769 = validateParameter(valid_581769, JString, required = false,
                                 default = nil)
  if valid_581769 != nil:
    section.add "fields", valid_581769
  var valid_581770 = query.getOrDefault("maxResults")
  valid_581770 = validateParameter(valid_581770, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581770 != nil:
    section.add "maxResults", valid_581770
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581771: Call_DfareportingRemarketingListsList_581752;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of remarketing lists, possibly filtered. This method supports paging.
  ## 
  let valid = call_581771.validator(path, query, header, formData, body)
  let scheme = call_581771.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581771.url(scheme.get, call_581771.host, call_581771.base,
                         call_581771.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581771, url, valid)

proc call*(call_581772: Call_DfareportingRemarketingListsList_581752;
          profileId: string; advertiserId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; name: string = "";
          floodlightActivityId: string = ""; active: bool = false;
          sortField: string = "ID"; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; pageToken: string = "";
          sortOrder: string = "ASCENDING"; fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingRemarketingListsList
  ## Retrieves a list of remarketing lists, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   name: string
  ##       : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
  ##   floodlightActivityId: string
  ##                       : Select only remarketing lists that have this floodlight activity ID.
  ##   active: bool
  ##         : Select only active or only inactive remarketing lists.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   advertiserId: string (required)
  ##               : Select only remarketing lists owned by this advertiser.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_581773 = newJObject()
  var query_581774 = newJObject()
  add(query_581774, "key", newJString(key))
  add(query_581774, "prettyPrint", newJBool(prettyPrint))
  add(query_581774, "oauth_token", newJString(oauthToken))
  add(query_581774, "name", newJString(name))
  add(query_581774, "floodlightActivityId", newJString(floodlightActivityId))
  add(query_581774, "active", newJBool(active))
  add(path_581773, "profileId", newJString(profileId))
  add(query_581774, "sortField", newJString(sortField))
  add(query_581774, "alt", newJString(alt))
  add(query_581774, "userIp", newJString(userIp))
  add(query_581774, "quotaUser", newJString(quotaUser))
  add(query_581774, "pageToken", newJString(pageToken))
  add(query_581774, "sortOrder", newJString(sortOrder))
  add(query_581774, "advertiserId", newJString(advertiserId))
  add(query_581774, "fields", newJString(fields))
  add(query_581774, "maxResults", newJInt(maxResults))
  result = call_581772.call(path_581773, query_581774, nil, nil, nil)

var dfareportingRemarketingListsList* = Call_DfareportingRemarketingListsList_581752(
    name: "dfareportingRemarketingListsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists",
    validator: validate_DfareportingRemarketingListsList_581753,
    base: "/dfareporting/v3.1", url: url_DfareportingRemarketingListsList_581754,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsPatch_581809 = ref object of OpenApiRestCall_578364
proc url_DfareportingRemarketingListsPatch_581811(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsPatch_581810(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing remarketing list. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581812 = path.getOrDefault("profileId")
  valid_581812 = validateParameter(valid_581812, JString, required = true,
                                 default = nil)
  if valid_581812 != nil:
    section.add "profileId", valid_581812
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Remarketing list ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581813 = query.getOrDefault("key")
  valid_581813 = validateParameter(valid_581813, JString, required = false,
                                 default = nil)
  if valid_581813 != nil:
    section.add "key", valid_581813
  var valid_581814 = query.getOrDefault("prettyPrint")
  valid_581814 = validateParameter(valid_581814, JBool, required = false,
                                 default = newJBool(true))
  if valid_581814 != nil:
    section.add "prettyPrint", valid_581814
  var valid_581815 = query.getOrDefault("oauth_token")
  valid_581815 = validateParameter(valid_581815, JString, required = false,
                                 default = nil)
  if valid_581815 != nil:
    section.add "oauth_token", valid_581815
  var valid_581816 = query.getOrDefault("alt")
  valid_581816 = validateParameter(valid_581816, JString, required = false,
                                 default = newJString("json"))
  if valid_581816 != nil:
    section.add "alt", valid_581816
  var valid_581817 = query.getOrDefault("userIp")
  valid_581817 = validateParameter(valid_581817, JString, required = false,
                                 default = nil)
  if valid_581817 != nil:
    section.add "userIp", valid_581817
  var valid_581818 = query.getOrDefault("quotaUser")
  valid_581818 = validateParameter(valid_581818, JString, required = false,
                                 default = nil)
  if valid_581818 != nil:
    section.add "quotaUser", valid_581818
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_581819 = query.getOrDefault("id")
  valid_581819 = validateParameter(valid_581819, JString, required = true,
                                 default = nil)
  if valid_581819 != nil:
    section.add "id", valid_581819
  var valid_581820 = query.getOrDefault("fields")
  valid_581820 = validateParameter(valid_581820, JString, required = false,
                                 default = nil)
  if valid_581820 != nil:
    section.add "fields", valid_581820
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581822: Call_DfareportingRemarketingListsPatch_581809;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing remarketing list. This method supports patch semantics.
  ## 
  let valid = call_581822.validator(path, query, header, formData, body)
  let scheme = call_581822.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581822.url(scheme.get, call_581822.host, call_581822.base,
                         call_581822.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581822, url, valid)

proc call*(call_581823: Call_DfareportingRemarketingListsPatch_581809;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingRemarketingListsPatch
  ## Updates an existing remarketing list. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Remarketing list ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581824 = newJObject()
  var query_581825 = newJObject()
  var body_581826 = newJObject()
  add(query_581825, "key", newJString(key))
  add(query_581825, "prettyPrint", newJBool(prettyPrint))
  add(query_581825, "oauth_token", newJString(oauthToken))
  add(path_581824, "profileId", newJString(profileId))
  add(query_581825, "alt", newJString(alt))
  add(query_581825, "userIp", newJString(userIp))
  add(query_581825, "quotaUser", newJString(quotaUser))
  add(query_581825, "id", newJString(id))
  if body != nil:
    body_581826 = body
  add(query_581825, "fields", newJString(fields))
  result = call_581823.call(path_581824, query_581825, nil, nil, body_581826)

var dfareportingRemarketingListsPatch* = Call_DfareportingRemarketingListsPatch_581809(
    name: "dfareportingRemarketingListsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists",
    validator: validate_DfareportingRemarketingListsPatch_581810,
    base: "/dfareporting/v3.1", url: url_DfareportingRemarketingListsPatch_581811,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsGet_581827 = ref object of OpenApiRestCall_578364
proc url_DfareportingRemarketingListsGet_581829(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsGet_581828(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one remarketing list by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Remarketing list ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581830 = path.getOrDefault("profileId")
  valid_581830 = validateParameter(valid_581830, JString, required = true,
                                 default = nil)
  if valid_581830 != nil:
    section.add "profileId", valid_581830
  var valid_581831 = path.getOrDefault("id")
  valid_581831 = validateParameter(valid_581831, JString, required = true,
                                 default = nil)
  if valid_581831 != nil:
    section.add "id", valid_581831
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581832 = query.getOrDefault("key")
  valid_581832 = validateParameter(valid_581832, JString, required = false,
                                 default = nil)
  if valid_581832 != nil:
    section.add "key", valid_581832
  var valid_581833 = query.getOrDefault("prettyPrint")
  valid_581833 = validateParameter(valid_581833, JBool, required = false,
                                 default = newJBool(true))
  if valid_581833 != nil:
    section.add "prettyPrint", valid_581833
  var valid_581834 = query.getOrDefault("oauth_token")
  valid_581834 = validateParameter(valid_581834, JString, required = false,
                                 default = nil)
  if valid_581834 != nil:
    section.add "oauth_token", valid_581834
  var valid_581835 = query.getOrDefault("alt")
  valid_581835 = validateParameter(valid_581835, JString, required = false,
                                 default = newJString("json"))
  if valid_581835 != nil:
    section.add "alt", valid_581835
  var valid_581836 = query.getOrDefault("userIp")
  valid_581836 = validateParameter(valid_581836, JString, required = false,
                                 default = nil)
  if valid_581836 != nil:
    section.add "userIp", valid_581836
  var valid_581837 = query.getOrDefault("quotaUser")
  valid_581837 = validateParameter(valid_581837, JString, required = false,
                                 default = nil)
  if valid_581837 != nil:
    section.add "quotaUser", valid_581837
  var valid_581838 = query.getOrDefault("fields")
  valid_581838 = validateParameter(valid_581838, JString, required = false,
                                 default = nil)
  if valid_581838 != nil:
    section.add "fields", valid_581838
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581839: Call_DfareportingRemarketingListsGet_581827;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one remarketing list by ID.
  ## 
  let valid = call_581839.validator(path, query, header, formData, body)
  let scheme = call_581839.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581839.url(scheme.get, call_581839.host, call_581839.base,
                         call_581839.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581839, url, valid)

proc call*(call_581840: Call_DfareportingRemarketingListsGet_581827;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingRemarketingListsGet
  ## Gets one remarketing list by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Remarketing list ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581841 = newJObject()
  var query_581842 = newJObject()
  add(query_581842, "key", newJString(key))
  add(query_581842, "prettyPrint", newJBool(prettyPrint))
  add(query_581842, "oauth_token", newJString(oauthToken))
  add(path_581841, "profileId", newJString(profileId))
  add(path_581841, "id", newJString(id))
  add(query_581842, "alt", newJString(alt))
  add(query_581842, "userIp", newJString(userIp))
  add(query_581842, "quotaUser", newJString(quotaUser))
  add(query_581842, "fields", newJString(fields))
  result = call_581840.call(path_581841, query_581842, nil, nil, nil)

var dfareportingRemarketingListsGet* = Call_DfareportingRemarketingListsGet_581827(
    name: "dfareportingRemarketingListsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists/{id}",
    validator: validate_DfareportingRemarketingListsGet_581828,
    base: "/dfareporting/v3.1", url: url_DfareportingRemarketingListsGet_581829,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsInsert_581863 = ref object of OpenApiRestCall_578364
proc url_DfareportingReportsInsert_581865(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsInsert_581864(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a report.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581866 = path.getOrDefault("profileId")
  valid_581866 = validateParameter(valid_581866, JString, required = true,
                                 default = nil)
  if valid_581866 != nil:
    section.add "profileId", valid_581866
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581867 = query.getOrDefault("key")
  valid_581867 = validateParameter(valid_581867, JString, required = false,
                                 default = nil)
  if valid_581867 != nil:
    section.add "key", valid_581867
  var valid_581868 = query.getOrDefault("prettyPrint")
  valid_581868 = validateParameter(valid_581868, JBool, required = false,
                                 default = newJBool(true))
  if valid_581868 != nil:
    section.add "prettyPrint", valid_581868
  var valid_581869 = query.getOrDefault("oauth_token")
  valid_581869 = validateParameter(valid_581869, JString, required = false,
                                 default = nil)
  if valid_581869 != nil:
    section.add "oauth_token", valid_581869
  var valid_581870 = query.getOrDefault("alt")
  valid_581870 = validateParameter(valid_581870, JString, required = false,
                                 default = newJString("json"))
  if valid_581870 != nil:
    section.add "alt", valid_581870
  var valid_581871 = query.getOrDefault("userIp")
  valid_581871 = validateParameter(valid_581871, JString, required = false,
                                 default = nil)
  if valid_581871 != nil:
    section.add "userIp", valid_581871
  var valid_581872 = query.getOrDefault("quotaUser")
  valid_581872 = validateParameter(valid_581872, JString, required = false,
                                 default = nil)
  if valid_581872 != nil:
    section.add "quotaUser", valid_581872
  var valid_581873 = query.getOrDefault("fields")
  valid_581873 = validateParameter(valid_581873, JString, required = false,
                                 default = nil)
  if valid_581873 != nil:
    section.add "fields", valid_581873
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581875: Call_DfareportingReportsInsert_581863; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a report.
  ## 
  let valid = call_581875.validator(path, query, header, formData, body)
  let scheme = call_581875.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581875.url(scheme.get, call_581875.host, call_581875.base,
                         call_581875.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581875, url, valid)

proc call*(call_581876: Call_DfareportingReportsInsert_581863; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingReportsInsert
  ## Creates a report.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581877 = newJObject()
  var query_581878 = newJObject()
  var body_581879 = newJObject()
  add(query_581878, "key", newJString(key))
  add(query_581878, "prettyPrint", newJBool(prettyPrint))
  add(query_581878, "oauth_token", newJString(oauthToken))
  add(path_581877, "profileId", newJString(profileId))
  add(query_581878, "alt", newJString(alt))
  add(query_581878, "userIp", newJString(userIp))
  add(query_581878, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581879 = body
  add(query_581878, "fields", newJString(fields))
  result = call_581876.call(path_581877, query_581878, nil, nil, body_581879)

var dfareportingReportsInsert* = Call_DfareportingReportsInsert_581863(
    name: "dfareportingReportsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/reports",
    validator: validate_DfareportingReportsInsert_581864,
    base: "/dfareporting/v3.1", url: url_DfareportingReportsInsert_581865,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsList_581843 = ref object of OpenApiRestCall_578364
proc url_DfareportingReportsList_581845(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsList_581844(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves list of reports.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581846 = path.getOrDefault("profileId")
  valid_581846 = validateParameter(valid_581846, JString, required = true,
                                 default = nil)
  if valid_581846 != nil:
    section.add "profileId", valid_581846
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   scope: JString
  ##        : The scope that defines which results are returned.
  ##   sortField: JString
  ##            : The field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : The value of the nextToken from the previous result page.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_581847 = query.getOrDefault("key")
  valid_581847 = validateParameter(valid_581847, JString, required = false,
                                 default = nil)
  if valid_581847 != nil:
    section.add "key", valid_581847
  var valid_581848 = query.getOrDefault("prettyPrint")
  valid_581848 = validateParameter(valid_581848, JBool, required = false,
                                 default = newJBool(true))
  if valid_581848 != nil:
    section.add "prettyPrint", valid_581848
  var valid_581849 = query.getOrDefault("oauth_token")
  valid_581849 = validateParameter(valid_581849, JString, required = false,
                                 default = nil)
  if valid_581849 != nil:
    section.add "oauth_token", valid_581849
  var valid_581850 = query.getOrDefault("scope")
  valid_581850 = validateParameter(valid_581850, JString, required = false,
                                 default = newJString("MINE"))
  if valid_581850 != nil:
    section.add "scope", valid_581850
  var valid_581851 = query.getOrDefault("sortField")
  valid_581851 = validateParameter(valid_581851, JString, required = false,
                                 default = newJString("LAST_MODIFIED_TIME"))
  if valid_581851 != nil:
    section.add "sortField", valid_581851
  var valid_581852 = query.getOrDefault("alt")
  valid_581852 = validateParameter(valid_581852, JString, required = false,
                                 default = newJString("json"))
  if valid_581852 != nil:
    section.add "alt", valid_581852
  var valid_581853 = query.getOrDefault("userIp")
  valid_581853 = validateParameter(valid_581853, JString, required = false,
                                 default = nil)
  if valid_581853 != nil:
    section.add "userIp", valid_581853
  var valid_581854 = query.getOrDefault("quotaUser")
  valid_581854 = validateParameter(valid_581854, JString, required = false,
                                 default = nil)
  if valid_581854 != nil:
    section.add "quotaUser", valid_581854
  var valid_581855 = query.getOrDefault("pageToken")
  valid_581855 = validateParameter(valid_581855, JString, required = false,
                                 default = nil)
  if valid_581855 != nil:
    section.add "pageToken", valid_581855
  var valid_581856 = query.getOrDefault("sortOrder")
  valid_581856 = validateParameter(valid_581856, JString, required = false,
                                 default = newJString("DESCENDING"))
  if valid_581856 != nil:
    section.add "sortOrder", valid_581856
  var valid_581857 = query.getOrDefault("fields")
  valid_581857 = validateParameter(valid_581857, JString, required = false,
                                 default = nil)
  if valid_581857 != nil:
    section.add "fields", valid_581857
  var valid_581858 = query.getOrDefault("maxResults")
  valid_581858 = validateParameter(valid_581858, JInt, required = false,
                                 default = newJInt(10))
  if valid_581858 != nil:
    section.add "maxResults", valid_581858
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581859: Call_DfareportingReportsList_581843; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves list of reports.
  ## 
  let valid = call_581859.validator(path, query, header, formData, body)
  let scheme = call_581859.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581859.url(scheme.get, call_581859.host, call_581859.base,
                         call_581859.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581859, url, valid)

proc call*(call_581860: Call_DfareportingReportsList_581843; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          scope: string = "MINE"; sortField: string = "LAST_MODIFIED_TIME";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          pageToken: string = ""; sortOrder: string = "DESCENDING"; fields: string = "";
          maxResults: int = 10): Recallable =
  ## dfareportingReportsList
  ## Retrieves list of reports.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   scope: string
  ##        : The scope that defines which results are returned.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   sortField: string
  ##            : The field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : The value of the nextToken from the previous result page.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_581861 = newJObject()
  var query_581862 = newJObject()
  add(query_581862, "key", newJString(key))
  add(query_581862, "prettyPrint", newJBool(prettyPrint))
  add(query_581862, "oauth_token", newJString(oauthToken))
  add(query_581862, "scope", newJString(scope))
  add(path_581861, "profileId", newJString(profileId))
  add(query_581862, "sortField", newJString(sortField))
  add(query_581862, "alt", newJString(alt))
  add(query_581862, "userIp", newJString(userIp))
  add(query_581862, "quotaUser", newJString(quotaUser))
  add(query_581862, "pageToken", newJString(pageToken))
  add(query_581862, "sortOrder", newJString(sortOrder))
  add(query_581862, "fields", newJString(fields))
  add(query_581862, "maxResults", newJInt(maxResults))
  result = call_581860.call(path_581861, query_581862, nil, nil, nil)

var dfareportingReportsList* = Call_DfareportingReportsList_581843(
    name: "dfareportingReportsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/reports",
    validator: validate_DfareportingReportsList_581844,
    base: "/dfareporting/v3.1", url: url_DfareportingReportsList_581845,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsCompatibleFieldsQuery_581880 = ref object of OpenApiRestCall_578364
proc url_DfareportingReportsCompatibleFieldsQuery_581882(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"), (kind: ConstantSegment,
        value: "/reports/compatiblefields/query")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsCompatibleFieldsQuery_581881(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581883 = path.getOrDefault("profileId")
  valid_581883 = validateParameter(valid_581883, JString, required = true,
                                 default = nil)
  if valid_581883 != nil:
    section.add "profileId", valid_581883
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581884 = query.getOrDefault("key")
  valid_581884 = validateParameter(valid_581884, JString, required = false,
                                 default = nil)
  if valid_581884 != nil:
    section.add "key", valid_581884
  var valid_581885 = query.getOrDefault("prettyPrint")
  valid_581885 = validateParameter(valid_581885, JBool, required = false,
                                 default = newJBool(true))
  if valid_581885 != nil:
    section.add "prettyPrint", valid_581885
  var valid_581886 = query.getOrDefault("oauth_token")
  valid_581886 = validateParameter(valid_581886, JString, required = false,
                                 default = nil)
  if valid_581886 != nil:
    section.add "oauth_token", valid_581886
  var valid_581887 = query.getOrDefault("alt")
  valid_581887 = validateParameter(valid_581887, JString, required = false,
                                 default = newJString("json"))
  if valid_581887 != nil:
    section.add "alt", valid_581887
  var valid_581888 = query.getOrDefault("userIp")
  valid_581888 = validateParameter(valid_581888, JString, required = false,
                                 default = nil)
  if valid_581888 != nil:
    section.add "userIp", valid_581888
  var valid_581889 = query.getOrDefault("quotaUser")
  valid_581889 = validateParameter(valid_581889, JString, required = false,
                                 default = nil)
  if valid_581889 != nil:
    section.add "quotaUser", valid_581889
  var valid_581890 = query.getOrDefault("fields")
  valid_581890 = validateParameter(valid_581890, JString, required = false,
                                 default = nil)
  if valid_581890 != nil:
    section.add "fields", valid_581890
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581892: Call_DfareportingReportsCompatibleFieldsQuery_581880;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.
  ## 
  let valid = call_581892.validator(path, query, header, formData, body)
  let scheme = call_581892.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581892.url(scheme.get, call_581892.host, call_581892.base,
                         call_581892.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581892, url, valid)

proc call*(call_581893: Call_DfareportingReportsCompatibleFieldsQuery_581880;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingReportsCompatibleFieldsQuery
  ## Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581894 = newJObject()
  var query_581895 = newJObject()
  var body_581896 = newJObject()
  add(query_581895, "key", newJString(key))
  add(query_581895, "prettyPrint", newJBool(prettyPrint))
  add(query_581895, "oauth_token", newJString(oauthToken))
  add(path_581894, "profileId", newJString(profileId))
  add(query_581895, "alt", newJString(alt))
  add(query_581895, "userIp", newJString(userIp))
  add(query_581895, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581896 = body
  add(query_581895, "fields", newJString(fields))
  result = call_581893.call(path_581894, query_581895, nil, nil, body_581896)

var dfareportingReportsCompatibleFieldsQuery* = Call_DfareportingReportsCompatibleFieldsQuery_581880(
    name: "dfareportingReportsCompatibleFieldsQuery", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/compatiblefields/query",
    validator: validate_DfareportingReportsCompatibleFieldsQuery_581881,
    base: "/dfareporting/v3.1", url: url_DfareportingReportsCompatibleFieldsQuery_581882,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsUpdate_581913 = ref object of OpenApiRestCall_578364
proc url_DfareportingReportsUpdate_581915(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsUpdate_581914(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a report.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581916 = path.getOrDefault("profileId")
  valid_581916 = validateParameter(valid_581916, JString, required = true,
                                 default = nil)
  if valid_581916 != nil:
    section.add "profileId", valid_581916
  var valid_581917 = path.getOrDefault("reportId")
  valid_581917 = validateParameter(valid_581917, JString, required = true,
                                 default = nil)
  if valid_581917 != nil:
    section.add "reportId", valid_581917
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581918 = query.getOrDefault("key")
  valid_581918 = validateParameter(valid_581918, JString, required = false,
                                 default = nil)
  if valid_581918 != nil:
    section.add "key", valid_581918
  var valid_581919 = query.getOrDefault("prettyPrint")
  valid_581919 = validateParameter(valid_581919, JBool, required = false,
                                 default = newJBool(true))
  if valid_581919 != nil:
    section.add "prettyPrint", valid_581919
  var valid_581920 = query.getOrDefault("oauth_token")
  valid_581920 = validateParameter(valid_581920, JString, required = false,
                                 default = nil)
  if valid_581920 != nil:
    section.add "oauth_token", valid_581920
  var valid_581921 = query.getOrDefault("alt")
  valid_581921 = validateParameter(valid_581921, JString, required = false,
                                 default = newJString("json"))
  if valid_581921 != nil:
    section.add "alt", valid_581921
  var valid_581922 = query.getOrDefault("userIp")
  valid_581922 = validateParameter(valid_581922, JString, required = false,
                                 default = nil)
  if valid_581922 != nil:
    section.add "userIp", valid_581922
  var valid_581923 = query.getOrDefault("quotaUser")
  valid_581923 = validateParameter(valid_581923, JString, required = false,
                                 default = nil)
  if valid_581923 != nil:
    section.add "quotaUser", valid_581923
  var valid_581924 = query.getOrDefault("fields")
  valid_581924 = validateParameter(valid_581924, JString, required = false,
                                 default = nil)
  if valid_581924 != nil:
    section.add "fields", valid_581924
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581926: Call_DfareportingReportsUpdate_581913; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a report.
  ## 
  let valid = call_581926.validator(path, query, header, formData, body)
  let scheme = call_581926.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581926.url(scheme.get, call_581926.host, call_581926.base,
                         call_581926.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581926, url, valid)

proc call*(call_581927: Call_DfareportingReportsUpdate_581913; profileId: string;
          reportId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingReportsUpdate
  ## Updates a report.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581928 = newJObject()
  var query_581929 = newJObject()
  var body_581930 = newJObject()
  add(query_581929, "key", newJString(key))
  add(query_581929, "prettyPrint", newJBool(prettyPrint))
  add(query_581929, "oauth_token", newJString(oauthToken))
  add(path_581928, "profileId", newJString(profileId))
  add(query_581929, "alt", newJString(alt))
  add(query_581929, "userIp", newJString(userIp))
  add(query_581929, "quotaUser", newJString(quotaUser))
  add(path_581928, "reportId", newJString(reportId))
  if body != nil:
    body_581930 = body
  add(query_581929, "fields", newJString(fields))
  result = call_581927.call(path_581928, query_581929, nil, nil, body_581930)

var dfareportingReportsUpdate* = Call_DfareportingReportsUpdate_581913(
    name: "dfareportingReportsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}",
    validator: validate_DfareportingReportsUpdate_581914,
    base: "/dfareporting/v3.1", url: url_DfareportingReportsUpdate_581915,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsGet_581897 = ref object of OpenApiRestCall_578364
proc url_DfareportingReportsGet_581899(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsGet_581898(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a report by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581900 = path.getOrDefault("profileId")
  valid_581900 = validateParameter(valid_581900, JString, required = true,
                                 default = nil)
  if valid_581900 != nil:
    section.add "profileId", valid_581900
  var valid_581901 = path.getOrDefault("reportId")
  valid_581901 = validateParameter(valid_581901, JString, required = true,
                                 default = nil)
  if valid_581901 != nil:
    section.add "reportId", valid_581901
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581902 = query.getOrDefault("key")
  valid_581902 = validateParameter(valid_581902, JString, required = false,
                                 default = nil)
  if valid_581902 != nil:
    section.add "key", valid_581902
  var valid_581903 = query.getOrDefault("prettyPrint")
  valid_581903 = validateParameter(valid_581903, JBool, required = false,
                                 default = newJBool(true))
  if valid_581903 != nil:
    section.add "prettyPrint", valid_581903
  var valid_581904 = query.getOrDefault("oauth_token")
  valid_581904 = validateParameter(valid_581904, JString, required = false,
                                 default = nil)
  if valid_581904 != nil:
    section.add "oauth_token", valid_581904
  var valid_581905 = query.getOrDefault("alt")
  valid_581905 = validateParameter(valid_581905, JString, required = false,
                                 default = newJString("json"))
  if valid_581905 != nil:
    section.add "alt", valid_581905
  var valid_581906 = query.getOrDefault("userIp")
  valid_581906 = validateParameter(valid_581906, JString, required = false,
                                 default = nil)
  if valid_581906 != nil:
    section.add "userIp", valid_581906
  var valid_581907 = query.getOrDefault("quotaUser")
  valid_581907 = validateParameter(valid_581907, JString, required = false,
                                 default = nil)
  if valid_581907 != nil:
    section.add "quotaUser", valid_581907
  var valid_581908 = query.getOrDefault("fields")
  valid_581908 = validateParameter(valid_581908, JString, required = false,
                                 default = nil)
  if valid_581908 != nil:
    section.add "fields", valid_581908
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581909: Call_DfareportingReportsGet_581897; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a report by its ID.
  ## 
  let valid = call_581909.validator(path, query, header, formData, body)
  let scheme = call_581909.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581909.url(scheme.get, call_581909.host, call_581909.base,
                         call_581909.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581909, url, valid)

proc call*(call_581910: Call_DfareportingReportsGet_581897; profileId: string;
          reportId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingReportsGet
  ## Retrieves a report by its ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581911 = newJObject()
  var query_581912 = newJObject()
  add(query_581912, "key", newJString(key))
  add(query_581912, "prettyPrint", newJBool(prettyPrint))
  add(query_581912, "oauth_token", newJString(oauthToken))
  add(path_581911, "profileId", newJString(profileId))
  add(query_581912, "alt", newJString(alt))
  add(query_581912, "userIp", newJString(userIp))
  add(query_581912, "quotaUser", newJString(quotaUser))
  add(path_581911, "reportId", newJString(reportId))
  add(query_581912, "fields", newJString(fields))
  result = call_581910.call(path_581911, query_581912, nil, nil, nil)

var dfareportingReportsGet* = Call_DfareportingReportsGet_581897(
    name: "dfareportingReportsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}",
    validator: validate_DfareportingReportsGet_581898, base: "/dfareporting/v3.1",
    url: url_DfareportingReportsGet_581899, schemes: {Scheme.Https})
type
  Call_DfareportingReportsPatch_581947 = ref object of OpenApiRestCall_578364
proc url_DfareportingReportsPatch_581949(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsPatch_581948(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a report. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581950 = path.getOrDefault("profileId")
  valid_581950 = validateParameter(valid_581950, JString, required = true,
                                 default = nil)
  if valid_581950 != nil:
    section.add "profileId", valid_581950
  var valid_581951 = path.getOrDefault("reportId")
  valid_581951 = validateParameter(valid_581951, JString, required = true,
                                 default = nil)
  if valid_581951 != nil:
    section.add "reportId", valid_581951
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581952 = query.getOrDefault("key")
  valid_581952 = validateParameter(valid_581952, JString, required = false,
                                 default = nil)
  if valid_581952 != nil:
    section.add "key", valid_581952
  var valid_581953 = query.getOrDefault("prettyPrint")
  valid_581953 = validateParameter(valid_581953, JBool, required = false,
                                 default = newJBool(true))
  if valid_581953 != nil:
    section.add "prettyPrint", valid_581953
  var valid_581954 = query.getOrDefault("oauth_token")
  valid_581954 = validateParameter(valid_581954, JString, required = false,
                                 default = nil)
  if valid_581954 != nil:
    section.add "oauth_token", valid_581954
  var valid_581955 = query.getOrDefault("alt")
  valid_581955 = validateParameter(valid_581955, JString, required = false,
                                 default = newJString("json"))
  if valid_581955 != nil:
    section.add "alt", valid_581955
  var valid_581956 = query.getOrDefault("userIp")
  valid_581956 = validateParameter(valid_581956, JString, required = false,
                                 default = nil)
  if valid_581956 != nil:
    section.add "userIp", valid_581956
  var valid_581957 = query.getOrDefault("quotaUser")
  valid_581957 = validateParameter(valid_581957, JString, required = false,
                                 default = nil)
  if valid_581957 != nil:
    section.add "quotaUser", valid_581957
  var valid_581958 = query.getOrDefault("fields")
  valid_581958 = validateParameter(valid_581958, JString, required = false,
                                 default = nil)
  if valid_581958 != nil:
    section.add "fields", valid_581958
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581960: Call_DfareportingReportsPatch_581947; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a report. This method supports patch semantics.
  ## 
  let valid = call_581960.validator(path, query, header, formData, body)
  let scheme = call_581960.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581960.url(scheme.get, call_581960.host, call_581960.base,
                         call_581960.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581960, url, valid)

proc call*(call_581961: Call_DfareportingReportsPatch_581947; profileId: string;
          reportId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingReportsPatch
  ## Updates a report. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581962 = newJObject()
  var query_581963 = newJObject()
  var body_581964 = newJObject()
  add(query_581963, "key", newJString(key))
  add(query_581963, "prettyPrint", newJBool(prettyPrint))
  add(query_581963, "oauth_token", newJString(oauthToken))
  add(path_581962, "profileId", newJString(profileId))
  add(query_581963, "alt", newJString(alt))
  add(query_581963, "userIp", newJString(userIp))
  add(query_581963, "quotaUser", newJString(quotaUser))
  add(path_581962, "reportId", newJString(reportId))
  if body != nil:
    body_581964 = body
  add(query_581963, "fields", newJString(fields))
  result = call_581961.call(path_581962, query_581963, nil, nil, body_581964)

var dfareportingReportsPatch* = Call_DfareportingReportsPatch_581947(
    name: "dfareportingReportsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}",
    validator: validate_DfareportingReportsPatch_581948,
    base: "/dfareporting/v3.1", url: url_DfareportingReportsPatch_581949,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsDelete_581931 = ref object of OpenApiRestCall_578364
proc url_DfareportingReportsDelete_581933(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsDelete_581932(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a report by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581934 = path.getOrDefault("profileId")
  valid_581934 = validateParameter(valid_581934, JString, required = true,
                                 default = nil)
  if valid_581934 != nil:
    section.add "profileId", valid_581934
  var valid_581935 = path.getOrDefault("reportId")
  valid_581935 = validateParameter(valid_581935, JString, required = true,
                                 default = nil)
  if valid_581935 != nil:
    section.add "reportId", valid_581935
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581936 = query.getOrDefault("key")
  valid_581936 = validateParameter(valid_581936, JString, required = false,
                                 default = nil)
  if valid_581936 != nil:
    section.add "key", valid_581936
  var valid_581937 = query.getOrDefault("prettyPrint")
  valid_581937 = validateParameter(valid_581937, JBool, required = false,
                                 default = newJBool(true))
  if valid_581937 != nil:
    section.add "prettyPrint", valid_581937
  var valid_581938 = query.getOrDefault("oauth_token")
  valid_581938 = validateParameter(valid_581938, JString, required = false,
                                 default = nil)
  if valid_581938 != nil:
    section.add "oauth_token", valid_581938
  var valid_581939 = query.getOrDefault("alt")
  valid_581939 = validateParameter(valid_581939, JString, required = false,
                                 default = newJString("json"))
  if valid_581939 != nil:
    section.add "alt", valid_581939
  var valid_581940 = query.getOrDefault("userIp")
  valid_581940 = validateParameter(valid_581940, JString, required = false,
                                 default = nil)
  if valid_581940 != nil:
    section.add "userIp", valid_581940
  var valid_581941 = query.getOrDefault("quotaUser")
  valid_581941 = validateParameter(valid_581941, JString, required = false,
                                 default = nil)
  if valid_581941 != nil:
    section.add "quotaUser", valid_581941
  var valid_581942 = query.getOrDefault("fields")
  valid_581942 = validateParameter(valid_581942, JString, required = false,
                                 default = nil)
  if valid_581942 != nil:
    section.add "fields", valid_581942
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581943: Call_DfareportingReportsDelete_581931; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a report by its ID.
  ## 
  let valid = call_581943.validator(path, query, header, formData, body)
  let scheme = call_581943.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581943.url(scheme.get, call_581943.host, call_581943.base,
                         call_581943.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581943, url, valid)

proc call*(call_581944: Call_DfareportingReportsDelete_581931; profileId: string;
          reportId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingReportsDelete
  ## Deletes a report by its ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581945 = newJObject()
  var query_581946 = newJObject()
  add(query_581946, "key", newJString(key))
  add(query_581946, "prettyPrint", newJBool(prettyPrint))
  add(query_581946, "oauth_token", newJString(oauthToken))
  add(path_581945, "profileId", newJString(profileId))
  add(query_581946, "alt", newJString(alt))
  add(query_581946, "userIp", newJString(userIp))
  add(query_581946, "quotaUser", newJString(quotaUser))
  add(path_581945, "reportId", newJString(reportId))
  add(query_581946, "fields", newJString(fields))
  result = call_581944.call(path_581945, query_581946, nil, nil, nil)

var dfareportingReportsDelete* = Call_DfareportingReportsDelete_581931(
    name: "dfareportingReportsDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}",
    validator: validate_DfareportingReportsDelete_581932,
    base: "/dfareporting/v3.1", url: url_DfareportingReportsDelete_581933,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsFilesList_581965 = ref object of OpenApiRestCall_578364
proc url_DfareportingReportsFilesList_581967(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId"),
               (kind: ConstantSegment, value: "/files")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsFilesList_581966(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists files for a report.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the parent report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581968 = path.getOrDefault("profileId")
  valid_581968 = validateParameter(valid_581968, JString, required = true,
                                 default = nil)
  if valid_581968 != nil:
    section.add "profileId", valid_581968
  var valid_581969 = path.getOrDefault("reportId")
  valid_581969 = validateParameter(valid_581969, JString, required = true,
                                 default = nil)
  if valid_581969 != nil:
    section.add "reportId", valid_581969
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : The field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : The value of the nextToken from the previous result page.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_581970 = query.getOrDefault("key")
  valid_581970 = validateParameter(valid_581970, JString, required = false,
                                 default = nil)
  if valid_581970 != nil:
    section.add "key", valid_581970
  var valid_581971 = query.getOrDefault("prettyPrint")
  valid_581971 = validateParameter(valid_581971, JBool, required = false,
                                 default = newJBool(true))
  if valid_581971 != nil:
    section.add "prettyPrint", valid_581971
  var valid_581972 = query.getOrDefault("oauth_token")
  valid_581972 = validateParameter(valid_581972, JString, required = false,
                                 default = nil)
  if valid_581972 != nil:
    section.add "oauth_token", valid_581972
  var valid_581973 = query.getOrDefault("sortField")
  valid_581973 = validateParameter(valid_581973, JString, required = false,
                                 default = newJString("LAST_MODIFIED_TIME"))
  if valid_581973 != nil:
    section.add "sortField", valid_581973
  var valid_581974 = query.getOrDefault("alt")
  valid_581974 = validateParameter(valid_581974, JString, required = false,
                                 default = newJString("json"))
  if valid_581974 != nil:
    section.add "alt", valid_581974
  var valid_581975 = query.getOrDefault("userIp")
  valid_581975 = validateParameter(valid_581975, JString, required = false,
                                 default = nil)
  if valid_581975 != nil:
    section.add "userIp", valid_581975
  var valid_581976 = query.getOrDefault("quotaUser")
  valid_581976 = validateParameter(valid_581976, JString, required = false,
                                 default = nil)
  if valid_581976 != nil:
    section.add "quotaUser", valid_581976
  var valid_581977 = query.getOrDefault("pageToken")
  valid_581977 = validateParameter(valid_581977, JString, required = false,
                                 default = nil)
  if valid_581977 != nil:
    section.add "pageToken", valid_581977
  var valid_581978 = query.getOrDefault("sortOrder")
  valid_581978 = validateParameter(valid_581978, JString, required = false,
                                 default = newJString("DESCENDING"))
  if valid_581978 != nil:
    section.add "sortOrder", valid_581978
  var valid_581979 = query.getOrDefault("fields")
  valid_581979 = validateParameter(valid_581979, JString, required = false,
                                 default = nil)
  if valid_581979 != nil:
    section.add "fields", valid_581979
  var valid_581980 = query.getOrDefault("maxResults")
  valid_581980 = validateParameter(valid_581980, JInt, required = false,
                                 default = newJInt(10))
  if valid_581980 != nil:
    section.add "maxResults", valid_581980
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581981: Call_DfareportingReportsFilesList_581965; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists files for a report.
  ## 
  let valid = call_581981.validator(path, query, header, formData, body)
  let scheme = call_581981.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581981.url(scheme.get, call_581981.host, call_581981.base,
                         call_581981.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581981, url, valid)

proc call*(call_581982: Call_DfareportingReportsFilesList_581965;
          profileId: string; reportId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = "";
          sortField: string = "LAST_MODIFIED_TIME"; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; pageToken: string = "";
          sortOrder: string = "DESCENDING"; fields: string = ""; maxResults: int = 10): Recallable =
  ## dfareportingReportsFilesList
  ## Lists files for a report.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : The DFA profile ID.
  ##   sortField: string
  ##            : The field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : The value of the nextToken from the previous result page.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   reportId: string (required)
  ##           : The ID of the parent report.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_581983 = newJObject()
  var query_581984 = newJObject()
  add(query_581984, "key", newJString(key))
  add(query_581984, "prettyPrint", newJBool(prettyPrint))
  add(query_581984, "oauth_token", newJString(oauthToken))
  add(path_581983, "profileId", newJString(profileId))
  add(query_581984, "sortField", newJString(sortField))
  add(query_581984, "alt", newJString(alt))
  add(query_581984, "userIp", newJString(userIp))
  add(query_581984, "quotaUser", newJString(quotaUser))
  add(query_581984, "pageToken", newJString(pageToken))
  add(query_581984, "sortOrder", newJString(sortOrder))
  add(path_581983, "reportId", newJString(reportId))
  add(query_581984, "fields", newJString(fields))
  add(query_581984, "maxResults", newJInt(maxResults))
  result = call_581982.call(path_581983, query_581984, nil, nil, nil)

var dfareportingReportsFilesList* = Call_DfareportingReportsFilesList_581965(
    name: "dfareportingReportsFilesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}/files",
    validator: validate_DfareportingReportsFilesList_581966,
    base: "/dfareporting/v3.1", url: url_DfareportingReportsFilesList_581967,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsFilesGet_581985 = ref object of OpenApiRestCall_578364
proc url_DfareportingReportsFilesGet_581987(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  assert "fileId" in path, "`fileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId"),
               (kind: ConstantSegment, value: "/files/"),
               (kind: VariableSegment, value: "fileId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsFilesGet_581986(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a report file. This method supports media download.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA profile ID.
  ##   fileId: JString (required)
  ##         : The ID of the report file.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581988 = path.getOrDefault("profileId")
  valid_581988 = validateParameter(valid_581988, JString, required = true,
                                 default = nil)
  if valid_581988 != nil:
    section.add "profileId", valid_581988
  var valid_581989 = path.getOrDefault("fileId")
  valid_581989 = validateParameter(valid_581989, JString, required = true,
                                 default = nil)
  if valid_581989 != nil:
    section.add "fileId", valid_581989
  var valid_581990 = path.getOrDefault("reportId")
  valid_581990 = validateParameter(valid_581990, JString, required = true,
                                 default = nil)
  if valid_581990 != nil:
    section.add "reportId", valid_581990
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581991 = query.getOrDefault("key")
  valid_581991 = validateParameter(valid_581991, JString, required = false,
                                 default = nil)
  if valid_581991 != nil:
    section.add "key", valid_581991
  var valid_581992 = query.getOrDefault("prettyPrint")
  valid_581992 = validateParameter(valid_581992, JBool, required = false,
                                 default = newJBool(true))
  if valid_581992 != nil:
    section.add "prettyPrint", valid_581992
  var valid_581993 = query.getOrDefault("oauth_token")
  valid_581993 = validateParameter(valid_581993, JString, required = false,
                                 default = nil)
  if valid_581993 != nil:
    section.add "oauth_token", valid_581993
  var valid_581994 = query.getOrDefault("alt")
  valid_581994 = validateParameter(valid_581994, JString, required = false,
                                 default = newJString("json"))
  if valid_581994 != nil:
    section.add "alt", valid_581994
  var valid_581995 = query.getOrDefault("userIp")
  valid_581995 = validateParameter(valid_581995, JString, required = false,
                                 default = nil)
  if valid_581995 != nil:
    section.add "userIp", valid_581995
  var valid_581996 = query.getOrDefault("quotaUser")
  valid_581996 = validateParameter(valid_581996, JString, required = false,
                                 default = nil)
  if valid_581996 != nil:
    section.add "quotaUser", valid_581996
  var valid_581997 = query.getOrDefault("fields")
  valid_581997 = validateParameter(valid_581997, JString, required = false,
                                 default = nil)
  if valid_581997 != nil:
    section.add "fields", valid_581997
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581998: Call_DfareportingReportsFilesGet_581985; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a report file. This method supports media download.
  ## 
  let valid = call_581998.validator(path, query, header, formData, body)
  let scheme = call_581998.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581998.url(scheme.get, call_581998.host, call_581998.base,
                         call_581998.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581998, url, valid)

proc call*(call_581999: Call_DfareportingReportsFilesGet_581985; profileId: string;
          fileId: string; reportId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingReportsFilesGet
  ## Retrieves a report file. This method supports media download.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : The DFA profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fileId: string (required)
  ##         : The ID of the report file.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582000 = newJObject()
  var query_582001 = newJObject()
  add(query_582001, "key", newJString(key))
  add(query_582001, "prettyPrint", newJBool(prettyPrint))
  add(query_582001, "oauth_token", newJString(oauthToken))
  add(path_582000, "profileId", newJString(profileId))
  add(query_582001, "alt", newJString(alt))
  add(query_582001, "userIp", newJString(userIp))
  add(query_582001, "quotaUser", newJString(quotaUser))
  add(path_582000, "fileId", newJString(fileId))
  add(path_582000, "reportId", newJString(reportId))
  add(query_582001, "fields", newJString(fields))
  result = call_581999.call(path_582000, query_582001, nil, nil, nil)

var dfareportingReportsFilesGet* = Call_DfareportingReportsFilesGet_581985(
    name: "dfareportingReportsFilesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}/files/{fileId}",
    validator: validate_DfareportingReportsFilesGet_581986,
    base: "/dfareporting/v3.1", url: url_DfareportingReportsFilesGet_581987,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsRun_582002 = ref object of OpenApiRestCall_578364
proc url_DfareportingReportsRun_582004(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId"),
               (kind: ConstantSegment, value: "/run")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsRun_582003(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Runs a report.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582005 = path.getOrDefault("profileId")
  valid_582005 = validateParameter(valid_582005, JString, required = true,
                                 default = nil)
  if valid_582005 != nil:
    section.add "profileId", valid_582005
  var valid_582006 = path.getOrDefault("reportId")
  valid_582006 = validateParameter(valid_582006, JString, required = true,
                                 default = nil)
  if valid_582006 != nil:
    section.add "reportId", valid_582006
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   synchronous: JBool
  ##              : If set and true, tries to run the report synchronously.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582007 = query.getOrDefault("key")
  valid_582007 = validateParameter(valid_582007, JString, required = false,
                                 default = nil)
  if valid_582007 != nil:
    section.add "key", valid_582007
  var valid_582008 = query.getOrDefault("prettyPrint")
  valid_582008 = validateParameter(valid_582008, JBool, required = false,
                                 default = newJBool(true))
  if valid_582008 != nil:
    section.add "prettyPrint", valid_582008
  var valid_582009 = query.getOrDefault("oauth_token")
  valid_582009 = validateParameter(valid_582009, JString, required = false,
                                 default = nil)
  if valid_582009 != nil:
    section.add "oauth_token", valid_582009
  var valid_582010 = query.getOrDefault("synchronous")
  valid_582010 = validateParameter(valid_582010, JBool, required = false,
                                 default = newJBool(false))
  if valid_582010 != nil:
    section.add "synchronous", valid_582010
  var valid_582011 = query.getOrDefault("alt")
  valid_582011 = validateParameter(valid_582011, JString, required = false,
                                 default = newJString("json"))
  if valid_582011 != nil:
    section.add "alt", valid_582011
  var valid_582012 = query.getOrDefault("userIp")
  valid_582012 = validateParameter(valid_582012, JString, required = false,
                                 default = nil)
  if valid_582012 != nil:
    section.add "userIp", valid_582012
  var valid_582013 = query.getOrDefault("quotaUser")
  valid_582013 = validateParameter(valid_582013, JString, required = false,
                                 default = nil)
  if valid_582013 != nil:
    section.add "quotaUser", valid_582013
  var valid_582014 = query.getOrDefault("fields")
  valid_582014 = validateParameter(valid_582014, JString, required = false,
                                 default = nil)
  if valid_582014 != nil:
    section.add "fields", valid_582014
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582015: Call_DfareportingReportsRun_582002; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Runs a report.
  ## 
  let valid = call_582015.validator(path, query, header, formData, body)
  let scheme = call_582015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582015.url(scheme.get, call_582015.host, call_582015.base,
                         call_582015.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582015, url, valid)

proc call*(call_582016: Call_DfareportingReportsRun_582002; profileId: string;
          reportId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; synchronous: bool = false; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingReportsRun
  ## Runs a report.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   synchronous: bool
  ##              : If set and true, tries to run the report synchronously.
  ##   profileId: string (required)
  ##            : The DFA profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582017 = newJObject()
  var query_582018 = newJObject()
  add(query_582018, "key", newJString(key))
  add(query_582018, "prettyPrint", newJBool(prettyPrint))
  add(query_582018, "oauth_token", newJString(oauthToken))
  add(query_582018, "synchronous", newJBool(synchronous))
  add(path_582017, "profileId", newJString(profileId))
  add(query_582018, "alt", newJString(alt))
  add(query_582018, "userIp", newJString(userIp))
  add(query_582018, "quotaUser", newJString(quotaUser))
  add(path_582017, "reportId", newJString(reportId))
  add(query_582018, "fields", newJString(fields))
  result = call_582016.call(path_582017, query_582018, nil, nil, nil)

var dfareportingReportsRun* = Call_DfareportingReportsRun_582002(
    name: "dfareportingReportsRun", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}/run",
    validator: validate_DfareportingReportsRun_582003, base: "/dfareporting/v3.1",
    url: url_DfareportingReportsRun_582004, schemes: {Scheme.Https})
type
  Call_DfareportingSitesUpdate_582049 = ref object of OpenApiRestCall_578364
proc url_DfareportingSitesUpdate_582051(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesUpdate_582050(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582052 = path.getOrDefault("profileId")
  valid_582052 = validateParameter(valid_582052, JString, required = true,
                                 default = nil)
  if valid_582052 != nil:
    section.add "profileId", valid_582052
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582053 = query.getOrDefault("key")
  valid_582053 = validateParameter(valid_582053, JString, required = false,
                                 default = nil)
  if valid_582053 != nil:
    section.add "key", valid_582053
  var valid_582054 = query.getOrDefault("prettyPrint")
  valid_582054 = validateParameter(valid_582054, JBool, required = false,
                                 default = newJBool(true))
  if valid_582054 != nil:
    section.add "prettyPrint", valid_582054
  var valid_582055 = query.getOrDefault("oauth_token")
  valid_582055 = validateParameter(valid_582055, JString, required = false,
                                 default = nil)
  if valid_582055 != nil:
    section.add "oauth_token", valid_582055
  var valid_582056 = query.getOrDefault("alt")
  valid_582056 = validateParameter(valid_582056, JString, required = false,
                                 default = newJString("json"))
  if valid_582056 != nil:
    section.add "alt", valid_582056
  var valid_582057 = query.getOrDefault("userIp")
  valid_582057 = validateParameter(valid_582057, JString, required = false,
                                 default = nil)
  if valid_582057 != nil:
    section.add "userIp", valid_582057
  var valid_582058 = query.getOrDefault("quotaUser")
  valid_582058 = validateParameter(valid_582058, JString, required = false,
                                 default = nil)
  if valid_582058 != nil:
    section.add "quotaUser", valid_582058
  var valid_582059 = query.getOrDefault("fields")
  valid_582059 = validateParameter(valid_582059, JString, required = false,
                                 default = nil)
  if valid_582059 != nil:
    section.add "fields", valid_582059
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582061: Call_DfareportingSitesUpdate_582049; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing site.
  ## 
  let valid = call_582061.validator(path, query, header, formData, body)
  let scheme = call_582061.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582061.url(scheme.get, call_582061.host, call_582061.base,
                         call_582061.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582061, url, valid)

proc call*(call_582062: Call_DfareportingSitesUpdate_582049; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingSitesUpdate
  ## Updates an existing site.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582063 = newJObject()
  var query_582064 = newJObject()
  var body_582065 = newJObject()
  add(query_582064, "key", newJString(key))
  add(query_582064, "prettyPrint", newJBool(prettyPrint))
  add(query_582064, "oauth_token", newJString(oauthToken))
  add(path_582063, "profileId", newJString(profileId))
  add(query_582064, "alt", newJString(alt))
  add(query_582064, "userIp", newJString(userIp))
  add(query_582064, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_582065 = body
  add(query_582064, "fields", newJString(fields))
  result = call_582062.call(path_582063, query_582064, nil, nil, body_582065)

var dfareportingSitesUpdate* = Call_DfareportingSitesUpdate_582049(
    name: "dfareportingSitesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites",
    validator: validate_DfareportingSitesUpdate_582050,
    base: "/dfareporting/v3.1", url: url_DfareportingSitesUpdate_582051,
    schemes: {Scheme.Https})
type
  Call_DfareportingSitesInsert_582066 = ref object of OpenApiRestCall_578364
proc url_DfareportingSitesInsert_582068(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesInsert_582067(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582069 = path.getOrDefault("profileId")
  valid_582069 = validateParameter(valid_582069, JString, required = true,
                                 default = nil)
  if valid_582069 != nil:
    section.add "profileId", valid_582069
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582070 = query.getOrDefault("key")
  valid_582070 = validateParameter(valid_582070, JString, required = false,
                                 default = nil)
  if valid_582070 != nil:
    section.add "key", valid_582070
  var valid_582071 = query.getOrDefault("prettyPrint")
  valid_582071 = validateParameter(valid_582071, JBool, required = false,
                                 default = newJBool(true))
  if valid_582071 != nil:
    section.add "prettyPrint", valid_582071
  var valid_582072 = query.getOrDefault("oauth_token")
  valid_582072 = validateParameter(valid_582072, JString, required = false,
                                 default = nil)
  if valid_582072 != nil:
    section.add "oauth_token", valid_582072
  var valid_582073 = query.getOrDefault("alt")
  valid_582073 = validateParameter(valid_582073, JString, required = false,
                                 default = newJString("json"))
  if valid_582073 != nil:
    section.add "alt", valid_582073
  var valid_582074 = query.getOrDefault("userIp")
  valid_582074 = validateParameter(valid_582074, JString, required = false,
                                 default = nil)
  if valid_582074 != nil:
    section.add "userIp", valid_582074
  var valid_582075 = query.getOrDefault("quotaUser")
  valid_582075 = validateParameter(valid_582075, JString, required = false,
                                 default = nil)
  if valid_582075 != nil:
    section.add "quotaUser", valid_582075
  var valid_582076 = query.getOrDefault("fields")
  valid_582076 = validateParameter(valid_582076, JString, required = false,
                                 default = nil)
  if valid_582076 != nil:
    section.add "fields", valid_582076
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582078: Call_DfareportingSitesInsert_582066; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new site.
  ## 
  let valid = call_582078.validator(path, query, header, formData, body)
  let scheme = call_582078.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582078.url(scheme.get, call_582078.host, call_582078.base,
                         call_582078.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582078, url, valid)

proc call*(call_582079: Call_DfareportingSitesInsert_582066; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingSitesInsert
  ## Inserts a new site.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582080 = newJObject()
  var query_582081 = newJObject()
  var body_582082 = newJObject()
  add(query_582081, "key", newJString(key))
  add(query_582081, "prettyPrint", newJBool(prettyPrint))
  add(query_582081, "oauth_token", newJString(oauthToken))
  add(path_582080, "profileId", newJString(profileId))
  add(query_582081, "alt", newJString(alt))
  add(query_582081, "userIp", newJString(userIp))
  add(query_582081, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_582082 = body
  add(query_582081, "fields", newJString(fields))
  result = call_582079.call(path_582080, query_582081, nil, nil, body_582082)

var dfareportingSitesInsert* = Call_DfareportingSitesInsert_582066(
    name: "dfareportingSitesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites",
    validator: validate_DfareportingSitesInsert_582067,
    base: "/dfareporting/v3.1", url: url_DfareportingSitesInsert_582068,
    schemes: {Scheme.Https})
type
  Call_DfareportingSitesList_582019 = ref object of OpenApiRestCall_578364
proc url_DfareportingSitesList_582021(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesList_582020(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of sites, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582022 = path.getOrDefault("profileId")
  valid_582022 = validateParameter(valid_582022, JString, required = true,
                                 default = nil)
  if valid_582022 != nil:
    section.add "profileId", valid_582022
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   acceptsPublisherPaidPlacements: JBool
  ##                                 : Select only sites that accept publisher paid placements.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   approved: JBool
  ##           : Select only approved sites.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   acceptsInterstitialPlacements: JBool
  ##                                : This search filter is no longer supported and will have no effect on the results returned.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   directorySiteIds: JArray
  ##                   : Select only sites with these directory site IDs.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name, ID or keyName. Wildcards (*) are allowed. For example, "site*2015" will return objects with names like "site June 2015", "site April 2015", or simply "site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "site" will match objects with name "my site", "site 2015", or simply "site".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   subaccountId: JString
  ##               : Select only sites with this subaccount ID.
  ##   acceptsInStreamVideoPlacements: JBool
  ##                                 : This search filter is no longer supported and will have no effect on the results returned.
  ##   campaignIds: JArray
  ##              : Select only sites with these campaign IDs.
  ##   unmappedSite: JBool
  ##               : Select only sites that have not been mapped to a directory site.
  ##   adWordsSite: JBool
  ##              : Select only AdWords sites.
  ##   ids: JArray
  ##      : Select only sites with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_582023 = query.getOrDefault("key")
  valid_582023 = validateParameter(valid_582023, JString, required = false,
                                 default = nil)
  if valid_582023 != nil:
    section.add "key", valid_582023
  var valid_582024 = query.getOrDefault("acceptsPublisherPaidPlacements")
  valid_582024 = validateParameter(valid_582024, JBool, required = false, default = nil)
  if valid_582024 != nil:
    section.add "acceptsPublisherPaidPlacements", valid_582024
  var valid_582025 = query.getOrDefault("prettyPrint")
  valid_582025 = validateParameter(valid_582025, JBool, required = false,
                                 default = newJBool(true))
  if valid_582025 != nil:
    section.add "prettyPrint", valid_582025
  var valid_582026 = query.getOrDefault("oauth_token")
  valid_582026 = validateParameter(valid_582026, JString, required = false,
                                 default = nil)
  if valid_582026 != nil:
    section.add "oauth_token", valid_582026
  var valid_582027 = query.getOrDefault("approved")
  valid_582027 = validateParameter(valid_582027, JBool, required = false, default = nil)
  if valid_582027 != nil:
    section.add "approved", valid_582027
  var valid_582028 = query.getOrDefault("sortField")
  valid_582028 = validateParameter(valid_582028, JString, required = false,
                                 default = newJString("ID"))
  if valid_582028 != nil:
    section.add "sortField", valid_582028
  var valid_582029 = query.getOrDefault("alt")
  valid_582029 = validateParameter(valid_582029, JString, required = false,
                                 default = newJString("json"))
  if valid_582029 != nil:
    section.add "alt", valid_582029
  var valid_582030 = query.getOrDefault("userIp")
  valid_582030 = validateParameter(valid_582030, JString, required = false,
                                 default = nil)
  if valid_582030 != nil:
    section.add "userIp", valid_582030
  var valid_582031 = query.getOrDefault("acceptsInterstitialPlacements")
  valid_582031 = validateParameter(valid_582031, JBool, required = false, default = nil)
  if valid_582031 != nil:
    section.add "acceptsInterstitialPlacements", valid_582031
  var valid_582032 = query.getOrDefault("quotaUser")
  valid_582032 = validateParameter(valid_582032, JString, required = false,
                                 default = nil)
  if valid_582032 != nil:
    section.add "quotaUser", valid_582032
  var valid_582033 = query.getOrDefault("directorySiteIds")
  valid_582033 = validateParameter(valid_582033, JArray, required = false,
                                 default = nil)
  if valid_582033 != nil:
    section.add "directorySiteIds", valid_582033
  var valid_582034 = query.getOrDefault("pageToken")
  valid_582034 = validateParameter(valid_582034, JString, required = false,
                                 default = nil)
  if valid_582034 != nil:
    section.add "pageToken", valid_582034
  var valid_582035 = query.getOrDefault("searchString")
  valid_582035 = validateParameter(valid_582035, JString, required = false,
                                 default = nil)
  if valid_582035 != nil:
    section.add "searchString", valid_582035
  var valid_582036 = query.getOrDefault("sortOrder")
  valid_582036 = validateParameter(valid_582036, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_582036 != nil:
    section.add "sortOrder", valid_582036
  var valid_582037 = query.getOrDefault("subaccountId")
  valid_582037 = validateParameter(valid_582037, JString, required = false,
                                 default = nil)
  if valid_582037 != nil:
    section.add "subaccountId", valid_582037
  var valid_582038 = query.getOrDefault("acceptsInStreamVideoPlacements")
  valid_582038 = validateParameter(valid_582038, JBool, required = false, default = nil)
  if valid_582038 != nil:
    section.add "acceptsInStreamVideoPlacements", valid_582038
  var valid_582039 = query.getOrDefault("campaignIds")
  valid_582039 = validateParameter(valid_582039, JArray, required = false,
                                 default = nil)
  if valid_582039 != nil:
    section.add "campaignIds", valid_582039
  var valid_582040 = query.getOrDefault("unmappedSite")
  valid_582040 = validateParameter(valid_582040, JBool, required = false, default = nil)
  if valid_582040 != nil:
    section.add "unmappedSite", valid_582040
  var valid_582041 = query.getOrDefault("adWordsSite")
  valid_582041 = validateParameter(valid_582041, JBool, required = false, default = nil)
  if valid_582041 != nil:
    section.add "adWordsSite", valid_582041
  var valid_582042 = query.getOrDefault("ids")
  valid_582042 = validateParameter(valid_582042, JArray, required = false,
                                 default = nil)
  if valid_582042 != nil:
    section.add "ids", valid_582042
  var valid_582043 = query.getOrDefault("fields")
  valid_582043 = validateParameter(valid_582043, JString, required = false,
                                 default = nil)
  if valid_582043 != nil:
    section.add "fields", valid_582043
  var valid_582044 = query.getOrDefault("maxResults")
  valid_582044 = validateParameter(valid_582044, JInt, required = false,
                                 default = newJInt(1000))
  if valid_582044 != nil:
    section.add "maxResults", valid_582044
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582045: Call_DfareportingSitesList_582019; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of sites, possibly filtered. This method supports paging.
  ## 
  let valid = call_582045.validator(path, query, header, formData, body)
  let scheme = call_582045.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582045.url(scheme.get, call_582045.host, call_582045.base,
                         call_582045.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582045, url, valid)

proc call*(call_582046: Call_DfareportingSitesList_582019; profileId: string;
          key: string = ""; acceptsPublisherPaidPlacements: bool = false;
          prettyPrint: bool = true; oauthToken: string = ""; approved: bool = false;
          sortField: string = "ID"; alt: string = "json"; userIp: string = "";
          acceptsInterstitialPlacements: bool = false; quotaUser: string = "";
          directorySiteIds: JsonNode = nil; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          subaccountId: string = ""; acceptsInStreamVideoPlacements: bool = false;
          campaignIds: JsonNode = nil; unmappedSite: bool = false;
          adWordsSite: bool = false; ids: JsonNode = nil; fields: string = "";
          maxResults: int = 1000): Recallable =
  ## dfareportingSitesList
  ## Retrieves a list of sites, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   acceptsPublisherPaidPlacements: bool
  ##                                 : Select only sites that accept publisher paid placements.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   approved: bool
  ##           : Select only approved sites.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   acceptsInterstitialPlacements: bool
  ##                                : This search filter is no longer supported and will have no effect on the results returned.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   directorySiteIds: JArray
  ##                   : Select only sites with these directory site IDs.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name, ID or keyName. Wildcards (*) are allowed. For example, "site*2015" will return objects with names like "site June 2015", "site April 2015", or simply "site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "site" will match objects with name "my site", "site 2015", or simply "site".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   subaccountId: string
  ##               : Select only sites with this subaccount ID.
  ##   acceptsInStreamVideoPlacements: bool
  ##                                 : This search filter is no longer supported and will have no effect on the results returned.
  ##   campaignIds: JArray
  ##              : Select only sites with these campaign IDs.
  ##   unmappedSite: bool
  ##               : Select only sites that have not been mapped to a directory site.
  ##   adWordsSite: bool
  ##              : Select only AdWords sites.
  ##   ids: JArray
  ##      : Select only sites with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_582047 = newJObject()
  var query_582048 = newJObject()
  add(query_582048, "key", newJString(key))
  add(query_582048, "acceptsPublisherPaidPlacements",
      newJBool(acceptsPublisherPaidPlacements))
  add(query_582048, "prettyPrint", newJBool(prettyPrint))
  add(query_582048, "oauth_token", newJString(oauthToken))
  add(path_582047, "profileId", newJString(profileId))
  add(query_582048, "approved", newJBool(approved))
  add(query_582048, "sortField", newJString(sortField))
  add(query_582048, "alt", newJString(alt))
  add(query_582048, "userIp", newJString(userIp))
  add(query_582048, "acceptsInterstitialPlacements",
      newJBool(acceptsInterstitialPlacements))
  add(query_582048, "quotaUser", newJString(quotaUser))
  if directorySiteIds != nil:
    query_582048.add "directorySiteIds", directorySiteIds
  add(query_582048, "pageToken", newJString(pageToken))
  add(query_582048, "searchString", newJString(searchString))
  add(query_582048, "sortOrder", newJString(sortOrder))
  add(query_582048, "subaccountId", newJString(subaccountId))
  add(query_582048, "acceptsInStreamVideoPlacements",
      newJBool(acceptsInStreamVideoPlacements))
  if campaignIds != nil:
    query_582048.add "campaignIds", campaignIds
  add(query_582048, "unmappedSite", newJBool(unmappedSite))
  add(query_582048, "adWordsSite", newJBool(adWordsSite))
  if ids != nil:
    query_582048.add "ids", ids
  add(query_582048, "fields", newJString(fields))
  add(query_582048, "maxResults", newJInt(maxResults))
  result = call_582046.call(path_582047, query_582048, nil, nil, nil)

var dfareportingSitesList* = Call_DfareportingSitesList_582019(
    name: "dfareportingSitesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites",
    validator: validate_DfareportingSitesList_582020, base: "/dfareporting/v3.1",
    url: url_DfareportingSitesList_582021, schemes: {Scheme.Https})
type
  Call_DfareportingSitesPatch_582083 = ref object of OpenApiRestCall_578364
proc url_DfareportingSitesPatch_582085(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesPatch_582084(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing site. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582086 = path.getOrDefault("profileId")
  valid_582086 = validateParameter(valid_582086, JString, required = true,
                                 default = nil)
  if valid_582086 != nil:
    section.add "profileId", valid_582086
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Site ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582087 = query.getOrDefault("key")
  valid_582087 = validateParameter(valid_582087, JString, required = false,
                                 default = nil)
  if valid_582087 != nil:
    section.add "key", valid_582087
  var valid_582088 = query.getOrDefault("prettyPrint")
  valid_582088 = validateParameter(valid_582088, JBool, required = false,
                                 default = newJBool(true))
  if valid_582088 != nil:
    section.add "prettyPrint", valid_582088
  var valid_582089 = query.getOrDefault("oauth_token")
  valid_582089 = validateParameter(valid_582089, JString, required = false,
                                 default = nil)
  if valid_582089 != nil:
    section.add "oauth_token", valid_582089
  var valid_582090 = query.getOrDefault("alt")
  valid_582090 = validateParameter(valid_582090, JString, required = false,
                                 default = newJString("json"))
  if valid_582090 != nil:
    section.add "alt", valid_582090
  var valid_582091 = query.getOrDefault("userIp")
  valid_582091 = validateParameter(valid_582091, JString, required = false,
                                 default = nil)
  if valid_582091 != nil:
    section.add "userIp", valid_582091
  var valid_582092 = query.getOrDefault("quotaUser")
  valid_582092 = validateParameter(valid_582092, JString, required = false,
                                 default = nil)
  if valid_582092 != nil:
    section.add "quotaUser", valid_582092
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_582093 = query.getOrDefault("id")
  valid_582093 = validateParameter(valid_582093, JString, required = true,
                                 default = nil)
  if valid_582093 != nil:
    section.add "id", valid_582093
  var valid_582094 = query.getOrDefault("fields")
  valid_582094 = validateParameter(valid_582094, JString, required = false,
                                 default = nil)
  if valid_582094 != nil:
    section.add "fields", valid_582094
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582096: Call_DfareportingSitesPatch_582083; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing site. This method supports patch semantics.
  ## 
  let valid = call_582096.validator(path, query, header, formData, body)
  let scheme = call_582096.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582096.url(scheme.get, call_582096.host, call_582096.base,
                         call_582096.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582096, url, valid)

proc call*(call_582097: Call_DfareportingSitesPatch_582083; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingSitesPatch
  ## Updates an existing site. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Site ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582098 = newJObject()
  var query_582099 = newJObject()
  var body_582100 = newJObject()
  add(query_582099, "key", newJString(key))
  add(query_582099, "prettyPrint", newJBool(prettyPrint))
  add(query_582099, "oauth_token", newJString(oauthToken))
  add(path_582098, "profileId", newJString(profileId))
  add(query_582099, "alt", newJString(alt))
  add(query_582099, "userIp", newJString(userIp))
  add(query_582099, "quotaUser", newJString(quotaUser))
  add(query_582099, "id", newJString(id))
  if body != nil:
    body_582100 = body
  add(query_582099, "fields", newJString(fields))
  result = call_582097.call(path_582098, query_582099, nil, nil, body_582100)

var dfareportingSitesPatch* = Call_DfareportingSitesPatch_582083(
    name: "dfareportingSitesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites",
    validator: validate_DfareportingSitesPatch_582084, base: "/dfareporting/v3.1",
    url: url_DfareportingSitesPatch_582085, schemes: {Scheme.Https})
type
  Call_DfareportingSitesGet_582101 = ref object of OpenApiRestCall_578364
proc url_DfareportingSitesGet_582103(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesGet_582102(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one site by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Site ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582104 = path.getOrDefault("profileId")
  valid_582104 = validateParameter(valid_582104, JString, required = true,
                                 default = nil)
  if valid_582104 != nil:
    section.add "profileId", valid_582104
  var valid_582105 = path.getOrDefault("id")
  valid_582105 = validateParameter(valid_582105, JString, required = true,
                                 default = nil)
  if valid_582105 != nil:
    section.add "id", valid_582105
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582106 = query.getOrDefault("key")
  valid_582106 = validateParameter(valid_582106, JString, required = false,
                                 default = nil)
  if valid_582106 != nil:
    section.add "key", valid_582106
  var valid_582107 = query.getOrDefault("prettyPrint")
  valid_582107 = validateParameter(valid_582107, JBool, required = false,
                                 default = newJBool(true))
  if valid_582107 != nil:
    section.add "prettyPrint", valid_582107
  var valid_582108 = query.getOrDefault("oauth_token")
  valid_582108 = validateParameter(valid_582108, JString, required = false,
                                 default = nil)
  if valid_582108 != nil:
    section.add "oauth_token", valid_582108
  var valid_582109 = query.getOrDefault("alt")
  valid_582109 = validateParameter(valid_582109, JString, required = false,
                                 default = newJString("json"))
  if valid_582109 != nil:
    section.add "alt", valid_582109
  var valid_582110 = query.getOrDefault("userIp")
  valid_582110 = validateParameter(valid_582110, JString, required = false,
                                 default = nil)
  if valid_582110 != nil:
    section.add "userIp", valid_582110
  var valid_582111 = query.getOrDefault("quotaUser")
  valid_582111 = validateParameter(valid_582111, JString, required = false,
                                 default = nil)
  if valid_582111 != nil:
    section.add "quotaUser", valid_582111
  var valid_582112 = query.getOrDefault("fields")
  valid_582112 = validateParameter(valid_582112, JString, required = false,
                                 default = nil)
  if valid_582112 != nil:
    section.add "fields", valid_582112
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582113: Call_DfareportingSitesGet_582101; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one site by ID.
  ## 
  let valid = call_582113.validator(path, query, header, formData, body)
  let scheme = call_582113.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582113.url(scheme.get, call_582113.host, call_582113.base,
                         call_582113.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582113, url, valid)

proc call*(call_582114: Call_DfareportingSitesGet_582101; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingSitesGet
  ## Gets one site by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Site ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582115 = newJObject()
  var query_582116 = newJObject()
  add(query_582116, "key", newJString(key))
  add(query_582116, "prettyPrint", newJBool(prettyPrint))
  add(query_582116, "oauth_token", newJString(oauthToken))
  add(path_582115, "profileId", newJString(profileId))
  add(path_582115, "id", newJString(id))
  add(query_582116, "alt", newJString(alt))
  add(query_582116, "userIp", newJString(userIp))
  add(query_582116, "quotaUser", newJString(quotaUser))
  add(query_582116, "fields", newJString(fields))
  result = call_582114.call(path_582115, query_582116, nil, nil, nil)

var dfareportingSitesGet* = Call_DfareportingSitesGet_582101(
    name: "dfareportingSitesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites/{id}",
    validator: validate_DfareportingSitesGet_582102, base: "/dfareporting/v3.1",
    url: url_DfareportingSitesGet_582103, schemes: {Scheme.Https})
type
  Call_DfareportingSizesInsert_582136 = ref object of OpenApiRestCall_578364
proc url_DfareportingSizesInsert_582138(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sizes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSizesInsert_582137(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new size.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582139 = path.getOrDefault("profileId")
  valid_582139 = validateParameter(valid_582139, JString, required = true,
                                 default = nil)
  if valid_582139 != nil:
    section.add "profileId", valid_582139
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582140 = query.getOrDefault("key")
  valid_582140 = validateParameter(valid_582140, JString, required = false,
                                 default = nil)
  if valid_582140 != nil:
    section.add "key", valid_582140
  var valid_582141 = query.getOrDefault("prettyPrint")
  valid_582141 = validateParameter(valid_582141, JBool, required = false,
                                 default = newJBool(true))
  if valid_582141 != nil:
    section.add "prettyPrint", valid_582141
  var valid_582142 = query.getOrDefault("oauth_token")
  valid_582142 = validateParameter(valid_582142, JString, required = false,
                                 default = nil)
  if valid_582142 != nil:
    section.add "oauth_token", valid_582142
  var valid_582143 = query.getOrDefault("alt")
  valid_582143 = validateParameter(valid_582143, JString, required = false,
                                 default = newJString("json"))
  if valid_582143 != nil:
    section.add "alt", valid_582143
  var valid_582144 = query.getOrDefault("userIp")
  valid_582144 = validateParameter(valid_582144, JString, required = false,
                                 default = nil)
  if valid_582144 != nil:
    section.add "userIp", valid_582144
  var valid_582145 = query.getOrDefault("quotaUser")
  valid_582145 = validateParameter(valid_582145, JString, required = false,
                                 default = nil)
  if valid_582145 != nil:
    section.add "quotaUser", valid_582145
  var valid_582146 = query.getOrDefault("fields")
  valid_582146 = validateParameter(valid_582146, JString, required = false,
                                 default = nil)
  if valid_582146 != nil:
    section.add "fields", valid_582146
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582148: Call_DfareportingSizesInsert_582136; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new size.
  ## 
  let valid = call_582148.validator(path, query, header, formData, body)
  let scheme = call_582148.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582148.url(scheme.get, call_582148.host, call_582148.base,
                         call_582148.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582148, url, valid)

proc call*(call_582149: Call_DfareportingSizesInsert_582136; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingSizesInsert
  ## Inserts a new size.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582150 = newJObject()
  var query_582151 = newJObject()
  var body_582152 = newJObject()
  add(query_582151, "key", newJString(key))
  add(query_582151, "prettyPrint", newJBool(prettyPrint))
  add(query_582151, "oauth_token", newJString(oauthToken))
  add(path_582150, "profileId", newJString(profileId))
  add(query_582151, "alt", newJString(alt))
  add(query_582151, "userIp", newJString(userIp))
  add(query_582151, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_582152 = body
  add(query_582151, "fields", newJString(fields))
  result = call_582149.call(path_582150, query_582151, nil, nil, body_582152)

var dfareportingSizesInsert* = Call_DfareportingSizesInsert_582136(
    name: "dfareportingSizesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sizes",
    validator: validate_DfareportingSizesInsert_582137,
    base: "/dfareporting/v3.1", url: url_DfareportingSizesInsert_582138,
    schemes: {Scheme.Https})
type
  Call_DfareportingSizesList_582117 = ref object of OpenApiRestCall_578364
proc url_DfareportingSizesList_582119(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sizes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSizesList_582118(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of sizes, possibly filtered. Retrieved sizes are globally unique and may include values not currently in use by your account. Due to this, the list of sizes returned by this method may differ from the list seen in the Trafficking UI.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582120 = path.getOrDefault("profileId")
  valid_582120 = validateParameter(valid_582120, JString, required = true,
                                 default = nil)
  if valid_582120 != nil:
    section.add "profileId", valid_582120
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   height: JInt
  ##         : Select only sizes with this height.
  ##   iabStandard: JBool
  ##              : Select only IAB standard sizes.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   width: JInt
  ##        : Select only sizes with this width.
  ##   ids: JArray
  ##      : Select only sizes with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582121 = query.getOrDefault("key")
  valid_582121 = validateParameter(valid_582121, JString, required = false,
                                 default = nil)
  if valid_582121 != nil:
    section.add "key", valid_582121
  var valid_582122 = query.getOrDefault("prettyPrint")
  valid_582122 = validateParameter(valid_582122, JBool, required = false,
                                 default = newJBool(true))
  if valid_582122 != nil:
    section.add "prettyPrint", valid_582122
  var valid_582123 = query.getOrDefault("oauth_token")
  valid_582123 = validateParameter(valid_582123, JString, required = false,
                                 default = nil)
  if valid_582123 != nil:
    section.add "oauth_token", valid_582123
  var valid_582124 = query.getOrDefault("height")
  valid_582124 = validateParameter(valid_582124, JInt, required = false, default = nil)
  if valid_582124 != nil:
    section.add "height", valid_582124
  var valid_582125 = query.getOrDefault("iabStandard")
  valid_582125 = validateParameter(valid_582125, JBool, required = false, default = nil)
  if valid_582125 != nil:
    section.add "iabStandard", valid_582125
  var valid_582126 = query.getOrDefault("alt")
  valid_582126 = validateParameter(valid_582126, JString, required = false,
                                 default = newJString("json"))
  if valid_582126 != nil:
    section.add "alt", valid_582126
  var valid_582127 = query.getOrDefault("userIp")
  valid_582127 = validateParameter(valid_582127, JString, required = false,
                                 default = nil)
  if valid_582127 != nil:
    section.add "userIp", valid_582127
  var valid_582128 = query.getOrDefault("quotaUser")
  valid_582128 = validateParameter(valid_582128, JString, required = false,
                                 default = nil)
  if valid_582128 != nil:
    section.add "quotaUser", valid_582128
  var valid_582129 = query.getOrDefault("width")
  valid_582129 = validateParameter(valid_582129, JInt, required = false, default = nil)
  if valid_582129 != nil:
    section.add "width", valid_582129
  var valid_582130 = query.getOrDefault("ids")
  valid_582130 = validateParameter(valid_582130, JArray, required = false,
                                 default = nil)
  if valid_582130 != nil:
    section.add "ids", valid_582130
  var valid_582131 = query.getOrDefault("fields")
  valid_582131 = validateParameter(valid_582131, JString, required = false,
                                 default = nil)
  if valid_582131 != nil:
    section.add "fields", valid_582131
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582132: Call_DfareportingSizesList_582117; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of sizes, possibly filtered. Retrieved sizes are globally unique and may include values not currently in use by your account. Due to this, the list of sizes returned by this method may differ from the list seen in the Trafficking UI.
  ## 
  let valid = call_582132.validator(path, query, header, formData, body)
  let scheme = call_582132.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582132.url(scheme.get, call_582132.host, call_582132.base,
                         call_582132.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582132, url, valid)

proc call*(call_582133: Call_DfareportingSizesList_582117; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          height: int = 0; iabStandard: bool = false; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; width: int = 0; ids: JsonNode = nil;
          fields: string = ""): Recallable =
  ## dfareportingSizesList
  ## Retrieves a list of sizes, possibly filtered. Retrieved sizes are globally unique and may include values not currently in use by your account. Due to this, the list of sizes returned by this method may differ from the list seen in the Trafficking UI.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   height: int
  ##         : Select only sizes with this height.
  ##   iabStandard: bool
  ##              : Select only IAB standard sizes.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   width: int
  ##        : Select only sizes with this width.
  ##   ids: JArray
  ##      : Select only sizes with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582134 = newJObject()
  var query_582135 = newJObject()
  add(query_582135, "key", newJString(key))
  add(query_582135, "prettyPrint", newJBool(prettyPrint))
  add(query_582135, "oauth_token", newJString(oauthToken))
  add(query_582135, "height", newJInt(height))
  add(query_582135, "iabStandard", newJBool(iabStandard))
  add(path_582134, "profileId", newJString(profileId))
  add(query_582135, "alt", newJString(alt))
  add(query_582135, "userIp", newJString(userIp))
  add(query_582135, "quotaUser", newJString(quotaUser))
  add(query_582135, "width", newJInt(width))
  if ids != nil:
    query_582135.add "ids", ids
  add(query_582135, "fields", newJString(fields))
  result = call_582133.call(path_582134, query_582135, nil, nil, nil)

var dfareportingSizesList* = Call_DfareportingSizesList_582117(
    name: "dfareportingSizesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sizes",
    validator: validate_DfareportingSizesList_582118, base: "/dfareporting/v3.1",
    url: url_DfareportingSizesList_582119, schemes: {Scheme.Https})
type
  Call_DfareportingSizesGet_582153 = ref object of OpenApiRestCall_578364
proc url_DfareportingSizesGet_582155(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sizes/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSizesGet_582154(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one size by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Size ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582156 = path.getOrDefault("profileId")
  valid_582156 = validateParameter(valid_582156, JString, required = true,
                                 default = nil)
  if valid_582156 != nil:
    section.add "profileId", valid_582156
  var valid_582157 = path.getOrDefault("id")
  valid_582157 = validateParameter(valid_582157, JString, required = true,
                                 default = nil)
  if valid_582157 != nil:
    section.add "id", valid_582157
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582158 = query.getOrDefault("key")
  valid_582158 = validateParameter(valid_582158, JString, required = false,
                                 default = nil)
  if valid_582158 != nil:
    section.add "key", valid_582158
  var valid_582159 = query.getOrDefault("prettyPrint")
  valid_582159 = validateParameter(valid_582159, JBool, required = false,
                                 default = newJBool(true))
  if valid_582159 != nil:
    section.add "prettyPrint", valid_582159
  var valid_582160 = query.getOrDefault("oauth_token")
  valid_582160 = validateParameter(valid_582160, JString, required = false,
                                 default = nil)
  if valid_582160 != nil:
    section.add "oauth_token", valid_582160
  var valid_582161 = query.getOrDefault("alt")
  valid_582161 = validateParameter(valid_582161, JString, required = false,
                                 default = newJString("json"))
  if valid_582161 != nil:
    section.add "alt", valid_582161
  var valid_582162 = query.getOrDefault("userIp")
  valid_582162 = validateParameter(valid_582162, JString, required = false,
                                 default = nil)
  if valid_582162 != nil:
    section.add "userIp", valid_582162
  var valid_582163 = query.getOrDefault("quotaUser")
  valid_582163 = validateParameter(valid_582163, JString, required = false,
                                 default = nil)
  if valid_582163 != nil:
    section.add "quotaUser", valid_582163
  var valid_582164 = query.getOrDefault("fields")
  valid_582164 = validateParameter(valid_582164, JString, required = false,
                                 default = nil)
  if valid_582164 != nil:
    section.add "fields", valid_582164
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582165: Call_DfareportingSizesGet_582153; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one size by ID.
  ## 
  let valid = call_582165.validator(path, query, header, formData, body)
  let scheme = call_582165.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582165.url(scheme.get, call_582165.host, call_582165.base,
                         call_582165.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582165, url, valid)

proc call*(call_582166: Call_DfareportingSizesGet_582153; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingSizesGet
  ## Gets one size by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Size ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582167 = newJObject()
  var query_582168 = newJObject()
  add(query_582168, "key", newJString(key))
  add(query_582168, "prettyPrint", newJBool(prettyPrint))
  add(query_582168, "oauth_token", newJString(oauthToken))
  add(path_582167, "profileId", newJString(profileId))
  add(path_582167, "id", newJString(id))
  add(query_582168, "alt", newJString(alt))
  add(query_582168, "userIp", newJString(userIp))
  add(query_582168, "quotaUser", newJString(quotaUser))
  add(query_582168, "fields", newJString(fields))
  result = call_582166.call(path_582167, query_582168, nil, nil, nil)

var dfareportingSizesGet* = Call_DfareportingSizesGet_582153(
    name: "dfareportingSizesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sizes/{id}",
    validator: validate_DfareportingSizesGet_582154, base: "/dfareporting/v3.1",
    url: url_DfareportingSizesGet_582155, schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsUpdate_582190 = ref object of OpenApiRestCall_578364
proc url_DfareportingSubaccountsUpdate_582192(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsUpdate_582191(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing subaccount.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582193 = path.getOrDefault("profileId")
  valid_582193 = validateParameter(valid_582193, JString, required = true,
                                 default = nil)
  if valid_582193 != nil:
    section.add "profileId", valid_582193
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582194 = query.getOrDefault("key")
  valid_582194 = validateParameter(valid_582194, JString, required = false,
                                 default = nil)
  if valid_582194 != nil:
    section.add "key", valid_582194
  var valid_582195 = query.getOrDefault("prettyPrint")
  valid_582195 = validateParameter(valid_582195, JBool, required = false,
                                 default = newJBool(true))
  if valid_582195 != nil:
    section.add "prettyPrint", valid_582195
  var valid_582196 = query.getOrDefault("oauth_token")
  valid_582196 = validateParameter(valid_582196, JString, required = false,
                                 default = nil)
  if valid_582196 != nil:
    section.add "oauth_token", valid_582196
  var valid_582197 = query.getOrDefault("alt")
  valid_582197 = validateParameter(valid_582197, JString, required = false,
                                 default = newJString("json"))
  if valid_582197 != nil:
    section.add "alt", valid_582197
  var valid_582198 = query.getOrDefault("userIp")
  valid_582198 = validateParameter(valid_582198, JString, required = false,
                                 default = nil)
  if valid_582198 != nil:
    section.add "userIp", valid_582198
  var valid_582199 = query.getOrDefault("quotaUser")
  valid_582199 = validateParameter(valid_582199, JString, required = false,
                                 default = nil)
  if valid_582199 != nil:
    section.add "quotaUser", valid_582199
  var valid_582200 = query.getOrDefault("fields")
  valid_582200 = validateParameter(valid_582200, JString, required = false,
                                 default = nil)
  if valid_582200 != nil:
    section.add "fields", valid_582200
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582202: Call_DfareportingSubaccountsUpdate_582190; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing subaccount.
  ## 
  let valid = call_582202.validator(path, query, header, formData, body)
  let scheme = call_582202.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582202.url(scheme.get, call_582202.host, call_582202.base,
                         call_582202.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582202, url, valid)

proc call*(call_582203: Call_DfareportingSubaccountsUpdate_582190;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingSubaccountsUpdate
  ## Updates an existing subaccount.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582204 = newJObject()
  var query_582205 = newJObject()
  var body_582206 = newJObject()
  add(query_582205, "key", newJString(key))
  add(query_582205, "prettyPrint", newJBool(prettyPrint))
  add(query_582205, "oauth_token", newJString(oauthToken))
  add(path_582204, "profileId", newJString(profileId))
  add(query_582205, "alt", newJString(alt))
  add(query_582205, "userIp", newJString(userIp))
  add(query_582205, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_582206 = body
  add(query_582205, "fields", newJString(fields))
  result = call_582203.call(path_582204, query_582205, nil, nil, body_582206)

var dfareportingSubaccountsUpdate* = Call_DfareportingSubaccountsUpdate_582190(
    name: "dfareportingSubaccountsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/subaccounts",
    validator: validate_DfareportingSubaccountsUpdate_582191,
    base: "/dfareporting/v3.1", url: url_DfareportingSubaccountsUpdate_582192,
    schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsInsert_582207 = ref object of OpenApiRestCall_578364
proc url_DfareportingSubaccountsInsert_582209(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsInsert_582208(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new subaccount.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582210 = path.getOrDefault("profileId")
  valid_582210 = validateParameter(valid_582210, JString, required = true,
                                 default = nil)
  if valid_582210 != nil:
    section.add "profileId", valid_582210
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582211 = query.getOrDefault("key")
  valid_582211 = validateParameter(valid_582211, JString, required = false,
                                 default = nil)
  if valid_582211 != nil:
    section.add "key", valid_582211
  var valid_582212 = query.getOrDefault("prettyPrint")
  valid_582212 = validateParameter(valid_582212, JBool, required = false,
                                 default = newJBool(true))
  if valid_582212 != nil:
    section.add "prettyPrint", valid_582212
  var valid_582213 = query.getOrDefault("oauth_token")
  valid_582213 = validateParameter(valid_582213, JString, required = false,
                                 default = nil)
  if valid_582213 != nil:
    section.add "oauth_token", valid_582213
  var valid_582214 = query.getOrDefault("alt")
  valid_582214 = validateParameter(valid_582214, JString, required = false,
                                 default = newJString("json"))
  if valid_582214 != nil:
    section.add "alt", valid_582214
  var valid_582215 = query.getOrDefault("userIp")
  valid_582215 = validateParameter(valid_582215, JString, required = false,
                                 default = nil)
  if valid_582215 != nil:
    section.add "userIp", valid_582215
  var valid_582216 = query.getOrDefault("quotaUser")
  valid_582216 = validateParameter(valid_582216, JString, required = false,
                                 default = nil)
  if valid_582216 != nil:
    section.add "quotaUser", valid_582216
  var valid_582217 = query.getOrDefault("fields")
  valid_582217 = validateParameter(valid_582217, JString, required = false,
                                 default = nil)
  if valid_582217 != nil:
    section.add "fields", valid_582217
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582219: Call_DfareportingSubaccountsInsert_582207; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new subaccount.
  ## 
  let valid = call_582219.validator(path, query, header, formData, body)
  let scheme = call_582219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582219.url(scheme.get, call_582219.host, call_582219.base,
                         call_582219.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582219, url, valid)

proc call*(call_582220: Call_DfareportingSubaccountsInsert_582207;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingSubaccountsInsert
  ## Inserts a new subaccount.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582221 = newJObject()
  var query_582222 = newJObject()
  var body_582223 = newJObject()
  add(query_582222, "key", newJString(key))
  add(query_582222, "prettyPrint", newJBool(prettyPrint))
  add(query_582222, "oauth_token", newJString(oauthToken))
  add(path_582221, "profileId", newJString(profileId))
  add(query_582222, "alt", newJString(alt))
  add(query_582222, "userIp", newJString(userIp))
  add(query_582222, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_582223 = body
  add(query_582222, "fields", newJString(fields))
  result = call_582220.call(path_582221, query_582222, nil, nil, body_582223)

var dfareportingSubaccountsInsert* = Call_DfareportingSubaccountsInsert_582207(
    name: "dfareportingSubaccountsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/subaccounts",
    validator: validate_DfareportingSubaccountsInsert_582208,
    base: "/dfareporting/v3.1", url: url_DfareportingSubaccountsInsert_582209,
    schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsList_582169 = ref object of OpenApiRestCall_578364
proc url_DfareportingSubaccountsList_582171(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsList_582170(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of subaccounts, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582172 = path.getOrDefault("profileId")
  valid_582172 = validateParameter(valid_582172, JString, required = true,
                                 default = nil)
  if valid_582172 != nil:
    section.add "profileId", valid_582172
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "subaccount*2015" will return objects with names like "subaccount June 2015", "subaccount April 2015", or simply "subaccount 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "subaccount" will match objects with name "my subaccount", "subaccount 2015", or simply "subaccount".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only subaccounts with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_582173 = query.getOrDefault("key")
  valid_582173 = validateParameter(valid_582173, JString, required = false,
                                 default = nil)
  if valid_582173 != nil:
    section.add "key", valid_582173
  var valid_582174 = query.getOrDefault("prettyPrint")
  valid_582174 = validateParameter(valid_582174, JBool, required = false,
                                 default = newJBool(true))
  if valid_582174 != nil:
    section.add "prettyPrint", valid_582174
  var valid_582175 = query.getOrDefault("oauth_token")
  valid_582175 = validateParameter(valid_582175, JString, required = false,
                                 default = nil)
  if valid_582175 != nil:
    section.add "oauth_token", valid_582175
  var valid_582176 = query.getOrDefault("sortField")
  valid_582176 = validateParameter(valid_582176, JString, required = false,
                                 default = newJString("ID"))
  if valid_582176 != nil:
    section.add "sortField", valid_582176
  var valid_582177 = query.getOrDefault("alt")
  valid_582177 = validateParameter(valid_582177, JString, required = false,
                                 default = newJString("json"))
  if valid_582177 != nil:
    section.add "alt", valid_582177
  var valid_582178 = query.getOrDefault("userIp")
  valid_582178 = validateParameter(valid_582178, JString, required = false,
                                 default = nil)
  if valid_582178 != nil:
    section.add "userIp", valid_582178
  var valid_582179 = query.getOrDefault("quotaUser")
  valid_582179 = validateParameter(valid_582179, JString, required = false,
                                 default = nil)
  if valid_582179 != nil:
    section.add "quotaUser", valid_582179
  var valid_582180 = query.getOrDefault("pageToken")
  valid_582180 = validateParameter(valid_582180, JString, required = false,
                                 default = nil)
  if valid_582180 != nil:
    section.add "pageToken", valid_582180
  var valid_582181 = query.getOrDefault("searchString")
  valid_582181 = validateParameter(valid_582181, JString, required = false,
                                 default = nil)
  if valid_582181 != nil:
    section.add "searchString", valid_582181
  var valid_582182 = query.getOrDefault("sortOrder")
  valid_582182 = validateParameter(valid_582182, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_582182 != nil:
    section.add "sortOrder", valid_582182
  var valid_582183 = query.getOrDefault("ids")
  valid_582183 = validateParameter(valid_582183, JArray, required = false,
                                 default = nil)
  if valid_582183 != nil:
    section.add "ids", valid_582183
  var valid_582184 = query.getOrDefault("fields")
  valid_582184 = validateParameter(valid_582184, JString, required = false,
                                 default = nil)
  if valid_582184 != nil:
    section.add "fields", valid_582184
  var valid_582185 = query.getOrDefault("maxResults")
  valid_582185 = validateParameter(valid_582185, JInt, required = false,
                                 default = newJInt(1000))
  if valid_582185 != nil:
    section.add "maxResults", valid_582185
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582186: Call_DfareportingSubaccountsList_582169; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a list of subaccounts, possibly filtered. This method supports paging.
  ## 
  let valid = call_582186.validator(path, query, header, formData, body)
  let scheme = call_582186.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582186.url(scheme.get, call_582186.host, call_582186.base,
                         call_582186.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582186, url, valid)

proc call*(call_582187: Call_DfareportingSubaccountsList_582169; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          sortField: string = "ID"; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; pageToken: string = ""; searchString: string = "";
          sortOrder: string = "ASCENDING"; ids: JsonNode = nil; fields: string = "";
          maxResults: int = 1000): Recallable =
  ## dfareportingSubaccountsList
  ## Gets a list of subaccounts, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "subaccount*2015" will return objects with names like "subaccount June 2015", "subaccount April 2015", or simply "subaccount 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "subaccount" will match objects with name "my subaccount", "subaccount 2015", or simply "subaccount".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only subaccounts with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_582188 = newJObject()
  var query_582189 = newJObject()
  add(query_582189, "key", newJString(key))
  add(query_582189, "prettyPrint", newJBool(prettyPrint))
  add(query_582189, "oauth_token", newJString(oauthToken))
  add(path_582188, "profileId", newJString(profileId))
  add(query_582189, "sortField", newJString(sortField))
  add(query_582189, "alt", newJString(alt))
  add(query_582189, "userIp", newJString(userIp))
  add(query_582189, "quotaUser", newJString(quotaUser))
  add(query_582189, "pageToken", newJString(pageToken))
  add(query_582189, "searchString", newJString(searchString))
  add(query_582189, "sortOrder", newJString(sortOrder))
  if ids != nil:
    query_582189.add "ids", ids
  add(query_582189, "fields", newJString(fields))
  add(query_582189, "maxResults", newJInt(maxResults))
  result = call_582187.call(path_582188, query_582189, nil, nil, nil)

var dfareportingSubaccountsList* = Call_DfareportingSubaccountsList_582169(
    name: "dfareportingSubaccountsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/subaccounts",
    validator: validate_DfareportingSubaccountsList_582170,
    base: "/dfareporting/v3.1", url: url_DfareportingSubaccountsList_582171,
    schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsPatch_582224 = ref object of OpenApiRestCall_578364
proc url_DfareportingSubaccountsPatch_582226(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsPatch_582225(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing subaccount. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582227 = path.getOrDefault("profileId")
  valid_582227 = validateParameter(valid_582227, JString, required = true,
                                 default = nil)
  if valid_582227 != nil:
    section.add "profileId", valid_582227
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Subaccount ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582228 = query.getOrDefault("key")
  valid_582228 = validateParameter(valid_582228, JString, required = false,
                                 default = nil)
  if valid_582228 != nil:
    section.add "key", valid_582228
  var valid_582229 = query.getOrDefault("prettyPrint")
  valid_582229 = validateParameter(valid_582229, JBool, required = false,
                                 default = newJBool(true))
  if valid_582229 != nil:
    section.add "prettyPrint", valid_582229
  var valid_582230 = query.getOrDefault("oauth_token")
  valid_582230 = validateParameter(valid_582230, JString, required = false,
                                 default = nil)
  if valid_582230 != nil:
    section.add "oauth_token", valid_582230
  var valid_582231 = query.getOrDefault("alt")
  valid_582231 = validateParameter(valid_582231, JString, required = false,
                                 default = newJString("json"))
  if valid_582231 != nil:
    section.add "alt", valid_582231
  var valid_582232 = query.getOrDefault("userIp")
  valid_582232 = validateParameter(valid_582232, JString, required = false,
                                 default = nil)
  if valid_582232 != nil:
    section.add "userIp", valid_582232
  var valid_582233 = query.getOrDefault("quotaUser")
  valid_582233 = validateParameter(valid_582233, JString, required = false,
                                 default = nil)
  if valid_582233 != nil:
    section.add "quotaUser", valid_582233
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_582234 = query.getOrDefault("id")
  valid_582234 = validateParameter(valid_582234, JString, required = true,
                                 default = nil)
  if valid_582234 != nil:
    section.add "id", valid_582234
  var valid_582235 = query.getOrDefault("fields")
  valid_582235 = validateParameter(valid_582235, JString, required = false,
                                 default = nil)
  if valid_582235 != nil:
    section.add "fields", valid_582235
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582237: Call_DfareportingSubaccountsPatch_582224; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing subaccount. This method supports patch semantics.
  ## 
  let valid = call_582237.validator(path, query, header, formData, body)
  let scheme = call_582237.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582237.url(scheme.get, call_582237.host, call_582237.base,
                         call_582237.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582237, url, valid)

proc call*(call_582238: Call_DfareportingSubaccountsPatch_582224;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingSubaccountsPatch
  ## Updates an existing subaccount. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Subaccount ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582239 = newJObject()
  var query_582240 = newJObject()
  var body_582241 = newJObject()
  add(query_582240, "key", newJString(key))
  add(query_582240, "prettyPrint", newJBool(prettyPrint))
  add(query_582240, "oauth_token", newJString(oauthToken))
  add(path_582239, "profileId", newJString(profileId))
  add(query_582240, "alt", newJString(alt))
  add(query_582240, "userIp", newJString(userIp))
  add(query_582240, "quotaUser", newJString(quotaUser))
  add(query_582240, "id", newJString(id))
  if body != nil:
    body_582241 = body
  add(query_582240, "fields", newJString(fields))
  result = call_582238.call(path_582239, query_582240, nil, nil, body_582241)

var dfareportingSubaccountsPatch* = Call_DfareportingSubaccountsPatch_582224(
    name: "dfareportingSubaccountsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/subaccounts",
    validator: validate_DfareportingSubaccountsPatch_582225,
    base: "/dfareporting/v3.1", url: url_DfareportingSubaccountsPatch_582226,
    schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsGet_582242 = ref object of OpenApiRestCall_578364
proc url_DfareportingSubaccountsGet_582244(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsGet_582243(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one subaccount by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Subaccount ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582245 = path.getOrDefault("profileId")
  valid_582245 = validateParameter(valid_582245, JString, required = true,
                                 default = nil)
  if valid_582245 != nil:
    section.add "profileId", valid_582245
  var valid_582246 = path.getOrDefault("id")
  valid_582246 = validateParameter(valid_582246, JString, required = true,
                                 default = nil)
  if valid_582246 != nil:
    section.add "id", valid_582246
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582247 = query.getOrDefault("key")
  valid_582247 = validateParameter(valid_582247, JString, required = false,
                                 default = nil)
  if valid_582247 != nil:
    section.add "key", valid_582247
  var valid_582248 = query.getOrDefault("prettyPrint")
  valid_582248 = validateParameter(valid_582248, JBool, required = false,
                                 default = newJBool(true))
  if valid_582248 != nil:
    section.add "prettyPrint", valid_582248
  var valid_582249 = query.getOrDefault("oauth_token")
  valid_582249 = validateParameter(valid_582249, JString, required = false,
                                 default = nil)
  if valid_582249 != nil:
    section.add "oauth_token", valid_582249
  var valid_582250 = query.getOrDefault("alt")
  valid_582250 = validateParameter(valid_582250, JString, required = false,
                                 default = newJString("json"))
  if valid_582250 != nil:
    section.add "alt", valid_582250
  var valid_582251 = query.getOrDefault("userIp")
  valid_582251 = validateParameter(valid_582251, JString, required = false,
                                 default = nil)
  if valid_582251 != nil:
    section.add "userIp", valid_582251
  var valid_582252 = query.getOrDefault("quotaUser")
  valid_582252 = validateParameter(valid_582252, JString, required = false,
                                 default = nil)
  if valid_582252 != nil:
    section.add "quotaUser", valid_582252
  var valid_582253 = query.getOrDefault("fields")
  valid_582253 = validateParameter(valid_582253, JString, required = false,
                                 default = nil)
  if valid_582253 != nil:
    section.add "fields", valid_582253
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582254: Call_DfareportingSubaccountsGet_582242; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one subaccount by ID.
  ## 
  let valid = call_582254.validator(path, query, header, formData, body)
  let scheme = call_582254.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582254.url(scheme.get, call_582254.host, call_582254.base,
                         call_582254.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582254, url, valid)

proc call*(call_582255: Call_DfareportingSubaccountsGet_582242; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingSubaccountsGet
  ## Gets one subaccount by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Subaccount ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582256 = newJObject()
  var query_582257 = newJObject()
  add(query_582257, "key", newJString(key))
  add(query_582257, "prettyPrint", newJBool(prettyPrint))
  add(query_582257, "oauth_token", newJString(oauthToken))
  add(path_582256, "profileId", newJString(profileId))
  add(path_582256, "id", newJString(id))
  add(query_582257, "alt", newJString(alt))
  add(query_582257, "userIp", newJString(userIp))
  add(query_582257, "quotaUser", newJString(quotaUser))
  add(query_582257, "fields", newJString(fields))
  result = call_582255.call(path_582256, query_582257, nil, nil, nil)

var dfareportingSubaccountsGet* = Call_DfareportingSubaccountsGet_582242(
    name: "dfareportingSubaccountsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/subaccounts/{id}",
    validator: validate_DfareportingSubaccountsGet_582243,
    base: "/dfareporting/v3.1", url: url_DfareportingSubaccountsGet_582244,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetableRemarketingListsList_582258 = ref object of OpenApiRestCall_578364
proc url_DfareportingTargetableRemarketingListsList_582260(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetableRemarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetableRemarketingListsList_582259(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582261 = path.getOrDefault("profileId")
  valid_582261 = validateParameter(valid_582261, JString, required = true,
                                 default = nil)
  if valid_582261 != nil:
    section.add "profileId", valid_582261
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   name: JString
  ##       : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
  ##   active: JBool
  ##         : Select only active or only inactive targetable remarketing lists.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   advertiserId: JString (required)
  ##               : Select only targetable remarketing lists targetable by these advertisers.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_582262 = query.getOrDefault("key")
  valid_582262 = validateParameter(valid_582262, JString, required = false,
                                 default = nil)
  if valid_582262 != nil:
    section.add "key", valid_582262
  var valid_582263 = query.getOrDefault("prettyPrint")
  valid_582263 = validateParameter(valid_582263, JBool, required = false,
                                 default = newJBool(true))
  if valid_582263 != nil:
    section.add "prettyPrint", valid_582263
  var valid_582264 = query.getOrDefault("oauth_token")
  valid_582264 = validateParameter(valid_582264, JString, required = false,
                                 default = nil)
  if valid_582264 != nil:
    section.add "oauth_token", valid_582264
  var valid_582265 = query.getOrDefault("name")
  valid_582265 = validateParameter(valid_582265, JString, required = false,
                                 default = nil)
  if valid_582265 != nil:
    section.add "name", valid_582265
  var valid_582266 = query.getOrDefault("active")
  valid_582266 = validateParameter(valid_582266, JBool, required = false, default = nil)
  if valid_582266 != nil:
    section.add "active", valid_582266
  var valid_582267 = query.getOrDefault("sortField")
  valid_582267 = validateParameter(valid_582267, JString, required = false,
                                 default = newJString("ID"))
  if valid_582267 != nil:
    section.add "sortField", valid_582267
  var valid_582268 = query.getOrDefault("alt")
  valid_582268 = validateParameter(valid_582268, JString, required = false,
                                 default = newJString("json"))
  if valid_582268 != nil:
    section.add "alt", valid_582268
  var valid_582269 = query.getOrDefault("userIp")
  valid_582269 = validateParameter(valid_582269, JString, required = false,
                                 default = nil)
  if valid_582269 != nil:
    section.add "userIp", valid_582269
  var valid_582270 = query.getOrDefault("quotaUser")
  valid_582270 = validateParameter(valid_582270, JString, required = false,
                                 default = nil)
  if valid_582270 != nil:
    section.add "quotaUser", valid_582270
  var valid_582271 = query.getOrDefault("pageToken")
  valid_582271 = validateParameter(valid_582271, JString, required = false,
                                 default = nil)
  if valid_582271 != nil:
    section.add "pageToken", valid_582271
  var valid_582272 = query.getOrDefault("sortOrder")
  valid_582272 = validateParameter(valid_582272, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_582272 != nil:
    section.add "sortOrder", valid_582272
  assert query != nil,
        "query argument is necessary due to required `advertiserId` field"
  var valid_582273 = query.getOrDefault("advertiserId")
  valid_582273 = validateParameter(valid_582273, JString, required = true,
                                 default = nil)
  if valid_582273 != nil:
    section.add "advertiserId", valid_582273
  var valid_582274 = query.getOrDefault("fields")
  valid_582274 = validateParameter(valid_582274, JString, required = false,
                                 default = nil)
  if valid_582274 != nil:
    section.add "fields", valid_582274
  var valid_582275 = query.getOrDefault("maxResults")
  valid_582275 = validateParameter(valid_582275, JInt, required = false,
                                 default = newJInt(1000))
  if valid_582275 != nil:
    section.add "maxResults", valid_582275
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582276: Call_DfareportingTargetableRemarketingListsList_582258;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging.
  ## 
  let valid = call_582276.validator(path, query, header, formData, body)
  let scheme = call_582276.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582276.url(scheme.get, call_582276.host, call_582276.base,
                         call_582276.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582276, url, valid)

proc call*(call_582277: Call_DfareportingTargetableRemarketingListsList_582258;
          profileId: string; advertiserId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; name: string = "";
          active: bool = false; sortField: string = "ID"; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; pageToken: string = "";
          sortOrder: string = "ASCENDING"; fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingTargetableRemarketingListsList
  ## Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   name: string
  ##       : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
  ##   active: bool
  ##         : Select only active or only inactive targetable remarketing lists.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   advertiserId: string (required)
  ##               : Select only targetable remarketing lists targetable by these advertisers.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_582278 = newJObject()
  var query_582279 = newJObject()
  add(query_582279, "key", newJString(key))
  add(query_582279, "prettyPrint", newJBool(prettyPrint))
  add(query_582279, "oauth_token", newJString(oauthToken))
  add(query_582279, "name", newJString(name))
  add(query_582279, "active", newJBool(active))
  add(path_582278, "profileId", newJString(profileId))
  add(query_582279, "sortField", newJString(sortField))
  add(query_582279, "alt", newJString(alt))
  add(query_582279, "userIp", newJString(userIp))
  add(query_582279, "quotaUser", newJString(quotaUser))
  add(query_582279, "pageToken", newJString(pageToken))
  add(query_582279, "sortOrder", newJString(sortOrder))
  add(query_582279, "advertiserId", newJString(advertiserId))
  add(query_582279, "fields", newJString(fields))
  add(query_582279, "maxResults", newJInt(maxResults))
  result = call_582277.call(path_582278, query_582279, nil, nil, nil)

var dfareportingTargetableRemarketingListsList* = Call_DfareportingTargetableRemarketingListsList_582258(
    name: "dfareportingTargetableRemarketingListsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetableRemarketingLists",
    validator: validate_DfareportingTargetableRemarketingListsList_582259,
    base: "/dfareporting/v3.1",
    url: url_DfareportingTargetableRemarketingListsList_582260,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetableRemarketingListsGet_582280 = ref object of OpenApiRestCall_578364
proc url_DfareportingTargetableRemarketingListsGet_582282(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetableRemarketingLists/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetableRemarketingListsGet_582281(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one remarketing list by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Remarketing list ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582283 = path.getOrDefault("profileId")
  valid_582283 = validateParameter(valid_582283, JString, required = true,
                                 default = nil)
  if valid_582283 != nil:
    section.add "profileId", valid_582283
  var valid_582284 = path.getOrDefault("id")
  valid_582284 = validateParameter(valid_582284, JString, required = true,
                                 default = nil)
  if valid_582284 != nil:
    section.add "id", valid_582284
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582285 = query.getOrDefault("key")
  valid_582285 = validateParameter(valid_582285, JString, required = false,
                                 default = nil)
  if valid_582285 != nil:
    section.add "key", valid_582285
  var valid_582286 = query.getOrDefault("prettyPrint")
  valid_582286 = validateParameter(valid_582286, JBool, required = false,
                                 default = newJBool(true))
  if valid_582286 != nil:
    section.add "prettyPrint", valid_582286
  var valid_582287 = query.getOrDefault("oauth_token")
  valid_582287 = validateParameter(valid_582287, JString, required = false,
                                 default = nil)
  if valid_582287 != nil:
    section.add "oauth_token", valid_582287
  var valid_582288 = query.getOrDefault("alt")
  valid_582288 = validateParameter(valid_582288, JString, required = false,
                                 default = newJString("json"))
  if valid_582288 != nil:
    section.add "alt", valid_582288
  var valid_582289 = query.getOrDefault("userIp")
  valid_582289 = validateParameter(valid_582289, JString, required = false,
                                 default = nil)
  if valid_582289 != nil:
    section.add "userIp", valid_582289
  var valid_582290 = query.getOrDefault("quotaUser")
  valid_582290 = validateParameter(valid_582290, JString, required = false,
                                 default = nil)
  if valid_582290 != nil:
    section.add "quotaUser", valid_582290
  var valid_582291 = query.getOrDefault("fields")
  valid_582291 = validateParameter(valid_582291, JString, required = false,
                                 default = nil)
  if valid_582291 != nil:
    section.add "fields", valid_582291
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582292: Call_DfareportingTargetableRemarketingListsGet_582280;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one remarketing list by ID.
  ## 
  let valid = call_582292.validator(path, query, header, formData, body)
  let scheme = call_582292.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582292.url(scheme.get, call_582292.host, call_582292.base,
                         call_582292.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582292, url, valid)

proc call*(call_582293: Call_DfareportingTargetableRemarketingListsGet_582280;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingTargetableRemarketingListsGet
  ## Gets one remarketing list by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Remarketing list ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582294 = newJObject()
  var query_582295 = newJObject()
  add(query_582295, "key", newJString(key))
  add(query_582295, "prettyPrint", newJBool(prettyPrint))
  add(query_582295, "oauth_token", newJString(oauthToken))
  add(path_582294, "profileId", newJString(profileId))
  add(path_582294, "id", newJString(id))
  add(query_582295, "alt", newJString(alt))
  add(query_582295, "userIp", newJString(userIp))
  add(query_582295, "quotaUser", newJString(quotaUser))
  add(query_582295, "fields", newJString(fields))
  result = call_582293.call(path_582294, query_582295, nil, nil, nil)

var dfareportingTargetableRemarketingListsGet* = Call_DfareportingTargetableRemarketingListsGet_582280(
    name: "dfareportingTargetableRemarketingListsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetableRemarketingLists/{id}",
    validator: validate_DfareportingTargetableRemarketingListsGet_582281,
    base: "/dfareporting/v3.1",
    url: url_DfareportingTargetableRemarketingListsGet_582282,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesUpdate_582318 = ref object of OpenApiRestCall_578364
proc url_DfareportingTargetingTemplatesUpdate_582320(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesUpdate_582319(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing targeting template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582321 = path.getOrDefault("profileId")
  valid_582321 = validateParameter(valid_582321, JString, required = true,
                                 default = nil)
  if valid_582321 != nil:
    section.add "profileId", valid_582321
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582322 = query.getOrDefault("key")
  valid_582322 = validateParameter(valid_582322, JString, required = false,
                                 default = nil)
  if valid_582322 != nil:
    section.add "key", valid_582322
  var valid_582323 = query.getOrDefault("prettyPrint")
  valid_582323 = validateParameter(valid_582323, JBool, required = false,
                                 default = newJBool(true))
  if valid_582323 != nil:
    section.add "prettyPrint", valid_582323
  var valid_582324 = query.getOrDefault("oauth_token")
  valid_582324 = validateParameter(valid_582324, JString, required = false,
                                 default = nil)
  if valid_582324 != nil:
    section.add "oauth_token", valid_582324
  var valid_582325 = query.getOrDefault("alt")
  valid_582325 = validateParameter(valid_582325, JString, required = false,
                                 default = newJString("json"))
  if valid_582325 != nil:
    section.add "alt", valid_582325
  var valid_582326 = query.getOrDefault("userIp")
  valid_582326 = validateParameter(valid_582326, JString, required = false,
                                 default = nil)
  if valid_582326 != nil:
    section.add "userIp", valid_582326
  var valid_582327 = query.getOrDefault("quotaUser")
  valid_582327 = validateParameter(valid_582327, JString, required = false,
                                 default = nil)
  if valid_582327 != nil:
    section.add "quotaUser", valid_582327
  var valid_582328 = query.getOrDefault("fields")
  valid_582328 = validateParameter(valid_582328, JString, required = false,
                                 default = nil)
  if valid_582328 != nil:
    section.add "fields", valid_582328
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582330: Call_DfareportingTargetingTemplatesUpdate_582318;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing targeting template.
  ## 
  let valid = call_582330.validator(path, query, header, formData, body)
  let scheme = call_582330.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582330.url(scheme.get, call_582330.host, call_582330.base,
                         call_582330.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582330, url, valid)

proc call*(call_582331: Call_DfareportingTargetingTemplatesUpdate_582318;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingTargetingTemplatesUpdate
  ## Updates an existing targeting template.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582332 = newJObject()
  var query_582333 = newJObject()
  var body_582334 = newJObject()
  add(query_582333, "key", newJString(key))
  add(query_582333, "prettyPrint", newJBool(prettyPrint))
  add(query_582333, "oauth_token", newJString(oauthToken))
  add(path_582332, "profileId", newJString(profileId))
  add(query_582333, "alt", newJString(alt))
  add(query_582333, "userIp", newJString(userIp))
  add(query_582333, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_582334 = body
  add(query_582333, "fields", newJString(fields))
  result = call_582331.call(path_582332, query_582333, nil, nil, body_582334)

var dfareportingTargetingTemplatesUpdate* = Call_DfareportingTargetingTemplatesUpdate_582318(
    name: "dfareportingTargetingTemplatesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates",
    validator: validate_DfareportingTargetingTemplatesUpdate_582319,
    base: "/dfareporting/v3.1", url: url_DfareportingTargetingTemplatesUpdate_582320,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesInsert_582335 = ref object of OpenApiRestCall_578364
proc url_DfareportingTargetingTemplatesInsert_582337(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesInsert_582336(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new targeting template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582338 = path.getOrDefault("profileId")
  valid_582338 = validateParameter(valid_582338, JString, required = true,
                                 default = nil)
  if valid_582338 != nil:
    section.add "profileId", valid_582338
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582339 = query.getOrDefault("key")
  valid_582339 = validateParameter(valid_582339, JString, required = false,
                                 default = nil)
  if valid_582339 != nil:
    section.add "key", valid_582339
  var valid_582340 = query.getOrDefault("prettyPrint")
  valid_582340 = validateParameter(valid_582340, JBool, required = false,
                                 default = newJBool(true))
  if valid_582340 != nil:
    section.add "prettyPrint", valid_582340
  var valid_582341 = query.getOrDefault("oauth_token")
  valid_582341 = validateParameter(valid_582341, JString, required = false,
                                 default = nil)
  if valid_582341 != nil:
    section.add "oauth_token", valid_582341
  var valid_582342 = query.getOrDefault("alt")
  valid_582342 = validateParameter(valid_582342, JString, required = false,
                                 default = newJString("json"))
  if valid_582342 != nil:
    section.add "alt", valid_582342
  var valid_582343 = query.getOrDefault("userIp")
  valid_582343 = validateParameter(valid_582343, JString, required = false,
                                 default = nil)
  if valid_582343 != nil:
    section.add "userIp", valid_582343
  var valid_582344 = query.getOrDefault("quotaUser")
  valid_582344 = validateParameter(valid_582344, JString, required = false,
                                 default = nil)
  if valid_582344 != nil:
    section.add "quotaUser", valid_582344
  var valid_582345 = query.getOrDefault("fields")
  valid_582345 = validateParameter(valid_582345, JString, required = false,
                                 default = nil)
  if valid_582345 != nil:
    section.add "fields", valid_582345
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582347: Call_DfareportingTargetingTemplatesInsert_582335;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new targeting template.
  ## 
  let valid = call_582347.validator(path, query, header, formData, body)
  let scheme = call_582347.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582347.url(scheme.get, call_582347.host, call_582347.base,
                         call_582347.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582347, url, valid)

proc call*(call_582348: Call_DfareportingTargetingTemplatesInsert_582335;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingTargetingTemplatesInsert
  ## Inserts a new targeting template.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582349 = newJObject()
  var query_582350 = newJObject()
  var body_582351 = newJObject()
  add(query_582350, "key", newJString(key))
  add(query_582350, "prettyPrint", newJBool(prettyPrint))
  add(query_582350, "oauth_token", newJString(oauthToken))
  add(path_582349, "profileId", newJString(profileId))
  add(query_582350, "alt", newJString(alt))
  add(query_582350, "userIp", newJString(userIp))
  add(query_582350, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_582351 = body
  add(query_582350, "fields", newJString(fields))
  result = call_582348.call(path_582349, query_582350, nil, nil, body_582351)

var dfareportingTargetingTemplatesInsert* = Call_DfareportingTargetingTemplatesInsert_582335(
    name: "dfareportingTargetingTemplatesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates",
    validator: validate_DfareportingTargetingTemplatesInsert_582336,
    base: "/dfareporting/v3.1", url: url_DfareportingTargetingTemplatesInsert_582337,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesList_582296 = ref object of OpenApiRestCall_578364
proc url_DfareportingTargetingTemplatesList_582298(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesList_582297(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of targeting templates, optionally filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582299 = path.getOrDefault("profileId")
  valid_582299 = validateParameter(valid_582299, JString, required = true,
                                 default = nil)
  if valid_582299 != nil:
    section.add "profileId", valid_582299
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "template*2015" will return objects with names like "template June 2015", "template April 2015", or simply "template 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "template" will match objects with name "my template", "template 2015", or simply "template".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   advertiserId: JString
  ##               : Select only targeting templates with this advertiser ID.
  ##   ids: JArray
  ##      : Select only targeting templates with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_582300 = query.getOrDefault("key")
  valid_582300 = validateParameter(valid_582300, JString, required = false,
                                 default = nil)
  if valid_582300 != nil:
    section.add "key", valid_582300
  var valid_582301 = query.getOrDefault("prettyPrint")
  valid_582301 = validateParameter(valid_582301, JBool, required = false,
                                 default = newJBool(true))
  if valid_582301 != nil:
    section.add "prettyPrint", valid_582301
  var valid_582302 = query.getOrDefault("oauth_token")
  valid_582302 = validateParameter(valid_582302, JString, required = false,
                                 default = nil)
  if valid_582302 != nil:
    section.add "oauth_token", valid_582302
  var valid_582303 = query.getOrDefault("sortField")
  valid_582303 = validateParameter(valid_582303, JString, required = false,
                                 default = newJString("ID"))
  if valid_582303 != nil:
    section.add "sortField", valid_582303
  var valid_582304 = query.getOrDefault("alt")
  valid_582304 = validateParameter(valid_582304, JString, required = false,
                                 default = newJString("json"))
  if valid_582304 != nil:
    section.add "alt", valid_582304
  var valid_582305 = query.getOrDefault("userIp")
  valid_582305 = validateParameter(valid_582305, JString, required = false,
                                 default = nil)
  if valid_582305 != nil:
    section.add "userIp", valid_582305
  var valid_582306 = query.getOrDefault("quotaUser")
  valid_582306 = validateParameter(valid_582306, JString, required = false,
                                 default = nil)
  if valid_582306 != nil:
    section.add "quotaUser", valid_582306
  var valid_582307 = query.getOrDefault("pageToken")
  valid_582307 = validateParameter(valid_582307, JString, required = false,
                                 default = nil)
  if valid_582307 != nil:
    section.add "pageToken", valid_582307
  var valid_582308 = query.getOrDefault("searchString")
  valid_582308 = validateParameter(valid_582308, JString, required = false,
                                 default = nil)
  if valid_582308 != nil:
    section.add "searchString", valid_582308
  var valid_582309 = query.getOrDefault("sortOrder")
  valid_582309 = validateParameter(valid_582309, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_582309 != nil:
    section.add "sortOrder", valid_582309
  var valid_582310 = query.getOrDefault("advertiserId")
  valid_582310 = validateParameter(valid_582310, JString, required = false,
                                 default = nil)
  if valid_582310 != nil:
    section.add "advertiserId", valid_582310
  var valid_582311 = query.getOrDefault("ids")
  valid_582311 = validateParameter(valid_582311, JArray, required = false,
                                 default = nil)
  if valid_582311 != nil:
    section.add "ids", valid_582311
  var valid_582312 = query.getOrDefault("fields")
  valid_582312 = validateParameter(valid_582312, JString, required = false,
                                 default = nil)
  if valid_582312 != nil:
    section.add "fields", valid_582312
  var valid_582313 = query.getOrDefault("maxResults")
  valid_582313 = validateParameter(valid_582313, JInt, required = false,
                                 default = newJInt(1000))
  if valid_582313 != nil:
    section.add "maxResults", valid_582313
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582314: Call_DfareportingTargetingTemplatesList_582296;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of targeting templates, optionally filtered. This method supports paging.
  ## 
  let valid = call_582314.validator(path, query, header, formData, body)
  let scheme = call_582314.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582314.url(scheme.get, call_582314.host, call_582314.base,
                         call_582314.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582314, url, valid)

proc call*(call_582315: Call_DfareportingTargetingTemplatesList_582296;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; sortField: string = "ID"; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          advertiserId: string = ""; ids: JsonNode = nil; fields: string = "";
          maxResults: int = 1000): Recallable =
  ## dfareportingTargetingTemplatesList
  ## Retrieves a list of targeting templates, optionally filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "template*2015" will return objects with names like "template June 2015", "template April 2015", or simply "template 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "template" will match objects with name "my template", "template 2015", or simply "template".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   advertiserId: string
  ##               : Select only targeting templates with this advertiser ID.
  ##   ids: JArray
  ##      : Select only targeting templates with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_582316 = newJObject()
  var query_582317 = newJObject()
  add(query_582317, "key", newJString(key))
  add(query_582317, "prettyPrint", newJBool(prettyPrint))
  add(query_582317, "oauth_token", newJString(oauthToken))
  add(path_582316, "profileId", newJString(profileId))
  add(query_582317, "sortField", newJString(sortField))
  add(query_582317, "alt", newJString(alt))
  add(query_582317, "userIp", newJString(userIp))
  add(query_582317, "quotaUser", newJString(quotaUser))
  add(query_582317, "pageToken", newJString(pageToken))
  add(query_582317, "searchString", newJString(searchString))
  add(query_582317, "sortOrder", newJString(sortOrder))
  add(query_582317, "advertiserId", newJString(advertiserId))
  if ids != nil:
    query_582317.add "ids", ids
  add(query_582317, "fields", newJString(fields))
  add(query_582317, "maxResults", newJInt(maxResults))
  result = call_582315.call(path_582316, query_582317, nil, nil, nil)

var dfareportingTargetingTemplatesList* = Call_DfareportingTargetingTemplatesList_582296(
    name: "dfareportingTargetingTemplatesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates",
    validator: validate_DfareportingTargetingTemplatesList_582297,
    base: "/dfareporting/v3.1", url: url_DfareportingTargetingTemplatesList_582298,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesPatch_582352 = ref object of OpenApiRestCall_578364
proc url_DfareportingTargetingTemplatesPatch_582354(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesPatch_582353(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing targeting template. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582355 = path.getOrDefault("profileId")
  valid_582355 = validateParameter(valid_582355, JString, required = true,
                                 default = nil)
  if valid_582355 != nil:
    section.add "profileId", valid_582355
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Targeting template ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582356 = query.getOrDefault("key")
  valid_582356 = validateParameter(valid_582356, JString, required = false,
                                 default = nil)
  if valid_582356 != nil:
    section.add "key", valid_582356
  var valid_582357 = query.getOrDefault("prettyPrint")
  valid_582357 = validateParameter(valid_582357, JBool, required = false,
                                 default = newJBool(true))
  if valid_582357 != nil:
    section.add "prettyPrint", valid_582357
  var valid_582358 = query.getOrDefault("oauth_token")
  valid_582358 = validateParameter(valid_582358, JString, required = false,
                                 default = nil)
  if valid_582358 != nil:
    section.add "oauth_token", valid_582358
  var valid_582359 = query.getOrDefault("alt")
  valid_582359 = validateParameter(valid_582359, JString, required = false,
                                 default = newJString("json"))
  if valid_582359 != nil:
    section.add "alt", valid_582359
  var valid_582360 = query.getOrDefault("userIp")
  valid_582360 = validateParameter(valid_582360, JString, required = false,
                                 default = nil)
  if valid_582360 != nil:
    section.add "userIp", valid_582360
  var valid_582361 = query.getOrDefault("quotaUser")
  valid_582361 = validateParameter(valid_582361, JString, required = false,
                                 default = nil)
  if valid_582361 != nil:
    section.add "quotaUser", valid_582361
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_582362 = query.getOrDefault("id")
  valid_582362 = validateParameter(valid_582362, JString, required = true,
                                 default = nil)
  if valid_582362 != nil:
    section.add "id", valid_582362
  var valid_582363 = query.getOrDefault("fields")
  valid_582363 = validateParameter(valid_582363, JString, required = false,
                                 default = nil)
  if valid_582363 != nil:
    section.add "fields", valid_582363
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582365: Call_DfareportingTargetingTemplatesPatch_582352;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing targeting template. This method supports patch semantics.
  ## 
  let valid = call_582365.validator(path, query, header, formData, body)
  let scheme = call_582365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582365.url(scheme.get, call_582365.host, call_582365.base,
                         call_582365.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582365, url, valid)

proc call*(call_582366: Call_DfareportingTargetingTemplatesPatch_582352;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingTargetingTemplatesPatch
  ## Updates an existing targeting template. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Targeting template ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582367 = newJObject()
  var query_582368 = newJObject()
  var body_582369 = newJObject()
  add(query_582368, "key", newJString(key))
  add(query_582368, "prettyPrint", newJBool(prettyPrint))
  add(query_582368, "oauth_token", newJString(oauthToken))
  add(path_582367, "profileId", newJString(profileId))
  add(query_582368, "alt", newJString(alt))
  add(query_582368, "userIp", newJString(userIp))
  add(query_582368, "quotaUser", newJString(quotaUser))
  add(query_582368, "id", newJString(id))
  if body != nil:
    body_582369 = body
  add(query_582368, "fields", newJString(fields))
  result = call_582366.call(path_582367, query_582368, nil, nil, body_582369)

var dfareportingTargetingTemplatesPatch* = Call_DfareportingTargetingTemplatesPatch_582352(
    name: "dfareportingTargetingTemplatesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates",
    validator: validate_DfareportingTargetingTemplatesPatch_582353,
    base: "/dfareporting/v3.1", url: url_DfareportingTargetingTemplatesPatch_582354,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesGet_582370 = ref object of OpenApiRestCall_578364
proc url_DfareportingTargetingTemplatesGet_582372(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesGet_582371(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one targeting template by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Targeting template ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582373 = path.getOrDefault("profileId")
  valid_582373 = validateParameter(valid_582373, JString, required = true,
                                 default = nil)
  if valid_582373 != nil:
    section.add "profileId", valid_582373
  var valid_582374 = path.getOrDefault("id")
  valid_582374 = validateParameter(valid_582374, JString, required = true,
                                 default = nil)
  if valid_582374 != nil:
    section.add "id", valid_582374
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582375 = query.getOrDefault("key")
  valid_582375 = validateParameter(valid_582375, JString, required = false,
                                 default = nil)
  if valid_582375 != nil:
    section.add "key", valid_582375
  var valid_582376 = query.getOrDefault("prettyPrint")
  valid_582376 = validateParameter(valid_582376, JBool, required = false,
                                 default = newJBool(true))
  if valid_582376 != nil:
    section.add "prettyPrint", valid_582376
  var valid_582377 = query.getOrDefault("oauth_token")
  valid_582377 = validateParameter(valid_582377, JString, required = false,
                                 default = nil)
  if valid_582377 != nil:
    section.add "oauth_token", valid_582377
  var valid_582378 = query.getOrDefault("alt")
  valid_582378 = validateParameter(valid_582378, JString, required = false,
                                 default = newJString("json"))
  if valid_582378 != nil:
    section.add "alt", valid_582378
  var valid_582379 = query.getOrDefault("userIp")
  valid_582379 = validateParameter(valid_582379, JString, required = false,
                                 default = nil)
  if valid_582379 != nil:
    section.add "userIp", valid_582379
  var valid_582380 = query.getOrDefault("quotaUser")
  valid_582380 = validateParameter(valid_582380, JString, required = false,
                                 default = nil)
  if valid_582380 != nil:
    section.add "quotaUser", valid_582380
  var valid_582381 = query.getOrDefault("fields")
  valid_582381 = validateParameter(valid_582381, JString, required = false,
                                 default = nil)
  if valid_582381 != nil:
    section.add "fields", valid_582381
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582382: Call_DfareportingTargetingTemplatesGet_582370;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one targeting template by ID.
  ## 
  let valid = call_582382.validator(path, query, header, formData, body)
  let scheme = call_582382.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582382.url(scheme.get, call_582382.host, call_582382.base,
                         call_582382.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582382, url, valid)

proc call*(call_582383: Call_DfareportingTargetingTemplatesGet_582370;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingTargetingTemplatesGet
  ## Gets one targeting template by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Targeting template ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582384 = newJObject()
  var query_582385 = newJObject()
  add(query_582385, "key", newJString(key))
  add(query_582385, "prettyPrint", newJBool(prettyPrint))
  add(query_582385, "oauth_token", newJString(oauthToken))
  add(path_582384, "profileId", newJString(profileId))
  add(path_582384, "id", newJString(id))
  add(query_582385, "alt", newJString(alt))
  add(query_582385, "userIp", newJString(userIp))
  add(query_582385, "quotaUser", newJString(quotaUser))
  add(query_582385, "fields", newJString(fields))
  result = call_582383.call(path_582384, query_582385, nil, nil, nil)

var dfareportingTargetingTemplatesGet* = Call_DfareportingTargetingTemplatesGet_582370(
    name: "dfareportingTargetingTemplatesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates/{id}",
    validator: validate_DfareportingTargetingTemplatesGet_582371,
    base: "/dfareporting/v3.1", url: url_DfareportingTargetingTemplatesGet_582372,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolePermissionGroupsList_582386 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserRolePermissionGroupsList_582388(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRolePermissionGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolePermissionGroupsList_582387(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of all supported user role permission groups.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582389 = path.getOrDefault("profileId")
  valid_582389 = validateParameter(valid_582389, JString, required = true,
                                 default = nil)
  if valid_582389 != nil:
    section.add "profileId", valid_582389
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582390 = query.getOrDefault("key")
  valid_582390 = validateParameter(valid_582390, JString, required = false,
                                 default = nil)
  if valid_582390 != nil:
    section.add "key", valid_582390
  var valid_582391 = query.getOrDefault("prettyPrint")
  valid_582391 = validateParameter(valid_582391, JBool, required = false,
                                 default = newJBool(true))
  if valid_582391 != nil:
    section.add "prettyPrint", valid_582391
  var valid_582392 = query.getOrDefault("oauth_token")
  valid_582392 = validateParameter(valid_582392, JString, required = false,
                                 default = nil)
  if valid_582392 != nil:
    section.add "oauth_token", valid_582392
  var valid_582393 = query.getOrDefault("alt")
  valid_582393 = validateParameter(valid_582393, JString, required = false,
                                 default = newJString("json"))
  if valid_582393 != nil:
    section.add "alt", valid_582393
  var valid_582394 = query.getOrDefault("userIp")
  valid_582394 = validateParameter(valid_582394, JString, required = false,
                                 default = nil)
  if valid_582394 != nil:
    section.add "userIp", valid_582394
  var valid_582395 = query.getOrDefault("quotaUser")
  valid_582395 = validateParameter(valid_582395, JString, required = false,
                                 default = nil)
  if valid_582395 != nil:
    section.add "quotaUser", valid_582395
  var valid_582396 = query.getOrDefault("fields")
  valid_582396 = validateParameter(valid_582396, JString, required = false,
                                 default = nil)
  if valid_582396 != nil:
    section.add "fields", valid_582396
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582397: Call_DfareportingUserRolePermissionGroupsList_582386;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of all supported user role permission groups.
  ## 
  let valid = call_582397.validator(path, query, header, formData, body)
  let scheme = call_582397.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582397.url(scheme.get, call_582397.host, call_582397.base,
                         call_582397.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582397, url, valid)

proc call*(call_582398: Call_DfareportingUserRolePermissionGroupsList_582386;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingUserRolePermissionGroupsList
  ## Gets a list of all supported user role permission groups.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582399 = newJObject()
  var query_582400 = newJObject()
  add(query_582400, "key", newJString(key))
  add(query_582400, "prettyPrint", newJBool(prettyPrint))
  add(query_582400, "oauth_token", newJString(oauthToken))
  add(path_582399, "profileId", newJString(profileId))
  add(query_582400, "alt", newJString(alt))
  add(query_582400, "userIp", newJString(userIp))
  add(query_582400, "quotaUser", newJString(quotaUser))
  add(query_582400, "fields", newJString(fields))
  result = call_582398.call(path_582399, query_582400, nil, nil, nil)

var dfareportingUserRolePermissionGroupsList* = Call_DfareportingUserRolePermissionGroupsList_582386(
    name: "dfareportingUserRolePermissionGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/userRolePermissionGroups",
    validator: validate_DfareportingUserRolePermissionGroupsList_582387,
    base: "/dfareporting/v3.1", url: url_DfareportingUserRolePermissionGroupsList_582388,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolePermissionGroupsGet_582401 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserRolePermissionGroupsGet_582403(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRolePermissionGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolePermissionGroupsGet_582402(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one user role permission group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User role permission group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582404 = path.getOrDefault("profileId")
  valid_582404 = validateParameter(valid_582404, JString, required = true,
                                 default = nil)
  if valid_582404 != nil:
    section.add "profileId", valid_582404
  var valid_582405 = path.getOrDefault("id")
  valid_582405 = validateParameter(valid_582405, JString, required = true,
                                 default = nil)
  if valid_582405 != nil:
    section.add "id", valid_582405
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582406 = query.getOrDefault("key")
  valid_582406 = validateParameter(valid_582406, JString, required = false,
                                 default = nil)
  if valid_582406 != nil:
    section.add "key", valid_582406
  var valid_582407 = query.getOrDefault("prettyPrint")
  valid_582407 = validateParameter(valid_582407, JBool, required = false,
                                 default = newJBool(true))
  if valid_582407 != nil:
    section.add "prettyPrint", valid_582407
  var valid_582408 = query.getOrDefault("oauth_token")
  valid_582408 = validateParameter(valid_582408, JString, required = false,
                                 default = nil)
  if valid_582408 != nil:
    section.add "oauth_token", valid_582408
  var valid_582409 = query.getOrDefault("alt")
  valid_582409 = validateParameter(valid_582409, JString, required = false,
                                 default = newJString("json"))
  if valid_582409 != nil:
    section.add "alt", valid_582409
  var valid_582410 = query.getOrDefault("userIp")
  valid_582410 = validateParameter(valid_582410, JString, required = false,
                                 default = nil)
  if valid_582410 != nil:
    section.add "userIp", valid_582410
  var valid_582411 = query.getOrDefault("quotaUser")
  valid_582411 = validateParameter(valid_582411, JString, required = false,
                                 default = nil)
  if valid_582411 != nil:
    section.add "quotaUser", valid_582411
  var valid_582412 = query.getOrDefault("fields")
  valid_582412 = validateParameter(valid_582412, JString, required = false,
                                 default = nil)
  if valid_582412 != nil:
    section.add "fields", valid_582412
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582413: Call_DfareportingUserRolePermissionGroupsGet_582401;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one user role permission group by ID.
  ## 
  let valid = call_582413.validator(path, query, header, formData, body)
  let scheme = call_582413.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582413.url(scheme.get, call_582413.host, call_582413.base,
                         call_582413.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582413, url, valid)

proc call*(call_582414: Call_DfareportingUserRolePermissionGroupsGet_582401;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingUserRolePermissionGroupsGet
  ## Gets one user role permission group by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : User role permission group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582415 = newJObject()
  var query_582416 = newJObject()
  add(query_582416, "key", newJString(key))
  add(query_582416, "prettyPrint", newJBool(prettyPrint))
  add(query_582416, "oauth_token", newJString(oauthToken))
  add(path_582415, "profileId", newJString(profileId))
  add(path_582415, "id", newJString(id))
  add(query_582416, "alt", newJString(alt))
  add(query_582416, "userIp", newJString(userIp))
  add(query_582416, "quotaUser", newJString(quotaUser))
  add(query_582416, "fields", newJString(fields))
  result = call_582414.call(path_582415, query_582416, nil, nil, nil)

var dfareportingUserRolePermissionGroupsGet* = Call_DfareportingUserRolePermissionGroupsGet_582401(
    name: "dfareportingUserRolePermissionGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/userRolePermissionGroups/{id}",
    validator: validate_DfareportingUserRolePermissionGroupsGet_582402,
    base: "/dfareporting/v3.1", url: url_DfareportingUserRolePermissionGroupsGet_582403,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolePermissionsList_582417 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserRolePermissionsList_582419(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRolePermissions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolePermissionsList_582418(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of user role permissions, possibly filtered.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582420 = path.getOrDefault("profileId")
  valid_582420 = validateParameter(valid_582420, JString, required = true,
                                 default = nil)
  if valid_582420 != nil:
    section.add "profileId", valid_582420
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   ids: JArray
  ##      : Select only user role permissions with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582421 = query.getOrDefault("key")
  valid_582421 = validateParameter(valid_582421, JString, required = false,
                                 default = nil)
  if valid_582421 != nil:
    section.add "key", valid_582421
  var valid_582422 = query.getOrDefault("prettyPrint")
  valid_582422 = validateParameter(valid_582422, JBool, required = false,
                                 default = newJBool(true))
  if valid_582422 != nil:
    section.add "prettyPrint", valid_582422
  var valid_582423 = query.getOrDefault("oauth_token")
  valid_582423 = validateParameter(valid_582423, JString, required = false,
                                 default = nil)
  if valid_582423 != nil:
    section.add "oauth_token", valid_582423
  var valid_582424 = query.getOrDefault("alt")
  valid_582424 = validateParameter(valid_582424, JString, required = false,
                                 default = newJString("json"))
  if valid_582424 != nil:
    section.add "alt", valid_582424
  var valid_582425 = query.getOrDefault("userIp")
  valid_582425 = validateParameter(valid_582425, JString, required = false,
                                 default = nil)
  if valid_582425 != nil:
    section.add "userIp", valid_582425
  var valid_582426 = query.getOrDefault("quotaUser")
  valid_582426 = validateParameter(valid_582426, JString, required = false,
                                 default = nil)
  if valid_582426 != nil:
    section.add "quotaUser", valid_582426
  var valid_582427 = query.getOrDefault("ids")
  valid_582427 = validateParameter(valid_582427, JArray, required = false,
                                 default = nil)
  if valid_582427 != nil:
    section.add "ids", valid_582427
  var valid_582428 = query.getOrDefault("fields")
  valid_582428 = validateParameter(valid_582428, JString, required = false,
                                 default = nil)
  if valid_582428 != nil:
    section.add "fields", valid_582428
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582429: Call_DfareportingUserRolePermissionsList_582417;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of user role permissions, possibly filtered.
  ## 
  let valid = call_582429.validator(path, query, header, formData, body)
  let scheme = call_582429.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582429.url(scheme.get, call_582429.host, call_582429.base,
                         call_582429.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582429, url, valid)

proc call*(call_582430: Call_DfareportingUserRolePermissionsList_582417;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; ids: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingUserRolePermissionsList
  ## Gets a list of user role permissions, possibly filtered.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   ids: JArray
  ##      : Select only user role permissions with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582431 = newJObject()
  var query_582432 = newJObject()
  add(query_582432, "key", newJString(key))
  add(query_582432, "prettyPrint", newJBool(prettyPrint))
  add(query_582432, "oauth_token", newJString(oauthToken))
  add(path_582431, "profileId", newJString(profileId))
  add(query_582432, "alt", newJString(alt))
  add(query_582432, "userIp", newJString(userIp))
  add(query_582432, "quotaUser", newJString(quotaUser))
  if ids != nil:
    query_582432.add "ids", ids
  add(query_582432, "fields", newJString(fields))
  result = call_582430.call(path_582431, query_582432, nil, nil, nil)

var dfareportingUserRolePermissionsList* = Call_DfareportingUserRolePermissionsList_582417(
    name: "dfareportingUserRolePermissionsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/userRolePermissions",
    validator: validate_DfareportingUserRolePermissionsList_582418,
    base: "/dfareporting/v3.1", url: url_DfareportingUserRolePermissionsList_582419,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolePermissionsGet_582433 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserRolePermissionsGet_582435(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRolePermissions/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolePermissionsGet_582434(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one user role permission by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User role permission ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582436 = path.getOrDefault("profileId")
  valid_582436 = validateParameter(valid_582436, JString, required = true,
                                 default = nil)
  if valid_582436 != nil:
    section.add "profileId", valid_582436
  var valid_582437 = path.getOrDefault("id")
  valid_582437 = validateParameter(valid_582437, JString, required = true,
                                 default = nil)
  if valid_582437 != nil:
    section.add "id", valid_582437
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582438 = query.getOrDefault("key")
  valid_582438 = validateParameter(valid_582438, JString, required = false,
                                 default = nil)
  if valid_582438 != nil:
    section.add "key", valid_582438
  var valid_582439 = query.getOrDefault("prettyPrint")
  valid_582439 = validateParameter(valid_582439, JBool, required = false,
                                 default = newJBool(true))
  if valid_582439 != nil:
    section.add "prettyPrint", valid_582439
  var valid_582440 = query.getOrDefault("oauth_token")
  valid_582440 = validateParameter(valid_582440, JString, required = false,
                                 default = nil)
  if valid_582440 != nil:
    section.add "oauth_token", valid_582440
  var valid_582441 = query.getOrDefault("alt")
  valid_582441 = validateParameter(valid_582441, JString, required = false,
                                 default = newJString("json"))
  if valid_582441 != nil:
    section.add "alt", valid_582441
  var valid_582442 = query.getOrDefault("userIp")
  valid_582442 = validateParameter(valid_582442, JString, required = false,
                                 default = nil)
  if valid_582442 != nil:
    section.add "userIp", valid_582442
  var valid_582443 = query.getOrDefault("quotaUser")
  valid_582443 = validateParameter(valid_582443, JString, required = false,
                                 default = nil)
  if valid_582443 != nil:
    section.add "quotaUser", valid_582443
  var valid_582444 = query.getOrDefault("fields")
  valid_582444 = validateParameter(valid_582444, JString, required = false,
                                 default = nil)
  if valid_582444 != nil:
    section.add "fields", valid_582444
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582445: Call_DfareportingUserRolePermissionsGet_582433;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one user role permission by ID.
  ## 
  let valid = call_582445.validator(path, query, header, formData, body)
  let scheme = call_582445.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582445.url(scheme.get, call_582445.host, call_582445.base,
                         call_582445.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582445, url, valid)

proc call*(call_582446: Call_DfareportingUserRolePermissionsGet_582433;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingUserRolePermissionsGet
  ## Gets one user role permission by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : User role permission ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582447 = newJObject()
  var query_582448 = newJObject()
  add(query_582448, "key", newJString(key))
  add(query_582448, "prettyPrint", newJBool(prettyPrint))
  add(query_582448, "oauth_token", newJString(oauthToken))
  add(path_582447, "profileId", newJString(profileId))
  add(path_582447, "id", newJString(id))
  add(query_582448, "alt", newJString(alt))
  add(query_582448, "userIp", newJString(userIp))
  add(query_582448, "quotaUser", newJString(quotaUser))
  add(query_582448, "fields", newJString(fields))
  result = call_582446.call(path_582447, query_582448, nil, nil, nil)

var dfareportingUserRolePermissionsGet* = Call_DfareportingUserRolePermissionsGet_582433(
    name: "dfareportingUserRolePermissionsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/userRolePermissions/{id}",
    validator: validate_DfareportingUserRolePermissionsGet_582434,
    base: "/dfareporting/v3.1", url: url_DfareportingUserRolePermissionsGet_582435,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesUpdate_582472 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserRolesUpdate_582474(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesUpdate_582473(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing user role.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582475 = path.getOrDefault("profileId")
  valid_582475 = validateParameter(valid_582475, JString, required = true,
                                 default = nil)
  if valid_582475 != nil:
    section.add "profileId", valid_582475
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582476 = query.getOrDefault("key")
  valid_582476 = validateParameter(valid_582476, JString, required = false,
                                 default = nil)
  if valid_582476 != nil:
    section.add "key", valid_582476
  var valid_582477 = query.getOrDefault("prettyPrint")
  valid_582477 = validateParameter(valid_582477, JBool, required = false,
                                 default = newJBool(true))
  if valid_582477 != nil:
    section.add "prettyPrint", valid_582477
  var valid_582478 = query.getOrDefault("oauth_token")
  valid_582478 = validateParameter(valid_582478, JString, required = false,
                                 default = nil)
  if valid_582478 != nil:
    section.add "oauth_token", valid_582478
  var valid_582479 = query.getOrDefault("alt")
  valid_582479 = validateParameter(valid_582479, JString, required = false,
                                 default = newJString("json"))
  if valid_582479 != nil:
    section.add "alt", valid_582479
  var valid_582480 = query.getOrDefault("userIp")
  valid_582480 = validateParameter(valid_582480, JString, required = false,
                                 default = nil)
  if valid_582480 != nil:
    section.add "userIp", valid_582480
  var valid_582481 = query.getOrDefault("quotaUser")
  valid_582481 = validateParameter(valid_582481, JString, required = false,
                                 default = nil)
  if valid_582481 != nil:
    section.add "quotaUser", valid_582481
  var valid_582482 = query.getOrDefault("fields")
  valid_582482 = validateParameter(valid_582482, JString, required = false,
                                 default = nil)
  if valid_582482 != nil:
    section.add "fields", valid_582482
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582484: Call_DfareportingUserRolesUpdate_582472; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing user role.
  ## 
  let valid = call_582484.validator(path, query, header, formData, body)
  let scheme = call_582484.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582484.url(scheme.get, call_582484.host, call_582484.base,
                         call_582484.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582484, url, valid)

proc call*(call_582485: Call_DfareportingUserRolesUpdate_582472; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingUserRolesUpdate
  ## Updates an existing user role.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582486 = newJObject()
  var query_582487 = newJObject()
  var body_582488 = newJObject()
  add(query_582487, "key", newJString(key))
  add(query_582487, "prettyPrint", newJBool(prettyPrint))
  add(query_582487, "oauth_token", newJString(oauthToken))
  add(path_582486, "profileId", newJString(profileId))
  add(query_582487, "alt", newJString(alt))
  add(query_582487, "userIp", newJString(userIp))
  add(query_582487, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_582488 = body
  add(query_582487, "fields", newJString(fields))
  result = call_582485.call(path_582486, query_582487, nil, nil, body_582488)

var dfareportingUserRolesUpdate* = Call_DfareportingUserRolesUpdate_582472(
    name: "dfareportingUserRolesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles",
    validator: validate_DfareportingUserRolesUpdate_582473,
    base: "/dfareporting/v3.1", url: url_DfareportingUserRolesUpdate_582474,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesInsert_582489 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserRolesInsert_582491(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesInsert_582490(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new user role.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582492 = path.getOrDefault("profileId")
  valid_582492 = validateParameter(valid_582492, JString, required = true,
                                 default = nil)
  if valid_582492 != nil:
    section.add "profileId", valid_582492
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582493 = query.getOrDefault("key")
  valid_582493 = validateParameter(valid_582493, JString, required = false,
                                 default = nil)
  if valid_582493 != nil:
    section.add "key", valid_582493
  var valid_582494 = query.getOrDefault("prettyPrint")
  valid_582494 = validateParameter(valid_582494, JBool, required = false,
                                 default = newJBool(true))
  if valid_582494 != nil:
    section.add "prettyPrint", valid_582494
  var valid_582495 = query.getOrDefault("oauth_token")
  valid_582495 = validateParameter(valid_582495, JString, required = false,
                                 default = nil)
  if valid_582495 != nil:
    section.add "oauth_token", valid_582495
  var valid_582496 = query.getOrDefault("alt")
  valid_582496 = validateParameter(valid_582496, JString, required = false,
                                 default = newJString("json"))
  if valid_582496 != nil:
    section.add "alt", valid_582496
  var valid_582497 = query.getOrDefault("userIp")
  valid_582497 = validateParameter(valid_582497, JString, required = false,
                                 default = nil)
  if valid_582497 != nil:
    section.add "userIp", valid_582497
  var valid_582498 = query.getOrDefault("quotaUser")
  valid_582498 = validateParameter(valid_582498, JString, required = false,
                                 default = nil)
  if valid_582498 != nil:
    section.add "quotaUser", valid_582498
  var valid_582499 = query.getOrDefault("fields")
  valid_582499 = validateParameter(valid_582499, JString, required = false,
                                 default = nil)
  if valid_582499 != nil:
    section.add "fields", valid_582499
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582501: Call_DfareportingUserRolesInsert_582489; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new user role.
  ## 
  let valid = call_582501.validator(path, query, header, formData, body)
  let scheme = call_582501.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582501.url(scheme.get, call_582501.host, call_582501.base,
                         call_582501.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582501, url, valid)

proc call*(call_582502: Call_DfareportingUserRolesInsert_582489; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingUserRolesInsert
  ## Inserts a new user role.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582503 = newJObject()
  var query_582504 = newJObject()
  var body_582505 = newJObject()
  add(query_582504, "key", newJString(key))
  add(query_582504, "prettyPrint", newJBool(prettyPrint))
  add(query_582504, "oauth_token", newJString(oauthToken))
  add(path_582503, "profileId", newJString(profileId))
  add(query_582504, "alt", newJString(alt))
  add(query_582504, "userIp", newJString(userIp))
  add(query_582504, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_582505 = body
  add(query_582504, "fields", newJString(fields))
  result = call_582502.call(path_582503, query_582504, nil, nil, body_582505)

var dfareportingUserRolesInsert* = Call_DfareportingUserRolesInsert_582489(
    name: "dfareportingUserRolesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles",
    validator: validate_DfareportingUserRolesInsert_582490,
    base: "/dfareporting/v3.1", url: url_DfareportingUserRolesInsert_582491,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesList_582449 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserRolesList_582451(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesList_582450(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of user roles, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582452 = path.getOrDefault("profileId")
  valid_582452 = validateParameter(valid_582452, JString, required = true,
                                 default = nil)
  if valid_582452 != nil:
    section.add "profileId", valid_582452
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "userrole*2015" will return objects with names like "userrole June 2015", "userrole April 2015", or simply "userrole 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "userrole" will match objects with name "my userrole", "userrole 2015", or simply "userrole".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   subaccountId: JString
  ##               : Select only user roles that belong to this subaccount.
  ##   ids: JArray
  ##      : Select only user roles with the specified IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   accountUserRoleOnly: JBool
  ##                      : Select only account level user roles not associated with any specific subaccount.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_582453 = query.getOrDefault("key")
  valid_582453 = validateParameter(valid_582453, JString, required = false,
                                 default = nil)
  if valid_582453 != nil:
    section.add "key", valid_582453
  var valid_582454 = query.getOrDefault("prettyPrint")
  valid_582454 = validateParameter(valid_582454, JBool, required = false,
                                 default = newJBool(true))
  if valid_582454 != nil:
    section.add "prettyPrint", valid_582454
  var valid_582455 = query.getOrDefault("oauth_token")
  valid_582455 = validateParameter(valid_582455, JString, required = false,
                                 default = nil)
  if valid_582455 != nil:
    section.add "oauth_token", valid_582455
  var valid_582456 = query.getOrDefault("sortField")
  valid_582456 = validateParameter(valid_582456, JString, required = false,
                                 default = newJString("ID"))
  if valid_582456 != nil:
    section.add "sortField", valid_582456
  var valid_582457 = query.getOrDefault("alt")
  valid_582457 = validateParameter(valid_582457, JString, required = false,
                                 default = newJString("json"))
  if valid_582457 != nil:
    section.add "alt", valid_582457
  var valid_582458 = query.getOrDefault("userIp")
  valid_582458 = validateParameter(valid_582458, JString, required = false,
                                 default = nil)
  if valid_582458 != nil:
    section.add "userIp", valid_582458
  var valid_582459 = query.getOrDefault("quotaUser")
  valid_582459 = validateParameter(valid_582459, JString, required = false,
                                 default = nil)
  if valid_582459 != nil:
    section.add "quotaUser", valid_582459
  var valid_582460 = query.getOrDefault("pageToken")
  valid_582460 = validateParameter(valid_582460, JString, required = false,
                                 default = nil)
  if valid_582460 != nil:
    section.add "pageToken", valid_582460
  var valid_582461 = query.getOrDefault("searchString")
  valid_582461 = validateParameter(valid_582461, JString, required = false,
                                 default = nil)
  if valid_582461 != nil:
    section.add "searchString", valid_582461
  var valid_582462 = query.getOrDefault("sortOrder")
  valid_582462 = validateParameter(valid_582462, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_582462 != nil:
    section.add "sortOrder", valid_582462
  var valid_582463 = query.getOrDefault("subaccountId")
  valid_582463 = validateParameter(valid_582463, JString, required = false,
                                 default = nil)
  if valid_582463 != nil:
    section.add "subaccountId", valid_582463
  var valid_582464 = query.getOrDefault("ids")
  valid_582464 = validateParameter(valid_582464, JArray, required = false,
                                 default = nil)
  if valid_582464 != nil:
    section.add "ids", valid_582464
  var valid_582465 = query.getOrDefault("fields")
  valid_582465 = validateParameter(valid_582465, JString, required = false,
                                 default = nil)
  if valid_582465 != nil:
    section.add "fields", valid_582465
  var valid_582466 = query.getOrDefault("accountUserRoleOnly")
  valid_582466 = validateParameter(valid_582466, JBool, required = false, default = nil)
  if valid_582466 != nil:
    section.add "accountUserRoleOnly", valid_582466
  var valid_582467 = query.getOrDefault("maxResults")
  valid_582467 = validateParameter(valid_582467, JInt, required = false,
                                 default = newJInt(1000))
  if valid_582467 != nil:
    section.add "maxResults", valid_582467
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582468: Call_DfareportingUserRolesList_582449; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of user roles, possibly filtered. This method supports paging.
  ## 
  let valid = call_582468.validator(path, query, header, formData, body)
  let scheme = call_582468.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582468.url(scheme.get, call_582468.host, call_582468.base,
                         call_582468.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582468, url, valid)

proc call*(call_582469: Call_DfareportingUserRolesList_582449; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          sortField: string = "ID"; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; pageToken: string = ""; searchString: string = "";
          sortOrder: string = "ASCENDING"; subaccountId: string = "";
          ids: JsonNode = nil; fields: string = ""; accountUserRoleOnly: bool = false;
          maxResults: int = 1000): Recallable =
  ## dfareportingUserRolesList
  ## Retrieves a list of user roles, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "userrole*2015" will return objects with names like "userrole June 2015", "userrole April 2015", or simply "userrole 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "userrole" will match objects with name "my userrole", "userrole 2015", or simply "userrole".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   subaccountId: string
  ##               : Select only user roles that belong to this subaccount.
  ##   ids: JArray
  ##      : Select only user roles with the specified IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   accountUserRoleOnly: bool
  ##                      : Select only account level user roles not associated with any specific subaccount.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_582470 = newJObject()
  var query_582471 = newJObject()
  add(query_582471, "key", newJString(key))
  add(query_582471, "prettyPrint", newJBool(prettyPrint))
  add(query_582471, "oauth_token", newJString(oauthToken))
  add(path_582470, "profileId", newJString(profileId))
  add(query_582471, "sortField", newJString(sortField))
  add(query_582471, "alt", newJString(alt))
  add(query_582471, "userIp", newJString(userIp))
  add(query_582471, "quotaUser", newJString(quotaUser))
  add(query_582471, "pageToken", newJString(pageToken))
  add(query_582471, "searchString", newJString(searchString))
  add(query_582471, "sortOrder", newJString(sortOrder))
  add(query_582471, "subaccountId", newJString(subaccountId))
  if ids != nil:
    query_582471.add "ids", ids
  add(query_582471, "fields", newJString(fields))
  add(query_582471, "accountUserRoleOnly", newJBool(accountUserRoleOnly))
  add(query_582471, "maxResults", newJInt(maxResults))
  result = call_582469.call(path_582470, query_582471, nil, nil, nil)

var dfareportingUserRolesList* = Call_DfareportingUserRolesList_582449(
    name: "dfareportingUserRolesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles",
    validator: validate_DfareportingUserRolesList_582450,
    base: "/dfareporting/v3.1", url: url_DfareportingUserRolesList_582451,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesPatch_582506 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserRolesPatch_582508(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesPatch_582507(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing user role. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582509 = path.getOrDefault("profileId")
  valid_582509 = validateParameter(valid_582509, JString, required = true,
                                 default = nil)
  if valid_582509 != nil:
    section.add "profileId", valid_582509
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : User role ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582510 = query.getOrDefault("key")
  valid_582510 = validateParameter(valid_582510, JString, required = false,
                                 default = nil)
  if valid_582510 != nil:
    section.add "key", valid_582510
  var valid_582511 = query.getOrDefault("prettyPrint")
  valid_582511 = validateParameter(valid_582511, JBool, required = false,
                                 default = newJBool(true))
  if valid_582511 != nil:
    section.add "prettyPrint", valid_582511
  var valid_582512 = query.getOrDefault("oauth_token")
  valid_582512 = validateParameter(valid_582512, JString, required = false,
                                 default = nil)
  if valid_582512 != nil:
    section.add "oauth_token", valid_582512
  var valid_582513 = query.getOrDefault("alt")
  valid_582513 = validateParameter(valid_582513, JString, required = false,
                                 default = newJString("json"))
  if valid_582513 != nil:
    section.add "alt", valid_582513
  var valid_582514 = query.getOrDefault("userIp")
  valid_582514 = validateParameter(valid_582514, JString, required = false,
                                 default = nil)
  if valid_582514 != nil:
    section.add "userIp", valid_582514
  var valid_582515 = query.getOrDefault("quotaUser")
  valid_582515 = validateParameter(valid_582515, JString, required = false,
                                 default = nil)
  if valid_582515 != nil:
    section.add "quotaUser", valid_582515
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_582516 = query.getOrDefault("id")
  valid_582516 = validateParameter(valid_582516, JString, required = true,
                                 default = nil)
  if valid_582516 != nil:
    section.add "id", valid_582516
  var valid_582517 = query.getOrDefault("fields")
  valid_582517 = validateParameter(valid_582517, JString, required = false,
                                 default = nil)
  if valid_582517 != nil:
    section.add "fields", valid_582517
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582519: Call_DfareportingUserRolesPatch_582506; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing user role. This method supports patch semantics.
  ## 
  let valid = call_582519.validator(path, query, header, formData, body)
  let scheme = call_582519.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582519.url(scheme.get, call_582519.host, call_582519.base,
                         call_582519.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582519, url, valid)

proc call*(call_582520: Call_DfareportingUserRolesPatch_582506; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingUserRolesPatch
  ## Updates an existing user role. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : User role ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582521 = newJObject()
  var query_582522 = newJObject()
  var body_582523 = newJObject()
  add(query_582522, "key", newJString(key))
  add(query_582522, "prettyPrint", newJBool(prettyPrint))
  add(query_582522, "oauth_token", newJString(oauthToken))
  add(path_582521, "profileId", newJString(profileId))
  add(query_582522, "alt", newJString(alt))
  add(query_582522, "userIp", newJString(userIp))
  add(query_582522, "quotaUser", newJString(quotaUser))
  add(query_582522, "id", newJString(id))
  if body != nil:
    body_582523 = body
  add(query_582522, "fields", newJString(fields))
  result = call_582520.call(path_582521, query_582522, nil, nil, body_582523)

var dfareportingUserRolesPatch* = Call_DfareportingUserRolesPatch_582506(
    name: "dfareportingUserRolesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles",
    validator: validate_DfareportingUserRolesPatch_582507,
    base: "/dfareporting/v3.1", url: url_DfareportingUserRolesPatch_582508,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesGet_582524 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserRolesGet_582526(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesGet_582525(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one user role by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User role ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582527 = path.getOrDefault("profileId")
  valid_582527 = validateParameter(valid_582527, JString, required = true,
                                 default = nil)
  if valid_582527 != nil:
    section.add "profileId", valid_582527
  var valid_582528 = path.getOrDefault("id")
  valid_582528 = validateParameter(valid_582528, JString, required = true,
                                 default = nil)
  if valid_582528 != nil:
    section.add "id", valid_582528
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582529 = query.getOrDefault("key")
  valid_582529 = validateParameter(valid_582529, JString, required = false,
                                 default = nil)
  if valid_582529 != nil:
    section.add "key", valid_582529
  var valid_582530 = query.getOrDefault("prettyPrint")
  valid_582530 = validateParameter(valid_582530, JBool, required = false,
                                 default = newJBool(true))
  if valid_582530 != nil:
    section.add "prettyPrint", valid_582530
  var valid_582531 = query.getOrDefault("oauth_token")
  valid_582531 = validateParameter(valid_582531, JString, required = false,
                                 default = nil)
  if valid_582531 != nil:
    section.add "oauth_token", valid_582531
  var valid_582532 = query.getOrDefault("alt")
  valid_582532 = validateParameter(valid_582532, JString, required = false,
                                 default = newJString("json"))
  if valid_582532 != nil:
    section.add "alt", valid_582532
  var valid_582533 = query.getOrDefault("userIp")
  valid_582533 = validateParameter(valid_582533, JString, required = false,
                                 default = nil)
  if valid_582533 != nil:
    section.add "userIp", valid_582533
  var valid_582534 = query.getOrDefault("quotaUser")
  valid_582534 = validateParameter(valid_582534, JString, required = false,
                                 default = nil)
  if valid_582534 != nil:
    section.add "quotaUser", valid_582534
  var valid_582535 = query.getOrDefault("fields")
  valid_582535 = validateParameter(valid_582535, JString, required = false,
                                 default = nil)
  if valid_582535 != nil:
    section.add "fields", valid_582535
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582536: Call_DfareportingUserRolesGet_582524; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one user role by ID.
  ## 
  let valid = call_582536.validator(path, query, header, formData, body)
  let scheme = call_582536.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582536.url(scheme.get, call_582536.host, call_582536.base,
                         call_582536.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582536, url, valid)

proc call*(call_582537: Call_DfareportingUserRolesGet_582524; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingUserRolesGet
  ## Gets one user role by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : User role ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582538 = newJObject()
  var query_582539 = newJObject()
  add(query_582539, "key", newJString(key))
  add(query_582539, "prettyPrint", newJBool(prettyPrint))
  add(query_582539, "oauth_token", newJString(oauthToken))
  add(path_582538, "profileId", newJString(profileId))
  add(path_582538, "id", newJString(id))
  add(query_582539, "alt", newJString(alt))
  add(query_582539, "userIp", newJString(userIp))
  add(query_582539, "quotaUser", newJString(quotaUser))
  add(query_582539, "fields", newJString(fields))
  result = call_582537.call(path_582538, query_582539, nil, nil, nil)

var dfareportingUserRolesGet* = Call_DfareportingUserRolesGet_582524(
    name: "dfareportingUserRolesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles/{id}",
    validator: validate_DfareportingUserRolesGet_582525,
    base: "/dfareporting/v3.1", url: url_DfareportingUserRolesGet_582526,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesDelete_582540 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserRolesDelete_582542(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesDelete_582541(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing user role.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User role ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582543 = path.getOrDefault("profileId")
  valid_582543 = validateParameter(valid_582543, JString, required = true,
                                 default = nil)
  if valid_582543 != nil:
    section.add "profileId", valid_582543
  var valid_582544 = path.getOrDefault("id")
  valid_582544 = validateParameter(valid_582544, JString, required = true,
                                 default = nil)
  if valid_582544 != nil:
    section.add "id", valid_582544
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582545 = query.getOrDefault("key")
  valid_582545 = validateParameter(valid_582545, JString, required = false,
                                 default = nil)
  if valid_582545 != nil:
    section.add "key", valid_582545
  var valid_582546 = query.getOrDefault("prettyPrint")
  valid_582546 = validateParameter(valid_582546, JBool, required = false,
                                 default = newJBool(true))
  if valid_582546 != nil:
    section.add "prettyPrint", valid_582546
  var valid_582547 = query.getOrDefault("oauth_token")
  valid_582547 = validateParameter(valid_582547, JString, required = false,
                                 default = nil)
  if valid_582547 != nil:
    section.add "oauth_token", valid_582547
  var valid_582548 = query.getOrDefault("alt")
  valid_582548 = validateParameter(valid_582548, JString, required = false,
                                 default = newJString("json"))
  if valid_582548 != nil:
    section.add "alt", valid_582548
  var valid_582549 = query.getOrDefault("userIp")
  valid_582549 = validateParameter(valid_582549, JString, required = false,
                                 default = nil)
  if valid_582549 != nil:
    section.add "userIp", valid_582549
  var valid_582550 = query.getOrDefault("quotaUser")
  valid_582550 = validateParameter(valid_582550, JString, required = false,
                                 default = nil)
  if valid_582550 != nil:
    section.add "quotaUser", valid_582550
  var valid_582551 = query.getOrDefault("fields")
  valid_582551 = validateParameter(valid_582551, JString, required = false,
                                 default = nil)
  if valid_582551 != nil:
    section.add "fields", valid_582551
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582552: Call_DfareportingUserRolesDelete_582540; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing user role.
  ## 
  let valid = call_582552.validator(path, query, header, formData, body)
  let scheme = call_582552.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582552.url(scheme.get, call_582552.host, call_582552.base,
                         call_582552.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582552, url, valid)

proc call*(call_582553: Call_DfareportingUserRolesDelete_582540; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingUserRolesDelete
  ## Deletes an existing user role.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : User role ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582554 = newJObject()
  var query_582555 = newJObject()
  add(query_582555, "key", newJString(key))
  add(query_582555, "prettyPrint", newJBool(prettyPrint))
  add(query_582555, "oauth_token", newJString(oauthToken))
  add(path_582554, "profileId", newJString(profileId))
  add(path_582554, "id", newJString(id))
  add(query_582555, "alt", newJString(alt))
  add(query_582555, "userIp", newJString(userIp))
  add(query_582555, "quotaUser", newJString(quotaUser))
  add(query_582555, "fields", newJString(fields))
  result = call_582553.call(path_582554, query_582555, nil, nil, nil)

var dfareportingUserRolesDelete* = Call_DfareportingUserRolesDelete_582540(
    name: "dfareportingUserRolesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles/{id}",
    validator: validate_DfareportingUserRolesDelete_582541,
    base: "/dfareporting/v3.1", url: url_DfareportingUserRolesDelete_582542,
    schemes: {Scheme.Https})
type
  Call_DfareportingVideoFormatsList_582556 = ref object of OpenApiRestCall_578364
proc url_DfareportingVideoFormatsList_582558(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/videoFormats")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingVideoFormatsList_582557(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available video formats.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582559 = path.getOrDefault("profileId")
  valid_582559 = validateParameter(valid_582559, JString, required = true,
                                 default = nil)
  if valid_582559 != nil:
    section.add "profileId", valid_582559
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582560 = query.getOrDefault("key")
  valid_582560 = validateParameter(valid_582560, JString, required = false,
                                 default = nil)
  if valid_582560 != nil:
    section.add "key", valid_582560
  var valid_582561 = query.getOrDefault("prettyPrint")
  valid_582561 = validateParameter(valid_582561, JBool, required = false,
                                 default = newJBool(true))
  if valid_582561 != nil:
    section.add "prettyPrint", valid_582561
  var valid_582562 = query.getOrDefault("oauth_token")
  valid_582562 = validateParameter(valid_582562, JString, required = false,
                                 default = nil)
  if valid_582562 != nil:
    section.add "oauth_token", valid_582562
  var valid_582563 = query.getOrDefault("alt")
  valid_582563 = validateParameter(valid_582563, JString, required = false,
                                 default = newJString("json"))
  if valid_582563 != nil:
    section.add "alt", valid_582563
  var valid_582564 = query.getOrDefault("userIp")
  valid_582564 = validateParameter(valid_582564, JString, required = false,
                                 default = nil)
  if valid_582564 != nil:
    section.add "userIp", valid_582564
  var valid_582565 = query.getOrDefault("quotaUser")
  valid_582565 = validateParameter(valid_582565, JString, required = false,
                                 default = nil)
  if valid_582565 != nil:
    section.add "quotaUser", valid_582565
  var valid_582566 = query.getOrDefault("fields")
  valid_582566 = validateParameter(valid_582566, JString, required = false,
                                 default = nil)
  if valid_582566 != nil:
    section.add "fields", valid_582566
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582567: Call_DfareportingVideoFormatsList_582556; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists available video formats.
  ## 
  let valid = call_582567.validator(path, query, header, formData, body)
  let scheme = call_582567.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582567.url(scheme.get, call_582567.host, call_582567.base,
                         call_582567.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582567, url, valid)

proc call*(call_582568: Call_DfareportingVideoFormatsList_582556;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingVideoFormatsList
  ## Lists available video formats.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582569 = newJObject()
  var query_582570 = newJObject()
  add(query_582570, "key", newJString(key))
  add(query_582570, "prettyPrint", newJBool(prettyPrint))
  add(query_582570, "oauth_token", newJString(oauthToken))
  add(path_582569, "profileId", newJString(profileId))
  add(query_582570, "alt", newJString(alt))
  add(query_582570, "userIp", newJString(userIp))
  add(query_582570, "quotaUser", newJString(quotaUser))
  add(query_582570, "fields", newJString(fields))
  result = call_582568.call(path_582569, query_582570, nil, nil, nil)

var dfareportingVideoFormatsList* = Call_DfareportingVideoFormatsList_582556(
    name: "dfareportingVideoFormatsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/videoFormats",
    validator: validate_DfareportingVideoFormatsList_582557,
    base: "/dfareporting/v3.1", url: url_DfareportingVideoFormatsList_582558,
    schemes: {Scheme.Https})
type
  Call_DfareportingVideoFormatsGet_582571 = ref object of OpenApiRestCall_578364
proc url_DfareportingVideoFormatsGet_582573(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/videoFormats/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingVideoFormatsGet_582572(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one video format by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JInt (required)
  ##     : Video format ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582574 = path.getOrDefault("profileId")
  valid_582574 = validateParameter(valid_582574, JString, required = true,
                                 default = nil)
  if valid_582574 != nil:
    section.add "profileId", valid_582574
  var valid_582575 = path.getOrDefault("id")
  valid_582575 = validateParameter(valid_582575, JInt, required = true, default = nil)
  if valid_582575 != nil:
    section.add "id", valid_582575
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582576 = query.getOrDefault("key")
  valid_582576 = validateParameter(valid_582576, JString, required = false,
                                 default = nil)
  if valid_582576 != nil:
    section.add "key", valid_582576
  var valid_582577 = query.getOrDefault("prettyPrint")
  valid_582577 = validateParameter(valid_582577, JBool, required = false,
                                 default = newJBool(true))
  if valid_582577 != nil:
    section.add "prettyPrint", valid_582577
  var valid_582578 = query.getOrDefault("oauth_token")
  valid_582578 = validateParameter(valid_582578, JString, required = false,
                                 default = nil)
  if valid_582578 != nil:
    section.add "oauth_token", valid_582578
  var valid_582579 = query.getOrDefault("alt")
  valid_582579 = validateParameter(valid_582579, JString, required = false,
                                 default = newJString("json"))
  if valid_582579 != nil:
    section.add "alt", valid_582579
  var valid_582580 = query.getOrDefault("userIp")
  valid_582580 = validateParameter(valid_582580, JString, required = false,
                                 default = nil)
  if valid_582580 != nil:
    section.add "userIp", valid_582580
  var valid_582581 = query.getOrDefault("quotaUser")
  valid_582581 = validateParameter(valid_582581, JString, required = false,
                                 default = nil)
  if valid_582581 != nil:
    section.add "quotaUser", valid_582581
  var valid_582582 = query.getOrDefault("fields")
  valid_582582 = validateParameter(valid_582582, JString, required = false,
                                 default = nil)
  if valid_582582 != nil:
    section.add "fields", valid_582582
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582583: Call_DfareportingVideoFormatsGet_582571; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one video format by ID.
  ## 
  let valid = call_582583.validator(path, query, header, formData, body)
  let scheme = call_582583.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582583.url(scheme.get, call_582583.host, call_582583.base,
                         call_582583.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582583, url, valid)

proc call*(call_582584: Call_DfareportingVideoFormatsGet_582571; profileId: string;
          id: int; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingVideoFormatsGet
  ## Gets one video format by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: int (required)
  ##     : Video format ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582585 = newJObject()
  var query_582586 = newJObject()
  add(query_582586, "key", newJString(key))
  add(query_582586, "prettyPrint", newJBool(prettyPrint))
  add(query_582586, "oauth_token", newJString(oauthToken))
  add(path_582585, "profileId", newJString(profileId))
  add(path_582585, "id", newJInt(id))
  add(query_582586, "alt", newJString(alt))
  add(query_582586, "userIp", newJString(userIp))
  add(query_582586, "quotaUser", newJString(quotaUser))
  add(query_582586, "fields", newJString(fields))
  result = call_582584.call(path_582585, query_582586, nil, nil, nil)

var dfareportingVideoFormatsGet* = Call_DfareportingVideoFormatsGet_582571(
    name: "dfareportingVideoFormatsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/videoFormats/{id}",
    validator: validate_DfareportingVideoFormatsGet_582572,
    base: "/dfareporting/v3.1", url: url_DfareportingVideoFormatsGet_582573,
    schemes: {Scheme.Https})
export
  rest

type
  GoogleAuth = ref object
    endpoint*: Uri
    token: string
    expiry*: float64
    issued*: float64
    email: string
    key: string
    scope*: seq[string]
    form: string
    digest: Hash

const
  endpoint = "https://www.googleapis.com/oauth2/v4/token".parseUri
var auth = GoogleAuth(endpoint: endpoint)
proc hash(auth: GoogleAuth): Hash =
  ## yield differing values for effectively different auth payloads
  result = hash($auth.endpoint)
  result = result !& hash(auth.email)
  result = result !& hash(auth.key)
  result = result !& hash(auth.scope.join(" "))
  result = !$result

proc newAuthenticator*(path: string): GoogleAuth =
  let
    input = readFile(path)
    js = parseJson(input)
  auth.email = js["client_email"].getStr
  auth.key = js["private_key"].getStr
  result = auth

proc store(auth: var GoogleAuth; token: string; expiry: int; form: string) =
  auth.token = token
  auth.issued = epochTime()
  auth.expiry = auth.issued + expiry.float64
  auth.form = form
  auth.digest = auth.hash

proc authenticate*(fresh: float64 = 3600.0; lifetime: int = 3600): Future[bool] {.async.} =
  ## get or refresh an authentication token; provide `fresh`
  ## to ensure that the token won't expire in the next N seconds.
  ## provide `lifetime` to indicate how long the token should last.
  let clock = epochTime()
  if auth.expiry > clock + fresh:
    if auth.hash == auth.digest:
      return true
  let
    expiry = clock.int + lifetime
    header = JOSEHeader(alg: RS256, typ: "JWT")
    claims = %*{"iss": auth.email, "scope": auth.scope.join(" "),
              "aud": "https://www.googleapis.com/oauth2/v4/token", "exp": expiry,
              "iat": clock.int}
  var tok = JWT(header: header, claims: toClaims(claims))
  tok.sign(auth.key)
  let post = encodeQuery({"grant_type": "urn:ietf:params:oauth:grant-type:jwt-bearer",
                       "assertion": $tok}, usePlus = false, omitEq = false)
  var client = newAsyncHttpClient()
  client.headers = newHttpHeaders({"Content-Type": "application/x-www-form-urlencoded",
                                 "Content-Length": $post.len})
  let response = await client.request($auth.endpoint, HttpPost, body = post)
  if not response.code.is2xx:
    return false
  let body = await response.body
  client.close
  try:
    let js = parseJson(body)
    auth.store(js["access_token"].getStr, js["expires_in"].getInt,
               js["token_type"].getStr)
  except KeyError:
    return false
  except JsonParsingError:
    return false
  return true

proc composeQueryString(query: JsonNode): string =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs, usePlus = false, omitEq = false)

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  var headers = massageHeaders(input.getOrDefault("header"))
  let body = input.getOrDefault("body").getStr
  if auth.scope.len == 0:
    raise newException(ValueError, "specify authentication scopes")
  if not waitfor authenticate(fresh = 10.0):
    raise newException(IOError, "unable to refresh authentication token")
  headers.add ("Authorization", auth.form & " " & auth.token)
  headers.add ("Content-Type", "application/json")
  headers.add ("Content-Length", $body.len)
  result = newRecallable(call, url, headers, body = body)
