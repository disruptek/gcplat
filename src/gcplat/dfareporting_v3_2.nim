
import
  json, options, hashes, uri, rest, os, uri, strutils, times, httpcore, httpclient,
  asyncdispatch, jwt

## auto-generated via openapi macro
## title: DCM/DFA Reporting And Trafficking
## version: v3.2
## termsOfService: https://developers.google.com/terms/
## license:
##     name: Creative Commons Attribution 3.0
##     url: http://creativecommons.org/licenses/by/3.0/
## 
## Manages your DoubleClick Campaign Manager ad campaigns and reports.
## 
## https://developers.google.com/doubleclick-advertisers/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_579437 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_579437](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_579437): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  gcpServiceName = "dfareporting"
proc composeQueryString(query: JsonNode): string
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_DfareportingFilesGet_579706 = ref object of OpenApiRestCall_579437
proc url_DfareportingFilesGet_579708(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "reportId" in path, "`reportId` is a required path parameter"
  assert "fileId" in path, "`fileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId"),
               (kind: ConstantSegment, value: "/files/"),
               (kind: VariableSegment, value: "fileId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFilesGet_579707(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a report file by its report ID and file ID. This method supports media download.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   fileId: JString (required)
  ##         : The ID of the report file.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `fileId` field"
  var valid_579834 = path.getOrDefault("fileId")
  valid_579834 = validateParameter(valid_579834, JString, required = true,
                                 default = nil)
  if valid_579834 != nil:
    section.add "fileId", valid_579834
  var valid_579835 = path.getOrDefault("reportId")
  valid_579835 = validateParameter(valid_579835, JString, required = true,
                                 default = nil)
  if valid_579835 != nil:
    section.add "reportId", valid_579835
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_579836 = query.getOrDefault("fields")
  valid_579836 = validateParameter(valid_579836, JString, required = false,
                                 default = nil)
  if valid_579836 != nil:
    section.add "fields", valid_579836
  var valid_579837 = query.getOrDefault("quotaUser")
  valid_579837 = validateParameter(valid_579837, JString, required = false,
                                 default = nil)
  if valid_579837 != nil:
    section.add "quotaUser", valid_579837
  var valid_579851 = query.getOrDefault("alt")
  valid_579851 = validateParameter(valid_579851, JString, required = false,
                                 default = newJString("json"))
  if valid_579851 != nil:
    section.add "alt", valid_579851
  var valid_579852 = query.getOrDefault("oauth_token")
  valid_579852 = validateParameter(valid_579852, JString, required = false,
                                 default = nil)
  if valid_579852 != nil:
    section.add "oauth_token", valid_579852
  var valid_579853 = query.getOrDefault("userIp")
  valid_579853 = validateParameter(valid_579853, JString, required = false,
                                 default = nil)
  if valid_579853 != nil:
    section.add "userIp", valid_579853
  var valid_579854 = query.getOrDefault("key")
  valid_579854 = validateParameter(valid_579854, JString, required = false,
                                 default = nil)
  if valid_579854 != nil:
    section.add "key", valid_579854
  var valid_579855 = query.getOrDefault("prettyPrint")
  valid_579855 = validateParameter(valid_579855, JBool, required = false,
                                 default = newJBool(true))
  if valid_579855 != nil:
    section.add "prettyPrint", valid_579855
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579878: Call_DfareportingFilesGet_579706; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a report file by its report ID and file ID. This method supports media download.
  ## 
  let valid = call_579878.validator(path, query, header, formData, body)
  let scheme = call_579878.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579878.url(scheme.get, call_579878.host, call_579878.base,
                         call_579878.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579878, url, valid)

proc call*(call_579949: Call_DfareportingFilesGet_579706; fileId: string;
          reportId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingFilesGet
  ## Retrieves a report file by its report ID and file ID. This method supports media download.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fileId: string (required)
  ##         : The ID of the report file.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_579950 = newJObject()
  var query_579952 = newJObject()
  add(query_579952, "fields", newJString(fields))
  add(query_579952, "quotaUser", newJString(quotaUser))
  add(path_579950, "fileId", newJString(fileId))
  add(query_579952, "alt", newJString(alt))
  add(query_579952, "oauth_token", newJString(oauthToken))
  add(query_579952, "userIp", newJString(userIp))
  add(query_579952, "key", newJString(key))
  add(path_579950, "reportId", newJString(reportId))
  add(query_579952, "prettyPrint", newJBool(prettyPrint))
  result = call_579949.call(path_579950, query_579952, nil, nil, nil)

var dfareportingFilesGet* = Call_DfareportingFilesGet_579706(
    name: "dfareportingFilesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/reports/{reportId}/files/{fileId}",
    validator: validate_DfareportingFilesGet_579707, base: "/dfareporting/v3.2",
    url: url_DfareportingFilesGet_579708, schemes: {Scheme.Https})
type
  Call_DfareportingUserProfilesList_579991 = ref object of OpenApiRestCall_579437
proc url_DfareportingUserProfilesList_579993(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  result.path = base & route

proc validate_DfareportingUserProfilesList_579992(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves list of user profiles for a user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_579994 = query.getOrDefault("fields")
  valid_579994 = validateParameter(valid_579994, JString, required = false,
                                 default = nil)
  if valid_579994 != nil:
    section.add "fields", valid_579994
  var valid_579995 = query.getOrDefault("quotaUser")
  valid_579995 = validateParameter(valid_579995, JString, required = false,
                                 default = nil)
  if valid_579995 != nil:
    section.add "quotaUser", valid_579995
  var valid_579996 = query.getOrDefault("alt")
  valid_579996 = validateParameter(valid_579996, JString, required = false,
                                 default = newJString("json"))
  if valid_579996 != nil:
    section.add "alt", valid_579996
  var valid_579997 = query.getOrDefault("oauth_token")
  valid_579997 = validateParameter(valid_579997, JString, required = false,
                                 default = nil)
  if valid_579997 != nil:
    section.add "oauth_token", valid_579997
  var valid_579998 = query.getOrDefault("userIp")
  valid_579998 = validateParameter(valid_579998, JString, required = false,
                                 default = nil)
  if valid_579998 != nil:
    section.add "userIp", valid_579998
  var valid_579999 = query.getOrDefault("key")
  valid_579999 = validateParameter(valid_579999, JString, required = false,
                                 default = nil)
  if valid_579999 != nil:
    section.add "key", valid_579999
  var valid_580000 = query.getOrDefault("prettyPrint")
  valid_580000 = validateParameter(valid_580000, JBool, required = false,
                                 default = newJBool(true))
  if valid_580000 != nil:
    section.add "prettyPrint", valid_580000
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580001: Call_DfareportingUserProfilesList_579991; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves list of user profiles for a user.
  ## 
  let valid = call_580001.validator(path, query, header, formData, body)
  let scheme = call_580001.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580001.url(scheme.get, call_580001.host, call_580001.base,
                         call_580001.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580001, url, valid)

proc call*(call_580002: Call_DfareportingUserProfilesList_579991;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingUserProfilesList
  ## Retrieves list of user profiles for a user.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var query_580003 = newJObject()
  add(query_580003, "fields", newJString(fields))
  add(query_580003, "quotaUser", newJString(quotaUser))
  add(query_580003, "alt", newJString(alt))
  add(query_580003, "oauth_token", newJString(oauthToken))
  add(query_580003, "userIp", newJString(userIp))
  add(query_580003, "key", newJString(key))
  add(query_580003, "prettyPrint", newJBool(prettyPrint))
  result = call_580002.call(nil, query_580003, nil, nil, nil)

var dfareportingUserProfilesList* = Call_DfareportingUserProfilesList_579991(
    name: "dfareportingUserProfilesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles",
    validator: validate_DfareportingUserProfilesList_579992,
    base: "/dfareporting/v3.2", url: url_DfareportingUserProfilesList_579993,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserProfilesGet_580004 = ref object of OpenApiRestCall_579437
proc url_DfareportingUserProfilesGet_580006(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserProfilesGet_580005(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one user profile by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580007 = path.getOrDefault("profileId")
  valid_580007 = validateParameter(valid_580007, JString, required = true,
                                 default = nil)
  if valid_580007 != nil:
    section.add "profileId", valid_580007
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580008 = query.getOrDefault("fields")
  valid_580008 = validateParameter(valid_580008, JString, required = false,
                                 default = nil)
  if valid_580008 != nil:
    section.add "fields", valid_580008
  var valid_580009 = query.getOrDefault("quotaUser")
  valid_580009 = validateParameter(valid_580009, JString, required = false,
                                 default = nil)
  if valid_580009 != nil:
    section.add "quotaUser", valid_580009
  var valid_580010 = query.getOrDefault("alt")
  valid_580010 = validateParameter(valid_580010, JString, required = false,
                                 default = newJString("json"))
  if valid_580010 != nil:
    section.add "alt", valid_580010
  var valid_580011 = query.getOrDefault("oauth_token")
  valid_580011 = validateParameter(valid_580011, JString, required = false,
                                 default = nil)
  if valid_580011 != nil:
    section.add "oauth_token", valid_580011
  var valid_580012 = query.getOrDefault("userIp")
  valid_580012 = validateParameter(valid_580012, JString, required = false,
                                 default = nil)
  if valid_580012 != nil:
    section.add "userIp", valid_580012
  var valid_580013 = query.getOrDefault("key")
  valid_580013 = validateParameter(valid_580013, JString, required = false,
                                 default = nil)
  if valid_580013 != nil:
    section.add "key", valid_580013
  var valid_580014 = query.getOrDefault("prettyPrint")
  valid_580014 = validateParameter(valid_580014, JBool, required = false,
                                 default = newJBool(true))
  if valid_580014 != nil:
    section.add "prettyPrint", valid_580014
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580015: Call_DfareportingUserProfilesGet_580004; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one user profile by ID.
  ## 
  let valid = call_580015.validator(path, query, header, formData, body)
  let scheme = call_580015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580015.url(scheme.get, call_580015.host, call_580015.base,
                         call_580015.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580015, url, valid)

proc call*(call_580016: Call_DfareportingUserProfilesGet_580004; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingUserProfilesGet
  ## Gets one user profile by ID.
  ##   profileId: string (required)
  ##            : The user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580017 = newJObject()
  var query_580018 = newJObject()
  add(path_580017, "profileId", newJString(profileId))
  add(query_580018, "fields", newJString(fields))
  add(query_580018, "quotaUser", newJString(quotaUser))
  add(query_580018, "alt", newJString(alt))
  add(query_580018, "oauth_token", newJString(oauthToken))
  add(query_580018, "userIp", newJString(userIp))
  add(query_580018, "key", newJString(key))
  add(query_580018, "prettyPrint", newJBool(prettyPrint))
  result = call_580016.call(path_580017, query_580018, nil, nil, nil)

var dfareportingUserProfilesGet* = Call_DfareportingUserProfilesGet_580004(
    name: "dfareportingUserProfilesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}",
    validator: validate_DfareportingUserProfilesGet_580005,
    base: "/dfareporting/v3.2", url: url_DfareportingUserProfilesGet_580006,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountActiveAdSummariesGet_580019 = ref object of OpenApiRestCall_579437
proc url_DfareportingAccountActiveAdSummariesGet_580021(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "summaryAccountId" in path,
        "`summaryAccountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountActiveAdSummaries/"),
               (kind: VariableSegment, value: "summaryAccountId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountActiveAdSummariesGet_580020(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the account's active ad summary by account ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   summaryAccountId: JString (required)
  ##                   : Account ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580022 = path.getOrDefault("profileId")
  valid_580022 = validateParameter(valid_580022, JString, required = true,
                                 default = nil)
  if valid_580022 != nil:
    section.add "profileId", valid_580022
  var valid_580023 = path.getOrDefault("summaryAccountId")
  valid_580023 = validateParameter(valid_580023, JString, required = true,
                                 default = nil)
  if valid_580023 != nil:
    section.add "summaryAccountId", valid_580023
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580024 = query.getOrDefault("fields")
  valid_580024 = validateParameter(valid_580024, JString, required = false,
                                 default = nil)
  if valid_580024 != nil:
    section.add "fields", valid_580024
  var valid_580025 = query.getOrDefault("quotaUser")
  valid_580025 = validateParameter(valid_580025, JString, required = false,
                                 default = nil)
  if valid_580025 != nil:
    section.add "quotaUser", valid_580025
  var valid_580026 = query.getOrDefault("alt")
  valid_580026 = validateParameter(valid_580026, JString, required = false,
                                 default = newJString("json"))
  if valid_580026 != nil:
    section.add "alt", valid_580026
  var valid_580027 = query.getOrDefault("oauth_token")
  valid_580027 = validateParameter(valid_580027, JString, required = false,
                                 default = nil)
  if valid_580027 != nil:
    section.add "oauth_token", valid_580027
  var valid_580028 = query.getOrDefault("userIp")
  valid_580028 = validateParameter(valid_580028, JString, required = false,
                                 default = nil)
  if valid_580028 != nil:
    section.add "userIp", valid_580028
  var valid_580029 = query.getOrDefault("key")
  valid_580029 = validateParameter(valid_580029, JString, required = false,
                                 default = nil)
  if valid_580029 != nil:
    section.add "key", valid_580029
  var valid_580030 = query.getOrDefault("prettyPrint")
  valid_580030 = validateParameter(valid_580030, JBool, required = false,
                                 default = newJBool(true))
  if valid_580030 != nil:
    section.add "prettyPrint", valid_580030
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580031: Call_DfareportingAccountActiveAdSummariesGet_580019;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the account's active ad summary by account ID.
  ## 
  let valid = call_580031.validator(path, query, header, formData, body)
  let scheme = call_580031.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580031.url(scheme.get, call_580031.host, call_580031.base,
                         call_580031.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580031, url, valid)

proc call*(call_580032: Call_DfareportingAccountActiveAdSummariesGet_580019;
          profileId: string; summaryAccountId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountActiveAdSummariesGet
  ## Gets the account's active ad summary by account ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   summaryAccountId: string (required)
  ##                   : Account ID.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580033 = newJObject()
  var query_580034 = newJObject()
  add(path_580033, "profileId", newJString(profileId))
  add(query_580034, "fields", newJString(fields))
  add(query_580034, "quotaUser", newJString(quotaUser))
  add(query_580034, "alt", newJString(alt))
  add(query_580034, "oauth_token", newJString(oauthToken))
  add(query_580034, "userIp", newJString(userIp))
  add(query_580034, "key", newJString(key))
  add(path_580033, "summaryAccountId", newJString(summaryAccountId))
  add(query_580034, "prettyPrint", newJBool(prettyPrint))
  result = call_580032.call(path_580033, query_580034, nil, nil, nil)

var dfareportingAccountActiveAdSummariesGet* = Call_DfareportingAccountActiveAdSummariesGet_580019(
    name: "dfareportingAccountActiveAdSummariesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accountActiveAdSummaries/{summaryAccountId}",
    validator: validate_DfareportingAccountActiveAdSummariesGet_580020,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountActiveAdSummariesGet_580021,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountPermissionGroupsList_580035 = ref object of OpenApiRestCall_579437
proc url_DfareportingAccountPermissionGroupsList_580037(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountPermissionGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountPermissionGroupsList_580036(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the list of account permission groups.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580038 = path.getOrDefault("profileId")
  valid_580038 = validateParameter(valid_580038, JString, required = true,
                                 default = nil)
  if valid_580038 != nil:
    section.add "profileId", valid_580038
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580039 = query.getOrDefault("fields")
  valid_580039 = validateParameter(valid_580039, JString, required = false,
                                 default = nil)
  if valid_580039 != nil:
    section.add "fields", valid_580039
  var valid_580040 = query.getOrDefault("quotaUser")
  valid_580040 = validateParameter(valid_580040, JString, required = false,
                                 default = nil)
  if valid_580040 != nil:
    section.add "quotaUser", valid_580040
  var valid_580041 = query.getOrDefault("alt")
  valid_580041 = validateParameter(valid_580041, JString, required = false,
                                 default = newJString("json"))
  if valid_580041 != nil:
    section.add "alt", valid_580041
  var valid_580042 = query.getOrDefault("oauth_token")
  valid_580042 = validateParameter(valid_580042, JString, required = false,
                                 default = nil)
  if valid_580042 != nil:
    section.add "oauth_token", valid_580042
  var valid_580043 = query.getOrDefault("userIp")
  valid_580043 = validateParameter(valid_580043, JString, required = false,
                                 default = nil)
  if valid_580043 != nil:
    section.add "userIp", valid_580043
  var valid_580044 = query.getOrDefault("key")
  valid_580044 = validateParameter(valid_580044, JString, required = false,
                                 default = nil)
  if valid_580044 != nil:
    section.add "key", valid_580044
  var valid_580045 = query.getOrDefault("prettyPrint")
  valid_580045 = validateParameter(valid_580045, JBool, required = false,
                                 default = newJBool(true))
  if valid_580045 != nil:
    section.add "prettyPrint", valid_580045
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580046: Call_DfareportingAccountPermissionGroupsList_580035;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the list of account permission groups.
  ## 
  let valid = call_580046.validator(path, query, header, formData, body)
  let scheme = call_580046.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580046.url(scheme.get, call_580046.host, call_580046.base,
                         call_580046.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580046, url, valid)

proc call*(call_580047: Call_DfareportingAccountPermissionGroupsList_580035;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountPermissionGroupsList
  ## Retrieves the list of account permission groups.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580048 = newJObject()
  var query_580049 = newJObject()
  add(path_580048, "profileId", newJString(profileId))
  add(query_580049, "fields", newJString(fields))
  add(query_580049, "quotaUser", newJString(quotaUser))
  add(query_580049, "alt", newJString(alt))
  add(query_580049, "oauth_token", newJString(oauthToken))
  add(query_580049, "userIp", newJString(userIp))
  add(query_580049, "key", newJString(key))
  add(query_580049, "prettyPrint", newJBool(prettyPrint))
  result = call_580047.call(path_580048, query_580049, nil, nil, nil)

var dfareportingAccountPermissionGroupsList* = Call_DfareportingAccountPermissionGroupsList_580035(
    name: "dfareportingAccountPermissionGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountPermissionGroups",
    validator: validate_DfareportingAccountPermissionGroupsList_580036,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountPermissionGroupsList_580037,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountPermissionGroupsGet_580050 = ref object of OpenApiRestCall_579437
proc url_DfareportingAccountPermissionGroupsGet_580052(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountPermissionGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountPermissionGroupsGet_580051(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one account permission group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Account permission group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580053 = path.getOrDefault("profileId")
  valid_580053 = validateParameter(valid_580053, JString, required = true,
                                 default = nil)
  if valid_580053 != nil:
    section.add "profileId", valid_580053
  var valid_580054 = path.getOrDefault("id")
  valid_580054 = validateParameter(valid_580054, JString, required = true,
                                 default = nil)
  if valid_580054 != nil:
    section.add "id", valid_580054
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580055 = query.getOrDefault("fields")
  valid_580055 = validateParameter(valid_580055, JString, required = false,
                                 default = nil)
  if valid_580055 != nil:
    section.add "fields", valid_580055
  var valid_580056 = query.getOrDefault("quotaUser")
  valid_580056 = validateParameter(valid_580056, JString, required = false,
                                 default = nil)
  if valid_580056 != nil:
    section.add "quotaUser", valid_580056
  var valid_580057 = query.getOrDefault("alt")
  valid_580057 = validateParameter(valid_580057, JString, required = false,
                                 default = newJString("json"))
  if valid_580057 != nil:
    section.add "alt", valid_580057
  var valid_580058 = query.getOrDefault("oauth_token")
  valid_580058 = validateParameter(valid_580058, JString, required = false,
                                 default = nil)
  if valid_580058 != nil:
    section.add "oauth_token", valid_580058
  var valid_580059 = query.getOrDefault("userIp")
  valid_580059 = validateParameter(valid_580059, JString, required = false,
                                 default = nil)
  if valid_580059 != nil:
    section.add "userIp", valid_580059
  var valid_580060 = query.getOrDefault("key")
  valid_580060 = validateParameter(valid_580060, JString, required = false,
                                 default = nil)
  if valid_580060 != nil:
    section.add "key", valid_580060
  var valid_580061 = query.getOrDefault("prettyPrint")
  valid_580061 = validateParameter(valid_580061, JBool, required = false,
                                 default = newJBool(true))
  if valid_580061 != nil:
    section.add "prettyPrint", valid_580061
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580062: Call_DfareportingAccountPermissionGroupsGet_580050;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one account permission group by ID.
  ## 
  let valid = call_580062.validator(path, query, header, formData, body)
  let scheme = call_580062.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580062.url(scheme.get, call_580062.host, call_580062.base,
                         call_580062.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580062, url, valid)

proc call*(call_580063: Call_DfareportingAccountPermissionGroupsGet_580050;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountPermissionGroupsGet
  ## Gets one account permission group by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Account permission group ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580064 = newJObject()
  var query_580065 = newJObject()
  add(path_580064, "profileId", newJString(profileId))
  add(query_580065, "fields", newJString(fields))
  add(query_580065, "quotaUser", newJString(quotaUser))
  add(query_580065, "alt", newJString(alt))
  add(query_580065, "oauth_token", newJString(oauthToken))
  add(query_580065, "userIp", newJString(userIp))
  add(path_580064, "id", newJString(id))
  add(query_580065, "key", newJString(key))
  add(query_580065, "prettyPrint", newJBool(prettyPrint))
  result = call_580063.call(path_580064, query_580065, nil, nil, nil)

var dfareportingAccountPermissionGroupsGet* = Call_DfareportingAccountPermissionGroupsGet_580050(
    name: "dfareportingAccountPermissionGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountPermissionGroups/{id}",
    validator: validate_DfareportingAccountPermissionGroupsGet_580051,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountPermissionGroupsGet_580052,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountPermissionsList_580066 = ref object of OpenApiRestCall_579437
proc url_DfareportingAccountPermissionsList_580068(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountPermissions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountPermissionsList_580067(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the list of account permissions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580069 = path.getOrDefault("profileId")
  valid_580069 = validateParameter(valid_580069, JString, required = true,
                                 default = nil)
  if valid_580069 != nil:
    section.add "profileId", valid_580069
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580070 = query.getOrDefault("fields")
  valid_580070 = validateParameter(valid_580070, JString, required = false,
                                 default = nil)
  if valid_580070 != nil:
    section.add "fields", valid_580070
  var valid_580071 = query.getOrDefault("quotaUser")
  valid_580071 = validateParameter(valid_580071, JString, required = false,
                                 default = nil)
  if valid_580071 != nil:
    section.add "quotaUser", valid_580071
  var valid_580072 = query.getOrDefault("alt")
  valid_580072 = validateParameter(valid_580072, JString, required = false,
                                 default = newJString("json"))
  if valid_580072 != nil:
    section.add "alt", valid_580072
  var valid_580073 = query.getOrDefault("oauth_token")
  valid_580073 = validateParameter(valid_580073, JString, required = false,
                                 default = nil)
  if valid_580073 != nil:
    section.add "oauth_token", valid_580073
  var valid_580074 = query.getOrDefault("userIp")
  valid_580074 = validateParameter(valid_580074, JString, required = false,
                                 default = nil)
  if valid_580074 != nil:
    section.add "userIp", valid_580074
  var valid_580075 = query.getOrDefault("key")
  valid_580075 = validateParameter(valid_580075, JString, required = false,
                                 default = nil)
  if valid_580075 != nil:
    section.add "key", valid_580075
  var valid_580076 = query.getOrDefault("prettyPrint")
  valid_580076 = validateParameter(valid_580076, JBool, required = false,
                                 default = newJBool(true))
  if valid_580076 != nil:
    section.add "prettyPrint", valid_580076
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580077: Call_DfareportingAccountPermissionsList_580066;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the list of account permissions.
  ## 
  let valid = call_580077.validator(path, query, header, formData, body)
  let scheme = call_580077.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580077.url(scheme.get, call_580077.host, call_580077.base,
                         call_580077.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580077, url, valid)

proc call*(call_580078: Call_DfareportingAccountPermissionsList_580066;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountPermissionsList
  ## Retrieves the list of account permissions.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580079 = newJObject()
  var query_580080 = newJObject()
  add(path_580079, "profileId", newJString(profileId))
  add(query_580080, "fields", newJString(fields))
  add(query_580080, "quotaUser", newJString(quotaUser))
  add(query_580080, "alt", newJString(alt))
  add(query_580080, "oauth_token", newJString(oauthToken))
  add(query_580080, "userIp", newJString(userIp))
  add(query_580080, "key", newJString(key))
  add(query_580080, "prettyPrint", newJBool(prettyPrint))
  result = call_580078.call(path_580079, query_580080, nil, nil, nil)

var dfareportingAccountPermissionsList* = Call_DfareportingAccountPermissionsList_580066(
    name: "dfareportingAccountPermissionsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountPermissions",
    validator: validate_DfareportingAccountPermissionsList_580067,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountPermissionsList_580068,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountPermissionsGet_580081 = ref object of OpenApiRestCall_579437
proc url_DfareportingAccountPermissionsGet_580083(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountPermissions/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountPermissionsGet_580082(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one account permission by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Account permission ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580084 = path.getOrDefault("profileId")
  valid_580084 = validateParameter(valid_580084, JString, required = true,
                                 default = nil)
  if valid_580084 != nil:
    section.add "profileId", valid_580084
  var valid_580085 = path.getOrDefault("id")
  valid_580085 = validateParameter(valid_580085, JString, required = true,
                                 default = nil)
  if valid_580085 != nil:
    section.add "id", valid_580085
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580086 = query.getOrDefault("fields")
  valid_580086 = validateParameter(valid_580086, JString, required = false,
                                 default = nil)
  if valid_580086 != nil:
    section.add "fields", valid_580086
  var valid_580087 = query.getOrDefault("quotaUser")
  valid_580087 = validateParameter(valid_580087, JString, required = false,
                                 default = nil)
  if valid_580087 != nil:
    section.add "quotaUser", valid_580087
  var valid_580088 = query.getOrDefault("alt")
  valid_580088 = validateParameter(valid_580088, JString, required = false,
                                 default = newJString("json"))
  if valid_580088 != nil:
    section.add "alt", valid_580088
  var valid_580089 = query.getOrDefault("oauth_token")
  valid_580089 = validateParameter(valid_580089, JString, required = false,
                                 default = nil)
  if valid_580089 != nil:
    section.add "oauth_token", valid_580089
  var valid_580090 = query.getOrDefault("userIp")
  valid_580090 = validateParameter(valid_580090, JString, required = false,
                                 default = nil)
  if valid_580090 != nil:
    section.add "userIp", valid_580090
  var valid_580091 = query.getOrDefault("key")
  valid_580091 = validateParameter(valid_580091, JString, required = false,
                                 default = nil)
  if valid_580091 != nil:
    section.add "key", valid_580091
  var valid_580092 = query.getOrDefault("prettyPrint")
  valid_580092 = validateParameter(valid_580092, JBool, required = false,
                                 default = newJBool(true))
  if valid_580092 != nil:
    section.add "prettyPrint", valid_580092
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580093: Call_DfareportingAccountPermissionsGet_580081;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one account permission by ID.
  ## 
  let valid = call_580093.validator(path, query, header, formData, body)
  let scheme = call_580093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580093.url(scheme.get, call_580093.host, call_580093.base,
                         call_580093.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580093, url, valid)

proc call*(call_580094: Call_DfareportingAccountPermissionsGet_580081;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountPermissionsGet
  ## Gets one account permission by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Account permission ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580095 = newJObject()
  var query_580096 = newJObject()
  add(path_580095, "profileId", newJString(profileId))
  add(query_580096, "fields", newJString(fields))
  add(query_580096, "quotaUser", newJString(quotaUser))
  add(query_580096, "alt", newJString(alt))
  add(query_580096, "oauth_token", newJString(oauthToken))
  add(query_580096, "userIp", newJString(userIp))
  add(path_580095, "id", newJString(id))
  add(query_580096, "key", newJString(key))
  add(query_580096, "prettyPrint", newJBool(prettyPrint))
  result = call_580094.call(path_580095, query_580096, nil, nil, nil)

var dfareportingAccountPermissionsGet* = Call_DfareportingAccountPermissionsGet_580081(
    name: "dfareportingAccountPermissionsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountPermissions/{id}",
    validator: validate_DfareportingAccountPermissionsGet_580082,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountPermissionsGet_580083,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesUpdate_580122 = ref object of OpenApiRestCall_579437
proc url_DfareportingAccountUserProfilesUpdate_580124(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesUpdate_580123(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing account user profile.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580125 = path.getOrDefault("profileId")
  valid_580125 = validateParameter(valid_580125, JString, required = true,
                                 default = nil)
  if valid_580125 != nil:
    section.add "profileId", valid_580125
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580126 = query.getOrDefault("fields")
  valid_580126 = validateParameter(valid_580126, JString, required = false,
                                 default = nil)
  if valid_580126 != nil:
    section.add "fields", valid_580126
  var valid_580127 = query.getOrDefault("quotaUser")
  valid_580127 = validateParameter(valid_580127, JString, required = false,
                                 default = nil)
  if valid_580127 != nil:
    section.add "quotaUser", valid_580127
  var valid_580128 = query.getOrDefault("alt")
  valid_580128 = validateParameter(valid_580128, JString, required = false,
                                 default = newJString("json"))
  if valid_580128 != nil:
    section.add "alt", valid_580128
  var valid_580129 = query.getOrDefault("oauth_token")
  valid_580129 = validateParameter(valid_580129, JString, required = false,
                                 default = nil)
  if valid_580129 != nil:
    section.add "oauth_token", valid_580129
  var valid_580130 = query.getOrDefault("userIp")
  valid_580130 = validateParameter(valid_580130, JString, required = false,
                                 default = nil)
  if valid_580130 != nil:
    section.add "userIp", valid_580130
  var valid_580131 = query.getOrDefault("key")
  valid_580131 = validateParameter(valid_580131, JString, required = false,
                                 default = nil)
  if valid_580131 != nil:
    section.add "key", valid_580131
  var valid_580132 = query.getOrDefault("prettyPrint")
  valid_580132 = validateParameter(valid_580132, JBool, required = false,
                                 default = newJBool(true))
  if valid_580132 != nil:
    section.add "prettyPrint", valid_580132
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580134: Call_DfareportingAccountUserProfilesUpdate_580122;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing account user profile.
  ## 
  let valid = call_580134.validator(path, query, header, formData, body)
  let scheme = call_580134.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580134.url(scheme.get, call_580134.host, call_580134.base,
                         call_580134.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580134, url, valid)

proc call*(call_580135: Call_DfareportingAccountUserProfilesUpdate_580122;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountUserProfilesUpdate
  ## Updates an existing account user profile.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580136 = newJObject()
  var query_580137 = newJObject()
  var body_580138 = newJObject()
  add(path_580136, "profileId", newJString(profileId))
  add(query_580137, "fields", newJString(fields))
  add(query_580137, "quotaUser", newJString(quotaUser))
  add(query_580137, "alt", newJString(alt))
  add(query_580137, "oauth_token", newJString(oauthToken))
  add(query_580137, "userIp", newJString(userIp))
  add(query_580137, "key", newJString(key))
  if body != nil:
    body_580138 = body
  add(query_580137, "prettyPrint", newJBool(prettyPrint))
  result = call_580135.call(path_580136, query_580137, nil, nil, body_580138)

var dfareportingAccountUserProfilesUpdate* = Call_DfareportingAccountUserProfilesUpdate_580122(
    name: "dfareportingAccountUserProfilesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles",
    validator: validate_DfareportingAccountUserProfilesUpdate_580123,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountUserProfilesUpdate_580124,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesInsert_580139 = ref object of OpenApiRestCall_579437
proc url_DfareportingAccountUserProfilesInsert_580141(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesInsert_580140(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new account user profile.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580142 = path.getOrDefault("profileId")
  valid_580142 = validateParameter(valid_580142, JString, required = true,
                                 default = nil)
  if valid_580142 != nil:
    section.add "profileId", valid_580142
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580143 = query.getOrDefault("fields")
  valid_580143 = validateParameter(valid_580143, JString, required = false,
                                 default = nil)
  if valid_580143 != nil:
    section.add "fields", valid_580143
  var valid_580144 = query.getOrDefault("quotaUser")
  valid_580144 = validateParameter(valid_580144, JString, required = false,
                                 default = nil)
  if valid_580144 != nil:
    section.add "quotaUser", valid_580144
  var valid_580145 = query.getOrDefault("alt")
  valid_580145 = validateParameter(valid_580145, JString, required = false,
                                 default = newJString("json"))
  if valid_580145 != nil:
    section.add "alt", valid_580145
  var valid_580146 = query.getOrDefault("oauth_token")
  valid_580146 = validateParameter(valid_580146, JString, required = false,
                                 default = nil)
  if valid_580146 != nil:
    section.add "oauth_token", valid_580146
  var valid_580147 = query.getOrDefault("userIp")
  valid_580147 = validateParameter(valid_580147, JString, required = false,
                                 default = nil)
  if valid_580147 != nil:
    section.add "userIp", valid_580147
  var valid_580148 = query.getOrDefault("key")
  valid_580148 = validateParameter(valid_580148, JString, required = false,
                                 default = nil)
  if valid_580148 != nil:
    section.add "key", valid_580148
  var valid_580149 = query.getOrDefault("prettyPrint")
  valid_580149 = validateParameter(valid_580149, JBool, required = false,
                                 default = newJBool(true))
  if valid_580149 != nil:
    section.add "prettyPrint", valid_580149
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580151: Call_DfareportingAccountUserProfilesInsert_580139;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new account user profile.
  ## 
  let valid = call_580151.validator(path, query, header, formData, body)
  let scheme = call_580151.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580151.url(scheme.get, call_580151.host, call_580151.base,
                         call_580151.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580151, url, valid)

proc call*(call_580152: Call_DfareportingAccountUserProfilesInsert_580139;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountUserProfilesInsert
  ## Inserts a new account user profile.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580153 = newJObject()
  var query_580154 = newJObject()
  var body_580155 = newJObject()
  add(path_580153, "profileId", newJString(profileId))
  add(query_580154, "fields", newJString(fields))
  add(query_580154, "quotaUser", newJString(quotaUser))
  add(query_580154, "alt", newJString(alt))
  add(query_580154, "oauth_token", newJString(oauthToken))
  add(query_580154, "userIp", newJString(userIp))
  add(query_580154, "key", newJString(key))
  if body != nil:
    body_580155 = body
  add(query_580154, "prettyPrint", newJBool(prettyPrint))
  result = call_580152.call(path_580153, query_580154, nil, nil, body_580155)

var dfareportingAccountUserProfilesInsert* = Call_DfareportingAccountUserProfilesInsert_580139(
    name: "dfareportingAccountUserProfilesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles",
    validator: validate_DfareportingAccountUserProfilesInsert_580140,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountUserProfilesInsert_580141,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesList_580097 = ref object of OpenApiRestCall_579437
proc url_DfareportingAccountUserProfilesList_580099(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesList_580098(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of account user profiles, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580100 = path.getOrDefault("profileId")
  valid_580100 = validateParameter(valid_580100, JString, required = true,
                                 default = nil)
  if valid_580100 != nil:
    section.add "profileId", valid_580100
  result.add "path", section
  ## parameters in `query` object:
  ##   subaccountId: JString
  ##               : Select only user profiles with the specified subaccount ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "user profile*2015" will return objects with names like "user profile June 2015", "user profile April 2015", or simply "user profile 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "user profile" will match objects with name "my user profile", "user profile 2015", or simply "user profile".
  ##   active: JBool
  ##         : Select only active user profiles.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only user profiles with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   userRoleId: JString
  ##             : Select only user profiles with the specified user role ID.
  section = newJObject()
  var valid_580101 = query.getOrDefault("subaccountId")
  valid_580101 = validateParameter(valid_580101, JString, required = false,
                                 default = nil)
  if valid_580101 != nil:
    section.add "subaccountId", valid_580101
  var valid_580102 = query.getOrDefault("fields")
  valid_580102 = validateParameter(valid_580102, JString, required = false,
                                 default = nil)
  if valid_580102 != nil:
    section.add "fields", valid_580102
  var valid_580103 = query.getOrDefault("pageToken")
  valid_580103 = validateParameter(valid_580103, JString, required = false,
                                 default = nil)
  if valid_580103 != nil:
    section.add "pageToken", valid_580103
  var valid_580104 = query.getOrDefault("quotaUser")
  valid_580104 = validateParameter(valid_580104, JString, required = false,
                                 default = nil)
  if valid_580104 != nil:
    section.add "quotaUser", valid_580104
  var valid_580105 = query.getOrDefault("sortField")
  valid_580105 = validateParameter(valid_580105, JString, required = false,
                                 default = newJString("ID"))
  if valid_580105 != nil:
    section.add "sortField", valid_580105
  var valid_580106 = query.getOrDefault("alt")
  valid_580106 = validateParameter(valid_580106, JString, required = false,
                                 default = newJString("json"))
  if valid_580106 != nil:
    section.add "alt", valid_580106
  var valid_580107 = query.getOrDefault("searchString")
  valid_580107 = validateParameter(valid_580107, JString, required = false,
                                 default = nil)
  if valid_580107 != nil:
    section.add "searchString", valid_580107
  var valid_580108 = query.getOrDefault("active")
  valid_580108 = validateParameter(valid_580108, JBool, required = false, default = nil)
  if valid_580108 != nil:
    section.add "active", valid_580108
  var valid_580109 = query.getOrDefault("oauth_token")
  valid_580109 = validateParameter(valid_580109, JString, required = false,
                                 default = nil)
  if valid_580109 != nil:
    section.add "oauth_token", valid_580109
  var valid_580110 = query.getOrDefault("userIp")
  valid_580110 = validateParameter(valid_580110, JString, required = false,
                                 default = nil)
  if valid_580110 != nil:
    section.add "userIp", valid_580110
  var valid_580112 = query.getOrDefault("maxResults")
  valid_580112 = validateParameter(valid_580112, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580112 != nil:
    section.add "maxResults", valid_580112
  var valid_580113 = query.getOrDefault("ids")
  valid_580113 = validateParameter(valid_580113, JArray, required = false,
                                 default = nil)
  if valid_580113 != nil:
    section.add "ids", valid_580113
  var valid_580114 = query.getOrDefault("key")
  valid_580114 = validateParameter(valid_580114, JString, required = false,
                                 default = nil)
  if valid_580114 != nil:
    section.add "key", valid_580114
  var valid_580115 = query.getOrDefault("sortOrder")
  valid_580115 = validateParameter(valid_580115, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580115 != nil:
    section.add "sortOrder", valid_580115
  var valid_580116 = query.getOrDefault("prettyPrint")
  valid_580116 = validateParameter(valid_580116, JBool, required = false,
                                 default = newJBool(true))
  if valid_580116 != nil:
    section.add "prettyPrint", valid_580116
  var valid_580117 = query.getOrDefault("userRoleId")
  valid_580117 = validateParameter(valid_580117, JString, required = false,
                                 default = nil)
  if valid_580117 != nil:
    section.add "userRoleId", valid_580117
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580118: Call_DfareportingAccountUserProfilesList_580097;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of account user profiles, possibly filtered. This method supports paging.
  ## 
  let valid = call_580118.validator(path, query, header, formData, body)
  let scheme = call_580118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580118.url(scheme.get, call_580118.host, call_580118.base,
                         call_580118.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580118, url, valid)

proc call*(call_580119: Call_DfareportingAccountUserProfilesList_580097;
          profileId: string; subaccountId: string = ""; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; sortField: string = "ID";
          alt: string = "json"; searchString: string = ""; active: bool = false;
          oauthToken: string = ""; userIp: string = ""; maxResults: int = 1000;
          ids: JsonNode = nil; key: string = ""; sortOrder: string = "ASCENDING";
          prettyPrint: bool = true; userRoleId: string = ""): Recallable =
  ## dfareportingAccountUserProfilesList
  ## Retrieves a list of account user profiles, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   subaccountId: string
  ##               : Select only user profiles with the specified subaccount ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "user profile*2015" will return objects with names like "user profile June 2015", "user profile April 2015", or simply "user profile 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "user profile" will match objects with name "my user profile", "user profile 2015", or simply "user profile".
  ##   active: bool
  ##         : Select only active user profiles.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only user profiles with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   userRoleId: string
  ##             : Select only user profiles with the specified user role ID.
  var path_580120 = newJObject()
  var query_580121 = newJObject()
  add(path_580120, "profileId", newJString(profileId))
  add(query_580121, "subaccountId", newJString(subaccountId))
  add(query_580121, "fields", newJString(fields))
  add(query_580121, "pageToken", newJString(pageToken))
  add(query_580121, "quotaUser", newJString(quotaUser))
  add(query_580121, "sortField", newJString(sortField))
  add(query_580121, "alt", newJString(alt))
  add(query_580121, "searchString", newJString(searchString))
  add(query_580121, "active", newJBool(active))
  add(query_580121, "oauth_token", newJString(oauthToken))
  add(query_580121, "userIp", newJString(userIp))
  add(query_580121, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_580121.add "ids", ids
  add(query_580121, "key", newJString(key))
  add(query_580121, "sortOrder", newJString(sortOrder))
  add(query_580121, "prettyPrint", newJBool(prettyPrint))
  add(query_580121, "userRoleId", newJString(userRoleId))
  result = call_580119.call(path_580120, query_580121, nil, nil, nil)

var dfareportingAccountUserProfilesList* = Call_DfareportingAccountUserProfilesList_580097(
    name: "dfareportingAccountUserProfilesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles",
    validator: validate_DfareportingAccountUserProfilesList_580098,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountUserProfilesList_580099,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesPatch_580156 = ref object of OpenApiRestCall_579437
proc url_DfareportingAccountUserProfilesPatch_580158(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesPatch_580157(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing account user profile. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580159 = path.getOrDefault("profileId")
  valid_580159 = validateParameter(valid_580159, JString, required = true,
                                 default = nil)
  if valid_580159 != nil:
    section.add "profileId", valid_580159
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : User profile ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580160 = query.getOrDefault("fields")
  valid_580160 = validateParameter(valid_580160, JString, required = false,
                                 default = nil)
  if valid_580160 != nil:
    section.add "fields", valid_580160
  var valid_580161 = query.getOrDefault("quotaUser")
  valid_580161 = validateParameter(valid_580161, JString, required = false,
                                 default = nil)
  if valid_580161 != nil:
    section.add "quotaUser", valid_580161
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580162 = query.getOrDefault("id")
  valid_580162 = validateParameter(valid_580162, JString, required = true,
                                 default = nil)
  if valid_580162 != nil:
    section.add "id", valid_580162
  var valid_580163 = query.getOrDefault("alt")
  valid_580163 = validateParameter(valid_580163, JString, required = false,
                                 default = newJString("json"))
  if valid_580163 != nil:
    section.add "alt", valid_580163
  var valid_580164 = query.getOrDefault("oauth_token")
  valid_580164 = validateParameter(valid_580164, JString, required = false,
                                 default = nil)
  if valid_580164 != nil:
    section.add "oauth_token", valid_580164
  var valid_580165 = query.getOrDefault("userIp")
  valid_580165 = validateParameter(valid_580165, JString, required = false,
                                 default = nil)
  if valid_580165 != nil:
    section.add "userIp", valid_580165
  var valid_580166 = query.getOrDefault("key")
  valid_580166 = validateParameter(valid_580166, JString, required = false,
                                 default = nil)
  if valid_580166 != nil:
    section.add "key", valid_580166
  var valid_580167 = query.getOrDefault("prettyPrint")
  valid_580167 = validateParameter(valid_580167, JBool, required = false,
                                 default = newJBool(true))
  if valid_580167 != nil:
    section.add "prettyPrint", valid_580167
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580169: Call_DfareportingAccountUserProfilesPatch_580156;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing account user profile. This method supports patch semantics.
  ## 
  let valid = call_580169.validator(path, query, header, formData, body)
  let scheme = call_580169.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580169.url(scheme.get, call_580169.host, call_580169.base,
                         call_580169.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580169, url, valid)

proc call*(call_580170: Call_DfareportingAccountUserProfilesPatch_580156;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountUserProfilesPatch
  ## Updates an existing account user profile. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : User profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580171 = newJObject()
  var query_580172 = newJObject()
  var body_580173 = newJObject()
  add(path_580171, "profileId", newJString(profileId))
  add(query_580172, "fields", newJString(fields))
  add(query_580172, "quotaUser", newJString(quotaUser))
  add(query_580172, "id", newJString(id))
  add(query_580172, "alt", newJString(alt))
  add(query_580172, "oauth_token", newJString(oauthToken))
  add(query_580172, "userIp", newJString(userIp))
  add(query_580172, "key", newJString(key))
  if body != nil:
    body_580173 = body
  add(query_580172, "prettyPrint", newJBool(prettyPrint))
  result = call_580170.call(path_580171, query_580172, nil, nil, body_580173)

var dfareportingAccountUserProfilesPatch* = Call_DfareportingAccountUserProfilesPatch_580156(
    name: "dfareportingAccountUserProfilesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles",
    validator: validate_DfareportingAccountUserProfilesPatch_580157,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountUserProfilesPatch_580158,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesGet_580174 = ref object of OpenApiRestCall_579437
proc url_DfareportingAccountUserProfilesGet_580176(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesGet_580175(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one account user profile by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580177 = path.getOrDefault("profileId")
  valid_580177 = validateParameter(valid_580177, JString, required = true,
                                 default = nil)
  if valid_580177 != nil:
    section.add "profileId", valid_580177
  var valid_580178 = path.getOrDefault("id")
  valid_580178 = validateParameter(valid_580178, JString, required = true,
                                 default = nil)
  if valid_580178 != nil:
    section.add "id", valid_580178
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580179 = query.getOrDefault("fields")
  valid_580179 = validateParameter(valid_580179, JString, required = false,
                                 default = nil)
  if valid_580179 != nil:
    section.add "fields", valid_580179
  var valid_580180 = query.getOrDefault("quotaUser")
  valid_580180 = validateParameter(valid_580180, JString, required = false,
                                 default = nil)
  if valid_580180 != nil:
    section.add "quotaUser", valid_580180
  var valid_580181 = query.getOrDefault("alt")
  valid_580181 = validateParameter(valid_580181, JString, required = false,
                                 default = newJString("json"))
  if valid_580181 != nil:
    section.add "alt", valid_580181
  var valid_580182 = query.getOrDefault("oauth_token")
  valid_580182 = validateParameter(valid_580182, JString, required = false,
                                 default = nil)
  if valid_580182 != nil:
    section.add "oauth_token", valid_580182
  var valid_580183 = query.getOrDefault("userIp")
  valid_580183 = validateParameter(valid_580183, JString, required = false,
                                 default = nil)
  if valid_580183 != nil:
    section.add "userIp", valid_580183
  var valid_580184 = query.getOrDefault("key")
  valid_580184 = validateParameter(valid_580184, JString, required = false,
                                 default = nil)
  if valid_580184 != nil:
    section.add "key", valid_580184
  var valid_580185 = query.getOrDefault("prettyPrint")
  valid_580185 = validateParameter(valid_580185, JBool, required = false,
                                 default = newJBool(true))
  if valid_580185 != nil:
    section.add "prettyPrint", valid_580185
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580186: Call_DfareportingAccountUserProfilesGet_580174;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one account user profile by ID.
  ## 
  let valid = call_580186.validator(path, query, header, formData, body)
  let scheme = call_580186.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580186.url(scheme.get, call_580186.host, call_580186.base,
                         call_580186.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580186, url, valid)

proc call*(call_580187: Call_DfareportingAccountUserProfilesGet_580174;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountUserProfilesGet
  ## Gets one account user profile by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : User profile ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580188 = newJObject()
  var query_580189 = newJObject()
  add(path_580188, "profileId", newJString(profileId))
  add(query_580189, "fields", newJString(fields))
  add(query_580189, "quotaUser", newJString(quotaUser))
  add(query_580189, "alt", newJString(alt))
  add(query_580189, "oauth_token", newJString(oauthToken))
  add(query_580189, "userIp", newJString(userIp))
  add(path_580188, "id", newJString(id))
  add(query_580189, "key", newJString(key))
  add(query_580189, "prettyPrint", newJBool(prettyPrint))
  result = call_580187.call(path_580188, query_580189, nil, nil, nil)

var dfareportingAccountUserProfilesGet* = Call_DfareportingAccountUserProfilesGet_580174(
    name: "dfareportingAccountUserProfilesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles/{id}",
    validator: validate_DfareportingAccountUserProfilesGet_580175,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountUserProfilesGet_580176,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountsUpdate_580212 = ref object of OpenApiRestCall_579437
proc url_DfareportingAccountsUpdate_580214(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountsUpdate_580213(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing account.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580215 = path.getOrDefault("profileId")
  valid_580215 = validateParameter(valid_580215, JString, required = true,
                                 default = nil)
  if valid_580215 != nil:
    section.add "profileId", valid_580215
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580216 = query.getOrDefault("fields")
  valid_580216 = validateParameter(valid_580216, JString, required = false,
                                 default = nil)
  if valid_580216 != nil:
    section.add "fields", valid_580216
  var valid_580217 = query.getOrDefault("quotaUser")
  valid_580217 = validateParameter(valid_580217, JString, required = false,
                                 default = nil)
  if valid_580217 != nil:
    section.add "quotaUser", valid_580217
  var valid_580218 = query.getOrDefault("alt")
  valid_580218 = validateParameter(valid_580218, JString, required = false,
                                 default = newJString("json"))
  if valid_580218 != nil:
    section.add "alt", valid_580218
  var valid_580219 = query.getOrDefault("oauth_token")
  valid_580219 = validateParameter(valid_580219, JString, required = false,
                                 default = nil)
  if valid_580219 != nil:
    section.add "oauth_token", valid_580219
  var valid_580220 = query.getOrDefault("userIp")
  valid_580220 = validateParameter(valid_580220, JString, required = false,
                                 default = nil)
  if valid_580220 != nil:
    section.add "userIp", valid_580220
  var valid_580221 = query.getOrDefault("key")
  valid_580221 = validateParameter(valid_580221, JString, required = false,
                                 default = nil)
  if valid_580221 != nil:
    section.add "key", valid_580221
  var valid_580222 = query.getOrDefault("prettyPrint")
  valid_580222 = validateParameter(valid_580222, JBool, required = false,
                                 default = newJBool(true))
  if valid_580222 != nil:
    section.add "prettyPrint", valid_580222
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580224: Call_DfareportingAccountsUpdate_580212; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing account.
  ## 
  let valid = call_580224.validator(path, query, header, formData, body)
  let scheme = call_580224.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580224.url(scheme.get, call_580224.host, call_580224.base,
                         call_580224.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580224, url, valid)

proc call*(call_580225: Call_DfareportingAccountsUpdate_580212; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountsUpdate
  ## Updates an existing account.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580226 = newJObject()
  var query_580227 = newJObject()
  var body_580228 = newJObject()
  add(path_580226, "profileId", newJString(profileId))
  add(query_580227, "fields", newJString(fields))
  add(query_580227, "quotaUser", newJString(quotaUser))
  add(query_580227, "alt", newJString(alt))
  add(query_580227, "oauth_token", newJString(oauthToken))
  add(query_580227, "userIp", newJString(userIp))
  add(query_580227, "key", newJString(key))
  if body != nil:
    body_580228 = body
  add(query_580227, "prettyPrint", newJBool(prettyPrint))
  result = call_580225.call(path_580226, query_580227, nil, nil, body_580228)

var dfareportingAccountsUpdate* = Call_DfareportingAccountsUpdate_580212(
    name: "dfareportingAccountsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accounts",
    validator: validate_DfareportingAccountsUpdate_580213,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountsUpdate_580214,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountsList_580190 = ref object of OpenApiRestCall_579437
proc url_DfareportingAccountsList_580192(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountsList_580191(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the list of accounts, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580193 = path.getOrDefault("profileId")
  valid_580193 = validateParameter(valid_580193, JString, required = true,
                                 default = nil)
  if valid_580193 != nil:
    section.add "profileId", valid_580193
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "account*2015" will return objects with names like "account June 2015", "account April 2015", or simply "account 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "account" will match objects with name "my account", "account 2015", or simply "account".
  ##   active: JBool
  ##         : Select only active accounts. Don't set this field to select both active and non-active accounts.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only accounts with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580194 = query.getOrDefault("fields")
  valid_580194 = validateParameter(valid_580194, JString, required = false,
                                 default = nil)
  if valid_580194 != nil:
    section.add "fields", valid_580194
  var valid_580195 = query.getOrDefault("pageToken")
  valid_580195 = validateParameter(valid_580195, JString, required = false,
                                 default = nil)
  if valid_580195 != nil:
    section.add "pageToken", valid_580195
  var valid_580196 = query.getOrDefault("quotaUser")
  valid_580196 = validateParameter(valid_580196, JString, required = false,
                                 default = nil)
  if valid_580196 != nil:
    section.add "quotaUser", valid_580196
  var valid_580197 = query.getOrDefault("sortField")
  valid_580197 = validateParameter(valid_580197, JString, required = false,
                                 default = newJString("ID"))
  if valid_580197 != nil:
    section.add "sortField", valid_580197
  var valid_580198 = query.getOrDefault("alt")
  valid_580198 = validateParameter(valid_580198, JString, required = false,
                                 default = newJString("json"))
  if valid_580198 != nil:
    section.add "alt", valid_580198
  var valid_580199 = query.getOrDefault("searchString")
  valid_580199 = validateParameter(valid_580199, JString, required = false,
                                 default = nil)
  if valid_580199 != nil:
    section.add "searchString", valid_580199
  var valid_580200 = query.getOrDefault("active")
  valid_580200 = validateParameter(valid_580200, JBool, required = false, default = nil)
  if valid_580200 != nil:
    section.add "active", valid_580200
  var valid_580201 = query.getOrDefault("oauth_token")
  valid_580201 = validateParameter(valid_580201, JString, required = false,
                                 default = nil)
  if valid_580201 != nil:
    section.add "oauth_token", valid_580201
  var valid_580202 = query.getOrDefault("userIp")
  valid_580202 = validateParameter(valid_580202, JString, required = false,
                                 default = nil)
  if valid_580202 != nil:
    section.add "userIp", valid_580202
  var valid_580203 = query.getOrDefault("maxResults")
  valid_580203 = validateParameter(valid_580203, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580203 != nil:
    section.add "maxResults", valid_580203
  var valid_580204 = query.getOrDefault("ids")
  valid_580204 = validateParameter(valid_580204, JArray, required = false,
                                 default = nil)
  if valid_580204 != nil:
    section.add "ids", valid_580204
  var valid_580205 = query.getOrDefault("key")
  valid_580205 = validateParameter(valid_580205, JString, required = false,
                                 default = nil)
  if valid_580205 != nil:
    section.add "key", valid_580205
  var valid_580206 = query.getOrDefault("sortOrder")
  valid_580206 = validateParameter(valid_580206, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580206 != nil:
    section.add "sortOrder", valid_580206
  var valid_580207 = query.getOrDefault("prettyPrint")
  valid_580207 = validateParameter(valid_580207, JBool, required = false,
                                 default = newJBool(true))
  if valid_580207 != nil:
    section.add "prettyPrint", valid_580207
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580208: Call_DfareportingAccountsList_580190; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the list of accounts, possibly filtered. This method supports paging.
  ## 
  let valid = call_580208.validator(path, query, header, formData, body)
  let scheme = call_580208.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580208.url(scheme.get, call_580208.host, call_580208.base,
                         call_580208.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580208, url, valid)

proc call*(call_580209: Call_DfareportingAccountsList_580190; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "ID"; alt: string = "json"; searchString: string = "";
          active: bool = false; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountsList
  ## Retrieves the list of accounts, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "account*2015" will return objects with names like "account June 2015", "account April 2015", or simply "account 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "account" will match objects with name "my account", "account 2015", or simply "account".
  ##   active: bool
  ##         : Select only active accounts. Don't set this field to select both active and non-active accounts.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only accounts with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580210 = newJObject()
  var query_580211 = newJObject()
  add(path_580210, "profileId", newJString(profileId))
  add(query_580211, "fields", newJString(fields))
  add(query_580211, "pageToken", newJString(pageToken))
  add(query_580211, "quotaUser", newJString(quotaUser))
  add(query_580211, "sortField", newJString(sortField))
  add(query_580211, "alt", newJString(alt))
  add(query_580211, "searchString", newJString(searchString))
  add(query_580211, "active", newJBool(active))
  add(query_580211, "oauth_token", newJString(oauthToken))
  add(query_580211, "userIp", newJString(userIp))
  add(query_580211, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_580211.add "ids", ids
  add(query_580211, "key", newJString(key))
  add(query_580211, "sortOrder", newJString(sortOrder))
  add(query_580211, "prettyPrint", newJBool(prettyPrint))
  result = call_580209.call(path_580210, query_580211, nil, nil, nil)

var dfareportingAccountsList* = Call_DfareportingAccountsList_580190(
    name: "dfareportingAccountsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accounts",
    validator: validate_DfareportingAccountsList_580191,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountsList_580192,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountsPatch_580229 = ref object of OpenApiRestCall_579437
proc url_DfareportingAccountsPatch_580231(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountsPatch_580230(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing account. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580232 = path.getOrDefault("profileId")
  valid_580232 = validateParameter(valid_580232, JString, required = true,
                                 default = nil)
  if valid_580232 != nil:
    section.add "profileId", valid_580232
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Account ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580233 = query.getOrDefault("fields")
  valid_580233 = validateParameter(valid_580233, JString, required = false,
                                 default = nil)
  if valid_580233 != nil:
    section.add "fields", valid_580233
  var valid_580234 = query.getOrDefault("quotaUser")
  valid_580234 = validateParameter(valid_580234, JString, required = false,
                                 default = nil)
  if valid_580234 != nil:
    section.add "quotaUser", valid_580234
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580235 = query.getOrDefault("id")
  valid_580235 = validateParameter(valid_580235, JString, required = true,
                                 default = nil)
  if valid_580235 != nil:
    section.add "id", valid_580235
  var valid_580236 = query.getOrDefault("alt")
  valid_580236 = validateParameter(valid_580236, JString, required = false,
                                 default = newJString("json"))
  if valid_580236 != nil:
    section.add "alt", valid_580236
  var valid_580237 = query.getOrDefault("oauth_token")
  valid_580237 = validateParameter(valid_580237, JString, required = false,
                                 default = nil)
  if valid_580237 != nil:
    section.add "oauth_token", valid_580237
  var valid_580238 = query.getOrDefault("userIp")
  valid_580238 = validateParameter(valid_580238, JString, required = false,
                                 default = nil)
  if valid_580238 != nil:
    section.add "userIp", valid_580238
  var valid_580239 = query.getOrDefault("key")
  valid_580239 = validateParameter(valid_580239, JString, required = false,
                                 default = nil)
  if valid_580239 != nil:
    section.add "key", valid_580239
  var valid_580240 = query.getOrDefault("prettyPrint")
  valid_580240 = validateParameter(valid_580240, JBool, required = false,
                                 default = newJBool(true))
  if valid_580240 != nil:
    section.add "prettyPrint", valid_580240
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580242: Call_DfareportingAccountsPatch_580229; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing account. This method supports patch semantics.
  ## 
  let valid = call_580242.validator(path, query, header, formData, body)
  let scheme = call_580242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580242.url(scheme.get, call_580242.host, call_580242.base,
                         call_580242.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580242, url, valid)

proc call*(call_580243: Call_DfareportingAccountsPatch_580229; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountsPatch
  ## Updates an existing account. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Account ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580244 = newJObject()
  var query_580245 = newJObject()
  var body_580246 = newJObject()
  add(path_580244, "profileId", newJString(profileId))
  add(query_580245, "fields", newJString(fields))
  add(query_580245, "quotaUser", newJString(quotaUser))
  add(query_580245, "id", newJString(id))
  add(query_580245, "alt", newJString(alt))
  add(query_580245, "oauth_token", newJString(oauthToken))
  add(query_580245, "userIp", newJString(userIp))
  add(query_580245, "key", newJString(key))
  if body != nil:
    body_580246 = body
  add(query_580245, "prettyPrint", newJBool(prettyPrint))
  result = call_580243.call(path_580244, query_580245, nil, nil, body_580246)

var dfareportingAccountsPatch* = Call_DfareportingAccountsPatch_580229(
    name: "dfareportingAccountsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accounts",
    validator: validate_DfareportingAccountsPatch_580230,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountsPatch_580231,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountsGet_580247 = ref object of OpenApiRestCall_579437
proc url_DfareportingAccountsGet_580249(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accounts/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountsGet_580248(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one account by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Account ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580250 = path.getOrDefault("profileId")
  valid_580250 = validateParameter(valid_580250, JString, required = true,
                                 default = nil)
  if valid_580250 != nil:
    section.add "profileId", valid_580250
  var valid_580251 = path.getOrDefault("id")
  valid_580251 = validateParameter(valid_580251, JString, required = true,
                                 default = nil)
  if valid_580251 != nil:
    section.add "id", valid_580251
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580252 = query.getOrDefault("fields")
  valid_580252 = validateParameter(valid_580252, JString, required = false,
                                 default = nil)
  if valid_580252 != nil:
    section.add "fields", valid_580252
  var valid_580253 = query.getOrDefault("quotaUser")
  valid_580253 = validateParameter(valid_580253, JString, required = false,
                                 default = nil)
  if valid_580253 != nil:
    section.add "quotaUser", valid_580253
  var valid_580254 = query.getOrDefault("alt")
  valid_580254 = validateParameter(valid_580254, JString, required = false,
                                 default = newJString("json"))
  if valid_580254 != nil:
    section.add "alt", valid_580254
  var valid_580255 = query.getOrDefault("oauth_token")
  valid_580255 = validateParameter(valid_580255, JString, required = false,
                                 default = nil)
  if valid_580255 != nil:
    section.add "oauth_token", valid_580255
  var valid_580256 = query.getOrDefault("userIp")
  valid_580256 = validateParameter(valid_580256, JString, required = false,
                                 default = nil)
  if valid_580256 != nil:
    section.add "userIp", valid_580256
  var valid_580257 = query.getOrDefault("key")
  valid_580257 = validateParameter(valid_580257, JString, required = false,
                                 default = nil)
  if valid_580257 != nil:
    section.add "key", valid_580257
  var valid_580258 = query.getOrDefault("prettyPrint")
  valid_580258 = validateParameter(valid_580258, JBool, required = false,
                                 default = newJBool(true))
  if valid_580258 != nil:
    section.add "prettyPrint", valid_580258
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580259: Call_DfareportingAccountsGet_580247; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one account by ID.
  ## 
  let valid = call_580259.validator(path, query, header, formData, body)
  let scheme = call_580259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580259.url(scheme.get, call_580259.host, call_580259.base,
                         call_580259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580259, url, valid)

proc call*(call_580260: Call_DfareportingAccountsGet_580247; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingAccountsGet
  ## Gets one account by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Account ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580261 = newJObject()
  var query_580262 = newJObject()
  add(path_580261, "profileId", newJString(profileId))
  add(query_580262, "fields", newJString(fields))
  add(query_580262, "quotaUser", newJString(quotaUser))
  add(query_580262, "alt", newJString(alt))
  add(query_580262, "oauth_token", newJString(oauthToken))
  add(query_580262, "userIp", newJString(userIp))
  add(path_580261, "id", newJString(id))
  add(query_580262, "key", newJString(key))
  add(query_580262, "prettyPrint", newJBool(prettyPrint))
  result = call_580260.call(path_580261, query_580262, nil, nil, nil)

var dfareportingAccountsGet* = Call_DfareportingAccountsGet_580247(
    name: "dfareportingAccountsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accounts/{id}",
    validator: validate_DfareportingAccountsGet_580248,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountsGet_580249,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdsUpdate_580301 = ref object of OpenApiRestCall_579437
proc url_DfareportingAdsUpdate_580303(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsUpdate_580302(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing ad.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580304 = path.getOrDefault("profileId")
  valid_580304 = validateParameter(valid_580304, JString, required = true,
                                 default = nil)
  if valid_580304 != nil:
    section.add "profileId", valid_580304
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580305 = query.getOrDefault("fields")
  valid_580305 = validateParameter(valid_580305, JString, required = false,
                                 default = nil)
  if valid_580305 != nil:
    section.add "fields", valid_580305
  var valid_580306 = query.getOrDefault("quotaUser")
  valid_580306 = validateParameter(valid_580306, JString, required = false,
                                 default = nil)
  if valid_580306 != nil:
    section.add "quotaUser", valid_580306
  var valid_580307 = query.getOrDefault("alt")
  valid_580307 = validateParameter(valid_580307, JString, required = false,
                                 default = newJString("json"))
  if valid_580307 != nil:
    section.add "alt", valid_580307
  var valid_580308 = query.getOrDefault("oauth_token")
  valid_580308 = validateParameter(valid_580308, JString, required = false,
                                 default = nil)
  if valid_580308 != nil:
    section.add "oauth_token", valid_580308
  var valid_580309 = query.getOrDefault("userIp")
  valid_580309 = validateParameter(valid_580309, JString, required = false,
                                 default = nil)
  if valid_580309 != nil:
    section.add "userIp", valid_580309
  var valid_580310 = query.getOrDefault("key")
  valid_580310 = validateParameter(valid_580310, JString, required = false,
                                 default = nil)
  if valid_580310 != nil:
    section.add "key", valid_580310
  var valid_580311 = query.getOrDefault("prettyPrint")
  valid_580311 = validateParameter(valid_580311, JBool, required = false,
                                 default = newJBool(true))
  if valid_580311 != nil:
    section.add "prettyPrint", valid_580311
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580313: Call_DfareportingAdsUpdate_580301; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing ad.
  ## 
  let valid = call_580313.validator(path, query, header, formData, body)
  let scheme = call_580313.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580313.url(scheme.get, call_580313.host, call_580313.base,
                         call_580313.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580313, url, valid)

proc call*(call_580314: Call_DfareportingAdsUpdate_580301; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdsUpdate
  ## Updates an existing ad.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580315 = newJObject()
  var query_580316 = newJObject()
  var body_580317 = newJObject()
  add(path_580315, "profileId", newJString(profileId))
  add(query_580316, "fields", newJString(fields))
  add(query_580316, "quotaUser", newJString(quotaUser))
  add(query_580316, "alt", newJString(alt))
  add(query_580316, "oauth_token", newJString(oauthToken))
  add(query_580316, "userIp", newJString(userIp))
  add(query_580316, "key", newJString(key))
  if body != nil:
    body_580317 = body
  add(query_580316, "prettyPrint", newJBool(prettyPrint))
  result = call_580314.call(path_580315, query_580316, nil, nil, body_580317)

var dfareportingAdsUpdate* = Call_DfareportingAdsUpdate_580301(
    name: "dfareportingAdsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads",
    validator: validate_DfareportingAdsUpdate_580302, base: "/dfareporting/v3.2",
    url: url_DfareportingAdsUpdate_580303, schemes: {Scheme.Https})
type
  Call_DfareportingAdsInsert_580318 = ref object of OpenApiRestCall_579437
proc url_DfareportingAdsInsert_580320(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsInsert_580319(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new ad.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580321 = path.getOrDefault("profileId")
  valid_580321 = validateParameter(valid_580321, JString, required = true,
                                 default = nil)
  if valid_580321 != nil:
    section.add "profileId", valid_580321
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580322 = query.getOrDefault("fields")
  valid_580322 = validateParameter(valid_580322, JString, required = false,
                                 default = nil)
  if valid_580322 != nil:
    section.add "fields", valid_580322
  var valid_580323 = query.getOrDefault("quotaUser")
  valid_580323 = validateParameter(valid_580323, JString, required = false,
                                 default = nil)
  if valid_580323 != nil:
    section.add "quotaUser", valid_580323
  var valid_580324 = query.getOrDefault("alt")
  valid_580324 = validateParameter(valid_580324, JString, required = false,
                                 default = newJString("json"))
  if valid_580324 != nil:
    section.add "alt", valid_580324
  var valid_580325 = query.getOrDefault("oauth_token")
  valid_580325 = validateParameter(valid_580325, JString, required = false,
                                 default = nil)
  if valid_580325 != nil:
    section.add "oauth_token", valid_580325
  var valid_580326 = query.getOrDefault("userIp")
  valid_580326 = validateParameter(valid_580326, JString, required = false,
                                 default = nil)
  if valid_580326 != nil:
    section.add "userIp", valid_580326
  var valid_580327 = query.getOrDefault("key")
  valid_580327 = validateParameter(valid_580327, JString, required = false,
                                 default = nil)
  if valid_580327 != nil:
    section.add "key", valid_580327
  var valid_580328 = query.getOrDefault("prettyPrint")
  valid_580328 = validateParameter(valid_580328, JBool, required = false,
                                 default = newJBool(true))
  if valid_580328 != nil:
    section.add "prettyPrint", valid_580328
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580330: Call_DfareportingAdsInsert_580318; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new ad.
  ## 
  let valid = call_580330.validator(path, query, header, formData, body)
  let scheme = call_580330.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580330.url(scheme.get, call_580330.host, call_580330.base,
                         call_580330.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580330, url, valid)

proc call*(call_580331: Call_DfareportingAdsInsert_580318; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdsInsert
  ## Inserts a new ad.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580332 = newJObject()
  var query_580333 = newJObject()
  var body_580334 = newJObject()
  add(path_580332, "profileId", newJString(profileId))
  add(query_580333, "fields", newJString(fields))
  add(query_580333, "quotaUser", newJString(quotaUser))
  add(query_580333, "alt", newJString(alt))
  add(query_580333, "oauth_token", newJString(oauthToken))
  add(query_580333, "userIp", newJString(userIp))
  add(query_580333, "key", newJString(key))
  if body != nil:
    body_580334 = body
  add(query_580333, "prettyPrint", newJBool(prettyPrint))
  result = call_580331.call(path_580332, query_580333, nil, nil, body_580334)

var dfareportingAdsInsert* = Call_DfareportingAdsInsert_580318(
    name: "dfareportingAdsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads",
    validator: validate_DfareportingAdsInsert_580319, base: "/dfareporting/v3.2",
    url: url_DfareportingAdsInsert_580320, schemes: {Scheme.Https})
type
  Call_DfareportingAdsList_580263 = ref object of OpenApiRestCall_579437
proc url_DfareportingAdsList_580265(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsList_580264(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Retrieves a list of ads, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580266 = path.getOrDefault("profileId")
  valid_580266 = validateParameter(valid_580266, JString, required = true,
                                 default = nil)
  if valid_580266 != nil:
    section.add "profileId", valid_580266
  result.add "path", section
  ## parameters in `query` object:
  ##   overriddenEventTagId: JString
  ##                       : Select only ads with this event tag override ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   creativeIds: JArray
  ##              : Select only ads with these creative IDs assigned.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   sslCompliant: JBool
  ##               : Select only ads that are SSL-compliant.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "ad*2015" will return objects with names like "ad June 2015", "ad April 2015", or simply "ad 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "ad" will match objects with name "my ad", "ad 2015", or simply "ad".
  ##   advertiserId: JString
  ##               : Select only ads with this advertiser ID.
  ##   dynamicClickTracker: JBool
  ##                      : Select only dynamic click trackers. Applicable when type is AD_SERVING_CLICK_TRACKER. If true, select dynamic click trackers. If false, select static click trackers. Leave unset to select both.
  ##   sizeIds: JArray
  ##          : Select only ads with these size IDs.
  ##   type: JArray
  ##       : Select only ads with these types.
  ##   active: JBool
  ##         : Select only active ads.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   campaignIds: JArray
  ##              : Select only ads with these campaign IDs.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   creativeOptimizationConfigurationIds: JArray
  ##                                       : Select only ads with these creative optimization configuration IDs.
  ##   archived: JBool
  ##           : Select only archived ads.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only ads with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   compatibility: JString
  ##                : Select default ads with the specified compatibility. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering an in-stream video ads developed with the VAST standard.
  ##   landingPageIds: JArray
  ##                 : Select only ads with these landing page IDs.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   remarketingListIds: JArray
  ##                     : Select only ads whose list targeting expression use these remarketing list IDs.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   sslRequired: JBool
  ##              : Select only ads that require SSL.
  ##   audienceSegmentIds: JArray
  ##                     : Select only ads with these audience segment IDs.
  ##   placementIds: JArray
  ##               : Select only ads with these placement IDs assigned.
  section = newJObject()
  var valid_580267 = query.getOrDefault("overriddenEventTagId")
  valid_580267 = validateParameter(valid_580267, JString, required = false,
                                 default = nil)
  if valid_580267 != nil:
    section.add "overriddenEventTagId", valid_580267
  var valid_580268 = query.getOrDefault("fields")
  valid_580268 = validateParameter(valid_580268, JString, required = false,
                                 default = nil)
  if valid_580268 != nil:
    section.add "fields", valid_580268
  var valid_580269 = query.getOrDefault("creativeIds")
  valid_580269 = validateParameter(valid_580269, JArray, required = false,
                                 default = nil)
  if valid_580269 != nil:
    section.add "creativeIds", valid_580269
  var valid_580270 = query.getOrDefault("quotaUser")
  valid_580270 = validateParameter(valid_580270, JString, required = false,
                                 default = nil)
  if valid_580270 != nil:
    section.add "quotaUser", valid_580270
  var valid_580271 = query.getOrDefault("pageToken")
  valid_580271 = validateParameter(valid_580271, JString, required = false,
                                 default = nil)
  if valid_580271 != nil:
    section.add "pageToken", valid_580271
  var valid_580272 = query.getOrDefault("sortField")
  valid_580272 = validateParameter(valid_580272, JString, required = false,
                                 default = newJString("ID"))
  if valid_580272 != nil:
    section.add "sortField", valid_580272
  var valid_580273 = query.getOrDefault("alt")
  valid_580273 = validateParameter(valid_580273, JString, required = false,
                                 default = newJString("json"))
  if valid_580273 != nil:
    section.add "alt", valid_580273
  var valid_580274 = query.getOrDefault("sslCompliant")
  valid_580274 = validateParameter(valid_580274, JBool, required = false, default = nil)
  if valid_580274 != nil:
    section.add "sslCompliant", valid_580274
  var valid_580275 = query.getOrDefault("searchString")
  valid_580275 = validateParameter(valid_580275, JString, required = false,
                                 default = nil)
  if valid_580275 != nil:
    section.add "searchString", valid_580275
  var valid_580276 = query.getOrDefault("advertiserId")
  valid_580276 = validateParameter(valid_580276, JString, required = false,
                                 default = nil)
  if valid_580276 != nil:
    section.add "advertiserId", valid_580276
  var valid_580277 = query.getOrDefault("dynamicClickTracker")
  valid_580277 = validateParameter(valid_580277, JBool, required = false, default = nil)
  if valid_580277 != nil:
    section.add "dynamicClickTracker", valid_580277
  var valid_580278 = query.getOrDefault("sizeIds")
  valid_580278 = validateParameter(valid_580278, JArray, required = false,
                                 default = nil)
  if valid_580278 != nil:
    section.add "sizeIds", valid_580278
  var valid_580279 = query.getOrDefault("type")
  valid_580279 = validateParameter(valid_580279, JArray, required = false,
                                 default = nil)
  if valid_580279 != nil:
    section.add "type", valid_580279
  var valid_580280 = query.getOrDefault("active")
  valid_580280 = validateParameter(valid_580280, JBool, required = false, default = nil)
  if valid_580280 != nil:
    section.add "active", valid_580280
  var valid_580281 = query.getOrDefault("oauth_token")
  valid_580281 = validateParameter(valid_580281, JString, required = false,
                                 default = nil)
  if valid_580281 != nil:
    section.add "oauth_token", valid_580281
  var valid_580282 = query.getOrDefault("campaignIds")
  valid_580282 = validateParameter(valid_580282, JArray, required = false,
                                 default = nil)
  if valid_580282 != nil:
    section.add "campaignIds", valid_580282
  var valid_580283 = query.getOrDefault("userIp")
  valid_580283 = validateParameter(valid_580283, JString, required = false,
                                 default = nil)
  if valid_580283 != nil:
    section.add "userIp", valid_580283
  var valid_580284 = query.getOrDefault("creativeOptimizationConfigurationIds")
  valid_580284 = validateParameter(valid_580284, JArray, required = false,
                                 default = nil)
  if valid_580284 != nil:
    section.add "creativeOptimizationConfigurationIds", valid_580284
  var valid_580285 = query.getOrDefault("archived")
  valid_580285 = validateParameter(valid_580285, JBool, required = false, default = nil)
  if valid_580285 != nil:
    section.add "archived", valid_580285
  var valid_580286 = query.getOrDefault("maxResults")
  valid_580286 = validateParameter(valid_580286, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580286 != nil:
    section.add "maxResults", valid_580286
  var valid_580287 = query.getOrDefault("ids")
  valid_580287 = validateParameter(valid_580287, JArray, required = false,
                                 default = nil)
  if valid_580287 != nil:
    section.add "ids", valid_580287
  var valid_580288 = query.getOrDefault("key")
  valid_580288 = validateParameter(valid_580288, JString, required = false,
                                 default = nil)
  if valid_580288 != nil:
    section.add "key", valid_580288
  var valid_580289 = query.getOrDefault("compatibility")
  valid_580289 = validateParameter(valid_580289, JString, required = false,
                                 default = newJString("APP"))
  if valid_580289 != nil:
    section.add "compatibility", valid_580289
  var valid_580290 = query.getOrDefault("landingPageIds")
  valid_580290 = validateParameter(valid_580290, JArray, required = false,
                                 default = nil)
  if valid_580290 != nil:
    section.add "landingPageIds", valid_580290
  var valid_580291 = query.getOrDefault("sortOrder")
  valid_580291 = validateParameter(valid_580291, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580291 != nil:
    section.add "sortOrder", valid_580291
  var valid_580292 = query.getOrDefault("remarketingListIds")
  valid_580292 = validateParameter(valid_580292, JArray, required = false,
                                 default = nil)
  if valid_580292 != nil:
    section.add "remarketingListIds", valid_580292
  var valid_580293 = query.getOrDefault("prettyPrint")
  valid_580293 = validateParameter(valid_580293, JBool, required = false,
                                 default = newJBool(true))
  if valid_580293 != nil:
    section.add "prettyPrint", valid_580293
  var valid_580294 = query.getOrDefault("sslRequired")
  valid_580294 = validateParameter(valid_580294, JBool, required = false, default = nil)
  if valid_580294 != nil:
    section.add "sslRequired", valid_580294
  var valid_580295 = query.getOrDefault("audienceSegmentIds")
  valid_580295 = validateParameter(valid_580295, JArray, required = false,
                                 default = nil)
  if valid_580295 != nil:
    section.add "audienceSegmentIds", valid_580295
  var valid_580296 = query.getOrDefault("placementIds")
  valid_580296 = validateParameter(valid_580296, JArray, required = false,
                                 default = nil)
  if valid_580296 != nil:
    section.add "placementIds", valid_580296
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580297: Call_DfareportingAdsList_580263; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of ads, possibly filtered. This method supports paging.
  ## 
  let valid = call_580297.validator(path, query, header, formData, body)
  let scheme = call_580297.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580297.url(scheme.get, call_580297.host, call_580297.base,
                         call_580297.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580297, url, valid)

proc call*(call_580298: Call_DfareportingAdsList_580263; profileId: string;
          overriddenEventTagId: string = ""; fields: string = "";
          creativeIds: JsonNode = nil; quotaUser: string = ""; pageToken: string = "";
          sortField: string = "ID"; alt: string = "json"; sslCompliant: bool = false;
          searchString: string = ""; advertiserId: string = "";
          dynamicClickTracker: bool = false; sizeIds: JsonNode = nil;
          `type`: JsonNode = nil; active: bool = false; oauthToken: string = "";
          campaignIds: JsonNode = nil; userIp: string = "";
          creativeOptimizationConfigurationIds: JsonNode = nil;
          archived: bool = false; maxResults: int = 1000; ids: JsonNode = nil;
          key: string = ""; compatibility: string = "APP";
          landingPageIds: JsonNode = nil; sortOrder: string = "ASCENDING";
          remarketingListIds: JsonNode = nil; prettyPrint: bool = true;
          sslRequired: bool = false; audienceSegmentIds: JsonNode = nil;
          placementIds: JsonNode = nil): Recallable =
  ## dfareportingAdsList
  ## Retrieves a list of ads, possibly filtered. This method supports paging.
  ##   overriddenEventTagId: string
  ##                       : Select only ads with this event tag override ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   creativeIds: JArray
  ##              : Select only ads with these creative IDs assigned.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   sslCompliant: bool
  ##               : Select only ads that are SSL-compliant.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "ad*2015" will return objects with names like "ad June 2015", "ad April 2015", or simply "ad 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "ad" will match objects with name "my ad", "ad 2015", or simply "ad".
  ##   advertiserId: string
  ##               : Select only ads with this advertiser ID.
  ##   dynamicClickTracker: bool
  ##                      : Select only dynamic click trackers. Applicable when type is AD_SERVING_CLICK_TRACKER. If true, select dynamic click trackers. If false, select static click trackers. Leave unset to select both.
  ##   sizeIds: JArray
  ##          : Select only ads with these size IDs.
  ##   type: JArray
  ##       : Select only ads with these types.
  ##   active: bool
  ##         : Select only active ads.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   campaignIds: JArray
  ##              : Select only ads with these campaign IDs.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   creativeOptimizationConfigurationIds: JArray
  ##                                       : Select only ads with these creative optimization configuration IDs.
  ##   archived: bool
  ##           : Select only archived ads.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only ads with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   compatibility: string
  ##                : Select default ads with the specified compatibility. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering an in-stream video ads developed with the VAST standard.
  ##   landingPageIds: JArray
  ##                 : Select only ads with these landing page IDs.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   remarketingListIds: JArray
  ##                     : Select only ads whose list targeting expression use these remarketing list IDs.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   sslRequired: bool
  ##              : Select only ads that require SSL.
  ##   audienceSegmentIds: JArray
  ##                     : Select only ads with these audience segment IDs.
  ##   placementIds: JArray
  ##               : Select only ads with these placement IDs assigned.
  var path_580299 = newJObject()
  var query_580300 = newJObject()
  add(query_580300, "overriddenEventTagId", newJString(overriddenEventTagId))
  add(path_580299, "profileId", newJString(profileId))
  add(query_580300, "fields", newJString(fields))
  if creativeIds != nil:
    query_580300.add "creativeIds", creativeIds
  add(query_580300, "quotaUser", newJString(quotaUser))
  add(query_580300, "pageToken", newJString(pageToken))
  add(query_580300, "sortField", newJString(sortField))
  add(query_580300, "alt", newJString(alt))
  add(query_580300, "sslCompliant", newJBool(sslCompliant))
  add(query_580300, "searchString", newJString(searchString))
  add(query_580300, "advertiserId", newJString(advertiserId))
  add(query_580300, "dynamicClickTracker", newJBool(dynamicClickTracker))
  if sizeIds != nil:
    query_580300.add "sizeIds", sizeIds
  if `type` != nil:
    query_580300.add "type", `type`
  add(query_580300, "active", newJBool(active))
  add(query_580300, "oauth_token", newJString(oauthToken))
  if campaignIds != nil:
    query_580300.add "campaignIds", campaignIds
  add(query_580300, "userIp", newJString(userIp))
  if creativeOptimizationConfigurationIds != nil:
    query_580300.add "creativeOptimizationConfigurationIds",
                    creativeOptimizationConfigurationIds
  add(query_580300, "archived", newJBool(archived))
  add(query_580300, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_580300.add "ids", ids
  add(query_580300, "key", newJString(key))
  add(query_580300, "compatibility", newJString(compatibility))
  if landingPageIds != nil:
    query_580300.add "landingPageIds", landingPageIds
  add(query_580300, "sortOrder", newJString(sortOrder))
  if remarketingListIds != nil:
    query_580300.add "remarketingListIds", remarketingListIds
  add(query_580300, "prettyPrint", newJBool(prettyPrint))
  add(query_580300, "sslRequired", newJBool(sslRequired))
  if audienceSegmentIds != nil:
    query_580300.add "audienceSegmentIds", audienceSegmentIds
  if placementIds != nil:
    query_580300.add "placementIds", placementIds
  result = call_580298.call(path_580299, query_580300, nil, nil, nil)

var dfareportingAdsList* = Call_DfareportingAdsList_580263(
    name: "dfareportingAdsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads",
    validator: validate_DfareportingAdsList_580264, base: "/dfareporting/v3.2",
    url: url_DfareportingAdsList_580265, schemes: {Scheme.Https})
type
  Call_DfareportingAdsPatch_580335 = ref object of OpenApiRestCall_579437
proc url_DfareportingAdsPatch_580337(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsPatch_580336(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing ad. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580338 = path.getOrDefault("profileId")
  valid_580338 = validateParameter(valid_580338, JString, required = true,
                                 default = nil)
  if valid_580338 != nil:
    section.add "profileId", valid_580338
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Ad ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580339 = query.getOrDefault("fields")
  valid_580339 = validateParameter(valid_580339, JString, required = false,
                                 default = nil)
  if valid_580339 != nil:
    section.add "fields", valid_580339
  var valid_580340 = query.getOrDefault("quotaUser")
  valid_580340 = validateParameter(valid_580340, JString, required = false,
                                 default = nil)
  if valid_580340 != nil:
    section.add "quotaUser", valid_580340
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580341 = query.getOrDefault("id")
  valid_580341 = validateParameter(valid_580341, JString, required = true,
                                 default = nil)
  if valid_580341 != nil:
    section.add "id", valid_580341
  var valid_580342 = query.getOrDefault("alt")
  valid_580342 = validateParameter(valid_580342, JString, required = false,
                                 default = newJString("json"))
  if valid_580342 != nil:
    section.add "alt", valid_580342
  var valid_580343 = query.getOrDefault("oauth_token")
  valid_580343 = validateParameter(valid_580343, JString, required = false,
                                 default = nil)
  if valid_580343 != nil:
    section.add "oauth_token", valid_580343
  var valid_580344 = query.getOrDefault("userIp")
  valid_580344 = validateParameter(valid_580344, JString, required = false,
                                 default = nil)
  if valid_580344 != nil:
    section.add "userIp", valid_580344
  var valid_580345 = query.getOrDefault("key")
  valid_580345 = validateParameter(valid_580345, JString, required = false,
                                 default = nil)
  if valid_580345 != nil:
    section.add "key", valid_580345
  var valid_580346 = query.getOrDefault("prettyPrint")
  valid_580346 = validateParameter(valid_580346, JBool, required = false,
                                 default = newJBool(true))
  if valid_580346 != nil:
    section.add "prettyPrint", valid_580346
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580348: Call_DfareportingAdsPatch_580335; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing ad. This method supports patch semantics.
  ## 
  let valid = call_580348.validator(path, query, header, formData, body)
  let scheme = call_580348.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580348.url(scheme.get, call_580348.host, call_580348.base,
                         call_580348.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580348, url, valid)

proc call*(call_580349: Call_DfareportingAdsPatch_580335; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdsPatch
  ## Updates an existing ad. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Ad ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580350 = newJObject()
  var query_580351 = newJObject()
  var body_580352 = newJObject()
  add(path_580350, "profileId", newJString(profileId))
  add(query_580351, "fields", newJString(fields))
  add(query_580351, "quotaUser", newJString(quotaUser))
  add(query_580351, "id", newJString(id))
  add(query_580351, "alt", newJString(alt))
  add(query_580351, "oauth_token", newJString(oauthToken))
  add(query_580351, "userIp", newJString(userIp))
  add(query_580351, "key", newJString(key))
  if body != nil:
    body_580352 = body
  add(query_580351, "prettyPrint", newJBool(prettyPrint))
  result = call_580349.call(path_580350, query_580351, nil, nil, body_580352)

var dfareportingAdsPatch* = Call_DfareportingAdsPatch_580335(
    name: "dfareportingAdsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads",
    validator: validate_DfareportingAdsPatch_580336, base: "/dfareporting/v3.2",
    url: url_DfareportingAdsPatch_580337, schemes: {Scheme.Https})
type
  Call_DfareportingAdsGet_580353 = ref object of OpenApiRestCall_579437
proc url_DfareportingAdsGet_580355(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsGet_580354(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets one ad by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Ad ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580356 = path.getOrDefault("profileId")
  valid_580356 = validateParameter(valid_580356, JString, required = true,
                                 default = nil)
  if valid_580356 != nil:
    section.add "profileId", valid_580356
  var valid_580357 = path.getOrDefault("id")
  valid_580357 = validateParameter(valid_580357, JString, required = true,
                                 default = nil)
  if valid_580357 != nil:
    section.add "id", valid_580357
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580358 = query.getOrDefault("fields")
  valid_580358 = validateParameter(valid_580358, JString, required = false,
                                 default = nil)
  if valid_580358 != nil:
    section.add "fields", valid_580358
  var valid_580359 = query.getOrDefault("quotaUser")
  valid_580359 = validateParameter(valid_580359, JString, required = false,
                                 default = nil)
  if valid_580359 != nil:
    section.add "quotaUser", valid_580359
  var valid_580360 = query.getOrDefault("alt")
  valid_580360 = validateParameter(valid_580360, JString, required = false,
                                 default = newJString("json"))
  if valid_580360 != nil:
    section.add "alt", valid_580360
  var valid_580361 = query.getOrDefault("oauth_token")
  valid_580361 = validateParameter(valid_580361, JString, required = false,
                                 default = nil)
  if valid_580361 != nil:
    section.add "oauth_token", valid_580361
  var valid_580362 = query.getOrDefault("userIp")
  valid_580362 = validateParameter(valid_580362, JString, required = false,
                                 default = nil)
  if valid_580362 != nil:
    section.add "userIp", valid_580362
  var valid_580363 = query.getOrDefault("key")
  valid_580363 = validateParameter(valid_580363, JString, required = false,
                                 default = nil)
  if valid_580363 != nil:
    section.add "key", valid_580363
  var valid_580364 = query.getOrDefault("prettyPrint")
  valid_580364 = validateParameter(valid_580364, JBool, required = false,
                                 default = newJBool(true))
  if valid_580364 != nil:
    section.add "prettyPrint", valid_580364
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580365: Call_DfareportingAdsGet_580353; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one ad by ID.
  ## 
  let valid = call_580365.validator(path, query, header, formData, body)
  let scheme = call_580365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580365.url(scheme.get, call_580365.host, call_580365.base,
                         call_580365.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580365, url, valid)

proc call*(call_580366: Call_DfareportingAdsGet_580353; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingAdsGet
  ## Gets one ad by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Ad ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580367 = newJObject()
  var query_580368 = newJObject()
  add(path_580367, "profileId", newJString(profileId))
  add(query_580368, "fields", newJString(fields))
  add(query_580368, "quotaUser", newJString(quotaUser))
  add(query_580368, "alt", newJString(alt))
  add(query_580368, "oauth_token", newJString(oauthToken))
  add(query_580368, "userIp", newJString(userIp))
  add(path_580367, "id", newJString(id))
  add(query_580368, "key", newJString(key))
  add(query_580368, "prettyPrint", newJBool(prettyPrint))
  result = call_580366.call(path_580367, query_580368, nil, nil, nil)

var dfareportingAdsGet* = Call_DfareportingAdsGet_580353(
    name: "dfareportingAdsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads/{id}",
    validator: validate_DfareportingAdsGet_580354, base: "/dfareporting/v3.2",
    url: url_DfareportingAdsGet_580355, schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsUpdate_580390 = ref object of OpenApiRestCall_579437
proc url_DfareportingAdvertiserGroupsUpdate_580392(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsUpdate_580391(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing advertiser group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580393 = path.getOrDefault("profileId")
  valid_580393 = validateParameter(valid_580393, JString, required = true,
                                 default = nil)
  if valid_580393 != nil:
    section.add "profileId", valid_580393
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580394 = query.getOrDefault("fields")
  valid_580394 = validateParameter(valid_580394, JString, required = false,
                                 default = nil)
  if valid_580394 != nil:
    section.add "fields", valid_580394
  var valid_580395 = query.getOrDefault("quotaUser")
  valid_580395 = validateParameter(valid_580395, JString, required = false,
                                 default = nil)
  if valid_580395 != nil:
    section.add "quotaUser", valid_580395
  var valid_580396 = query.getOrDefault("alt")
  valid_580396 = validateParameter(valid_580396, JString, required = false,
                                 default = newJString("json"))
  if valid_580396 != nil:
    section.add "alt", valid_580396
  var valid_580397 = query.getOrDefault("oauth_token")
  valid_580397 = validateParameter(valid_580397, JString, required = false,
                                 default = nil)
  if valid_580397 != nil:
    section.add "oauth_token", valid_580397
  var valid_580398 = query.getOrDefault("userIp")
  valid_580398 = validateParameter(valid_580398, JString, required = false,
                                 default = nil)
  if valid_580398 != nil:
    section.add "userIp", valid_580398
  var valid_580399 = query.getOrDefault("key")
  valid_580399 = validateParameter(valid_580399, JString, required = false,
                                 default = nil)
  if valid_580399 != nil:
    section.add "key", valid_580399
  var valid_580400 = query.getOrDefault("prettyPrint")
  valid_580400 = validateParameter(valid_580400, JBool, required = false,
                                 default = newJBool(true))
  if valid_580400 != nil:
    section.add "prettyPrint", valid_580400
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580402: Call_DfareportingAdvertiserGroupsUpdate_580390;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing advertiser group.
  ## 
  let valid = call_580402.validator(path, query, header, formData, body)
  let scheme = call_580402.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580402.url(scheme.get, call_580402.host, call_580402.base,
                         call_580402.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580402, url, valid)

proc call*(call_580403: Call_DfareportingAdvertiserGroupsUpdate_580390;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserGroupsUpdate
  ## Updates an existing advertiser group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580404 = newJObject()
  var query_580405 = newJObject()
  var body_580406 = newJObject()
  add(path_580404, "profileId", newJString(profileId))
  add(query_580405, "fields", newJString(fields))
  add(query_580405, "quotaUser", newJString(quotaUser))
  add(query_580405, "alt", newJString(alt))
  add(query_580405, "oauth_token", newJString(oauthToken))
  add(query_580405, "userIp", newJString(userIp))
  add(query_580405, "key", newJString(key))
  if body != nil:
    body_580406 = body
  add(query_580405, "prettyPrint", newJBool(prettyPrint))
  result = call_580403.call(path_580404, query_580405, nil, nil, body_580406)

var dfareportingAdvertiserGroupsUpdate* = Call_DfareportingAdvertiserGroupsUpdate_580390(
    name: "dfareportingAdvertiserGroupsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups",
    validator: validate_DfareportingAdvertiserGroupsUpdate_580391,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsUpdate_580392,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsInsert_580407 = ref object of OpenApiRestCall_579437
proc url_DfareportingAdvertiserGroupsInsert_580409(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsInsert_580408(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new advertiser group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580410 = path.getOrDefault("profileId")
  valid_580410 = validateParameter(valid_580410, JString, required = true,
                                 default = nil)
  if valid_580410 != nil:
    section.add "profileId", valid_580410
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580411 = query.getOrDefault("fields")
  valid_580411 = validateParameter(valid_580411, JString, required = false,
                                 default = nil)
  if valid_580411 != nil:
    section.add "fields", valid_580411
  var valid_580412 = query.getOrDefault("quotaUser")
  valid_580412 = validateParameter(valid_580412, JString, required = false,
                                 default = nil)
  if valid_580412 != nil:
    section.add "quotaUser", valid_580412
  var valid_580413 = query.getOrDefault("alt")
  valid_580413 = validateParameter(valid_580413, JString, required = false,
                                 default = newJString("json"))
  if valid_580413 != nil:
    section.add "alt", valid_580413
  var valid_580414 = query.getOrDefault("oauth_token")
  valid_580414 = validateParameter(valid_580414, JString, required = false,
                                 default = nil)
  if valid_580414 != nil:
    section.add "oauth_token", valid_580414
  var valid_580415 = query.getOrDefault("userIp")
  valid_580415 = validateParameter(valid_580415, JString, required = false,
                                 default = nil)
  if valid_580415 != nil:
    section.add "userIp", valid_580415
  var valid_580416 = query.getOrDefault("key")
  valid_580416 = validateParameter(valid_580416, JString, required = false,
                                 default = nil)
  if valid_580416 != nil:
    section.add "key", valid_580416
  var valid_580417 = query.getOrDefault("prettyPrint")
  valid_580417 = validateParameter(valid_580417, JBool, required = false,
                                 default = newJBool(true))
  if valid_580417 != nil:
    section.add "prettyPrint", valid_580417
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580419: Call_DfareportingAdvertiserGroupsInsert_580407;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new advertiser group.
  ## 
  let valid = call_580419.validator(path, query, header, formData, body)
  let scheme = call_580419.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580419.url(scheme.get, call_580419.host, call_580419.base,
                         call_580419.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580419, url, valid)

proc call*(call_580420: Call_DfareportingAdvertiserGroupsInsert_580407;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserGroupsInsert
  ## Inserts a new advertiser group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580421 = newJObject()
  var query_580422 = newJObject()
  var body_580423 = newJObject()
  add(path_580421, "profileId", newJString(profileId))
  add(query_580422, "fields", newJString(fields))
  add(query_580422, "quotaUser", newJString(quotaUser))
  add(query_580422, "alt", newJString(alt))
  add(query_580422, "oauth_token", newJString(oauthToken))
  add(query_580422, "userIp", newJString(userIp))
  add(query_580422, "key", newJString(key))
  if body != nil:
    body_580423 = body
  add(query_580422, "prettyPrint", newJBool(prettyPrint))
  result = call_580420.call(path_580421, query_580422, nil, nil, body_580423)

var dfareportingAdvertiserGroupsInsert* = Call_DfareportingAdvertiserGroupsInsert_580407(
    name: "dfareportingAdvertiserGroupsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups",
    validator: validate_DfareportingAdvertiserGroupsInsert_580408,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsInsert_580409,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsList_580369 = ref object of OpenApiRestCall_579437
proc url_DfareportingAdvertiserGroupsList_580371(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsList_580370(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of advertiser groups, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580372 = path.getOrDefault("profileId")
  valid_580372 = validateParameter(valid_580372, JString, required = true,
                                 default = nil)
  if valid_580372 != nil:
    section.add "profileId", valid_580372
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser group June 2015", "advertiser group April 2015", or simply "advertiser group 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertisergroup" will match objects with name "my advertisergroup", "advertisergroup 2015", or simply "advertisergroup".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only advertiser groups with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580373 = query.getOrDefault("fields")
  valid_580373 = validateParameter(valid_580373, JString, required = false,
                                 default = nil)
  if valid_580373 != nil:
    section.add "fields", valid_580373
  var valid_580374 = query.getOrDefault("pageToken")
  valid_580374 = validateParameter(valid_580374, JString, required = false,
                                 default = nil)
  if valid_580374 != nil:
    section.add "pageToken", valid_580374
  var valid_580375 = query.getOrDefault("quotaUser")
  valid_580375 = validateParameter(valid_580375, JString, required = false,
                                 default = nil)
  if valid_580375 != nil:
    section.add "quotaUser", valid_580375
  var valid_580376 = query.getOrDefault("sortField")
  valid_580376 = validateParameter(valid_580376, JString, required = false,
                                 default = newJString("ID"))
  if valid_580376 != nil:
    section.add "sortField", valid_580376
  var valid_580377 = query.getOrDefault("alt")
  valid_580377 = validateParameter(valid_580377, JString, required = false,
                                 default = newJString("json"))
  if valid_580377 != nil:
    section.add "alt", valid_580377
  var valid_580378 = query.getOrDefault("searchString")
  valid_580378 = validateParameter(valid_580378, JString, required = false,
                                 default = nil)
  if valid_580378 != nil:
    section.add "searchString", valid_580378
  var valid_580379 = query.getOrDefault("oauth_token")
  valid_580379 = validateParameter(valid_580379, JString, required = false,
                                 default = nil)
  if valid_580379 != nil:
    section.add "oauth_token", valid_580379
  var valid_580380 = query.getOrDefault("userIp")
  valid_580380 = validateParameter(valid_580380, JString, required = false,
                                 default = nil)
  if valid_580380 != nil:
    section.add "userIp", valid_580380
  var valid_580381 = query.getOrDefault("maxResults")
  valid_580381 = validateParameter(valid_580381, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580381 != nil:
    section.add "maxResults", valid_580381
  var valid_580382 = query.getOrDefault("ids")
  valid_580382 = validateParameter(valid_580382, JArray, required = false,
                                 default = nil)
  if valid_580382 != nil:
    section.add "ids", valid_580382
  var valid_580383 = query.getOrDefault("key")
  valid_580383 = validateParameter(valid_580383, JString, required = false,
                                 default = nil)
  if valid_580383 != nil:
    section.add "key", valid_580383
  var valid_580384 = query.getOrDefault("sortOrder")
  valid_580384 = validateParameter(valid_580384, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580384 != nil:
    section.add "sortOrder", valid_580384
  var valid_580385 = query.getOrDefault("prettyPrint")
  valid_580385 = validateParameter(valid_580385, JBool, required = false,
                                 default = newJBool(true))
  if valid_580385 != nil:
    section.add "prettyPrint", valid_580385
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580386: Call_DfareportingAdvertiserGroupsList_580369;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of advertiser groups, possibly filtered. This method supports paging.
  ## 
  let valid = call_580386.validator(path, query, header, formData, body)
  let scheme = call_580386.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580386.url(scheme.get, call_580386.host, call_580386.base,
                         call_580386.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580386, url, valid)

proc call*(call_580387: Call_DfareportingAdvertiserGroupsList_580369;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserGroupsList
  ## Retrieves a list of advertiser groups, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser group June 2015", "advertiser group April 2015", or simply "advertiser group 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertisergroup" will match objects with name "my advertisergroup", "advertisergroup 2015", or simply "advertisergroup".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only advertiser groups with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580388 = newJObject()
  var query_580389 = newJObject()
  add(path_580388, "profileId", newJString(profileId))
  add(query_580389, "fields", newJString(fields))
  add(query_580389, "pageToken", newJString(pageToken))
  add(query_580389, "quotaUser", newJString(quotaUser))
  add(query_580389, "sortField", newJString(sortField))
  add(query_580389, "alt", newJString(alt))
  add(query_580389, "searchString", newJString(searchString))
  add(query_580389, "oauth_token", newJString(oauthToken))
  add(query_580389, "userIp", newJString(userIp))
  add(query_580389, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_580389.add "ids", ids
  add(query_580389, "key", newJString(key))
  add(query_580389, "sortOrder", newJString(sortOrder))
  add(query_580389, "prettyPrint", newJBool(prettyPrint))
  result = call_580387.call(path_580388, query_580389, nil, nil, nil)

var dfareportingAdvertiserGroupsList* = Call_DfareportingAdvertiserGroupsList_580369(
    name: "dfareportingAdvertiserGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups",
    validator: validate_DfareportingAdvertiserGroupsList_580370,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsList_580371,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsPatch_580424 = ref object of OpenApiRestCall_579437
proc url_DfareportingAdvertiserGroupsPatch_580426(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsPatch_580425(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing advertiser group. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580427 = path.getOrDefault("profileId")
  valid_580427 = validateParameter(valid_580427, JString, required = true,
                                 default = nil)
  if valid_580427 != nil:
    section.add "profileId", valid_580427
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Advertiser group ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580428 = query.getOrDefault("fields")
  valid_580428 = validateParameter(valid_580428, JString, required = false,
                                 default = nil)
  if valid_580428 != nil:
    section.add "fields", valid_580428
  var valid_580429 = query.getOrDefault("quotaUser")
  valid_580429 = validateParameter(valid_580429, JString, required = false,
                                 default = nil)
  if valid_580429 != nil:
    section.add "quotaUser", valid_580429
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580430 = query.getOrDefault("id")
  valid_580430 = validateParameter(valid_580430, JString, required = true,
                                 default = nil)
  if valid_580430 != nil:
    section.add "id", valid_580430
  var valid_580431 = query.getOrDefault("alt")
  valid_580431 = validateParameter(valid_580431, JString, required = false,
                                 default = newJString("json"))
  if valid_580431 != nil:
    section.add "alt", valid_580431
  var valid_580432 = query.getOrDefault("oauth_token")
  valid_580432 = validateParameter(valid_580432, JString, required = false,
                                 default = nil)
  if valid_580432 != nil:
    section.add "oauth_token", valid_580432
  var valid_580433 = query.getOrDefault("userIp")
  valid_580433 = validateParameter(valid_580433, JString, required = false,
                                 default = nil)
  if valid_580433 != nil:
    section.add "userIp", valid_580433
  var valid_580434 = query.getOrDefault("key")
  valid_580434 = validateParameter(valid_580434, JString, required = false,
                                 default = nil)
  if valid_580434 != nil:
    section.add "key", valid_580434
  var valid_580435 = query.getOrDefault("prettyPrint")
  valid_580435 = validateParameter(valid_580435, JBool, required = false,
                                 default = newJBool(true))
  if valid_580435 != nil:
    section.add "prettyPrint", valid_580435
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580437: Call_DfareportingAdvertiserGroupsPatch_580424;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing advertiser group. This method supports patch semantics.
  ## 
  let valid = call_580437.validator(path, query, header, formData, body)
  let scheme = call_580437.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580437.url(scheme.get, call_580437.host, call_580437.base,
                         call_580437.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580437, url, valid)

proc call*(call_580438: Call_DfareportingAdvertiserGroupsPatch_580424;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserGroupsPatch
  ## Updates an existing advertiser group. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Advertiser group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580439 = newJObject()
  var query_580440 = newJObject()
  var body_580441 = newJObject()
  add(path_580439, "profileId", newJString(profileId))
  add(query_580440, "fields", newJString(fields))
  add(query_580440, "quotaUser", newJString(quotaUser))
  add(query_580440, "id", newJString(id))
  add(query_580440, "alt", newJString(alt))
  add(query_580440, "oauth_token", newJString(oauthToken))
  add(query_580440, "userIp", newJString(userIp))
  add(query_580440, "key", newJString(key))
  if body != nil:
    body_580441 = body
  add(query_580440, "prettyPrint", newJBool(prettyPrint))
  result = call_580438.call(path_580439, query_580440, nil, nil, body_580441)

var dfareportingAdvertiserGroupsPatch* = Call_DfareportingAdvertiserGroupsPatch_580424(
    name: "dfareportingAdvertiserGroupsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups",
    validator: validate_DfareportingAdvertiserGroupsPatch_580425,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsPatch_580426,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsGet_580442 = ref object of OpenApiRestCall_579437
proc url_DfareportingAdvertiserGroupsGet_580444(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsGet_580443(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one advertiser group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Advertiser group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580445 = path.getOrDefault("profileId")
  valid_580445 = validateParameter(valid_580445, JString, required = true,
                                 default = nil)
  if valid_580445 != nil:
    section.add "profileId", valid_580445
  var valid_580446 = path.getOrDefault("id")
  valid_580446 = validateParameter(valid_580446, JString, required = true,
                                 default = nil)
  if valid_580446 != nil:
    section.add "id", valid_580446
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580447 = query.getOrDefault("fields")
  valid_580447 = validateParameter(valid_580447, JString, required = false,
                                 default = nil)
  if valid_580447 != nil:
    section.add "fields", valid_580447
  var valid_580448 = query.getOrDefault("quotaUser")
  valid_580448 = validateParameter(valid_580448, JString, required = false,
                                 default = nil)
  if valid_580448 != nil:
    section.add "quotaUser", valid_580448
  var valid_580449 = query.getOrDefault("alt")
  valid_580449 = validateParameter(valid_580449, JString, required = false,
                                 default = newJString("json"))
  if valid_580449 != nil:
    section.add "alt", valid_580449
  var valid_580450 = query.getOrDefault("oauth_token")
  valid_580450 = validateParameter(valid_580450, JString, required = false,
                                 default = nil)
  if valid_580450 != nil:
    section.add "oauth_token", valid_580450
  var valid_580451 = query.getOrDefault("userIp")
  valid_580451 = validateParameter(valid_580451, JString, required = false,
                                 default = nil)
  if valid_580451 != nil:
    section.add "userIp", valid_580451
  var valid_580452 = query.getOrDefault("key")
  valid_580452 = validateParameter(valid_580452, JString, required = false,
                                 default = nil)
  if valid_580452 != nil:
    section.add "key", valid_580452
  var valid_580453 = query.getOrDefault("prettyPrint")
  valid_580453 = validateParameter(valid_580453, JBool, required = false,
                                 default = newJBool(true))
  if valid_580453 != nil:
    section.add "prettyPrint", valid_580453
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580454: Call_DfareportingAdvertiserGroupsGet_580442;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one advertiser group by ID.
  ## 
  let valid = call_580454.validator(path, query, header, formData, body)
  let scheme = call_580454.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580454.url(scheme.get, call_580454.host, call_580454.base,
                         call_580454.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580454, url, valid)

proc call*(call_580455: Call_DfareportingAdvertiserGroupsGet_580442;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserGroupsGet
  ## Gets one advertiser group by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Advertiser group ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580456 = newJObject()
  var query_580457 = newJObject()
  add(path_580456, "profileId", newJString(profileId))
  add(query_580457, "fields", newJString(fields))
  add(query_580457, "quotaUser", newJString(quotaUser))
  add(query_580457, "alt", newJString(alt))
  add(query_580457, "oauth_token", newJString(oauthToken))
  add(query_580457, "userIp", newJString(userIp))
  add(path_580456, "id", newJString(id))
  add(query_580457, "key", newJString(key))
  add(query_580457, "prettyPrint", newJBool(prettyPrint))
  result = call_580455.call(path_580456, query_580457, nil, nil, nil)

var dfareportingAdvertiserGroupsGet* = Call_DfareportingAdvertiserGroupsGet_580442(
    name: "dfareportingAdvertiserGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups/{id}",
    validator: validate_DfareportingAdvertiserGroupsGet_580443,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsGet_580444,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsDelete_580458 = ref object of OpenApiRestCall_579437
proc url_DfareportingAdvertiserGroupsDelete_580460(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsDelete_580459(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing advertiser group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Advertiser group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580461 = path.getOrDefault("profileId")
  valid_580461 = validateParameter(valid_580461, JString, required = true,
                                 default = nil)
  if valid_580461 != nil:
    section.add "profileId", valid_580461
  var valid_580462 = path.getOrDefault("id")
  valid_580462 = validateParameter(valid_580462, JString, required = true,
                                 default = nil)
  if valid_580462 != nil:
    section.add "id", valid_580462
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580463 = query.getOrDefault("fields")
  valid_580463 = validateParameter(valid_580463, JString, required = false,
                                 default = nil)
  if valid_580463 != nil:
    section.add "fields", valid_580463
  var valid_580464 = query.getOrDefault("quotaUser")
  valid_580464 = validateParameter(valid_580464, JString, required = false,
                                 default = nil)
  if valid_580464 != nil:
    section.add "quotaUser", valid_580464
  var valid_580465 = query.getOrDefault("alt")
  valid_580465 = validateParameter(valid_580465, JString, required = false,
                                 default = newJString("json"))
  if valid_580465 != nil:
    section.add "alt", valid_580465
  var valid_580466 = query.getOrDefault("oauth_token")
  valid_580466 = validateParameter(valid_580466, JString, required = false,
                                 default = nil)
  if valid_580466 != nil:
    section.add "oauth_token", valid_580466
  var valid_580467 = query.getOrDefault("userIp")
  valid_580467 = validateParameter(valid_580467, JString, required = false,
                                 default = nil)
  if valid_580467 != nil:
    section.add "userIp", valid_580467
  var valid_580468 = query.getOrDefault("key")
  valid_580468 = validateParameter(valid_580468, JString, required = false,
                                 default = nil)
  if valid_580468 != nil:
    section.add "key", valid_580468
  var valid_580469 = query.getOrDefault("prettyPrint")
  valid_580469 = validateParameter(valid_580469, JBool, required = false,
                                 default = newJBool(true))
  if valid_580469 != nil:
    section.add "prettyPrint", valid_580469
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580470: Call_DfareportingAdvertiserGroupsDelete_580458;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing advertiser group.
  ## 
  let valid = call_580470.validator(path, query, header, formData, body)
  let scheme = call_580470.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580470.url(scheme.get, call_580470.host, call_580470.base,
                         call_580470.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580470, url, valid)

proc call*(call_580471: Call_DfareportingAdvertiserGroupsDelete_580458;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserGroupsDelete
  ## Deletes an existing advertiser group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Advertiser group ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580472 = newJObject()
  var query_580473 = newJObject()
  add(path_580472, "profileId", newJString(profileId))
  add(query_580473, "fields", newJString(fields))
  add(query_580473, "quotaUser", newJString(quotaUser))
  add(query_580473, "alt", newJString(alt))
  add(query_580473, "oauth_token", newJString(oauthToken))
  add(query_580473, "userIp", newJString(userIp))
  add(path_580472, "id", newJString(id))
  add(query_580473, "key", newJString(key))
  add(query_580473, "prettyPrint", newJBool(prettyPrint))
  result = call_580471.call(path_580472, query_580473, nil, nil, nil)

var dfareportingAdvertiserGroupsDelete* = Call_DfareportingAdvertiserGroupsDelete_580458(
    name: "dfareportingAdvertiserGroupsDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups/{id}",
    validator: validate_DfareportingAdvertiserGroupsDelete_580459,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsDelete_580460,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesUpdate_580499 = ref object of OpenApiRestCall_579437
proc url_DfareportingAdvertiserLandingPagesUpdate_580501(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesUpdate_580500(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing landing page.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580502 = path.getOrDefault("profileId")
  valid_580502 = validateParameter(valid_580502, JString, required = true,
                                 default = nil)
  if valid_580502 != nil:
    section.add "profileId", valid_580502
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580503 = query.getOrDefault("fields")
  valid_580503 = validateParameter(valid_580503, JString, required = false,
                                 default = nil)
  if valid_580503 != nil:
    section.add "fields", valid_580503
  var valid_580504 = query.getOrDefault("quotaUser")
  valid_580504 = validateParameter(valid_580504, JString, required = false,
                                 default = nil)
  if valid_580504 != nil:
    section.add "quotaUser", valid_580504
  var valid_580505 = query.getOrDefault("alt")
  valid_580505 = validateParameter(valid_580505, JString, required = false,
                                 default = newJString("json"))
  if valid_580505 != nil:
    section.add "alt", valid_580505
  var valid_580506 = query.getOrDefault("oauth_token")
  valid_580506 = validateParameter(valid_580506, JString, required = false,
                                 default = nil)
  if valid_580506 != nil:
    section.add "oauth_token", valid_580506
  var valid_580507 = query.getOrDefault("userIp")
  valid_580507 = validateParameter(valid_580507, JString, required = false,
                                 default = nil)
  if valid_580507 != nil:
    section.add "userIp", valid_580507
  var valid_580508 = query.getOrDefault("key")
  valid_580508 = validateParameter(valid_580508, JString, required = false,
                                 default = nil)
  if valid_580508 != nil:
    section.add "key", valid_580508
  var valid_580509 = query.getOrDefault("prettyPrint")
  valid_580509 = validateParameter(valid_580509, JBool, required = false,
                                 default = newJBool(true))
  if valid_580509 != nil:
    section.add "prettyPrint", valid_580509
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580511: Call_DfareportingAdvertiserLandingPagesUpdate_580499;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing landing page.
  ## 
  let valid = call_580511.validator(path, query, header, formData, body)
  let scheme = call_580511.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580511.url(scheme.get, call_580511.host, call_580511.base,
                         call_580511.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580511, url, valid)

proc call*(call_580512: Call_DfareportingAdvertiserLandingPagesUpdate_580499;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserLandingPagesUpdate
  ## Updates an existing landing page.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580513 = newJObject()
  var query_580514 = newJObject()
  var body_580515 = newJObject()
  add(path_580513, "profileId", newJString(profileId))
  add(query_580514, "fields", newJString(fields))
  add(query_580514, "quotaUser", newJString(quotaUser))
  add(query_580514, "alt", newJString(alt))
  add(query_580514, "oauth_token", newJString(oauthToken))
  add(query_580514, "userIp", newJString(userIp))
  add(query_580514, "key", newJString(key))
  if body != nil:
    body_580515 = body
  add(query_580514, "prettyPrint", newJBool(prettyPrint))
  result = call_580512.call(path_580513, query_580514, nil, nil, body_580515)

var dfareportingAdvertiserLandingPagesUpdate* = Call_DfareportingAdvertiserLandingPagesUpdate_580499(
    name: "dfareportingAdvertiserLandingPagesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages",
    validator: validate_DfareportingAdvertiserLandingPagesUpdate_580500,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserLandingPagesUpdate_580501,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesInsert_580516 = ref object of OpenApiRestCall_579437
proc url_DfareportingAdvertiserLandingPagesInsert_580518(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesInsert_580517(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new landing page.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580519 = path.getOrDefault("profileId")
  valid_580519 = validateParameter(valid_580519, JString, required = true,
                                 default = nil)
  if valid_580519 != nil:
    section.add "profileId", valid_580519
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580520 = query.getOrDefault("fields")
  valid_580520 = validateParameter(valid_580520, JString, required = false,
                                 default = nil)
  if valid_580520 != nil:
    section.add "fields", valid_580520
  var valid_580521 = query.getOrDefault("quotaUser")
  valid_580521 = validateParameter(valid_580521, JString, required = false,
                                 default = nil)
  if valid_580521 != nil:
    section.add "quotaUser", valid_580521
  var valid_580522 = query.getOrDefault("alt")
  valid_580522 = validateParameter(valid_580522, JString, required = false,
                                 default = newJString("json"))
  if valid_580522 != nil:
    section.add "alt", valid_580522
  var valid_580523 = query.getOrDefault("oauth_token")
  valid_580523 = validateParameter(valid_580523, JString, required = false,
                                 default = nil)
  if valid_580523 != nil:
    section.add "oauth_token", valid_580523
  var valid_580524 = query.getOrDefault("userIp")
  valid_580524 = validateParameter(valid_580524, JString, required = false,
                                 default = nil)
  if valid_580524 != nil:
    section.add "userIp", valid_580524
  var valid_580525 = query.getOrDefault("key")
  valid_580525 = validateParameter(valid_580525, JString, required = false,
                                 default = nil)
  if valid_580525 != nil:
    section.add "key", valid_580525
  var valid_580526 = query.getOrDefault("prettyPrint")
  valid_580526 = validateParameter(valid_580526, JBool, required = false,
                                 default = newJBool(true))
  if valid_580526 != nil:
    section.add "prettyPrint", valid_580526
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580528: Call_DfareportingAdvertiserLandingPagesInsert_580516;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new landing page.
  ## 
  let valid = call_580528.validator(path, query, header, formData, body)
  let scheme = call_580528.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580528.url(scheme.get, call_580528.host, call_580528.base,
                         call_580528.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580528, url, valid)

proc call*(call_580529: Call_DfareportingAdvertiserLandingPagesInsert_580516;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserLandingPagesInsert
  ## Inserts a new landing page.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580530 = newJObject()
  var query_580531 = newJObject()
  var body_580532 = newJObject()
  add(path_580530, "profileId", newJString(profileId))
  add(query_580531, "fields", newJString(fields))
  add(query_580531, "quotaUser", newJString(quotaUser))
  add(query_580531, "alt", newJString(alt))
  add(query_580531, "oauth_token", newJString(oauthToken))
  add(query_580531, "userIp", newJString(userIp))
  add(query_580531, "key", newJString(key))
  if body != nil:
    body_580532 = body
  add(query_580531, "prettyPrint", newJBool(prettyPrint))
  result = call_580529.call(path_580530, query_580531, nil, nil, body_580532)

var dfareportingAdvertiserLandingPagesInsert* = Call_DfareportingAdvertiserLandingPagesInsert_580516(
    name: "dfareportingAdvertiserLandingPagesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages",
    validator: validate_DfareportingAdvertiserLandingPagesInsert_580517,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserLandingPagesInsert_580518,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesList_580474 = ref object of OpenApiRestCall_579437
proc url_DfareportingAdvertiserLandingPagesList_580476(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesList_580475(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of landing pages.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580477 = path.getOrDefault("profileId")
  valid_580477 = validateParameter(valid_580477, JString, required = true,
                                 default = nil)
  if valid_580477 != nil:
    section.add "profileId", valid_580477
  result.add "path", section
  ## parameters in `query` object:
  ##   subaccountId: JString
  ##               : Select only landing pages that belong to this subaccount.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for landing pages by name or ID. Wildcards (*) are allowed. For example, "landingpage*2017" will return landing pages with names like "landingpage July 2017", "landingpage March 2017", or simply "landingpage 2017". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "landingpage" will match campaigns with name "my landingpage", "landingpage 2015", or simply "landingpage".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   campaignIds: JArray
  ##              : Select only landing pages that are associated with these campaigns.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived landing pages. Don't set this field to select both archived and non-archived landing pages.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only landing pages with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only landing pages that belong to these advertisers.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580478 = query.getOrDefault("subaccountId")
  valid_580478 = validateParameter(valid_580478, JString, required = false,
                                 default = nil)
  if valid_580478 != nil:
    section.add "subaccountId", valid_580478
  var valid_580479 = query.getOrDefault("fields")
  valid_580479 = validateParameter(valid_580479, JString, required = false,
                                 default = nil)
  if valid_580479 != nil:
    section.add "fields", valid_580479
  var valid_580480 = query.getOrDefault("pageToken")
  valid_580480 = validateParameter(valid_580480, JString, required = false,
                                 default = nil)
  if valid_580480 != nil:
    section.add "pageToken", valid_580480
  var valid_580481 = query.getOrDefault("quotaUser")
  valid_580481 = validateParameter(valid_580481, JString, required = false,
                                 default = nil)
  if valid_580481 != nil:
    section.add "quotaUser", valid_580481
  var valid_580482 = query.getOrDefault("sortField")
  valid_580482 = validateParameter(valid_580482, JString, required = false,
                                 default = newJString("ID"))
  if valid_580482 != nil:
    section.add "sortField", valid_580482
  var valid_580483 = query.getOrDefault("alt")
  valid_580483 = validateParameter(valid_580483, JString, required = false,
                                 default = newJString("json"))
  if valid_580483 != nil:
    section.add "alt", valid_580483
  var valid_580484 = query.getOrDefault("searchString")
  valid_580484 = validateParameter(valid_580484, JString, required = false,
                                 default = nil)
  if valid_580484 != nil:
    section.add "searchString", valid_580484
  var valid_580485 = query.getOrDefault("oauth_token")
  valid_580485 = validateParameter(valid_580485, JString, required = false,
                                 default = nil)
  if valid_580485 != nil:
    section.add "oauth_token", valid_580485
  var valid_580486 = query.getOrDefault("campaignIds")
  valid_580486 = validateParameter(valid_580486, JArray, required = false,
                                 default = nil)
  if valid_580486 != nil:
    section.add "campaignIds", valid_580486
  var valid_580487 = query.getOrDefault("userIp")
  valid_580487 = validateParameter(valid_580487, JString, required = false,
                                 default = nil)
  if valid_580487 != nil:
    section.add "userIp", valid_580487
  var valid_580488 = query.getOrDefault("archived")
  valid_580488 = validateParameter(valid_580488, JBool, required = false, default = nil)
  if valid_580488 != nil:
    section.add "archived", valid_580488
  var valid_580489 = query.getOrDefault("maxResults")
  valid_580489 = validateParameter(valid_580489, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580489 != nil:
    section.add "maxResults", valid_580489
  var valid_580490 = query.getOrDefault("ids")
  valid_580490 = validateParameter(valid_580490, JArray, required = false,
                                 default = nil)
  if valid_580490 != nil:
    section.add "ids", valid_580490
  var valid_580491 = query.getOrDefault("key")
  valid_580491 = validateParameter(valid_580491, JString, required = false,
                                 default = nil)
  if valid_580491 != nil:
    section.add "key", valid_580491
  var valid_580492 = query.getOrDefault("advertiserIds")
  valid_580492 = validateParameter(valid_580492, JArray, required = false,
                                 default = nil)
  if valid_580492 != nil:
    section.add "advertiserIds", valid_580492
  var valid_580493 = query.getOrDefault("sortOrder")
  valid_580493 = validateParameter(valid_580493, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580493 != nil:
    section.add "sortOrder", valid_580493
  var valid_580494 = query.getOrDefault("prettyPrint")
  valid_580494 = validateParameter(valid_580494, JBool, required = false,
                                 default = newJBool(true))
  if valid_580494 != nil:
    section.add "prettyPrint", valid_580494
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580495: Call_DfareportingAdvertiserLandingPagesList_580474;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of landing pages.
  ## 
  let valid = call_580495.validator(path, query, header, formData, body)
  let scheme = call_580495.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580495.url(scheme.get, call_580495.host, call_580495.base,
                         call_580495.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580495, url, valid)

proc call*(call_580496: Call_DfareportingAdvertiserLandingPagesList_580474;
          profileId: string; subaccountId: string = ""; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; sortField: string = "ID";
          alt: string = "json"; searchString: string = ""; oauthToken: string = "";
          campaignIds: JsonNode = nil; userIp: string = ""; archived: bool = false;
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          advertiserIds: JsonNode = nil; sortOrder: string = "ASCENDING";
          prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserLandingPagesList
  ## Retrieves a list of landing pages.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   subaccountId: string
  ##               : Select only landing pages that belong to this subaccount.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for landing pages by name or ID. Wildcards (*) are allowed. For example, "landingpage*2017" will return landing pages with names like "landingpage July 2017", "landingpage March 2017", or simply "landingpage 2017". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "landingpage" will match campaigns with name "my landingpage", "landingpage 2015", or simply "landingpage".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   campaignIds: JArray
  ##              : Select only landing pages that are associated with these campaigns.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived landing pages. Don't set this field to select both archived and non-archived landing pages.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only landing pages with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only landing pages that belong to these advertisers.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580497 = newJObject()
  var query_580498 = newJObject()
  add(path_580497, "profileId", newJString(profileId))
  add(query_580498, "subaccountId", newJString(subaccountId))
  add(query_580498, "fields", newJString(fields))
  add(query_580498, "pageToken", newJString(pageToken))
  add(query_580498, "quotaUser", newJString(quotaUser))
  add(query_580498, "sortField", newJString(sortField))
  add(query_580498, "alt", newJString(alt))
  add(query_580498, "searchString", newJString(searchString))
  add(query_580498, "oauth_token", newJString(oauthToken))
  if campaignIds != nil:
    query_580498.add "campaignIds", campaignIds
  add(query_580498, "userIp", newJString(userIp))
  add(query_580498, "archived", newJBool(archived))
  add(query_580498, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_580498.add "ids", ids
  add(query_580498, "key", newJString(key))
  if advertiserIds != nil:
    query_580498.add "advertiserIds", advertiserIds
  add(query_580498, "sortOrder", newJString(sortOrder))
  add(query_580498, "prettyPrint", newJBool(prettyPrint))
  result = call_580496.call(path_580497, query_580498, nil, nil, nil)

var dfareportingAdvertiserLandingPagesList* = Call_DfareportingAdvertiserLandingPagesList_580474(
    name: "dfareportingAdvertiserLandingPagesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages",
    validator: validate_DfareportingAdvertiserLandingPagesList_580475,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserLandingPagesList_580476,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesPatch_580533 = ref object of OpenApiRestCall_579437
proc url_DfareportingAdvertiserLandingPagesPatch_580535(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesPatch_580534(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing landing page. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580536 = path.getOrDefault("profileId")
  valid_580536 = validateParameter(valid_580536, JString, required = true,
                                 default = nil)
  if valid_580536 != nil:
    section.add "profileId", valid_580536
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Landing page ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580537 = query.getOrDefault("fields")
  valid_580537 = validateParameter(valid_580537, JString, required = false,
                                 default = nil)
  if valid_580537 != nil:
    section.add "fields", valid_580537
  var valid_580538 = query.getOrDefault("quotaUser")
  valid_580538 = validateParameter(valid_580538, JString, required = false,
                                 default = nil)
  if valid_580538 != nil:
    section.add "quotaUser", valid_580538
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580539 = query.getOrDefault("id")
  valid_580539 = validateParameter(valid_580539, JString, required = true,
                                 default = nil)
  if valid_580539 != nil:
    section.add "id", valid_580539
  var valid_580540 = query.getOrDefault("alt")
  valid_580540 = validateParameter(valid_580540, JString, required = false,
                                 default = newJString("json"))
  if valid_580540 != nil:
    section.add "alt", valid_580540
  var valid_580541 = query.getOrDefault("oauth_token")
  valid_580541 = validateParameter(valid_580541, JString, required = false,
                                 default = nil)
  if valid_580541 != nil:
    section.add "oauth_token", valid_580541
  var valid_580542 = query.getOrDefault("userIp")
  valid_580542 = validateParameter(valid_580542, JString, required = false,
                                 default = nil)
  if valid_580542 != nil:
    section.add "userIp", valid_580542
  var valid_580543 = query.getOrDefault("key")
  valid_580543 = validateParameter(valid_580543, JString, required = false,
                                 default = nil)
  if valid_580543 != nil:
    section.add "key", valid_580543
  var valid_580544 = query.getOrDefault("prettyPrint")
  valid_580544 = validateParameter(valid_580544, JBool, required = false,
                                 default = newJBool(true))
  if valid_580544 != nil:
    section.add "prettyPrint", valid_580544
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580546: Call_DfareportingAdvertiserLandingPagesPatch_580533;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing landing page. This method supports patch semantics.
  ## 
  let valid = call_580546.validator(path, query, header, formData, body)
  let scheme = call_580546.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580546.url(scheme.get, call_580546.host, call_580546.base,
                         call_580546.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580546, url, valid)

proc call*(call_580547: Call_DfareportingAdvertiserLandingPagesPatch_580533;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserLandingPagesPatch
  ## Updates an existing landing page. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Landing page ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580548 = newJObject()
  var query_580549 = newJObject()
  var body_580550 = newJObject()
  add(path_580548, "profileId", newJString(profileId))
  add(query_580549, "fields", newJString(fields))
  add(query_580549, "quotaUser", newJString(quotaUser))
  add(query_580549, "id", newJString(id))
  add(query_580549, "alt", newJString(alt))
  add(query_580549, "oauth_token", newJString(oauthToken))
  add(query_580549, "userIp", newJString(userIp))
  add(query_580549, "key", newJString(key))
  if body != nil:
    body_580550 = body
  add(query_580549, "prettyPrint", newJBool(prettyPrint))
  result = call_580547.call(path_580548, query_580549, nil, nil, body_580550)

var dfareportingAdvertiserLandingPagesPatch* = Call_DfareportingAdvertiserLandingPagesPatch_580533(
    name: "dfareportingAdvertiserLandingPagesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages",
    validator: validate_DfareportingAdvertiserLandingPagesPatch_580534,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserLandingPagesPatch_580535,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesGet_580551 = ref object of OpenApiRestCall_579437
proc url_DfareportingAdvertiserLandingPagesGet_580553(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesGet_580552(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one landing page by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Landing page ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580554 = path.getOrDefault("profileId")
  valid_580554 = validateParameter(valid_580554, JString, required = true,
                                 default = nil)
  if valid_580554 != nil:
    section.add "profileId", valid_580554
  var valid_580555 = path.getOrDefault("id")
  valid_580555 = validateParameter(valid_580555, JString, required = true,
                                 default = nil)
  if valid_580555 != nil:
    section.add "id", valid_580555
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580556 = query.getOrDefault("fields")
  valid_580556 = validateParameter(valid_580556, JString, required = false,
                                 default = nil)
  if valid_580556 != nil:
    section.add "fields", valid_580556
  var valid_580557 = query.getOrDefault("quotaUser")
  valid_580557 = validateParameter(valid_580557, JString, required = false,
                                 default = nil)
  if valid_580557 != nil:
    section.add "quotaUser", valid_580557
  var valid_580558 = query.getOrDefault("alt")
  valid_580558 = validateParameter(valid_580558, JString, required = false,
                                 default = newJString("json"))
  if valid_580558 != nil:
    section.add "alt", valid_580558
  var valid_580559 = query.getOrDefault("oauth_token")
  valid_580559 = validateParameter(valid_580559, JString, required = false,
                                 default = nil)
  if valid_580559 != nil:
    section.add "oauth_token", valid_580559
  var valid_580560 = query.getOrDefault("userIp")
  valid_580560 = validateParameter(valid_580560, JString, required = false,
                                 default = nil)
  if valid_580560 != nil:
    section.add "userIp", valid_580560
  var valid_580561 = query.getOrDefault("key")
  valid_580561 = validateParameter(valid_580561, JString, required = false,
                                 default = nil)
  if valid_580561 != nil:
    section.add "key", valid_580561
  var valid_580562 = query.getOrDefault("prettyPrint")
  valid_580562 = validateParameter(valid_580562, JBool, required = false,
                                 default = newJBool(true))
  if valid_580562 != nil:
    section.add "prettyPrint", valid_580562
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580563: Call_DfareportingAdvertiserLandingPagesGet_580551;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one landing page by ID.
  ## 
  let valid = call_580563.validator(path, query, header, formData, body)
  let scheme = call_580563.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580563.url(scheme.get, call_580563.host, call_580563.base,
                         call_580563.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580563, url, valid)

proc call*(call_580564: Call_DfareportingAdvertiserLandingPagesGet_580551;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserLandingPagesGet
  ## Gets one landing page by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Landing page ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580565 = newJObject()
  var query_580566 = newJObject()
  add(path_580565, "profileId", newJString(profileId))
  add(query_580566, "fields", newJString(fields))
  add(query_580566, "quotaUser", newJString(quotaUser))
  add(query_580566, "alt", newJString(alt))
  add(query_580566, "oauth_token", newJString(oauthToken))
  add(query_580566, "userIp", newJString(userIp))
  add(path_580565, "id", newJString(id))
  add(query_580566, "key", newJString(key))
  add(query_580566, "prettyPrint", newJBool(prettyPrint))
  result = call_580564.call(path_580565, query_580566, nil, nil, nil)

var dfareportingAdvertiserLandingPagesGet* = Call_DfareportingAdvertiserLandingPagesGet_580551(
    name: "dfareportingAdvertiserLandingPagesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages/{id}",
    validator: validate_DfareportingAdvertiserLandingPagesGet_580552,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserLandingPagesGet_580553,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersUpdate_580594 = ref object of OpenApiRestCall_579437
proc url_DfareportingAdvertisersUpdate_580596(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersUpdate_580595(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing advertiser.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580597 = path.getOrDefault("profileId")
  valid_580597 = validateParameter(valid_580597, JString, required = true,
                                 default = nil)
  if valid_580597 != nil:
    section.add "profileId", valid_580597
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580598 = query.getOrDefault("fields")
  valid_580598 = validateParameter(valid_580598, JString, required = false,
                                 default = nil)
  if valid_580598 != nil:
    section.add "fields", valid_580598
  var valid_580599 = query.getOrDefault("quotaUser")
  valid_580599 = validateParameter(valid_580599, JString, required = false,
                                 default = nil)
  if valid_580599 != nil:
    section.add "quotaUser", valid_580599
  var valid_580600 = query.getOrDefault("alt")
  valid_580600 = validateParameter(valid_580600, JString, required = false,
                                 default = newJString("json"))
  if valid_580600 != nil:
    section.add "alt", valid_580600
  var valid_580601 = query.getOrDefault("oauth_token")
  valid_580601 = validateParameter(valid_580601, JString, required = false,
                                 default = nil)
  if valid_580601 != nil:
    section.add "oauth_token", valid_580601
  var valid_580602 = query.getOrDefault("userIp")
  valid_580602 = validateParameter(valid_580602, JString, required = false,
                                 default = nil)
  if valid_580602 != nil:
    section.add "userIp", valid_580602
  var valid_580603 = query.getOrDefault("key")
  valid_580603 = validateParameter(valid_580603, JString, required = false,
                                 default = nil)
  if valid_580603 != nil:
    section.add "key", valid_580603
  var valid_580604 = query.getOrDefault("prettyPrint")
  valid_580604 = validateParameter(valid_580604, JBool, required = false,
                                 default = newJBool(true))
  if valid_580604 != nil:
    section.add "prettyPrint", valid_580604
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580606: Call_DfareportingAdvertisersUpdate_580594; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing advertiser.
  ## 
  let valid = call_580606.validator(path, query, header, formData, body)
  let scheme = call_580606.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580606.url(scheme.get, call_580606.host, call_580606.base,
                         call_580606.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580606, url, valid)

proc call*(call_580607: Call_DfareportingAdvertisersUpdate_580594;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertisersUpdate
  ## Updates an existing advertiser.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580608 = newJObject()
  var query_580609 = newJObject()
  var body_580610 = newJObject()
  add(path_580608, "profileId", newJString(profileId))
  add(query_580609, "fields", newJString(fields))
  add(query_580609, "quotaUser", newJString(quotaUser))
  add(query_580609, "alt", newJString(alt))
  add(query_580609, "oauth_token", newJString(oauthToken))
  add(query_580609, "userIp", newJString(userIp))
  add(query_580609, "key", newJString(key))
  if body != nil:
    body_580610 = body
  add(query_580609, "prettyPrint", newJBool(prettyPrint))
  result = call_580607.call(path_580608, query_580609, nil, nil, body_580610)

var dfareportingAdvertisersUpdate* = Call_DfareportingAdvertisersUpdate_580594(
    name: "dfareportingAdvertisersUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/advertisers",
    validator: validate_DfareportingAdvertisersUpdate_580595,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertisersUpdate_580596,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersInsert_580611 = ref object of OpenApiRestCall_579437
proc url_DfareportingAdvertisersInsert_580613(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersInsert_580612(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new advertiser.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580614 = path.getOrDefault("profileId")
  valid_580614 = validateParameter(valid_580614, JString, required = true,
                                 default = nil)
  if valid_580614 != nil:
    section.add "profileId", valid_580614
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580615 = query.getOrDefault("fields")
  valid_580615 = validateParameter(valid_580615, JString, required = false,
                                 default = nil)
  if valid_580615 != nil:
    section.add "fields", valid_580615
  var valid_580616 = query.getOrDefault("quotaUser")
  valid_580616 = validateParameter(valid_580616, JString, required = false,
                                 default = nil)
  if valid_580616 != nil:
    section.add "quotaUser", valid_580616
  var valid_580617 = query.getOrDefault("alt")
  valid_580617 = validateParameter(valid_580617, JString, required = false,
                                 default = newJString("json"))
  if valid_580617 != nil:
    section.add "alt", valid_580617
  var valid_580618 = query.getOrDefault("oauth_token")
  valid_580618 = validateParameter(valid_580618, JString, required = false,
                                 default = nil)
  if valid_580618 != nil:
    section.add "oauth_token", valid_580618
  var valid_580619 = query.getOrDefault("userIp")
  valid_580619 = validateParameter(valid_580619, JString, required = false,
                                 default = nil)
  if valid_580619 != nil:
    section.add "userIp", valid_580619
  var valid_580620 = query.getOrDefault("key")
  valid_580620 = validateParameter(valid_580620, JString, required = false,
                                 default = nil)
  if valid_580620 != nil:
    section.add "key", valid_580620
  var valid_580621 = query.getOrDefault("prettyPrint")
  valid_580621 = validateParameter(valid_580621, JBool, required = false,
                                 default = newJBool(true))
  if valid_580621 != nil:
    section.add "prettyPrint", valid_580621
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580623: Call_DfareportingAdvertisersInsert_580611; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new advertiser.
  ## 
  let valid = call_580623.validator(path, query, header, formData, body)
  let scheme = call_580623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580623.url(scheme.get, call_580623.host, call_580623.base,
                         call_580623.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580623, url, valid)

proc call*(call_580624: Call_DfareportingAdvertisersInsert_580611;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertisersInsert
  ## Inserts a new advertiser.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580625 = newJObject()
  var query_580626 = newJObject()
  var body_580627 = newJObject()
  add(path_580625, "profileId", newJString(profileId))
  add(query_580626, "fields", newJString(fields))
  add(query_580626, "quotaUser", newJString(quotaUser))
  add(query_580626, "alt", newJString(alt))
  add(query_580626, "oauth_token", newJString(oauthToken))
  add(query_580626, "userIp", newJString(userIp))
  add(query_580626, "key", newJString(key))
  if body != nil:
    body_580627 = body
  add(query_580626, "prettyPrint", newJBool(prettyPrint))
  result = call_580624.call(path_580625, query_580626, nil, nil, body_580627)

var dfareportingAdvertisersInsert* = Call_DfareportingAdvertisersInsert_580611(
    name: "dfareportingAdvertisersInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/advertisers",
    validator: validate_DfareportingAdvertisersInsert_580612,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertisersInsert_580613,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersList_580567 = ref object of OpenApiRestCall_579437
proc url_DfareportingAdvertisersList_580569(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersList_580568(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of advertisers, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580570 = path.getOrDefault("profileId")
  valid_580570 = validateParameter(valid_580570, JString, required = true,
                                 default = nil)
  if valid_580570 != nil:
    section.add "profileId", valid_580570
  result.add "path", section
  ## parameters in `query` object:
  ##   subaccountId: JString
  ##               : Select only advertisers with these subaccount IDs.
  ##   advertiserGroupIds: JArray
  ##                     : Select only advertisers with these advertiser group IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   onlyParent: JBool
  ##             : Select only advertisers which use another advertiser's floodlight configuration.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser June 2015", "advertiser April 2015", or simply "advertiser 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertiser" will match objects with name "my advertiser", "advertiser 2015", or simply "advertiser".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   floodlightConfigurationIds: JArray
  ##                             : Select only advertisers with these floodlight configuration IDs.
  ##   ids: JArray
  ##      : Select only advertisers with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   status: JString
  ##         : Select only advertisers with the specified status.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   includeAdvertisersWithoutGroupsOnly: JBool
  ##                                      : Select only advertisers which do not belong to any advertiser group.
  section = newJObject()
  var valid_580571 = query.getOrDefault("subaccountId")
  valid_580571 = validateParameter(valid_580571, JString, required = false,
                                 default = nil)
  if valid_580571 != nil:
    section.add "subaccountId", valid_580571
  var valid_580572 = query.getOrDefault("advertiserGroupIds")
  valid_580572 = validateParameter(valid_580572, JArray, required = false,
                                 default = nil)
  if valid_580572 != nil:
    section.add "advertiserGroupIds", valid_580572
  var valid_580573 = query.getOrDefault("fields")
  valid_580573 = validateParameter(valid_580573, JString, required = false,
                                 default = nil)
  if valid_580573 != nil:
    section.add "fields", valid_580573
  var valid_580574 = query.getOrDefault("pageToken")
  valid_580574 = validateParameter(valid_580574, JString, required = false,
                                 default = nil)
  if valid_580574 != nil:
    section.add "pageToken", valid_580574
  var valid_580575 = query.getOrDefault("quotaUser")
  valid_580575 = validateParameter(valid_580575, JString, required = false,
                                 default = nil)
  if valid_580575 != nil:
    section.add "quotaUser", valid_580575
  var valid_580576 = query.getOrDefault("sortField")
  valid_580576 = validateParameter(valid_580576, JString, required = false,
                                 default = newJString("ID"))
  if valid_580576 != nil:
    section.add "sortField", valid_580576
  var valid_580577 = query.getOrDefault("alt")
  valid_580577 = validateParameter(valid_580577, JString, required = false,
                                 default = newJString("json"))
  if valid_580577 != nil:
    section.add "alt", valid_580577
  var valid_580578 = query.getOrDefault("onlyParent")
  valid_580578 = validateParameter(valid_580578, JBool, required = false, default = nil)
  if valid_580578 != nil:
    section.add "onlyParent", valid_580578
  var valid_580579 = query.getOrDefault("searchString")
  valid_580579 = validateParameter(valid_580579, JString, required = false,
                                 default = nil)
  if valid_580579 != nil:
    section.add "searchString", valid_580579
  var valid_580580 = query.getOrDefault("oauth_token")
  valid_580580 = validateParameter(valid_580580, JString, required = false,
                                 default = nil)
  if valid_580580 != nil:
    section.add "oauth_token", valid_580580
  var valid_580581 = query.getOrDefault("userIp")
  valid_580581 = validateParameter(valid_580581, JString, required = false,
                                 default = nil)
  if valid_580581 != nil:
    section.add "userIp", valid_580581
  var valid_580582 = query.getOrDefault("maxResults")
  valid_580582 = validateParameter(valid_580582, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580582 != nil:
    section.add "maxResults", valid_580582
  var valid_580583 = query.getOrDefault("floodlightConfigurationIds")
  valid_580583 = validateParameter(valid_580583, JArray, required = false,
                                 default = nil)
  if valid_580583 != nil:
    section.add "floodlightConfigurationIds", valid_580583
  var valid_580584 = query.getOrDefault("ids")
  valid_580584 = validateParameter(valid_580584, JArray, required = false,
                                 default = nil)
  if valid_580584 != nil:
    section.add "ids", valid_580584
  var valid_580585 = query.getOrDefault("key")
  valid_580585 = validateParameter(valid_580585, JString, required = false,
                                 default = nil)
  if valid_580585 != nil:
    section.add "key", valid_580585
  var valid_580586 = query.getOrDefault("status")
  valid_580586 = validateParameter(valid_580586, JString, required = false,
                                 default = newJString("APPROVED"))
  if valid_580586 != nil:
    section.add "status", valid_580586
  var valid_580587 = query.getOrDefault("sortOrder")
  valid_580587 = validateParameter(valid_580587, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580587 != nil:
    section.add "sortOrder", valid_580587
  var valid_580588 = query.getOrDefault("prettyPrint")
  valid_580588 = validateParameter(valid_580588, JBool, required = false,
                                 default = newJBool(true))
  if valid_580588 != nil:
    section.add "prettyPrint", valid_580588
  var valid_580589 = query.getOrDefault("includeAdvertisersWithoutGroupsOnly")
  valid_580589 = validateParameter(valid_580589, JBool, required = false, default = nil)
  if valid_580589 != nil:
    section.add "includeAdvertisersWithoutGroupsOnly", valid_580589
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580590: Call_DfareportingAdvertisersList_580567; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of advertisers, possibly filtered. This method supports paging.
  ## 
  let valid = call_580590.validator(path, query, header, formData, body)
  let scheme = call_580590.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580590.url(scheme.get, call_580590.host, call_580590.base,
                         call_580590.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580590, url, valid)

proc call*(call_580591: Call_DfareportingAdvertisersList_580567; profileId: string;
          subaccountId: string = ""; advertiserGroupIds: JsonNode = nil;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "ID"; alt: string = "json"; onlyParent: bool = false;
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; floodlightConfigurationIds: JsonNode = nil;
          ids: JsonNode = nil; key: string = ""; status: string = "APPROVED";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true;
          includeAdvertisersWithoutGroupsOnly: bool = false): Recallable =
  ## dfareportingAdvertisersList
  ## Retrieves a list of advertisers, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   subaccountId: string
  ##               : Select only advertisers with these subaccount IDs.
  ##   advertiserGroupIds: JArray
  ##                     : Select only advertisers with these advertiser group IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   onlyParent: bool
  ##             : Select only advertisers which use another advertiser's floodlight configuration.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser June 2015", "advertiser April 2015", or simply "advertiser 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertiser" will match objects with name "my advertiser", "advertiser 2015", or simply "advertiser".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   floodlightConfigurationIds: JArray
  ##                             : Select only advertisers with these floodlight configuration IDs.
  ##   ids: JArray
  ##      : Select only advertisers with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   status: string
  ##         : Select only advertisers with the specified status.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   includeAdvertisersWithoutGroupsOnly: bool
  ##                                      : Select only advertisers which do not belong to any advertiser group.
  var path_580592 = newJObject()
  var query_580593 = newJObject()
  add(path_580592, "profileId", newJString(profileId))
  add(query_580593, "subaccountId", newJString(subaccountId))
  if advertiserGroupIds != nil:
    query_580593.add "advertiserGroupIds", advertiserGroupIds
  add(query_580593, "fields", newJString(fields))
  add(query_580593, "pageToken", newJString(pageToken))
  add(query_580593, "quotaUser", newJString(quotaUser))
  add(query_580593, "sortField", newJString(sortField))
  add(query_580593, "alt", newJString(alt))
  add(query_580593, "onlyParent", newJBool(onlyParent))
  add(query_580593, "searchString", newJString(searchString))
  add(query_580593, "oauth_token", newJString(oauthToken))
  add(query_580593, "userIp", newJString(userIp))
  add(query_580593, "maxResults", newJInt(maxResults))
  if floodlightConfigurationIds != nil:
    query_580593.add "floodlightConfigurationIds", floodlightConfigurationIds
  if ids != nil:
    query_580593.add "ids", ids
  add(query_580593, "key", newJString(key))
  add(query_580593, "status", newJString(status))
  add(query_580593, "sortOrder", newJString(sortOrder))
  add(query_580593, "prettyPrint", newJBool(prettyPrint))
  add(query_580593, "includeAdvertisersWithoutGroupsOnly",
      newJBool(includeAdvertisersWithoutGroupsOnly))
  result = call_580591.call(path_580592, query_580593, nil, nil, nil)

var dfareportingAdvertisersList* = Call_DfareportingAdvertisersList_580567(
    name: "dfareportingAdvertisersList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/advertisers",
    validator: validate_DfareportingAdvertisersList_580568,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertisersList_580569,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersPatch_580628 = ref object of OpenApiRestCall_579437
proc url_DfareportingAdvertisersPatch_580630(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersPatch_580629(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing advertiser. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580631 = path.getOrDefault("profileId")
  valid_580631 = validateParameter(valid_580631, JString, required = true,
                                 default = nil)
  if valid_580631 != nil:
    section.add "profileId", valid_580631
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Advertiser ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580632 = query.getOrDefault("fields")
  valid_580632 = validateParameter(valid_580632, JString, required = false,
                                 default = nil)
  if valid_580632 != nil:
    section.add "fields", valid_580632
  var valid_580633 = query.getOrDefault("quotaUser")
  valid_580633 = validateParameter(valid_580633, JString, required = false,
                                 default = nil)
  if valid_580633 != nil:
    section.add "quotaUser", valid_580633
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580634 = query.getOrDefault("id")
  valid_580634 = validateParameter(valid_580634, JString, required = true,
                                 default = nil)
  if valid_580634 != nil:
    section.add "id", valid_580634
  var valid_580635 = query.getOrDefault("alt")
  valid_580635 = validateParameter(valid_580635, JString, required = false,
                                 default = newJString("json"))
  if valid_580635 != nil:
    section.add "alt", valid_580635
  var valid_580636 = query.getOrDefault("oauth_token")
  valid_580636 = validateParameter(valid_580636, JString, required = false,
                                 default = nil)
  if valid_580636 != nil:
    section.add "oauth_token", valid_580636
  var valid_580637 = query.getOrDefault("userIp")
  valid_580637 = validateParameter(valid_580637, JString, required = false,
                                 default = nil)
  if valid_580637 != nil:
    section.add "userIp", valid_580637
  var valid_580638 = query.getOrDefault("key")
  valid_580638 = validateParameter(valid_580638, JString, required = false,
                                 default = nil)
  if valid_580638 != nil:
    section.add "key", valid_580638
  var valid_580639 = query.getOrDefault("prettyPrint")
  valid_580639 = validateParameter(valid_580639, JBool, required = false,
                                 default = newJBool(true))
  if valid_580639 != nil:
    section.add "prettyPrint", valid_580639
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580641: Call_DfareportingAdvertisersPatch_580628; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing advertiser. This method supports patch semantics.
  ## 
  let valid = call_580641.validator(path, query, header, formData, body)
  let scheme = call_580641.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580641.url(scheme.get, call_580641.host, call_580641.base,
                         call_580641.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580641, url, valid)

proc call*(call_580642: Call_DfareportingAdvertisersPatch_580628;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertisersPatch
  ## Updates an existing advertiser. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Advertiser ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580643 = newJObject()
  var query_580644 = newJObject()
  var body_580645 = newJObject()
  add(path_580643, "profileId", newJString(profileId))
  add(query_580644, "fields", newJString(fields))
  add(query_580644, "quotaUser", newJString(quotaUser))
  add(query_580644, "id", newJString(id))
  add(query_580644, "alt", newJString(alt))
  add(query_580644, "oauth_token", newJString(oauthToken))
  add(query_580644, "userIp", newJString(userIp))
  add(query_580644, "key", newJString(key))
  if body != nil:
    body_580645 = body
  add(query_580644, "prettyPrint", newJBool(prettyPrint))
  result = call_580642.call(path_580643, query_580644, nil, nil, body_580645)

var dfareportingAdvertisersPatch* = Call_DfareportingAdvertisersPatch_580628(
    name: "dfareportingAdvertisersPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/advertisers",
    validator: validate_DfareportingAdvertisersPatch_580629,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertisersPatch_580630,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersGet_580646 = ref object of OpenApiRestCall_579437
proc url_DfareportingAdvertisersGet_580648(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersGet_580647(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one advertiser by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Advertiser ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580649 = path.getOrDefault("profileId")
  valid_580649 = validateParameter(valid_580649, JString, required = true,
                                 default = nil)
  if valid_580649 != nil:
    section.add "profileId", valid_580649
  var valid_580650 = path.getOrDefault("id")
  valid_580650 = validateParameter(valid_580650, JString, required = true,
                                 default = nil)
  if valid_580650 != nil:
    section.add "id", valid_580650
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580651 = query.getOrDefault("fields")
  valid_580651 = validateParameter(valid_580651, JString, required = false,
                                 default = nil)
  if valid_580651 != nil:
    section.add "fields", valid_580651
  var valid_580652 = query.getOrDefault("quotaUser")
  valid_580652 = validateParameter(valid_580652, JString, required = false,
                                 default = nil)
  if valid_580652 != nil:
    section.add "quotaUser", valid_580652
  var valid_580653 = query.getOrDefault("alt")
  valid_580653 = validateParameter(valid_580653, JString, required = false,
                                 default = newJString("json"))
  if valid_580653 != nil:
    section.add "alt", valid_580653
  var valid_580654 = query.getOrDefault("oauth_token")
  valid_580654 = validateParameter(valid_580654, JString, required = false,
                                 default = nil)
  if valid_580654 != nil:
    section.add "oauth_token", valid_580654
  var valid_580655 = query.getOrDefault("userIp")
  valid_580655 = validateParameter(valid_580655, JString, required = false,
                                 default = nil)
  if valid_580655 != nil:
    section.add "userIp", valid_580655
  var valid_580656 = query.getOrDefault("key")
  valid_580656 = validateParameter(valid_580656, JString, required = false,
                                 default = nil)
  if valid_580656 != nil:
    section.add "key", valid_580656
  var valid_580657 = query.getOrDefault("prettyPrint")
  valid_580657 = validateParameter(valid_580657, JBool, required = false,
                                 default = newJBool(true))
  if valid_580657 != nil:
    section.add "prettyPrint", valid_580657
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580658: Call_DfareportingAdvertisersGet_580646; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one advertiser by ID.
  ## 
  let valid = call_580658.validator(path, query, header, formData, body)
  let scheme = call_580658.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580658.url(scheme.get, call_580658.host, call_580658.base,
                         call_580658.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580658, url, valid)

proc call*(call_580659: Call_DfareportingAdvertisersGet_580646; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertisersGet
  ## Gets one advertiser by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Advertiser ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580660 = newJObject()
  var query_580661 = newJObject()
  add(path_580660, "profileId", newJString(profileId))
  add(query_580661, "fields", newJString(fields))
  add(query_580661, "quotaUser", newJString(quotaUser))
  add(query_580661, "alt", newJString(alt))
  add(query_580661, "oauth_token", newJString(oauthToken))
  add(query_580661, "userIp", newJString(userIp))
  add(path_580660, "id", newJString(id))
  add(query_580661, "key", newJString(key))
  add(query_580661, "prettyPrint", newJBool(prettyPrint))
  result = call_580659.call(path_580660, query_580661, nil, nil, nil)

var dfareportingAdvertisersGet* = Call_DfareportingAdvertisersGet_580646(
    name: "dfareportingAdvertisersGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertisers/{id}",
    validator: validate_DfareportingAdvertisersGet_580647,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertisersGet_580648,
    schemes: {Scheme.Https})
type
  Call_DfareportingBrowsersList_580662 = ref object of OpenApiRestCall_579437
proc url_DfareportingBrowsersList_580664(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/browsers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingBrowsersList_580663(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of browsers.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580665 = path.getOrDefault("profileId")
  valid_580665 = validateParameter(valid_580665, JString, required = true,
                                 default = nil)
  if valid_580665 != nil:
    section.add "profileId", valid_580665
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580666 = query.getOrDefault("fields")
  valid_580666 = validateParameter(valid_580666, JString, required = false,
                                 default = nil)
  if valid_580666 != nil:
    section.add "fields", valid_580666
  var valid_580667 = query.getOrDefault("quotaUser")
  valid_580667 = validateParameter(valid_580667, JString, required = false,
                                 default = nil)
  if valid_580667 != nil:
    section.add "quotaUser", valid_580667
  var valid_580668 = query.getOrDefault("alt")
  valid_580668 = validateParameter(valid_580668, JString, required = false,
                                 default = newJString("json"))
  if valid_580668 != nil:
    section.add "alt", valid_580668
  var valid_580669 = query.getOrDefault("oauth_token")
  valid_580669 = validateParameter(valid_580669, JString, required = false,
                                 default = nil)
  if valid_580669 != nil:
    section.add "oauth_token", valid_580669
  var valid_580670 = query.getOrDefault("userIp")
  valid_580670 = validateParameter(valid_580670, JString, required = false,
                                 default = nil)
  if valid_580670 != nil:
    section.add "userIp", valid_580670
  var valid_580671 = query.getOrDefault("key")
  valid_580671 = validateParameter(valid_580671, JString, required = false,
                                 default = nil)
  if valid_580671 != nil:
    section.add "key", valid_580671
  var valid_580672 = query.getOrDefault("prettyPrint")
  valid_580672 = validateParameter(valid_580672, JBool, required = false,
                                 default = newJBool(true))
  if valid_580672 != nil:
    section.add "prettyPrint", valid_580672
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580673: Call_DfareportingBrowsersList_580662; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of browsers.
  ## 
  let valid = call_580673.validator(path, query, header, formData, body)
  let scheme = call_580673.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580673.url(scheme.get, call_580673.host, call_580673.base,
                         call_580673.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580673, url, valid)

proc call*(call_580674: Call_DfareportingBrowsersList_580662; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingBrowsersList
  ## Retrieves a list of browsers.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580675 = newJObject()
  var query_580676 = newJObject()
  add(path_580675, "profileId", newJString(profileId))
  add(query_580676, "fields", newJString(fields))
  add(query_580676, "quotaUser", newJString(quotaUser))
  add(query_580676, "alt", newJString(alt))
  add(query_580676, "oauth_token", newJString(oauthToken))
  add(query_580676, "userIp", newJString(userIp))
  add(query_580676, "key", newJString(key))
  add(query_580676, "prettyPrint", newJBool(prettyPrint))
  result = call_580674.call(path_580675, query_580676, nil, nil, nil)

var dfareportingBrowsersList* = Call_DfareportingBrowsersList_580662(
    name: "dfareportingBrowsersList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/browsers",
    validator: validate_DfareportingBrowsersList_580663,
    base: "/dfareporting/v3.2", url: url_DfareportingBrowsersList_580664,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsUpdate_580705 = ref object of OpenApiRestCall_579437
proc url_DfareportingCampaignsUpdate_580707(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsUpdate_580706(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing campaign.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580708 = path.getOrDefault("profileId")
  valid_580708 = validateParameter(valid_580708, JString, required = true,
                                 default = nil)
  if valid_580708 != nil:
    section.add "profileId", valid_580708
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580709 = query.getOrDefault("fields")
  valid_580709 = validateParameter(valid_580709, JString, required = false,
                                 default = nil)
  if valid_580709 != nil:
    section.add "fields", valid_580709
  var valid_580710 = query.getOrDefault("quotaUser")
  valid_580710 = validateParameter(valid_580710, JString, required = false,
                                 default = nil)
  if valid_580710 != nil:
    section.add "quotaUser", valid_580710
  var valid_580711 = query.getOrDefault("alt")
  valid_580711 = validateParameter(valid_580711, JString, required = false,
                                 default = newJString("json"))
  if valid_580711 != nil:
    section.add "alt", valid_580711
  var valid_580712 = query.getOrDefault("oauth_token")
  valid_580712 = validateParameter(valid_580712, JString, required = false,
                                 default = nil)
  if valid_580712 != nil:
    section.add "oauth_token", valid_580712
  var valid_580713 = query.getOrDefault("userIp")
  valid_580713 = validateParameter(valid_580713, JString, required = false,
                                 default = nil)
  if valid_580713 != nil:
    section.add "userIp", valid_580713
  var valid_580714 = query.getOrDefault("key")
  valid_580714 = validateParameter(valid_580714, JString, required = false,
                                 default = nil)
  if valid_580714 != nil:
    section.add "key", valid_580714
  var valid_580715 = query.getOrDefault("prettyPrint")
  valid_580715 = validateParameter(valid_580715, JBool, required = false,
                                 default = newJBool(true))
  if valid_580715 != nil:
    section.add "prettyPrint", valid_580715
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580717: Call_DfareportingCampaignsUpdate_580705; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing campaign.
  ## 
  let valid = call_580717.validator(path, query, header, formData, body)
  let scheme = call_580717.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580717.url(scheme.get, call_580717.host, call_580717.base,
                         call_580717.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580717, url, valid)

proc call*(call_580718: Call_DfareportingCampaignsUpdate_580705; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCampaignsUpdate
  ## Updates an existing campaign.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580719 = newJObject()
  var query_580720 = newJObject()
  var body_580721 = newJObject()
  add(path_580719, "profileId", newJString(profileId))
  add(query_580720, "fields", newJString(fields))
  add(query_580720, "quotaUser", newJString(quotaUser))
  add(query_580720, "alt", newJString(alt))
  add(query_580720, "oauth_token", newJString(oauthToken))
  add(query_580720, "userIp", newJString(userIp))
  add(query_580720, "key", newJString(key))
  if body != nil:
    body_580721 = body
  add(query_580720, "prettyPrint", newJBool(prettyPrint))
  result = call_580718.call(path_580719, query_580720, nil, nil, body_580721)

var dfareportingCampaignsUpdate* = Call_DfareportingCampaignsUpdate_580705(
    name: "dfareportingCampaignsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns",
    validator: validate_DfareportingCampaignsUpdate_580706,
    base: "/dfareporting/v3.2", url: url_DfareportingCampaignsUpdate_580707,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsInsert_580722 = ref object of OpenApiRestCall_579437
proc url_DfareportingCampaignsInsert_580724(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsInsert_580723(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new campaign.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580725 = path.getOrDefault("profileId")
  valid_580725 = validateParameter(valid_580725, JString, required = true,
                                 default = nil)
  if valid_580725 != nil:
    section.add "profileId", valid_580725
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580726 = query.getOrDefault("fields")
  valid_580726 = validateParameter(valid_580726, JString, required = false,
                                 default = nil)
  if valid_580726 != nil:
    section.add "fields", valid_580726
  var valid_580727 = query.getOrDefault("quotaUser")
  valid_580727 = validateParameter(valid_580727, JString, required = false,
                                 default = nil)
  if valid_580727 != nil:
    section.add "quotaUser", valid_580727
  var valid_580728 = query.getOrDefault("alt")
  valid_580728 = validateParameter(valid_580728, JString, required = false,
                                 default = newJString("json"))
  if valid_580728 != nil:
    section.add "alt", valid_580728
  var valid_580729 = query.getOrDefault("oauth_token")
  valid_580729 = validateParameter(valid_580729, JString, required = false,
                                 default = nil)
  if valid_580729 != nil:
    section.add "oauth_token", valid_580729
  var valid_580730 = query.getOrDefault("userIp")
  valid_580730 = validateParameter(valid_580730, JString, required = false,
                                 default = nil)
  if valid_580730 != nil:
    section.add "userIp", valid_580730
  var valid_580731 = query.getOrDefault("key")
  valid_580731 = validateParameter(valid_580731, JString, required = false,
                                 default = nil)
  if valid_580731 != nil:
    section.add "key", valid_580731
  var valid_580732 = query.getOrDefault("prettyPrint")
  valid_580732 = validateParameter(valid_580732, JBool, required = false,
                                 default = newJBool(true))
  if valid_580732 != nil:
    section.add "prettyPrint", valid_580732
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580734: Call_DfareportingCampaignsInsert_580722; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new campaign.
  ## 
  let valid = call_580734.validator(path, query, header, formData, body)
  let scheme = call_580734.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580734.url(scheme.get, call_580734.host, call_580734.base,
                         call_580734.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580734, url, valid)

proc call*(call_580735: Call_DfareportingCampaignsInsert_580722; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCampaignsInsert
  ## Inserts a new campaign.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580736 = newJObject()
  var query_580737 = newJObject()
  var body_580738 = newJObject()
  add(path_580736, "profileId", newJString(profileId))
  add(query_580737, "fields", newJString(fields))
  add(query_580737, "quotaUser", newJString(quotaUser))
  add(query_580737, "alt", newJString(alt))
  add(query_580737, "oauth_token", newJString(oauthToken))
  add(query_580737, "userIp", newJString(userIp))
  add(query_580737, "key", newJString(key))
  if body != nil:
    body_580738 = body
  add(query_580737, "prettyPrint", newJBool(prettyPrint))
  result = call_580735.call(path_580736, query_580737, nil, nil, body_580738)

var dfareportingCampaignsInsert* = Call_DfareportingCampaignsInsert_580722(
    name: "dfareportingCampaignsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns",
    validator: validate_DfareportingCampaignsInsert_580723,
    base: "/dfareporting/v3.2", url: url_DfareportingCampaignsInsert_580724,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsList_580677 = ref object of OpenApiRestCall_579437
proc url_DfareportingCampaignsList_580679(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsList_580678(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of campaigns, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580680 = path.getOrDefault("profileId")
  valid_580680 = validateParameter(valid_580680, JString, required = true,
                                 default = nil)
  if valid_580680 != nil:
    section.add "profileId", valid_580680
  result.add "path", section
  ## parameters in `query` object:
  ##   overriddenEventTagId: JString
  ##                       : Select only campaigns that have overridden this event tag ID.
  ##   subaccountId: JString
  ##               : Select only campaigns that belong to this subaccount.
  ##   advertiserGroupIds: JArray
  ##                     : Select only campaigns whose advertisers belong to these advertiser groups.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   atLeastOneOptimizationActivity: JBool
  ##                                 : Select only campaigns that have at least one optimization activity.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for campaigns by name or ID. Wildcards (*) are allowed. For example, "campaign*2015" will return campaigns with names like "campaign June 2015", "campaign April 2015", or simply "campaign 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "campaign" will match campaigns with name "my campaign", "campaign 2015", or simply "campaign".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived campaigns. Don't set this field to select both archived and non-archived campaigns.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only campaigns with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only campaigns that belong to these advertisers.
  ##   excludedIds: JArray
  ##              : Exclude campaigns with these IDs.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580681 = query.getOrDefault("overriddenEventTagId")
  valid_580681 = validateParameter(valid_580681, JString, required = false,
                                 default = nil)
  if valid_580681 != nil:
    section.add "overriddenEventTagId", valid_580681
  var valid_580682 = query.getOrDefault("subaccountId")
  valid_580682 = validateParameter(valid_580682, JString, required = false,
                                 default = nil)
  if valid_580682 != nil:
    section.add "subaccountId", valid_580682
  var valid_580683 = query.getOrDefault("advertiserGroupIds")
  valid_580683 = validateParameter(valid_580683, JArray, required = false,
                                 default = nil)
  if valid_580683 != nil:
    section.add "advertiserGroupIds", valid_580683
  var valid_580684 = query.getOrDefault("fields")
  valid_580684 = validateParameter(valid_580684, JString, required = false,
                                 default = nil)
  if valid_580684 != nil:
    section.add "fields", valid_580684
  var valid_580685 = query.getOrDefault("atLeastOneOptimizationActivity")
  valid_580685 = validateParameter(valid_580685, JBool, required = false, default = nil)
  if valid_580685 != nil:
    section.add "atLeastOneOptimizationActivity", valid_580685
  var valid_580686 = query.getOrDefault("quotaUser")
  valid_580686 = validateParameter(valid_580686, JString, required = false,
                                 default = nil)
  if valid_580686 != nil:
    section.add "quotaUser", valid_580686
  var valid_580687 = query.getOrDefault("pageToken")
  valid_580687 = validateParameter(valid_580687, JString, required = false,
                                 default = nil)
  if valid_580687 != nil:
    section.add "pageToken", valid_580687
  var valid_580688 = query.getOrDefault("sortField")
  valid_580688 = validateParameter(valid_580688, JString, required = false,
                                 default = newJString("ID"))
  if valid_580688 != nil:
    section.add "sortField", valid_580688
  var valid_580689 = query.getOrDefault("alt")
  valid_580689 = validateParameter(valid_580689, JString, required = false,
                                 default = newJString("json"))
  if valid_580689 != nil:
    section.add "alt", valid_580689
  var valid_580690 = query.getOrDefault("searchString")
  valid_580690 = validateParameter(valid_580690, JString, required = false,
                                 default = nil)
  if valid_580690 != nil:
    section.add "searchString", valid_580690
  var valid_580691 = query.getOrDefault("oauth_token")
  valid_580691 = validateParameter(valid_580691, JString, required = false,
                                 default = nil)
  if valid_580691 != nil:
    section.add "oauth_token", valid_580691
  var valid_580692 = query.getOrDefault("userIp")
  valid_580692 = validateParameter(valid_580692, JString, required = false,
                                 default = nil)
  if valid_580692 != nil:
    section.add "userIp", valid_580692
  var valid_580693 = query.getOrDefault("archived")
  valid_580693 = validateParameter(valid_580693, JBool, required = false, default = nil)
  if valid_580693 != nil:
    section.add "archived", valid_580693
  var valid_580694 = query.getOrDefault("maxResults")
  valid_580694 = validateParameter(valid_580694, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580694 != nil:
    section.add "maxResults", valid_580694
  var valid_580695 = query.getOrDefault("ids")
  valid_580695 = validateParameter(valid_580695, JArray, required = false,
                                 default = nil)
  if valid_580695 != nil:
    section.add "ids", valid_580695
  var valid_580696 = query.getOrDefault("key")
  valid_580696 = validateParameter(valid_580696, JString, required = false,
                                 default = nil)
  if valid_580696 != nil:
    section.add "key", valid_580696
  var valid_580697 = query.getOrDefault("advertiserIds")
  valid_580697 = validateParameter(valid_580697, JArray, required = false,
                                 default = nil)
  if valid_580697 != nil:
    section.add "advertiserIds", valid_580697
  var valid_580698 = query.getOrDefault("excludedIds")
  valid_580698 = validateParameter(valid_580698, JArray, required = false,
                                 default = nil)
  if valid_580698 != nil:
    section.add "excludedIds", valid_580698
  var valid_580699 = query.getOrDefault("sortOrder")
  valid_580699 = validateParameter(valid_580699, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580699 != nil:
    section.add "sortOrder", valid_580699
  var valid_580700 = query.getOrDefault("prettyPrint")
  valid_580700 = validateParameter(valid_580700, JBool, required = false,
                                 default = newJBool(true))
  if valid_580700 != nil:
    section.add "prettyPrint", valid_580700
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580701: Call_DfareportingCampaignsList_580677; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of campaigns, possibly filtered. This method supports paging.
  ## 
  let valid = call_580701.validator(path, query, header, formData, body)
  let scheme = call_580701.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580701.url(scheme.get, call_580701.host, call_580701.base,
                         call_580701.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580701, url, valid)

proc call*(call_580702: Call_DfareportingCampaignsList_580677; profileId: string;
          overriddenEventTagId: string = ""; subaccountId: string = "";
          advertiserGroupIds: JsonNode = nil; fields: string = "";
          atLeastOneOptimizationActivity: bool = false; quotaUser: string = "";
          pageToken: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          archived: bool = false; maxResults: int = 1000; ids: JsonNode = nil;
          key: string = ""; advertiserIds: JsonNode = nil; excludedIds: JsonNode = nil;
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingCampaignsList
  ## Retrieves a list of campaigns, possibly filtered. This method supports paging.
  ##   overriddenEventTagId: string
  ##                       : Select only campaigns that have overridden this event tag ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   subaccountId: string
  ##               : Select only campaigns that belong to this subaccount.
  ##   advertiserGroupIds: JArray
  ##                     : Select only campaigns whose advertisers belong to these advertiser groups.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   atLeastOneOptimizationActivity: bool
  ##                                 : Select only campaigns that have at least one optimization activity.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for campaigns by name or ID. Wildcards (*) are allowed. For example, "campaign*2015" will return campaigns with names like "campaign June 2015", "campaign April 2015", or simply "campaign 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "campaign" will match campaigns with name "my campaign", "campaign 2015", or simply "campaign".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived campaigns. Don't set this field to select both archived and non-archived campaigns.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only campaigns with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only campaigns that belong to these advertisers.
  ##   excludedIds: JArray
  ##              : Exclude campaigns with these IDs.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580703 = newJObject()
  var query_580704 = newJObject()
  add(query_580704, "overriddenEventTagId", newJString(overriddenEventTagId))
  add(path_580703, "profileId", newJString(profileId))
  add(query_580704, "subaccountId", newJString(subaccountId))
  if advertiserGroupIds != nil:
    query_580704.add "advertiserGroupIds", advertiserGroupIds
  add(query_580704, "fields", newJString(fields))
  add(query_580704, "atLeastOneOptimizationActivity",
      newJBool(atLeastOneOptimizationActivity))
  add(query_580704, "quotaUser", newJString(quotaUser))
  add(query_580704, "pageToken", newJString(pageToken))
  add(query_580704, "sortField", newJString(sortField))
  add(query_580704, "alt", newJString(alt))
  add(query_580704, "searchString", newJString(searchString))
  add(query_580704, "oauth_token", newJString(oauthToken))
  add(query_580704, "userIp", newJString(userIp))
  add(query_580704, "archived", newJBool(archived))
  add(query_580704, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_580704.add "ids", ids
  add(query_580704, "key", newJString(key))
  if advertiserIds != nil:
    query_580704.add "advertiserIds", advertiserIds
  if excludedIds != nil:
    query_580704.add "excludedIds", excludedIds
  add(query_580704, "sortOrder", newJString(sortOrder))
  add(query_580704, "prettyPrint", newJBool(prettyPrint))
  result = call_580702.call(path_580703, query_580704, nil, nil, nil)

var dfareportingCampaignsList* = Call_DfareportingCampaignsList_580677(
    name: "dfareportingCampaignsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns",
    validator: validate_DfareportingCampaignsList_580678,
    base: "/dfareporting/v3.2", url: url_DfareportingCampaignsList_580679,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsPatch_580739 = ref object of OpenApiRestCall_579437
proc url_DfareportingCampaignsPatch_580741(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsPatch_580740(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing campaign. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580742 = path.getOrDefault("profileId")
  valid_580742 = validateParameter(valid_580742, JString, required = true,
                                 default = nil)
  if valid_580742 != nil:
    section.add "profileId", valid_580742
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Campaign ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580743 = query.getOrDefault("fields")
  valid_580743 = validateParameter(valid_580743, JString, required = false,
                                 default = nil)
  if valid_580743 != nil:
    section.add "fields", valid_580743
  var valid_580744 = query.getOrDefault("quotaUser")
  valid_580744 = validateParameter(valid_580744, JString, required = false,
                                 default = nil)
  if valid_580744 != nil:
    section.add "quotaUser", valid_580744
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580745 = query.getOrDefault("id")
  valid_580745 = validateParameter(valid_580745, JString, required = true,
                                 default = nil)
  if valid_580745 != nil:
    section.add "id", valid_580745
  var valid_580746 = query.getOrDefault("alt")
  valid_580746 = validateParameter(valid_580746, JString, required = false,
                                 default = newJString("json"))
  if valid_580746 != nil:
    section.add "alt", valid_580746
  var valid_580747 = query.getOrDefault("oauth_token")
  valid_580747 = validateParameter(valid_580747, JString, required = false,
                                 default = nil)
  if valid_580747 != nil:
    section.add "oauth_token", valid_580747
  var valid_580748 = query.getOrDefault("userIp")
  valid_580748 = validateParameter(valid_580748, JString, required = false,
                                 default = nil)
  if valid_580748 != nil:
    section.add "userIp", valid_580748
  var valid_580749 = query.getOrDefault("key")
  valid_580749 = validateParameter(valid_580749, JString, required = false,
                                 default = nil)
  if valid_580749 != nil:
    section.add "key", valid_580749
  var valid_580750 = query.getOrDefault("prettyPrint")
  valid_580750 = validateParameter(valid_580750, JBool, required = false,
                                 default = newJBool(true))
  if valid_580750 != nil:
    section.add "prettyPrint", valid_580750
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580752: Call_DfareportingCampaignsPatch_580739; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing campaign. This method supports patch semantics.
  ## 
  let valid = call_580752.validator(path, query, header, formData, body)
  let scheme = call_580752.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580752.url(scheme.get, call_580752.host, call_580752.base,
                         call_580752.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580752, url, valid)

proc call*(call_580753: Call_DfareportingCampaignsPatch_580739; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCampaignsPatch
  ## Updates an existing campaign. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Campaign ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580754 = newJObject()
  var query_580755 = newJObject()
  var body_580756 = newJObject()
  add(path_580754, "profileId", newJString(profileId))
  add(query_580755, "fields", newJString(fields))
  add(query_580755, "quotaUser", newJString(quotaUser))
  add(query_580755, "id", newJString(id))
  add(query_580755, "alt", newJString(alt))
  add(query_580755, "oauth_token", newJString(oauthToken))
  add(query_580755, "userIp", newJString(userIp))
  add(query_580755, "key", newJString(key))
  if body != nil:
    body_580756 = body
  add(query_580755, "prettyPrint", newJBool(prettyPrint))
  result = call_580753.call(path_580754, query_580755, nil, nil, body_580756)

var dfareportingCampaignsPatch* = Call_DfareportingCampaignsPatch_580739(
    name: "dfareportingCampaignsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns",
    validator: validate_DfareportingCampaignsPatch_580740,
    base: "/dfareporting/v3.2", url: url_DfareportingCampaignsPatch_580741,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignCreativeAssociationsInsert_580776 = ref object of OpenApiRestCall_579437
proc url_DfareportingCampaignCreativeAssociationsInsert_580778(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "campaignId" in path, "`campaignId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns/"),
               (kind: VariableSegment, value: "campaignId"),
               (kind: ConstantSegment, value: "/campaignCreativeAssociations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignCreativeAssociationsInsert_580777(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   campaignId: JString (required)
  ##             : Campaign ID in this association.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580779 = path.getOrDefault("profileId")
  valid_580779 = validateParameter(valid_580779, JString, required = true,
                                 default = nil)
  if valid_580779 != nil:
    section.add "profileId", valid_580779
  var valid_580780 = path.getOrDefault("campaignId")
  valid_580780 = validateParameter(valid_580780, JString, required = true,
                                 default = nil)
  if valid_580780 != nil:
    section.add "campaignId", valid_580780
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580781 = query.getOrDefault("fields")
  valid_580781 = validateParameter(valid_580781, JString, required = false,
                                 default = nil)
  if valid_580781 != nil:
    section.add "fields", valid_580781
  var valid_580782 = query.getOrDefault("quotaUser")
  valid_580782 = validateParameter(valid_580782, JString, required = false,
                                 default = nil)
  if valid_580782 != nil:
    section.add "quotaUser", valid_580782
  var valid_580783 = query.getOrDefault("alt")
  valid_580783 = validateParameter(valid_580783, JString, required = false,
                                 default = newJString("json"))
  if valid_580783 != nil:
    section.add "alt", valid_580783
  var valid_580784 = query.getOrDefault("oauth_token")
  valid_580784 = validateParameter(valid_580784, JString, required = false,
                                 default = nil)
  if valid_580784 != nil:
    section.add "oauth_token", valid_580784
  var valid_580785 = query.getOrDefault("userIp")
  valid_580785 = validateParameter(valid_580785, JString, required = false,
                                 default = nil)
  if valid_580785 != nil:
    section.add "userIp", valid_580785
  var valid_580786 = query.getOrDefault("key")
  valid_580786 = validateParameter(valid_580786, JString, required = false,
                                 default = nil)
  if valid_580786 != nil:
    section.add "key", valid_580786
  var valid_580787 = query.getOrDefault("prettyPrint")
  valid_580787 = validateParameter(valid_580787, JBool, required = false,
                                 default = newJBool(true))
  if valid_580787 != nil:
    section.add "prettyPrint", valid_580787
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580789: Call_DfareportingCampaignCreativeAssociationsInsert_580776;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already.
  ## 
  let valid = call_580789.validator(path, query, header, formData, body)
  let scheme = call_580789.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580789.url(scheme.get, call_580789.host, call_580789.base,
                         call_580789.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580789, url, valid)

proc call*(call_580790: Call_DfareportingCampaignCreativeAssociationsInsert_580776;
          profileId: string; campaignId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; body: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingCampaignCreativeAssociationsInsert
  ## Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   campaignId: string (required)
  ##             : Campaign ID in this association.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580791 = newJObject()
  var query_580792 = newJObject()
  var body_580793 = newJObject()
  add(path_580791, "profileId", newJString(profileId))
  add(path_580791, "campaignId", newJString(campaignId))
  add(query_580792, "fields", newJString(fields))
  add(query_580792, "quotaUser", newJString(quotaUser))
  add(query_580792, "alt", newJString(alt))
  add(query_580792, "oauth_token", newJString(oauthToken))
  add(query_580792, "userIp", newJString(userIp))
  add(query_580792, "key", newJString(key))
  if body != nil:
    body_580793 = body
  add(query_580792, "prettyPrint", newJBool(prettyPrint))
  result = call_580790.call(path_580791, query_580792, nil, nil, body_580793)

var dfareportingCampaignCreativeAssociationsInsert* = Call_DfareportingCampaignCreativeAssociationsInsert_580776(
    name: "dfareportingCampaignCreativeAssociationsInsert",
    meth: HttpMethod.HttpPost, host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations",
    validator: validate_DfareportingCampaignCreativeAssociationsInsert_580777,
    base: "/dfareporting/v3.2",
    url: url_DfareportingCampaignCreativeAssociationsInsert_580778,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignCreativeAssociationsList_580757 = ref object of OpenApiRestCall_579437
proc url_DfareportingCampaignCreativeAssociationsList_580759(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "campaignId" in path, "`campaignId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns/"),
               (kind: VariableSegment, value: "campaignId"),
               (kind: ConstantSegment, value: "/campaignCreativeAssociations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignCreativeAssociationsList_580758(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the list of creative IDs associated with the specified campaign. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   campaignId: JString (required)
  ##             : Campaign ID in this association.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580760 = path.getOrDefault("profileId")
  valid_580760 = validateParameter(valid_580760, JString, required = true,
                                 default = nil)
  if valid_580760 != nil:
    section.add "profileId", valid_580760
  var valid_580761 = path.getOrDefault("campaignId")
  valid_580761 = validateParameter(valid_580761, JString, required = true,
                                 default = nil)
  if valid_580761 != nil:
    section.add "campaignId", valid_580761
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580762 = query.getOrDefault("fields")
  valid_580762 = validateParameter(valid_580762, JString, required = false,
                                 default = nil)
  if valid_580762 != nil:
    section.add "fields", valid_580762
  var valid_580763 = query.getOrDefault("pageToken")
  valid_580763 = validateParameter(valid_580763, JString, required = false,
                                 default = nil)
  if valid_580763 != nil:
    section.add "pageToken", valid_580763
  var valid_580764 = query.getOrDefault("quotaUser")
  valid_580764 = validateParameter(valid_580764, JString, required = false,
                                 default = nil)
  if valid_580764 != nil:
    section.add "quotaUser", valid_580764
  var valid_580765 = query.getOrDefault("alt")
  valid_580765 = validateParameter(valid_580765, JString, required = false,
                                 default = newJString("json"))
  if valid_580765 != nil:
    section.add "alt", valid_580765
  var valid_580766 = query.getOrDefault("oauth_token")
  valid_580766 = validateParameter(valid_580766, JString, required = false,
                                 default = nil)
  if valid_580766 != nil:
    section.add "oauth_token", valid_580766
  var valid_580767 = query.getOrDefault("userIp")
  valid_580767 = validateParameter(valid_580767, JString, required = false,
                                 default = nil)
  if valid_580767 != nil:
    section.add "userIp", valid_580767
  var valid_580768 = query.getOrDefault("maxResults")
  valid_580768 = validateParameter(valid_580768, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580768 != nil:
    section.add "maxResults", valid_580768
  var valid_580769 = query.getOrDefault("key")
  valid_580769 = validateParameter(valid_580769, JString, required = false,
                                 default = nil)
  if valid_580769 != nil:
    section.add "key", valid_580769
  var valid_580770 = query.getOrDefault("sortOrder")
  valid_580770 = validateParameter(valid_580770, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580770 != nil:
    section.add "sortOrder", valid_580770
  var valid_580771 = query.getOrDefault("prettyPrint")
  valid_580771 = validateParameter(valid_580771, JBool, required = false,
                                 default = newJBool(true))
  if valid_580771 != nil:
    section.add "prettyPrint", valid_580771
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580772: Call_DfareportingCampaignCreativeAssociationsList_580757;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the list of creative IDs associated with the specified campaign. This method supports paging.
  ## 
  let valid = call_580772.validator(path, query, header, formData, body)
  let scheme = call_580772.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580772.url(scheme.get, call_580772.host, call_580772.base,
                         call_580772.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580772, url, valid)

proc call*(call_580773: Call_DfareportingCampaignCreativeAssociationsList_580757;
          profileId: string; campaignId: string; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; maxResults: int = 1000;
          key: string = ""; sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingCampaignCreativeAssociationsList
  ## Retrieves the list of creative IDs associated with the specified campaign. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   campaignId: string (required)
  ##             : Campaign ID in this association.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580774 = newJObject()
  var query_580775 = newJObject()
  add(path_580774, "profileId", newJString(profileId))
  add(path_580774, "campaignId", newJString(campaignId))
  add(query_580775, "fields", newJString(fields))
  add(query_580775, "pageToken", newJString(pageToken))
  add(query_580775, "quotaUser", newJString(quotaUser))
  add(query_580775, "alt", newJString(alt))
  add(query_580775, "oauth_token", newJString(oauthToken))
  add(query_580775, "userIp", newJString(userIp))
  add(query_580775, "maxResults", newJInt(maxResults))
  add(query_580775, "key", newJString(key))
  add(query_580775, "sortOrder", newJString(sortOrder))
  add(query_580775, "prettyPrint", newJBool(prettyPrint))
  result = call_580773.call(path_580774, query_580775, nil, nil, nil)

var dfareportingCampaignCreativeAssociationsList* = Call_DfareportingCampaignCreativeAssociationsList_580757(
    name: "dfareportingCampaignCreativeAssociationsList",
    meth: HttpMethod.HttpGet, host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations",
    validator: validate_DfareportingCampaignCreativeAssociationsList_580758,
    base: "/dfareporting/v3.2",
    url: url_DfareportingCampaignCreativeAssociationsList_580759,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsGet_580794 = ref object of OpenApiRestCall_579437
proc url_DfareportingCampaignsGet_580796(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsGet_580795(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one campaign by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Campaign ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580797 = path.getOrDefault("profileId")
  valid_580797 = validateParameter(valid_580797, JString, required = true,
                                 default = nil)
  if valid_580797 != nil:
    section.add "profileId", valid_580797
  var valid_580798 = path.getOrDefault("id")
  valid_580798 = validateParameter(valid_580798, JString, required = true,
                                 default = nil)
  if valid_580798 != nil:
    section.add "id", valid_580798
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580799 = query.getOrDefault("fields")
  valid_580799 = validateParameter(valid_580799, JString, required = false,
                                 default = nil)
  if valid_580799 != nil:
    section.add "fields", valid_580799
  var valid_580800 = query.getOrDefault("quotaUser")
  valid_580800 = validateParameter(valid_580800, JString, required = false,
                                 default = nil)
  if valid_580800 != nil:
    section.add "quotaUser", valid_580800
  var valid_580801 = query.getOrDefault("alt")
  valid_580801 = validateParameter(valid_580801, JString, required = false,
                                 default = newJString("json"))
  if valid_580801 != nil:
    section.add "alt", valid_580801
  var valid_580802 = query.getOrDefault("oauth_token")
  valid_580802 = validateParameter(valid_580802, JString, required = false,
                                 default = nil)
  if valid_580802 != nil:
    section.add "oauth_token", valid_580802
  var valid_580803 = query.getOrDefault("userIp")
  valid_580803 = validateParameter(valid_580803, JString, required = false,
                                 default = nil)
  if valid_580803 != nil:
    section.add "userIp", valid_580803
  var valid_580804 = query.getOrDefault("key")
  valid_580804 = validateParameter(valid_580804, JString, required = false,
                                 default = nil)
  if valid_580804 != nil:
    section.add "key", valid_580804
  var valid_580805 = query.getOrDefault("prettyPrint")
  valid_580805 = validateParameter(valid_580805, JBool, required = false,
                                 default = newJBool(true))
  if valid_580805 != nil:
    section.add "prettyPrint", valid_580805
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580806: Call_DfareportingCampaignsGet_580794; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one campaign by ID.
  ## 
  let valid = call_580806.validator(path, query, header, formData, body)
  let scheme = call_580806.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580806.url(scheme.get, call_580806.host, call_580806.base,
                         call_580806.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580806, url, valid)

proc call*(call_580807: Call_DfareportingCampaignsGet_580794; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingCampaignsGet
  ## Gets one campaign by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Campaign ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580808 = newJObject()
  var query_580809 = newJObject()
  add(path_580808, "profileId", newJString(profileId))
  add(query_580809, "fields", newJString(fields))
  add(query_580809, "quotaUser", newJString(quotaUser))
  add(query_580809, "alt", newJString(alt))
  add(query_580809, "oauth_token", newJString(oauthToken))
  add(query_580809, "userIp", newJString(userIp))
  add(path_580808, "id", newJString(id))
  add(query_580809, "key", newJString(key))
  add(query_580809, "prettyPrint", newJBool(prettyPrint))
  result = call_580807.call(path_580808, query_580809, nil, nil, nil)

var dfareportingCampaignsGet* = Call_DfareportingCampaignsGet_580794(
    name: "dfareportingCampaignsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns/{id}",
    validator: validate_DfareportingCampaignsGet_580795,
    base: "/dfareporting/v3.2", url: url_DfareportingCampaignsGet_580796,
    schemes: {Scheme.Https})
type
  Call_DfareportingChangeLogsList_580810 = ref object of OpenApiRestCall_579437
proc url_DfareportingChangeLogsList_580812(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/changeLogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingChangeLogsList_580811(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of change logs. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580813 = path.getOrDefault("profileId")
  valid_580813 = validateParameter(valid_580813, JString, required = true,
                                 default = nil)
  if valid_580813 != nil:
    section.add "profileId", valid_580813
  result.add "path", section
  ## parameters in `query` object:
  ##   action: JString
  ##         : Select only change logs with the specified action.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   minChangeTime: JString
  ##                : Select only change logs whose change time is before the specified minChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Select only change logs whose object ID, user name, old or new values match the search string.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   maxChangeTime: JString
  ##                : Select only change logs whose change time is before the specified maxChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
  ##   ids: JArray
  ##      : Select only change logs with these IDs.
  ##   objectType: JString
  ##             : Select only change logs with the specified object type.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   objectIds: JArray
  ##            : Select only change logs with these object IDs.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   userProfileIds: JArray
  ##                 : Select only change logs with these user profile IDs.
  section = newJObject()
  var valid_580814 = query.getOrDefault("action")
  valid_580814 = validateParameter(valid_580814, JString, required = false,
                                 default = newJString("ACTION_ADD"))
  if valid_580814 != nil:
    section.add "action", valid_580814
  var valid_580815 = query.getOrDefault("fields")
  valid_580815 = validateParameter(valid_580815, JString, required = false,
                                 default = nil)
  if valid_580815 != nil:
    section.add "fields", valid_580815
  var valid_580816 = query.getOrDefault("pageToken")
  valid_580816 = validateParameter(valid_580816, JString, required = false,
                                 default = nil)
  if valid_580816 != nil:
    section.add "pageToken", valid_580816
  var valid_580817 = query.getOrDefault("quotaUser")
  valid_580817 = validateParameter(valid_580817, JString, required = false,
                                 default = nil)
  if valid_580817 != nil:
    section.add "quotaUser", valid_580817
  var valid_580818 = query.getOrDefault("minChangeTime")
  valid_580818 = validateParameter(valid_580818, JString, required = false,
                                 default = nil)
  if valid_580818 != nil:
    section.add "minChangeTime", valid_580818
  var valid_580819 = query.getOrDefault("alt")
  valid_580819 = validateParameter(valid_580819, JString, required = false,
                                 default = newJString("json"))
  if valid_580819 != nil:
    section.add "alt", valid_580819
  var valid_580820 = query.getOrDefault("searchString")
  valid_580820 = validateParameter(valid_580820, JString, required = false,
                                 default = nil)
  if valid_580820 != nil:
    section.add "searchString", valid_580820
  var valid_580821 = query.getOrDefault("oauth_token")
  valid_580821 = validateParameter(valid_580821, JString, required = false,
                                 default = nil)
  if valid_580821 != nil:
    section.add "oauth_token", valid_580821
  var valid_580822 = query.getOrDefault("userIp")
  valid_580822 = validateParameter(valid_580822, JString, required = false,
                                 default = nil)
  if valid_580822 != nil:
    section.add "userIp", valid_580822
  var valid_580823 = query.getOrDefault("maxResults")
  valid_580823 = validateParameter(valid_580823, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580823 != nil:
    section.add "maxResults", valid_580823
  var valid_580824 = query.getOrDefault("maxChangeTime")
  valid_580824 = validateParameter(valid_580824, JString, required = false,
                                 default = nil)
  if valid_580824 != nil:
    section.add "maxChangeTime", valid_580824
  var valid_580825 = query.getOrDefault("ids")
  valid_580825 = validateParameter(valid_580825, JArray, required = false,
                                 default = nil)
  if valid_580825 != nil:
    section.add "ids", valid_580825
  var valid_580826 = query.getOrDefault("objectType")
  valid_580826 = validateParameter(valid_580826, JString, required = false,
                                 default = newJString("OBJECT_ACCOUNT"))
  if valid_580826 != nil:
    section.add "objectType", valid_580826
  var valid_580827 = query.getOrDefault("key")
  valid_580827 = validateParameter(valid_580827, JString, required = false,
                                 default = nil)
  if valid_580827 != nil:
    section.add "key", valid_580827
  var valid_580828 = query.getOrDefault("objectIds")
  valid_580828 = validateParameter(valid_580828, JArray, required = false,
                                 default = nil)
  if valid_580828 != nil:
    section.add "objectIds", valid_580828
  var valid_580829 = query.getOrDefault("prettyPrint")
  valid_580829 = validateParameter(valid_580829, JBool, required = false,
                                 default = newJBool(true))
  if valid_580829 != nil:
    section.add "prettyPrint", valid_580829
  var valid_580830 = query.getOrDefault("userProfileIds")
  valid_580830 = validateParameter(valid_580830, JArray, required = false,
                                 default = nil)
  if valid_580830 != nil:
    section.add "userProfileIds", valid_580830
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580831: Call_DfareportingChangeLogsList_580810; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of change logs. This method supports paging.
  ## 
  let valid = call_580831.validator(path, query, header, formData, body)
  let scheme = call_580831.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580831.url(scheme.get, call_580831.host, call_580831.base,
                         call_580831.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580831, url, valid)

proc call*(call_580832: Call_DfareportingChangeLogsList_580810; profileId: string;
          action: string = "ACTION_ADD"; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; minChangeTime: string = ""; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; maxChangeTime: string = ""; ids: JsonNode = nil;
          objectType: string = "OBJECT_ACCOUNT"; key: string = "";
          objectIds: JsonNode = nil; prettyPrint: bool = true;
          userProfileIds: JsonNode = nil): Recallable =
  ## dfareportingChangeLogsList
  ## Retrieves a list of change logs. This method supports paging.
  ##   action: string
  ##         : Select only change logs with the specified action.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   minChangeTime: string
  ##                : Select only change logs whose change time is before the specified minChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Select only change logs whose object ID, user name, old or new values match the search string.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   maxChangeTime: string
  ##                : Select only change logs whose change time is before the specified maxChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
  ##   ids: JArray
  ##      : Select only change logs with these IDs.
  ##   objectType: string
  ##             : Select only change logs with the specified object type.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   objectIds: JArray
  ##            : Select only change logs with these object IDs.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   userProfileIds: JArray
  ##                 : Select only change logs with these user profile IDs.
  var path_580833 = newJObject()
  var query_580834 = newJObject()
  add(query_580834, "action", newJString(action))
  add(path_580833, "profileId", newJString(profileId))
  add(query_580834, "fields", newJString(fields))
  add(query_580834, "pageToken", newJString(pageToken))
  add(query_580834, "quotaUser", newJString(quotaUser))
  add(query_580834, "minChangeTime", newJString(minChangeTime))
  add(query_580834, "alt", newJString(alt))
  add(query_580834, "searchString", newJString(searchString))
  add(query_580834, "oauth_token", newJString(oauthToken))
  add(query_580834, "userIp", newJString(userIp))
  add(query_580834, "maxResults", newJInt(maxResults))
  add(query_580834, "maxChangeTime", newJString(maxChangeTime))
  if ids != nil:
    query_580834.add "ids", ids
  add(query_580834, "objectType", newJString(objectType))
  add(query_580834, "key", newJString(key))
  if objectIds != nil:
    query_580834.add "objectIds", objectIds
  add(query_580834, "prettyPrint", newJBool(prettyPrint))
  if userProfileIds != nil:
    query_580834.add "userProfileIds", userProfileIds
  result = call_580832.call(path_580833, query_580834, nil, nil, nil)

var dfareportingChangeLogsList* = Call_DfareportingChangeLogsList_580810(
    name: "dfareportingChangeLogsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/changeLogs",
    validator: validate_DfareportingChangeLogsList_580811,
    base: "/dfareporting/v3.2", url: url_DfareportingChangeLogsList_580812,
    schemes: {Scheme.Https})
type
  Call_DfareportingChangeLogsGet_580835 = ref object of OpenApiRestCall_579437
proc url_DfareportingChangeLogsGet_580837(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/changeLogs/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingChangeLogsGet_580836(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one change log by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Change log ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580838 = path.getOrDefault("profileId")
  valid_580838 = validateParameter(valid_580838, JString, required = true,
                                 default = nil)
  if valid_580838 != nil:
    section.add "profileId", valid_580838
  var valid_580839 = path.getOrDefault("id")
  valid_580839 = validateParameter(valid_580839, JString, required = true,
                                 default = nil)
  if valid_580839 != nil:
    section.add "id", valid_580839
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580840 = query.getOrDefault("fields")
  valid_580840 = validateParameter(valid_580840, JString, required = false,
                                 default = nil)
  if valid_580840 != nil:
    section.add "fields", valid_580840
  var valid_580841 = query.getOrDefault("quotaUser")
  valid_580841 = validateParameter(valid_580841, JString, required = false,
                                 default = nil)
  if valid_580841 != nil:
    section.add "quotaUser", valid_580841
  var valid_580842 = query.getOrDefault("alt")
  valid_580842 = validateParameter(valid_580842, JString, required = false,
                                 default = newJString("json"))
  if valid_580842 != nil:
    section.add "alt", valid_580842
  var valid_580843 = query.getOrDefault("oauth_token")
  valid_580843 = validateParameter(valid_580843, JString, required = false,
                                 default = nil)
  if valid_580843 != nil:
    section.add "oauth_token", valid_580843
  var valid_580844 = query.getOrDefault("userIp")
  valid_580844 = validateParameter(valid_580844, JString, required = false,
                                 default = nil)
  if valid_580844 != nil:
    section.add "userIp", valid_580844
  var valid_580845 = query.getOrDefault("key")
  valid_580845 = validateParameter(valid_580845, JString, required = false,
                                 default = nil)
  if valid_580845 != nil:
    section.add "key", valid_580845
  var valid_580846 = query.getOrDefault("prettyPrint")
  valid_580846 = validateParameter(valid_580846, JBool, required = false,
                                 default = newJBool(true))
  if valid_580846 != nil:
    section.add "prettyPrint", valid_580846
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580847: Call_DfareportingChangeLogsGet_580835; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one change log by ID.
  ## 
  let valid = call_580847.validator(path, query, header, formData, body)
  let scheme = call_580847.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580847.url(scheme.get, call_580847.host, call_580847.base,
                         call_580847.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580847, url, valid)

proc call*(call_580848: Call_DfareportingChangeLogsGet_580835; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingChangeLogsGet
  ## Gets one change log by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Change log ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580849 = newJObject()
  var query_580850 = newJObject()
  add(path_580849, "profileId", newJString(profileId))
  add(query_580850, "fields", newJString(fields))
  add(query_580850, "quotaUser", newJString(quotaUser))
  add(query_580850, "alt", newJString(alt))
  add(query_580850, "oauth_token", newJString(oauthToken))
  add(query_580850, "userIp", newJString(userIp))
  add(path_580849, "id", newJString(id))
  add(query_580850, "key", newJString(key))
  add(query_580850, "prettyPrint", newJBool(prettyPrint))
  result = call_580848.call(path_580849, query_580850, nil, nil, nil)

var dfareportingChangeLogsGet* = Call_DfareportingChangeLogsGet_580835(
    name: "dfareportingChangeLogsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/changeLogs/{id}",
    validator: validate_DfareportingChangeLogsGet_580836,
    base: "/dfareporting/v3.2", url: url_DfareportingChangeLogsGet_580837,
    schemes: {Scheme.Https})
type
  Call_DfareportingCitiesList_580851 = ref object of OpenApiRestCall_579437
proc url_DfareportingCitiesList_580853(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/cities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCitiesList_580852(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of cities, possibly filtered.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580854 = path.getOrDefault("profileId")
  valid_580854 = validateParameter(valid_580854, JString, required = true,
                                 default = nil)
  if valid_580854 != nil:
    section.add "profileId", valid_580854
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   namePrefix: JString
  ##             : Select only cities with names starting with this prefix.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   countryDartIds: JArray
  ##                 : Select only cities from these countries.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   regionDartIds: JArray
  ##                : Select only cities from these regions.
  ##   dartIds: JArray
  ##          : Select only cities with these DART IDs.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580855 = query.getOrDefault("fields")
  valid_580855 = validateParameter(valid_580855, JString, required = false,
                                 default = nil)
  if valid_580855 != nil:
    section.add "fields", valid_580855
  var valid_580856 = query.getOrDefault("quotaUser")
  valid_580856 = validateParameter(valid_580856, JString, required = false,
                                 default = nil)
  if valid_580856 != nil:
    section.add "quotaUser", valid_580856
  var valid_580857 = query.getOrDefault("alt")
  valid_580857 = validateParameter(valid_580857, JString, required = false,
                                 default = newJString("json"))
  if valid_580857 != nil:
    section.add "alt", valid_580857
  var valid_580858 = query.getOrDefault("namePrefix")
  valid_580858 = validateParameter(valid_580858, JString, required = false,
                                 default = nil)
  if valid_580858 != nil:
    section.add "namePrefix", valid_580858
  var valid_580859 = query.getOrDefault("oauth_token")
  valid_580859 = validateParameter(valid_580859, JString, required = false,
                                 default = nil)
  if valid_580859 != nil:
    section.add "oauth_token", valid_580859
  var valid_580860 = query.getOrDefault("userIp")
  valid_580860 = validateParameter(valid_580860, JString, required = false,
                                 default = nil)
  if valid_580860 != nil:
    section.add "userIp", valid_580860
  var valid_580861 = query.getOrDefault("countryDartIds")
  valid_580861 = validateParameter(valid_580861, JArray, required = false,
                                 default = nil)
  if valid_580861 != nil:
    section.add "countryDartIds", valid_580861
  var valid_580862 = query.getOrDefault("key")
  valid_580862 = validateParameter(valid_580862, JString, required = false,
                                 default = nil)
  if valid_580862 != nil:
    section.add "key", valid_580862
  var valid_580863 = query.getOrDefault("regionDartIds")
  valid_580863 = validateParameter(valid_580863, JArray, required = false,
                                 default = nil)
  if valid_580863 != nil:
    section.add "regionDartIds", valid_580863
  var valid_580864 = query.getOrDefault("dartIds")
  valid_580864 = validateParameter(valid_580864, JArray, required = false,
                                 default = nil)
  if valid_580864 != nil:
    section.add "dartIds", valid_580864
  var valid_580865 = query.getOrDefault("prettyPrint")
  valid_580865 = validateParameter(valid_580865, JBool, required = false,
                                 default = newJBool(true))
  if valid_580865 != nil:
    section.add "prettyPrint", valid_580865
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580866: Call_DfareportingCitiesList_580851; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of cities, possibly filtered.
  ## 
  let valid = call_580866.validator(path, query, header, formData, body)
  let scheme = call_580866.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580866.url(scheme.get, call_580866.host, call_580866.base,
                         call_580866.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580866, url, valid)

proc call*(call_580867: Call_DfareportingCitiesList_580851; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          namePrefix: string = ""; oauthToken: string = ""; userIp: string = "";
          countryDartIds: JsonNode = nil; key: string = "";
          regionDartIds: JsonNode = nil; dartIds: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingCitiesList
  ## Retrieves a list of cities, possibly filtered.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   namePrefix: string
  ##             : Select only cities with names starting with this prefix.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   countryDartIds: JArray
  ##                 : Select only cities from these countries.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   regionDartIds: JArray
  ##                : Select only cities from these regions.
  ##   dartIds: JArray
  ##          : Select only cities with these DART IDs.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580868 = newJObject()
  var query_580869 = newJObject()
  add(path_580868, "profileId", newJString(profileId))
  add(query_580869, "fields", newJString(fields))
  add(query_580869, "quotaUser", newJString(quotaUser))
  add(query_580869, "alt", newJString(alt))
  add(query_580869, "namePrefix", newJString(namePrefix))
  add(query_580869, "oauth_token", newJString(oauthToken))
  add(query_580869, "userIp", newJString(userIp))
  if countryDartIds != nil:
    query_580869.add "countryDartIds", countryDartIds
  add(query_580869, "key", newJString(key))
  if regionDartIds != nil:
    query_580869.add "regionDartIds", regionDartIds
  if dartIds != nil:
    query_580869.add "dartIds", dartIds
  add(query_580869, "prettyPrint", newJBool(prettyPrint))
  result = call_580867.call(path_580868, query_580869, nil, nil, nil)

var dfareportingCitiesList* = Call_DfareportingCitiesList_580851(
    name: "dfareportingCitiesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/cities",
    validator: validate_DfareportingCitiesList_580852, base: "/dfareporting/v3.2",
    url: url_DfareportingCitiesList_580853, schemes: {Scheme.Https})
type
  Call_DfareportingConnectionTypesList_580870 = ref object of OpenApiRestCall_579437
proc url_DfareportingConnectionTypesList_580872(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/connectionTypes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingConnectionTypesList_580871(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of connection types.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580873 = path.getOrDefault("profileId")
  valid_580873 = validateParameter(valid_580873, JString, required = true,
                                 default = nil)
  if valid_580873 != nil:
    section.add "profileId", valid_580873
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580874 = query.getOrDefault("fields")
  valid_580874 = validateParameter(valid_580874, JString, required = false,
                                 default = nil)
  if valid_580874 != nil:
    section.add "fields", valid_580874
  var valid_580875 = query.getOrDefault("quotaUser")
  valid_580875 = validateParameter(valid_580875, JString, required = false,
                                 default = nil)
  if valid_580875 != nil:
    section.add "quotaUser", valid_580875
  var valid_580876 = query.getOrDefault("alt")
  valid_580876 = validateParameter(valid_580876, JString, required = false,
                                 default = newJString("json"))
  if valid_580876 != nil:
    section.add "alt", valid_580876
  var valid_580877 = query.getOrDefault("oauth_token")
  valid_580877 = validateParameter(valid_580877, JString, required = false,
                                 default = nil)
  if valid_580877 != nil:
    section.add "oauth_token", valid_580877
  var valid_580878 = query.getOrDefault("userIp")
  valid_580878 = validateParameter(valid_580878, JString, required = false,
                                 default = nil)
  if valid_580878 != nil:
    section.add "userIp", valid_580878
  var valid_580879 = query.getOrDefault("key")
  valid_580879 = validateParameter(valid_580879, JString, required = false,
                                 default = nil)
  if valid_580879 != nil:
    section.add "key", valid_580879
  var valid_580880 = query.getOrDefault("prettyPrint")
  valid_580880 = validateParameter(valid_580880, JBool, required = false,
                                 default = newJBool(true))
  if valid_580880 != nil:
    section.add "prettyPrint", valid_580880
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580881: Call_DfareportingConnectionTypesList_580870;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of connection types.
  ## 
  let valid = call_580881.validator(path, query, header, formData, body)
  let scheme = call_580881.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580881.url(scheme.get, call_580881.host, call_580881.base,
                         call_580881.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580881, url, valid)

proc call*(call_580882: Call_DfareportingConnectionTypesList_580870;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingConnectionTypesList
  ## Retrieves a list of connection types.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580883 = newJObject()
  var query_580884 = newJObject()
  add(path_580883, "profileId", newJString(profileId))
  add(query_580884, "fields", newJString(fields))
  add(query_580884, "quotaUser", newJString(quotaUser))
  add(query_580884, "alt", newJString(alt))
  add(query_580884, "oauth_token", newJString(oauthToken))
  add(query_580884, "userIp", newJString(userIp))
  add(query_580884, "key", newJString(key))
  add(query_580884, "prettyPrint", newJBool(prettyPrint))
  result = call_580882.call(path_580883, query_580884, nil, nil, nil)

var dfareportingConnectionTypesList* = Call_DfareportingConnectionTypesList_580870(
    name: "dfareportingConnectionTypesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/connectionTypes",
    validator: validate_DfareportingConnectionTypesList_580871,
    base: "/dfareporting/v3.2", url: url_DfareportingConnectionTypesList_580872,
    schemes: {Scheme.Https})
type
  Call_DfareportingConnectionTypesGet_580885 = ref object of OpenApiRestCall_579437
proc url_DfareportingConnectionTypesGet_580887(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/connectionTypes/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingConnectionTypesGet_580886(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one connection type by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Connection type ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580888 = path.getOrDefault("profileId")
  valid_580888 = validateParameter(valid_580888, JString, required = true,
                                 default = nil)
  if valid_580888 != nil:
    section.add "profileId", valid_580888
  var valid_580889 = path.getOrDefault("id")
  valid_580889 = validateParameter(valid_580889, JString, required = true,
                                 default = nil)
  if valid_580889 != nil:
    section.add "id", valid_580889
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580890 = query.getOrDefault("fields")
  valid_580890 = validateParameter(valid_580890, JString, required = false,
                                 default = nil)
  if valid_580890 != nil:
    section.add "fields", valid_580890
  var valid_580891 = query.getOrDefault("quotaUser")
  valid_580891 = validateParameter(valid_580891, JString, required = false,
                                 default = nil)
  if valid_580891 != nil:
    section.add "quotaUser", valid_580891
  var valid_580892 = query.getOrDefault("alt")
  valid_580892 = validateParameter(valid_580892, JString, required = false,
                                 default = newJString("json"))
  if valid_580892 != nil:
    section.add "alt", valid_580892
  var valid_580893 = query.getOrDefault("oauth_token")
  valid_580893 = validateParameter(valid_580893, JString, required = false,
                                 default = nil)
  if valid_580893 != nil:
    section.add "oauth_token", valid_580893
  var valid_580894 = query.getOrDefault("userIp")
  valid_580894 = validateParameter(valid_580894, JString, required = false,
                                 default = nil)
  if valid_580894 != nil:
    section.add "userIp", valid_580894
  var valid_580895 = query.getOrDefault("key")
  valid_580895 = validateParameter(valid_580895, JString, required = false,
                                 default = nil)
  if valid_580895 != nil:
    section.add "key", valid_580895
  var valid_580896 = query.getOrDefault("prettyPrint")
  valid_580896 = validateParameter(valid_580896, JBool, required = false,
                                 default = newJBool(true))
  if valid_580896 != nil:
    section.add "prettyPrint", valid_580896
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580897: Call_DfareportingConnectionTypesGet_580885; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one connection type by ID.
  ## 
  let valid = call_580897.validator(path, query, header, formData, body)
  let scheme = call_580897.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580897.url(scheme.get, call_580897.host, call_580897.base,
                         call_580897.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580897, url, valid)

proc call*(call_580898: Call_DfareportingConnectionTypesGet_580885;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingConnectionTypesGet
  ## Gets one connection type by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Connection type ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580899 = newJObject()
  var query_580900 = newJObject()
  add(path_580899, "profileId", newJString(profileId))
  add(query_580900, "fields", newJString(fields))
  add(query_580900, "quotaUser", newJString(quotaUser))
  add(query_580900, "alt", newJString(alt))
  add(query_580900, "oauth_token", newJString(oauthToken))
  add(query_580900, "userIp", newJString(userIp))
  add(path_580899, "id", newJString(id))
  add(query_580900, "key", newJString(key))
  add(query_580900, "prettyPrint", newJBool(prettyPrint))
  result = call_580898.call(path_580899, query_580900, nil, nil, nil)

var dfareportingConnectionTypesGet* = Call_DfareportingConnectionTypesGet_580885(
    name: "dfareportingConnectionTypesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/connectionTypes/{id}",
    validator: validate_DfareportingConnectionTypesGet_580886,
    base: "/dfareporting/v3.2", url: url_DfareportingConnectionTypesGet_580887,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesUpdate_580922 = ref object of OpenApiRestCall_579437
proc url_DfareportingContentCategoriesUpdate_580924(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesUpdate_580923(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing content category.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580925 = path.getOrDefault("profileId")
  valid_580925 = validateParameter(valid_580925, JString, required = true,
                                 default = nil)
  if valid_580925 != nil:
    section.add "profileId", valid_580925
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580926 = query.getOrDefault("fields")
  valid_580926 = validateParameter(valid_580926, JString, required = false,
                                 default = nil)
  if valid_580926 != nil:
    section.add "fields", valid_580926
  var valid_580927 = query.getOrDefault("quotaUser")
  valid_580927 = validateParameter(valid_580927, JString, required = false,
                                 default = nil)
  if valid_580927 != nil:
    section.add "quotaUser", valid_580927
  var valid_580928 = query.getOrDefault("alt")
  valid_580928 = validateParameter(valid_580928, JString, required = false,
                                 default = newJString("json"))
  if valid_580928 != nil:
    section.add "alt", valid_580928
  var valid_580929 = query.getOrDefault("oauth_token")
  valid_580929 = validateParameter(valid_580929, JString, required = false,
                                 default = nil)
  if valid_580929 != nil:
    section.add "oauth_token", valid_580929
  var valid_580930 = query.getOrDefault("userIp")
  valid_580930 = validateParameter(valid_580930, JString, required = false,
                                 default = nil)
  if valid_580930 != nil:
    section.add "userIp", valid_580930
  var valid_580931 = query.getOrDefault("key")
  valid_580931 = validateParameter(valid_580931, JString, required = false,
                                 default = nil)
  if valid_580931 != nil:
    section.add "key", valid_580931
  var valid_580932 = query.getOrDefault("prettyPrint")
  valid_580932 = validateParameter(valid_580932, JBool, required = false,
                                 default = newJBool(true))
  if valid_580932 != nil:
    section.add "prettyPrint", valid_580932
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580934: Call_DfareportingContentCategoriesUpdate_580922;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing content category.
  ## 
  let valid = call_580934.validator(path, query, header, formData, body)
  let scheme = call_580934.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580934.url(scheme.get, call_580934.host, call_580934.base,
                         call_580934.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580934, url, valid)

proc call*(call_580935: Call_DfareportingContentCategoriesUpdate_580922;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingContentCategoriesUpdate
  ## Updates an existing content category.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580936 = newJObject()
  var query_580937 = newJObject()
  var body_580938 = newJObject()
  add(path_580936, "profileId", newJString(profileId))
  add(query_580937, "fields", newJString(fields))
  add(query_580937, "quotaUser", newJString(quotaUser))
  add(query_580937, "alt", newJString(alt))
  add(query_580937, "oauth_token", newJString(oauthToken))
  add(query_580937, "userIp", newJString(userIp))
  add(query_580937, "key", newJString(key))
  if body != nil:
    body_580938 = body
  add(query_580937, "prettyPrint", newJBool(prettyPrint))
  result = call_580935.call(path_580936, query_580937, nil, nil, body_580938)

var dfareportingContentCategoriesUpdate* = Call_DfareportingContentCategoriesUpdate_580922(
    name: "dfareportingContentCategoriesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories",
    validator: validate_DfareportingContentCategoriesUpdate_580923,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesUpdate_580924,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesInsert_580939 = ref object of OpenApiRestCall_579437
proc url_DfareportingContentCategoriesInsert_580941(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesInsert_580940(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new content category.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580942 = path.getOrDefault("profileId")
  valid_580942 = validateParameter(valid_580942, JString, required = true,
                                 default = nil)
  if valid_580942 != nil:
    section.add "profileId", valid_580942
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580943 = query.getOrDefault("fields")
  valid_580943 = validateParameter(valid_580943, JString, required = false,
                                 default = nil)
  if valid_580943 != nil:
    section.add "fields", valid_580943
  var valid_580944 = query.getOrDefault("quotaUser")
  valid_580944 = validateParameter(valid_580944, JString, required = false,
                                 default = nil)
  if valid_580944 != nil:
    section.add "quotaUser", valid_580944
  var valid_580945 = query.getOrDefault("alt")
  valid_580945 = validateParameter(valid_580945, JString, required = false,
                                 default = newJString("json"))
  if valid_580945 != nil:
    section.add "alt", valid_580945
  var valid_580946 = query.getOrDefault("oauth_token")
  valid_580946 = validateParameter(valid_580946, JString, required = false,
                                 default = nil)
  if valid_580946 != nil:
    section.add "oauth_token", valid_580946
  var valid_580947 = query.getOrDefault("userIp")
  valid_580947 = validateParameter(valid_580947, JString, required = false,
                                 default = nil)
  if valid_580947 != nil:
    section.add "userIp", valid_580947
  var valid_580948 = query.getOrDefault("key")
  valid_580948 = validateParameter(valid_580948, JString, required = false,
                                 default = nil)
  if valid_580948 != nil:
    section.add "key", valid_580948
  var valid_580949 = query.getOrDefault("prettyPrint")
  valid_580949 = validateParameter(valid_580949, JBool, required = false,
                                 default = newJBool(true))
  if valid_580949 != nil:
    section.add "prettyPrint", valid_580949
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580951: Call_DfareportingContentCategoriesInsert_580939;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new content category.
  ## 
  let valid = call_580951.validator(path, query, header, formData, body)
  let scheme = call_580951.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580951.url(scheme.get, call_580951.host, call_580951.base,
                         call_580951.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580951, url, valid)

proc call*(call_580952: Call_DfareportingContentCategoriesInsert_580939;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingContentCategoriesInsert
  ## Inserts a new content category.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580953 = newJObject()
  var query_580954 = newJObject()
  var body_580955 = newJObject()
  add(path_580953, "profileId", newJString(profileId))
  add(query_580954, "fields", newJString(fields))
  add(query_580954, "quotaUser", newJString(quotaUser))
  add(query_580954, "alt", newJString(alt))
  add(query_580954, "oauth_token", newJString(oauthToken))
  add(query_580954, "userIp", newJString(userIp))
  add(query_580954, "key", newJString(key))
  if body != nil:
    body_580955 = body
  add(query_580954, "prettyPrint", newJBool(prettyPrint))
  result = call_580952.call(path_580953, query_580954, nil, nil, body_580955)

var dfareportingContentCategoriesInsert* = Call_DfareportingContentCategoriesInsert_580939(
    name: "dfareportingContentCategoriesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories",
    validator: validate_DfareportingContentCategoriesInsert_580940,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesInsert_580941,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesList_580901 = ref object of OpenApiRestCall_579437
proc url_DfareportingContentCategoriesList_580903(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesList_580902(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of content categories, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580904 = path.getOrDefault("profileId")
  valid_580904 = validateParameter(valid_580904, JString, required = true,
                                 default = nil)
  if valid_580904 != nil:
    section.add "profileId", valid_580904
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "contentcategory*2015" will return objects with names like "contentcategory June 2015", "contentcategory April 2015", or simply "contentcategory 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "contentcategory" will match objects with name "my contentcategory", "contentcategory 2015", or simply "contentcategory".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only content categories with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580905 = query.getOrDefault("fields")
  valid_580905 = validateParameter(valid_580905, JString, required = false,
                                 default = nil)
  if valid_580905 != nil:
    section.add "fields", valid_580905
  var valid_580906 = query.getOrDefault("pageToken")
  valid_580906 = validateParameter(valid_580906, JString, required = false,
                                 default = nil)
  if valid_580906 != nil:
    section.add "pageToken", valid_580906
  var valid_580907 = query.getOrDefault("quotaUser")
  valid_580907 = validateParameter(valid_580907, JString, required = false,
                                 default = nil)
  if valid_580907 != nil:
    section.add "quotaUser", valid_580907
  var valid_580908 = query.getOrDefault("sortField")
  valid_580908 = validateParameter(valid_580908, JString, required = false,
                                 default = newJString("ID"))
  if valid_580908 != nil:
    section.add "sortField", valid_580908
  var valid_580909 = query.getOrDefault("alt")
  valid_580909 = validateParameter(valid_580909, JString, required = false,
                                 default = newJString("json"))
  if valid_580909 != nil:
    section.add "alt", valid_580909
  var valid_580910 = query.getOrDefault("searchString")
  valid_580910 = validateParameter(valid_580910, JString, required = false,
                                 default = nil)
  if valid_580910 != nil:
    section.add "searchString", valid_580910
  var valid_580911 = query.getOrDefault("oauth_token")
  valid_580911 = validateParameter(valid_580911, JString, required = false,
                                 default = nil)
  if valid_580911 != nil:
    section.add "oauth_token", valid_580911
  var valid_580912 = query.getOrDefault("userIp")
  valid_580912 = validateParameter(valid_580912, JString, required = false,
                                 default = nil)
  if valid_580912 != nil:
    section.add "userIp", valid_580912
  var valid_580913 = query.getOrDefault("maxResults")
  valid_580913 = validateParameter(valid_580913, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580913 != nil:
    section.add "maxResults", valid_580913
  var valid_580914 = query.getOrDefault("ids")
  valid_580914 = validateParameter(valid_580914, JArray, required = false,
                                 default = nil)
  if valid_580914 != nil:
    section.add "ids", valid_580914
  var valid_580915 = query.getOrDefault("key")
  valid_580915 = validateParameter(valid_580915, JString, required = false,
                                 default = nil)
  if valid_580915 != nil:
    section.add "key", valid_580915
  var valid_580916 = query.getOrDefault("sortOrder")
  valid_580916 = validateParameter(valid_580916, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580916 != nil:
    section.add "sortOrder", valid_580916
  var valid_580917 = query.getOrDefault("prettyPrint")
  valid_580917 = validateParameter(valid_580917, JBool, required = false,
                                 default = newJBool(true))
  if valid_580917 != nil:
    section.add "prettyPrint", valid_580917
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580918: Call_DfareportingContentCategoriesList_580901;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of content categories, possibly filtered. This method supports paging.
  ## 
  let valid = call_580918.validator(path, query, header, formData, body)
  let scheme = call_580918.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580918.url(scheme.get, call_580918.host, call_580918.base,
                         call_580918.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580918, url, valid)

proc call*(call_580919: Call_DfareportingContentCategoriesList_580901;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingContentCategoriesList
  ## Retrieves a list of content categories, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "contentcategory*2015" will return objects with names like "contentcategory June 2015", "contentcategory April 2015", or simply "contentcategory 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "contentcategory" will match objects with name "my contentcategory", "contentcategory 2015", or simply "contentcategory".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only content categories with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580920 = newJObject()
  var query_580921 = newJObject()
  add(path_580920, "profileId", newJString(profileId))
  add(query_580921, "fields", newJString(fields))
  add(query_580921, "pageToken", newJString(pageToken))
  add(query_580921, "quotaUser", newJString(quotaUser))
  add(query_580921, "sortField", newJString(sortField))
  add(query_580921, "alt", newJString(alt))
  add(query_580921, "searchString", newJString(searchString))
  add(query_580921, "oauth_token", newJString(oauthToken))
  add(query_580921, "userIp", newJString(userIp))
  add(query_580921, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_580921.add "ids", ids
  add(query_580921, "key", newJString(key))
  add(query_580921, "sortOrder", newJString(sortOrder))
  add(query_580921, "prettyPrint", newJBool(prettyPrint))
  result = call_580919.call(path_580920, query_580921, nil, nil, nil)

var dfareportingContentCategoriesList* = Call_DfareportingContentCategoriesList_580901(
    name: "dfareportingContentCategoriesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories",
    validator: validate_DfareportingContentCategoriesList_580902,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesList_580903,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesPatch_580956 = ref object of OpenApiRestCall_579437
proc url_DfareportingContentCategoriesPatch_580958(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesPatch_580957(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing content category. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580959 = path.getOrDefault("profileId")
  valid_580959 = validateParameter(valid_580959, JString, required = true,
                                 default = nil)
  if valid_580959 != nil:
    section.add "profileId", valid_580959
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Content category ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580960 = query.getOrDefault("fields")
  valid_580960 = validateParameter(valid_580960, JString, required = false,
                                 default = nil)
  if valid_580960 != nil:
    section.add "fields", valid_580960
  var valid_580961 = query.getOrDefault("quotaUser")
  valid_580961 = validateParameter(valid_580961, JString, required = false,
                                 default = nil)
  if valid_580961 != nil:
    section.add "quotaUser", valid_580961
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580962 = query.getOrDefault("id")
  valid_580962 = validateParameter(valid_580962, JString, required = true,
                                 default = nil)
  if valid_580962 != nil:
    section.add "id", valid_580962
  var valid_580963 = query.getOrDefault("alt")
  valid_580963 = validateParameter(valid_580963, JString, required = false,
                                 default = newJString("json"))
  if valid_580963 != nil:
    section.add "alt", valid_580963
  var valid_580964 = query.getOrDefault("oauth_token")
  valid_580964 = validateParameter(valid_580964, JString, required = false,
                                 default = nil)
  if valid_580964 != nil:
    section.add "oauth_token", valid_580964
  var valid_580965 = query.getOrDefault("userIp")
  valid_580965 = validateParameter(valid_580965, JString, required = false,
                                 default = nil)
  if valid_580965 != nil:
    section.add "userIp", valid_580965
  var valid_580966 = query.getOrDefault("key")
  valid_580966 = validateParameter(valid_580966, JString, required = false,
                                 default = nil)
  if valid_580966 != nil:
    section.add "key", valid_580966
  var valid_580967 = query.getOrDefault("prettyPrint")
  valid_580967 = validateParameter(valid_580967, JBool, required = false,
                                 default = newJBool(true))
  if valid_580967 != nil:
    section.add "prettyPrint", valid_580967
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580969: Call_DfareportingContentCategoriesPatch_580956;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing content category. This method supports patch semantics.
  ## 
  let valid = call_580969.validator(path, query, header, formData, body)
  let scheme = call_580969.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580969.url(scheme.get, call_580969.host, call_580969.base,
                         call_580969.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580969, url, valid)

proc call*(call_580970: Call_DfareportingContentCategoriesPatch_580956;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingContentCategoriesPatch
  ## Updates an existing content category. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Content category ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580971 = newJObject()
  var query_580972 = newJObject()
  var body_580973 = newJObject()
  add(path_580971, "profileId", newJString(profileId))
  add(query_580972, "fields", newJString(fields))
  add(query_580972, "quotaUser", newJString(quotaUser))
  add(query_580972, "id", newJString(id))
  add(query_580972, "alt", newJString(alt))
  add(query_580972, "oauth_token", newJString(oauthToken))
  add(query_580972, "userIp", newJString(userIp))
  add(query_580972, "key", newJString(key))
  if body != nil:
    body_580973 = body
  add(query_580972, "prettyPrint", newJBool(prettyPrint))
  result = call_580970.call(path_580971, query_580972, nil, nil, body_580973)

var dfareportingContentCategoriesPatch* = Call_DfareportingContentCategoriesPatch_580956(
    name: "dfareportingContentCategoriesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories",
    validator: validate_DfareportingContentCategoriesPatch_580957,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesPatch_580958,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesGet_580974 = ref object of OpenApiRestCall_579437
proc url_DfareportingContentCategoriesGet_580976(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesGet_580975(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one content category by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Content category ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580977 = path.getOrDefault("profileId")
  valid_580977 = validateParameter(valid_580977, JString, required = true,
                                 default = nil)
  if valid_580977 != nil:
    section.add "profileId", valid_580977
  var valid_580978 = path.getOrDefault("id")
  valid_580978 = validateParameter(valid_580978, JString, required = true,
                                 default = nil)
  if valid_580978 != nil:
    section.add "id", valid_580978
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580979 = query.getOrDefault("fields")
  valid_580979 = validateParameter(valid_580979, JString, required = false,
                                 default = nil)
  if valid_580979 != nil:
    section.add "fields", valid_580979
  var valid_580980 = query.getOrDefault("quotaUser")
  valid_580980 = validateParameter(valid_580980, JString, required = false,
                                 default = nil)
  if valid_580980 != nil:
    section.add "quotaUser", valid_580980
  var valid_580981 = query.getOrDefault("alt")
  valid_580981 = validateParameter(valid_580981, JString, required = false,
                                 default = newJString("json"))
  if valid_580981 != nil:
    section.add "alt", valid_580981
  var valid_580982 = query.getOrDefault("oauth_token")
  valid_580982 = validateParameter(valid_580982, JString, required = false,
                                 default = nil)
  if valid_580982 != nil:
    section.add "oauth_token", valid_580982
  var valid_580983 = query.getOrDefault("userIp")
  valid_580983 = validateParameter(valid_580983, JString, required = false,
                                 default = nil)
  if valid_580983 != nil:
    section.add "userIp", valid_580983
  var valid_580984 = query.getOrDefault("key")
  valid_580984 = validateParameter(valid_580984, JString, required = false,
                                 default = nil)
  if valid_580984 != nil:
    section.add "key", valid_580984
  var valid_580985 = query.getOrDefault("prettyPrint")
  valid_580985 = validateParameter(valid_580985, JBool, required = false,
                                 default = newJBool(true))
  if valid_580985 != nil:
    section.add "prettyPrint", valid_580985
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580986: Call_DfareportingContentCategoriesGet_580974;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one content category by ID.
  ## 
  let valid = call_580986.validator(path, query, header, formData, body)
  let scheme = call_580986.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580986.url(scheme.get, call_580986.host, call_580986.base,
                         call_580986.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580986, url, valid)

proc call*(call_580987: Call_DfareportingContentCategoriesGet_580974;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingContentCategoriesGet
  ## Gets one content category by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Content category ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_580988 = newJObject()
  var query_580989 = newJObject()
  add(path_580988, "profileId", newJString(profileId))
  add(query_580989, "fields", newJString(fields))
  add(query_580989, "quotaUser", newJString(quotaUser))
  add(query_580989, "alt", newJString(alt))
  add(query_580989, "oauth_token", newJString(oauthToken))
  add(query_580989, "userIp", newJString(userIp))
  add(path_580988, "id", newJString(id))
  add(query_580989, "key", newJString(key))
  add(query_580989, "prettyPrint", newJBool(prettyPrint))
  result = call_580987.call(path_580988, query_580989, nil, nil, nil)

var dfareportingContentCategoriesGet* = Call_DfareportingContentCategoriesGet_580974(
    name: "dfareportingContentCategoriesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories/{id}",
    validator: validate_DfareportingContentCategoriesGet_580975,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesGet_580976,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesDelete_580990 = ref object of OpenApiRestCall_579437
proc url_DfareportingContentCategoriesDelete_580992(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesDelete_580991(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing content category.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Content category ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580993 = path.getOrDefault("profileId")
  valid_580993 = validateParameter(valid_580993, JString, required = true,
                                 default = nil)
  if valid_580993 != nil:
    section.add "profileId", valid_580993
  var valid_580994 = path.getOrDefault("id")
  valid_580994 = validateParameter(valid_580994, JString, required = true,
                                 default = nil)
  if valid_580994 != nil:
    section.add "id", valid_580994
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_580995 = query.getOrDefault("fields")
  valid_580995 = validateParameter(valid_580995, JString, required = false,
                                 default = nil)
  if valid_580995 != nil:
    section.add "fields", valid_580995
  var valid_580996 = query.getOrDefault("quotaUser")
  valid_580996 = validateParameter(valid_580996, JString, required = false,
                                 default = nil)
  if valid_580996 != nil:
    section.add "quotaUser", valid_580996
  var valid_580997 = query.getOrDefault("alt")
  valid_580997 = validateParameter(valid_580997, JString, required = false,
                                 default = newJString("json"))
  if valid_580997 != nil:
    section.add "alt", valid_580997
  var valid_580998 = query.getOrDefault("oauth_token")
  valid_580998 = validateParameter(valid_580998, JString, required = false,
                                 default = nil)
  if valid_580998 != nil:
    section.add "oauth_token", valid_580998
  var valid_580999 = query.getOrDefault("userIp")
  valid_580999 = validateParameter(valid_580999, JString, required = false,
                                 default = nil)
  if valid_580999 != nil:
    section.add "userIp", valid_580999
  var valid_581000 = query.getOrDefault("key")
  valid_581000 = validateParameter(valid_581000, JString, required = false,
                                 default = nil)
  if valid_581000 != nil:
    section.add "key", valid_581000
  var valid_581001 = query.getOrDefault("prettyPrint")
  valid_581001 = validateParameter(valid_581001, JBool, required = false,
                                 default = newJBool(true))
  if valid_581001 != nil:
    section.add "prettyPrint", valid_581001
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581002: Call_DfareportingContentCategoriesDelete_580990;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing content category.
  ## 
  let valid = call_581002.validator(path, query, header, formData, body)
  let scheme = call_581002.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581002.url(scheme.get, call_581002.host, call_581002.base,
                         call_581002.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581002, url, valid)

proc call*(call_581003: Call_DfareportingContentCategoriesDelete_580990;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingContentCategoriesDelete
  ## Deletes an existing content category.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Content category ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581004 = newJObject()
  var query_581005 = newJObject()
  add(path_581004, "profileId", newJString(profileId))
  add(query_581005, "fields", newJString(fields))
  add(query_581005, "quotaUser", newJString(quotaUser))
  add(query_581005, "alt", newJString(alt))
  add(query_581005, "oauth_token", newJString(oauthToken))
  add(query_581005, "userIp", newJString(userIp))
  add(path_581004, "id", newJString(id))
  add(query_581005, "key", newJString(key))
  add(query_581005, "prettyPrint", newJBool(prettyPrint))
  result = call_581003.call(path_581004, query_581005, nil, nil, nil)

var dfareportingContentCategoriesDelete* = Call_DfareportingContentCategoriesDelete_580990(
    name: "dfareportingContentCategoriesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories/{id}",
    validator: validate_DfareportingContentCategoriesDelete_580991,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesDelete_580992,
    schemes: {Scheme.Https})
type
  Call_DfareportingConversionsBatchinsert_581006 = ref object of OpenApiRestCall_579437
proc url_DfareportingConversionsBatchinsert_581008(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/conversions/batchinsert")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingConversionsBatchinsert_581007(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts conversions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581009 = path.getOrDefault("profileId")
  valid_581009 = validateParameter(valid_581009, JString, required = true,
                                 default = nil)
  if valid_581009 != nil:
    section.add "profileId", valid_581009
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581010 = query.getOrDefault("fields")
  valid_581010 = validateParameter(valid_581010, JString, required = false,
                                 default = nil)
  if valid_581010 != nil:
    section.add "fields", valid_581010
  var valid_581011 = query.getOrDefault("quotaUser")
  valid_581011 = validateParameter(valid_581011, JString, required = false,
                                 default = nil)
  if valid_581011 != nil:
    section.add "quotaUser", valid_581011
  var valid_581012 = query.getOrDefault("alt")
  valid_581012 = validateParameter(valid_581012, JString, required = false,
                                 default = newJString("json"))
  if valid_581012 != nil:
    section.add "alt", valid_581012
  var valid_581013 = query.getOrDefault("oauth_token")
  valid_581013 = validateParameter(valid_581013, JString, required = false,
                                 default = nil)
  if valid_581013 != nil:
    section.add "oauth_token", valid_581013
  var valid_581014 = query.getOrDefault("userIp")
  valid_581014 = validateParameter(valid_581014, JString, required = false,
                                 default = nil)
  if valid_581014 != nil:
    section.add "userIp", valid_581014
  var valid_581015 = query.getOrDefault("key")
  valid_581015 = validateParameter(valid_581015, JString, required = false,
                                 default = nil)
  if valid_581015 != nil:
    section.add "key", valid_581015
  var valid_581016 = query.getOrDefault("prettyPrint")
  valid_581016 = validateParameter(valid_581016, JBool, required = false,
                                 default = newJBool(true))
  if valid_581016 != nil:
    section.add "prettyPrint", valid_581016
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581018: Call_DfareportingConversionsBatchinsert_581006;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts conversions.
  ## 
  let valid = call_581018.validator(path, query, header, formData, body)
  let scheme = call_581018.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581018.url(scheme.get, call_581018.host, call_581018.base,
                         call_581018.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581018, url, valid)

proc call*(call_581019: Call_DfareportingConversionsBatchinsert_581006;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingConversionsBatchinsert
  ## Inserts conversions.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581020 = newJObject()
  var query_581021 = newJObject()
  var body_581022 = newJObject()
  add(path_581020, "profileId", newJString(profileId))
  add(query_581021, "fields", newJString(fields))
  add(query_581021, "quotaUser", newJString(quotaUser))
  add(query_581021, "alt", newJString(alt))
  add(query_581021, "oauth_token", newJString(oauthToken))
  add(query_581021, "userIp", newJString(userIp))
  add(query_581021, "key", newJString(key))
  if body != nil:
    body_581022 = body
  add(query_581021, "prettyPrint", newJBool(prettyPrint))
  result = call_581019.call(path_581020, query_581021, nil, nil, body_581022)

var dfareportingConversionsBatchinsert* = Call_DfareportingConversionsBatchinsert_581006(
    name: "dfareportingConversionsBatchinsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/conversions/batchinsert",
    validator: validate_DfareportingConversionsBatchinsert_581007,
    base: "/dfareporting/v3.2", url: url_DfareportingConversionsBatchinsert_581008,
    schemes: {Scheme.Https})
type
  Call_DfareportingConversionsBatchupdate_581023 = ref object of OpenApiRestCall_579437
proc url_DfareportingConversionsBatchupdate_581025(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/conversions/batchupdate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingConversionsBatchupdate_581024(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates existing conversions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581026 = path.getOrDefault("profileId")
  valid_581026 = validateParameter(valid_581026, JString, required = true,
                                 default = nil)
  if valid_581026 != nil:
    section.add "profileId", valid_581026
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581027 = query.getOrDefault("fields")
  valid_581027 = validateParameter(valid_581027, JString, required = false,
                                 default = nil)
  if valid_581027 != nil:
    section.add "fields", valid_581027
  var valid_581028 = query.getOrDefault("quotaUser")
  valid_581028 = validateParameter(valid_581028, JString, required = false,
                                 default = nil)
  if valid_581028 != nil:
    section.add "quotaUser", valid_581028
  var valid_581029 = query.getOrDefault("alt")
  valid_581029 = validateParameter(valid_581029, JString, required = false,
                                 default = newJString("json"))
  if valid_581029 != nil:
    section.add "alt", valid_581029
  var valid_581030 = query.getOrDefault("oauth_token")
  valid_581030 = validateParameter(valid_581030, JString, required = false,
                                 default = nil)
  if valid_581030 != nil:
    section.add "oauth_token", valid_581030
  var valid_581031 = query.getOrDefault("userIp")
  valid_581031 = validateParameter(valid_581031, JString, required = false,
                                 default = nil)
  if valid_581031 != nil:
    section.add "userIp", valid_581031
  var valid_581032 = query.getOrDefault("key")
  valid_581032 = validateParameter(valid_581032, JString, required = false,
                                 default = nil)
  if valid_581032 != nil:
    section.add "key", valid_581032
  var valid_581033 = query.getOrDefault("prettyPrint")
  valid_581033 = validateParameter(valid_581033, JBool, required = false,
                                 default = newJBool(true))
  if valid_581033 != nil:
    section.add "prettyPrint", valid_581033
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581035: Call_DfareportingConversionsBatchupdate_581023;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates existing conversions.
  ## 
  let valid = call_581035.validator(path, query, header, formData, body)
  let scheme = call_581035.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581035.url(scheme.get, call_581035.host, call_581035.base,
                         call_581035.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581035, url, valid)

proc call*(call_581036: Call_DfareportingConversionsBatchupdate_581023;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingConversionsBatchupdate
  ## Updates existing conversions.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581037 = newJObject()
  var query_581038 = newJObject()
  var body_581039 = newJObject()
  add(path_581037, "profileId", newJString(profileId))
  add(query_581038, "fields", newJString(fields))
  add(query_581038, "quotaUser", newJString(quotaUser))
  add(query_581038, "alt", newJString(alt))
  add(query_581038, "oauth_token", newJString(oauthToken))
  add(query_581038, "userIp", newJString(userIp))
  add(query_581038, "key", newJString(key))
  if body != nil:
    body_581039 = body
  add(query_581038, "prettyPrint", newJBool(prettyPrint))
  result = call_581036.call(path_581037, query_581038, nil, nil, body_581039)

var dfareportingConversionsBatchupdate* = Call_DfareportingConversionsBatchupdate_581023(
    name: "dfareportingConversionsBatchupdate", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/conversions/batchupdate",
    validator: validate_DfareportingConversionsBatchupdate_581024,
    base: "/dfareporting/v3.2", url: url_DfareportingConversionsBatchupdate_581025,
    schemes: {Scheme.Https})
type
  Call_DfareportingCountriesList_581040 = ref object of OpenApiRestCall_579437
proc url_DfareportingCountriesList_581042(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/countries")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCountriesList_581041(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of countries.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581043 = path.getOrDefault("profileId")
  valid_581043 = validateParameter(valid_581043, JString, required = true,
                                 default = nil)
  if valid_581043 != nil:
    section.add "profileId", valid_581043
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581044 = query.getOrDefault("fields")
  valid_581044 = validateParameter(valid_581044, JString, required = false,
                                 default = nil)
  if valid_581044 != nil:
    section.add "fields", valid_581044
  var valid_581045 = query.getOrDefault("quotaUser")
  valid_581045 = validateParameter(valid_581045, JString, required = false,
                                 default = nil)
  if valid_581045 != nil:
    section.add "quotaUser", valid_581045
  var valid_581046 = query.getOrDefault("alt")
  valid_581046 = validateParameter(valid_581046, JString, required = false,
                                 default = newJString("json"))
  if valid_581046 != nil:
    section.add "alt", valid_581046
  var valid_581047 = query.getOrDefault("oauth_token")
  valid_581047 = validateParameter(valid_581047, JString, required = false,
                                 default = nil)
  if valid_581047 != nil:
    section.add "oauth_token", valid_581047
  var valid_581048 = query.getOrDefault("userIp")
  valid_581048 = validateParameter(valid_581048, JString, required = false,
                                 default = nil)
  if valid_581048 != nil:
    section.add "userIp", valid_581048
  var valid_581049 = query.getOrDefault("key")
  valid_581049 = validateParameter(valid_581049, JString, required = false,
                                 default = nil)
  if valid_581049 != nil:
    section.add "key", valid_581049
  var valid_581050 = query.getOrDefault("prettyPrint")
  valid_581050 = validateParameter(valid_581050, JBool, required = false,
                                 default = newJBool(true))
  if valid_581050 != nil:
    section.add "prettyPrint", valid_581050
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581051: Call_DfareportingCountriesList_581040; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of countries.
  ## 
  let valid = call_581051.validator(path, query, header, formData, body)
  let scheme = call_581051.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581051.url(scheme.get, call_581051.host, call_581051.base,
                         call_581051.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581051, url, valid)

proc call*(call_581052: Call_DfareportingCountriesList_581040; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingCountriesList
  ## Retrieves a list of countries.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581053 = newJObject()
  var query_581054 = newJObject()
  add(path_581053, "profileId", newJString(profileId))
  add(query_581054, "fields", newJString(fields))
  add(query_581054, "quotaUser", newJString(quotaUser))
  add(query_581054, "alt", newJString(alt))
  add(query_581054, "oauth_token", newJString(oauthToken))
  add(query_581054, "userIp", newJString(userIp))
  add(query_581054, "key", newJString(key))
  add(query_581054, "prettyPrint", newJBool(prettyPrint))
  result = call_581052.call(path_581053, query_581054, nil, nil, nil)

var dfareportingCountriesList* = Call_DfareportingCountriesList_581040(
    name: "dfareportingCountriesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/countries",
    validator: validate_DfareportingCountriesList_581041,
    base: "/dfareporting/v3.2", url: url_DfareportingCountriesList_581042,
    schemes: {Scheme.Https})
type
  Call_DfareportingCountriesGet_581055 = ref object of OpenApiRestCall_579437
proc url_DfareportingCountriesGet_581057(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "dartId" in path, "`dartId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/countries/"),
               (kind: VariableSegment, value: "dartId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCountriesGet_581056(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one country by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   dartId: JString (required)
  ##         : Country DART ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581058 = path.getOrDefault("profileId")
  valid_581058 = validateParameter(valid_581058, JString, required = true,
                                 default = nil)
  if valid_581058 != nil:
    section.add "profileId", valid_581058
  var valid_581059 = path.getOrDefault("dartId")
  valid_581059 = validateParameter(valid_581059, JString, required = true,
                                 default = nil)
  if valid_581059 != nil:
    section.add "dartId", valid_581059
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581060 = query.getOrDefault("fields")
  valid_581060 = validateParameter(valid_581060, JString, required = false,
                                 default = nil)
  if valid_581060 != nil:
    section.add "fields", valid_581060
  var valid_581061 = query.getOrDefault("quotaUser")
  valid_581061 = validateParameter(valid_581061, JString, required = false,
                                 default = nil)
  if valid_581061 != nil:
    section.add "quotaUser", valid_581061
  var valid_581062 = query.getOrDefault("alt")
  valid_581062 = validateParameter(valid_581062, JString, required = false,
                                 default = newJString("json"))
  if valid_581062 != nil:
    section.add "alt", valid_581062
  var valid_581063 = query.getOrDefault("oauth_token")
  valid_581063 = validateParameter(valid_581063, JString, required = false,
                                 default = nil)
  if valid_581063 != nil:
    section.add "oauth_token", valid_581063
  var valid_581064 = query.getOrDefault("userIp")
  valid_581064 = validateParameter(valid_581064, JString, required = false,
                                 default = nil)
  if valid_581064 != nil:
    section.add "userIp", valid_581064
  var valid_581065 = query.getOrDefault("key")
  valid_581065 = validateParameter(valid_581065, JString, required = false,
                                 default = nil)
  if valid_581065 != nil:
    section.add "key", valid_581065
  var valid_581066 = query.getOrDefault("prettyPrint")
  valid_581066 = validateParameter(valid_581066, JBool, required = false,
                                 default = newJBool(true))
  if valid_581066 != nil:
    section.add "prettyPrint", valid_581066
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581067: Call_DfareportingCountriesGet_581055; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one country by ID.
  ## 
  let valid = call_581067.validator(path, query, header, formData, body)
  let scheme = call_581067.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581067.url(scheme.get, call_581067.host, call_581067.base,
                         call_581067.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581067, url, valid)

proc call*(call_581068: Call_DfareportingCountriesGet_581055; profileId: string;
          dartId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingCountriesGet
  ## Gets one country by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   dartId: string (required)
  ##         : Country DART ID.
  var path_581069 = newJObject()
  var query_581070 = newJObject()
  add(path_581069, "profileId", newJString(profileId))
  add(query_581070, "fields", newJString(fields))
  add(query_581070, "quotaUser", newJString(quotaUser))
  add(query_581070, "alt", newJString(alt))
  add(query_581070, "oauth_token", newJString(oauthToken))
  add(query_581070, "userIp", newJString(userIp))
  add(query_581070, "key", newJString(key))
  add(query_581070, "prettyPrint", newJBool(prettyPrint))
  add(path_581069, "dartId", newJString(dartId))
  result = call_581068.call(path_581069, query_581070, nil, nil, nil)

var dfareportingCountriesGet* = Call_DfareportingCountriesGet_581055(
    name: "dfareportingCountriesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/countries/{dartId}",
    validator: validate_DfareportingCountriesGet_581056,
    base: "/dfareporting/v3.2", url: url_DfareportingCountriesGet_581057,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeAssetsInsert_581071 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativeAssetsInsert_581073(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "advertiserId" in path, "`advertiserId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeAssets/"),
               (kind: VariableSegment, value: "advertiserId"),
               (kind: ConstantSegment, value: "/creativeAssets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeAssetsInsert_581072(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative asset.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   advertiserId: JString (required)
  ##               : Advertiser ID of this creative. This is a required field.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581074 = path.getOrDefault("profileId")
  valid_581074 = validateParameter(valid_581074, JString, required = true,
                                 default = nil)
  if valid_581074 != nil:
    section.add "profileId", valid_581074
  var valid_581075 = path.getOrDefault("advertiserId")
  valid_581075 = validateParameter(valid_581075, JString, required = true,
                                 default = nil)
  if valid_581075 != nil:
    section.add "advertiserId", valid_581075
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581076 = query.getOrDefault("fields")
  valid_581076 = validateParameter(valid_581076, JString, required = false,
                                 default = nil)
  if valid_581076 != nil:
    section.add "fields", valid_581076
  var valid_581077 = query.getOrDefault("quotaUser")
  valid_581077 = validateParameter(valid_581077, JString, required = false,
                                 default = nil)
  if valid_581077 != nil:
    section.add "quotaUser", valid_581077
  var valid_581078 = query.getOrDefault("alt")
  valid_581078 = validateParameter(valid_581078, JString, required = false,
                                 default = newJString("json"))
  if valid_581078 != nil:
    section.add "alt", valid_581078
  var valid_581079 = query.getOrDefault("oauth_token")
  valid_581079 = validateParameter(valid_581079, JString, required = false,
                                 default = nil)
  if valid_581079 != nil:
    section.add "oauth_token", valid_581079
  var valid_581080 = query.getOrDefault("userIp")
  valid_581080 = validateParameter(valid_581080, JString, required = false,
                                 default = nil)
  if valid_581080 != nil:
    section.add "userIp", valid_581080
  var valid_581081 = query.getOrDefault("key")
  valid_581081 = validateParameter(valid_581081, JString, required = false,
                                 default = nil)
  if valid_581081 != nil:
    section.add "key", valid_581081
  var valid_581082 = query.getOrDefault("prettyPrint")
  valid_581082 = validateParameter(valid_581082, JBool, required = false,
                                 default = newJBool(true))
  if valid_581082 != nil:
    section.add "prettyPrint", valid_581082
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581084: Call_DfareportingCreativeAssetsInsert_581071;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new creative asset.
  ## 
  let valid = call_581084.validator(path, query, header, formData, body)
  let scheme = call_581084.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581084.url(scheme.get, call_581084.host, call_581084.base,
                         call_581084.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581084, url, valid)

proc call*(call_581085: Call_DfareportingCreativeAssetsInsert_581071;
          profileId: string; advertiserId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; body: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeAssetsInsert
  ## Inserts a new creative asset.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserId: string (required)
  ##               : Advertiser ID of this creative. This is a required field.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581086 = newJObject()
  var query_581087 = newJObject()
  var body_581088 = newJObject()
  add(path_581086, "profileId", newJString(profileId))
  add(query_581087, "fields", newJString(fields))
  add(query_581087, "quotaUser", newJString(quotaUser))
  add(query_581087, "alt", newJString(alt))
  add(query_581087, "oauth_token", newJString(oauthToken))
  add(query_581087, "userIp", newJString(userIp))
  add(query_581087, "key", newJString(key))
  add(path_581086, "advertiserId", newJString(advertiserId))
  if body != nil:
    body_581088 = body
  add(query_581087, "prettyPrint", newJBool(prettyPrint))
  result = call_581085.call(path_581086, query_581087, nil, nil, body_581088)

var dfareportingCreativeAssetsInsert* = Call_DfareportingCreativeAssetsInsert_581071(
    name: "dfareportingCreativeAssetsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeAssets/{advertiserId}/creativeAssets",
    validator: validate_DfareportingCreativeAssetsInsert_581072,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeAssetsInsert_581073,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsUpdate_581111 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativeFieldsUpdate_581113(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsUpdate_581112(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative field.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581114 = path.getOrDefault("profileId")
  valid_581114 = validateParameter(valid_581114, JString, required = true,
                                 default = nil)
  if valid_581114 != nil:
    section.add "profileId", valid_581114
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581115 = query.getOrDefault("fields")
  valid_581115 = validateParameter(valid_581115, JString, required = false,
                                 default = nil)
  if valid_581115 != nil:
    section.add "fields", valid_581115
  var valid_581116 = query.getOrDefault("quotaUser")
  valid_581116 = validateParameter(valid_581116, JString, required = false,
                                 default = nil)
  if valid_581116 != nil:
    section.add "quotaUser", valid_581116
  var valid_581117 = query.getOrDefault("alt")
  valid_581117 = validateParameter(valid_581117, JString, required = false,
                                 default = newJString("json"))
  if valid_581117 != nil:
    section.add "alt", valid_581117
  var valid_581118 = query.getOrDefault("oauth_token")
  valid_581118 = validateParameter(valid_581118, JString, required = false,
                                 default = nil)
  if valid_581118 != nil:
    section.add "oauth_token", valid_581118
  var valid_581119 = query.getOrDefault("userIp")
  valid_581119 = validateParameter(valid_581119, JString, required = false,
                                 default = nil)
  if valid_581119 != nil:
    section.add "userIp", valid_581119
  var valid_581120 = query.getOrDefault("key")
  valid_581120 = validateParameter(valid_581120, JString, required = false,
                                 default = nil)
  if valid_581120 != nil:
    section.add "key", valid_581120
  var valid_581121 = query.getOrDefault("prettyPrint")
  valid_581121 = validateParameter(valid_581121, JBool, required = false,
                                 default = newJBool(true))
  if valid_581121 != nil:
    section.add "prettyPrint", valid_581121
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581123: Call_DfareportingCreativeFieldsUpdate_581111;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative field.
  ## 
  let valid = call_581123.validator(path, query, header, formData, body)
  let scheme = call_581123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581123.url(scheme.get, call_581123.host, call_581123.base,
                         call_581123.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581123, url, valid)

proc call*(call_581124: Call_DfareportingCreativeFieldsUpdate_581111;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldsUpdate
  ## Updates an existing creative field.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581125 = newJObject()
  var query_581126 = newJObject()
  var body_581127 = newJObject()
  add(path_581125, "profileId", newJString(profileId))
  add(query_581126, "fields", newJString(fields))
  add(query_581126, "quotaUser", newJString(quotaUser))
  add(query_581126, "alt", newJString(alt))
  add(query_581126, "oauth_token", newJString(oauthToken))
  add(query_581126, "userIp", newJString(userIp))
  add(query_581126, "key", newJString(key))
  if body != nil:
    body_581127 = body
  add(query_581126, "prettyPrint", newJBool(prettyPrint))
  result = call_581124.call(path_581125, query_581126, nil, nil, body_581127)

var dfareportingCreativeFieldsUpdate* = Call_DfareportingCreativeFieldsUpdate_581111(
    name: "dfareportingCreativeFieldsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields",
    validator: validate_DfareportingCreativeFieldsUpdate_581112,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsUpdate_581113,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsInsert_581128 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativeFieldsInsert_581130(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsInsert_581129(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative field.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581131 = path.getOrDefault("profileId")
  valid_581131 = validateParameter(valid_581131, JString, required = true,
                                 default = nil)
  if valid_581131 != nil:
    section.add "profileId", valid_581131
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581132 = query.getOrDefault("fields")
  valid_581132 = validateParameter(valid_581132, JString, required = false,
                                 default = nil)
  if valid_581132 != nil:
    section.add "fields", valid_581132
  var valid_581133 = query.getOrDefault("quotaUser")
  valid_581133 = validateParameter(valid_581133, JString, required = false,
                                 default = nil)
  if valid_581133 != nil:
    section.add "quotaUser", valid_581133
  var valid_581134 = query.getOrDefault("alt")
  valid_581134 = validateParameter(valid_581134, JString, required = false,
                                 default = newJString("json"))
  if valid_581134 != nil:
    section.add "alt", valid_581134
  var valid_581135 = query.getOrDefault("oauth_token")
  valid_581135 = validateParameter(valid_581135, JString, required = false,
                                 default = nil)
  if valid_581135 != nil:
    section.add "oauth_token", valid_581135
  var valid_581136 = query.getOrDefault("userIp")
  valid_581136 = validateParameter(valid_581136, JString, required = false,
                                 default = nil)
  if valid_581136 != nil:
    section.add "userIp", valid_581136
  var valid_581137 = query.getOrDefault("key")
  valid_581137 = validateParameter(valid_581137, JString, required = false,
                                 default = nil)
  if valid_581137 != nil:
    section.add "key", valid_581137
  var valid_581138 = query.getOrDefault("prettyPrint")
  valid_581138 = validateParameter(valid_581138, JBool, required = false,
                                 default = newJBool(true))
  if valid_581138 != nil:
    section.add "prettyPrint", valid_581138
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581140: Call_DfareportingCreativeFieldsInsert_581128;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new creative field.
  ## 
  let valid = call_581140.validator(path, query, header, formData, body)
  let scheme = call_581140.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581140.url(scheme.get, call_581140.host, call_581140.base,
                         call_581140.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581140, url, valid)

proc call*(call_581141: Call_DfareportingCreativeFieldsInsert_581128;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldsInsert
  ## Inserts a new creative field.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581142 = newJObject()
  var query_581143 = newJObject()
  var body_581144 = newJObject()
  add(path_581142, "profileId", newJString(profileId))
  add(query_581143, "fields", newJString(fields))
  add(query_581143, "quotaUser", newJString(quotaUser))
  add(query_581143, "alt", newJString(alt))
  add(query_581143, "oauth_token", newJString(oauthToken))
  add(query_581143, "userIp", newJString(userIp))
  add(query_581143, "key", newJString(key))
  if body != nil:
    body_581144 = body
  add(query_581143, "prettyPrint", newJBool(prettyPrint))
  result = call_581141.call(path_581142, query_581143, nil, nil, body_581144)

var dfareportingCreativeFieldsInsert* = Call_DfareportingCreativeFieldsInsert_581128(
    name: "dfareportingCreativeFieldsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields",
    validator: validate_DfareportingCreativeFieldsInsert_581129,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsInsert_581130,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsList_581089 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativeFieldsList_581091(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsList_581090(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of creative fields, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581092 = path.getOrDefault("profileId")
  valid_581092 = validateParameter(valid_581092, JString, required = true,
                                 default = nil)
  if valid_581092 != nil:
    section.add "profileId", valid_581092
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for creative fields by name or ID. Wildcards (*) are allowed. For example, "creativefield*2015" will return creative fields with names like "creativefield June 2015", "creativefield April 2015", or simply "creativefield 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativefield" will match creative fields with the name "my creativefield", "creativefield 2015", or simply "creativefield".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creative fields with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only creative fields that belong to these advertisers.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581093 = query.getOrDefault("fields")
  valid_581093 = validateParameter(valid_581093, JString, required = false,
                                 default = nil)
  if valid_581093 != nil:
    section.add "fields", valid_581093
  var valid_581094 = query.getOrDefault("pageToken")
  valid_581094 = validateParameter(valid_581094, JString, required = false,
                                 default = nil)
  if valid_581094 != nil:
    section.add "pageToken", valid_581094
  var valid_581095 = query.getOrDefault("quotaUser")
  valid_581095 = validateParameter(valid_581095, JString, required = false,
                                 default = nil)
  if valid_581095 != nil:
    section.add "quotaUser", valid_581095
  var valid_581096 = query.getOrDefault("sortField")
  valid_581096 = validateParameter(valid_581096, JString, required = false,
                                 default = newJString("ID"))
  if valid_581096 != nil:
    section.add "sortField", valid_581096
  var valid_581097 = query.getOrDefault("alt")
  valid_581097 = validateParameter(valid_581097, JString, required = false,
                                 default = newJString("json"))
  if valid_581097 != nil:
    section.add "alt", valid_581097
  var valid_581098 = query.getOrDefault("searchString")
  valid_581098 = validateParameter(valid_581098, JString, required = false,
                                 default = nil)
  if valid_581098 != nil:
    section.add "searchString", valid_581098
  var valid_581099 = query.getOrDefault("oauth_token")
  valid_581099 = validateParameter(valid_581099, JString, required = false,
                                 default = nil)
  if valid_581099 != nil:
    section.add "oauth_token", valid_581099
  var valid_581100 = query.getOrDefault("userIp")
  valid_581100 = validateParameter(valid_581100, JString, required = false,
                                 default = nil)
  if valid_581100 != nil:
    section.add "userIp", valid_581100
  var valid_581101 = query.getOrDefault("maxResults")
  valid_581101 = validateParameter(valid_581101, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581101 != nil:
    section.add "maxResults", valid_581101
  var valid_581102 = query.getOrDefault("ids")
  valid_581102 = validateParameter(valid_581102, JArray, required = false,
                                 default = nil)
  if valid_581102 != nil:
    section.add "ids", valid_581102
  var valid_581103 = query.getOrDefault("key")
  valid_581103 = validateParameter(valid_581103, JString, required = false,
                                 default = nil)
  if valid_581103 != nil:
    section.add "key", valid_581103
  var valid_581104 = query.getOrDefault("advertiserIds")
  valid_581104 = validateParameter(valid_581104, JArray, required = false,
                                 default = nil)
  if valid_581104 != nil:
    section.add "advertiserIds", valid_581104
  var valid_581105 = query.getOrDefault("sortOrder")
  valid_581105 = validateParameter(valid_581105, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581105 != nil:
    section.add "sortOrder", valid_581105
  var valid_581106 = query.getOrDefault("prettyPrint")
  valid_581106 = validateParameter(valid_581106, JBool, required = false,
                                 default = newJBool(true))
  if valid_581106 != nil:
    section.add "prettyPrint", valid_581106
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581107: Call_DfareportingCreativeFieldsList_581089; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of creative fields, possibly filtered. This method supports paging.
  ## 
  let valid = call_581107.validator(path, query, header, formData, body)
  let scheme = call_581107.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581107.url(scheme.get, call_581107.host, call_581107.base,
                         call_581107.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581107, url, valid)

proc call*(call_581108: Call_DfareportingCreativeFieldsList_581089;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          advertiserIds: JsonNode = nil; sortOrder: string = "ASCENDING";
          prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldsList
  ## Retrieves a list of creative fields, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for creative fields by name or ID. Wildcards (*) are allowed. For example, "creativefield*2015" will return creative fields with names like "creativefield June 2015", "creativefield April 2015", or simply "creativefield 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativefield" will match creative fields with the name "my creativefield", "creativefield 2015", or simply "creativefield".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creative fields with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only creative fields that belong to these advertisers.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581109 = newJObject()
  var query_581110 = newJObject()
  add(path_581109, "profileId", newJString(profileId))
  add(query_581110, "fields", newJString(fields))
  add(query_581110, "pageToken", newJString(pageToken))
  add(query_581110, "quotaUser", newJString(quotaUser))
  add(query_581110, "sortField", newJString(sortField))
  add(query_581110, "alt", newJString(alt))
  add(query_581110, "searchString", newJString(searchString))
  add(query_581110, "oauth_token", newJString(oauthToken))
  add(query_581110, "userIp", newJString(userIp))
  add(query_581110, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_581110.add "ids", ids
  add(query_581110, "key", newJString(key))
  if advertiserIds != nil:
    query_581110.add "advertiserIds", advertiserIds
  add(query_581110, "sortOrder", newJString(sortOrder))
  add(query_581110, "prettyPrint", newJBool(prettyPrint))
  result = call_581108.call(path_581109, query_581110, nil, nil, nil)

var dfareportingCreativeFieldsList* = Call_DfareportingCreativeFieldsList_581089(
    name: "dfareportingCreativeFieldsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields",
    validator: validate_DfareportingCreativeFieldsList_581090,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsList_581091,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsPatch_581145 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativeFieldsPatch_581147(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsPatch_581146(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative field. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581148 = path.getOrDefault("profileId")
  valid_581148 = validateParameter(valid_581148, JString, required = true,
                                 default = nil)
  if valid_581148 != nil:
    section.add "profileId", valid_581148
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Creative Field ID
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581149 = query.getOrDefault("fields")
  valid_581149 = validateParameter(valid_581149, JString, required = false,
                                 default = nil)
  if valid_581149 != nil:
    section.add "fields", valid_581149
  var valid_581150 = query.getOrDefault("quotaUser")
  valid_581150 = validateParameter(valid_581150, JString, required = false,
                                 default = nil)
  if valid_581150 != nil:
    section.add "quotaUser", valid_581150
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_581151 = query.getOrDefault("id")
  valid_581151 = validateParameter(valid_581151, JString, required = true,
                                 default = nil)
  if valid_581151 != nil:
    section.add "id", valid_581151
  var valid_581152 = query.getOrDefault("alt")
  valid_581152 = validateParameter(valid_581152, JString, required = false,
                                 default = newJString("json"))
  if valid_581152 != nil:
    section.add "alt", valid_581152
  var valid_581153 = query.getOrDefault("oauth_token")
  valid_581153 = validateParameter(valid_581153, JString, required = false,
                                 default = nil)
  if valid_581153 != nil:
    section.add "oauth_token", valid_581153
  var valid_581154 = query.getOrDefault("userIp")
  valid_581154 = validateParameter(valid_581154, JString, required = false,
                                 default = nil)
  if valid_581154 != nil:
    section.add "userIp", valid_581154
  var valid_581155 = query.getOrDefault("key")
  valid_581155 = validateParameter(valid_581155, JString, required = false,
                                 default = nil)
  if valid_581155 != nil:
    section.add "key", valid_581155
  var valid_581156 = query.getOrDefault("prettyPrint")
  valid_581156 = validateParameter(valid_581156, JBool, required = false,
                                 default = newJBool(true))
  if valid_581156 != nil:
    section.add "prettyPrint", valid_581156
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581158: Call_DfareportingCreativeFieldsPatch_581145;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative field. This method supports patch semantics.
  ## 
  let valid = call_581158.validator(path, query, header, formData, body)
  let scheme = call_581158.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581158.url(scheme.get, call_581158.host, call_581158.base,
                         call_581158.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581158, url, valid)

proc call*(call_581159: Call_DfareportingCreativeFieldsPatch_581145;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldsPatch
  ## Updates an existing creative field. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Creative Field ID
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581160 = newJObject()
  var query_581161 = newJObject()
  var body_581162 = newJObject()
  add(path_581160, "profileId", newJString(profileId))
  add(query_581161, "fields", newJString(fields))
  add(query_581161, "quotaUser", newJString(quotaUser))
  add(query_581161, "id", newJString(id))
  add(query_581161, "alt", newJString(alt))
  add(query_581161, "oauth_token", newJString(oauthToken))
  add(query_581161, "userIp", newJString(userIp))
  add(query_581161, "key", newJString(key))
  if body != nil:
    body_581162 = body
  add(query_581161, "prettyPrint", newJBool(prettyPrint))
  result = call_581159.call(path_581160, query_581161, nil, nil, body_581162)

var dfareportingCreativeFieldsPatch* = Call_DfareportingCreativeFieldsPatch_581145(
    name: "dfareportingCreativeFieldsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields",
    validator: validate_DfareportingCreativeFieldsPatch_581146,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsPatch_581147,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesUpdate_581185 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativeFieldValuesUpdate_581187(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesUpdate_581186(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative field value.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581188 = path.getOrDefault("profileId")
  valid_581188 = validateParameter(valid_581188, JString, required = true,
                                 default = nil)
  if valid_581188 != nil:
    section.add "profileId", valid_581188
  var valid_581189 = path.getOrDefault("creativeFieldId")
  valid_581189 = validateParameter(valid_581189, JString, required = true,
                                 default = nil)
  if valid_581189 != nil:
    section.add "creativeFieldId", valid_581189
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581190 = query.getOrDefault("fields")
  valid_581190 = validateParameter(valid_581190, JString, required = false,
                                 default = nil)
  if valid_581190 != nil:
    section.add "fields", valid_581190
  var valid_581191 = query.getOrDefault("quotaUser")
  valid_581191 = validateParameter(valid_581191, JString, required = false,
                                 default = nil)
  if valid_581191 != nil:
    section.add "quotaUser", valid_581191
  var valid_581192 = query.getOrDefault("alt")
  valid_581192 = validateParameter(valid_581192, JString, required = false,
                                 default = newJString("json"))
  if valid_581192 != nil:
    section.add "alt", valid_581192
  var valid_581193 = query.getOrDefault("oauth_token")
  valid_581193 = validateParameter(valid_581193, JString, required = false,
                                 default = nil)
  if valid_581193 != nil:
    section.add "oauth_token", valid_581193
  var valid_581194 = query.getOrDefault("userIp")
  valid_581194 = validateParameter(valid_581194, JString, required = false,
                                 default = nil)
  if valid_581194 != nil:
    section.add "userIp", valid_581194
  var valid_581195 = query.getOrDefault("key")
  valid_581195 = validateParameter(valid_581195, JString, required = false,
                                 default = nil)
  if valid_581195 != nil:
    section.add "key", valid_581195
  var valid_581196 = query.getOrDefault("prettyPrint")
  valid_581196 = validateParameter(valid_581196, JBool, required = false,
                                 default = newJBool(true))
  if valid_581196 != nil:
    section.add "prettyPrint", valid_581196
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581198: Call_DfareportingCreativeFieldValuesUpdate_581185;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative field value.
  ## 
  let valid = call_581198.validator(path, query, header, formData, body)
  let scheme = call_581198.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581198.url(scheme.get, call_581198.host, call_581198.base,
                         call_581198.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581198, url, valid)

proc call*(call_581199: Call_DfareportingCreativeFieldValuesUpdate_581185;
          profileId: string; creativeFieldId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; body: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldValuesUpdate
  ## Updates an existing creative field value.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581200 = newJObject()
  var query_581201 = newJObject()
  var body_581202 = newJObject()
  add(path_581200, "profileId", newJString(profileId))
  add(query_581201, "fields", newJString(fields))
  add(query_581201, "quotaUser", newJString(quotaUser))
  add(query_581201, "alt", newJString(alt))
  add(query_581201, "oauth_token", newJString(oauthToken))
  add(query_581201, "userIp", newJString(userIp))
  add(query_581201, "key", newJString(key))
  add(path_581200, "creativeFieldId", newJString(creativeFieldId))
  if body != nil:
    body_581202 = body
  add(query_581201, "prettyPrint", newJBool(prettyPrint))
  result = call_581199.call(path_581200, query_581201, nil, nil, body_581202)

var dfareportingCreativeFieldValuesUpdate* = Call_DfareportingCreativeFieldValuesUpdate_581185(
    name: "dfareportingCreativeFieldValuesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
    validator: validate_DfareportingCreativeFieldValuesUpdate_581186,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesUpdate_581187,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesInsert_581203 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativeFieldValuesInsert_581205(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesInsert_581204(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative field value.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581206 = path.getOrDefault("profileId")
  valid_581206 = validateParameter(valid_581206, JString, required = true,
                                 default = nil)
  if valid_581206 != nil:
    section.add "profileId", valid_581206
  var valid_581207 = path.getOrDefault("creativeFieldId")
  valid_581207 = validateParameter(valid_581207, JString, required = true,
                                 default = nil)
  if valid_581207 != nil:
    section.add "creativeFieldId", valid_581207
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581208 = query.getOrDefault("fields")
  valid_581208 = validateParameter(valid_581208, JString, required = false,
                                 default = nil)
  if valid_581208 != nil:
    section.add "fields", valid_581208
  var valid_581209 = query.getOrDefault("quotaUser")
  valid_581209 = validateParameter(valid_581209, JString, required = false,
                                 default = nil)
  if valid_581209 != nil:
    section.add "quotaUser", valid_581209
  var valid_581210 = query.getOrDefault("alt")
  valid_581210 = validateParameter(valid_581210, JString, required = false,
                                 default = newJString("json"))
  if valid_581210 != nil:
    section.add "alt", valid_581210
  var valid_581211 = query.getOrDefault("oauth_token")
  valid_581211 = validateParameter(valid_581211, JString, required = false,
                                 default = nil)
  if valid_581211 != nil:
    section.add "oauth_token", valid_581211
  var valid_581212 = query.getOrDefault("userIp")
  valid_581212 = validateParameter(valid_581212, JString, required = false,
                                 default = nil)
  if valid_581212 != nil:
    section.add "userIp", valid_581212
  var valid_581213 = query.getOrDefault("key")
  valid_581213 = validateParameter(valid_581213, JString, required = false,
                                 default = nil)
  if valid_581213 != nil:
    section.add "key", valid_581213
  var valid_581214 = query.getOrDefault("prettyPrint")
  valid_581214 = validateParameter(valid_581214, JBool, required = false,
                                 default = newJBool(true))
  if valid_581214 != nil:
    section.add "prettyPrint", valid_581214
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581216: Call_DfareportingCreativeFieldValuesInsert_581203;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new creative field value.
  ## 
  let valid = call_581216.validator(path, query, header, formData, body)
  let scheme = call_581216.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581216.url(scheme.get, call_581216.host, call_581216.base,
                         call_581216.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581216, url, valid)

proc call*(call_581217: Call_DfareportingCreativeFieldValuesInsert_581203;
          profileId: string; creativeFieldId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; body: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldValuesInsert
  ## Inserts a new creative field value.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581218 = newJObject()
  var query_581219 = newJObject()
  var body_581220 = newJObject()
  add(path_581218, "profileId", newJString(profileId))
  add(query_581219, "fields", newJString(fields))
  add(query_581219, "quotaUser", newJString(quotaUser))
  add(query_581219, "alt", newJString(alt))
  add(query_581219, "oauth_token", newJString(oauthToken))
  add(query_581219, "userIp", newJString(userIp))
  add(query_581219, "key", newJString(key))
  add(path_581218, "creativeFieldId", newJString(creativeFieldId))
  if body != nil:
    body_581220 = body
  add(query_581219, "prettyPrint", newJBool(prettyPrint))
  result = call_581217.call(path_581218, query_581219, nil, nil, body_581220)

var dfareportingCreativeFieldValuesInsert* = Call_DfareportingCreativeFieldValuesInsert_581203(
    name: "dfareportingCreativeFieldValuesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
    validator: validate_DfareportingCreativeFieldValuesInsert_581204,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesInsert_581205,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesList_581163 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativeFieldValuesList_581165(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesList_581164(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of creative field values, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581166 = path.getOrDefault("profileId")
  valid_581166 = validateParameter(valid_581166, JString, required = true,
                                 default = nil)
  if valid_581166 != nil:
    section.add "profileId", valid_581166
  var valid_581167 = path.getOrDefault("creativeFieldId")
  valid_581167 = validateParameter(valid_581167, JString, required = true,
                                 default = nil)
  if valid_581167 != nil:
    section.add "creativeFieldId", valid_581167
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for creative field values by their values. Wildcards (e.g. *) are not allowed.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creative field values with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581168 = query.getOrDefault("fields")
  valid_581168 = validateParameter(valid_581168, JString, required = false,
                                 default = nil)
  if valid_581168 != nil:
    section.add "fields", valid_581168
  var valid_581169 = query.getOrDefault("pageToken")
  valid_581169 = validateParameter(valid_581169, JString, required = false,
                                 default = nil)
  if valid_581169 != nil:
    section.add "pageToken", valid_581169
  var valid_581170 = query.getOrDefault("quotaUser")
  valid_581170 = validateParameter(valid_581170, JString, required = false,
                                 default = nil)
  if valid_581170 != nil:
    section.add "quotaUser", valid_581170
  var valid_581171 = query.getOrDefault("sortField")
  valid_581171 = validateParameter(valid_581171, JString, required = false,
                                 default = newJString("ID"))
  if valid_581171 != nil:
    section.add "sortField", valid_581171
  var valid_581172 = query.getOrDefault("alt")
  valid_581172 = validateParameter(valid_581172, JString, required = false,
                                 default = newJString("json"))
  if valid_581172 != nil:
    section.add "alt", valid_581172
  var valid_581173 = query.getOrDefault("searchString")
  valid_581173 = validateParameter(valid_581173, JString, required = false,
                                 default = nil)
  if valid_581173 != nil:
    section.add "searchString", valid_581173
  var valid_581174 = query.getOrDefault("oauth_token")
  valid_581174 = validateParameter(valid_581174, JString, required = false,
                                 default = nil)
  if valid_581174 != nil:
    section.add "oauth_token", valid_581174
  var valid_581175 = query.getOrDefault("userIp")
  valid_581175 = validateParameter(valid_581175, JString, required = false,
                                 default = nil)
  if valid_581175 != nil:
    section.add "userIp", valid_581175
  var valid_581176 = query.getOrDefault("maxResults")
  valid_581176 = validateParameter(valid_581176, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581176 != nil:
    section.add "maxResults", valid_581176
  var valid_581177 = query.getOrDefault("ids")
  valid_581177 = validateParameter(valid_581177, JArray, required = false,
                                 default = nil)
  if valid_581177 != nil:
    section.add "ids", valid_581177
  var valid_581178 = query.getOrDefault("key")
  valid_581178 = validateParameter(valid_581178, JString, required = false,
                                 default = nil)
  if valid_581178 != nil:
    section.add "key", valid_581178
  var valid_581179 = query.getOrDefault("sortOrder")
  valid_581179 = validateParameter(valid_581179, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581179 != nil:
    section.add "sortOrder", valid_581179
  var valid_581180 = query.getOrDefault("prettyPrint")
  valid_581180 = validateParameter(valid_581180, JBool, required = false,
                                 default = newJBool(true))
  if valid_581180 != nil:
    section.add "prettyPrint", valid_581180
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581181: Call_DfareportingCreativeFieldValuesList_581163;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of creative field values, possibly filtered. This method supports paging.
  ## 
  let valid = call_581181.validator(path, query, header, formData, body)
  let scheme = call_581181.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581181.url(scheme.get, call_581181.host, call_581181.base,
                         call_581181.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581181, url, valid)

proc call*(call_581182: Call_DfareportingCreativeFieldValuesList_581163;
          profileId: string; creativeFieldId: string; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; sortField: string = "ID";
          alt: string = "json"; searchString: string = ""; oauthToken: string = "";
          userIp: string = ""; maxResults: int = 1000; ids: JsonNode = nil;
          key: string = ""; sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldValuesList
  ## Retrieves a list of creative field values, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for creative field values by their values. Wildcards (e.g. *) are not allowed.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creative field values with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581183 = newJObject()
  var query_581184 = newJObject()
  add(path_581183, "profileId", newJString(profileId))
  add(query_581184, "fields", newJString(fields))
  add(query_581184, "pageToken", newJString(pageToken))
  add(query_581184, "quotaUser", newJString(quotaUser))
  add(query_581184, "sortField", newJString(sortField))
  add(query_581184, "alt", newJString(alt))
  add(query_581184, "searchString", newJString(searchString))
  add(query_581184, "oauth_token", newJString(oauthToken))
  add(query_581184, "userIp", newJString(userIp))
  add(query_581184, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_581184.add "ids", ids
  add(query_581184, "key", newJString(key))
  add(query_581184, "sortOrder", newJString(sortOrder))
  add(path_581183, "creativeFieldId", newJString(creativeFieldId))
  add(query_581184, "prettyPrint", newJBool(prettyPrint))
  result = call_581182.call(path_581183, query_581184, nil, nil, nil)

var dfareportingCreativeFieldValuesList* = Call_DfareportingCreativeFieldValuesList_581163(
    name: "dfareportingCreativeFieldValuesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
    validator: validate_DfareportingCreativeFieldValuesList_581164,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesList_581165,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesPatch_581221 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativeFieldValuesPatch_581223(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesPatch_581222(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative field value. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581224 = path.getOrDefault("profileId")
  valid_581224 = validateParameter(valid_581224, JString, required = true,
                                 default = nil)
  if valid_581224 != nil:
    section.add "profileId", valid_581224
  var valid_581225 = path.getOrDefault("creativeFieldId")
  valid_581225 = validateParameter(valid_581225, JString, required = true,
                                 default = nil)
  if valid_581225 != nil:
    section.add "creativeFieldId", valid_581225
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Creative Field Value ID
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581226 = query.getOrDefault("fields")
  valid_581226 = validateParameter(valid_581226, JString, required = false,
                                 default = nil)
  if valid_581226 != nil:
    section.add "fields", valid_581226
  var valid_581227 = query.getOrDefault("quotaUser")
  valid_581227 = validateParameter(valid_581227, JString, required = false,
                                 default = nil)
  if valid_581227 != nil:
    section.add "quotaUser", valid_581227
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_581228 = query.getOrDefault("id")
  valid_581228 = validateParameter(valid_581228, JString, required = true,
                                 default = nil)
  if valid_581228 != nil:
    section.add "id", valid_581228
  var valid_581229 = query.getOrDefault("alt")
  valid_581229 = validateParameter(valid_581229, JString, required = false,
                                 default = newJString("json"))
  if valid_581229 != nil:
    section.add "alt", valid_581229
  var valid_581230 = query.getOrDefault("oauth_token")
  valid_581230 = validateParameter(valid_581230, JString, required = false,
                                 default = nil)
  if valid_581230 != nil:
    section.add "oauth_token", valid_581230
  var valid_581231 = query.getOrDefault("userIp")
  valid_581231 = validateParameter(valid_581231, JString, required = false,
                                 default = nil)
  if valid_581231 != nil:
    section.add "userIp", valid_581231
  var valid_581232 = query.getOrDefault("key")
  valid_581232 = validateParameter(valid_581232, JString, required = false,
                                 default = nil)
  if valid_581232 != nil:
    section.add "key", valid_581232
  var valid_581233 = query.getOrDefault("prettyPrint")
  valid_581233 = validateParameter(valid_581233, JBool, required = false,
                                 default = newJBool(true))
  if valid_581233 != nil:
    section.add "prettyPrint", valid_581233
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581235: Call_DfareportingCreativeFieldValuesPatch_581221;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative field value. This method supports patch semantics.
  ## 
  let valid = call_581235.validator(path, query, header, formData, body)
  let scheme = call_581235.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581235.url(scheme.get, call_581235.host, call_581235.base,
                         call_581235.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581235, url, valid)

proc call*(call_581236: Call_DfareportingCreativeFieldValuesPatch_581221;
          profileId: string; id: string; creativeFieldId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; body: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldValuesPatch
  ## Updates an existing creative field value. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Creative Field Value ID
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581237 = newJObject()
  var query_581238 = newJObject()
  var body_581239 = newJObject()
  add(path_581237, "profileId", newJString(profileId))
  add(query_581238, "fields", newJString(fields))
  add(query_581238, "quotaUser", newJString(quotaUser))
  add(query_581238, "id", newJString(id))
  add(query_581238, "alt", newJString(alt))
  add(query_581238, "oauth_token", newJString(oauthToken))
  add(query_581238, "userIp", newJString(userIp))
  add(query_581238, "key", newJString(key))
  add(path_581237, "creativeFieldId", newJString(creativeFieldId))
  if body != nil:
    body_581239 = body
  add(query_581238, "prettyPrint", newJBool(prettyPrint))
  result = call_581236.call(path_581237, query_581238, nil, nil, body_581239)

var dfareportingCreativeFieldValuesPatch* = Call_DfareportingCreativeFieldValuesPatch_581221(
    name: "dfareportingCreativeFieldValuesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
    validator: validate_DfareportingCreativeFieldValuesPatch_581222,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesPatch_581223,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesGet_581240 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativeFieldValuesGet_581242(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesGet_581241(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one creative field value by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative Field Value ID
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581243 = path.getOrDefault("profileId")
  valid_581243 = validateParameter(valid_581243, JString, required = true,
                                 default = nil)
  if valid_581243 != nil:
    section.add "profileId", valid_581243
  var valid_581244 = path.getOrDefault("id")
  valid_581244 = validateParameter(valid_581244, JString, required = true,
                                 default = nil)
  if valid_581244 != nil:
    section.add "id", valid_581244
  var valid_581245 = path.getOrDefault("creativeFieldId")
  valid_581245 = validateParameter(valid_581245, JString, required = true,
                                 default = nil)
  if valid_581245 != nil:
    section.add "creativeFieldId", valid_581245
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581246 = query.getOrDefault("fields")
  valid_581246 = validateParameter(valid_581246, JString, required = false,
                                 default = nil)
  if valid_581246 != nil:
    section.add "fields", valid_581246
  var valid_581247 = query.getOrDefault("quotaUser")
  valid_581247 = validateParameter(valid_581247, JString, required = false,
                                 default = nil)
  if valid_581247 != nil:
    section.add "quotaUser", valid_581247
  var valid_581248 = query.getOrDefault("alt")
  valid_581248 = validateParameter(valid_581248, JString, required = false,
                                 default = newJString("json"))
  if valid_581248 != nil:
    section.add "alt", valid_581248
  var valid_581249 = query.getOrDefault("oauth_token")
  valid_581249 = validateParameter(valid_581249, JString, required = false,
                                 default = nil)
  if valid_581249 != nil:
    section.add "oauth_token", valid_581249
  var valid_581250 = query.getOrDefault("userIp")
  valid_581250 = validateParameter(valid_581250, JString, required = false,
                                 default = nil)
  if valid_581250 != nil:
    section.add "userIp", valid_581250
  var valid_581251 = query.getOrDefault("key")
  valid_581251 = validateParameter(valid_581251, JString, required = false,
                                 default = nil)
  if valid_581251 != nil:
    section.add "key", valid_581251
  var valid_581252 = query.getOrDefault("prettyPrint")
  valid_581252 = validateParameter(valid_581252, JBool, required = false,
                                 default = newJBool(true))
  if valid_581252 != nil:
    section.add "prettyPrint", valid_581252
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581253: Call_DfareportingCreativeFieldValuesGet_581240;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one creative field value by ID.
  ## 
  let valid = call_581253.validator(path, query, header, formData, body)
  let scheme = call_581253.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581253.url(scheme.get, call_581253.host, call_581253.base,
                         call_581253.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581253, url, valid)

proc call*(call_581254: Call_DfareportingCreativeFieldValuesGet_581240;
          profileId: string; id: string; creativeFieldId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldValuesGet
  ## Gets one creative field value by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Creative Field Value ID
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581255 = newJObject()
  var query_581256 = newJObject()
  add(path_581255, "profileId", newJString(profileId))
  add(query_581256, "fields", newJString(fields))
  add(query_581256, "quotaUser", newJString(quotaUser))
  add(query_581256, "alt", newJString(alt))
  add(query_581256, "oauth_token", newJString(oauthToken))
  add(query_581256, "userIp", newJString(userIp))
  add(path_581255, "id", newJString(id))
  add(query_581256, "key", newJString(key))
  add(path_581255, "creativeFieldId", newJString(creativeFieldId))
  add(query_581256, "prettyPrint", newJBool(prettyPrint))
  result = call_581254.call(path_581255, query_581256, nil, nil, nil)

var dfareportingCreativeFieldValuesGet* = Call_DfareportingCreativeFieldValuesGet_581240(
    name: "dfareportingCreativeFieldValuesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}",
    validator: validate_DfareportingCreativeFieldValuesGet_581241,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesGet_581242,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesDelete_581257 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativeFieldValuesDelete_581259(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesDelete_581258(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing creative field value.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative Field Value ID
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581260 = path.getOrDefault("profileId")
  valid_581260 = validateParameter(valid_581260, JString, required = true,
                                 default = nil)
  if valid_581260 != nil:
    section.add "profileId", valid_581260
  var valid_581261 = path.getOrDefault("id")
  valid_581261 = validateParameter(valid_581261, JString, required = true,
                                 default = nil)
  if valid_581261 != nil:
    section.add "id", valid_581261
  var valid_581262 = path.getOrDefault("creativeFieldId")
  valid_581262 = validateParameter(valid_581262, JString, required = true,
                                 default = nil)
  if valid_581262 != nil:
    section.add "creativeFieldId", valid_581262
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581263 = query.getOrDefault("fields")
  valid_581263 = validateParameter(valid_581263, JString, required = false,
                                 default = nil)
  if valid_581263 != nil:
    section.add "fields", valid_581263
  var valid_581264 = query.getOrDefault("quotaUser")
  valid_581264 = validateParameter(valid_581264, JString, required = false,
                                 default = nil)
  if valid_581264 != nil:
    section.add "quotaUser", valid_581264
  var valid_581265 = query.getOrDefault("alt")
  valid_581265 = validateParameter(valid_581265, JString, required = false,
                                 default = newJString("json"))
  if valid_581265 != nil:
    section.add "alt", valid_581265
  var valid_581266 = query.getOrDefault("oauth_token")
  valid_581266 = validateParameter(valid_581266, JString, required = false,
                                 default = nil)
  if valid_581266 != nil:
    section.add "oauth_token", valid_581266
  var valid_581267 = query.getOrDefault("userIp")
  valid_581267 = validateParameter(valid_581267, JString, required = false,
                                 default = nil)
  if valid_581267 != nil:
    section.add "userIp", valid_581267
  var valid_581268 = query.getOrDefault("key")
  valid_581268 = validateParameter(valid_581268, JString, required = false,
                                 default = nil)
  if valid_581268 != nil:
    section.add "key", valid_581268
  var valid_581269 = query.getOrDefault("prettyPrint")
  valid_581269 = validateParameter(valid_581269, JBool, required = false,
                                 default = newJBool(true))
  if valid_581269 != nil:
    section.add "prettyPrint", valid_581269
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581270: Call_DfareportingCreativeFieldValuesDelete_581257;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing creative field value.
  ## 
  let valid = call_581270.validator(path, query, header, formData, body)
  let scheme = call_581270.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581270.url(scheme.get, call_581270.host, call_581270.base,
                         call_581270.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581270, url, valid)

proc call*(call_581271: Call_DfareportingCreativeFieldValuesDelete_581257;
          profileId: string; id: string; creativeFieldId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldValuesDelete
  ## Deletes an existing creative field value.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Creative Field Value ID
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581272 = newJObject()
  var query_581273 = newJObject()
  add(path_581272, "profileId", newJString(profileId))
  add(query_581273, "fields", newJString(fields))
  add(query_581273, "quotaUser", newJString(quotaUser))
  add(query_581273, "alt", newJString(alt))
  add(query_581273, "oauth_token", newJString(oauthToken))
  add(query_581273, "userIp", newJString(userIp))
  add(path_581272, "id", newJString(id))
  add(query_581273, "key", newJString(key))
  add(path_581272, "creativeFieldId", newJString(creativeFieldId))
  add(query_581273, "prettyPrint", newJBool(prettyPrint))
  result = call_581271.call(path_581272, query_581273, nil, nil, nil)

var dfareportingCreativeFieldValuesDelete* = Call_DfareportingCreativeFieldValuesDelete_581257(
    name: "dfareportingCreativeFieldValuesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}",
    validator: validate_DfareportingCreativeFieldValuesDelete_581258,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesDelete_581259,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsGet_581274 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativeFieldsGet_581276(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsGet_581275(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one creative field by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative Field ID
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581277 = path.getOrDefault("profileId")
  valid_581277 = validateParameter(valid_581277, JString, required = true,
                                 default = nil)
  if valid_581277 != nil:
    section.add "profileId", valid_581277
  var valid_581278 = path.getOrDefault("id")
  valid_581278 = validateParameter(valid_581278, JString, required = true,
                                 default = nil)
  if valid_581278 != nil:
    section.add "id", valid_581278
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581279 = query.getOrDefault("fields")
  valid_581279 = validateParameter(valid_581279, JString, required = false,
                                 default = nil)
  if valid_581279 != nil:
    section.add "fields", valid_581279
  var valid_581280 = query.getOrDefault("quotaUser")
  valid_581280 = validateParameter(valid_581280, JString, required = false,
                                 default = nil)
  if valid_581280 != nil:
    section.add "quotaUser", valid_581280
  var valid_581281 = query.getOrDefault("alt")
  valid_581281 = validateParameter(valid_581281, JString, required = false,
                                 default = newJString("json"))
  if valid_581281 != nil:
    section.add "alt", valid_581281
  var valid_581282 = query.getOrDefault("oauth_token")
  valid_581282 = validateParameter(valid_581282, JString, required = false,
                                 default = nil)
  if valid_581282 != nil:
    section.add "oauth_token", valid_581282
  var valid_581283 = query.getOrDefault("userIp")
  valid_581283 = validateParameter(valid_581283, JString, required = false,
                                 default = nil)
  if valid_581283 != nil:
    section.add "userIp", valid_581283
  var valid_581284 = query.getOrDefault("key")
  valid_581284 = validateParameter(valid_581284, JString, required = false,
                                 default = nil)
  if valid_581284 != nil:
    section.add "key", valid_581284
  var valid_581285 = query.getOrDefault("prettyPrint")
  valid_581285 = validateParameter(valid_581285, JBool, required = false,
                                 default = newJBool(true))
  if valid_581285 != nil:
    section.add "prettyPrint", valid_581285
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581286: Call_DfareportingCreativeFieldsGet_581274; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one creative field by ID.
  ## 
  let valid = call_581286.validator(path, query, header, formData, body)
  let scheme = call_581286.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581286.url(scheme.get, call_581286.host, call_581286.base,
                         call_581286.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581286, url, valid)

proc call*(call_581287: Call_DfareportingCreativeFieldsGet_581274;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldsGet
  ## Gets one creative field by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Creative Field ID
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581288 = newJObject()
  var query_581289 = newJObject()
  add(path_581288, "profileId", newJString(profileId))
  add(query_581289, "fields", newJString(fields))
  add(query_581289, "quotaUser", newJString(quotaUser))
  add(query_581289, "alt", newJString(alt))
  add(query_581289, "oauth_token", newJString(oauthToken))
  add(query_581289, "userIp", newJString(userIp))
  add(path_581288, "id", newJString(id))
  add(query_581289, "key", newJString(key))
  add(query_581289, "prettyPrint", newJBool(prettyPrint))
  result = call_581287.call(path_581288, query_581289, nil, nil, nil)

var dfareportingCreativeFieldsGet* = Call_DfareportingCreativeFieldsGet_581274(
    name: "dfareportingCreativeFieldsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/creativeFields/{id}",
    validator: validate_DfareportingCreativeFieldsGet_581275,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsGet_581276,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsDelete_581290 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativeFieldsDelete_581292(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsDelete_581291(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing creative field.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative Field ID
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581293 = path.getOrDefault("profileId")
  valid_581293 = validateParameter(valid_581293, JString, required = true,
                                 default = nil)
  if valid_581293 != nil:
    section.add "profileId", valid_581293
  var valid_581294 = path.getOrDefault("id")
  valid_581294 = validateParameter(valid_581294, JString, required = true,
                                 default = nil)
  if valid_581294 != nil:
    section.add "id", valid_581294
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581295 = query.getOrDefault("fields")
  valid_581295 = validateParameter(valid_581295, JString, required = false,
                                 default = nil)
  if valid_581295 != nil:
    section.add "fields", valid_581295
  var valid_581296 = query.getOrDefault("quotaUser")
  valid_581296 = validateParameter(valid_581296, JString, required = false,
                                 default = nil)
  if valid_581296 != nil:
    section.add "quotaUser", valid_581296
  var valid_581297 = query.getOrDefault("alt")
  valid_581297 = validateParameter(valid_581297, JString, required = false,
                                 default = newJString("json"))
  if valid_581297 != nil:
    section.add "alt", valid_581297
  var valid_581298 = query.getOrDefault("oauth_token")
  valid_581298 = validateParameter(valid_581298, JString, required = false,
                                 default = nil)
  if valid_581298 != nil:
    section.add "oauth_token", valid_581298
  var valid_581299 = query.getOrDefault("userIp")
  valid_581299 = validateParameter(valid_581299, JString, required = false,
                                 default = nil)
  if valid_581299 != nil:
    section.add "userIp", valid_581299
  var valid_581300 = query.getOrDefault("key")
  valid_581300 = validateParameter(valid_581300, JString, required = false,
                                 default = nil)
  if valid_581300 != nil:
    section.add "key", valid_581300
  var valid_581301 = query.getOrDefault("prettyPrint")
  valid_581301 = validateParameter(valid_581301, JBool, required = false,
                                 default = newJBool(true))
  if valid_581301 != nil:
    section.add "prettyPrint", valid_581301
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581302: Call_DfareportingCreativeFieldsDelete_581290;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing creative field.
  ## 
  let valid = call_581302.validator(path, query, header, formData, body)
  let scheme = call_581302.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581302.url(scheme.get, call_581302.host, call_581302.base,
                         call_581302.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581302, url, valid)

proc call*(call_581303: Call_DfareportingCreativeFieldsDelete_581290;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldsDelete
  ## Deletes an existing creative field.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Creative Field ID
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581304 = newJObject()
  var query_581305 = newJObject()
  add(path_581304, "profileId", newJString(profileId))
  add(query_581305, "fields", newJString(fields))
  add(query_581305, "quotaUser", newJString(quotaUser))
  add(query_581305, "alt", newJString(alt))
  add(query_581305, "oauth_token", newJString(oauthToken))
  add(query_581305, "userIp", newJString(userIp))
  add(path_581304, "id", newJString(id))
  add(query_581305, "key", newJString(key))
  add(query_581305, "prettyPrint", newJBool(prettyPrint))
  result = call_581303.call(path_581304, query_581305, nil, nil, nil)

var dfareportingCreativeFieldsDelete* = Call_DfareportingCreativeFieldsDelete_581290(
    name: "dfareportingCreativeFieldsDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/creativeFields/{id}",
    validator: validate_DfareportingCreativeFieldsDelete_581291,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsDelete_581292,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsUpdate_581329 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativeGroupsUpdate_581331(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsUpdate_581330(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581332 = path.getOrDefault("profileId")
  valid_581332 = validateParameter(valid_581332, JString, required = true,
                                 default = nil)
  if valid_581332 != nil:
    section.add "profileId", valid_581332
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581333 = query.getOrDefault("fields")
  valid_581333 = validateParameter(valid_581333, JString, required = false,
                                 default = nil)
  if valid_581333 != nil:
    section.add "fields", valid_581333
  var valid_581334 = query.getOrDefault("quotaUser")
  valid_581334 = validateParameter(valid_581334, JString, required = false,
                                 default = nil)
  if valid_581334 != nil:
    section.add "quotaUser", valid_581334
  var valid_581335 = query.getOrDefault("alt")
  valid_581335 = validateParameter(valid_581335, JString, required = false,
                                 default = newJString("json"))
  if valid_581335 != nil:
    section.add "alt", valid_581335
  var valid_581336 = query.getOrDefault("oauth_token")
  valid_581336 = validateParameter(valid_581336, JString, required = false,
                                 default = nil)
  if valid_581336 != nil:
    section.add "oauth_token", valid_581336
  var valid_581337 = query.getOrDefault("userIp")
  valid_581337 = validateParameter(valid_581337, JString, required = false,
                                 default = nil)
  if valid_581337 != nil:
    section.add "userIp", valid_581337
  var valid_581338 = query.getOrDefault("key")
  valid_581338 = validateParameter(valid_581338, JString, required = false,
                                 default = nil)
  if valid_581338 != nil:
    section.add "key", valid_581338
  var valid_581339 = query.getOrDefault("prettyPrint")
  valid_581339 = validateParameter(valid_581339, JBool, required = false,
                                 default = newJBool(true))
  if valid_581339 != nil:
    section.add "prettyPrint", valid_581339
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581341: Call_DfareportingCreativeGroupsUpdate_581329;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative group.
  ## 
  let valid = call_581341.validator(path, query, header, formData, body)
  let scheme = call_581341.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581341.url(scheme.get, call_581341.host, call_581341.base,
                         call_581341.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581341, url, valid)

proc call*(call_581342: Call_DfareportingCreativeGroupsUpdate_581329;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeGroupsUpdate
  ## Updates an existing creative group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581343 = newJObject()
  var query_581344 = newJObject()
  var body_581345 = newJObject()
  add(path_581343, "profileId", newJString(profileId))
  add(query_581344, "fields", newJString(fields))
  add(query_581344, "quotaUser", newJString(quotaUser))
  add(query_581344, "alt", newJString(alt))
  add(query_581344, "oauth_token", newJString(oauthToken))
  add(query_581344, "userIp", newJString(userIp))
  add(query_581344, "key", newJString(key))
  if body != nil:
    body_581345 = body
  add(query_581344, "prettyPrint", newJBool(prettyPrint))
  result = call_581342.call(path_581343, query_581344, nil, nil, body_581345)

var dfareportingCreativeGroupsUpdate* = Call_DfareportingCreativeGroupsUpdate_581329(
    name: "dfareportingCreativeGroupsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeGroups",
    validator: validate_DfareportingCreativeGroupsUpdate_581330,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeGroupsUpdate_581331,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsInsert_581346 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativeGroupsInsert_581348(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsInsert_581347(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581349 = path.getOrDefault("profileId")
  valid_581349 = validateParameter(valid_581349, JString, required = true,
                                 default = nil)
  if valid_581349 != nil:
    section.add "profileId", valid_581349
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581350 = query.getOrDefault("fields")
  valid_581350 = validateParameter(valid_581350, JString, required = false,
                                 default = nil)
  if valid_581350 != nil:
    section.add "fields", valid_581350
  var valid_581351 = query.getOrDefault("quotaUser")
  valid_581351 = validateParameter(valid_581351, JString, required = false,
                                 default = nil)
  if valid_581351 != nil:
    section.add "quotaUser", valid_581351
  var valid_581352 = query.getOrDefault("alt")
  valid_581352 = validateParameter(valid_581352, JString, required = false,
                                 default = newJString("json"))
  if valid_581352 != nil:
    section.add "alt", valid_581352
  var valid_581353 = query.getOrDefault("oauth_token")
  valid_581353 = validateParameter(valid_581353, JString, required = false,
                                 default = nil)
  if valid_581353 != nil:
    section.add "oauth_token", valid_581353
  var valid_581354 = query.getOrDefault("userIp")
  valid_581354 = validateParameter(valid_581354, JString, required = false,
                                 default = nil)
  if valid_581354 != nil:
    section.add "userIp", valid_581354
  var valid_581355 = query.getOrDefault("key")
  valid_581355 = validateParameter(valid_581355, JString, required = false,
                                 default = nil)
  if valid_581355 != nil:
    section.add "key", valid_581355
  var valid_581356 = query.getOrDefault("prettyPrint")
  valid_581356 = validateParameter(valid_581356, JBool, required = false,
                                 default = newJBool(true))
  if valid_581356 != nil:
    section.add "prettyPrint", valid_581356
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581358: Call_DfareportingCreativeGroupsInsert_581346;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new creative group.
  ## 
  let valid = call_581358.validator(path, query, header, formData, body)
  let scheme = call_581358.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581358.url(scheme.get, call_581358.host, call_581358.base,
                         call_581358.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581358, url, valid)

proc call*(call_581359: Call_DfareportingCreativeGroupsInsert_581346;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeGroupsInsert
  ## Inserts a new creative group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581360 = newJObject()
  var query_581361 = newJObject()
  var body_581362 = newJObject()
  add(path_581360, "profileId", newJString(profileId))
  add(query_581361, "fields", newJString(fields))
  add(query_581361, "quotaUser", newJString(quotaUser))
  add(query_581361, "alt", newJString(alt))
  add(query_581361, "oauth_token", newJString(oauthToken))
  add(query_581361, "userIp", newJString(userIp))
  add(query_581361, "key", newJString(key))
  if body != nil:
    body_581362 = body
  add(query_581361, "prettyPrint", newJBool(prettyPrint))
  result = call_581359.call(path_581360, query_581361, nil, nil, body_581362)

var dfareportingCreativeGroupsInsert* = Call_DfareportingCreativeGroupsInsert_581346(
    name: "dfareportingCreativeGroupsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeGroups",
    validator: validate_DfareportingCreativeGroupsInsert_581347,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeGroupsInsert_581348,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsList_581306 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativeGroupsList_581308(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsList_581307(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of creative groups, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581309 = path.getOrDefault("profileId")
  valid_581309 = validateParameter(valid_581309, JString, required = true,
                                 default = nil)
  if valid_581309 != nil:
    section.add "profileId", valid_581309
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for creative groups by name or ID. Wildcards (*) are allowed. For example, "creativegroup*2015" will return creative groups with names like "creativegroup June 2015", "creativegroup April 2015", or simply "creativegroup 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativegroup" will match creative groups with the name "my creativegroup", "creativegroup 2015", or simply "creativegroup".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creative groups with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only creative groups that belong to these advertisers.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   groupNumber: JInt
  ##              : Select only creative groups that belong to this subgroup.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581310 = query.getOrDefault("fields")
  valid_581310 = validateParameter(valid_581310, JString, required = false,
                                 default = nil)
  if valid_581310 != nil:
    section.add "fields", valid_581310
  var valid_581311 = query.getOrDefault("pageToken")
  valid_581311 = validateParameter(valid_581311, JString, required = false,
                                 default = nil)
  if valid_581311 != nil:
    section.add "pageToken", valid_581311
  var valid_581312 = query.getOrDefault("quotaUser")
  valid_581312 = validateParameter(valid_581312, JString, required = false,
                                 default = nil)
  if valid_581312 != nil:
    section.add "quotaUser", valid_581312
  var valid_581313 = query.getOrDefault("sortField")
  valid_581313 = validateParameter(valid_581313, JString, required = false,
                                 default = newJString("ID"))
  if valid_581313 != nil:
    section.add "sortField", valid_581313
  var valid_581314 = query.getOrDefault("alt")
  valid_581314 = validateParameter(valid_581314, JString, required = false,
                                 default = newJString("json"))
  if valid_581314 != nil:
    section.add "alt", valid_581314
  var valid_581315 = query.getOrDefault("searchString")
  valid_581315 = validateParameter(valid_581315, JString, required = false,
                                 default = nil)
  if valid_581315 != nil:
    section.add "searchString", valid_581315
  var valid_581316 = query.getOrDefault("oauth_token")
  valid_581316 = validateParameter(valid_581316, JString, required = false,
                                 default = nil)
  if valid_581316 != nil:
    section.add "oauth_token", valid_581316
  var valid_581317 = query.getOrDefault("userIp")
  valid_581317 = validateParameter(valid_581317, JString, required = false,
                                 default = nil)
  if valid_581317 != nil:
    section.add "userIp", valid_581317
  var valid_581318 = query.getOrDefault("maxResults")
  valid_581318 = validateParameter(valid_581318, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581318 != nil:
    section.add "maxResults", valid_581318
  var valid_581319 = query.getOrDefault("ids")
  valid_581319 = validateParameter(valid_581319, JArray, required = false,
                                 default = nil)
  if valid_581319 != nil:
    section.add "ids", valid_581319
  var valid_581320 = query.getOrDefault("key")
  valid_581320 = validateParameter(valid_581320, JString, required = false,
                                 default = nil)
  if valid_581320 != nil:
    section.add "key", valid_581320
  var valid_581321 = query.getOrDefault("advertiserIds")
  valid_581321 = validateParameter(valid_581321, JArray, required = false,
                                 default = nil)
  if valid_581321 != nil:
    section.add "advertiserIds", valid_581321
  var valid_581322 = query.getOrDefault("sortOrder")
  valid_581322 = validateParameter(valid_581322, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581322 != nil:
    section.add "sortOrder", valid_581322
  var valid_581323 = query.getOrDefault("groupNumber")
  valid_581323 = validateParameter(valid_581323, JInt, required = false, default = nil)
  if valid_581323 != nil:
    section.add "groupNumber", valid_581323
  var valid_581324 = query.getOrDefault("prettyPrint")
  valid_581324 = validateParameter(valid_581324, JBool, required = false,
                                 default = newJBool(true))
  if valid_581324 != nil:
    section.add "prettyPrint", valid_581324
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581325: Call_DfareportingCreativeGroupsList_581306; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of creative groups, possibly filtered. This method supports paging.
  ## 
  let valid = call_581325.validator(path, query, header, formData, body)
  let scheme = call_581325.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581325.url(scheme.get, call_581325.host, call_581325.base,
                         call_581325.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581325, url, valid)

proc call*(call_581326: Call_DfareportingCreativeGroupsList_581306;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          advertiserIds: JsonNode = nil; sortOrder: string = "ASCENDING";
          groupNumber: int = 0; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeGroupsList
  ## Retrieves a list of creative groups, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for creative groups by name or ID. Wildcards (*) are allowed. For example, "creativegroup*2015" will return creative groups with names like "creativegroup June 2015", "creativegroup April 2015", or simply "creativegroup 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativegroup" will match creative groups with the name "my creativegroup", "creativegroup 2015", or simply "creativegroup".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creative groups with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only creative groups that belong to these advertisers.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   groupNumber: int
  ##              : Select only creative groups that belong to this subgroup.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581327 = newJObject()
  var query_581328 = newJObject()
  add(path_581327, "profileId", newJString(profileId))
  add(query_581328, "fields", newJString(fields))
  add(query_581328, "pageToken", newJString(pageToken))
  add(query_581328, "quotaUser", newJString(quotaUser))
  add(query_581328, "sortField", newJString(sortField))
  add(query_581328, "alt", newJString(alt))
  add(query_581328, "searchString", newJString(searchString))
  add(query_581328, "oauth_token", newJString(oauthToken))
  add(query_581328, "userIp", newJString(userIp))
  add(query_581328, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_581328.add "ids", ids
  add(query_581328, "key", newJString(key))
  if advertiserIds != nil:
    query_581328.add "advertiserIds", advertiserIds
  add(query_581328, "sortOrder", newJString(sortOrder))
  add(query_581328, "groupNumber", newJInt(groupNumber))
  add(query_581328, "prettyPrint", newJBool(prettyPrint))
  result = call_581326.call(path_581327, query_581328, nil, nil, nil)

var dfareportingCreativeGroupsList* = Call_DfareportingCreativeGroupsList_581306(
    name: "dfareportingCreativeGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeGroups",
    validator: validate_DfareportingCreativeGroupsList_581307,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeGroupsList_581308,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsPatch_581363 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativeGroupsPatch_581365(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsPatch_581364(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative group. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581366 = path.getOrDefault("profileId")
  valid_581366 = validateParameter(valid_581366, JString, required = true,
                                 default = nil)
  if valid_581366 != nil:
    section.add "profileId", valid_581366
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Creative group ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581367 = query.getOrDefault("fields")
  valid_581367 = validateParameter(valid_581367, JString, required = false,
                                 default = nil)
  if valid_581367 != nil:
    section.add "fields", valid_581367
  var valid_581368 = query.getOrDefault("quotaUser")
  valid_581368 = validateParameter(valid_581368, JString, required = false,
                                 default = nil)
  if valid_581368 != nil:
    section.add "quotaUser", valid_581368
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_581369 = query.getOrDefault("id")
  valid_581369 = validateParameter(valid_581369, JString, required = true,
                                 default = nil)
  if valid_581369 != nil:
    section.add "id", valid_581369
  var valid_581370 = query.getOrDefault("alt")
  valid_581370 = validateParameter(valid_581370, JString, required = false,
                                 default = newJString("json"))
  if valid_581370 != nil:
    section.add "alt", valid_581370
  var valid_581371 = query.getOrDefault("oauth_token")
  valid_581371 = validateParameter(valid_581371, JString, required = false,
                                 default = nil)
  if valid_581371 != nil:
    section.add "oauth_token", valid_581371
  var valid_581372 = query.getOrDefault("userIp")
  valid_581372 = validateParameter(valid_581372, JString, required = false,
                                 default = nil)
  if valid_581372 != nil:
    section.add "userIp", valid_581372
  var valid_581373 = query.getOrDefault("key")
  valid_581373 = validateParameter(valid_581373, JString, required = false,
                                 default = nil)
  if valid_581373 != nil:
    section.add "key", valid_581373
  var valid_581374 = query.getOrDefault("prettyPrint")
  valid_581374 = validateParameter(valid_581374, JBool, required = false,
                                 default = newJBool(true))
  if valid_581374 != nil:
    section.add "prettyPrint", valid_581374
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581376: Call_DfareportingCreativeGroupsPatch_581363;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative group. This method supports patch semantics.
  ## 
  let valid = call_581376.validator(path, query, header, formData, body)
  let scheme = call_581376.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581376.url(scheme.get, call_581376.host, call_581376.base,
                         call_581376.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581376, url, valid)

proc call*(call_581377: Call_DfareportingCreativeGroupsPatch_581363;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeGroupsPatch
  ## Updates an existing creative group. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Creative group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581378 = newJObject()
  var query_581379 = newJObject()
  var body_581380 = newJObject()
  add(path_581378, "profileId", newJString(profileId))
  add(query_581379, "fields", newJString(fields))
  add(query_581379, "quotaUser", newJString(quotaUser))
  add(query_581379, "id", newJString(id))
  add(query_581379, "alt", newJString(alt))
  add(query_581379, "oauth_token", newJString(oauthToken))
  add(query_581379, "userIp", newJString(userIp))
  add(query_581379, "key", newJString(key))
  if body != nil:
    body_581380 = body
  add(query_581379, "prettyPrint", newJBool(prettyPrint))
  result = call_581377.call(path_581378, query_581379, nil, nil, body_581380)

var dfareportingCreativeGroupsPatch* = Call_DfareportingCreativeGroupsPatch_581363(
    name: "dfareportingCreativeGroupsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeGroups",
    validator: validate_DfareportingCreativeGroupsPatch_581364,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeGroupsPatch_581365,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsGet_581381 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativeGroupsGet_581383(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsGet_581382(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one creative group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581384 = path.getOrDefault("profileId")
  valid_581384 = validateParameter(valid_581384, JString, required = true,
                                 default = nil)
  if valid_581384 != nil:
    section.add "profileId", valid_581384
  var valid_581385 = path.getOrDefault("id")
  valid_581385 = validateParameter(valid_581385, JString, required = true,
                                 default = nil)
  if valid_581385 != nil:
    section.add "id", valid_581385
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581386 = query.getOrDefault("fields")
  valid_581386 = validateParameter(valid_581386, JString, required = false,
                                 default = nil)
  if valid_581386 != nil:
    section.add "fields", valid_581386
  var valid_581387 = query.getOrDefault("quotaUser")
  valid_581387 = validateParameter(valid_581387, JString, required = false,
                                 default = nil)
  if valid_581387 != nil:
    section.add "quotaUser", valid_581387
  var valid_581388 = query.getOrDefault("alt")
  valid_581388 = validateParameter(valid_581388, JString, required = false,
                                 default = newJString("json"))
  if valid_581388 != nil:
    section.add "alt", valid_581388
  var valid_581389 = query.getOrDefault("oauth_token")
  valid_581389 = validateParameter(valid_581389, JString, required = false,
                                 default = nil)
  if valid_581389 != nil:
    section.add "oauth_token", valid_581389
  var valid_581390 = query.getOrDefault("userIp")
  valid_581390 = validateParameter(valid_581390, JString, required = false,
                                 default = nil)
  if valid_581390 != nil:
    section.add "userIp", valid_581390
  var valid_581391 = query.getOrDefault("key")
  valid_581391 = validateParameter(valid_581391, JString, required = false,
                                 default = nil)
  if valid_581391 != nil:
    section.add "key", valid_581391
  var valid_581392 = query.getOrDefault("prettyPrint")
  valid_581392 = validateParameter(valid_581392, JBool, required = false,
                                 default = newJBool(true))
  if valid_581392 != nil:
    section.add "prettyPrint", valid_581392
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581393: Call_DfareportingCreativeGroupsGet_581381; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one creative group by ID.
  ## 
  let valid = call_581393.validator(path, query, header, formData, body)
  let scheme = call_581393.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581393.url(scheme.get, call_581393.host, call_581393.base,
                         call_581393.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581393, url, valid)

proc call*(call_581394: Call_DfareportingCreativeGroupsGet_581381;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeGroupsGet
  ## Gets one creative group by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Creative group ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581395 = newJObject()
  var query_581396 = newJObject()
  add(path_581395, "profileId", newJString(profileId))
  add(query_581396, "fields", newJString(fields))
  add(query_581396, "quotaUser", newJString(quotaUser))
  add(query_581396, "alt", newJString(alt))
  add(query_581396, "oauth_token", newJString(oauthToken))
  add(query_581396, "userIp", newJString(userIp))
  add(path_581395, "id", newJString(id))
  add(query_581396, "key", newJString(key))
  add(query_581396, "prettyPrint", newJBool(prettyPrint))
  result = call_581394.call(path_581395, query_581396, nil, nil, nil)

var dfareportingCreativeGroupsGet* = Call_DfareportingCreativeGroupsGet_581381(
    name: "dfareportingCreativeGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/creativeGroups/{id}",
    validator: validate_DfareportingCreativeGroupsGet_581382,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeGroupsGet_581383,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesUpdate_581428 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativesUpdate_581430(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesUpdate_581429(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581431 = path.getOrDefault("profileId")
  valid_581431 = validateParameter(valid_581431, JString, required = true,
                                 default = nil)
  if valid_581431 != nil:
    section.add "profileId", valid_581431
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581432 = query.getOrDefault("fields")
  valid_581432 = validateParameter(valid_581432, JString, required = false,
                                 default = nil)
  if valid_581432 != nil:
    section.add "fields", valid_581432
  var valid_581433 = query.getOrDefault("quotaUser")
  valid_581433 = validateParameter(valid_581433, JString, required = false,
                                 default = nil)
  if valid_581433 != nil:
    section.add "quotaUser", valid_581433
  var valid_581434 = query.getOrDefault("alt")
  valid_581434 = validateParameter(valid_581434, JString, required = false,
                                 default = newJString("json"))
  if valid_581434 != nil:
    section.add "alt", valid_581434
  var valid_581435 = query.getOrDefault("oauth_token")
  valid_581435 = validateParameter(valid_581435, JString, required = false,
                                 default = nil)
  if valid_581435 != nil:
    section.add "oauth_token", valid_581435
  var valid_581436 = query.getOrDefault("userIp")
  valid_581436 = validateParameter(valid_581436, JString, required = false,
                                 default = nil)
  if valid_581436 != nil:
    section.add "userIp", valid_581436
  var valid_581437 = query.getOrDefault("key")
  valid_581437 = validateParameter(valid_581437, JString, required = false,
                                 default = nil)
  if valid_581437 != nil:
    section.add "key", valid_581437
  var valid_581438 = query.getOrDefault("prettyPrint")
  valid_581438 = validateParameter(valid_581438, JBool, required = false,
                                 default = newJBool(true))
  if valid_581438 != nil:
    section.add "prettyPrint", valid_581438
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581440: Call_DfareportingCreativesUpdate_581428; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing creative.
  ## 
  let valid = call_581440.validator(path, query, header, formData, body)
  let scheme = call_581440.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581440.url(scheme.get, call_581440.host, call_581440.base,
                         call_581440.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581440, url, valid)

proc call*(call_581441: Call_DfareportingCreativesUpdate_581428; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativesUpdate
  ## Updates an existing creative.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581442 = newJObject()
  var query_581443 = newJObject()
  var body_581444 = newJObject()
  add(path_581442, "profileId", newJString(profileId))
  add(query_581443, "fields", newJString(fields))
  add(query_581443, "quotaUser", newJString(quotaUser))
  add(query_581443, "alt", newJString(alt))
  add(query_581443, "oauth_token", newJString(oauthToken))
  add(query_581443, "userIp", newJString(userIp))
  add(query_581443, "key", newJString(key))
  if body != nil:
    body_581444 = body
  add(query_581443, "prettyPrint", newJBool(prettyPrint))
  result = call_581441.call(path_581442, query_581443, nil, nil, body_581444)

var dfareportingCreativesUpdate* = Call_DfareportingCreativesUpdate_581428(
    name: "dfareportingCreativesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives",
    validator: validate_DfareportingCreativesUpdate_581429,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativesUpdate_581430,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesInsert_581445 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativesInsert_581447(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesInsert_581446(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581448 = path.getOrDefault("profileId")
  valid_581448 = validateParameter(valid_581448, JString, required = true,
                                 default = nil)
  if valid_581448 != nil:
    section.add "profileId", valid_581448
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581449 = query.getOrDefault("fields")
  valid_581449 = validateParameter(valid_581449, JString, required = false,
                                 default = nil)
  if valid_581449 != nil:
    section.add "fields", valid_581449
  var valid_581450 = query.getOrDefault("quotaUser")
  valid_581450 = validateParameter(valid_581450, JString, required = false,
                                 default = nil)
  if valid_581450 != nil:
    section.add "quotaUser", valid_581450
  var valid_581451 = query.getOrDefault("alt")
  valid_581451 = validateParameter(valid_581451, JString, required = false,
                                 default = newJString("json"))
  if valid_581451 != nil:
    section.add "alt", valid_581451
  var valid_581452 = query.getOrDefault("oauth_token")
  valid_581452 = validateParameter(valid_581452, JString, required = false,
                                 default = nil)
  if valid_581452 != nil:
    section.add "oauth_token", valid_581452
  var valid_581453 = query.getOrDefault("userIp")
  valid_581453 = validateParameter(valid_581453, JString, required = false,
                                 default = nil)
  if valid_581453 != nil:
    section.add "userIp", valid_581453
  var valid_581454 = query.getOrDefault("key")
  valid_581454 = validateParameter(valid_581454, JString, required = false,
                                 default = nil)
  if valid_581454 != nil:
    section.add "key", valid_581454
  var valid_581455 = query.getOrDefault("prettyPrint")
  valid_581455 = validateParameter(valid_581455, JBool, required = false,
                                 default = newJBool(true))
  if valid_581455 != nil:
    section.add "prettyPrint", valid_581455
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581457: Call_DfareportingCreativesInsert_581445; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new creative.
  ## 
  let valid = call_581457.validator(path, query, header, formData, body)
  let scheme = call_581457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581457.url(scheme.get, call_581457.host, call_581457.base,
                         call_581457.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581457, url, valid)

proc call*(call_581458: Call_DfareportingCreativesInsert_581445; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativesInsert
  ## Inserts a new creative.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581459 = newJObject()
  var query_581460 = newJObject()
  var body_581461 = newJObject()
  add(path_581459, "profileId", newJString(profileId))
  add(query_581460, "fields", newJString(fields))
  add(query_581460, "quotaUser", newJString(quotaUser))
  add(query_581460, "alt", newJString(alt))
  add(query_581460, "oauth_token", newJString(oauthToken))
  add(query_581460, "userIp", newJString(userIp))
  add(query_581460, "key", newJString(key))
  if body != nil:
    body_581461 = body
  add(query_581460, "prettyPrint", newJBool(prettyPrint))
  result = call_581458.call(path_581459, query_581460, nil, nil, body_581461)

var dfareportingCreativesInsert* = Call_DfareportingCreativesInsert_581445(
    name: "dfareportingCreativesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives",
    validator: validate_DfareportingCreativesInsert_581446,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativesInsert_581447,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesList_581397 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativesList_581399(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesList_581398(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of creatives, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581400 = path.getOrDefault("profileId")
  valid_581400 = validateParameter(valid_581400, JString, required = true,
                                 default = nil)
  if valid_581400 != nil:
    section.add "profileId", valid_581400
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "creative*2015" will return objects with names like "creative June 2015", "creative April 2015", or simply "creative 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "creative" will match objects with name "my creative", "creative 2015", or simply "creative".
  ##   advertiserId: JString
  ##               : Select only creatives with this advertiser ID.
  ##   types: JArray
  ##        : Select only creatives with these creative types.
  ##   sizeIds: JArray
  ##          : Select only creatives with these size IDs.
  ##   active: JBool
  ##         : Select only active creatives. Leave blank to select active and inactive creatives.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   studioCreativeId: JString
  ##                   : Select only creatives corresponding to this Studio creative ID.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   renderingIds: JArray
  ##               : Select only creatives with these rendering IDs.
  ##   archived: JBool
  ##           : Select only archived creatives. Leave blank to select archived and unarchived creatives.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creatives with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   creativeFieldIds: JArray
  ##                   : Select only creatives with these creative field IDs.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   companionCreativeIds: JArray
  ##                       : Select only in-stream video creatives with these companion IDs.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   campaignId: JString
  ##             : Select only creatives with this campaign ID.
  section = newJObject()
  var valid_581401 = query.getOrDefault("fields")
  valid_581401 = validateParameter(valid_581401, JString, required = false,
                                 default = nil)
  if valid_581401 != nil:
    section.add "fields", valid_581401
  var valid_581402 = query.getOrDefault("pageToken")
  valid_581402 = validateParameter(valid_581402, JString, required = false,
                                 default = nil)
  if valid_581402 != nil:
    section.add "pageToken", valid_581402
  var valid_581403 = query.getOrDefault("quotaUser")
  valid_581403 = validateParameter(valid_581403, JString, required = false,
                                 default = nil)
  if valid_581403 != nil:
    section.add "quotaUser", valid_581403
  var valid_581404 = query.getOrDefault("sortField")
  valid_581404 = validateParameter(valid_581404, JString, required = false,
                                 default = newJString("ID"))
  if valid_581404 != nil:
    section.add "sortField", valid_581404
  var valid_581405 = query.getOrDefault("alt")
  valid_581405 = validateParameter(valid_581405, JString, required = false,
                                 default = newJString("json"))
  if valid_581405 != nil:
    section.add "alt", valid_581405
  var valid_581406 = query.getOrDefault("searchString")
  valid_581406 = validateParameter(valid_581406, JString, required = false,
                                 default = nil)
  if valid_581406 != nil:
    section.add "searchString", valid_581406
  var valid_581407 = query.getOrDefault("advertiserId")
  valid_581407 = validateParameter(valid_581407, JString, required = false,
                                 default = nil)
  if valid_581407 != nil:
    section.add "advertiserId", valid_581407
  var valid_581408 = query.getOrDefault("types")
  valid_581408 = validateParameter(valid_581408, JArray, required = false,
                                 default = nil)
  if valid_581408 != nil:
    section.add "types", valid_581408
  var valid_581409 = query.getOrDefault("sizeIds")
  valid_581409 = validateParameter(valid_581409, JArray, required = false,
                                 default = nil)
  if valid_581409 != nil:
    section.add "sizeIds", valid_581409
  var valid_581410 = query.getOrDefault("active")
  valid_581410 = validateParameter(valid_581410, JBool, required = false, default = nil)
  if valid_581410 != nil:
    section.add "active", valid_581410
  var valid_581411 = query.getOrDefault("oauth_token")
  valid_581411 = validateParameter(valid_581411, JString, required = false,
                                 default = nil)
  if valid_581411 != nil:
    section.add "oauth_token", valid_581411
  var valid_581412 = query.getOrDefault("studioCreativeId")
  valid_581412 = validateParameter(valid_581412, JString, required = false,
                                 default = nil)
  if valid_581412 != nil:
    section.add "studioCreativeId", valid_581412
  var valid_581413 = query.getOrDefault("userIp")
  valid_581413 = validateParameter(valid_581413, JString, required = false,
                                 default = nil)
  if valid_581413 != nil:
    section.add "userIp", valid_581413
  var valid_581414 = query.getOrDefault("renderingIds")
  valid_581414 = validateParameter(valid_581414, JArray, required = false,
                                 default = nil)
  if valid_581414 != nil:
    section.add "renderingIds", valid_581414
  var valid_581415 = query.getOrDefault("archived")
  valid_581415 = validateParameter(valid_581415, JBool, required = false, default = nil)
  if valid_581415 != nil:
    section.add "archived", valid_581415
  var valid_581416 = query.getOrDefault("maxResults")
  valid_581416 = validateParameter(valid_581416, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581416 != nil:
    section.add "maxResults", valid_581416
  var valid_581417 = query.getOrDefault("ids")
  valid_581417 = validateParameter(valid_581417, JArray, required = false,
                                 default = nil)
  if valid_581417 != nil:
    section.add "ids", valid_581417
  var valid_581418 = query.getOrDefault("key")
  valid_581418 = validateParameter(valid_581418, JString, required = false,
                                 default = nil)
  if valid_581418 != nil:
    section.add "key", valid_581418
  var valid_581419 = query.getOrDefault("creativeFieldIds")
  valid_581419 = validateParameter(valid_581419, JArray, required = false,
                                 default = nil)
  if valid_581419 != nil:
    section.add "creativeFieldIds", valid_581419
  var valid_581420 = query.getOrDefault("sortOrder")
  valid_581420 = validateParameter(valid_581420, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581420 != nil:
    section.add "sortOrder", valid_581420
  var valid_581421 = query.getOrDefault("companionCreativeIds")
  valid_581421 = validateParameter(valid_581421, JArray, required = false,
                                 default = nil)
  if valid_581421 != nil:
    section.add "companionCreativeIds", valid_581421
  var valid_581422 = query.getOrDefault("prettyPrint")
  valid_581422 = validateParameter(valid_581422, JBool, required = false,
                                 default = newJBool(true))
  if valid_581422 != nil:
    section.add "prettyPrint", valid_581422
  var valid_581423 = query.getOrDefault("campaignId")
  valid_581423 = validateParameter(valid_581423, JString, required = false,
                                 default = nil)
  if valid_581423 != nil:
    section.add "campaignId", valid_581423
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581424: Call_DfareportingCreativesList_581397; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of creatives, possibly filtered. This method supports paging.
  ## 
  let valid = call_581424.validator(path, query, header, formData, body)
  let scheme = call_581424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581424.url(scheme.get, call_581424.host, call_581424.base,
                         call_581424.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581424, url, valid)

proc call*(call_581425: Call_DfareportingCreativesList_581397; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "ID"; alt: string = "json"; searchString: string = "";
          advertiserId: string = ""; types: JsonNode = nil; sizeIds: JsonNode = nil;
          active: bool = false; oauthToken: string = ""; studioCreativeId: string = "";
          userIp: string = ""; renderingIds: JsonNode = nil; archived: bool = false;
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          creativeFieldIds: JsonNode = nil; sortOrder: string = "ASCENDING";
          companionCreativeIds: JsonNode = nil; prettyPrint: bool = true;
          campaignId: string = ""): Recallable =
  ## dfareportingCreativesList
  ## Retrieves a list of creatives, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "creative*2015" will return objects with names like "creative June 2015", "creative April 2015", or simply "creative 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "creative" will match objects with name "my creative", "creative 2015", or simply "creative".
  ##   advertiserId: string
  ##               : Select only creatives with this advertiser ID.
  ##   types: JArray
  ##        : Select only creatives with these creative types.
  ##   sizeIds: JArray
  ##          : Select only creatives with these size IDs.
  ##   active: bool
  ##         : Select only active creatives. Leave blank to select active and inactive creatives.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   studioCreativeId: string
  ##                   : Select only creatives corresponding to this Studio creative ID.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   renderingIds: JArray
  ##               : Select only creatives with these rendering IDs.
  ##   archived: bool
  ##           : Select only archived creatives. Leave blank to select archived and unarchived creatives.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creatives with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   creativeFieldIds: JArray
  ##                   : Select only creatives with these creative field IDs.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   companionCreativeIds: JArray
  ##                       : Select only in-stream video creatives with these companion IDs.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   campaignId: string
  ##             : Select only creatives with this campaign ID.
  var path_581426 = newJObject()
  var query_581427 = newJObject()
  add(path_581426, "profileId", newJString(profileId))
  add(query_581427, "fields", newJString(fields))
  add(query_581427, "pageToken", newJString(pageToken))
  add(query_581427, "quotaUser", newJString(quotaUser))
  add(query_581427, "sortField", newJString(sortField))
  add(query_581427, "alt", newJString(alt))
  add(query_581427, "searchString", newJString(searchString))
  add(query_581427, "advertiserId", newJString(advertiserId))
  if types != nil:
    query_581427.add "types", types
  if sizeIds != nil:
    query_581427.add "sizeIds", sizeIds
  add(query_581427, "active", newJBool(active))
  add(query_581427, "oauth_token", newJString(oauthToken))
  add(query_581427, "studioCreativeId", newJString(studioCreativeId))
  add(query_581427, "userIp", newJString(userIp))
  if renderingIds != nil:
    query_581427.add "renderingIds", renderingIds
  add(query_581427, "archived", newJBool(archived))
  add(query_581427, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_581427.add "ids", ids
  add(query_581427, "key", newJString(key))
  if creativeFieldIds != nil:
    query_581427.add "creativeFieldIds", creativeFieldIds
  add(query_581427, "sortOrder", newJString(sortOrder))
  if companionCreativeIds != nil:
    query_581427.add "companionCreativeIds", companionCreativeIds
  add(query_581427, "prettyPrint", newJBool(prettyPrint))
  add(query_581427, "campaignId", newJString(campaignId))
  result = call_581425.call(path_581426, query_581427, nil, nil, nil)

var dfareportingCreativesList* = Call_DfareportingCreativesList_581397(
    name: "dfareportingCreativesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives",
    validator: validate_DfareportingCreativesList_581398,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativesList_581399,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesPatch_581462 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativesPatch_581464(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesPatch_581463(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581465 = path.getOrDefault("profileId")
  valid_581465 = validateParameter(valid_581465, JString, required = true,
                                 default = nil)
  if valid_581465 != nil:
    section.add "profileId", valid_581465
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Creative ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581466 = query.getOrDefault("fields")
  valid_581466 = validateParameter(valid_581466, JString, required = false,
                                 default = nil)
  if valid_581466 != nil:
    section.add "fields", valid_581466
  var valid_581467 = query.getOrDefault("quotaUser")
  valid_581467 = validateParameter(valid_581467, JString, required = false,
                                 default = nil)
  if valid_581467 != nil:
    section.add "quotaUser", valid_581467
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_581468 = query.getOrDefault("id")
  valid_581468 = validateParameter(valid_581468, JString, required = true,
                                 default = nil)
  if valid_581468 != nil:
    section.add "id", valid_581468
  var valid_581469 = query.getOrDefault("alt")
  valid_581469 = validateParameter(valid_581469, JString, required = false,
                                 default = newJString("json"))
  if valid_581469 != nil:
    section.add "alt", valid_581469
  var valid_581470 = query.getOrDefault("oauth_token")
  valid_581470 = validateParameter(valid_581470, JString, required = false,
                                 default = nil)
  if valid_581470 != nil:
    section.add "oauth_token", valid_581470
  var valid_581471 = query.getOrDefault("userIp")
  valid_581471 = validateParameter(valid_581471, JString, required = false,
                                 default = nil)
  if valid_581471 != nil:
    section.add "userIp", valid_581471
  var valid_581472 = query.getOrDefault("key")
  valid_581472 = validateParameter(valid_581472, JString, required = false,
                                 default = nil)
  if valid_581472 != nil:
    section.add "key", valid_581472
  var valid_581473 = query.getOrDefault("prettyPrint")
  valid_581473 = validateParameter(valid_581473, JBool, required = false,
                                 default = newJBool(true))
  if valid_581473 != nil:
    section.add "prettyPrint", valid_581473
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581475: Call_DfareportingCreativesPatch_581462; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing creative. This method supports patch semantics.
  ## 
  let valid = call_581475.validator(path, query, header, formData, body)
  let scheme = call_581475.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581475.url(scheme.get, call_581475.host, call_581475.base,
                         call_581475.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581475, url, valid)

proc call*(call_581476: Call_DfareportingCreativesPatch_581462; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativesPatch
  ## Updates an existing creative. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Creative ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581477 = newJObject()
  var query_581478 = newJObject()
  var body_581479 = newJObject()
  add(path_581477, "profileId", newJString(profileId))
  add(query_581478, "fields", newJString(fields))
  add(query_581478, "quotaUser", newJString(quotaUser))
  add(query_581478, "id", newJString(id))
  add(query_581478, "alt", newJString(alt))
  add(query_581478, "oauth_token", newJString(oauthToken))
  add(query_581478, "userIp", newJString(userIp))
  add(query_581478, "key", newJString(key))
  if body != nil:
    body_581479 = body
  add(query_581478, "prettyPrint", newJBool(prettyPrint))
  result = call_581476.call(path_581477, query_581478, nil, nil, body_581479)

var dfareportingCreativesPatch* = Call_DfareportingCreativesPatch_581462(
    name: "dfareportingCreativesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives",
    validator: validate_DfareportingCreativesPatch_581463,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativesPatch_581464,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesGet_581480 = ref object of OpenApiRestCall_579437
proc url_DfareportingCreativesGet_581482(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesGet_581481(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one creative by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581483 = path.getOrDefault("profileId")
  valid_581483 = validateParameter(valid_581483, JString, required = true,
                                 default = nil)
  if valid_581483 != nil:
    section.add "profileId", valid_581483
  var valid_581484 = path.getOrDefault("id")
  valid_581484 = validateParameter(valid_581484, JString, required = true,
                                 default = nil)
  if valid_581484 != nil:
    section.add "id", valid_581484
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581485 = query.getOrDefault("fields")
  valid_581485 = validateParameter(valid_581485, JString, required = false,
                                 default = nil)
  if valid_581485 != nil:
    section.add "fields", valid_581485
  var valid_581486 = query.getOrDefault("quotaUser")
  valid_581486 = validateParameter(valid_581486, JString, required = false,
                                 default = nil)
  if valid_581486 != nil:
    section.add "quotaUser", valid_581486
  var valid_581487 = query.getOrDefault("alt")
  valid_581487 = validateParameter(valid_581487, JString, required = false,
                                 default = newJString("json"))
  if valid_581487 != nil:
    section.add "alt", valid_581487
  var valid_581488 = query.getOrDefault("oauth_token")
  valid_581488 = validateParameter(valid_581488, JString, required = false,
                                 default = nil)
  if valid_581488 != nil:
    section.add "oauth_token", valid_581488
  var valid_581489 = query.getOrDefault("userIp")
  valid_581489 = validateParameter(valid_581489, JString, required = false,
                                 default = nil)
  if valid_581489 != nil:
    section.add "userIp", valid_581489
  var valid_581490 = query.getOrDefault("key")
  valid_581490 = validateParameter(valid_581490, JString, required = false,
                                 default = nil)
  if valid_581490 != nil:
    section.add "key", valid_581490
  var valid_581491 = query.getOrDefault("prettyPrint")
  valid_581491 = validateParameter(valid_581491, JBool, required = false,
                                 default = newJBool(true))
  if valid_581491 != nil:
    section.add "prettyPrint", valid_581491
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581492: Call_DfareportingCreativesGet_581480; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one creative by ID.
  ## 
  let valid = call_581492.validator(path, query, header, formData, body)
  let scheme = call_581492.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581492.url(scheme.get, call_581492.host, call_581492.base,
                         call_581492.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581492, url, valid)

proc call*(call_581493: Call_DfareportingCreativesGet_581480; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingCreativesGet
  ## Gets one creative by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Creative ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581494 = newJObject()
  var query_581495 = newJObject()
  add(path_581494, "profileId", newJString(profileId))
  add(query_581495, "fields", newJString(fields))
  add(query_581495, "quotaUser", newJString(quotaUser))
  add(query_581495, "alt", newJString(alt))
  add(query_581495, "oauth_token", newJString(oauthToken))
  add(query_581495, "userIp", newJString(userIp))
  add(path_581494, "id", newJString(id))
  add(query_581495, "key", newJString(key))
  add(query_581495, "prettyPrint", newJBool(prettyPrint))
  result = call_581493.call(path_581494, query_581495, nil, nil, nil)

var dfareportingCreativesGet* = Call_DfareportingCreativesGet_581480(
    name: "dfareportingCreativesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives/{id}",
    validator: validate_DfareportingCreativesGet_581481,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativesGet_581482,
    schemes: {Scheme.Https})
type
  Call_DfareportingDimensionValuesQuery_581496 = ref object of OpenApiRestCall_579437
proc url_DfareportingDimensionValuesQuery_581498(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/dimensionvalues/query")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDimensionValuesQuery_581497(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves list of report dimension values for a list of filters.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581499 = path.getOrDefault("profileId")
  valid_581499 = validateParameter(valid_581499, JString, required = true,
                                 default = nil)
  if valid_581499 != nil:
    section.add "profileId", valid_581499
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581500 = query.getOrDefault("fields")
  valid_581500 = validateParameter(valid_581500, JString, required = false,
                                 default = nil)
  if valid_581500 != nil:
    section.add "fields", valid_581500
  var valid_581501 = query.getOrDefault("pageToken")
  valid_581501 = validateParameter(valid_581501, JString, required = false,
                                 default = nil)
  if valid_581501 != nil:
    section.add "pageToken", valid_581501
  var valid_581502 = query.getOrDefault("quotaUser")
  valid_581502 = validateParameter(valid_581502, JString, required = false,
                                 default = nil)
  if valid_581502 != nil:
    section.add "quotaUser", valid_581502
  var valid_581503 = query.getOrDefault("alt")
  valid_581503 = validateParameter(valid_581503, JString, required = false,
                                 default = newJString("json"))
  if valid_581503 != nil:
    section.add "alt", valid_581503
  var valid_581504 = query.getOrDefault("oauth_token")
  valid_581504 = validateParameter(valid_581504, JString, required = false,
                                 default = nil)
  if valid_581504 != nil:
    section.add "oauth_token", valid_581504
  var valid_581505 = query.getOrDefault("userIp")
  valid_581505 = validateParameter(valid_581505, JString, required = false,
                                 default = nil)
  if valid_581505 != nil:
    section.add "userIp", valid_581505
  var valid_581506 = query.getOrDefault("maxResults")
  valid_581506 = validateParameter(valid_581506, JInt, required = false,
                                 default = newJInt(100))
  if valid_581506 != nil:
    section.add "maxResults", valid_581506
  var valid_581507 = query.getOrDefault("key")
  valid_581507 = validateParameter(valid_581507, JString, required = false,
                                 default = nil)
  if valid_581507 != nil:
    section.add "key", valid_581507
  var valid_581508 = query.getOrDefault("prettyPrint")
  valid_581508 = validateParameter(valid_581508, JBool, required = false,
                                 default = newJBool(true))
  if valid_581508 != nil:
    section.add "prettyPrint", valid_581508
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581510: Call_DfareportingDimensionValuesQuery_581496;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves list of report dimension values for a list of filters.
  ## 
  let valid = call_581510.validator(path, query, header, formData, body)
  let scheme = call_581510.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581510.url(scheme.get, call_581510.host, call_581510.base,
                         call_581510.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581510, url, valid)

proc call*(call_581511: Call_DfareportingDimensionValuesQuery_581496;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; maxResults: int = 100; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingDimensionValuesQuery
  ## Retrieves list of report dimension values for a list of filters.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581512 = newJObject()
  var query_581513 = newJObject()
  var body_581514 = newJObject()
  add(path_581512, "profileId", newJString(profileId))
  add(query_581513, "fields", newJString(fields))
  add(query_581513, "pageToken", newJString(pageToken))
  add(query_581513, "quotaUser", newJString(quotaUser))
  add(query_581513, "alt", newJString(alt))
  add(query_581513, "oauth_token", newJString(oauthToken))
  add(query_581513, "userIp", newJString(userIp))
  add(query_581513, "maxResults", newJInt(maxResults))
  add(query_581513, "key", newJString(key))
  if body != nil:
    body_581514 = body
  add(query_581513, "prettyPrint", newJBool(prettyPrint))
  result = call_581511.call(path_581512, query_581513, nil, nil, body_581514)

var dfareportingDimensionValuesQuery* = Call_DfareportingDimensionValuesQuery_581496(
    name: "dfareportingDimensionValuesQuery", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/dimensionvalues/query",
    validator: validate_DfareportingDimensionValuesQuery_581497,
    base: "/dfareporting/v3.2", url: url_DfareportingDimensionValuesQuery_581498,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySiteContactsList_581515 = ref object of OpenApiRestCall_579437
proc url_DfareportingDirectorySiteContactsList_581517(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySiteContacts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySiteContactsList_581516(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of directory site contacts, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581518 = path.getOrDefault("profileId")
  valid_581518 = validateParameter(valid_581518, JString, required = true,
                                 default = nil)
  if valid_581518 != nil:
    section.add "profileId", valid_581518
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "directory site contact*2015" will return objects with names like "directory site contact June 2015", "directory site contact April 2015", or simply "directory site contact 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "directory site contact" will match objects with name "my directory site contact", "directory site contact 2015", or simply "directory site contact".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only directory site contacts with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   directorySiteIds: JArray
  ##                   : Select only directory site contacts with these directory site IDs. This is a required field.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581519 = query.getOrDefault("fields")
  valid_581519 = validateParameter(valid_581519, JString, required = false,
                                 default = nil)
  if valid_581519 != nil:
    section.add "fields", valid_581519
  var valid_581520 = query.getOrDefault("pageToken")
  valid_581520 = validateParameter(valid_581520, JString, required = false,
                                 default = nil)
  if valid_581520 != nil:
    section.add "pageToken", valid_581520
  var valid_581521 = query.getOrDefault("quotaUser")
  valid_581521 = validateParameter(valid_581521, JString, required = false,
                                 default = nil)
  if valid_581521 != nil:
    section.add "quotaUser", valid_581521
  var valid_581522 = query.getOrDefault("sortField")
  valid_581522 = validateParameter(valid_581522, JString, required = false,
                                 default = newJString("ID"))
  if valid_581522 != nil:
    section.add "sortField", valid_581522
  var valid_581523 = query.getOrDefault("alt")
  valid_581523 = validateParameter(valid_581523, JString, required = false,
                                 default = newJString("json"))
  if valid_581523 != nil:
    section.add "alt", valid_581523
  var valid_581524 = query.getOrDefault("searchString")
  valid_581524 = validateParameter(valid_581524, JString, required = false,
                                 default = nil)
  if valid_581524 != nil:
    section.add "searchString", valid_581524
  var valid_581525 = query.getOrDefault("oauth_token")
  valid_581525 = validateParameter(valid_581525, JString, required = false,
                                 default = nil)
  if valid_581525 != nil:
    section.add "oauth_token", valid_581525
  var valid_581526 = query.getOrDefault("userIp")
  valid_581526 = validateParameter(valid_581526, JString, required = false,
                                 default = nil)
  if valid_581526 != nil:
    section.add "userIp", valid_581526
  var valid_581527 = query.getOrDefault("maxResults")
  valid_581527 = validateParameter(valid_581527, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581527 != nil:
    section.add "maxResults", valid_581527
  var valid_581528 = query.getOrDefault("ids")
  valid_581528 = validateParameter(valid_581528, JArray, required = false,
                                 default = nil)
  if valid_581528 != nil:
    section.add "ids", valid_581528
  var valid_581529 = query.getOrDefault("key")
  valid_581529 = validateParameter(valid_581529, JString, required = false,
                                 default = nil)
  if valid_581529 != nil:
    section.add "key", valid_581529
  var valid_581530 = query.getOrDefault("sortOrder")
  valid_581530 = validateParameter(valid_581530, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581530 != nil:
    section.add "sortOrder", valid_581530
  var valid_581531 = query.getOrDefault("directorySiteIds")
  valid_581531 = validateParameter(valid_581531, JArray, required = false,
                                 default = nil)
  if valid_581531 != nil:
    section.add "directorySiteIds", valid_581531
  var valid_581532 = query.getOrDefault("prettyPrint")
  valid_581532 = validateParameter(valid_581532, JBool, required = false,
                                 default = newJBool(true))
  if valid_581532 != nil:
    section.add "prettyPrint", valid_581532
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581533: Call_DfareportingDirectorySiteContactsList_581515;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of directory site contacts, possibly filtered. This method supports paging.
  ## 
  let valid = call_581533.validator(path, query, header, formData, body)
  let scheme = call_581533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581533.url(scheme.get, call_581533.host, call_581533.base,
                         call_581533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581533, url, valid)

proc call*(call_581534: Call_DfareportingDirectorySiteContactsList_581515;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; directorySiteIds: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingDirectorySiteContactsList
  ## Retrieves a list of directory site contacts, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "directory site contact*2015" will return objects with names like "directory site contact June 2015", "directory site contact April 2015", or simply "directory site contact 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "directory site contact" will match objects with name "my directory site contact", "directory site contact 2015", or simply "directory site contact".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only directory site contacts with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   directorySiteIds: JArray
  ##                   : Select only directory site contacts with these directory site IDs. This is a required field.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581535 = newJObject()
  var query_581536 = newJObject()
  add(path_581535, "profileId", newJString(profileId))
  add(query_581536, "fields", newJString(fields))
  add(query_581536, "pageToken", newJString(pageToken))
  add(query_581536, "quotaUser", newJString(quotaUser))
  add(query_581536, "sortField", newJString(sortField))
  add(query_581536, "alt", newJString(alt))
  add(query_581536, "searchString", newJString(searchString))
  add(query_581536, "oauth_token", newJString(oauthToken))
  add(query_581536, "userIp", newJString(userIp))
  add(query_581536, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_581536.add "ids", ids
  add(query_581536, "key", newJString(key))
  add(query_581536, "sortOrder", newJString(sortOrder))
  if directorySiteIds != nil:
    query_581536.add "directorySiteIds", directorySiteIds
  add(query_581536, "prettyPrint", newJBool(prettyPrint))
  result = call_581534.call(path_581535, query_581536, nil, nil, nil)

var dfareportingDirectorySiteContactsList* = Call_DfareportingDirectorySiteContactsList_581515(
    name: "dfareportingDirectorySiteContactsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/directorySiteContacts",
    validator: validate_DfareportingDirectorySiteContactsList_581516,
    base: "/dfareporting/v3.2", url: url_DfareportingDirectorySiteContactsList_581517,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySiteContactsGet_581537 = ref object of OpenApiRestCall_579437
proc url_DfareportingDirectorySiteContactsGet_581539(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySiteContacts/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySiteContactsGet_581538(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one directory site contact by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Directory site contact ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581540 = path.getOrDefault("profileId")
  valid_581540 = validateParameter(valid_581540, JString, required = true,
                                 default = nil)
  if valid_581540 != nil:
    section.add "profileId", valid_581540
  var valid_581541 = path.getOrDefault("id")
  valid_581541 = validateParameter(valid_581541, JString, required = true,
                                 default = nil)
  if valid_581541 != nil:
    section.add "id", valid_581541
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581542 = query.getOrDefault("fields")
  valid_581542 = validateParameter(valid_581542, JString, required = false,
                                 default = nil)
  if valid_581542 != nil:
    section.add "fields", valid_581542
  var valid_581543 = query.getOrDefault("quotaUser")
  valid_581543 = validateParameter(valid_581543, JString, required = false,
                                 default = nil)
  if valid_581543 != nil:
    section.add "quotaUser", valid_581543
  var valid_581544 = query.getOrDefault("alt")
  valid_581544 = validateParameter(valid_581544, JString, required = false,
                                 default = newJString("json"))
  if valid_581544 != nil:
    section.add "alt", valid_581544
  var valid_581545 = query.getOrDefault("oauth_token")
  valid_581545 = validateParameter(valid_581545, JString, required = false,
                                 default = nil)
  if valid_581545 != nil:
    section.add "oauth_token", valid_581545
  var valid_581546 = query.getOrDefault("userIp")
  valid_581546 = validateParameter(valid_581546, JString, required = false,
                                 default = nil)
  if valid_581546 != nil:
    section.add "userIp", valid_581546
  var valid_581547 = query.getOrDefault("key")
  valid_581547 = validateParameter(valid_581547, JString, required = false,
                                 default = nil)
  if valid_581547 != nil:
    section.add "key", valid_581547
  var valid_581548 = query.getOrDefault("prettyPrint")
  valid_581548 = validateParameter(valid_581548, JBool, required = false,
                                 default = newJBool(true))
  if valid_581548 != nil:
    section.add "prettyPrint", valid_581548
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581549: Call_DfareportingDirectorySiteContactsGet_581537;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one directory site contact by ID.
  ## 
  let valid = call_581549.validator(path, query, header, formData, body)
  let scheme = call_581549.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581549.url(scheme.get, call_581549.host, call_581549.base,
                         call_581549.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581549, url, valid)

proc call*(call_581550: Call_DfareportingDirectorySiteContactsGet_581537;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingDirectorySiteContactsGet
  ## Gets one directory site contact by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Directory site contact ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581551 = newJObject()
  var query_581552 = newJObject()
  add(path_581551, "profileId", newJString(profileId))
  add(query_581552, "fields", newJString(fields))
  add(query_581552, "quotaUser", newJString(quotaUser))
  add(query_581552, "alt", newJString(alt))
  add(query_581552, "oauth_token", newJString(oauthToken))
  add(query_581552, "userIp", newJString(userIp))
  add(path_581551, "id", newJString(id))
  add(query_581552, "key", newJString(key))
  add(query_581552, "prettyPrint", newJBool(prettyPrint))
  result = call_581550.call(path_581551, query_581552, nil, nil, nil)

var dfareportingDirectorySiteContactsGet* = Call_DfareportingDirectorySiteContactsGet_581537(
    name: "dfareportingDirectorySiteContactsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/directorySiteContacts/{id}",
    validator: validate_DfareportingDirectorySiteContactsGet_581538,
    base: "/dfareporting/v3.2", url: url_DfareportingDirectorySiteContactsGet_581539,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySitesInsert_581581 = ref object of OpenApiRestCall_579437
proc url_DfareportingDirectorySitesInsert_581583(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySitesInsert_581582(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new directory site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581584 = path.getOrDefault("profileId")
  valid_581584 = validateParameter(valid_581584, JString, required = true,
                                 default = nil)
  if valid_581584 != nil:
    section.add "profileId", valid_581584
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581585 = query.getOrDefault("fields")
  valid_581585 = validateParameter(valid_581585, JString, required = false,
                                 default = nil)
  if valid_581585 != nil:
    section.add "fields", valid_581585
  var valid_581586 = query.getOrDefault("quotaUser")
  valid_581586 = validateParameter(valid_581586, JString, required = false,
                                 default = nil)
  if valid_581586 != nil:
    section.add "quotaUser", valid_581586
  var valid_581587 = query.getOrDefault("alt")
  valid_581587 = validateParameter(valid_581587, JString, required = false,
                                 default = newJString("json"))
  if valid_581587 != nil:
    section.add "alt", valid_581587
  var valid_581588 = query.getOrDefault("oauth_token")
  valid_581588 = validateParameter(valid_581588, JString, required = false,
                                 default = nil)
  if valid_581588 != nil:
    section.add "oauth_token", valid_581588
  var valid_581589 = query.getOrDefault("userIp")
  valid_581589 = validateParameter(valid_581589, JString, required = false,
                                 default = nil)
  if valid_581589 != nil:
    section.add "userIp", valid_581589
  var valid_581590 = query.getOrDefault("key")
  valid_581590 = validateParameter(valid_581590, JString, required = false,
                                 default = nil)
  if valid_581590 != nil:
    section.add "key", valid_581590
  var valid_581591 = query.getOrDefault("prettyPrint")
  valid_581591 = validateParameter(valid_581591, JBool, required = false,
                                 default = newJBool(true))
  if valid_581591 != nil:
    section.add "prettyPrint", valid_581591
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581593: Call_DfareportingDirectorySitesInsert_581581;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new directory site.
  ## 
  let valid = call_581593.validator(path, query, header, formData, body)
  let scheme = call_581593.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581593.url(scheme.get, call_581593.host, call_581593.base,
                         call_581593.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581593, url, valid)

proc call*(call_581594: Call_DfareportingDirectorySitesInsert_581581;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingDirectorySitesInsert
  ## Inserts a new directory site.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581595 = newJObject()
  var query_581596 = newJObject()
  var body_581597 = newJObject()
  add(path_581595, "profileId", newJString(profileId))
  add(query_581596, "fields", newJString(fields))
  add(query_581596, "quotaUser", newJString(quotaUser))
  add(query_581596, "alt", newJString(alt))
  add(query_581596, "oauth_token", newJString(oauthToken))
  add(query_581596, "userIp", newJString(userIp))
  add(query_581596, "key", newJString(key))
  if body != nil:
    body_581597 = body
  add(query_581596, "prettyPrint", newJBool(prettyPrint))
  result = call_581594.call(path_581595, query_581596, nil, nil, body_581597)

var dfareportingDirectorySitesInsert* = Call_DfareportingDirectorySitesInsert_581581(
    name: "dfareportingDirectorySitesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/directorySites",
    validator: validate_DfareportingDirectorySitesInsert_581582,
    base: "/dfareporting/v3.2", url: url_DfareportingDirectorySitesInsert_581583,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySitesList_581553 = ref object of OpenApiRestCall_579437
proc url_DfareportingDirectorySitesList_581555(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySitesList_581554(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of directory sites, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581556 = path.getOrDefault("profileId")
  valid_581556 = validateParameter(valid_581556, JString, required = true,
                                 default = nil)
  if valid_581556 != nil:
    section.add "profileId", valid_581556
  result.add "path", section
  ## parameters in `query` object:
  ##   dfpNetworkCode: JString
  ##                 : Select only directory sites with this Ad Manager network code.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name, ID or URL. Wildcards (*) are allowed. For example, "directory site*2015" will return objects with names like "directory site June 2015", "directory site April 2015", or simply "directory site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "directory site" will match objects with name "my directory site", "directory site 2015" or simply, "directory site".
  ##   countryId: JString
  ##            : Select only directory sites with this country ID.
  ##   active: JBool
  ##         : Select only active directory sites. Leave blank to retrieve both active and inactive directory sites.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only directory sites with these IDs.
  ##   parentId: JString
  ##           : Select only directory sites with this parent ID.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   acceptsInterstitialPlacements: JBool
  ##                                : This search filter is no longer supported and will have no effect on the results returned.
  ##   acceptsInStreamVideoPlacements: JBool
  ##                                 : This search filter is no longer supported and will have no effect on the results returned.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   acceptsPublisherPaidPlacements: JBool
  ##                                 : Select only directory sites that accept publisher paid placements. This field can be left blank.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581557 = query.getOrDefault("dfpNetworkCode")
  valid_581557 = validateParameter(valid_581557, JString, required = false,
                                 default = nil)
  if valid_581557 != nil:
    section.add "dfpNetworkCode", valid_581557
  var valid_581558 = query.getOrDefault("fields")
  valid_581558 = validateParameter(valid_581558, JString, required = false,
                                 default = nil)
  if valid_581558 != nil:
    section.add "fields", valid_581558
  var valid_581559 = query.getOrDefault("pageToken")
  valid_581559 = validateParameter(valid_581559, JString, required = false,
                                 default = nil)
  if valid_581559 != nil:
    section.add "pageToken", valid_581559
  var valid_581560 = query.getOrDefault("quotaUser")
  valid_581560 = validateParameter(valid_581560, JString, required = false,
                                 default = nil)
  if valid_581560 != nil:
    section.add "quotaUser", valid_581560
  var valid_581561 = query.getOrDefault("sortField")
  valid_581561 = validateParameter(valid_581561, JString, required = false,
                                 default = newJString("ID"))
  if valid_581561 != nil:
    section.add "sortField", valid_581561
  var valid_581562 = query.getOrDefault("alt")
  valid_581562 = validateParameter(valid_581562, JString, required = false,
                                 default = newJString("json"))
  if valid_581562 != nil:
    section.add "alt", valid_581562
  var valid_581563 = query.getOrDefault("searchString")
  valid_581563 = validateParameter(valid_581563, JString, required = false,
                                 default = nil)
  if valid_581563 != nil:
    section.add "searchString", valid_581563
  var valid_581564 = query.getOrDefault("countryId")
  valid_581564 = validateParameter(valid_581564, JString, required = false,
                                 default = nil)
  if valid_581564 != nil:
    section.add "countryId", valid_581564
  var valid_581565 = query.getOrDefault("active")
  valid_581565 = validateParameter(valid_581565, JBool, required = false, default = nil)
  if valid_581565 != nil:
    section.add "active", valid_581565
  var valid_581566 = query.getOrDefault("oauth_token")
  valid_581566 = validateParameter(valid_581566, JString, required = false,
                                 default = nil)
  if valid_581566 != nil:
    section.add "oauth_token", valid_581566
  var valid_581567 = query.getOrDefault("userIp")
  valid_581567 = validateParameter(valid_581567, JString, required = false,
                                 default = nil)
  if valid_581567 != nil:
    section.add "userIp", valid_581567
  var valid_581568 = query.getOrDefault("maxResults")
  valid_581568 = validateParameter(valid_581568, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581568 != nil:
    section.add "maxResults", valid_581568
  var valid_581569 = query.getOrDefault("ids")
  valid_581569 = validateParameter(valid_581569, JArray, required = false,
                                 default = nil)
  if valid_581569 != nil:
    section.add "ids", valid_581569
  var valid_581570 = query.getOrDefault("parentId")
  valid_581570 = validateParameter(valid_581570, JString, required = false,
                                 default = nil)
  if valid_581570 != nil:
    section.add "parentId", valid_581570
  var valid_581571 = query.getOrDefault("key")
  valid_581571 = validateParameter(valid_581571, JString, required = false,
                                 default = nil)
  if valid_581571 != nil:
    section.add "key", valid_581571
  var valid_581572 = query.getOrDefault("acceptsInterstitialPlacements")
  valid_581572 = validateParameter(valid_581572, JBool, required = false, default = nil)
  if valid_581572 != nil:
    section.add "acceptsInterstitialPlacements", valid_581572
  var valid_581573 = query.getOrDefault("acceptsInStreamVideoPlacements")
  valid_581573 = validateParameter(valid_581573, JBool, required = false, default = nil)
  if valid_581573 != nil:
    section.add "acceptsInStreamVideoPlacements", valid_581573
  var valid_581574 = query.getOrDefault("sortOrder")
  valid_581574 = validateParameter(valid_581574, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581574 != nil:
    section.add "sortOrder", valid_581574
  var valid_581575 = query.getOrDefault("acceptsPublisherPaidPlacements")
  valid_581575 = validateParameter(valid_581575, JBool, required = false, default = nil)
  if valid_581575 != nil:
    section.add "acceptsPublisherPaidPlacements", valid_581575
  var valid_581576 = query.getOrDefault("prettyPrint")
  valid_581576 = validateParameter(valid_581576, JBool, required = false,
                                 default = newJBool(true))
  if valid_581576 != nil:
    section.add "prettyPrint", valid_581576
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581577: Call_DfareportingDirectorySitesList_581553; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of directory sites, possibly filtered. This method supports paging.
  ## 
  let valid = call_581577.validator(path, query, header, formData, body)
  let scheme = call_581577.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581577.url(scheme.get, call_581577.host, call_581577.base,
                         call_581577.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581577, url, valid)

proc call*(call_581578: Call_DfareportingDirectorySitesList_581553;
          profileId: string; dfpNetworkCode: string = ""; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; sortField: string = "ID";
          alt: string = "json"; searchString: string = ""; countryId: string = "";
          active: bool = false; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; parentId: string = "";
          key: string = ""; acceptsInterstitialPlacements: bool = false;
          acceptsInStreamVideoPlacements: bool = false;
          sortOrder: string = "ASCENDING";
          acceptsPublisherPaidPlacements: bool = false; prettyPrint: bool = true): Recallable =
  ## dfareportingDirectorySitesList
  ## Retrieves a list of directory sites, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   dfpNetworkCode: string
  ##                 : Select only directory sites with this Ad Manager network code.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name, ID or URL. Wildcards (*) are allowed. For example, "directory site*2015" will return objects with names like "directory site June 2015", "directory site April 2015", or simply "directory site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "directory site" will match objects with name "my directory site", "directory site 2015" or simply, "directory site".
  ##   countryId: string
  ##            : Select only directory sites with this country ID.
  ##   active: bool
  ##         : Select only active directory sites. Leave blank to retrieve both active and inactive directory sites.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only directory sites with these IDs.
  ##   parentId: string
  ##           : Select only directory sites with this parent ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   acceptsInterstitialPlacements: bool
  ##                                : This search filter is no longer supported and will have no effect on the results returned.
  ##   acceptsInStreamVideoPlacements: bool
  ##                                 : This search filter is no longer supported and will have no effect on the results returned.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   acceptsPublisherPaidPlacements: bool
  ##                                 : Select only directory sites that accept publisher paid placements. This field can be left blank.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581579 = newJObject()
  var query_581580 = newJObject()
  add(path_581579, "profileId", newJString(profileId))
  add(query_581580, "dfpNetworkCode", newJString(dfpNetworkCode))
  add(query_581580, "fields", newJString(fields))
  add(query_581580, "pageToken", newJString(pageToken))
  add(query_581580, "quotaUser", newJString(quotaUser))
  add(query_581580, "sortField", newJString(sortField))
  add(query_581580, "alt", newJString(alt))
  add(query_581580, "searchString", newJString(searchString))
  add(query_581580, "countryId", newJString(countryId))
  add(query_581580, "active", newJBool(active))
  add(query_581580, "oauth_token", newJString(oauthToken))
  add(query_581580, "userIp", newJString(userIp))
  add(query_581580, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_581580.add "ids", ids
  add(query_581580, "parentId", newJString(parentId))
  add(query_581580, "key", newJString(key))
  add(query_581580, "acceptsInterstitialPlacements",
      newJBool(acceptsInterstitialPlacements))
  add(query_581580, "acceptsInStreamVideoPlacements",
      newJBool(acceptsInStreamVideoPlacements))
  add(query_581580, "sortOrder", newJString(sortOrder))
  add(query_581580, "acceptsPublisherPaidPlacements",
      newJBool(acceptsPublisherPaidPlacements))
  add(query_581580, "prettyPrint", newJBool(prettyPrint))
  result = call_581578.call(path_581579, query_581580, nil, nil, nil)

var dfareportingDirectorySitesList* = Call_DfareportingDirectorySitesList_581553(
    name: "dfareportingDirectorySitesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/directorySites",
    validator: validate_DfareportingDirectorySitesList_581554,
    base: "/dfareporting/v3.2", url: url_DfareportingDirectorySitesList_581555,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySitesGet_581598 = ref object of OpenApiRestCall_579437
proc url_DfareportingDirectorySitesGet_581600(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySites/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySitesGet_581599(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one directory site by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Directory site ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581601 = path.getOrDefault("profileId")
  valid_581601 = validateParameter(valid_581601, JString, required = true,
                                 default = nil)
  if valid_581601 != nil:
    section.add "profileId", valid_581601
  var valid_581602 = path.getOrDefault("id")
  valid_581602 = validateParameter(valid_581602, JString, required = true,
                                 default = nil)
  if valid_581602 != nil:
    section.add "id", valid_581602
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581603 = query.getOrDefault("fields")
  valid_581603 = validateParameter(valid_581603, JString, required = false,
                                 default = nil)
  if valid_581603 != nil:
    section.add "fields", valid_581603
  var valid_581604 = query.getOrDefault("quotaUser")
  valid_581604 = validateParameter(valid_581604, JString, required = false,
                                 default = nil)
  if valid_581604 != nil:
    section.add "quotaUser", valid_581604
  var valid_581605 = query.getOrDefault("alt")
  valid_581605 = validateParameter(valid_581605, JString, required = false,
                                 default = newJString("json"))
  if valid_581605 != nil:
    section.add "alt", valid_581605
  var valid_581606 = query.getOrDefault("oauth_token")
  valid_581606 = validateParameter(valid_581606, JString, required = false,
                                 default = nil)
  if valid_581606 != nil:
    section.add "oauth_token", valid_581606
  var valid_581607 = query.getOrDefault("userIp")
  valid_581607 = validateParameter(valid_581607, JString, required = false,
                                 default = nil)
  if valid_581607 != nil:
    section.add "userIp", valid_581607
  var valid_581608 = query.getOrDefault("key")
  valid_581608 = validateParameter(valid_581608, JString, required = false,
                                 default = nil)
  if valid_581608 != nil:
    section.add "key", valid_581608
  var valid_581609 = query.getOrDefault("prettyPrint")
  valid_581609 = validateParameter(valid_581609, JBool, required = false,
                                 default = newJBool(true))
  if valid_581609 != nil:
    section.add "prettyPrint", valid_581609
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581610: Call_DfareportingDirectorySitesGet_581598; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one directory site by ID.
  ## 
  let valid = call_581610.validator(path, query, header, formData, body)
  let scheme = call_581610.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581610.url(scheme.get, call_581610.host, call_581610.base,
                         call_581610.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581610, url, valid)

proc call*(call_581611: Call_DfareportingDirectorySitesGet_581598;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingDirectorySitesGet
  ## Gets one directory site by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Directory site ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581612 = newJObject()
  var query_581613 = newJObject()
  add(path_581612, "profileId", newJString(profileId))
  add(query_581613, "fields", newJString(fields))
  add(query_581613, "quotaUser", newJString(quotaUser))
  add(query_581613, "alt", newJString(alt))
  add(query_581613, "oauth_token", newJString(oauthToken))
  add(query_581613, "userIp", newJString(userIp))
  add(path_581612, "id", newJString(id))
  add(query_581613, "key", newJString(key))
  add(query_581613, "prettyPrint", newJBool(prettyPrint))
  result = call_581611.call(path_581612, query_581613, nil, nil, nil)

var dfareportingDirectorySitesGet* = Call_DfareportingDirectorySitesGet_581598(
    name: "dfareportingDirectorySitesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/directorySites/{id}",
    validator: validate_DfareportingDirectorySitesGet_581599,
    base: "/dfareporting/v3.2", url: url_DfareportingDirectorySitesGet_581600,
    schemes: {Scheme.Https})
type
  Call_DfareportingDynamicTargetingKeysInsert_581633 = ref object of OpenApiRestCall_579437
proc url_DfareportingDynamicTargetingKeysInsert_581635(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/dynamicTargetingKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDynamicTargetingKeysInsert_581634(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581636 = path.getOrDefault("profileId")
  valid_581636 = validateParameter(valid_581636, JString, required = true,
                                 default = nil)
  if valid_581636 != nil:
    section.add "profileId", valid_581636
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581637 = query.getOrDefault("fields")
  valid_581637 = validateParameter(valid_581637, JString, required = false,
                                 default = nil)
  if valid_581637 != nil:
    section.add "fields", valid_581637
  var valid_581638 = query.getOrDefault("quotaUser")
  valid_581638 = validateParameter(valid_581638, JString, required = false,
                                 default = nil)
  if valid_581638 != nil:
    section.add "quotaUser", valid_581638
  var valid_581639 = query.getOrDefault("alt")
  valid_581639 = validateParameter(valid_581639, JString, required = false,
                                 default = newJString("json"))
  if valid_581639 != nil:
    section.add "alt", valid_581639
  var valid_581640 = query.getOrDefault("oauth_token")
  valid_581640 = validateParameter(valid_581640, JString, required = false,
                                 default = nil)
  if valid_581640 != nil:
    section.add "oauth_token", valid_581640
  var valid_581641 = query.getOrDefault("userIp")
  valid_581641 = validateParameter(valid_581641, JString, required = false,
                                 default = nil)
  if valid_581641 != nil:
    section.add "userIp", valid_581641
  var valid_581642 = query.getOrDefault("key")
  valid_581642 = validateParameter(valid_581642, JString, required = false,
                                 default = nil)
  if valid_581642 != nil:
    section.add "key", valid_581642
  var valid_581643 = query.getOrDefault("prettyPrint")
  valid_581643 = validateParameter(valid_581643, JBool, required = false,
                                 default = newJBool(true))
  if valid_581643 != nil:
    section.add "prettyPrint", valid_581643
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581645: Call_DfareportingDynamicTargetingKeysInsert_581633;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.
  ## 
  let valid = call_581645.validator(path, query, header, formData, body)
  let scheme = call_581645.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581645.url(scheme.get, call_581645.host, call_581645.base,
                         call_581645.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581645, url, valid)

proc call*(call_581646: Call_DfareportingDynamicTargetingKeysInsert_581633;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingDynamicTargetingKeysInsert
  ## Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581647 = newJObject()
  var query_581648 = newJObject()
  var body_581649 = newJObject()
  add(path_581647, "profileId", newJString(profileId))
  add(query_581648, "fields", newJString(fields))
  add(query_581648, "quotaUser", newJString(quotaUser))
  add(query_581648, "alt", newJString(alt))
  add(query_581648, "oauth_token", newJString(oauthToken))
  add(query_581648, "userIp", newJString(userIp))
  add(query_581648, "key", newJString(key))
  if body != nil:
    body_581649 = body
  add(query_581648, "prettyPrint", newJBool(prettyPrint))
  result = call_581646.call(path_581647, query_581648, nil, nil, body_581649)

var dfareportingDynamicTargetingKeysInsert* = Call_DfareportingDynamicTargetingKeysInsert_581633(
    name: "dfareportingDynamicTargetingKeysInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/dynamicTargetingKeys",
    validator: validate_DfareportingDynamicTargetingKeysInsert_581634,
    base: "/dfareporting/v3.2", url: url_DfareportingDynamicTargetingKeysInsert_581635,
    schemes: {Scheme.Https})
type
  Call_DfareportingDynamicTargetingKeysList_581614 = ref object of OpenApiRestCall_579437
proc url_DfareportingDynamicTargetingKeysList_581616(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/dynamicTargetingKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDynamicTargetingKeysList_581615(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of dynamic targeting keys.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581617 = path.getOrDefault("profileId")
  valid_581617 = validateParameter(valid_581617, JString, required = true,
                                 default = nil)
  if valid_581617 != nil:
    section.add "profileId", valid_581617
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   advertiserId: JString
  ##               : Select only dynamic targeting keys whose object has this advertiser ID.
  ##   names: JArray
  ##        : Select only dynamic targeting keys exactly matching these names.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   objectId: JString
  ##           : Select only dynamic targeting keys with this object ID.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   objectType: JString
  ##             : Select only dynamic targeting keys with this object type.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581618 = query.getOrDefault("fields")
  valid_581618 = validateParameter(valid_581618, JString, required = false,
                                 default = nil)
  if valid_581618 != nil:
    section.add "fields", valid_581618
  var valid_581619 = query.getOrDefault("quotaUser")
  valid_581619 = validateParameter(valid_581619, JString, required = false,
                                 default = nil)
  if valid_581619 != nil:
    section.add "quotaUser", valid_581619
  var valid_581620 = query.getOrDefault("alt")
  valid_581620 = validateParameter(valid_581620, JString, required = false,
                                 default = newJString("json"))
  if valid_581620 != nil:
    section.add "alt", valid_581620
  var valid_581621 = query.getOrDefault("advertiserId")
  valid_581621 = validateParameter(valid_581621, JString, required = false,
                                 default = nil)
  if valid_581621 != nil:
    section.add "advertiserId", valid_581621
  var valid_581622 = query.getOrDefault("names")
  valid_581622 = validateParameter(valid_581622, JArray, required = false,
                                 default = nil)
  if valid_581622 != nil:
    section.add "names", valid_581622
  var valid_581623 = query.getOrDefault("oauth_token")
  valid_581623 = validateParameter(valid_581623, JString, required = false,
                                 default = nil)
  if valid_581623 != nil:
    section.add "oauth_token", valid_581623
  var valid_581624 = query.getOrDefault("objectId")
  valid_581624 = validateParameter(valid_581624, JString, required = false,
                                 default = nil)
  if valid_581624 != nil:
    section.add "objectId", valid_581624
  var valid_581625 = query.getOrDefault("userIp")
  valid_581625 = validateParameter(valid_581625, JString, required = false,
                                 default = nil)
  if valid_581625 != nil:
    section.add "userIp", valid_581625
  var valid_581626 = query.getOrDefault("objectType")
  valid_581626 = validateParameter(valid_581626, JString, required = false,
                                 default = newJString("OBJECT_AD"))
  if valid_581626 != nil:
    section.add "objectType", valid_581626
  var valid_581627 = query.getOrDefault("key")
  valid_581627 = validateParameter(valid_581627, JString, required = false,
                                 default = nil)
  if valid_581627 != nil:
    section.add "key", valid_581627
  var valid_581628 = query.getOrDefault("prettyPrint")
  valid_581628 = validateParameter(valid_581628, JBool, required = false,
                                 default = newJBool(true))
  if valid_581628 != nil:
    section.add "prettyPrint", valid_581628
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581629: Call_DfareportingDynamicTargetingKeysList_581614;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of dynamic targeting keys.
  ## 
  let valid = call_581629.validator(path, query, header, formData, body)
  let scheme = call_581629.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581629.url(scheme.get, call_581629.host, call_581629.base,
                         call_581629.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581629, url, valid)

proc call*(call_581630: Call_DfareportingDynamicTargetingKeysList_581614;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; advertiserId: string = ""; names: JsonNode = nil;
          oauthToken: string = ""; objectId: string = ""; userIp: string = "";
          objectType: string = "OBJECT_AD"; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingDynamicTargetingKeysList
  ## Retrieves a list of dynamic targeting keys.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   advertiserId: string
  ##               : Select only dynamic targeting keys whose object has this advertiser ID.
  ##   names: JArray
  ##        : Select only dynamic targeting keys exactly matching these names.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   objectId: string
  ##           : Select only dynamic targeting keys with this object ID.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   objectType: string
  ##             : Select only dynamic targeting keys with this object type.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581631 = newJObject()
  var query_581632 = newJObject()
  add(path_581631, "profileId", newJString(profileId))
  add(query_581632, "fields", newJString(fields))
  add(query_581632, "quotaUser", newJString(quotaUser))
  add(query_581632, "alt", newJString(alt))
  add(query_581632, "advertiserId", newJString(advertiserId))
  if names != nil:
    query_581632.add "names", names
  add(query_581632, "oauth_token", newJString(oauthToken))
  add(query_581632, "objectId", newJString(objectId))
  add(query_581632, "userIp", newJString(userIp))
  add(query_581632, "objectType", newJString(objectType))
  add(query_581632, "key", newJString(key))
  add(query_581632, "prettyPrint", newJBool(prettyPrint))
  result = call_581630.call(path_581631, query_581632, nil, nil, nil)

var dfareportingDynamicTargetingKeysList* = Call_DfareportingDynamicTargetingKeysList_581614(
    name: "dfareportingDynamicTargetingKeysList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/dynamicTargetingKeys",
    validator: validate_DfareportingDynamicTargetingKeysList_581615,
    base: "/dfareporting/v3.2", url: url_DfareportingDynamicTargetingKeysList_581616,
    schemes: {Scheme.Https})
type
  Call_DfareportingDynamicTargetingKeysDelete_581650 = ref object of OpenApiRestCall_579437
proc url_DfareportingDynamicTargetingKeysDelete_581652(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "objectId" in path, "`objectId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/dynamicTargetingKeys/"),
               (kind: VariableSegment, value: "objectId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDynamicTargetingKeysDelete_581651(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing dynamic targeting key.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   objectId: JString (required)
  ##           : ID of the object of this dynamic targeting key. This is a required field.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581653 = path.getOrDefault("profileId")
  valid_581653 = validateParameter(valid_581653, JString, required = true,
                                 default = nil)
  if valid_581653 != nil:
    section.add "profileId", valid_581653
  var valid_581654 = path.getOrDefault("objectId")
  valid_581654 = validateParameter(valid_581654, JString, required = true,
                                 default = nil)
  if valid_581654 != nil:
    section.add "objectId", valid_581654
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   objectType: JString (required)
  ##             : Type of the object of this dynamic targeting key. This is a required field.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   name: JString (required)
  ##       : Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long and cannot contain commas. All characters are converted to lowercase.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581655 = query.getOrDefault("fields")
  valid_581655 = validateParameter(valid_581655, JString, required = false,
                                 default = nil)
  if valid_581655 != nil:
    section.add "fields", valid_581655
  var valid_581656 = query.getOrDefault("quotaUser")
  valid_581656 = validateParameter(valid_581656, JString, required = false,
                                 default = nil)
  if valid_581656 != nil:
    section.add "quotaUser", valid_581656
  var valid_581657 = query.getOrDefault("alt")
  valid_581657 = validateParameter(valid_581657, JString, required = false,
                                 default = newJString("json"))
  if valid_581657 != nil:
    section.add "alt", valid_581657
  var valid_581658 = query.getOrDefault("oauth_token")
  valid_581658 = validateParameter(valid_581658, JString, required = false,
                                 default = nil)
  if valid_581658 != nil:
    section.add "oauth_token", valid_581658
  var valid_581659 = query.getOrDefault("userIp")
  valid_581659 = validateParameter(valid_581659, JString, required = false,
                                 default = nil)
  if valid_581659 != nil:
    section.add "userIp", valid_581659
  assert query != nil,
        "query argument is necessary due to required `objectType` field"
  var valid_581660 = query.getOrDefault("objectType")
  valid_581660 = validateParameter(valid_581660, JString, required = true,
                                 default = newJString("OBJECT_AD"))
  if valid_581660 != nil:
    section.add "objectType", valid_581660
  var valid_581661 = query.getOrDefault("key")
  valid_581661 = validateParameter(valid_581661, JString, required = false,
                                 default = nil)
  if valid_581661 != nil:
    section.add "key", valid_581661
  var valid_581662 = query.getOrDefault("name")
  valid_581662 = validateParameter(valid_581662, JString, required = true,
                                 default = nil)
  if valid_581662 != nil:
    section.add "name", valid_581662
  var valid_581663 = query.getOrDefault("prettyPrint")
  valid_581663 = validateParameter(valid_581663, JBool, required = false,
                                 default = newJBool(true))
  if valid_581663 != nil:
    section.add "prettyPrint", valid_581663
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581664: Call_DfareportingDynamicTargetingKeysDelete_581650;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing dynamic targeting key.
  ## 
  let valid = call_581664.validator(path, query, header, formData, body)
  let scheme = call_581664.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581664.url(scheme.get, call_581664.host, call_581664.base,
                         call_581664.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581664, url, valid)

proc call*(call_581665: Call_DfareportingDynamicTargetingKeysDelete_581650;
          profileId: string; objectId: string; name: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; objectType: string = "OBJECT_AD"; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingDynamicTargetingKeysDelete
  ## Deletes an existing dynamic targeting key.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   objectId: string (required)
  ##           : ID of the object of this dynamic targeting key. This is a required field.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   objectType: string (required)
  ##             : Type of the object of this dynamic targeting key. This is a required field.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   name: string (required)
  ##       : Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long and cannot contain commas. All characters are converted to lowercase.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581666 = newJObject()
  var query_581667 = newJObject()
  add(path_581666, "profileId", newJString(profileId))
  add(query_581667, "fields", newJString(fields))
  add(query_581667, "quotaUser", newJString(quotaUser))
  add(query_581667, "alt", newJString(alt))
  add(path_581666, "objectId", newJString(objectId))
  add(query_581667, "oauth_token", newJString(oauthToken))
  add(query_581667, "userIp", newJString(userIp))
  add(query_581667, "objectType", newJString(objectType))
  add(query_581667, "key", newJString(key))
  add(query_581667, "name", newJString(name))
  add(query_581667, "prettyPrint", newJBool(prettyPrint))
  result = call_581665.call(path_581666, query_581667, nil, nil, nil)

var dfareportingDynamicTargetingKeysDelete* = Call_DfareportingDynamicTargetingKeysDelete_581650(
    name: "dfareportingDynamicTargetingKeysDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/dynamicTargetingKeys/{objectId}",
    validator: validate_DfareportingDynamicTargetingKeysDelete_581651,
    base: "/dfareporting/v3.2", url: url_DfareportingDynamicTargetingKeysDelete_581652,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsUpdate_581693 = ref object of OpenApiRestCall_579437
proc url_DfareportingEventTagsUpdate_581695(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsUpdate_581694(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing event tag.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581696 = path.getOrDefault("profileId")
  valid_581696 = validateParameter(valid_581696, JString, required = true,
                                 default = nil)
  if valid_581696 != nil:
    section.add "profileId", valid_581696
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581697 = query.getOrDefault("fields")
  valid_581697 = validateParameter(valid_581697, JString, required = false,
                                 default = nil)
  if valid_581697 != nil:
    section.add "fields", valid_581697
  var valid_581698 = query.getOrDefault("quotaUser")
  valid_581698 = validateParameter(valid_581698, JString, required = false,
                                 default = nil)
  if valid_581698 != nil:
    section.add "quotaUser", valid_581698
  var valid_581699 = query.getOrDefault("alt")
  valid_581699 = validateParameter(valid_581699, JString, required = false,
                                 default = newJString("json"))
  if valid_581699 != nil:
    section.add "alt", valid_581699
  var valid_581700 = query.getOrDefault("oauth_token")
  valid_581700 = validateParameter(valid_581700, JString, required = false,
                                 default = nil)
  if valid_581700 != nil:
    section.add "oauth_token", valid_581700
  var valid_581701 = query.getOrDefault("userIp")
  valid_581701 = validateParameter(valid_581701, JString, required = false,
                                 default = nil)
  if valid_581701 != nil:
    section.add "userIp", valid_581701
  var valid_581702 = query.getOrDefault("key")
  valid_581702 = validateParameter(valid_581702, JString, required = false,
                                 default = nil)
  if valid_581702 != nil:
    section.add "key", valid_581702
  var valid_581703 = query.getOrDefault("prettyPrint")
  valid_581703 = validateParameter(valid_581703, JBool, required = false,
                                 default = newJBool(true))
  if valid_581703 != nil:
    section.add "prettyPrint", valid_581703
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581705: Call_DfareportingEventTagsUpdate_581693; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing event tag.
  ## 
  let valid = call_581705.validator(path, query, header, formData, body)
  let scheme = call_581705.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581705.url(scheme.get, call_581705.host, call_581705.base,
                         call_581705.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581705, url, valid)

proc call*(call_581706: Call_DfareportingEventTagsUpdate_581693; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingEventTagsUpdate
  ## Updates an existing event tag.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581707 = newJObject()
  var query_581708 = newJObject()
  var body_581709 = newJObject()
  add(path_581707, "profileId", newJString(profileId))
  add(query_581708, "fields", newJString(fields))
  add(query_581708, "quotaUser", newJString(quotaUser))
  add(query_581708, "alt", newJString(alt))
  add(query_581708, "oauth_token", newJString(oauthToken))
  add(query_581708, "userIp", newJString(userIp))
  add(query_581708, "key", newJString(key))
  if body != nil:
    body_581709 = body
  add(query_581708, "prettyPrint", newJBool(prettyPrint))
  result = call_581706.call(path_581707, query_581708, nil, nil, body_581709)

var dfareportingEventTagsUpdate* = Call_DfareportingEventTagsUpdate_581693(
    name: "dfareportingEventTagsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags",
    validator: validate_DfareportingEventTagsUpdate_581694,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsUpdate_581695,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsInsert_581710 = ref object of OpenApiRestCall_579437
proc url_DfareportingEventTagsInsert_581712(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsInsert_581711(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new event tag.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581713 = path.getOrDefault("profileId")
  valid_581713 = validateParameter(valid_581713, JString, required = true,
                                 default = nil)
  if valid_581713 != nil:
    section.add "profileId", valid_581713
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581714 = query.getOrDefault("fields")
  valid_581714 = validateParameter(valid_581714, JString, required = false,
                                 default = nil)
  if valid_581714 != nil:
    section.add "fields", valid_581714
  var valid_581715 = query.getOrDefault("quotaUser")
  valid_581715 = validateParameter(valid_581715, JString, required = false,
                                 default = nil)
  if valid_581715 != nil:
    section.add "quotaUser", valid_581715
  var valid_581716 = query.getOrDefault("alt")
  valid_581716 = validateParameter(valid_581716, JString, required = false,
                                 default = newJString("json"))
  if valid_581716 != nil:
    section.add "alt", valid_581716
  var valid_581717 = query.getOrDefault("oauth_token")
  valid_581717 = validateParameter(valid_581717, JString, required = false,
                                 default = nil)
  if valid_581717 != nil:
    section.add "oauth_token", valid_581717
  var valid_581718 = query.getOrDefault("userIp")
  valid_581718 = validateParameter(valid_581718, JString, required = false,
                                 default = nil)
  if valid_581718 != nil:
    section.add "userIp", valid_581718
  var valid_581719 = query.getOrDefault("key")
  valid_581719 = validateParameter(valid_581719, JString, required = false,
                                 default = nil)
  if valid_581719 != nil:
    section.add "key", valid_581719
  var valid_581720 = query.getOrDefault("prettyPrint")
  valid_581720 = validateParameter(valid_581720, JBool, required = false,
                                 default = newJBool(true))
  if valid_581720 != nil:
    section.add "prettyPrint", valid_581720
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581722: Call_DfareportingEventTagsInsert_581710; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new event tag.
  ## 
  let valid = call_581722.validator(path, query, header, formData, body)
  let scheme = call_581722.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581722.url(scheme.get, call_581722.host, call_581722.base,
                         call_581722.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581722, url, valid)

proc call*(call_581723: Call_DfareportingEventTagsInsert_581710; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingEventTagsInsert
  ## Inserts a new event tag.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581724 = newJObject()
  var query_581725 = newJObject()
  var body_581726 = newJObject()
  add(path_581724, "profileId", newJString(profileId))
  add(query_581725, "fields", newJString(fields))
  add(query_581725, "quotaUser", newJString(quotaUser))
  add(query_581725, "alt", newJString(alt))
  add(query_581725, "oauth_token", newJString(oauthToken))
  add(query_581725, "userIp", newJString(userIp))
  add(query_581725, "key", newJString(key))
  if body != nil:
    body_581726 = body
  add(query_581725, "prettyPrint", newJBool(prettyPrint))
  result = call_581723.call(path_581724, query_581725, nil, nil, body_581726)

var dfareportingEventTagsInsert* = Call_DfareportingEventTagsInsert_581710(
    name: "dfareportingEventTagsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags",
    validator: validate_DfareportingEventTagsInsert_581711,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsInsert_581712,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsList_581668 = ref object of OpenApiRestCall_579437
proc url_DfareportingEventTagsList_581670(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsList_581669(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of event tags, possibly filtered.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581671 = path.getOrDefault("profileId")
  valid_581671 = validateParameter(valid_581671, JString, required = true,
                                 default = nil)
  if valid_581671 != nil:
    section.add "profileId", valid_581671
  result.add "path", section
  ## parameters in `query` object:
  ##   enabled: JBool
  ##          : Select only enabled event tags. What is considered enabled or disabled depends on the definitionsOnly parameter. When definitionsOnly is set to true, only the specified advertiser or campaign's event tags' enabledByDefault field is examined. When definitionsOnly is set to false, the specified ad or specified campaign's parent advertiser's or parent campaign's event tags' enabledByDefault and status fields are examined as well.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   definitionsOnly: JBool
  ##                  : Examine only the specified campaign or advertiser's event tags for matching selector criteria. When set to false, the parent advertiser and parent campaign of the specified ad or campaign is examined as well. In addition, when set to false, the status field is examined as well, along with the enabledByDefault field. This parameter can not be set to true when adId is specified as ads do not define their own even tags.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "eventtag*2015" will return objects with names like "eventtag June 2015", "eventtag April 2015", or simply "eventtag 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "eventtag" will match objects with name "my eventtag", "eventtag 2015", or simply "eventtag".
  ##   advertiserId: JString
  ##               : Select only event tags that belong to this advertiser.
  ##   eventTagTypes: JArray
  ##                : Select only event tags with the specified event tag types. Event tag types can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   adId: JString
  ##       : Select only event tags that belong to this ad.
  ##   ids: JArray
  ##      : Select only event tags with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   campaignId: JString
  ##             : Select only event tags that belong to this campaign.
  section = newJObject()
  var valid_581672 = query.getOrDefault("enabled")
  valid_581672 = validateParameter(valid_581672, JBool, required = false, default = nil)
  if valid_581672 != nil:
    section.add "enabled", valid_581672
  var valid_581673 = query.getOrDefault("fields")
  valid_581673 = validateParameter(valid_581673, JString, required = false,
                                 default = nil)
  if valid_581673 != nil:
    section.add "fields", valid_581673
  var valid_581674 = query.getOrDefault("quotaUser")
  valid_581674 = validateParameter(valid_581674, JString, required = false,
                                 default = nil)
  if valid_581674 != nil:
    section.add "quotaUser", valid_581674
  var valid_581675 = query.getOrDefault("sortField")
  valid_581675 = validateParameter(valid_581675, JString, required = false,
                                 default = newJString("ID"))
  if valid_581675 != nil:
    section.add "sortField", valid_581675
  var valid_581676 = query.getOrDefault("alt")
  valid_581676 = validateParameter(valid_581676, JString, required = false,
                                 default = newJString("json"))
  if valid_581676 != nil:
    section.add "alt", valid_581676
  var valid_581677 = query.getOrDefault("definitionsOnly")
  valid_581677 = validateParameter(valid_581677, JBool, required = false, default = nil)
  if valid_581677 != nil:
    section.add "definitionsOnly", valid_581677
  var valid_581678 = query.getOrDefault("searchString")
  valid_581678 = validateParameter(valid_581678, JString, required = false,
                                 default = nil)
  if valid_581678 != nil:
    section.add "searchString", valid_581678
  var valid_581679 = query.getOrDefault("advertiserId")
  valid_581679 = validateParameter(valid_581679, JString, required = false,
                                 default = nil)
  if valid_581679 != nil:
    section.add "advertiserId", valid_581679
  var valid_581680 = query.getOrDefault("eventTagTypes")
  valid_581680 = validateParameter(valid_581680, JArray, required = false,
                                 default = nil)
  if valid_581680 != nil:
    section.add "eventTagTypes", valid_581680
  var valid_581681 = query.getOrDefault("oauth_token")
  valid_581681 = validateParameter(valid_581681, JString, required = false,
                                 default = nil)
  if valid_581681 != nil:
    section.add "oauth_token", valid_581681
  var valid_581682 = query.getOrDefault("userIp")
  valid_581682 = validateParameter(valid_581682, JString, required = false,
                                 default = nil)
  if valid_581682 != nil:
    section.add "userIp", valid_581682
  var valid_581683 = query.getOrDefault("adId")
  valid_581683 = validateParameter(valid_581683, JString, required = false,
                                 default = nil)
  if valid_581683 != nil:
    section.add "adId", valid_581683
  var valid_581684 = query.getOrDefault("ids")
  valid_581684 = validateParameter(valid_581684, JArray, required = false,
                                 default = nil)
  if valid_581684 != nil:
    section.add "ids", valid_581684
  var valid_581685 = query.getOrDefault("key")
  valid_581685 = validateParameter(valid_581685, JString, required = false,
                                 default = nil)
  if valid_581685 != nil:
    section.add "key", valid_581685
  var valid_581686 = query.getOrDefault("sortOrder")
  valid_581686 = validateParameter(valid_581686, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581686 != nil:
    section.add "sortOrder", valid_581686
  var valid_581687 = query.getOrDefault("prettyPrint")
  valid_581687 = validateParameter(valid_581687, JBool, required = false,
                                 default = newJBool(true))
  if valid_581687 != nil:
    section.add "prettyPrint", valid_581687
  var valid_581688 = query.getOrDefault("campaignId")
  valid_581688 = validateParameter(valid_581688, JString, required = false,
                                 default = nil)
  if valid_581688 != nil:
    section.add "campaignId", valid_581688
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581689: Call_DfareportingEventTagsList_581668; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of event tags, possibly filtered.
  ## 
  let valid = call_581689.validator(path, query, header, formData, body)
  let scheme = call_581689.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581689.url(scheme.get, call_581689.host, call_581689.base,
                         call_581689.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581689, url, valid)

proc call*(call_581690: Call_DfareportingEventTagsList_581668; profileId: string;
          enabled: bool = false; fields: string = ""; quotaUser: string = "";
          sortField: string = "ID"; alt: string = "json"; definitionsOnly: bool = false;
          searchString: string = ""; advertiserId: string = "";
          eventTagTypes: JsonNode = nil; oauthToken: string = ""; userIp: string = "";
          adId: string = ""; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true;
          campaignId: string = ""): Recallable =
  ## dfareportingEventTagsList
  ## Retrieves a list of event tags, possibly filtered.
  ##   enabled: bool
  ##          : Select only enabled event tags. What is considered enabled or disabled depends on the definitionsOnly parameter. When definitionsOnly is set to true, only the specified advertiser or campaign's event tags' enabledByDefault field is examined. When definitionsOnly is set to false, the specified ad or specified campaign's parent advertiser's or parent campaign's event tags' enabledByDefault and status fields are examined as well.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   definitionsOnly: bool
  ##                  : Examine only the specified campaign or advertiser's event tags for matching selector criteria. When set to false, the parent advertiser and parent campaign of the specified ad or campaign is examined as well. In addition, when set to false, the status field is examined as well, along with the enabledByDefault field. This parameter can not be set to true when adId is specified as ads do not define their own even tags.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "eventtag*2015" will return objects with names like "eventtag June 2015", "eventtag April 2015", or simply "eventtag 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "eventtag" will match objects with name "my eventtag", "eventtag 2015", or simply "eventtag".
  ##   advertiserId: string
  ##               : Select only event tags that belong to this advertiser.
  ##   eventTagTypes: JArray
  ##                : Select only event tags with the specified event tag types. Event tag types can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   adId: string
  ##       : Select only event tags that belong to this ad.
  ##   ids: JArray
  ##      : Select only event tags with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   campaignId: string
  ##             : Select only event tags that belong to this campaign.
  var path_581691 = newJObject()
  var query_581692 = newJObject()
  add(query_581692, "enabled", newJBool(enabled))
  add(path_581691, "profileId", newJString(profileId))
  add(query_581692, "fields", newJString(fields))
  add(query_581692, "quotaUser", newJString(quotaUser))
  add(query_581692, "sortField", newJString(sortField))
  add(query_581692, "alt", newJString(alt))
  add(query_581692, "definitionsOnly", newJBool(definitionsOnly))
  add(query_581692, "searchString", newJString(searchString))
  add(query_581692, "advertiserId", newJString(advertiserId))
  if eventTagTypes != nil:
    query_581692.add "eventTagTypes", eventTagTypes
  add(query_581692, "oauth_token", newJString(oauthToken))
  add(query_581692, "userIp", newJString(userIp))
  add(query_581692, "adId", newJString(adId))
  if ids != nil:
    query_581692.add "ids", ids
  add(query_581692, "key", newJString(key))
  add(query_581692, "sortOrder", newJString(sortOrder))
  add(query_581692, "prettyPrint", newJBool(prettyPrint))
  add(query_581692, "campaignId", newJString(campaignId))
  result = call_581690.call(path_581691, query_581692, nil, nil, nil)

var dfareportingEventTagsList* = Call_DfareportingEventTagsList_581668(
    name: "dfareportingEventTagsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags",
    validator: validate_DfareportingEventTagsList_581669,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsList_581670,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsPatch_581727 = ref object of OpenApiRestCall_579437
proc url_DfareportingEventTagsPatch_581729(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsPatch_581728(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing event tag. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581730 = path.getOrDefault("profileId")
  valid_581730 = validateParameter(valid_581730, JString, required = true,
                                 default = nil)
  if valid_581730 != nil:
    section.add "profileId", valid_581730
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Event tag ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581731 = query.getOrDefault("fields")
  valid_581731 = validateParameter(valid_581731, JString, required = false,
                                 default = nil)
  if valid_581731 != nil:
    section.add "fields", valid_581731
  var valid_581732 = query.getOrDefault("quotaUser")
  valid_581732 = validateParameter(valid_581732, JString, required = false,
                                 default = nil)
  if valid_581732 != nil:
    section.add "quotaUser", valid_581732
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_581733 = query.getOrDefault("id")
  valid_581733 = validateParameter(valid_581733, JString, required = true,
                                 default = nil)
  if valid_581733 != nil:
    section.add "id", valid_581733
  var valid_581734 = query.getOrDefault("alt")
  valid_581734 = validateParameter(valid_581734, JString, required = false,
                                 default = newJString("json"))
  if valid_581734 != nil:
    section.add "alt", valid_581734
  var valid_581735 = query.getOrDefault("oauth_token")
  valid_581735 = validateParameter(valid_581735, JString, required = false,
                                 default = nil)
  if valid_581735 != nil:
    section.add "oauth_token", valid_581735
  var valid_581736 = query.getOrDefault("userIp")
  valid_581736 = validateParameter(valid_581736, JString, required = false,
                                 default = nil)
  if valid_581736 != nil:
    section.add "userIp", valid_581736
  var valid_581737 = query.getOrDefault("key")
  valid_581737 = validateParameter(valid_581737, JString, required = false,
                                 default = nil)
  if valid_581737 != nil:
    section.add "key", valid_581737
  var valid_581738 = query.getOrDefault("prettyPrint")
  valid_581738 = validateParameter(valid_581738, JBool, required = false,
                                 default = newJBool(true))
  if valid_581738 != nil:
    section.add "prettyPrint", valid_581738
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581740: Call_DfareportingEventTagsPatch_581727; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing event tag. This method supports patch semantics.
  ## 
  let valid = call_581740.validator(path, query, header, formData, body)
  let scheme = call_581740.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581740.url(scheme.get, call_581740.host, call_581740.base,
                         call_581740.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581740, url, valid)

proc call*(call_581741: Call_DfareportingEventTagsPatch_581727; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingEventTagsPatch
  ## Updates an existing event tag. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Event tag ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581742 = newJObject()
  var query_581743 = newJObject()
  var body_581744 = newJObject()
  add(path_581742, "profileId", newJString(profileId))
  add(query_581743, "fields", newJString(fields))
  add(query_581743, "quotaUser", newJString(quotaUser))
  add(query_581743, "id", newJString(id))
  add(query_581743, "alt", newJString(alt))
  add(query_581743, "oauth_token", newJString(oauthToken))
  add(query_581743, "userIp", newJString(userIp))
  add(query_581743, "key", newJString(key))
  if body != nil:
    body_581744 = body
  add(query_581743, "prettyPrint", newJBool(prettyPrint))
  result = call_581741.call(path_581742, query_581743, nil, nil, body_581744)

var dfareportingEventTagsPatch* = Call_DfareportingEventTagsPatch_581727(
    name: "dfareportingEventTagsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags",
    validator: validate_DfareportingEventTagsPatch_581728,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsPatch_581729,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsGet_581745 = ref object of OpenApiRestCall_579437
proc url_DfareportingEventTagsGet_581747(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsGet_581746(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one event tag by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Event tag ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581748 = path.getOrDefault("profileId")
  valid_581748 = validateParameter(valid_581748, JString, required = true,
                                 default = nil)
  if valid_581748 != nil:
    section.add "profileId", valid_581748
  var valid_581749 = path.getOrDefault("id")
  valid_581749 = validateParameter(valid_581749, JString, required = true,
                                 default = nil)
  if valid_581749 != nil:
    section.add "id", valid_581749
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581750 = query.getOrDefault("fields")
  valid_581750 = validateParameter(valid_581750, JString, required = false,
                                 default = nil)
  if valid_581750 != nil:
    section.add "fields", valid_581750
  var valid_581751 = query.getOrDefault("quotaUser")
  valid_581751 = validateParameter(valid_581751, JString, required = false,
                                 default = nil)
  if valid_581751 != nil:
    section.add "quotaUser", valid_581751
  var valid_581752 = query.getOrDefault("alt")
  valid_581752 = validateParameter(valid_581752, JString, required = false,
                                 default = newJString("json"))
  if valid_581752 != nil:
    section.add "alt", valid_581752
  var valid_581753 = query.getOrDefault("oauth_token")
  valid_581753 = validateParameter(valid_581753, JString, required = false,
                                 default = nil)
  if valid_581753 != nil:
    section.add "oauth_token", valid_581753
  var valid_581754 = query.getOrDefault("userIp")
  valid_581754 = validateParameter(valid_581754, JString, required = false,
                                 default = nil)
  if valid_581754 != nil:
    section.add "userIp", valid_581754
  var valid_581755 = query.getOrDefault("key")
  valid_581755 = validateParameter(valid_581755, JString, required = false,
                                 default = nil)
  if valid_581755 != nil:
    section.add "key", valid_581755
  var valid_581756 = query.getOrDefault("prettyPrint")
  valid_581756 = validateParameter(valid_581756, JBool, required = false,
                                 default = newJBool(true))
  if valid_581756 != nil:
    section.add "prettyPrint", valid_581756
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581757: Call_DfareportingEventTagsGet_581745; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one event tag by ID.
  ## 
  let valid = call_581757.validator(path, query, header, formData, body)
  let scheme = call_581757.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581757.url(scheme.get, call_581757.host, call_581757.base,
                         call_581757.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581757, url, valid)

proc call*(call_581758: Call_DfareportingEventTagsGet_581745; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingEventTagsGet
  ## Gets one event tag by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Event tag ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581759 = newJObject()
  var query_581760 = newJObject()
  add(path_581759, "profileId", newJString(profileId))
  add(query_581760, "fields", newJString(fields))
  add(query_581760, "quotaUser", newJString(quotaUser))
  add(query_581760, "alt", newJString(alt))
  add(query_581760, "oauth_token", newJString(oauthToken))
  add(query_581760, "userIp", newJString(userIp))
  add(path_581759, "id", newJString(id))
  add(query_581760, "key", newJString(key))
  add(query_581760, "prettyPrint", newJBool(prettyPrint))
  result = call_581758.call(path_581759, query_581760, nil, nil, nil)

var dfareportingEventTagsGet* = Call_DfareportingEventTagsGet_581745(
    name: "dfareportingEventTagsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags/{id}",
    validator: validate_DfareportingEventTagsGet_581746,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsGet_581747,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsDelete_581761 = ref object of OpenApiRestCall_579437
proc url_DfareportingEventTagsDelete_581763(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsDelete_581762(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing event tag.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Event tag ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581764 = path.getOrDefault("profileId")
  valid_581764 = validateParameter(valid_581764, JString, required = true,
                                 default = nil)
  if valid_581764 != nil:
    section.add "profileId", valid_581764
  var valid_581765 = path.getOrDefault("id")
  valid_581765 = validateParameter(valid_581765, JString, required = true,
                                 default = nil)
  if valid_581765 != nil:
    section.add "id", valid_581765
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581766 = query.getOrDefault("fields")
  valid_581766 = validateParameter(valid_581766, JString, required = false,
                                 default = nil)
  if valid_581766 != nil:
    section.add "fields", valid_581766
  var valid_581767 = query.getOrDefault("quotaUser")
  valid_581767 = validateParameter(valid_581767, JString, required = false,
                                 default = nil)
  if valid_581767 != nil:
    section.add "quotaUser", valid_581767
  var valid_581768 = query.getOrDefault("alt")
  valid_581768 = validateParameter(valid_581768, JString, required = false,
                                 default = newJString("json"))
  if valid_581768 != nil:
    section.add "alt", valid_581768
  var valid_581769 = query.getOrDefault("oauth_token")
  valid_581769 = validateParameter(valid_581769, JString, required = false,
                                 default = nil)
  if valid_581769 != nil:
    section.add "oauth_token", valid_581769
  var valid_581770 = query.getOrDefault("userIp")
  valid_581770 = validateParameter(valid_581770, JString, required = false,
                                 default = nil)
  if valid_581770 != nil:
    section.add "userIp", valid_581770
  var valid_581771 = query.getOrDefault("key")
  valid_581771 = validateParameter(valid_581771, JString, required = false,
                                 default = nil)
  if valid_581771 != nil:
    section.add "key", valid_581771
  var valid_581772 = query.getOrDefault("prettyPrint")
  valid_581772 = validateParameter(valid_581772, JBool, required = false,
                                 default = newJBool(true))
  if valid_581772 != nil:
    section.add "prettyPrint", valid_581772
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581773: Call_DfareportingEventTagsDelete_581761; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing event tag.
  ## 
  let valid = call_581773.validator(path, query, header, formData, body)
  let scheme = call_581773.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581773.url(scheme.get, call_581773.host, call_581773.base,
                         call_581773.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581773, url, valid)

proc call*(call_581774: Call_DfareportingEventTagsDelete_581761; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingEventTagsDelete
  ## Deletes an existing event tag.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Event tag ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581775 = newJObject()
  var query_581776 = newJObject()
  add(path_581775, "profileId", newJString(profileId))
  add(query_581776, "fields", newJString(fields))
  add(query_581776, "quotaUser", newJString(quotaUser))
  add(query_581776, "alt", newJString(alt))
  add(query_581776, "oauth_token", newJString(oauthToken))
  add(query_581776, "userIp", newJString(userIp))
  add(path_581775, "id", newJString(id))
  add(query_581776, "key", newJString(key))
  add(query_581776, "prettyPrint", newJBool(prettyPrint))
  result = call_581774.call(path_581775, query_581776, nil, nil, nil)

var dfareportingEventTagsDelete* = Call_DfareportingEventTagsDelete_581761(
    name: "dfareportingEventTagsDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags/{id}",
    validator: validate_DfareportingEventTagsDelete_581762,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsDelete_581763,
    schemes: {Scheme.Https})
type
  Call_DfareportingFilesList_581777 = ref object of OpenApiRestCall_579437
proc url_DfareportingFilesList_581779(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/files")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFilesList_581778(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists files for a user profile.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581780 = path.getOrDefault("profileId")
  valid_581780 = validateParameter(valid_581780, JString, required = true,
                                 default = nil)
  if valid_581780 != nil:
    section.add "profileId", valid_581780
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : The field by which to sort the list.
  ##   scope: JString
  ##        : The scope that defines which results are returned.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581781 = query.getOrDefault("fields")
  valid_581781 = validateParameter(valid_581781, JString, required = false,
                                 default = nil)
  if valid_581781 != nil:
    section.add "fields", valid_581781
  var valid_581782 = query.getOrDefault("pageToken")
  valid_581782 = validateParameter(valid_581782, JString, required = false,
                                 default = nil)
  if valid_581782 != nil:
    section.add "pageToken", valid_581782
  var valid_581783 = query.getOrDefault("quotaUser")
  valid_581783 = validateParameter(valid_581783, JString, required = false,
                                 default = nil)
  if valid_581783 != nil:
    section.add "quotaUser", valid_581783
  var valid_581784 = query.getOrDefault("sortField")
  valid_581784 = validateParameter(valid_581784, JString, required = false,
                                 default = newJString("LAST_MODIFIED_TIME"))
  if valid_581784 != nil:
    section.add "sortField", valid_581784
  var valid_581785 = query.getOrDefault("scope")
  valid_581785 = validateParameter(valid_581785, JString, required = false,
                                 default = newJString("MINE"))
  if valid_581785 != nil:
    section.add "scope", valid_581785
  var valid_581786 = query.getOrDefault("alt")
  valid_581786 = validateParameter(valid_581786, JString, required = false,
                                 default = newJString("json"))
  if valid_581786 != nil:
    section.add "alt", valid_581786
  var valid_581787 = query.getOrDefault("oauth_token")
  valid_581787 = validateParameter(valid_581787, JString, required = false,
                                 default = nil)
  if valid_581787 != nil:
    section.add "oauth_token", valid_581787
  var valid_581788 = query.getOrDefault("userIp")
  valid_581788 = validateParameter(valid_581788, JString, required = false,
                                 default = nil)
  if valid_581788 != nil:
    section.add "userIp", valid_581788
  var valid_581789 = query.getOrDefault("maxResults")
  valid_581789 = validateParameter(valid_581789, JInt, required = false,
                                 default = newJInt(10))
  if valid_581789 != nil:
    section.add "maxResults", valid_581789
  var valid_581790 = query.getOrDefault("key")
  valid_581790 = validateParameter(valid_581790, JString, required = false,
                                 default = nil)
  if valid_581790 != nil:
    section.add "key", valid_581790
  var valid_581791 = query.getOrDefault("sortOrder")
  valid_581791 = validateParameter(valid_581791, JString, required = false,
                                 default = newJString("DESCENDING"))
  if valid_581791 != nil:
    section.add "sortOrder", valid_581791
  var valid_581792 = query.getOrDefault("prettyPrint")
  valid_581792 = validateParameter(valid_581792, JBool, required = false,
                                 default = newJBool(true))
  if valid_581792 != nil:
    section.add "prettyPrint", valid_581792
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581793: Call_DfareportingFilesList_581777; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists files for a user profile.
  ## 
  let valid = call_581793.validator(path, query, header, formData, body)
  let scheme = call_581793.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581793.url(scheme.get, call_581793.host, call_581793.base,
                         call_581793.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581793, url, valid)

proc call*(call_581794: Call_DfareportingFilesList_581777; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "LAST_MODIFIED_TIME"; scope: string = "MINE";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 10; key: string = ""; sortOrder: string = "DESCENDING";
          prettyPrint: bool = true): Recallable =
  ## dfareportingFilesList
  ## Lists files for a user profile.
  ##   profileId: string (required)
  ##            : The DFA profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : The field by which to sort the list.
  ##   scope: string
  ##        : The scope that defines which results are returned.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581795 = newJObject()
  var query_581796 = newJObject()
  add(path_581795, "profileId", newJString(profileId))
  add(query_581796, "fields", newJString(fields))
  add(query_581796, "pageToken", newJString(pageToken))
  add(query_581796, "quotaUser", newJString(quotaUser))
  add(query_581796, "sortField", newJString(sortField))
  add(query_581796, "scope", newJString(scope))
  add(query_581796, "alt", newJString(alt))
  add(query_581796, "oauth_token", newJString(oauthToken))
  add(query_581796, "userIp", newJString(userIp))
  add(query_581796, "maxResults", newJInt(maxResults))
  add(query_581796, "key", newJString(key))
  add(query_581796, "sortOrder", newJString(sortOrder))
  add(query_581796, "prettyPrint", newJBool(prettyPrint))
  result = call_581794.call(path_581795, query_581796, nil, nil, nil)

var dfareportingFilesList* = Call_DfareportingFilesList_581777(
    name: "dfareportingFilesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/files",
    validator: validate_DfareportingFilesList_581778, base: "/dfareporting/v3.2",
    url: url_DfareportingFilesList_581779, schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesUpdate_581825 = ref object of OpenApiRestCall_579437
proc url_DfareportingFloodlightActivitiesUpdate_581827(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesUpdate_581826(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight activity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581828 = path.getOrDefault("profileId")
  valid_581828 = validateParameter(valid_581828, JString, required = true,
                                 default = nil)
  if valid_581828 != nil:
    section.add "profileId", valid_581828
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581829 = query.getOrDefault("fields")
  valid_581829 = validateParameter(valid_581829, JString, required = false,
                                 default = nil)
  if valid_581829 != nil:
    section.add "fields", valid_581829
  var valid_581830 = query.getOrDefault("quotaUser")
  valid_581830 = validateParameter(valid_581830, JString, required = false,
                                 default = nil)
  if valid_581830 != nil:
    section.add "quotaUser", valid_581830
  var valid_581831 = query.getOrDefault("alt")
  valid_581831 = validateParameter(valid_581831, JString, required = false,
                                 default = newJString("json"))
  if valid_581831 != nil:
    section.add "alt", valid_581831
  var valid_581832 = query.getOrDefault("oauth_token")
  valid_581832 = validateParameter(valid_581832, JString, required = false,
                                 default = nil)
  if valid_581832 != nil:
    section.add "oauth_token", valid_581832
  var valid_581833 = query.getOrDefault("userIp")
  valid_581833 = validateParameter(valid_581833, JString, required = false,
                                 default = nil)
  if valid_581833 != nil:
    section.add "userIp", valid_581833
  var valid_581834 = query.getOrDefault("key")
  valid_581834 = validateParameter(valid_581834, JString, required = false,
                                 default = nil)
  if valid_581834 != nil:
    section.add "key", valid_581834
  var valid_581835 = query.getOrDefault("prettyPrint")
  valid_581835 = validateParameter(valid_581835, JBool, required = false,
                                 default = newJBool(true))
  if valid_581835 != nil:
    section.add "prettyPrint", valid_581835
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581837: Call_DfareportingFloodlightActivitiesUpdate_581825;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight activity.
  ## 
  let valid = call_581837.validator(path, query, header, formData, body)
  let scheme = call_581837.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581837.url(scheme.get, call_581837.host, call_581837.base,
                         call_581837.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581837, url, valid)

proc call*(call_581838: Call_DfareportingFloodlightActivitiesUpdate_581825;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivitiesUpdate
  ## Updates an existing floodlight activity.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581839 = newJObject()
  var query_581840 = newJObject()
  var body_581841 = newJObject()
  add(path_581839, "profileId", newJString(profileId))
  add(query_581840, "fields", newJString(fields))
  add(query_581840, "quotaUser", newJString(quotaUser))
  add(query_581840, "alt", newJString(alt))
  add(query_581840, "oauth_token", newJString(oauthToken))
  add(query_581840, "userIp", newJString(userIp))
  add(query_581840, "key", newJString(key))
  if body != nil:
    body_581841 = body
  add(query_581840, "prettyPrint", newJBool(prettyPrint))
  result = call_581838.call(path_581839, query_581840, nil, nil, body_581841)

var dfareportingFloodlightActivitiesUpdate* = Call_DfareportingFloodlightActivitiesUpdate_581825(
    name: "dfareportingFloodlightActivitiesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities",
    validator: validate_DfareportingFloodlightActivitiesUpdate_581826,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesUpdate_581827,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesInsert_581842 = ref object of OpenApiRestCall_579437
proc url_DfareportingFloodlightActivitiesInsert_581844(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesInsert_581843(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new floodlight activity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581845 = path.getOrDefault("profileId")
  valid_581845 = validateParameter(valid_581845, JString, required = true,
                                 default = nil)
  if valid_581845 != nil:
    section.add "profileId", valid_581845
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581846 = query.getOrDefault("fields")
  valid_581846 = validateParameter(valid_581846, JString, required = false,
                                 default = nil)
  if valid_581846 != nil:
    section.add "fields", valid_581846
  var valid_581847 = query.getOrDefault("quotaUser")
  valid_581847 = validateParameter(valid_581847, JString, required = false,
                                 default = nil)
  if valid_581847 != nil:
    section.add "quotaUser", valid_581847
  var valid_581848 = query.getOrDefault("alt")
  valid_581848 = validateParameter(valid_581848, JString, required = false,
                                 default = newJString("json"))
  if valid_581848 != nil:
    section.add "alt", valid_581848
  var valid_581849 = query.getOrDefault("oauth_token")
  valid_581849 = validateParameter(valid_581849, JString, required = false,
                                 default = nil)
  if valid_581849 != nil:
    section.add "oauth_token", valid_581849
  var valid_581850 = query.getOrDefault("userIp")
  valid_581850 = validateParameter(valid_581850, JString, required = false,
                                 default = nil)
  if valid_581850 != nil:
    section.add "userIp", valid_581850
  var valid_581851 = query.getOrDefault("key")
  valid_581851 = validateParameter(valid_581851, JString, required = false,
                                 default = nil)
  if valid_581851 != nil:
    section.add "key", valid_581851
  var valid_581852 = query.getOrDefault("prettyPrint")
  valid_581852 = validateParameter(valid_581852, JBool, required = false,
                                 default = newJBool(true))
  if valid_581852 != nil:
    section.add "prettyPrint", valid_581852
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581854: Call_DfareportingFloodlightActivitiesInsert_581842;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new floodlight activity.
  ## 
  let valid = call_581854.validator(path, query, header, formData, body)
  let scheme = call_581854.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581854.url(scheme.get, call_581854.host, call_581854.base,
                         call_581854.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581854, url, valid)

proc call*(call_581855: Call_DfareportingFloodlightActivitiesInsert_581842;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivitiesInsert
  ## Inserts a new floodlight activity.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581856 = newJObject()
  var query_581857 = newJObject()
  var body_581858 = newJObject()
  add(path_581856, "profileId", newJString(profileId))
  add(query_581857, "fields", newJString(fields))
  add(query_581857, "quotaUser", newJString(quotaUser))
  add(query_581857, "alt", newJString(alt))
  add(query_581857, "oauth_token", newJString(oauthToken))
  add(query_581857, "userIp", newJString(userIp))
  add(query_581857, "key", newJString(key))
  if body != nil:
    body_581858 = body
  add(query_581857, "prettyPrint", newJBool(prettyPrint))
  result = call_581855.call(path_581856, query_581857, nil, nil, body_581858)

var dfareportingFloodlightActivitiesInsert* = Call_DfareportingFloodlightActivitiesInsert_581842(
    name: "dfareportingFloodlightActivitiesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities",
    validator: validate_DfareportingFloodlightActivitiesInsert_581843,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesInsert_581844,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesList_581797 = ref object of OpenApiRestCall_579437
proc url_DfareportingFloodlightActivitiesList_581799(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesList_581798(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of floodlight activities, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581800 = path.getOrDefault("profileId")
  valid_581800 = validateParameter(valid_581800, JString, required = true,
                                 default = nil)
  if valid_581800 != nil:
    section.add "profileId", valid_581800
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   tagString: JString
  ##            : Select only floodlight activities with the specified tag string.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivity*2015" will return objects with names like "floodlightactivity June 2015", "floodlightactivity April 2015", or simply "floodlightactivity 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivity" will match objects with name "my floodlightactivity activity", "floodlightactivity 2015", or simply "floodlightactivity".
  ##   advertiserId: JString
  ##               : Select only floodlight activities for the specified advertiser ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   floodlightActivityGroupIds: JArray
  ##                             : Select only floodlight activities with the specified floodlight activity group IDs.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   floodlightActivityGroupType: JString
  ##                              : Select only floodlight activities with the specified floodlight activity group type.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   floodlightConfigurationId: JString
  ##                            : Select only floodlight activities for the specified floodlight configuration ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   floodlightActivityGroupTagString: JString
  ##                                   : Select only floodlight activities with the specified floodlight activity group tag string.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only floodlight activities with the specified IDs. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   floodlightActivityGroupName: JString
  ##                              : Select only floodlight activities with the specified floodlight activity group name.
  section = newJObject()
  var valid_581801 = query.getOrDefault("fields")
  valid_581801 = validateParameter(valid_581801, JString, required = false,
                                 default = nil)
  if valid_581801 != nil:
    section.add "fields", valid_581801
  var valid_581802 = query.getOrDefault("pageToken")
  valid_581802 = validateParameter(valid_581802, JString, required = false,
                                 default = nil)
  if valid_581802 != nil:
    section.add "pageToken", valid_581802
  var valid_581803 = query.getOrDefault("quotaUser")
  valid_581803 = validateParameter(valid_581803, JString, required = false,
                                 default = nil)
  if valid_581803 != nil:
    section.add "quotaUser", valid_581803
  var valid_581804 = query.getOrDefault("sortField")
  valid_581804 = validateParameter(valid_581804, JString, required = false,
                                 default = newJString("ID"))
  if valid_581804 != nil:
    section.add "sortField", valid_581804
  var valid_581805 = query.getOrDefault("tagString")
  valid_581805 = validateParameter(valid_581805, JString, required = false,
                                 default = nil)
  if valid_581805 != nil:
    section.add "tagString", valid_581805
  var valid_581806 = query.getOrDefault("alt")
  valid_581806 = validateParameter(valid_581806, JString, required = false,
                                 default = newJString("json"))
  if valid_581806 != nil:
    section.add "alt", valid_581806
  var valid_581807 = query.getOrDefault("searchString")
  valid_581807 = validateParameter(valid_581807, JString, required = false,
                                 default = nil)
  if valid_581807 != nil:
    section.add "searchString", valid_581807
  var valid_581808 = query.getOrDefault("advertiserId")
  valid_581808 = validateParameter(valid_581808, JString, required = false,
                                 default = nil)
  if valid_581808 != nil:
    section.add "advertiserId", valid_581808
  var valid_581809 = query.getOrDefault("floodlightActivityGroupIds")
  valid_581809 = validateParameter(valid_581809, JArray, required = false,
                                 default = nil)
  if valid_581809 != nil:
    section.add "floodlightActivityGroupIds", valid_581809
  var valid_581810 = query.getOrDefault("oauth_token")
  valid_581810 = validateParameter(valid_581810, JString, required = false,
                                 default = nil)
  if valid_581810 != nil:
    section.add "oauth_token", valid_581810
  var valid_581811 = query.getOrDefault("floodlightActivityGroupType")
  valid_581811 = validateParameter(valid_581811, JString, required = false,
                                 default = newJString("COUNTER"))
  if valid_581811 != nil:
    section.add "floodlightActivityGroupType", valid_581811
  var valid_581812 = query.getOrDefault("userIp")
  valid_581812 = validateParameter(valid_581812, JString, required = false,
                                 default = nil)
  if valid_581812 != nil:
    section.add "userIp", valid_581812
  var valid_581813 = query.getOrDefault("floodlightConfigurationId")
  valid_581813 = validateParameter(valid_581813, JString, required = false,
                                 default = nil)
  if valid_581813 != nil:
    section.add "floodlightConfigurationId", valid_581813
  var valid_581814 = query.getOrDefault("floodlightActivityGroupTagString")
  valid_581814 = validateParameter(valid_581814, JString, required = false,
                                 default = nil)
  if valid_581814 != nil:
    section.add "floodlightActivityGroupTagString", valid_581814
  var valid_581815 = query.getOrDefault("maxResults")
  valid_581815 = validateParameter(valid_581815, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581815 != nil:
    section.add "maxResults", valid_581815
  var valid_581816 = query.getOrDefault("ids")
  valid_581816 = validateParameter(valid_581816, JArray, required = false,
                                 default = nil)
  if valid_581816 != nil:
    section.add "ids", valid_581816
  var valid_581817 = query.getOrDefault("key")
  valid_581817 = validateParameter(valid_581817, JString, required = false,
                                 default = nil)
  if valid_581817 != nil:
    section.add "key", valid_581817
  var valid_581818 = query.getOrDefault("sortOrder")
  valid_581818 = validateParameter(valid_581818, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581818 != nil:
    section.add "sortOrder", valid_581818
  var valid_581819 = query.getOrDefault("prettyPrint")
  valid_581819 = validateParameter(valid_581819, JBool, required = false,
                                 default = newJBool(true))
  if valid_581819 != nil:
    section.add "prettyPrint", valid_581819
  var valid_581820 = query.getOrDefault("floodlightActivityGroupName")
  valid_581820 = validateParameter(valid_581820, JString, required = false,
                                 default = nil)
  if valid_581820 != nil:
    section.add "floodlightActivityGroupName", valid_581820
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581821: Call_DfareportingFloodlightActivitiesList_581797;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of floodlight activities, possibly filtered. This method supports paging.
  ## 
  let valid = call_581821.validator(path, query, header, formData, body)
  let scheme = call_581821.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581821.url(scheme.get, call_581821.host, call_581821.base,
                         call_581821.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581821, url, valid)

proc call*(call_581822: Call_DfareportingFloodlightActivitiesList_581797;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; tagString: string = "";
          alt: string = "json"; searchString: string = ""; advertiserId: string = "";
          floodlightActivityGroupIds: JsonNode = nil; oauthToken: string = "";
          floodlightActivityGroupType: string = "COUNTER"; userIp: string = "";
          floodlightConfigurationId: string = "";
          floodlightActivityGroupTagString: string = ""; maxResults: int = 1000;
          ids: JsonNode = nil; key: string = ""; sortOrder: string = "ASCENDING";
          prettyPrint: bool = true; floodlightActivityGroupName: string = ""): Recallable =
  ## dfareportingFloodlightActivitiesList
  ## Retrieves a list of floodlight activities, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   tagString: string
  ##            : Select only floodlight activities with the specified tag string.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivity*2015" will return objects with names like "floodlightactivity June 2015", "floodlightactivity April 2015", or simply "floodlightactivity 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivity" will match objects with name "my floodlightactivity activity", "floodlightactivity 2015", or simply "floodlightactivity".
  ##   advertiserId: string
  ##               : Select only floodlight activities for the specified advertiser ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   floodlightActivityGroupIds: JArray
  ##                             : Select only floodlight activities with the specified floodlight activity group IDs.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   floodlightActivityGroupType: string
  ##                              : Select only floodlight activities with the specified floodlight activity group type.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   floodlightConfigurationId: string
  ##                            : Select only floodlight activities for the specified floodlight configuration ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   floodlightActivityGroupTagString: string
  ##                                   : Select only floodlight activities with the specified floodlight activity group tag string.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only floodlight activities with the specified IDs. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   floodlightActivityGroupName: string
  ##                              : Select only floodlight activities with the specified floodlight activity group name.
  var path_581823 = newJObject()
  var query_581824 = newJObject()
  add(path_581823, "profileId", newJString(profileId))
  add(query_581824, "fields", newJString(fields))
  add(query_581824, "pageToken", newJString(pageToken))
  add(query_581824, "quotaUser", newJString(quotaUser))
  add(query_581824, "sortField", newJString(sortField))
  add(query_581824, "tagString", newJString(tagString))
  add(query_581824, "alt", newJString(alt))
  add(query_581824, "searchString", newJString(searchString))
  add(query_581824, "advertiserId", newJString(advertiserId))
  if floodlightActivityGroupIds != nil:
    query_581824.add "floodlightActivityGroupIds", floodlightActivityGroupIds
  add(query_581824, "oauth_token", newJString(oauthToken))
  add(query_581824, "floodlightActivityGroupType",
      newJString(floodlightActivityGroupType))
  add(query_581824, "userIp", newJString(userIp))
  add(query_581824, "floodlightConfigurationId",
      newJString(floodlightConfigurationId))
  add(query_581824, "floodlightActivityGroupTagString",
      newJString(floodlightActivityGroupTagString))
  add(query_581824, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_581824.add "ids", ids
  add(query_581824, "key", newJString(key))
  add(query_581824, "sortOrder", newJString(sortOrder))
  add(query_581824, "prettyPrint", newJBool(prettyPrint))
  add(query_581824, "floodlightActivityGroupName",
      newJString(floodlightActivityGroupName))
  result = call_581822.call(path_581823, query_581824, nil, nil, nil)

var dfareportingFloodlightActivitiesList* = Call_DfareportingFloodlightActivitiesList_581797(
    name: "dfareportingFloodlightActivitiesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities",
    validator: validate_DfareportingFloodlightActivitiesList_581798,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesList_581799,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesPatch_581859 = ref object of OpenApiRestCall_579437
proc url_DfareportingFloodlightActivitiesPatch_581861(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesPatch_581860(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight activity. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581862 = path.getOrDefault("profileId")
  valid_581862 = validateParameter(valid_581862, JString, required = true,
                                 default = nil)
  if valid_581862 != nil:
    section.add "profileId", valid_581862
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Floodlight activity ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581863 = query.getOrDefault("fields")
  valid_581863 = validateParameter(valid_581863, JString, required = false,
                                 default = nil)
  if valid_581863 != nil:
    section.add "fields", valid_581863
  var valid_581864 = query.getOrDefault("quotaUser")
  valid_581864 = validateParameter(valid_581864, JString, required = false,
                                 default = nil)
  if valid_581864 != nil:
    section.add "quotaUser", valid_581864
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_581865 = query.getOrDefault("id")
  valid_581865 = validateParameter(valid_581865, JString, required = true,
                                 default = nil)
  if valid_581865 != nil:
    section.add "id", valid_581865
  var valid_581866 = query.getOrDefault("alt")
  valid_581866 = validateParameter(valid_581866, JString, required = false,
                                 default = newJString("json"))
  if valid_581866 != nil:
    section.add "alt", valid_581866
  var valid_581867 = query.getOrDefault("oauth_token")
  valid_581867 = validateParameter(valid_581867, JString, required = false,
                                 default = nil)
  if valid_581867 != nil:
    section.add "oauth_token", valid_581867
  var valid_581868 = query.getOrDefault("userIp")
  valid_581868 = validateParameter(valid_581868, JString, required = false,
                                 default = nil)
  if valid_581868 != nil:
    section.add "userIp", valid_581868
  var valid_581869 = query.getOrDefault("key")
  valid_581869 = validateParameter(valid_581869, JString, required = false,
                                 default = nil)
  if valid_581869 != nil:
    section.add "key", valid_581869
  var valid_581870 = query.getOrDefault("prettyPrint")
  valid_581870 = validateParameter(valid_581870, JBool, required = false,
                                 default = newJBool(true))
  if valid_581870 != nil:
    section.add "prettyPrint", valid_581870
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581872: Call_DfareportingFloodlightActivitiesPatch_581859;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight activity. This method supports patch semantics.
  ## 
  let valid = call_581872.validator(path, query, header, formData, body)
  let scheme = call_581872.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581872.url(scheme.get, call_581872.host, call_581872.base,
                         call_581872.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581872, url, valid)

proc call*(call_581873: Call_DfareportingFloodlightActivitiesPatch_581859;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivitiesPatch
  ## Updates an existing floodlight activity. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Floodlight activity ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581874 = newJObject()
  var query_581875 = newJObject()
  var body_581876 = newJObject()
  add(path_581874, "profileId", newJString(profileId))
  add(query_581875, "fields", newJString(fields))
  add(query_581875, "quotaUser", newJString(quotaUser))
  add(query_581875, "id", newJString(id))
  add(query_581875, "alt", newJString(alt))
  add(query_581875, "oauth_token", newJString(oauthToken))
  add(query_581875, "userIp", newJString(userIp))
  add(query_581875, "key", newJString(key))
  if body != nil:
    body_581876 = body
  add(query_581875, "prettyPrint", newJBool(prettyPrint))
  result = call_581873.call(path_581874, query_581875, nil, nil, body_581876)

var dfareportingFloodlightActivitiesPatch* = Call_DfareportingFloodlightActivitiesPatch_581859(
    name: "dfareportingFloodlightActivitiesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities",
    validator: validate_DfareportingFloodlightActivitiesPatch_581860,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesPatch_581861,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesGeneratetag_581877 = ref object of OpenApiRestCall_579437
proc url_DfareportingFloodlightActivitiesGeneratetag_581879(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"), (kind: ConstantSegment,
        value: "/floodlightActivities/generatetag")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesGeneratetag_581878(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates a tag for a floodlight activity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581880 = path.getOrDefault("profileId")
  valid_581880 = validateParameter(valid_581880, JString, required = true,
                                 default = nil)
  if valid_581880 != nil:
    section.add "profileId", valid_581880
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   floodlightActivityId: JString
  ##                       : Floodlight activity ID for which we want to generate a tag.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581881 = query.getOrDefault("fields")
  valid_581881 = validateParameter(valid_581881, JString, required = false,
                                 default = nil)
  if valid_581881 != nil:
    section.add "fields", valid_581881
  var valid_581882 = query.getOrDefault("quotaUser")
  valid_581882 = validateParameter(valid_581882, JString, required = false,
                                 default = nil)
  if valid_581882 != nil:
    section.add "quotaUser", valid_581882
  var valid_581883 = query.getOrDefault("alt")
  valid_581883 = validateParameter(valid_581883, JString, required = false,
                                 default = newJString("json"))
  if valid_581883 != nil:
    section.add "alt", valid_581883
  var valid_581884 = query.getOrDefault("oauth_token")
  valid_581884 = validateParameter(valid_581884, JString, required = false,
                                 default = nil)
  if valid_581884 != nil:
    section.add "oauth_token", valid_581884
  var valid_581885 = query.getOrDefault("floodlightActivityId")
  valid_581885 = validateParameter(valid_581885, JString, required = false,
                                 default = nil)
  if valid_581885 != nil:
    section.add "floodlightActivityId", valid_581885
  var valid_581886 = query.getOrDefault("userIp")
  valid_581886 = validateParameter(valid_581886, JString, required = false,
                                 default = nil)
  if valid_581886 != nil:
    section.add "userIp", valid_581886
  var valid_581887 = query.getOrDefault("key")
  valid_581887 = validateParameter(valid_581887, JString, required = false,
                                 default = nil)
  if valid_581887 != nil:
    section.add "key", valid_581887
  var valid_581888 = query.getOrDefault("prettyPrint")
  valid_581888 = validateParameter(valid_581888, JBool, required = false,
                                 default = newJBool(true))
  if valid_581888 != nil:
    section.add "prettyPrint", valid_581888
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581889: Call_DfareportingFloodlightActivitiesGeneratetag_581877;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates a tag for a floodlight activity.
  ## 
  let valid = call_581889.validator(path, query, header, formData, body)
  let scheme = call_581889.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581889.url(scheme.get, call_581889.host, call_581889.base,
                         call_581889.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581889, url, valid)

proc call*(call_581890: Call_DfareportingFloodlightActivitiesGeneratetag_581877;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = "";
          floodlightActivityId: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivitiesGeneratetag
  ## Generates a tag for a floodlight activity.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   floodlightActivityId: string
  ##                       : Floodlight activity ID for which we want to generate a tag.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581891 = newJObject()
  var query_581892 = newJObject()
  add(path_581891, "profileId", newJString(profileId))
  add(query_581892, "fields", newJString(fields))
  add(query_581892, "quotaUser", newJString(quotaUser))
  add(query_581892, "alt", newJString(alt))
  add(query_581892, "oauth_token", newJString(oauthToken))
  add(query_581892, "floodlightActivityId", newJString(floodlightActivityId))
  add(query_581892, "userIp", newJString(userIp))
  add(query_581892, "key", newJString(key))
  add(query_581892, "prettyPrint", newJBool(prettyPrint))
  result = call_581890.call(path_581891, query_581892, nil, nil, nil)

var dfareportingFloodlightActivitiesGeneratetag* = Call_DfareportingFloodlightActivitiesGeneratetag_581877(
    name: "dfareportingFloodlightActivitiesGeneratetag",
    meth: HttpMethod.HttpPost, host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities/generatetag",
    validator: validate_DfareportingFloodlightActivitiesGeneratetag_581878,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightActivitiesGeneratetag_581879,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesGet_581893 = ref object of OpenApiRestCall_579437
proc url_DfareportingFloodlightActivitiesGet_581895(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesGet_581894(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one floodlight activity by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Floodlight activity ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581896 = path.getOrDefault("profileId")
  valid_581896 = validateParameter(valid_581896, JString, required = true,
                                 default = nil)
  if valid_581896 != nil:
    section.add "profileId", valid_581896
  var valid_581897 = path.getOrDefault("id")
  valid_581897 = validateParameter(valid_581897, JString, required = true,
                                 default = nil)
  if valid_581897 != nil:
    section.add "id", valid_581897
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581898 = query.getOrDefault("fields")
  valid_581898 = validateParameter(valid_581898, JString, required = false,
                                 default = nil)
  if valid_581898 != nil:
    section.add "fields", valid_581898
  var valid_581899 = query.getOrDefault("quotaUser")
  valid_581899 = validateParameter(valid_581899, JString, required = false,
                                 default = nil)
  if valid_581899 != nil:
    section.add "quotaUser", valid_581899
  var valid_581900 = query.getOrDefault("alt")
  valid_581900 = validateParameter(valid_581900, JString, required = false,
                                 default = newJString("json"))
  if valid_581900 != nil:
    section.add "alt", valid_581900
  var valid_581901 = query.getOrDefault("oauth_token")
  valid_581901 = validateParameter(valid_581901, JString, required = false,
                                 default = nil)
  if valid_581901 != nil:
    section.add "oauth_token", valid_581901
  var valid_581902 = query.getOrDefault("userIp")
  valid_581902 = validateParameter(valid_581902, JString, required = false,
                                 default = nil)
  if valid_581902 != nil:
    section.add "userIp", valid_581902
  var valid_581903 = query.getOrDefault("key")
  valid_581903 = validateParameter(valid_581903, JString, required = false,
                                 default = nil)
  if valid_581903 != nil:
    section.add "key", valid_581903
  var valid_581904 = query.getOrDefault("prettyPrint")
  valid_581904 = validateParameter(valid_581904, JBool, required = false,
                                 default = newJBool(true))
  if valid_581904 != nil:
    section.add "prettyPrint", valid_581904
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581905: Call_DfareportingFloodlightActivitiesGet_581893;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one floodlight activity by ID.
  ## 
  let valid = call_581905.validator(path, query, header, formData, body)
  let scheme = call_581905.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581905.url(scheme.get, call_581905.host, call_581905.base,
                         call_581905.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581905, url, valid)

proc call*(call_581906: Call_DfareportingFloodlightActivitiesGet_581893;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivitiesGet
  ## Gets one floodlight activity by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Floodlight activity ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581907 = newJObject()
  var query_581908 = newJObject()
  add(path_581907, "profileId", newJString(profileId))
  add(query_581908, "fields", newJString(fields))
  add(query_581908, "quotaUser", newJString(quotaUser))
  add(query_581908, "alt", newJString(alt))
  add(query_581908, "oauth_token", newJString(oauthToken))
  add(query_581908, "userIp", newJString(userIp))
  add(path_581907, "id", newJString(id))
  add(query_581908, "key", newJString(key))
  add(query_581908, "prettyPrint", newJBool(prettyPrint))
  result = call_581906.call(path_581907, query_581908, nil, nil, nil)

var dfareportingFloodlightActivitiesGet* = Call_DfareportingFloodlightActivitiesGet_581893(
    name: "dfareportingFloodlightActivitiesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities/{id}",
    validator: validate_DfareportingFloodlightActivitiesGet_581894,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesGet_581895,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesDelete_581909 = ref object of OpenApiRestCall_579437
proc url_DfareportingFloodlightActivitiesDelete_581911(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesDelete_581910(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing floodlight activity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Floodlight activity ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581912 = path.getOrDefault("profileId")
  valid_581912 = validateParameter(valid_581912, JString, required = true,
                                 default = nil)
  if valid_581912 != nil:
    section.add "profileId", valid_581912
  var valid_581913 = path.getOrDefault("id")
  valid_581913 = validateParameter(valid_581913, JString, required = true,
                                 default = nil)
  if valid_581913 != nil:
    section.add "id", valid_581913
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581914 = query.getOrDefault("fields")
  valid_581914 = validateParameter(valid_581914, JString, required = false,
                                 default = nil)
  if valid_581914 != nil:
    section.add "fields", valid_581914
  var valid_581915 = query.getOrDefault("quotaUser")
  valid_581915 = validateParameter(valid_581915, JString, required = false,
                                 default = nil)
  if valid_581915 != nil:
    section.add "quotaUser", valid_581915
  var valid_581916 = query.getOrDefault("alt")
  valid_581916 = validateParameter(valid_581916, JString, required = false,
                                 default = newJString("json"))
  if valid_581916 != nil:
    section.add "alt", valid_581916
  var valid_581917 = query.getOrDefault("oauth_token")
  valid_581917 = validateParameter(valid_581917, JString, required = false,
                                 default = nil)
  if valid_581917 != nil:
    section.add "oauth_token", valid_581917
  var valid_581918 = query.getOrDefault("userIp")
  valid_581918 = validateParameter(valid_581918, JString, required = false,
                                 default = nil)
  if valid_581918 != nil:
    section.add "userIp", valid_581918
  var valid_581919 = query.getOrDefault("key")
  valid_581919 = validateParameter(valid_581919, JString, required = false,
                                 default = nil)
  if valid_581919 != nil:
    section.add "key", valid_581919
  var valid_581920 = query.getOrDefault("prettyPrint")
  valid_581920 = validateParameter(valid_581920, JBool, required = false,
                                 default = newJBool(true))
  if valid_581920 != nil:
    section.add "prettyPrint", valid_581920
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581921: Call_DfareportingFloodlightActivitiesDelete_581909;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing floodlight activity.
  ## 
  let valid = call_581921.validator(path, query, header, formData, body)
  let scheme = call_581921.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581921.url(scheme.get, call_581921.host, call_581921.base,
                         call_581921.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581921, url, valid)

proc call*(call_581922: Call_DfareportingFloodlightActivitiesDelete_581909;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivitiesDelete
  ## Deletes an existing floodlight activity.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Floodlight activity ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581923 = newJObject()
  var query_581924 = newJObject()
  add(path_581923, "profileId", newJString(profileId))
  add(query_581924, "fields", newJString(fields))
  add(query_581924, "quotaUser", newJString(quotaUser))
  add(query_581924, "alt", newJString(alt))
  add(query_581924, "oauth_token", newJString(oauthToken))
  add(query_581924, "userIp", newJString(userIp))
  add(path_581923, "id", newJString(id))
  add(query_581924, "key", newJString(key))
  add(query_581924, "prettyPrint", newJBool(prettyPrint))
  result = call_581922.call(path_581923, query_581924, nil, nil, nil)

var dfareportingFloodlightActivitiesDelete* = Call_DfareportingFloodlightActivitiesDelete_581909(
    name: "dfareportingFloodlightActivitiesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities/{id}",
    validator: validate_DfareportingFloodlightActivitiesDelete_581910,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesDelete_581911,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsUpdate_581949 = ref object of OpenApiRestCall_579437
proc url_DfareportingFloodlightActivityGroupsUpdate_581951(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsUpdate_581950(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight activity group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581952 = path.getOrDefault("profileId")
  valid_581952 = validateParameter(valid_581952, JString, required = true,
                                 default = nil)
  if valid_581952 != nil:
    section.add "profileId", valid_581952
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581953 = query.getOrDefault("fields")
  valid_581953 = validateParameter(valid_581953, JString, required = false,
                                 default = nil)
  if valid_581953 != nil:
    section.add "fields", valid_581953
  var valid_581954 = query.getOrDefault("quotaUser")
  valid_581954 = validateParameter(valid_581954, JString, required = false,
                                 default = nil)
  if valid_581954 != nil:
    section.add "quotaUser", valid_581954
  var valid_581955 = query.getOrDefault("alt")
  valid_581955 = validateParameter(valid_581955, JString, required = false,
                                 default = newJString("json"))
  if valid_581955 != nil:
    section.add "alt", valid_581955
  var valid_581956 = query.getOrDefault("oauth_token")
  valid_581956 = validateParameter(valid_581956, JString, required = false,
                                 default = nil)
  if valid_581956 != nil:
    section.add "oauth_token", valid_581956
  var valid_581957 = query.getOrDefault("userIp")
  valid_581957 = validateParameter(valid_581957, JString, required = false,
                                 default = nil)
  if valid_581957 != nil:
    section.add "userIp", valid_581957
  var valid_581958 = query.getOrDefault("key")
  valid_581958 = validateParameter(valid_581958, JString, required = false,
                                 default = nil)
  if valid_581958 != nil:
    section.add "key", valid_581958
  var valid_581959 = query.getOrDefault("prettyPrint")
  valid_581959 = validateParameter(valid_581959, JBool, required = false,
                                 default = newJBool(true))
  if valid_581959 != nil:
    section.add "prettyPrint", valid_581959
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581961: Call_DfareportingFloodlightActivityGroupsUpdate_581949;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight activity group.
  ## 
  let valid = call_581961.validator(path, query, header, formData, body)
  let scheme = call_581961.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581961.url(scheme.get, call_581961.host, call_581961.base,
                         call_581961.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581961, url, valid)

proc call*(call_581962: Call_DfareportingFloodlightActivityGroupsUpdate_581949;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivityGroupsUpdate
  ## Updates an existing floodlight activity group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581963 = newJObject()
  var query_581964 = newJObject()
  var body_581965 = newJObject()
  add(path_581963, "profileId", newJString(profileId))
  add(query_581964, "fields", newJString(fields))
  add(query_581964, "quotaUser", newJString(quotaUser))
  add(query_581964, "alt", newJString(alt))
  add(query_581964, "oauth_token", newJString(oauthToken))
  add(query_581964, "userIp", newJString(userIp))
  add(query_581964, "key", newJString(key))
  if body != nil:
    body_581965 = body
  add(query_581964, "prettyPrint", newJBool(prettyPrint))
  result = call_581962.call(path_581963, query_581964, nil, nil, body_581965)

var dfareportingFloodlightActivityGroupsUpdate* = Call_DfareportingFloodlightActivityGroupsUpdate_581949(
    name: "dfareportingFloodlightActivityGroupsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups",
    validator: validate_DfareportingFloodlightActivityGroupsUpdate_581950,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightActivityGroupsUpdate_581951,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsInsert_581966 = ref object of OpenApiRestCall_579437
proc url_DfareportingFloodlightActivityGroupsInsert_581968(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsInsert_581967(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new floodlight activity group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581969 = path.getOrDefault("profileId")
  valid_581969 = validateParameter(valid_581969, JString, required = true,
                                 default = nil)
  if valid_581969 != nil:
    section.add "profileId", valid_581969
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581970 = query.getOrDefault("fields")
  valid_581970 = validateParameter(valid_581970, JString, required = false,
                                 default = nil)
  if valid_581970 != nil:
    section.add "fields", valid_581970
  var valid_581971 = query.getOrDefault("quotaUser")
  valid_581971 = validateParameter(valid_581971, JString, required = false,
                                 default = nil)
  if valid_581971 != nil:
    section.add "quotaUser", valid_581971
  var valid_581972 = query.getOrDefault("alt")
  valid_581972 = validateParameter(valid_581972, JString, required = false,
                                 default = newJString("json"))
  if valid_581972 != nil:
    section.add "alt", valid_581972
  var valid_581973 = query.getOrDefault("oauth_token")
  valid_581973 = validateParameter(valid_581973, JString, required = false,
                                 default = nil)
  if valid_581973 != nil:
    section.add "oauth_token", valid_581973
  var valid_581974 = query.getOrDefault("userIp")
  valid_581974 = validateParameter(valid_581974, JString, required = false,
                                 default = nil)
  if valid_581974 != nil:
    section.add "userIp", valid_581974
  var valid_581975 = query.getOrDefault("key")
  valid_581975 = validateParameter(valid_581975, JString, required = false,
                                 default = nil)
  if valid_581975 != nil:
    section.add "key", valid_581975
  var valid_581976 = query.getOrDefault("prettyPrint")
  valid_581976 = validateParameter(valid_581976, JBool, required = false,
                                 default = newJBool(true))
  if valid_581976 != nil:
    section.add "prettyPrint", valid_581976
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581978: Call_DfareportingFloodlightActivityGroupsInsert_581966;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new floodlight activity group.
  ## 
  let valid = call_581978.validator(path, query, header, formData, body)
  let scheme = call_581978.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581978.url(scheme.get, call_581978.host, call_581978.base,
                         call_581978.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581978, url, valid)

proc call*(call_581979: Call_DfareportingFloodlightActivityGroupsInsert_581966;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivityGroupsInsert
  ## Inserts a new floodlight activity group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581980 = newJObject()
  var query_581981 = newJObject()
  var body_581982 = newJObject()
  add(path_581980, "profileId", newJString(profileId))
  add(query_581981, "fields", newJString(fields))
  add(query_581981, "quotaUser", newJString(quotaUser))
  add(query_581981, "alt", newJString(alt))
  add(query_581981, "oauth_token", newJString(oauthToken))
  add(query_581981, "userIp", newJString(userIp))
  add(query_581981, "key", newJString(key))
  if body != nil:
    body_581982 = body
  add(query_581981, "prettyPrint", newJBool(prettyPrint))
  result = call_581979.call(path_581980, query_581981, nil, nil, body_581982)

var dfareportingFloodlightActivityGroupsInsert* = Call_DfareportingFloodlightActivityGroupsInsert_581966(
    name: "dfareportingFloodlightActivityGroupsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups",
    validator: validate_DfareportingFloodlightActivityGroupsInsert_581967,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightActivityGroupsInsert_581968,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsList_581925 = ref object of OpenApiRestCall_579437
proc url_DfareportingFloodlightActivityGroupsList_581927(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsList_581926(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581928 = path.getOrDefault("profileId")
  valid_581928 = validateParameter(valid_581928, JString, required = true,
                                 default = nil)
  if valid_581928 != nil:
    section.add "profileId", valid_581928
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivitygroup*2015" will return objects with names like "floodlightactivitygroup June 2015", "floodlightactivitygroup April 2015", or simply "floodlightactivitygroup 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivitygroup" will match objects with name "my floodlightactivitygroup activity", "floodlightactivitygroup 2015", or simply "floodlightactivitygroup".
  ##   advertiserId: JString
  ##               : Select only floodlight activity groups with the specified advertiser ID. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
  ##   type: JString
  ##       : Select only floodlight activity groups with the specified floodlight activity group type.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   floodlightConfigurationId: JString
  ##                            : Select only floodlight activity groups with the specified floodlight configuration ID. Must specify either advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only floodlight activity groups with the specified IDs. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581929 = query.getOrDefault("fields")
  valid_581929 = validateParameter(valid_581929, JString, required = false,
                                 default = nil)
  if valid_581929 != nil:
    section.add "fields", valid_581929
  var valid_581930 = query.getOrDefault("pageToken")
  valid_581930 = validateParameter(valid_581930, JString, required = false,
                                 default = nil)
  if valid_581930 != nil:
    section.add "pageToken", valid_581930
  var valid_581931 = query.getOrDefault("quotaUser")
  valid_581931 = validateParameter(valid_581931, JString, required = false,
                                 default = nil)
  if valid_581931 != nil:
    section.add "quotaUser", valid_581931
  var valid_581932 = query.getOrDefault("sortField")
  valid_581932 = validateParameter(valid_581932, JString, required = false,
                                 default = newJString("ID"))
  if valid_581932 != nil:
    section.add "sortField", valid_581932
  var valid_581933 = query.getOrDefault("alt")
  valid_581933 = validateParameter(valid_581933, JString, required = false,
                                 default = newJString("json"))
  if valid_581933 != nil:
    section.add "alt", valid_581933
  var valid_581934 = query.getOrDefault("searchString")
  valid_581934 = validateParameter(valid_581934, JString, required = false,
                                 default = nil)
  if valid_581934 != nil:
    section.add "searchString", valid_581934
  var valid_581935 = query.getOrDefault("advertiserId")
  valid_581935 = validateParameter(valid_581935, JString, required = false,
                                 default = nil)
  if valid_581935 != nil:
    section.add "advertiserId", valid_581935
  var valid_581936 = query.getOrDefault("type")
  valid_581936 = validateParameter(valid_581936, JString, required = false,
                                 default = newJString("COUNTER"))
  if valid_581936 != nil:
    section.add "type", valid_581936
  var valid_581937 = query.getOrDefault("oauth_token")
  valid_581937 = validateParameter(valid_581937, JString, required = false,
                                 default = nil)
  if valid_581937 != nil:
    section.add "oauth_token", valid_581937
  var valid_581938 = query.getOrDefault("userIp")
  valid_581938 = validateParameter(valid_581938, JString, required = false,
                                 default = nil)
  if valid_581938 != nil:
    section.add "userIp", valid_581938
  var valid_581939 = query.getOrDefault("floodlightConfigurationId")
  valid_581939 = validateParameter(valid_581939, JString, required = false,
                                 default = nil)
  if valid_581939 != nil:
    section.add "floodlightConfigurationId", valid_581939
  var valid_581940 = query.getOrDefault("maxResults")
  valid_581940 = validateParameter(valid_581940, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581940 != nil:
    section.add "maxResults", valid_581940
  var valid_581941 = query.getOrDefault("ids")
  valid_581941 = validateParameter(valid_581941, JArray, required = false,
                                 default = nil)
  if valid_581941 != nil:
    section.add "ids", valid_581941
  var valid_581942 = query.getOrDefault("key")
  valid_581942 = validateParameter(valid_581942, JString, required = false,
                                 default = nil)
  if valid_581942 != nil:
    section.add "key", valid_581942
  var valid_581943 = query.getOrDefault("sortOrder")
  valid_581943 = validateParameter(valid_581943, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581943 != nil:
    section.add "sortOrder", valid_581943
  var valid_581944 = query.getOrDefault("prettyPrint")
  valid_581944 = validateParameter(valid_581944, JBool, required = false,
                                 default = newJBool(true))
  if valid_581944 != nil:
    section.add "prettyPrint", valid_581944
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581945: Call_DfareportingFloodlightActivityGroupsList_581925;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging.
  ## 
  let valid = call_581945.validator(path, query, header, formData, body)
  let scheme = call_581945.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581945.url(scheme.get, call_581945.host, call_581945.base,
                         call_581945.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581945, url, valid)

proc call*(call_581946: Call_DfareportingFloodlightActivityGroupsList_581925;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; advertiserId: string = "";
          `type`: string = "COUNTER"; oauthToken: string = ""; userIp: string = "";
          floodlightConfigurationId: string = ""; maxResults: int = 1000;
          ids: JsonNode = nil; key: string = ""; sortOrder: string = "ASCENDING";
          prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivityGroupsList
  ## Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivitygroup*2015" will return objects with names like "floodlightactivitygroup June 2015", "floodlightactivitygroup April 2015", or simply "floodlightactivitygroup 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivitygroup" will match objects with name "my floodlightactivitygroup activity", "floodlightactivitygroup 2015", or simply "floodlightactivitygroup".
  ##   advertiserId: string
  ##               : Select only floodlight activity groups with the specified advertiser ID. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
  ##   type: string
  ##       : Select only floodlight activity groups with the specified floodlight activity group type.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   floodlightConfigurationId: string
  ##                            : Select only floodlight activity groups with the specified floodlight configuration ID. Must specify either advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only floodlight activity groups with the specified IDs. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581947 = newJObject()
  var query_581948 = newJObject()
  add(path_581947, "profileId", newJString(profileId))
  add(query_581948, "fields", newJString(fields))
  add(query_581948, "pageToken", newJString(pageToken))
  add(query_581948, "quotaUser", newJString(quotaUser))
  add(query_581948, "sortField", newJString(sortField))
  add(query_581948, "alt", newJString(alt))
  add(query_581948, "searchString", newJString(searchString))
  add(query_581948, "advertiserId", newJString(advertiserId))
  add(query_581948, "type", newJString(`type`))
  add(query_581948, "oauth_token", newJString(oauthToken))
  add(query_581948, "userIp", newJString(userIp))
  add(query_581948, "floodlightConfigurationId",
      newJString(floodlightConfigurationId))
  add(query_581948, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_581948.add "ids", ids
  add(query_581948, "key", newJString(key))
  add(query_581948, "sortOrder", newJString(sortOrder))
  add(query_581948, "prettyPrint", newJBool(prettyPrint))
  result = call_581946.call(path_581947, query_581948, nil, nil, nil)

var dfareportingFloodlightActivityGroupsList* = Call_DfareportingFloodlightActivityGroupsList_581925(
    name: "dfareportingFloodlightActivityGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups",
    validator: validate_DfareportingFloodlightActivityGroupsList_581926,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivityGroupsList_581927,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsPatch_581983 = ref object of OpenApiRestCall_579437
proc url_DfareportingFloodlightActivityGroupsPatch_581985(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsPatch_581984(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight activity group. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581986 = path.getOrDefault("profileId")
  valid_581986 = validateParameter(valid_581986, JString, required = true,
                                 default = nil)
  if valid_581986 != nil:
    section.add "profileId", valid_581986
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Floodlight activity Group ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_581987 = query.getOrDefault("fields")
  valid_581987 = validateParameter(valid_581987, JString, required = false,
                                 default = nil)
  if valid_581987 != nil:
    section.add "fields", valid_581987
  var valid_581988 = query.getOrDefault("quotaUser")
  valid_581988 = validateParameter(valid_581988, JString, required = false,
                                 default = nil)
  if valid_581988 != nil:
    section.add "quotaUser", valid_581988
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_581989 = query.getOrDefault("id")
  valid_581989 = validateParameter(valid_581989, JString, required = true,
                                 default = nil)
  if valid_581989 != nil:
    section.add "id", valid_581989
  var valid_581990 = query.getOrDefault("alt")
  valid_581990 = validateParameter(valid_581990, JString, required = false,
                                 default = newJString("json"))
  if valid_581990 != nil:
    section.add "alt", valid_581990
  var valid_581991 = query.getOrDefault("oauth_token")
  valid_581991 = validateParameter(valid_581991, JString, required = false,
                                 default = nil)
  if valid_581991 != nil:
    section.add "oauth_token", valid_581991
  var valid_581992 = query.getOrDefault("userIp")
  valid_581992 = validateParameter(valid_581992, JString, required = false,
                                 default = nil)
  if valid_581992 != nil:
    section.add "userIp", valid_581992
  var valid_581993 = query.getOrDefault("key")
  valid_581993 = validateParameter(valid_581993, JString, required = false,
                                 default = nil)
  if valid_581993 != nil:
    section.add "key", valid_581993
  var valid_581994 = query.getOrDefault("prettyPrint")
  valid_581994 = validateParameter(valid_581994, JBool, required = false,
                                 default = newJBool(true))
  if valid_581994 != nil:
    section.add "prettyPrint", valid_581994
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581996: Call_DfareportingFloodlightActivityGroupsPatch_581983;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight activity group. This method supports patch semantics.
  ## 
  let valid = call_581996.validator(path, query, header, formData, body)
  let scheme = call_581996.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581996.url(scheme.get, call_581996.host, call_581996.base,
                         call_581996.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581996, url, valid)

proc call*(call_581997: Call_DfareportingFloodlightActivityGroupsPatch_581983;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivityGroupsPatch
  ## Updates an existing floodlight activity group. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Floodlight activity Group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_581998 = newJObject()
  var query_581999 = newJObject()
  var body_582000 = newJObject()
  add(path_581998, "profileId", newJString(profileId))
  add(query_581999, "fields", newJString(fields))
  add(query_581999, "quotaUser", newJString(quotaUser))
  add(query_581999, "id", newJString(id))
  add(query_581999, "alt", newJString(alt))
  add(query_581999, "oauth_token", newJString(oauthToken))
  add(query_581999, "userIp", newJString(userIp))
  add(query_581999, "key", newJString(key))
  if body != nil:
    body_582000 = body
  add(query_581999, "prettyPrint", newJBool(prettyPrint))
  result = call_581997.call(path_581998, query_581999, nil, nil, body_582000)

var dfareportingFloodlightActivityGroupsPatch* = Call_DfareportingFloodlightActivityGroupsPatch_581983(
    name: "dfareportingFloodlightActivityGroupsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups",
    validator: validate_DfareportingFloodlightActivityGroupsPatch_581984,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightActivityGroupsPatch_581985,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsGet_582001 = ref object of OpenApiRestCall_579437
proc url_DfareportingFloodlightActivityGroupsGet_582003(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsGet_582002(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one floodlight activity group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Floodlight activity Group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582004 = path.getOrDefault("profileId")
  valid_582004 = validateParameter(valid_582004, JString, required = true,
                                 default = nil)
  if valid_582004 != nil:
    section.add "profileId", valid_582004
  var valid_582005 = path.getOrDefault("id")
  valid_582005 = validateParameter(valid_582005, JString, required = true,
                                 default = nil)
  if valid_582005 != nil:
    section.add "id", valid_582005
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582006 = query.getOrDefault("fields")
  valid_582006 = validateParameter(valid_582006, JString, required = false,
                                 default = nil)
  if valid_582006 != nil:
    section.add "fields", valid_582006
  var valid_582007 = query.getOrDefault("quotaUser")
  valid_582007 = validateParameter(valid_582007, JString, required = false,
                                 default = nil)
  if valid_582007 != nil:
    section.add "quotaUser", valid_582007
  var valid_582008 = query.getOrDefault("alt")
  valid_582008 = validateParameter(valid_582008, JString, required = false,
                                 default = newJString("json"))
  if valid_582008 != nil:
    section.add "alt", valid_582008
  var valid_582009 = query.getOrDefault("oauth_token")
  valid_582009 = validateParameter(valid_582009, JString, required = false,
                                 default = nil)
  if valid_582009 != nil:
    section.add "oauth_token", valid_582009
  var valid_582010 = query.getOrDefault("userIp")
  valid_582010 = validateParameter(valid_582010, JString, required = false,
                                 default = nil)
  if valid_582010 != nil:
    section.add "userIp", valid_582010
  var valid_582011 = query.getOrDefault("key")
  valid_582011 = validateParameter(valid_582011, JString, required = false,
                                 default = nil)
  if valid_582011 != nil:
    section.add "key", valid_582011
  var valid_582012 = query.getOrDefault("prettyPrint")
  valid_582012 = validateParameter(valid_582012, JBool, required = false,
                                 default = newJBool(true))
  if valid_582012 != nil:
    section.add "prettyPrint", valid_582012
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582013: Call_DfareportingFloodlightActivityGroupsGet_582001;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one floodlight activity group by ID.
  ## 
  let valid = call_582013.validator(path, query, header, formData, body)
  let scheme = call_582013.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582013.url(scheme.get, call_582013.host, call_582013.base,
                         call_582013.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582013, url, valid)

proc call*(call_582014: Call_DfareportingFloodlightActivityGroupsGet_582001;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivityGroupsGet
  ## Gets one floodlight activity group by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Floodlight activity Group ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582015 = newJObject()
  var query_582016 = newJObject()
  add(path_582015, "profileId", newJString(profileId))
  add(query_582016, "fields", newJString(fields))
  add(query_582016, "quotaUser", newJString(quotaUser))
  add(query_582016, "alt", newJString(alt))
  add(query_582016, "oauth_token", newJString(oauthToken))
  add(query_582016, "userIp", newJString(userIp))
  add(path_582015, "id", newJString(id))
  add(query_582016, "key", newJString(key))
  add(query_582016, "prettyPrint", newJBool(prettyPrint))
  result = call_582014.call(path_582015, query_582016, nil, nil, nil)

var dfareportingFloodlightActivityGroupsGet* = Call_DfareportingFloodlightActivityGroupsGet_582001(
    name: "dfareportingFloodlightActivityGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups/{id}",
    validator: validate_DfareportingFloodlightActivityGroupsGet_582002,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivityGroupsGet_582003,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightConfigurationsUpdate_582033 = ref object of OpenApiRestCall_579437
proc url_DfareportingFloodlightConfigurationsUpdate_582035(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightConfigurations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightConfigurationsUpdate_582034(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight configuration.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582036 = path.getOrDefault("profileId")
  valid_582036 = validateParameter(valid_582036, JString, required = true,
                                 default = nil)
  if valid_582036 != nil:
    section.add "profileId", valid_582036
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582037 = query.getOrDefault("fields")
  valid_582037 = validateParameter(valid_582037, JString, required = false,
                                 default = nil)
  if valid_582037 != nil:
    section.add "fields", valid_582037
  var valid_582038 = query.getOrDefault("quotaUser")
  valid_582038 = validateParameter(valid_582038, JString, required = false,
                                 default = nil)
  if valid_582038 != nil:
    section.add "quotaUser", valid_582038
  var valid_582039 = query.getOrDefault("alt")
  valid_582039 = validateParameter(valid_582039, JString, required = false,
                                 default = newJString("json"))
  if valid_582039 != nil:
    section.add "alt", valid_582039
  var valid_582040 = query.getOrDefault("oauth_token")
  valid_582040 = validateParameter(valid_582040, JString, required = false,
                                 default = nil)
  if valid_582040 != nil:
    section.add "oauth_token", valid_582040
  var valid_582041 = query.getOrDefault("userIp")
  valid_582041 = validateParameter(valid_582041, JString, required = false,
                                 default = nil)
  if valid_582041 != nil:
    section.add "userIp", valid_582041
  var valid_582042 = query.getOrDefault("key")
  valid_582042 = validateParameter(valid_582042, JString, required = false,
                                 default = nil)
  if valid_582042 != nil:
    section.add "key", valid_582042
  var valid_582043 = query.getOrDefault("prettyPrint")
  valid_582043 = validateParameter(valid_582043, JBool, required = false,
                                 default = newJBool(true))
  if valid_582043 != nil:
    section.add "prettyPrint", valid_582043
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582045: Call_DfareportingFloodlightConfigurationsUpdate_582033;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight configuration.
  ## 
  let valid = call_582045.validator(path, query, header, formData, body)
  let scheme = call_582045.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582045.url(scheme.get, call_582045.host, call_582045.base,
                         call_582045.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582045, url, valid)

proc call*(call_582046: Call_DfareportingFloodlightConfigurationsUpdate_582033;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightConfigurationsUpdate
  ## Updates an existing floodlight configuration.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582047 = newJObject()
  var query_582048 = newJObject()
  var body_582049 = newJObject()
  add(path_582047, "profileId", newJString(profileId))
  add(query_582048, "fields", newJString(fields))
  add(query_582048, "quotaUser", newJString(quotaUser))
  add(query_582048, "alt", newJString(alt))
  add(query_582048, "oauth_token", newJString(oauthToken))
  add(query_582048, "userIp", newJString(userIp))
  add(query_582048, "key", newJString(key))
  if body != nil:
    body_582049 = body
  add(query_582048, "prettyPrint", newJBool(prettyPrint))
  result = call_582046.call(path_582047, query_582048, nil, nil, body_582049)

var dfareportingFloodlightConfigurationsUpdate* = Call_DfareportingFloodlightConfigurationsUpdate_582033(
    name: "dfareportingFloodlightConfigurationsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightConfigurations",
    validator: validate_DfareportingFloodlightConfigurationsUpdate_582034,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightConfigurationsUpdate_582035,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightConfigurationsList_582017 = ref object of OpenApiRestCall_579437
proc url_DfareportingFloodlightConfigurationsList_582019(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightConfigurations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightConfigurationsList_582018(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of floodlight configurations, possibly filtered.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582020 = path.getOrDefault("profileId")
  valid_582020 = validateParameter(valid_582020, JString, required = true,
                                 default = nil)
  if valid_582020 != nil:
    section.add "profileId", valid_582020
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   ids: JArray
  ##      : Set of IDs of floodlight configurations to retrieve. Required field; otherwise an empty list will be returned.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582021 = query.getOrDefault("fields")
  valid_582021 = validateParameter(valid_582021, JString, required = false,
                                 default = nil)
  if valid_582021 != nil:
    section.add "fields", valid_582021
  var valid_582022 = query.getOrDefault("quotaUser")
  valid_582022 = validateParameter(valid_582022, JString, required = false,
                                 default = nil)
  if valid_582022 != nil:
    section.add "quotaUser", valid_582022
  var valid_582023 = query.getOrDefault("alt")
  valid_582023 = validateParameter(valid_582023, JString, required = false,
                                 default = newJString("json"))
  if valid_582023 != nil:
    section.add "alt", valid_582023
  var valid_582024 = query.getOrDefault("oauth_token")
  valid_582024 = validateParameter(valid_582024, JString, required = false,
                                 default = nil)
  if valid_582024 != nil:
    section.add "oauth_token", valid_582024
  var valid_582025 = query.getOrDefault("userIp")
  valid_582025 = validateParameter(valid_582025, JString, required = false,
                                 default = nil)
  if valid_582025 != nil:
    section.add "userIp", valid_582025
  var valid_582026 = query.getOrDefault("ids")
  valid_582026 = validateParameter(valid_582026, JArray, required = false,
                                 default = nil)
  if valid_582026 != nil:
    section.add "ids", valid_582026
  var valid_582027 = query.getOrDefault("key")
  valid_582027 = validateParameter(valid_582027, JString, required = false,
                                 default = nil)
  if valid_582027 != nil:
    section.add "key", valid_582027
  var valid_582028 = query.getOrDefault("prettyPrint")
  valid_582028 = validateParameter(valid_582028, JBool, required = false,
                                 default = newJBool(true))
  if valid_582028 != nil:
    section.add "prettyPrint", valid_582028
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582029: Call_DfareportingFloodlightConfigurationsList_582017;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of floodlight configurations, possibly filtered.
  ## 
  let valid = call_582029.validator(path, query, header, formData, body)
  let scheme = call_582029.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582029.url(scheme.get, call_582029.host, call_582029.base,
                         call_582029.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582029, url, valid)

proc call*(call_582030: Call_DfareportingFloodlightConfigurationsList_582017;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          ids: JsonNode = nil; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightConfigurationsList
  ## Retrieves a list of floodlight configurations, possibly filtered.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   ids: JArray
  ##      : Set of IDs of floodlight configurations to retrieve. Required field; otherwise an empty list will be returned.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582031 = newJObject()
  var query_582032 = newJObject()
  add(path_582031, "profileId", newJString(profileId))
  add(query_582032, "fields", newJString(fields))
  add(query_582032, "quotaUser", newJString(quotaUser))
  add(query_582032, "alt", newJString(alt))
  add(query_582032, "oauth_token", newJString(oauthToken))
  add(query_582032, "userIp", newJString(userIp))
  if ids != nil:
    query_582032.add "ids", ids
  add(query_582032, "key", newJString(key))
  add(query_582032, "prettyPrint", newJBool(prettyPrint))
  result = call_582030.call(path_582031, query_582032, nil, nil, nil)

var dfareportingFloodlightConfigurationsList* = Call_DfareportingFloodlightConfigurationsList_582017(
    name: "dfareportingFloodlightConfigurationsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightConfigurations",
    validator: validate_DfareportingFloodlightConfigurationsList_582018,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightConfigurationsList_582019,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightConfigurationsPatch_582050 = ref object of OpenApiRestCall_579437
proc url_DfareportingFloodlightConfigurationsPatch_582052(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightConfigurations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightConfigurationsPatch_582051(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight configuration. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582053 = path.getOrDefault("profileId")
  valid_582053 = validateParameter(valid_582053, JString, required = true,
                                 default = nil)
  if valid_582053 != nil:
    section.add "profileId", valid_582053
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Floodlight configuration ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582054 = query.getOrDefault("fields")
  valid_582054 = validateParameter(valid_582054, JString, required = false,
                                 default = nil)
  if valid_582054 != nil:
    section.add "fields", valid_582054
  var valid_582055 = query.getOrDefault("quotaUser")
  valid_582055 = validateParameter(valid_582055, JString, required = false,
                                 default = nil)
  if valid_582055 != nil:
    section.add "quotaUser", valid_582055
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_582056 = query.getOrDefault("id")
  valid_582056 = validateParameter(valid_582056, JString, required = true,
                                 default = nil)
  if valid_582056 != nil:
    section.add "id", valid_582056
  var valid_582057 = query.getOrDefault("alt")
  valid_582057 = validateParameter(valid_582057, JString, required = false,
                                 default = newJString("json"))
  if valid_582057 != nil:
    section.add "alt", valid_582057
  var valid_582058 = query.getOrDefault("oauth_token")
  valid_582058 = validateParameter(valid_582058, JString, required = false,
                                 default = nil)
  if valid_582058 != nil:
    section.add "oauth_token", valid_582058
  var valid_582059 = query.getOrDefault("userIp")
  valid_582059 = validateParameter(valid_582059, JString, required = false,
                                 default = nil)
  if valid_582059 != nil:
    section.add "userIp", valid_582059
  var valid_582060 = query.getOrDefault("key")
  valid_582060 = validateParameter(valid_582060, JString, required = false,
                                 default = nil)
  if valid_582060 != nil:
    section.add "key", valid_582060
  var valid_582061 = query.getOrDefault("prettyPrint")
  valid_582061 = validateParameter(valid_582061, JBool, required = false,
                                 default = newJBool(true))
  if valid_582061 != nil:
    section.add "prettyPrint", valid_582061
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582063: Call_DfareportingFloodlightConfigurationsPatch_582050;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight configuration. This method supports patch semantics.
  ## 
  let valid = call_582063.validator(path, query, header, formData, body)
  let scheme = call_582063.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582063.url(scheme.get, call_582063.host, call_582063.base,
                         call_582063.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582063, url, valid)

proc call*(call_582064: Call_DfareportingFloodlightConfigurationsPatch_582050;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightConfigurationsPatch
  ## Updates an existing floodlight configuration. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Floodlight configuration ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582065 = newJObject()
  var query_582066 = newJObject()
  var body_582067 = newJObject()
  add(path_582065, "profileId", newJString(profileId))
  add(query_582066, "fields", newJString(fields))
  add(query_582066, "quotaUser", newJString(quotaUser))
  add(query_582066, "id", newJString(id))
  add(query_582066, "alt", newJString(alt))
  add(query_582066, "oauth_token", newJString(oauthToken))
  add(query_582066, "userIp", newJString(userIp))
  add(query_582066, "key", newJString(key))
  if body != nil:
    body_582067 = body
  add(query_582066, "prettyPrint", newJBool(prettyPrint))
  result = call_582064.call(path_582065, query_582066, nil, nil, body_582067)

var dfareportingFloodlightConfigurationsPatch* = Call_DfareportingFloodlightConfigurationsPatch_582050(
    name: "dfareportingFloodlightConfigurationsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightConfigurations",
    validator: validate_DfareportingFloodlightConfigurationsPatch_582051,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightConfigurationsPatch_582052,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightConfigurationsGet_582068 = ref object of OpenApiRestCall_579437
proc url_DfareportingFloodlightConfigurationsGet_582070(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightConfigurations/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightConfigurationsGet_582069(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one floodlight configuration by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Floodlight configuration ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582071 = path.getOrDefault("profileId")
  valid_582071 = validateParameter(valid_582071, JString, required = true,
                                 default = nil)
  if valid_582071 != nil:
    section.add "profileId", valid_582071
  var valid_582072 = path.getOrDefault("id")
  valid_582072 = validateParameter(valid_582072, JString, required = true,
                                 default = nil)
  if valid_582072 != nil:
    section.add "id", valid_582072
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582073 = query.getOrDefault("fields")
  valid_582073 = validateParameter(valid_582073, JString, required = false,
                                 default = nil)
  if valid_582073 != nil:
    section.add "fields", valid_582073
  var valid_582074 = query.getOrDefault("quotaUser")
  valid_582074 = validateParameter(valid_582074, JString, required = false,
                                 default = nil)
  if valid_582074 != nil:
    section.add "quotaUser", valid_582074
  var valid_582075 = query.getOrDefault("alt")
  valid_582075 = validateParameter(valid_582075, JString, required = false,
                                 default = newJString("json"))
  if valid_582075 != nil:
    section.add "alt", valid_582075
  var valid_582076 = query.getOrDefault("oauth_token")
  valid_582076 = validateParameter(valid_582076, JString, required = false,
                                 default = nil)
  if valid_582076 != nil:
    section.add "oauth_token", valid_582076
  var valid_582077 = query.getOrDefault("userIp")
  valid_582077 = validateParameter(valid_582077, JString, required = false,
                                 default = nil)
  if valid_582077 != nil:
    section.add "userIp", valid_582077
  var valid_582078 = query.getOrDefault("key")
  valid_582078 = validateParameter(valid_582078, JString, required = false,
                                 default = nil)
  if valid_582078 != nil:
    section.add "key", valid_582078
  var valid_582079 = query.getOrDefault("prettyPrint")
  valid_582079 = validateParameter(valid_582079, JBool, required = false,
                                 default = newJBool(true))
  if valid_582079 != nil:
    section.add "prettyPrint", valid_582079
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582080: Call_DfareportingFloodlightConfigurationsGet_582068;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one floodlight configuration by ID.
  ## 
  let valid = call_582080.validator(path, query, header, formData, body)
  let scheme = call_582080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582080.url(scheme.get, call_582080.host, call_582080.base,
                         call_582080.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582080, url, valid)

proc call*(call_582081: Call_DfareportingFloodlightConfigurationsGet_582068;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightConfigurationsGet
  ## Gets one floodlight configuration by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Floodlight configuration ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582082 = newJObject()
  var query_582083 = newJObject()
  add(path_582082, "profileId", newJString(profileId))
  add(query_582083, "fields", newJString(fields))
  add(query_582083, "quotaUser", newJString(quotaUser))
  add(query_582083, "alt", newJString(alt))
  add(query_582083, "oauth_token", newJString(oauthToken))
  add(query_582083, "userIp", newJString(userIp))
  add(path_582082, "id", newJString(id))
  add(query_582083, "key", newJString(key))
  add(query_582083, "prettyPrint", newJBool(prettyPrint))
  result = call_582081.call(path_582082, query_582083, nil, nil, nil)

var dfareportingFloodlightConfigurationsGet* = Call_DfareportingFloodlightConfigurationsGet_582068(
    name: "dfareportingFloodlightConfigurationsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightConfigurations/{id}",
    validator: validate_DfareportingFloodlightConfigurationsGet_582069,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightConfigurationsGet_582070,
    schemes: {Scheme.Https})
type
  Call_DfareportingLanguagesList_582084 = ref object of OpenApiRestCall_579437
proc url_DfareportingLanguagesList_582086(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/languages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingLanguagesList_582085(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of languages.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582087 = path.getOrDefault("profileId")
  valid_582087 = validateParameter(valid_582087, JString, required = true,
                                 default = nil)
  if valid_582087 != nil:
    section.add "profileId", valid_582087
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582088 = query.getOrDefault("fields")
  valid_582088 = validateParameter(valid_582088, JString, required = false,
                                 default = nil)
  if valid_582088 != nil:
    section.add "fields", valid_582088
  var valid_582089 = query.getOrDefault("quotaUser")
  valid_582089 = validateParameter(valid_582089, JString, required = false,
                                 default = nil)
  if valid_582089 != nil:
    section.add "quotaUser", valid_582089
  var valid_582090 = query.getOrDefault("alt")
  valid_582090 = validateParameter(valid_582090, JString, required = false,
                                 default = newJString("json"))
  if valid_582090 != nil:
    section.add "alt", valid_582090
  var valid_582091 = query.getOrDefault("oauth_token")
  valid_582091 = validateParameter(valid_582091, JString, required = false,
                                 default = nil)
  if valid_582091 != nil:
    section.add "oauth_token", valid_582091
  var valid_582092 = query.getOrDefault("userIp")
  valid_582092 = validateParameter(valid_582092, JString, required = false,
                                 default = nil)
  if valid_582092 != nil:
    section.add "userIp", valid_582092
  var valid_582093 = query.getOrDefault("key")
  valid_582093 = validateParameter(valid_582093, JString, required = false,
                                 default = nil)
  if valid_582093 != nil:
    section.add "key", valid_582093
  var valid_582094 = query.getOrDefault("prettyPrint")
  valid_582094 = validateParameter(valid_582094, JBool, required = false,
                                 default = newJBool(true))
  if valid_582094 != nil:
    section.add "prettyPrint", valid_582094
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582095: Call_DfareportingLanguagesList_582084; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of languages.
  ## 
  let valid = call_582095.validator(path, query, header, formData, body)
  let scheme = call_582095.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582095.url(scheme.get, call_582095.host, call_582095.base,
                         call_582095.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582095, url, valid)

proc call*(call_582096: Call_DfareportingLanguagesList_582084; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingLanguagesList
  ## Retrieves a list of languages.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582097 = newJObject()
  var query_582098 = newJObject()
  add(path_582097, "profileId", newJString(profileId))
  add(query_582098, "fields", newJString(fields))
  add(query_582098, "quotaUser", newJString(quotaUser))
  add(query_582098, "alt", newJString(alt))
  add(query_582098, "oauth_token", newJString(oauthToken))
  add(query_582098, "userIp", newJString(userIp))
  add(query_582098, "key", newJString(key))
  add(query_582098, "prettyPrint", newJBool(prettyPrint))
  result = call_582096.call(path_582097, query_582098, nil, nil, nil)

var dfareportingLanguagesList* = Call_DfareportingLanguagesList_582084(
    name: "dfareportingLanguagesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/languages",
    validator: validate_DfareportingLanguagesList_582085,
    base: "/dfareporting/v3.2", url: url_DfareportingLanguagesList_582086,
    schemes: {Scheme.Https})
type
  Call_DfareportingMetrosList_582099 = ref object of OpenApiRestCall_579437
proc url_DfareportingMetrosList_582101(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/metros")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMetrosList_582100(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of metros.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582102 = path.getOrDefault("profileId")
  valid_582102 = validateParameter(valid_582102, JString, required = true,
                                 default = nil)
  if valid_582102 != nil:
    section.add "profileId", valid_582102
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582103 = query.getOrDefault("fields")
  valid_582103 = validateParameter(valid_582103, JString, required = false,
                                 default = nil)
  if valid_582103 != nil:
    section.add "fields", valid_582103
  var valid_582104 = query.getOrDefault("quotaUser")
  valid_582104 = validateParameter(valid_582104, JString, required = false,
                                 default = nil)
  if valid_582104 != nil:
    section.add "quotaUser", valid_582104
  var valid_582105 = query.getOrDefault("alt")
  valid_582105 = validateParameter(valid_582105, JString, required = false,
                                 default = newJString("json"))
  if valid_582105 != nil:
    section.add "alt", valid_582105
  var valid_582106 = query.getOrDefault("oauth_token")
  valid_582106 = validateParameter(valid_582106, JString, required = false,
                                 default = nil)
  if valid_582106 != nil:
    section.add "oauth_token", valid_582106
  var valid_582107 = query.getOrDefault("userIp")
  valid_582107 = validateParameter(valid_582107, JString, required = false,
                                 default = nil)
  if valid_582107 != nil:
    section.add "userIp", valid_582107
  var valid_582108 = query.getOrDefault("key")
  valid_582108 = validateParameter(valid_582108, JString, required = false,
                                 default = nil)
  if valid_582108 != nil:
    section.add "key", valid_582108
  var valid_582109 = query.getOrDefault("prettyPrint")
  valid_582109 = validateParameter(valid_582109, JBool, required = false,
                                 default = newJBool(true))
  if valid_582109 != nil:
    section.add "prettyPrint", valid_582109
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582110: Call_DfareportingMetrosList_582099; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of metros.
  ## 
  let valid = call_582110.validator(path, query, header, formData, body)
  let scheme = call_582110.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582110.url(scheme.get, call_582110.host, call_582110.base,
                         call_582110.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582110, url, valid)

proc call*(call_582111: Call_DfareportingMetrosList_582099; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingMetrosList
  ## Retrieves a list of metros.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582112 = newJObject()
  var query_582113 = newJObject()
  add(path_582112, "profileId", newJString(profileId))
  add(query_582113, "fields", newJString(fields))
  add(query_582113, "quotaUser", newJString(quotaUser))
  add(query_582113, "alt", newJString(alt))
  add(query_582113, "oauth_token", newJString(oauthToken))
  add(query_582113, "userIp", newJString(userIp))
  add(query_582113, "key", newJString(key))
  add(query_582113, "prettyPrint", newJBool(prettyPrint))
  result = call_582111.call(path_582112, query_582113, nil, nil, nil)

var dfareportingMetrosList* = Call_DfareportingMetrosList_582099(
    name: "dfareportingMetrosList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/metros",
    validator: validate_DfareportingMetrosList_582100, base: "/dfareporting/v3.2",
    url: url_DfareportingMetrosList_582101, schemes: {Scheme.Https})
type
  Call_DfareportingMobileAppsList_582114 = ref object of OpenApiRestCall_579437
proc url_DfareportingMobileAppsList_582116(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/mobileApps")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMobileAppsList_582115(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves list of available mobile apps.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582117 = path.getOrDefault("profileId")
  valid_582117 = validateParameter(valid_582117, JString, required = true,
                                 default = nil)
  if valid_582117 != nil:
    section.add "profileId", valid_582117
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "app*2015" will return objects with names like "app Jan 2018", "app Jan 2018", or simply "app 2018". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "app" will match objects with name "my app", "app 2018", or simply "app".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   directories: JArray
  ##              : Select only apps from these directories.
  ##   ids: JArray
  ##      : Select only apps with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582118 = query.getOrDefault("fields")
  valid_582118 = validateParameter(valid_582118, JString, required = false,
                                 default = nil)
  if valid_582118 != nil:
    section.add "fields", valid_582118
  var valid_582119 = query.getOrDefault("pageToken")
  valid_582119 = validateParameter(valid_582119, JString, required = false,
                                 default = nil)
  if valid_582119 != nil:
    section.add "pageToken", valid_582119
  var valid_582120 = query.getOrDefault("quotaUser")
  valid_582120 = validateParameter(valid_582120, JString, required = false,
                                 default = nil)
  if valid_582120 != nil:
    section.add "quotaUser", valid_582120
  var valid_582121 = query.getOrDefault("alt")
  valid_582121 = validateParameter(valid_582121, JString, required = false,
                                 default = newJString("json"))
  if valid_582121 != nil:
    section.add "alt", valid_582121
  var valid_582122 = query.getOrDefault("searchString")
  valid_582122 = validateParameter(valid_582122, JString, required = false,
                                 default = nil)
  if valid_582122 != nil:
    section.add "searchString", valid_582122
  var valid_582123 = query.getOrDefault("oauth_token")
  valid_582123 = validateParameter(valid_582123, JString, required = false,
                                 default = nil)
  if valid_582123 != nil:
    section.add "oauth_token", valid_582123
  var valid_582124 = query.getOrDefault("userIp")
  valid_582124 = validateParameter(valid_582124, JString, required = false,
                                 default = nil)
  if valid_582124 != nil:
    section.add "userIp", valid_582124
  var valid_582125 = query.getOrDefault("maxResults")
  valid_582125 = validateParameter(valid_582125, JInt, required = false,
                                 default = newJInt(1000))
  if valid_582125 != nil:
    section.add "maxResults", valid_582125
  var valid_582126 = query.getOrDefault("directories")
  valid_582126 = validateParameter(valid_582126, JArray, required = false,
                                 default = nil)
  if valid_582126 != nil:
    section.add "directories", valid_582126
  var valid_582127 = query.getOrDefault("ids")
  valid_582127 = validateParameter(valid_582127, JArray, required = false,
                                 default = nil)
  if valid_582127 != nil:
    section.add "ids", valid_582127
  var valid_582128 = query.getOrDefault("key")
  valid_582128 = validateParameter(valid_582128, JString, required = false,
                                 default = nil)
  if valid_582128 != nil:
    section.add "key", valid_582128
  var valid_582129 = query.getOrDefault("prettyPrint")
  valid_582129 = validateParameter(valid_582129, JBool, required = false,
                                 default = newJBool(true))
  if valid_582129 != nil:
    section.add "prettyPrint", valid_582129
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582130: Call_DfareportingMobileAppsList_582114; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves list of available mobile apps.
  ## 
  let valid = call_582130.validator(path, query, header, formData, body)
  let scheme = call_582130.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582130.url(scheme.get, call_582130.host, call_582130.base,
                         call_582130.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582130, url, valid)

proc call*(call_582131: Call_DfareportingMobileAppsList_582114; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          alt: string = "json"; searchString: string = ""; oauthToken: string = "";
          userIp: string = ""; maxResults: int = 1000; directories: JsonNode = nil;
          ids: JsonNode = nil; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingMobileAppsList
  ## Retrieves list of available mobile apps.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "app*2015" will return objects with names like "app Jan 2018", "app Jan 2018", or simply "app 2018". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "app" will match objects with name "my app", "app 2018", or simply "app".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   directories: JArray
  ##              : Select only apps from these directories.
  ##   ids: JArray
  ##      : Select only apps with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582132 = newJObject()
  var query_582133 = newJObject()
  add(path_582132, "profileId", newJString(profileId))
  add(query_582133, "fields", newJString(fields))
  add(query_582133, "pageToken", newJString(pageToken))
  add(query_582133, "quotaUser", newJString(quotaUser))
  add(query_582133, "alt", newJString(alt))
  add(query_582133, "searchString", newJString(searchString))
  add(query_582133, "oauth_token", newJString(oauthToken))
  add(query_582133, "userIp", newJString(userIp))
  add(query_582133, "maxResults", newJInt(maxResults))
  if directories != nil:
    query_582133.add "directories", directories
  if ids != nil:
    query_582133.add "ids", ids
  add(query_582133, "key", newJString(key))
  add(query_582133, "prettyPrint", newJBool(prettyPrint))
  result = call_582131.call(path_582132, query_582133, nil, nil, nil)

var dfareportingMobileAppsList* = Call_DfareportingMobileAppsList_582114(
    name: "dfareportingMobileAppsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/mobileApps",
    validator: validate_DfareportingMobileAppsList_582115,
    base: "/dfareporting/v3.2", url: url_DfareportingMobileAppsList_582116,
    schemes: {Scheme.Https})
type
  Call_DfareportingMobileAppsGet_582134 = ref object of OpenApiRestCall_579437
proc url_DfareportingMobileAppsGet_582136(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/mobileApps/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMobileAppsGet_582135(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one mobile app by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Mobile app ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582137 = path.getOrDefault("profileId")
  valid_582137 = validateParameter(valid_582137, JString, required = true,
                                 default = nil)
  if valid_582137 != nil:
    section.add "profileId", valid_582137
  var valid_582138 = path.getOrDefault("id")
  valid_582138 = validateParameter(valid_582138, JString, required = true,
                                 default = nil)
  if valid_582138 != nil:
    section.add "id", valid_582138
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582139 = query.getOrDefault("fields")
  valid_582139 = validateParameter(valid_582139, JString, required = false,
                                 default = nil)
  if valid_582139 != nil:
    section.add "fields", valid_582139
  var valid_582140 = query.getOrDefault("quotaUser")
  valid_582140 = validateParameter(valid_582140, JString, required = false,
                                 default = nil)
  if valid_582140 != nil:
    section.add "quotaUser", valid_582140
  var valid_582141 = query.getOrDefault("alt")
  valid_582141 = validateParameter(valid_582141, JString, required = false,
                                 default = newJString("json"))
  if valid_582141 != nil:
    section.add "alt", valid_582141
  var valid_582142 = query.getOrDefault("oauth_token")
  valid_582142 = validateParameter(valid_582142, JString, required = false,
                                 default = nil)
  if valid_582142 != nil:
    section.add "oauth_token", valid_582142
  var valid_582143 = query.getOrDefault("userIp")
  valid_582143 = validateParameter(valid_582143, JString, required = false,
                                 default = nil)
  if valid_582143 != nil:
    section.add "userIp", valid_582143
  var valid_582144 = query.getOrDefault("key")
  valid_582144 = validateParameter(valid_582144, JString, required = false,
                                 default = nil)
  if valid_582144 != nil:
    section.add "key", valid_582144
  var valid_582145 = query.getOrDefault("prettyPrint")
  valid_582145 = validateParameter(valid_582145, JBool, required = false,
                                 default = newJBool(true))
  if valid_582145 != nil:
    section.add "prettyPrint", valid_582145
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582146: Call_DfareportingMobileAppsGet_582134; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one mobile app by ID.
  ## 
  let valid = call_582146.validator(path, query, header, formData, body)
  let scheme = call_582146.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582146.url(scheme.get, call_582146.host, call_582146.base,
                         call_582146.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582146, url, valid)

proc call*(call_582147: Call_DfareportingMobileAppsGet_582134; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingMobileAppsGet
  ## Gets one mobile app by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Mobile app ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582148 = newJObject()
  var query_582149 = newJObject()
  add(path_582148, "profileId", newJString(profileId))
  add(query_582149, "fields", newJString(fields))
  add(query_582149, "quotaUser", newJString(quotaUser))
  add(query_582149, "alt", newJString(alt))
  add(query_582149, "oauth_token", newJString(oauthToken))
  add(query_582149, "userIp", newJString(userIp))
  add(path_582148, "id", newJString(id))
  add(query_582149, "key", newJString(key))
  add(query_582149, "prettyPrint", newJBool(prettyPrint))
  result = call_582147.call(path_582148, query_582149, nil, nil, nil)

var dfareportingMobileAppsGet* = Call_DfareportingMobileAppsGet_582134(
    name: "dfareportingMobileAppsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/mobileApps/{id}",
    validator: validate_DfareportingMobileAppsGet_582135,
    base: "/dfareporting/v3.2", url: url_DfareportingMobileAppsGet_582136,
    schemes: {Scheme.Https})
type
  Call_DfareportingMobileCarriersList_582150 = ref object of OpenApiRestCall_579437
proc url_DfareportingMobileCarriersList_582152(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/mobileCarriers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMobileCarriersList_582151(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of mobile carriers.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582153 = path.getOrDefault("profileId")
  valid_582153 = validateParameter(valid_582153, JString, required = true,
                                 default = nil)
  if valid_582153 != nil:
    section.add "profileId", valid_582153
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582154 = query.getOrDefault("fields")
  valid_582154 = validateParameter(valid_582154, JString, required = false,
                                 default = nil)
  if valid_582154 != nil:
    section.add "fields", valid_582154
  var valid_582155 = query.getOrDefault("quotaUser")
  valid_582155 = validateParameter(valid_582155, JString, required = false,
                                 default = nil)
  if valid_582155 != nil:
    section.add "quotaUser", valid_582155
  var valid_582156 = query.getOrDefault("alt")
  valid_582156 = validateParameter(valid_582156, JString, required = false,
                                 default = newJString("json"))
  if valid_582156 != nil:
    section.add "alt", valid_582156
  var valid_582157 = query.getOrDefault("oauth_token")
  valid_582157 = validateParameter(valid_582157, JString, required = false,
                                 default = nil)
  if valid_582157 != nil:
    section.add "oauth_token", valid_582157
  var valid_582158 = query.getOrDefault("userIp")
  valid_582158 = validateParameter(valid_582158, JString, required = false,
                                 default = nil)
  if valid_582158 != nil:
    section.add "userIp", valid_582158
  var valid_582159 = query.getOrDefault("key")
  valid_582159 = validateParameter(valid_582159, JString, required = false,
                                 default = nil)
  if valid_582159 != nil:
    section.add "key", valid_582159
  var valid_582160 = query.getOrDefault("prettyPrint")
  valid_582160 = validateParameter(valid_582160, JBool, required = false,
                                 default = newJBool(true))
  if valid_582160 != nil:
    section.add "prettyPrint", valid_582160
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582161: Call_DfareportingMobileCarriersList_582150; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of mobile carriers.
  ## 
  let valid = call_582161.validator(path, query, header, formData, body)
  let scheme = call_582161.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582161.url(scheme.get, call_582161.host, call_582161.base,
                         call_582161.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582161, url, valid)

proc call*(call_582162: Call_DfareportingMobileCarriersList_582150;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingMobileCarriersList
  ## Retrieves a list of mobile carriers.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582163 = newJObject()
  var query_582164 = newJObject()
  add(path_582163, "profileId", newJString(profileId))
  add(query_582164, "fields", newJString(fields))
  add(query_582164, "quotaUser", newJString(quotaUser))
  add(query_582164, "alt", newJString(alt))
  add(query_582164, "oauth_token", newJString(oauthToken))
  add(query_582164, "userIp", newJString(userIp))
  add(query_582164, "key", newJString(key))
  add(query_582164, "prettyPrint", newJBool(prettyPrint))
  result = call_582162.call(path_582163, query_582164, nil, nil, nil)

var dfareportingMobileCarriersList* = Call_DfareportingMobileCarriersList_582150(
    name: "dfareportingMobileCarriersList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/mobileCarriers",
    validator: validate_DfareportingMobileCarriersList_582151,
    base: "/dfareporting/v3.2", url: url_DfareportingMobileCarriersList_582152,
    schemes: {Scheme.Https})
type
  Call_DfareportingMobileCarriersGet_582165 = ref object of OpenApiRestCall_579437
proc url_DfareportingMobileCarriersGet_582167(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/mobileCarriers/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMobileCarriersGet_582166(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one mobile carrier by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Mobile carrier ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582168 = path.getOrDefault("profileId")
  valid_582168 = validateParameter(valid_582168, JString, required = true,
                                 default = nil)
  if valid_582168 != nil:
    section.add "profileId", valid_582168
  var valid_582169 = path.getOrDefault("id")
  valid_582169 = validateParameter(valid_582169, JString, required = true,
                                 default = nil)
  if valid_582169 != nil:
    section.add "id", valid_582169
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582170 = query.getOrDefault("fields")
  valid_582170 = validateParameter(valid_582170, JString, required = false,
                                 default = nil)
  if valid_582170 != nil:
    section.add "fields", valid_582170
  var valid_582171 = query.getOrDefault("quotaUser")
  valid_582171 = validateParameter(valid_582171, JString, required = false,
                                 default = nil)
  if valid_582171 != nil:
    section.add "quotaUser", valid_582171
  var valid_582172 = query.getOrDefault("alt")
  valid_582172 = validateParameter(valid_582172, JString, required = false,
                                 default = newJString("json"))
  if valid_582172 != nil:
    section.add "alt", valid_582172
  var valid_582173 = query.getOrDefault("oauth_token")
  valid_582173 = validateParameter(valid_582173, JString, required = false,
                                 default = nil)
  if valid_582173 != nil:
    section.add "oauth_token", valid_582173
  var valid_582174 = query.getOrDefault("userIp")
  valid_582174 = validateParameter(valid_582174, JString, required = false,
                                 default = nil)
  if valid_582174 != nil:
    section.add "userIp", valid_582174
  var valid_582175 = query.getOrDefault("key")
  valid_582175 = validateParameter(valid_582175, JString, required = false,
                                 default = nil)
  if valid_582175 != nil:
    section.add "key", valid_582175
  var valid_582176 = query.getOrDefault("prettyPrint")
  valid_582176 = validateParameter(valid_582176, JBool, required = false,
                                 default = newJBool(true))
  if valid_582176 != nil:
    section.add "prettyPrint", valid_582176
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582177: Call_DfareportingMobileCarriersGet_582165; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one mobile carrier by ID.
  ## 
  let valid = call_582177.validator(path, query, header, formData, body)
  let scheme = call_582177.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582177.url(scheme.get, call_582177.host, call_582177.base,
                         call_582177.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582177, url, valid)

proc call*(call_582178: Call_DfareportingMobileCarriersGet_582165;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingMobileCarriersGet
  ## Gets one mobile carrier by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Mobile carrier ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582179 = newJObject()
  var query_582180 = newJObject()
  add(path_582179, "profileId", newJString(profileId))
  add(query_582180, "fields", newJString(fields))
  add(query_582180, "quotaUser", newJString(quotaUser))
  add(query_582180, "alt", newJString(alt))
  add(query_582180, "oauth_token", newJString(oauthToken))
  add(query_582180, "userIp", newJString(userIp))
  add(path_582179, "id", newJString(id))
  add(query_582180, "key", newJString(key))
  add(query_582180, "prettyPrint", newJBool(prettyPrint))
  result = call_582178.call(path_582179, query_582180, nil, nil, nil)

var dfareportingMobileCarriersGet* = Call_DfareportingMobileCarriersGet_582165(
    name: "dfareportingMobileCarriersGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/mobileCarriers/{id}",
    validator: validate_DfareportingMobileCarriersGet_582166,
    base: "/dfareporting/v3.2", url: url_DfareportingMobileCarriersGet_582167,
    schemes: {Scheme.Https})
type
  Call_DfareportingOperatingSystemVersionsList_582181 = ref object of OpenApiRestCall_579437
proc url_DfareportingOperatingSystemVersionsList_582183(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/operatingSystemVersions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOperatingSystemVersionsList_582182(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of operating system versions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582184 = path.getOrDefault("profileId")
  valid_582184 = validateParameter(valid_582184, JString, required = true,
                                 default = nil)
  if valid_582184 != nil:
    section.add "profileId", valid_582184
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582185 = query.getOrDefault("fields")
  valid_582185 = validateParameter(valid_582185, JString, required = false,
                                 default = nil)
  if valid_582185 != nil:
    section.add "fields", valid_582185
  var valid_582186 = query.getOrDefault("quotaUser")
  valid_582186 = validateParameter(valid_582186, JString, required = false,
                                 default = nil)
  if valid_582186 != nil:
    section.add "quotaUser", valid_582186
  var valid_582187 = query.getOrDefault("alt")
  valid_582187 = validateParameter(valid_582187, JString, required = false,
                                 default = newJString("json"))
  if valid_582187 != nil:
    section.add "alt", valid_582187
  var valid_582188 = query.getOrDefault("oauth_token")
  valid_582188 = validateParameter(valid_582188, JString, required = false,
                                 default = nil)
  if valid_582188 != nil:
    section.add "oauth_token", valid_582188
  var valid_582189 = query.getOrDefault("userIp")
  valid_582189 = validateParameter(valid_582189, JString, required = false,
                                 default = nil)
  if valid_582189 != nil:
    section.add "userIp", valid_582189
  var valid_582190 = query.getOrDefault("key")
  valid_582190 = validateParameter(valid_582190, JString, required = false,
                                 default = nil)
  if valid_582190 != nil:
    section.add "key", valid_582190
  var valid_582191 = query.getOrDefault("prettyPrint")
  valid_582191 = validateParameter(valid_582191, JBool, required = false,
                                 default = newJBool(true))
  if valid_582191 != nil:
    section.add "prettyPrint", valid_582191
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582192: Call_DfareportingOperatingSystemVersionsList_582181;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of operating system versions.
  ## 
  let valid = call_582192.validator(path, query, header, formData, body)
  let scheme = call_582192.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582192.url(scheme.get, call_582192.host, call_582192.base,
                         call_582192.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582192, url, valid)

proc call*(call_582193: Call_DfareportingOperatingSystemVersionsList_582181;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingOperatingSystemVersionsList
  ## Retrieves a list of operating system versions.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582194 = newJObject()
  var query_582195 = newJObject()
  add(path_582194, "profileId", newJString(profileId))
  add(query_582195, "fields", newJString(fields))
  add(query_582195, "quotaUser", newJString(quotaUser))
  add(query_582195, "alt", newJString(alt))
  add(query_582195, "oauth_token", newJString(oauthToken))
  add(query_582195, "userIp", newJString(userIp))
  add(query_582195, "key", newJString(key))
  add(query_582195, "prettyPrint", newJBool(prettyPrint))
  result = call_582193.call(path_582194, query_582195, nil, nil, nil)

var dfareportingOperatingSystemVersionsList* = Call_DfareportingOperatingSystemVersionsList_582181(
    name: "dfareportingOperatingSystemVersionsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/operatingSystemVersions",
    validator: validate_DfareportingOperatingSystemVersionsList_582182,
    base: "/dfareporting/v3.2", url: url_DfareportingOperatingSystemVersionsList_582183,
    schemes: {Scheme.Https})
type
  Call_DfareportingOperatingSystemVersionsGet_582196 = ref object of OpenApiRestCall_579437
proc url_DfareportingOperatingSystemVersionsGet_582198(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/operatingSystemVersions/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOperatingSystemVersionsGet_582197(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one operating system version by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Operating system version ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582199 = path.getOrDefault("profileId")
  valid_582199 = validateParameter(valid_582199, JString, required = true,
                                 default = nil)
  if valid_582199 != nil:
    section.add "profileId", valid_582199
  var valid_582200 = path.getOrDefault("id")
  valid_582200 = validateParameter(valid_582200, JString, required = true,
                                 default = nil)
  if valid_582200 != nil:
    section.add "id", valid_582200
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582201 = query.getOrDefault("fields")
  valid_582201 = validateParameter(valid_582201, JString, required = false,
                                 default = nil)
  if valid_582201 != nil:
    section.add "fields", valid_582201
  var valid_582202 = query.getOrDefault("quotaUser")
  valid_582202 = validateParameter(valid_582202, JString, required = false,
                                 default = nil)
  if valid_582202 != nil:
    section.add "quotaUser", valid_582202
  var valid_582203 = query.getOrDefault("alt")
  valid_582203 = validateParameter(valid_582203, JString, required = false,
                                 default = newJString("json"))
  if valid_582203 != nil:
    section.add "alt", valid_582203
  var valid_582204 = query.getOrDefault("oauth_token")
  valid_582204 = validateParameter(valid_582204, JString, required = false,
                                 default = nil)
  if valid_582204 != nil:
    section.add "oauth_token", valid_582204
  var valid_582205 = query.getOrDefault("userIp")
  valid_582205 = validateParameter(valid_582205, JString, required = false,
                                 default = nil)
  if valid_582205 != nil:
    section.add "userIp", valid_582205
  var valid_582206 = query.getOrDefault("key")
  valid_582206 = validateParameter(valid_582206, JString, required = false,
                                 default = nil)
  if valid_582206 != nil:
    section.add "key", valid_582206
  var valid_582207 = query.getOrDefault("prettyPrint")
  valid_582207 = validateParameter(valid_582207, JBool, required = false,
                                 default = newJBool(true))
  if valid_582207 != nil:
    section.add "prettyPrint", valid_582207
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582208: Call_DfareportingOperatingSystemVersionsGet_582196;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one operating system version by ID.
  ## 
  let valid = call_582208.validator(path, query, header, formData, body)
  let scheme = call_582208.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582208.url(scheme.get, call_582208.host, call_582208.base,
                         call_582208.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582208, url, valid)

proc call*(call_582209: Call_DfareportingOperatingSystemVersionsGet_582196;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingOperatingSystemVersionsGet
  ## Gets one operating system version by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Operating system version ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582210 = newJObject()
  var query_582211 = newJObject()
  add(path_582210, "profileId", newJString(profileId))
  add(query_582211, "fields", newJString(fields))
  add(query_582211, "quotaUser", newJString(quotaUser))
  add(query_582211, "alt", newJString(alt))
  add(query_582211, "oauth_token", newJString(oauthToken))
  add(query_582211, "userIp", newJString(userIp))
  add(path_582210, "id", newJString(id))
  add(query_582211, "key", newJString(key))
  add(query_582211, "prettyPrint", newJBool(prettyPrint))
  result = call_582209.call(path_582210, query_582211, nil, nil, nil)

var dfareportingOperatingSystemVersionsGet* = Call_DfareportingOperatingSystemVersionsGet_582196(
    name: "dfareportingOperatingSystemVersionsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/operatingSystemVersions/{id}",
    validator: validate_DfareportingOperatingSystemVersionsGet_582197,
    base: "/dfareporting/v3.2", url: url_DfareportingOperatingSystemVersionsGet_582198,
    schemes: {Scheme.Https})
type
  Call_DfareportingOperatingSystemsList_582212 = ref object of OpenApiRestCall_579437
proc url_DfareportingOperatingSystemsList_582214(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/operatingSystems")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOperatingSystemsList_582213(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of operating systems.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582215 = path.getOrDefault("profileId")
  valid_582215 = validateParameter(valid_582215, JString, required = true,
                                 default = nil)
  if valid_582215 != nil:
    section.add "profileId", valid_582215
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582216 = query.getOrDefault("fields")
  valid_582216 = validateParameter(valid_582216, JString, required = false,
                                 default = nil)
  if valid_582216 != nil:
    section.add "fields", valid_582216
  var valid_582217 = query.getOrDefault("quotaUser")
  valid_582217 = validateParameter(valid_582217, JString, required = false,
                                 default = nil)
  if valid_582217 != nil:
    section.add "quotaUser", valid_582217
  var valid_582218 = query.getOrDefault("alt")
  valid_582218 = validateParameter(valid_582218, JString, required = false,
                                 default = newJString("json"))
  if valid_582218 != nil:
    section.add "alt", valid_582218
  var valid_582219 = query.getOrDefault("oauth_token")
  valid_582219 = validateParameter(valid_582219, JString, required = false,
                                 default = nil)
  if valid_582219 != nil:
    section.add "oauth_token", valid_582219
  var valid_582220 = query.getOrDefault("userIp")
  valid_582220 = validateParameter(valid_582220, JString, required = false,
                                 default = nil)
  if valid_582220 != nil:
    section.add "userIp", valid_582220
  var valid_582221 = query.getOrDefault("key")
  valid_582221 = validateParameter(valid_582221, JString, required = false,
                                 default = nil)
  if valid_582221 != nil:
    section.add "key", valid_582221
  var valid_582222 = query.getOrDefault("prettyPrint")
  valid_582222 = validateParameter(valid_582222, JBool, required = false,
                                 default = newJBool(true))
  if valid_582222 != nil:
    section.add "prettyPrint", valid_582222
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582223: Call_DfareportingOperatingSystemsList_582212;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of operating systems.
  ## 
  let valid = call_582223.validator(path, query, header, formData, body)
  let scheme = call_582223.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582223.url(scheme.get, call_582223.host, call_582223.base,
                         call_582223.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582223, url, valid)

proc call*(call_582224: Call_DfareportingOperatingSystemsList_582212;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingOperatingSystemsList
  ## Retrieves a list of operating systems.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582225 = newJObject()
  var query_582226 = newJObject()
  add(path_582225, "profileId", newJString(profileId))
  add(query_582226, "fields", newJString(fields))
  add(query_582226, "quotaUser", newJString(quotaUser))
  add(query_582226, "alt", newJString(alt))
  add(query_582226, "oauth_token", newJString(oauthToken))
  add(query_582226, "userIp", newJString(userIp))
  add(query_582226, "key", newJString(key))
  add(query_582226, "prettyPrint", newJBool(prettyPrint))
  result = call_582224.call(path_582225, query_582226, nil, nil, nil)

var dfareportingOperatingSystemsList* = Call_DfareportingOperatingSystemsList_582212(
    name: "dfareportingOperatingSystemsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/operatingSystems",
    validator: validate_DfareportingOperatingSystemsList_582213,
    base: "/dfareporting/v3.2", url: url_DfareportingOperatingSystemsList_582214,
    schemes: {Scheme.Https})
type
  Call_DfareportingOperatingSystemsGet_582227 = ref object of OpenApiRestCall_579437
proc url_DfareportingOperatingSystemsGet_582229(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "dartId" in path, "`dartId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/operatingSystems/"),
               (kind: VariableSegment, value: "dartId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOperatingSystemsGet_582228(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one operating system by DART ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   dartId: JString (required)
  ##         : Operating system DART ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582230 = path.getOrDefault("profileId")
  valid_582230 = validateParameter(valid_582230, JString, required = true,
                                 default = nil)
  if valid_582230 != nil:
    section.add "profileId", valid_582230
  var valid_582231 = path.getOrDefault("dartId")
  valid_582231 = validateParameter(valid_582231, JString, required = true,
                                 default = nil)
  if valid_582231 != nil:
    section.add "dartId", valid_582231
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582232 = query.getOrDefault("fields")
  valid_582232 = validateParameter(valid_582232, JString, required = false,
                                 default = nil)
  if valid_582232 != nil:
    section.add "fields", valid_582232
  var valid_582233 = query.getOrDefault("quotaUser")
  valid_582233 = validateParameter(valid_582233, JString, required = false,
                                 default = nil)
  if valid_582233 != nil:
    section.add "quotaUser", valid_582233
  var valid_582234 = query.getOrDefault("alt")
  valid_582234 = validateParameter(valid_582234, JString, required = false,
                                 default = newJString("json"))
  if valid_582234 != nil:
    section.add "alt", valid_582234
  var valid_582235 = query.getOrDefault("oauth_token")
  valid_582235 = validateParameter(valid_582235, JString, required = false,
                                 default = nil)
  if valid_582235 != nil:
    section.add "oauth_token", valid_582235
  var valid_582236 = query.getOrDefault("userIp")
  valid_582236 = validateParameter(valid_582236, JString, required = false,
                                 default = nil)
  if valid_582236 != nil:
    section.add "userIp", valid_582236
  var valid_582237 = query.getOrDefault("key")
  valid_582237 = validateParameter(valid_582237, JString, required = false,
                                 default = nil)
  if valid_582237 != nil:
    section.add "key", valid_582237
  var valid_582238 = query.getOrDefault("prettyPrint")
  valid_582238 = validateParameter(valid_582238, JBool, required = false,
                                 default = newJBool(true))
  if valid_582238 != nil:
    section.add "prettyPrint", valid_582238
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582239: Call_DfareportingOperatingSystemsGet_582227;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one operating system by DART ID.
  ## 
  let valid = call_582239.validator(path, query, header, formData, body)
  let scheme = call_582239.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582239.url(scheme.get, call_582239.host, call_582239.base,
                         call_582239.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582239, url, valid)

proc call*(call_582240: Call_DfareportingOperatingSystemsGet_582227;
          profileId: string; dartId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingOperatingSystemsGet
  ## Gets one operating system by DART ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   dartId: string (required)
  ##         : Operating system DART ID.
  var path_582241 = newJObject()
  var query_582242 = newJObject()
  add(path_582241, "profileId", newJString(profileId))
  add(query_582242, "fields", newJString(fields))
  add(query_582242, "quotaUser", newJString(quotaUser))
  add(query_582242, "alt", newJString(alt))
  add(query_582242, "oauth_token", newJString(oauthToken))
  add(query_582242, "userIp", newJString(userIp))
  add(query_582242, "key", newJString(key))
  add(query_582242, "prettyPrint", newJBool(prettyPrint))
  add(path_582241, "dartId", newJString(dartId))
  result = call_582240.call(path_582241, query_582242, nil, nil, nil)

var dfareportingOperatingSystemsGet* = Call_DfareportingOperatingSystemsGet_582227(
    name: "dfareportingOperatingSystemsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/operatingSystems/{dartId}",
    validator: validate_DfareportingOperatingSystemsGet_582228,
    base: "/dfareporting/v3.2", url: url_DfareportingOperatingSystemsGet_582229,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsUpdate_582277 = ref object of OpenApiRestCall_579437
proc url_DfareportingPlacementGroupsUpdate_582279(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsUpdate_582278(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582280 = path.getOrDefault("profileId")
  valid_582280 = validateParameter(valid_582280, JString, required = true,
                                 default = nil)
  if valid_582280 != nil:
    section.add "profileId", valid_582280
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582281 = query.getOrDefault("fields")
  valid_582281 = validateParameter(valid_582281, JString, required = false,
                                 default = nil)
  if valid_582281 != nil:
    section.add "fields", valid_582281
  var valid_582282 = query.getOrDefault("quotaUser")
  valid_582282 = validateParameter(valid_582282, JString, required = false,
                                 default = nil)
  if valid_582282 != nil:
    section.add "quotaUser", valid_582282
  var valid_582283 = query.getOrDefault("alt")
  valid_582283 = validateParameter(valid_582283, JString, required = false,
                                 default = newJString("json"))
  if valid_582283 != nil:
    section.add "alt", valid_582283
  var valid_582284 = query.getOrDefault("oauth_token")
  valid_582284 = validateParameter(valid_582284, JString, required = false,
                                 default = nil)
  if valid_582284 != nil:
    section.add "oauth_token", valid_582284
  var valid_582285 = query.getOrDefault("userIp")
  valid_582285 = validateParameter(valid_582285, JString, required = false,
                                 default = nil)
  if valid_582285 != nil:
    section.add "userIp", valid_582285
  var valid_582286 = query.getOrDefault("key")
  valid_582286 = validateParameter(valid_582286, JString, required = false,
                                 default = nil)
  if valid_582286 != nil:
    section.add "key", valid_582286
  var valid_582287 = query.getOrDefault("prettyPrint")
  valid_582287 = validateParameter(valid_582287, JBool, required = false,
                                 default = newJBool(true))
  if valid_582287 != nil:
    section.add "prettyPrint", valid_582287
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582289: Call_DfareportingPlacementGroupsUpdate_582277;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing placement group.
  ## 
  let valid = call_582289.validator(path, query, header, formData, body)
  let scheme = call_582289.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582289.url(scheme.get, call_582289.host, call_582289.base,
                         call_582289.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582289, url, valid)

proc call*(call_582290: Call_DfareportingPlacementGroupsUpdate_582277;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementGroupsUpdate
  ## Updates an existing placement group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582291 = newJObject()
  var query_582292 = newJObject()
  var body_582293 = newJObject()
  add(path_582291, "profileId", newJString(profileId))
  add(query_582292, "fields", newJString(fields))
  add(query_582292, "quotaUser", newJString(quotaUser))
  add(query_582292, "alt", newJString(alt))
  add(query_582292, "oauth_token", newJString(oauthToken))
  add(query_582292, "userIp", newJString(userIp))
  add(query_582292, "key", newJString(key))
  if body != nil:
    body_582293 = body
  add(query_582292, "prettyPrint", newJBool(prettyPrint))
  result = call_582290.call(path_582291, query_582292, nil, nil, body_582293)

var dfareportingPlacementGroupsUpdate* = Call_DfareportingPlacementGroupsUpdate_582277(
    name: "dfareportingPlacementGroupsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups",
    validator: validate_DfareportingPlacementGroupsUpdate_582278,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementGroupsUpdate_582279,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsInsert_582294 = ref object of OpenApiRestCall_579437
proc url_DfareportingPlacementGroupsInsert_582296(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsInsert_582295(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new placement group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582297 = path.getOrDefault("profileId")
  valid_582297 = validateParameter(valid_582297, JString, required = true,
                                 default = nil)
  if valid_582297 != nil:
    section.add "profileId", valid_582297
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582298 = query.getOrDefault("fields")
  valid_582298 = validateParameter(valid_582298, JString, required = false,
                                 default = nil)
  if valid_582298 != nil:
    section.add "fields", valid_582298
  var valid_582299 = query.getOrDefault("quotaUser")
  valid_582299 = validateParameter(valid_582299, JString, required = false,
                                 default = nil)
  if valid_582299 != nil:
    section.add "quotaUser", valid_582299
  var valid_582300 = query.getOrDefault("alt")
  valid_582300 = validateParameter(valid_582300, JString, required = false,
                                 default = newJString("json"))
  if valid_582300 != nil:
    section.add "alt", valid_582300
  var valid_582301 = query.getOrDefault("oauth_token")
  valid_582301 = validateParameter(valid_582301, JString, required = false,
                                 default = nil)
  if valid_582301 != nil:
    section.add "oauth_token", valid_582301
  var valid_582302 = query.getOrDefault("userIp")
  valid_582302 = validateParameter(valid_582302, JString, required = false,
                                 default = nil)
  if valid_582302 != nil:
    section.add "userIp", valid_582302
  var valid_582303 = query.getOrDefault("key")
  valid_582303 = validateParameter(valid_582303, JString, required = false,
                                 default = nil)
  if valid_582303 != nil:
    section.add "key", valid_582303
  var valid_582304 = query.getOrDefault("prettyPrint")
  valid_582304 = validateParameter(valid_582304, JBool, required = false,
                                 default = newJBool(true))
  if valid_582304 != nil:
    section.add "prettyPrint", valid_582304
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582306: Call_DfareportingPlacementGroupsInsert_582294;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new placement group.
  ## 
  let valid = call_582306.validator(path, query, header, formData, body)
  let scheme = call_582306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582306.url(scheme.get, call_582306.host, call_582306.base,
                         call_582306.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582306, url, valid)

proc call*(call_582307: Call_DfareportingPlacementGroupsInsert_582294;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementGroupsInsert
  ## Inserts a new placement group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582308 = newJObject()
  var query_582309 = newJObject()
  var body_582310 = newJObject()
  add(path_582308, "profileId", newJString(profileId))
  add(query_582309, "fields", newJString(fields))
  add(query_582309, "quotaUser", newJString(quotaUser))
  add(query_582309, "alt", newJString(alt))
  add(query_582309, "oauth_token", newJString(oauthToken))
  add(query_582309, "userIp", newJString(userIp))
  add(query_582309, "key", newJString(key))
  if body != nil:
    body_582310 = body
  add(query_582309, "prettyPrint", newJBool(prettyPrint))
  result = call_582307.call(path_582308, query_582309, nil, nil, body_582310)

var dfareportingPlacementGroupsInsert* = Call_DfareportingPlacementGroupsInsert_582294(
    name: "dfareportingPlacementGroupsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups",
    validator: validate_DfareportingPlacementGroupsInsert_582295,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementGroupsInsert_582296,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsList_582243 = ref object of OpenApiRestCall_579437
proc url_DfareportingPlacementGroupsList_582245(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsList_582244(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of placement groups, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582246 = path.getOrDefault("profileId")
  valid_582246 = validateParameter(valid_582246, JString, required = true,
                                 default = nil)
  if valid_582246 != nil:
    section.add "profileId", valid_582246
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   contentCategoryIds: JArray
  ##                     : Select only placement groups that are associated with these content categories.
  ##   alt: JString
  ##      : Data format for the response.
  ##   placementGroupType: JString
  ##                     : Select only placement groups belonging with this group type. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting.
  ##   searchString: JString
  ##               : Allows searching for placement groups by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placement groups with names like "placement group June 2015", "placement group May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementgroup" will match placement groups with name "my placementgroup", "placementgroup 2015", or simply "placementgroup".
  ##   minEndDate: JString
  ##             : Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   siteIds: JArray
  ##          : Select only placement groups that are associated with these sites.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   maxStartDate: JString
  ##               : Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   campaignIds: JArray
  ##              : Select only placement groups that belong to these campaigns.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived placements. Don't set this field to select both archived and non-archived placements.
  ##   maxEndDate: JString
  ##             : Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only placement groups with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only placement groups that belong to these advertisers.
  ##   minStartDate: JString
  ##               : Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   directorySiteIds: JArray
  ##                   : Select only placement groups that are associated with these directory sites.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   placementStrategyIds: JArray
  ##                       : Select only placement groups that are associated with these placement strategies.
  ##   pricingTypes: JArray
  ##               : Select only placement groups with these pricing types.
  section = newJObject()
  var valid_582247 = query.getOrDefault("fields")
  valid_582247 = validateParameter(valid_582247, JString, required = false,
                                 default = nil)
  if valid_582247 != nil:
    section.add "fields", valid_582247
  var valid_582248 = query.getOrDefault("pageToken")
  valid_582248 = validateParameter(valid_582248, JString, required = false,
                                 default = nil)
  if valid_582248 != nil:
    section.add "pageToken", valid_582248
  var valid_582249 = query.getOrDefault("quotaUser")
  valid_582249 = validateParameter(valid_582249, JString, required = false,
                                 default = nil)
  if valid_582249 != nil:
    section.add "quotaUser", valid_582249
  var valid_582250 = query.getOrDefault("sortField")
  valid_582250 = validateParameter(valid_582250, JString, required = false,
                                 default = newJString("ID"))
  if valid_582250 != nil:
    section.add "sortField", valid_582250
  var valid_582251 = query.getOrDefault("contentCategoryIds")
  valid_582251 = validateParameter(valid_582251, JArray, required = false,
                                 default = nil)
  if valid_582251 != nil:
    section.add "contentCategoryIds", valid_582251
  var valid_582252 = query.getOrDefault("alt")
  valid_582252 = validateParameter(valid_582252, JString, required = false,
                                 default = newJString("json"))
  if valid_582252 != nil:
    section.add "alt", valid_582252
  var valid_582253 = query.getOrDefault("placementGroupType")
  valid_582253 = validateParameter(valid_582253, JString, required = false,
                                 default = newJString("PLACEMENT_PACKAGE"))
  if valid_582253 != nil:
    section.add "placementGroupType", valid_582253
  var valid_582254 = query.getOrDefault("searchString")
  valid_582254 = validateParameter(valid_582254, JString, required = false,
                                 default = nil)
  if valid_582254 != nil:
    section.add "searchString", valid_582254
  var valid_582255 = query.getOrDefault("minEndDate")
  valid_582255 = validateParameter(valid_582255, JString, required = false,
                                 default = nil)
  if valid_582255 != nil:
    section.add "minEndDate", valid_582255
  var valid_582256 = query.getOrDefault("siteIds")
  valid_582256 = validateParameter(valid_582256, JArray, required = false,
                                 default = nil)
  if valid_582256 != nil:
    section.add "siteIds", valid_582256
  var valid_582257 = query.getOrDefault("oauth_token")
  valid_582257 = validateParameter(valid_582257, JString, required = false,
                                 default = nil)
  if valid_582257 != nil:
    section.add "oauth_token", valid_582257
  var valid_582258 = query.getOrDefault("maxStartDate")
  valid_582258 = validateParameter(valid_582258, JString, required = false,
                                 default = nil)
  if valid_582258 != nil:
    section.add "maxStartDate", valid_582258
  var valid_582259 = query.getOrDefault("campaignIds")
  valid_582259 = validateParameter(valid_582259, JArray, required = false,
                                 default = nil)
  if valid_582259 != nil:
    section.add "campaignIds", valid_582259
  var valid_582260 = query.getOrDefault("userIp")
  valid_582260 = validateParameter(valid_582260, JString, required = false,
                                 default = nil)
  if valid_582260 != nil:
    section.add "userIp", valid_582260
  var valid_582261 = query.getOrDefault("archived")
  valid_582261 = validateParameter(valid_582261, JBool, required = false, default = nil)
  if valid_582261 != nil:
    section.add "archived", valid_582261
  var valid_582262 = query.getOrDefault("maxEndDate")
  valid_582262 = validateParameter(valid_582262, JString, required = false,
                                 default = nil)
  if valid_582262 != nil:
    section.add "maxEndDate", valid_582262
  var valid_582263 = query.getOrDefault("maxResults")
  valid_582263 = validateParameter(valid_582263, JInt, required = false,
                                 default = newJInt(800))
  if valid_582263 != nil:
    section.add "maxResults", valid_582263
  var valid_582264 = query.getOrDefault("ids")
  valid_582264 = validateParameter(valid_582264, JArray, required = false,
                                 default = nil)
  if valid_582264 != nil:
    section.add "ids", valid_582264
  var valid_582265 = query.getOrDefault("key")
  valid_582265 = validateParameter(valid_582265, JString, required = false,
                                 default = nil)
  if valid_582265 != nil:
    section.add "key", valid_582265
  var valid_582266 = query.getOrDefault("advertiserIds")
  valid_582266 = validateParameter(valid_582266, JArray, required = false,
                                 default = nil)
  if valid_582266 != nil:
    section.add "advertiserIds", valid_582266
  var valid_582267 = query.getOrDefault("minStartDate")
  valid_582267 = validateParameter(valid_582267, JString, required = false,
                                 default = nil)
  if valid_582267 != nil:
    section.add "minStartDate", valid_582267
  var valid_582268 = query.getOrDefault("sortOrder")
  valid_582268 = validateParameter(valid_582268, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_582268 != nil:
    section.add "sortOrder", valid_582268
  var valid_582269 = query.getOrDefault("directorySiteIds")
  valid_582269 = validateParameter(valid_582269, JArray, required = false,
                                 default = nil)
  if valid_582269 != nil:
    section.add "directorySiteIds", valid_582269
  var valid_582270 = query.getOrDefault("prettyPrint")
  valid_582270 = validateParameter(valid_582270, JBool, required = false,
                                 default = newJBool(true))
  if valid_582270 != nil:
    section.add "prettyPrint", valid_582270
  var valid_582271 = query.getOrDefault("placementStrategyIds")
  valid_582271 = validateParameter(valid_582271, JArray, required = false,
                                 default = nil)
  if valid_582271 != nil:
    section.add "placementStrategyIds", valid_582271
  var valid_582272 = query.getOrDefault("pricingTypes")
  valid_582272 = validateParameter(valid_582272, JArray, required = false,
                                 default = nil)
  if valid_582272 != nil:
    section.add "pricingTypes", valid_582272
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582273: Call_DfareportingPlacementGroupsList_582243;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of placement groups, possibly filtered. This method supports paging.
  ## 
  let valid = call_582273.validator(path, query, header, formData, body)
  let scheme = call_582273.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582273.url(scheme.get, call_582273.host, call_582273.base,
                         call_582273.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582273, url, valid)

proc call*(call_582274: Call_DfareportingPlacementGroupsList_582243;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID";
          contentCategoryIds: JsonNode = nil; alt: string = "json";
          placementGroupType: string = "PLACEMENT_PACKAGE";
          searchString: string = ""; minEndDate: string = ""; siteIds: JsonNode = nil;
          oauthToken: string = ""; maxStartDate: string = "";
          campaignIds: JsonNode = nil; userIp: string = ""; archived: bool = false;
          maxEndDate: string = ""; maxResults: int = 800; ids: JsonNode = nil;
          key: string = ""; advertiserIds: JsonNode = nil; minStartDate: string = "";
          sortOrder: string = "ASCENDING"; directorySiteIds: JsonNode = nil;
          prettyPrint: bool = true; placementStrategyIds: JsonNode = nil;
          pricingTypes: JsonNode = nil): Recallable =
  ## dfareportingPlacementGroupsList
  ## Retrieves a list of placement groups, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   contentCategoryIds: JArray
  ##                     : Select only placement groups that are associated with these content categories.
  ##   alt: string
  ##      : Data format for the response.
  ##   placementGroupType: string
  ##                     : Select only placement groups belonging with this group type. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting.
  ##   searchString: string
  ##               : Allows searching for placement groups by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placement groups with names like "placement group June 2015", "placement group May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementgroup" will match placement groups with name "my placementgroup", "placementgroup 2015", or simply "placementgroup".
  ##   minEndDate: string
  ##             : Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   siteIds: JArray
  ##          : Select only placement groups that are associated with these sites.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   maxStartDate: string
  ##               : Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   campaignIds: JArray
  ##              : Select only placement groups that belong to these campaigns.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived placements. Don't set this field to select both archived and non-archived placements.
  ##   maxEndDate: string
  ##             : Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only placement groups with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only placement groups that belong to these advertisers.
  ##   minStartDate: string
  ##               : Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   directorySiteIds: JArray
  ##                   : Select only placement groups that are associated with these directory sites.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   placementStrategyIds: JArray
  ##                       : Select only placement groups that are associated with these placement strategies.
  ##   pricingTypes: JArray
  ##               : Select only placement groups with these pricing types.
  var path_582275 = newJObject()
  var query_582276 = newJObject()
  add(path_582275, "profileId", newJString(profileId))
  add(query_582276, "fields", newJString(fields))
  add(query_582276, "pageToken", newJString(pageToken))
  add(query_582276, "quotaUser", newJString(quotaUser))
  add(query_582276, "sortField", newJString(sortField))
  if contentCategoryIds != nil:
    query_582276.add "contentCategoryIds", contentCategoryIds
  add(query_582276, "alt", newJString(alt))
  add(query_582276, "placementGroupType", newJString(placementGroupType))
  add(query_582276, "searchString", newJString(searchString))
  add(query_582276, "minEndDate", newJString(minEndDate))
  if siteIds != nil:
    query_582276.add "siteIds", siteIds
  add(query_582276, "oauth_token", newJString(oauthToken))
  add(query_582276, "maxStartDate", newJString(maxStartDate))
  if campaignIds != nil:
    query_582276.add "campaignIds", campaignIds
  add(query_582276, "userIp", newJString(userIp))
  add(query_582276, "archived", newJBool(archived))
  add(query_582276, "maxEndDate", newJString(maxEndDate))
  add(query_582276, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_582276.add "ids", ids
  add(query_582276, "key", newJString(key))
  if advertiserIds != nil:
    query_582276.add "advertiserIds", advertiserIds
  add(query_582276, "minStartDate", newJString(minStartDate))
  add(query_582276, "sortOrder", newJString(sortOrder))
  if directorySiteIds != nil:
    query_582276.add "directorySiteIds", directorySiteIds
  add(query_582276, "prettyPrint", newJBool(prettyPrint))
  if placementStrategyIds != nil:
    query_582276.add "placementStrategyIds", placementStrategyIds
  if pricingTypes != nil:
    query_582276.add "pricingTypes", pricingTypes
  result = call_582274.call(path_582275, query_582276, nil, nil, nil)

var dfareportingPlacementGroupsList* = Call_DfareportingPlacementGroupsList_582243(
    name: "dfareportingPlacementGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups",
    validator: validate_DfareportingPlacementGroupsList_582244,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementGroupsList_582245,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsPatch_582311 = ref object of OpenApiRestCall_579437
proc url_DfareportingPlacementGroupsPatch_582313(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsPatch_582312(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement group. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582314 = path.getOrDefault("profileId")
  valid_582314 = validateParameter(valid_582314, JString, required = true,
                                 default = nil)
  if valid_582314 != nil:
    section.add "profileId", valid_582314
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Placement group ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582315 = query.getOrDefault("fields")
  valid_582315 = validateParameter(valid_582315, JString, required = false,
                                 default = nil)
  if valid_582315 != nil:
    section.add "fields", valid_582315
  var valid_582316 = query.getOrDefault("quotaUser")
  valid_582316 = validateParameter(valid_582316, JString, required = false,
                                 default = nil)
  if valid_582316 != nil:
    section.add "quotaUser", valid_582316
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_582317 = query.getOrDefault("id")
  valid_582317 = validateParameter(valid_582317, JString, required = true,
                                 default = nil)
  if valid_582317 != nil:
    section.add "id", valid_582317
  var valid_582318 = query.getOrDefault("alt")
  valid_582318 = validateParameter(valid_582318, JString, required = false,
                                 default = newJString("json"))
  if valid_582318 != nil:
    section.add "alt", valid_582318
  var valid_582319 = query.getOrDefault("oauth_token")
  valid_582319 = validateParameter(valid_582319, JString, required = false,
                                 default = nil)
  if valid_582319 != nil:
    section.add "oauth_token", valid_582319
  var valid_582320 = query.getOrDefault("userIp")
  valid_582320 = validateParameter(valid_582320, JString, required = false,
                                 default = nil)
  if valid_582320 != nil:
    section.add "userIp", valid_582320
  var valid_582321 = query.getOrDefault("key")
  valid_582321 = validateParameter(valid_582321, JString, required = false,
                                 default = nil)
  if valid_582321 != nil:
    section.add "key", valid_582321
  var valid_582322 = query.getOrDefault("prettyPrint")
  valid_582322 = validateParameter(valid_582322, JBool, required = false,
                                 default = newJBool(true))
  if valid_582322 != nil:
    section.add "prettyPrint", valid_582322
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582324: Call_DfareportingPlacementGroupsPatch_582311;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing placement group. This method supports patch semantics.
  ## 
  let valid = call_582324.validator(path, query, header, formData, body)
  let scheme = call_582324.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582324.url(scheme.get, call_582324.host, call_582324.base,
                         call_582324.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582324, url, valid)

proc call*(call_582325: Call_DfareportingPlacementGroupsPatch_582311;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementGroupsPatch
  ## Updates an existing placement group. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Placement group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582326 = newJObject()
  var query_582327 = newJObject()
  var body_582328 = newJObject()
  add(path_582326, "profileId", newJString(profileId))
  add(query_582327, "fields", newJString(fields))
  add(query_582327, "quotaUser", newJString(quotaUser))
  add(query_582327, "id", newJString(id))
  add(query_582327, "alt", newJString(alt))
  add(query_582327, "oauth_token", newJString(oauthToken))
  add(query_582327, "userIp", newJString(userIp))
  add(query_582327, "key", newJString(key))
  if body != nil:
    body_582328 = body
  add(query_582327, "prettyPrint", newJBool(prettyPrint))
  result = call_582325.call(path_582326, query_582327, nil, nil, body_582328)

var dfareportingPlacementGroupsPatch* = Call_DfareportingPlacementGroupsPatch_582311(
    name: "dfareportingPlacementGroupsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups",
    validator: validate_DfareportingPlacementGroupsPatch_582312,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementGroupsPatch_582313,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsGet_582329 = ref object of OpenApiRestCall_579437
proc url_DfareportingPlacementGroupsGet_582331(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsGet_582330(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one placement group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Placement group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582332 = path.getOrDefault("profileId")
  valid_582332 = validateParameter(valid_582332, JString, required = true,
                                 default = nil)
  if valid_582332 != nil:
    section.add "profileId", valid_582332
  var valid_582333 = path.getOrDefault("id")
  valid_582333 = validateParameter(valid_582333, JString, required = true,
                                 default = nil)
  if valid_582333 != nil:
    section.add "id", valid_582333
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582334 = query.getOrDefault("fields")
  valid_582334 = validateParameter(valid_582334, JString, required = false,
                                 default = nil)
  if valid_582334 != nil:
    section.add "fields", valid_582334
  var valid_582335 = query.getOrDefault("quotaUser")
  valid_582335 = validateParameter(valid_582335, JString, required = false,
                                 default = nil)
  if valid_582335 != nil:
    section.add "quotaUser", valid_582335
  var valid_582336 = query.getOrDefault("alt")
  valid_582336 = validateParameter(valid_582336, JString, required = false,
                                 default = newJString("json"))
  if valid_582336 != nil:
    section.add "alt", valid_582336
  var valid_582337 = query.getOrDefault("oauth_token")
  valid_582337 = validateParameter(valid_582337, JString, required = false,
                                 default = nil)
  if valid_582337 != nil:
    section.add "oauth_token", valid_582337
  var valid_582338 = query.getOrDefault("userIp")
  valid_582338 = validateParameter(valid_582338, JString, required = false,
                                 default = nil)
  if valid_582338 != nil:
    section.add "userIp", valid_582338
  var valid_582339 = query.getOrDefault("key")
  valid_582339 = validateParameter(valid_582339, JString, required = false,
                                 default = nil)
  if valid_582339 != nil:
    section.add "key", valid_582339
  var valid_582340 = query.getOrDefault("prettyPrint")
  valid_582340 = validateParameter(valid_582340, JBool, required = false,
                                 default = newJBool(true))
  if valid_582340 != nil:
    section.add "prettyPrint", valid_582340
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582341: Call_DfareportingPlacementGroupsGet_582329; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one placement group by ID.
  ## 
  let valid = call_582341.validator(path, query, header, formData, body)
  let scheme = call_582341.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582341.url(scheme.get, call_582341.host, call_582341.base,
                         call_582341.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582341, url, valid)

proc call*(call_582342: Call_DfareportingPlacementGroupsGet_582329;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementGroupsGet
  ## Gets one placement group by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Placement group ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582343 = newJObject()
  var query_582344 = newJObject()
  add(path_582343, "profileId", newJString(profileId))
  add(query_582344, "fields", newJString(fields))
  add(query_582344, "quotaUser", newJString(quotaUser))
  add(query_582344, "alt", newJString(alt))
  add(query_582344, "oauth_token", newJString(oauthToken))
  add(query_582344, "userIp", newJString(userIp))
  add(path_582343, "id", newJString(id))
  add(query_582344, "key", newJString(key))
  add(query_582344, "prettyPrint", newJBool(prettyPrint))
  result = call_582342.call(path_582343, query_582344, nil, nil, nil)

var dfareportingPlacementGroupsGet* = Call_DfareportingPlacementGroupsGet_582329(
    name: "dfareportingPlacementGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups/{id}",
    validator: validate_DfareportingPlacementGroupsGet_582330,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementGroupsGet_582331,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesUpdate_582366 = ref object of OpenApiRestCall_579437
proc url_DfareportingPlacementStrategiesUpdate_582368(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesUpdate_582367(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement strategy.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582369 = path.getOrDefault("profileId")
  valid_582369 = validateParameter(valid_582369, JString, required = true,
                                 default = nil)
  if valid_582369 != nil:
    section.add "profileId", valid_582369
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582370 = query.getOrDefault("fields")
  valid_582370 = validateParameter(valid_582370, JString, required = false,
                                 default = nil)
  if valid_582370 != nil:
    section.add "fields", valid_582370
  var valid_582371 = query.getOrDefault("quotaUser")
  valid_582371 = validateParameter(valid_582371, JString, required = false,
                                 default = nil)
  if valid_582371 != nil:
    section.add "quotaUser", valid_582371
  var valid_582372 = query.getOrDefault("alt")
  valid_582372 = validateParameter(valid_582372, JString, required = false,
                                 default = newJString("json"))
  if valid_582372 != nil:
    section.add "alt", valid_582372
  var valid_582373 = query.getOrDefault("oauth_token")
  valid_582373 = validateParameter(valid_582373, JString, required = false,
                                 default = nil)
  if valid_582373 != nil:
    section.add "oauth_token", valid_582373
  var valid_582374 = query.getOrDefault("userIp")
  valid_582374 = validateParameter(valid_582374, JString, required = false,
                                 default = nil)
  if valid_582374 != nil:
    section.add "userIp", valid_582374
  var valid_582375 = query.getOrDefault("key")
  valid_582375 = validateParameter(valid_582375, JString, required = false,
                                 default = nil)
  if valid_582375 != nil:
    section.add "key", valid_582375
  var valid_582376 = query.getOrDefault("prettyPrint")
  valid_582376 = validateParameter(valid_582376, JBool, required = false,
                                 default = newJBool(true))
  if valid_582376 != nil:
    section.add "prettyPrint", valid_582376
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582378: Call_DfareportingPlacementStrategiesUpdate_582366;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing placement strategy.
  ## 
  let valid = call_582378.validator(path, query, header, formData, body)
  let scheme = call_582378.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582378.url(scheme.get, call_582378.host, call_582378.base,
                         call_582378.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582378, url, valid)

proc call*(call_582379: Call_DfareportingPlacementStrategiesUpdate_582366;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementStrategiesUpdate
  ## Updates an existing placement strategy.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582380 = newJObject()
  var query_582381 = newJObject()
  var body_582382 = newJObject()
  add(path_582380, "profileId", newJString(profileId))
  add(query_582381, "fields", newJString(fields))
  add(query_582381, "quotaUser", newJString(quotaUser))
  add(query_582381, "alt", newJString(alt))
  add(query_582381, "oauth_token", newJString(oauthToken))
  add(query_582381, "userIp", newJString(userIp))
  add(query_582381, "key", newJString(key))
  if body != nil:
    body_582382 = body
  add(query_582381, "prettyPrint", newJBool(prettyPrint))
  result = call_582379.call(path_582380, query_582381, nil, nil, body_582382)

var dfareportingPlacementStrategiesUpdate* = Call_DfareportingPlacementStrategiesUpdate_582366(
    name: "dfareportingPlacementStrategiesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies",
    validator: validate_DfareportingPlacementStrategiesUpdate_582367,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesUpdate_582368,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesInsert_582383 = ref object of OpenApiRestCall_579437
proc url_DfareportingPlacementStrategiesInsert_582385(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesInsert_582384(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new placement strategy.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582386 = path.getOrDefault("profileId")
  valid_582386 = validateParameter(valid_582386, JString, required = true,
                                 default = nil)
  if valid_582386 != nil:
    section.add "profileId", valid_582386
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582387 = query.getOrDefault("fields")
  valid_582387 = validateParameter(valid_582387, JString, required = false,
                                 default = nil)
  if valid_582387 != nil:
    section.add "fields", valid_582387
  var valid_582388 = query.getOrDefault("quotaUser")
  valid_582388 = validateParameter(valid_582388, JString, required = false,
                                 default = nil)
  if valid_582388 != nil:
    section.add "quotaUser", valid_582388
  var valid_582389 = query.getOrDefault("alt")
  valid_582389 = validateParameter(valid_582389, JString, required = false,
                                 default = newJString("json"))
  if valid_582389 != nil:
    section.add "alt", valid_582389
  var valid_582390 = query.getOrDefault("oauth_token")
  valid_582390 = validateParameter(valid_582390, JString, required = false,
                                 default = nil)
  if valid_582390 != nil:
    section.add "oauth_token", valid_582390
  var valid_582391 = query.getOrDefault("userIp")
  valid_582391 = validateParameter(valid_582391, JString, required = false,
                                 default = nil)
  if valid_582391 != nil:
    section.add "userIp", valid_582391
  var valid_582392 = query.getOrDefault("key")
  valid_582392 = validateParameter(valid_582392, JString, required = false,
                                 default = nil)
  if valid_582392 != nil:
    section.add "key", valid_582392
  var valid_582393 = query.getOrDefault("prettyPrint")
  valid_582393 = validateParameter(valid_582393, JBool, required = false,
                                 default = newJBool(true))
  if valid_582393 != nil:
    section.add "prettyPrint", valid_582393
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582395: Call_DfareportingPlacementStrategiesInsert_582383;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new placement strategy.
  ## 
  let valid = call_582395.validator(path, query, header, formData, body)
  let scheme = call_582395.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582395.url(scheme.get, call_582395.host, call_582395.base,
                         call_582395.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582395, url, valid)

proc call*(call_582396: Call_DfareportingPlacementStrategiesInsert_582383;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementStrategiesInsert
  ## Inserts a new placement strategy.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582397 = newJObject()
  var query_582398 = newJObject()
  var body_582399 = newJObject()
  add(path_582397, "profileId", newJString(profileId))
  add(query_582398, "fields", newJString(fields))
  add(query_582398, "quotaUser", newJString(quotaUser))
  add(query_582398, "alt", newJString(alt))
  add(query_582398, "oauth_token", newJString(oauthToken))
  add(query_582398, "userIp", newJString(userIp))
  add(query_582398, "key", newJString(key))
  if body != nil:
    body_582399 = body
  add(query_582398, "prettyPrint", newJBool(prettyPrint))
  result = call_582396.call(path_582397, query_582398, nil, nil, body_582399)

var dfareportingPlacementStrategiesInsert* = Call_DfareportingPlacementStrategiesInsert_582383(
    name: "dfareportingPlacementStrategiesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies",
    validator: validate_DfareportingPlacementStrategiesInsert_582384,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesInsert_582385,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesList_582345 = ref object of OpenApiRestCall_579437
proc url_DfareportingPlacementStrategiesList_582347(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesList_582346(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of placement strategies, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582348 = path.getOrDefault("profileId")
  valid_582348 = validateParameter(valid_582348, JString, required = true,
                                 default = nil)
  if valid_582348 != nil:
    section.add "profileId", valid_582348
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "placementstrategy*2015" will return objects with names like "placementstrategy June 2015", "placementstrategy April 2015", or simply "placementstrategy 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementstrategy" will match objects with name "my placementstrategy", "placementstrategy 2015", or simply "placementstrategy".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only placement strategies with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582349 = query.getOrDefault("fields")
  valid_582349 = validateParameter(valid_582349, JString, required = false,
                                 default = nil)
  if valid_582349 != nil:
    section.add "fields", valid_582349
  var valid_582350 = query.getOrDefault("pageToken")
  valid_582350 = validateParameter(valid_582350, JString, required = false,
                                 default = nil)
  if valid_582350 != nil:
    section.add "pageToken", valid_582350
  var valid_582351 = query.getOrDefault("quotaUser")
  valid_582351 = validateParameter(valid_582351, JString, required = false,
                                 default = nil)
  if valid_582351 != nil:
    section.add "quotaUser", valid_582351
  var valid_582352 = query.getOrDefault("sortField")
  valid_582352 = validateParameter(valid_582352, JString, required = false,
                                 default = newJString("ID"))
  if valid_582352 != nil:
    section.add "sortField", valid_582352
  var valid_582353 = query.getOrDefault("alt")
  valid_582353 = validateParameter(valid_582353, JString, required = false,
                                 default = newJString("json"))
  if valid_582353 != nil:
    section.add "alt", valid_582353
  var valid_582354 = query.getOrDefault("searchString")
  valid_582354 = validateParameter(valid_582354, JString, required = false,
                                 default = nil)
  if valid_582354 != nil:
    section.add "searchString", valid_582354
  var valid_582355 = query.getOrDefault("oauth_token")
  valid_582355 = validateParameter(valid_582355, JString, required = false,
                                 default = nil)
  if valid_582355 != nil:
    section.add "oauth_token", valid_582355
  var valid_582356 = query.getOrDefault("userIp")
  valid_582356 = validateParameter(valid_582356, JString, required = false,
                                 default = nil)
  if valid_582356 != nil:
    section.add "userIp", valid_582356
  var valid_582357 = query.getOrDefault("maxResults")
  valid_582357 = validateParameter(valid_582357, JInt, required = false,
                                 default = newJInt(1000))
  if valid_582357 != nil:
    section.add "maxResults", valid_582357
  var valid_582358 = query.getOrDefault("ids")
  valid_582358 = validateParameter(valid_582358, JArray, required = false,
                                 default = nil)
  if valid_582358 != nil:
    section.add "ids", valid_582358
  var valid_582359 = query.getOrDefault("key")
  valid_582359 = validateParameter(valid_582359, JString, required = false,
                                 default = nil)
  if valid_582359 != nil:
    section.add "key", valid_582359
  var valid_582360 = query.getOrDefault("sortOrder")
  valid_582360 = validateParameter(valid_582360, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_582360 != nil:
    section.add "sortOrder", valid_582360
  var valid_582361 = query.getOrDefault("prettyPrint")
  valid_582361 = validateParameter(valid_582361, JBool, required = false,
                                 default = newJBool(true))
  if valid_582361 != nil:
    section.add "prettyPrint", valid_582361
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582362: Call_DfareportingPlacementStrategiesList_582345;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of placement strategies, possibly filtered. This method supports paging.
  ## 
  let valid = call_582362.validator(path, query, header, formData, body)
  let scheme = call_582362.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582362.url(scheme.get, call_582362.host, call_582362.base,
                         call_582362.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582362, url, valid)

proc call*(call_582363: Call_DfareportingPlacementStrategiesList_582345;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementStrategiesList
  ## Retrieves a list of placement strategies, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "placementstrategy*2015" will return objects with names like "placementstrategy June 2015", "placementstrategy April 2015", or simply "placementstrategy 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementstrategy" will match objects with name "my placementstrategy", "placementstrategy 2015", or simply "placementstrategy".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only placement strategies with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582364 = newJObject()
  var query_582365 = newJObject()
  add(path_582364, "profileId", newJString(profileId))
  add(query_582365, "fields", newJString(fields))
  add(query_582365, "pageToken", newJString(pageToken))
  add(query_582365, "quotaUser", newJString(quotaUser))
  add(query_582365, "sortField", newJString(sortField))
  add(query_582365, "alt", newJString(alt))
  add(query_582365, "searchString", newJString(searchString))
  add(query_582365, "oauth_token", newJString(oauthToken))
  add(query_582365, "userIp", newJString(userIp))
  add(query_582365, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_582365.add "ids", ids
  add(query_582365, "key", newJString(key))
  add(query_582365, "sortOrder", newJString(sortOrder))
  add(query_582365, "prettyPrint", newJBool(prettyPrint))
  result = call_582363.call(path_582364, query_582365, nil, nil, nil)

var dfareportingPlacementStrategiesList* = Call_DfareportingPlacementStrategiesList_582345(
    name: "dfareportingPlacementStrategiesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies",
    validator: validate_DfareportingPlacementStrategiesList_582346,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesList_582347,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesPatch_582400 = ref object of OpenApiRestCall_579437
proc url_DfareportingPlacementStrategiesPatch_582402(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesPatch_582401(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement strategy. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582403 = path.getOrDefault("profileId")
  valid_582403 = validateParameter(valid_582403, JString, required = true,
                                 default = nil)
  if valid_582403 != nil:
    section.add "profileId", valid_582403
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Placement strategy ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582404 = query.getOrDefault("fields")
  valid_582404 = validateParameter(valid_582404, JString, required = false,
                                 default = nil)
  if valid_582404 != nil:
    section.add "fields", valid_582404
  var valid_582405 = query.getOrDefault("quotaUser")
  valid_582405 = validateParameter(valid_582405, JString, required = false,
                                 default = nil)
  if valid_582405 != nil:
    section.add "quotaUser", valid_582405
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_582406 = query.getOrDefault("id")
  valid_582406 = validateParameter(valid_582406, JString, required = true,
                                 default = nil)
  if valid_582406 != nil:
    section.add "id", valid_582406
  var valid_582407 = query.getOrDefault("alt")
  valid_582407 = validateParameter(valid_582407, JString, required = false,
                                 default = newJString("json"))
  if valid_582407 != nil:
    section.add "alt", valid_582407
  var valid_582408 = query.getOrDefault("oauth_token")
  valid_582408 = validateParameter(valid_582408, JString, required = false,
                                 default = nil)
  if valid_582408 != nil:
    section.add "oauth_token", valid_582408
  var valid_582409 = query.getOrDefault("userIp")
  valid_582409 = validateParameter(valid_582409, JString, required = false,
                                 default = nil)
  if valid_582409 != nil:
    section.add "userIp", valid_582409
  var valid_582410 = query.getOrDefault("key")
  valid_582410 = validateParameter(valid_582410, JString, required = false,
                                 default = nil)
  if valid_582410 != nil:
    section.add "key", valid_582410
  var valid_582411 = query.getOrDefault("prettyPrint")
  valid_582411 = validateParameter(valid_582411, JBool, required = false,
                                 default = newJBool(true))
  if valid_582411 != nil:
    section.add "prettyPrint", valid_582411
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582413: Call_DfareportingPlacementStrategiesPatch_582400;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing placement strategy. This method supports patch semantics.
  ## 
  let valid = call_582413.validator(path, query, header, formData, body)
  let scheme = call_582413.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582413.url(scheme.get, call_582413.host, call_582413.base,
                         call_582413.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582413, url, valid)

proc call*(call_582414: Call_DfareportingPlacementStrategiesPatch_582400;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementStrategiesPatch
  ## Updates an existing placement strategy. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Placement strategy ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582415 = newJObject()
  var query_582416 = newJObject()
  var body_582417 = newJObject()
  add(path_582415, "profileId", newJString(profileId))
  add(query_582416, "fields", newJString(fields))
  add(query_582416, "quotaUser", newJString(quotaUser))
  add(query_582416, "id", newJString(id))
  add(query_582416, "alt", newJString(alt))
  add(query_582416, "oauth_token", newJString(oauthToken))
  add(query_582416, "userIp", newJString(userIp))
  add(query_582416, "key", newJString(key))
  if body != nil:
    body_582417 = body
  add(query_582416, "prettyPrint", newJBool(prettyPrint))
  result = call_582414.call(path_582415, query_582416, nil, nil, body_582417)

var dfareportingPlacementStrategiesPatch* = Call_DfareportingPlacementStrategiesPatch_582400(
    name: "dfareportingPlacementStrategiesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies",
    validator: validate_DfareportingPlacementStrategiesPatch_582401,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesPatch_582402,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesGet_582418 = ref object of OpenApiRestCall_579437
proc url_DfareportingPlacementStrategiesGet_582420(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesGet_582419(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one placement strategy by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Placement strategy ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582421 = path.getOrDefault("profileId")
  valid_582421 = validateParameter(valid_582421, JString, required = true,
                                 default = nil)
  if valid_582421 != nil:
    section.add "profileId", valid_582421
  var valid_582422 = path.getOrDefault("id")
  valid_582422 = validateParameter(valid_582422, JString, required = true,
                                 default = nil)
  if valid_582422 != nil:
    section.add "id", valid_582422
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582423 = query.getOrDefault("fields")
  valid_582423 = validateParameter(valid_582423, JString, required = false,
                                 default = nil)
  if valid_582423 != nil:
    section.add "fields", valid_582423
  var valid_582424 = query.getOrDefault("quotaUser")
  valid_582424 = validateParameter(valid_582424, JString, required = false,
                                 default = nil)
  if valid_582424 != nil:
    section.add "quotaUser", valid_582424
  var valid_582425 = query.getOrDefault("alt")
  valid_582425 = validateParameter(valid_582425, JString, required = false,
                                 default = newJString("json"))
  if valid_582425 != nil:
    section.add "alt", valid_582425
  var valid_582426 = query.getOrDefault("oauth_token")
  valid_582426 = validateParameter(valid_582426, JString, required = false,
                                 default = nil)
  if valid_582426 != nil:
    section.add "oauth_token", valid_582426
  var valid_582427 = query.getOrDefault("userIp")
  valid_582427 = validateParameter(valid_582427, JString, required = false,
                                 default = nil)
  if valid_582427 != nil:
    section.add "userIp", valid_582427
  var valid_582428 = query.getOrDefault("key")
  valid_582428 = validateParameter(valid_582428, JString, required = false,
                                 default = nil)
  if valid_582428 != nil:
    section.add "key", valid_582428
  var valid_582429 = query.getOrDefault("prettyPrint")
  valid_582429 = validateParameter(valid_582429, JBool, required = false,
                                 default = newJBool(true))
  if valid_582429 != nil:
    section.add "prettyPrint", valid_582429
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582430: Call_DfareportingPlacementStrategiesGet_582418;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one placement strategy by ID.
  ## 
  let valid = call_582430.validator(path, query, header, formData, body)
  let scheme = call_582430.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582430.url(scheme.get, call_582430.host, call_582430.base,
                         call_582430.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582430, url, valid)

proc call*(call_582431: Call_DfareportingPlacementStrategiesGet_582418;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementStrategiesGet
  ## Gets one placement strategy by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Placement strategy ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582432 = newJObject()
  var query_582433 = newJObject()
  add(path_582432, "profileId", newJString(profileId))
  add(query_582433, "fields", newJString(fields))
  add(query_582433, "quotaUser", newJString(quotaUser))
  add(query_582433, "alt", newJString(alt))
  add(query_582433, "oauth_token", newJString(oauthToken))
  add(query_582433, "userIp", newJString(userIp))
  add(path_582432, "id", newJString(id))
  add(query_582433, "key", newJString(key))
  add(query_582433, "prettyPrint", newJBool(prettyPrint))
  result = call_582431.call(path_582432, query_582433, nil, nil, nil)

var dfareportingPlacementStrategiesGet* = Call_DfareportingPlacementStrategiesGet_582418(
    name: "dfareportingPlacementStrategiesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies/{id}",
    validator: validate_DfareportingPlacementStrategiesGet_582419,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesGet_582420,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesDelete_582434 = ref object of OpenApiRestCall_579437
proc url_DfareportingPlacementStrategiesDelete_582436(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesDelete_582435(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing placement strategy.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Placement strategy ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582437 = path.getOrDefault("profileId")
  valid_582437 = validateParameter(valid_582437, JString, required = true,
                                 default = nil)
  if valid_582437 != nil:
    section.add "profileId", valid_582437
  var valid_582438 = path.getOrDefault("id")
  valid_582438 = validateParameter(valid_582438, JString, required = true,
                                 default = nil)
  if valid_582438 != nil:
    section.add "id", valid_582438
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582439 = query.getOrDefault("fields")
  valid_582439 = validateParameter(valid_582439, JString, required = false,
                                 default = nil)
  if valid_582439 != nil:
    section.add "fields", valid_582439
  var valid_582440 = query.getOrDefault("quotaUser")
  valid_582440 = validateParameter(valid_582440, JString, required = false,
                                 default = nil)
  if valid_582440 != nil:
    section.add "quotaUser", valid_582440
  var valid_582441 = query.getOrDefault("alt")
  valid_582441 = validateParameter(valid_582441, JString, required = false,
                                 default = newJString("json"))
  if valid_582441 != nil:
    section.add "alt", valid_582441
  var valid_582442 = query.getOrDefault("oauth_token")
  valid_582442 = validateParameter(valid_582442, JString, required = false,
                                 default = nil)
  if valid_582442 != nil:
    section.add "oauth_token", valid_582442
  var valid_582443 = query.getOrDefault("userIp")
  valid_582443 = validateParameter(valid_582443, JString, required = false,
                                 default = nil)
  if valid_582443 != nil:
    section.add "userIp", valid_582443
  var valid_582444 = query.getOrDefault("key")
  valid_582444 = validateParameter(valid_582444, JString, required = false,
                                 default = nil)
  if valid_582444 != nil:
    section.add "key", valid_582444
  var valid_582445 = query.getOrDefault("prettyPrint")
  valid_582445 = validateParameter(valid_582445, JBool, required = false,
                                 default = newJBool(true))
  if valid_582445 != nil:
    section.add "prettyPrint", valid_582445
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582446: Call_DfareportingPlacementStrategiesDelete_582434;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing placement strategy.
  ## 
  let valid = call_582446.validator(path, query, header, formData, body)
  let scheme = call_582446.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582446.url(scheme.get, call_582446.host, call_582446.base,
                         call_582446.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582446, url, valid)

proc call*(call_582447: Call_DfareportingPlacementStrategiesDelete_582434;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementStrategiesDelete
  ## Deletes an existing placement strategy.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Placement strategy ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582448 = newJObject()
  var query_582449 = newJObject()
  add(path_582448, "profileId", newJString(profileId))
  add(query_582449, "fields", newJString(fields))
  add(query_582449, "quotaUser", newJString(quotaUser))
  add(query_582449, "alt", newJString(alt))
  add(query_582449, "oauth_token", newJString(oauthToken))
  add(query_582449, "userIp", newJString(userIp))
  add(path_582448, "id", newJString(id))
  add(query_582449, "key", newJString(key))
  add(query_582449, "prettyPrint", newJBool(prettyPrint))
  result = call_582447.call(path_582448, query_582449, nil, nil, nil)

var dfareportingPlacementStrategiesDelete* = Call_DfareportingPlacementStrategiesDelete_582434(
    name: "dfareportingPlacementStrategiesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies/{id}",
    validator: validate_DfareportingPlacementStrategiesDelete_582435,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesDelete_582436,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsUpdate_582487 = ref object of OpenApiRestCall_579437
proc url_DfareportingPlacementsUpdate_582489(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsUpdate_582488(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582490 = path.getOrDefault("profileId")
  valid_582490 = validateParameter(valid_582490, JString, required = true,
                                 default = nil)
  if valid_582490 != nil:
    section.add "profileId", valid_582490
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582491 = query.getOrDefault("fields")
  valid_582491 = validateParameter(valid_582491, JString, required = false,
                                 default = nil)
  if valid_582491 != nil:
    section.add "fields", valid_582491
  var valid_582492 = query.getOrDefault("quotaUser")
  valid_582492 = validateParameter(valid_582492, JString, required = false,
                                 default = nil)
  if valid_582492 != nil:
    section.add "quotaUser", valid_582492
  var valid_582493 = query.getOrDefault("alt")
  valid_582493 = validateParameter(valid_582493, JString, required = false,
                                 default = newJString("json"))
  if valid_582493 != nil:
    section.add "alt", valid_582493
  var valid_582494 = query.getOrDefault("oauth_token")
  valid_582494 = validateParameter(valid_582494, JString, required = false,
                                 default = nil)
  if valid_582494 != nil:
    section.add "oauth_token", valid_582494
  var valid_582495 = query.getOrDefault("userIp")
  valid_582495 = validateParameter(valid_582495, JString, required = false,
                                 default = nil)
  if valid_582495 != nil:
    section.add "userIp", valid_582495
  var valid_582496 = query.getOrDefault("key")
  valid_582496 = validateParameter(valid_582496, JString, required = false,
                                 default = nil)
  if valid_582496 != nil:
    section.add "key", valid_582496
  var valid_582497 = query.getOrDefault("prettyPrint")
  valid_582497 = validateParameter(valid_582497, JBool, required = false,
                                 default = newJBool(true))
  if valid_582497 != nil:
    section.add "prettyPrint", valid_582497
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582499: Call_DfareportingPlacementsUpdate_582487; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing placement.
  ## 
  let valid = call_582499.validator(path, query, header, formData, body)
  let scheme = call_582499.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582499.url(scheme.get, call_582499.host, call_582499.base,
                         call_582499.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582499, url, valid)

proc call*(call_582500: Call_DfareportingPlacementsUpdate_582487;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementsUpdate
  ## Updates an existing placement.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582501 = newJObject()
  var query_582502 = newJObject()
  var body_582503 = newJObject()
  add(path_582501, "profileId", newJString(profileId))
  add(query_582502, "fields", newJString(fields))
  add(query_582502, "quotaUser", newJString(quotaUser))
  add(query_582502, "alt", newJString(alt))
  add(query_582502, "oauth_token", newJString(oauthToken))
  add(query_582502, "userIp", newJString(userIp))
  add(query_582502, "key", newJString(key))
  if body != nil:
    body_582503 = body
  add(query_582502, "prettyPrint", newJBool(prettyPrint))
  result = call_582500.call(path_582501, query_582502, nil, nil, body_582503)

var dfareportingPlacementsUpdate* = Call_DfareportingPlacementsUpdate_582487(
    name: "dfareportingPlacementsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/placements",
    validator: validate_DfareportingPlacementsUpdate_582488,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsUpdate_582489,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsInsert_582504 = ref object of OpenApiRestCall_579437
proc url_DfareportingPlacementsInsert_582506(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsInsert_582505(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new placement.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582507 = path.getOrDefault("profileId")
  valid_582507 = validateParameter(valid_582507, JString, required = true,
                                 default = nil)
  if valid_582507 != nil:
    section.add "profileId", valid_582507
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582508 = query.getOrDefault("fields")
  valid_582508 = validateParameter(valid_582508, JString, required = false,
                                 default = nil)
  if valid_582508 != nil:
    section.add "fields", valid_582508
  var valid_582509 = query.getOrDefault("quotaUser")
  valid_582509 = validateParameter(valid_582509, JString, required = false,
                                 default = nil)
  if valid_582509 != nil:
    section.add "quotaUser", valid_582509
  var valid_582510 = query.getOrDefault("alt")
  valid_582510 = validateParameter(valid_582510, JString, required = false,
                                 default = newJString("json"))
  if valid_582510 != nil:
    section.add "alt", valid_582510
  var valid_582511 = query.getOrDefault("oauth_token")
  valid_582511 = validateParameter(valid_582511, JString, required = false,
                                 default = nil)
  if valid_582511 != nil:
    section.add "oauth_token", valid_582511
  var valid_582512 = query.getOrDefault("userIp")
  valid_582512 = validateParameter(valid_582512, JString, required = false,
                                 default = nil)
  if valid_582512 != nil:
    section.add "userIp", valid_582512
  var valid_582513 = query.getOrDefault("key")
  valid_582513 = validateParameter(valid_582513, JString, required = false,
                                 default = nil)
  if valid_582513 != nil:
    section.add "key", valid_582513
  var valid_582514 = query.getOrDefault("prettyPrint")
  valid_582514 = validateParameter(valid_582514, JBool, required = false,
                                 default = newJBool(true))
  if valid_582514 != nil:
    section.add "prettyPrint", valid_582514
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582516: Call_DfareportingPlacementsInsert_582504; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new placement.
  ## 
  let valid = call_582516.validator(path, query, header, formData, body)
  let scheme = call_582516.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582516.url(scheme.get, call_582516.host, call_582516.base,
                         call_582516.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582516, url, valid)

proc call*(call_582517: Call_DfareportingPlacementsInsert_582504;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementsInsert
  ## Inserts a new placement.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582518 = newJObject()
  var query_582519 = newJObject()
  var body_582520 = newJObject()
  add(path_582518, "profileId", newJString(profileId))
  add(query_582519, "fields", newJString(fields))
  add(query_582519, "quotaUser", newJString(quotaUser))
  add(query_582519, "alt", newJString(alt))
  add(query_582519, "oauth_token", newJString(oauthToken))
  add(query_582519, "userIp", newJString(userIp))
  add(query_582519, "key", newJString(key))
  if body != nil:
    body_582520 = body
  add(query_582519, "prettyPrint", newJBool(prettyPrint))
  result = call_582517.call(path_582518, query_582519, nil, nil, body_582520)

var dfareportingPlacementsInsert* = Call_DfareportingPlacementsInsert_582504(
    name: "dfareportingPlacementsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/placements",
    validator: validate_DfareportingPlacementsInsert_582505,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsInsert_582506,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsList_582450 = ref object of OpenApiRestCall_579437
proc url_DfareportingPlacementsList_582452(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsList_582451(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of placements, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582453 = path.getOrDefault("profileId")
  valid_582453 = validateParameter(valid_582453, JString, required = true,
                                 default = nil)
  if valid_582453 != nil:
    section.add "profileId", valid_582453
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   contentCategoryIds: JArray
  ##                     : Select only placements that are associated with these content categories.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for placements by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placements with names like "placement June 2015", "placement May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placement" will match placements with name "my placement", "placement 2015", or simply "placement".
  ##   minEndDate: JString
  ##             : Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   sizeIds: JArray
  ##          : Select only placements that are associated with these sizes.
  ##   siteIds: JArray
  ##          : Select only placements that are associated with these sites.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   maxStartDate: JString
  ##               : Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   campaignIds: JArray
  ##              : Select only placements that belong to these campaigns.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived placements. Don't set this field to select both archived and non-archived placements.
  ##   maxEndDate: JString
  ##             : Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only placements with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only placements that belong to these advertisers.
  ##   minStartDate: JString
  ##               : Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   paymentSource: JString
  ##                : Select only placements with this payment source.
  ##   compatibilities: JArray
  ##                  : Select only placements that are associated with these compatibilities. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   directorySiteIds: JArray
  ##                   : Select only placements that are associated with these directory sites.
  ##   groupIds: JArray
  ##           : Select only placements that belong to these placement groups.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   placementStrategyIds: JArray
  ##                       : Select only placements that are associated with these placement strategies.
  ##   pricingTypes: JArray
  ##               : Select only placements with these pricing types.
  section = newJObject()
  var valid_582454 = query.getOrDefault("fields")
  valid_582454 = validateParameter(valid_582454, JString, required = false,
                                 default = nil)
  if valid_582454 != nil:
    section.add "fields", valid_582454
  var valid_582455 = query.getOrDefault("pageToken")
  valid_582455 = validateParameter(valid_582455, JString, required = false,
                                 default = nil)
  if valid_582455 != nil:
    section.add "pageToken", valid_582455
  var valid_582456 = query.getOrDefault("quotaUser")
  valid_582456 = validateParameter(valid_582456, JString, required = false,
                                 default = nil)
  if valid_582456 != nil:
    section.add "quotaUser", valid_582456
  var valid_582457 = query.getOrDefault("sortField")
  valid_582457 = validateParameter(valid_582457, JString, required = false,
                                 default = newJString("ID"))
  if valid_582457 != nil:
    section.add "sortField", valid_582457
  var valid_582458 = query.getOrDefault("contentCategoryIds")
  valid_582458 = validateParameter(valid_582458, JArray, required = false,
                                 default = nil)
  if valid_582458 != nil:
    section.add "contentCategoryIds", valid_582458
  var valid_582459 = query.getOrDefault("alt")
  valid_582459 = validateParameter(valid_582459, JString, required = false,
                                 default = newJString("json"))
  if valid_582459 != nil:
    section.add "alt", valid_582459
  var valid_582460 = query.getOrDefault("searchString")
  valid_582460 = validateParameter(valid_582460, JString, required = false,
                                 default = nil)
  if valid_582460 != nil:
    section.add "searchString", valid_582460
  var valid_582461 = query.getOrDefault("minEndDate")
  valid_582461 = validateParameter(valid_582461, JString, required = false,
                                 default = nil)
  if valid_582461 != nil:
    section.add "minEndDate", valid_582461
  var valid_582462 = query.getOrDefault("sizeIds")
  valid_582462 = validateParameter(valid_582462, JArray, required = false,
                                 default = nil)
  if valid_582462 != nil:
    section.add "sizeIds", valid_582462
  var valid_582463 = query.getOrDefault("siteIds")
  valid_582463 = validateParameter(valid_582463, JArray, required = false,
                                 default = nil)
  if valid_582463 != nil:
    section.add "siteIds", valid_582463
  var valid_582464 = query.getOrDefault("oauth_token")
  valid_582464 = validateParameter(valid_582464, JString, required = false,
                                 default = nil)
  if valid_582464 != nil:
    section.add "oauth_token", valid_582464
  var valid_582465 = query.getOrDefault("maxStartDate")
  valid_582465 = validateParameter(valid_582465, JString, required = false,
                                 default = nil)
  if valid_582465 != nil:
    section.add "maxStartDate", valid_582465
  var valid_582466 = query.getOrDefault("campaignIds")
  valid_582466 = validateParameter(valid_582466, JArray, required = false,
                                 default = nil)
  if valid_582466 != nil:
    section.add "campaignIds", valid_582466
  var valid_582467 = query.getOrDefault("userIp")
  valid_582467 = validateParameter(valid_582467, JString, required = false,
                                 default = nil)
  if valid_582467 != nil:
    section.add "userIp", valid_582467
  var valid_582468 = query.getOrDefault("archived")
  valid_582468 = validateParameter(valid_582468, JBool, required = false, default = nil)
  if valid_582468 != nil:
    section.add "archived", valid_582468
  var valid_582469 = query.getOrDefault("maxEndDate")
  valid_582469 = validateParameter(valid_582469, JString, required = false,
                                 default = nil)
  if valid_582469 != nil:
    section.add "maxEndDate", valid_582469
  var valid_582470 = query.getOrDefault("maxResults")
  valid_582470 = validateParameter(valid_582470, JInt, required = false,
                                 default = newJInt(1000))
  if valid_582470 != nil:
    section.add "maxResults", valid_582470
  var valid_582471 = query.getOrDefault("ids")
  valid_582471 = validateParameter(valid_582471, JArray, required = false,
                                 default = nil)
  if valid_582471 != nil:
    section.add "ids", valid_582471
  var valid_582472 = query.getOrDefault("key")
  valid_582472 = validateParameter(valid_582472, JString, required = false,
                                 default = nil)
  if valid_582472 != nil:
    section.add "key", valid_582472
  var valid_582473 = query.getOrDefault("advertiserIds")
  valid_582473 = validateParameter(valid_582473, JArray, required = false,
                                 default = nil)
  if valid_582473 != nil:
    section.add "advertiserIds", valid_582473
  var valid_582474 = query.getOrDefault("minStartDate")
  valid_582474 = validateParameter(valid_582474, JString, required = false,
                                 default = nil)
  if valid_582474 != nil:
    section.add "minStartDate", valid_582474
  var valid_582475 = query.getOrDefault("paymentSource")
  valid_582475 = validateParameter(valid_582475, JString, required = false,
                                 default = newJString("PLACEMENT_AGENCY_PAID"))
  if valid_582475 != nil:
    section.add "paymentSource", valid_582475
  var valid_582476 = query.getOrDefault("compatibilities")
  valid_582476 = validateParameter(valid_582476, JArray, required = false,
                                 default = nil)
  if valid_582476 != nil:
    section.add "compatibilities", valid_582476
  var valid_582477 = query.getOrDefault("sortOrder")
  valid_582477 = validateParameter(valid_582477, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_582477 != nil:
    section.add "sortOrder", valid_582477
  var valid_582478 = query.getOrDefault("directorySiteIds")
  valid_582478 = validateParameter(valid_582478, JArray, required = false,
                                 default = nil)
  if valid_582478 != nil:
    section.add "directorySiteIds", valid_582478
  var valid_582479 = query.getOrDefault("groupIds")
  valid_582479 = validateParameter(valid_582479, JArray, required = false,
                                 default = nil)
  if valid_582479 != nil:
    section.add "groupIds", valid_582479
  var valid_582480 = query.getOrDefault("prettyPrint")
  valid_582480 = validateParameter(valid_582480, JBool, required = false,
                                 default = newJBool(true))
  if valid_582480 != nil:
    section.add "prettyPrint", valid_582480
  var valid_582481 = query.getOrDefault("placementStrategyIds")
  valid_582481 = validateParameter(valid_582481, JArray, required = false,
                                 default = nil)
  if valid_582481 != nil:
    section.add "placementStrategyIds", valid_582481
  var valid_582482 = query.getOrDefault("pricingTypes")
  valid_582482 = validateParameter(valid_582482, JArray, required = false,
                                 default = nil)
  if valid_582482 != nil:
    section.add "pricingTypes", valid_582482
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582483: Call_DfareportingPlacementsList_582450; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of placements, possibly filtered. This method supports paging.
  ## 
  let valid = call_582483.validator(path, query, header, formData, body)
  let scheme = call_582483.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582483.url(scheme.get, call_582483.host, call_582483.base,
                         call_582483.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582483, url, valid)

proc call*(call_582484: Call_DfareportingPlacementsList_582450; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "ID"; contentCategoryIds: JsonNode = nil;
          alt: string = "json"; searchString: string = ""; minEndDate: string = "";
          sizeIds: JsonNode = nil; siteIds: JsonNode = nil; oauthToken: string = "";
          maxStartDate: string = ""; campaignIds: JsonNode = nil; userIp: string = "";
          archived: bool = false; maxEndDate: string = ""; maxResults: int = 1000;
          ids: JsonNode = nil; key: string = ""; advertiserIds: JsonNode = nil;
          minStartDate: string = "";
          paymentSource: string = "PLACEMENT_AGENCY_PAID";
          compatibilities: JsonNode = nil; sortOrder: string = "ASCENDING";
          directorySiteIds: JsonNode = nil; groupIds: JsonNode = nil;
          prettyPrint: bool = true; placementStrategyIds: JsonNode = nil;
          pricingTypes: JsonNode = nil): Recallable =
  ## dfareportingPlacementsList
  ## Retrieves a list of placements, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   contentCategoryIds: JArray
  ##                     : Select only placements that are associated with these content categories.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for placements by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placements with names like "placement June 2015", "placement May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placement" will match placements with name "my placement", "placement 2015", or simply "placement".
  ##   minEndDate: string
  ##             : Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   sizeIds: JArray
  ##          : Select only placements that are associated with these sizes.
  ##   siteIds: JArray
  ##          : Select only placements that are associated with these sites.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   maxStartDate: string
  ##               : Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   campaignIds: JArray
  ##              : Select only placements that belong to these campaigns.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived placements. Don't set this field to select both archived and non-archived placements.
  ##   maxEndDate: string
  ##             : Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only placements with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only placements that belong to these advertisers.
  ##   minStartDate: string
  ##               : Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   paymentSource: string
  ##                : Select only placements with this payment source.
  ##   compatibilities: JArray
  ##                  : Select only placements that are associated with these compatibilities. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   directorySiteIds: JArray
  ##                   : Select only placements that are associated with these directory sites.
  ##   groupIds: JArray
  ##           : Select only placements that belong to these placement groups.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   placementStrategyIds: JArray
  ##                       : Select only placements that are associated with these placement strategies.
  ##   pricingTypes: JArray
  ##               : Select only placements with these pricing types.
  var path_582485 = newJObject()
  var query_582486 = newJObject()
  add(path_582485, "profileId", newJString(profileId))
  add(query_582486, "fields", newJString(fields))
  add(query_582486, "pageToken", newJString(pageToken))
  add(query_582486, "quotaUser", newJString(quotaUser))
  add(query_582486, "sortField", newJString(sortField))
  if contentCategoryIds != nil:
    query_582486.add "contentCategoryIds", contentCategoryIds
  add(query_582486, "alt", newJString(alt))
  add(query_582486, "searchString", newJString(searchString))
  add(query_582486, "minEndDate", newJString(minEndDate))
  if sizeIds != nil:
    query_582486.add "sizeIds", sizeIds
  if siteIds != nil:
    query_582486.add "siteIds", siteIds
  add(query_582486, "oauth_token", newJString(oauthToken))
  add(query_582486, "maxStartDate", newJString(maxStartDate))
  if campaignIds != nil:
    query_582486.add "campaignIds", campaignIds
  add(query_582486, "userIp", newJString(userIp))
  add(query_582486, "archived", newJBool(archived))
  add(query_582486, "maxEndDate", newJString(maxEndDate))
  add(query_582486, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_582486.add "ids", ids
  add(query_582486, "key", newJString(key))
  if advertiserIds != nil:
    query_582486.add "advertiserIds", advertiserIds
  add(query_582486, "minStartDate", newJString(minStartDate))
  add(query_582486, "paymentSource", newJString(paymentSource))
  if compatibilities != nil:
    query_582486.add "compatibilities", compatibilities
  add(query_582486, "sortOrder", newJString(sortOrder))
  if directorySiteIds != nil:
    query_582486.add "directorySiteIds", directorySiteIds
  if groupIds != nil:
    query_582486.add "groupIds", groupIds
  add(query_582486, "prettyPrint", newJBool(prettyPrint))
  if placementStrategyIds != nil:
    query_582486.add "placementStrategyIds", placementStrategyIds
  if pricingTypes != nil:
    query_582486.add "pricingTypes", pricingTypes
  result = call_582484.call(path_582485, query_582486, nil, nil, nil)

var dfareportingPlacementsList* = Call_DfareportingPlacementsList_582450(
    name: "dfareportingPlacementsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/placements",
    validator: validate_DfareportingPlacementsList_582451,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsList_582452,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsPatch_582521 = ref object of OpenApiRestCall_579437
proc url_DfareportingPlacementsPatch_582523(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsPatch_582522(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582524 = path.getOrDefault("profileId")
  valid_582524 = validateParameter(valid_582524, JString, required = true,
                                 default = nil)
  if valid_582524 != nil:
    section.add "profileId", valid_582524
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Placement ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582525 = query.getOrDefault("fields")
  valid_582525 = validateParameter(valid_582525, JString, required = false,
                                 default = nil)
  if valid_582525 != nil:
    section.add "fields", valid_582525
  var valid_582526 = query.getOrDefault("quotaUser")
  valid_582526 = validateParameter(valid_582526, JString, required = false,
                                 default = nil)
  if valid_582526 != nil:
    section.add "quotaUser", valid_582526
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_582527 = query.getOrDefault("id")
  valid_582527 = validateParameter(valid_582527, JString, required = true,
                                 default = nil)
  if valid_582527 != nil:
    section.add "id", valid_582527
  var valid_582528 = query.getOrDefault("alt")
  valid_582528 = validateParameter(valid_582528, JString, required = false,
                                 default = newJString("json"))
  if valid_582528 != nil:
    section.add "alt", valid_582528
  var valid_582529 = query.getOrDefault("oauth_token")
  valid_582529 = validateParameter(valid_582529, JString, required = false,
                                 default = nil)
  if valid_582529 != nil:
    section.add "oauth_token", valid_582529
  var valid_582530 = query.getOrDefault("userIp")
  valid_582530 = validateParameter(valid_582530, JString, required = false,
                                 default = nil)
  if valid_582530 != nil:
    section.add "userIp", valid_582530
  var valid_582531 = query.getOrDefault("key")
  valid_582531 = validateParameter(valid_582531, JString, required = false,
                                 default = nil)
  if valid_582531 != nil:
    section.add "key", valid_582531
  var valid_582532 = query.getOrDefault("prettyPrint")
  valid_582532 = validateParameter(valid_582532, JBool, required = false,
                                 default = newJBool(true))
  if valid_582532 != nil:
    section.add "prettyPrint", valid_582532
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582534: Call_DfareportingPlacementsPatch_582521; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing placement. This method supports patch semantics.
  ## 
  let valid = call_582534.validator(path, query, header, formData, body)
  let scheme = call_582534.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582534.url(scheme.get, call_582534.host, call_582534.base,
                         call_582534.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582534, url, valid)

proc call*(call_582535: Call_DfareportingPlacementsPatch_582521; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementsPatch
  ## Updates an existing placement. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Placement ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582536 = newJObject()
  var query_582537 = newJObject()
  var body_582538 = newJObject()
  add(path_582536, "profileId", newJString(profileId))
  add(query_582537, "fields", newJString(fields))
  add(query_582537, "quotaUser", newJString(quotaUser))
  add(query_582537, "id", newJString(id))
  add(query_582537, "alt", newJString(alt))
  add(query_582537, "oauth_token", newJString(oauthToken))
  add(query_582537, "userIp", newJString(userIp))
  add(query_582537, "key", newJString(key))
  if body != nil:
    body_582538 = body
  add(query_582537, "prettyPrint", newJBool(prettyPrint))
  result = call_582535.call(path_582536, query_582537, nil, nil, body_582538)

var dfareportingPlacementsPatch* = Call_DfareportingPlacementsPatch_582521(
    name: "dfareportingPlacementsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/placements",
    validator: validate_DfareportingPlacementsPatch_582522,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsPatch_582523,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsGeneratetags_582539 = ref object of OpenApiRestCall_579437
proc url_DfareportingPlacementsGeneratetags_582541(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements/generatetags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsGeneratetags_582540(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates tags for a placement.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582542 = path.getOrDefault("profileId")
  valid_582542 = validateParameter(valid_582542, JString, required = true,
                                 default = nil)
  if valid_582542 != nil:
    section.add "profileId", valid_582542
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   campaignId: JString
  ##             : Generate placements belonging to this campaign. This is a required field.
  ##   tagFormats: JArray
  ##             : Tag formats to generate for these placements.
  ## 
  ## Note: PLACEMENT_TAG_STANDARD can only be generated for 1x1 placements.
  ##   placementIds: JArray
  ##               : Generate tags for these placements.
  section = newJObject()
  var valid_582543 = query.getOrDefault("fields")
  valid_582543 = validateParameter(valid_582543, JString, required = false,
                                 default = nil)
  if valid_582543 != nil:
    section.add "fields", valid_582543
  var valid_582544 = query.getOrDefault("quotaUser")
  valid_582544 = validateParameter(valid_582544, JString, required = false,
                                 default = nil)
  if valid_582544 != nil:
    section.add "quotaUser", valid_582544
  var valid_582545 = query.getOrDefault("alt")
  valid_582545 = validateParameter(valid_582545, JString, required = false,
                                 default = newJString("json"))
  if valid_582545 != nil:
    section.add "alt", valid_582545
  var valid_582546 = query.getOrDefault("oauth_token")
  valid_582546 = validateParameter(valid_582546, JString, required = false,
                                 default = nil)
  if valid_582546 != nil:
    section.add "oauth_token", valid_582546
  var valid_582547 = query.getOrDefault("userIp")
  valid_582547 = validateParameter(valid_582547, JString, required = false,
                                 default = nil)
  if valid_582547 != nil:
    section.add "userIp", valid_582547
  var valid_582548 = query.getOrDefault("key")
  valid_582548 = validateParameter(valid_582548, JString, required = false,
                                 default = nil)
  if valid_582548 != nil:
    section.add "key", valid_582548
  var valid_582549 = query.getOrDefault("prettyPrint")
  valid_582549 = validateParameter(valid_582549, JBool, required = false,
                                 default = newJBool(true))
  if valid_582549 != nil:
    section.add "prettyPrint", valid_582549
  var valid_582550 = query.getOrDefault("campaignId")
  valid_582550 = validateParameter(valid_582550, JString, required = false,
                                 default = nil)
  if valid_582550 != nil:
    section.add "campaignId", valid_582550
  var valid_582551 = query.getOrDefault("tagFormats")
  valid_582551 = validateParameter(valid_582551, JArray, required = false,
                                 default = nil)
  if valid_582551 != nil:
    section.add "tagFormats", valid_582551
  var valid_582552 = query.getOrDefault("placementIds")
  valid_582552 = validateParameter(valid_582552, JArray, required = false,
                                 default = nil)
  if valid_582552 != nil:
    section.add "placementIds", valid_582552
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582553: Call_DfareportingPlacementsGeneratetags_582539;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates tags for a placement.
  ## 
  let valid = call_582553.validator(path, query, header, formData, body)
  let scheme = call_582553.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582553.url(scheme.get, call_582553.host, call_582553.base,
                         call_582553.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582553, url, valid)

proc call*(call_582554: Call_DfareportingPlacementsGeneratetags_582539;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true; campaignId: string = "";
          tagFormats: JsonNode = nil; placementIds: JsonNode = nil): Recallable =
  ## dfareportingPlacementsGeneratetags
  ## Generates tags for a placement.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   campaignId: string
  ##             : Generate placements belonging to this campaign. This is a required field.
  ##   tagFormats: JArray
  ##             : Tag formats to generate for these placements.
  ## 
  ## Note: PLACEMENT_TAG_STANDARD can only be generated for 1x1 placements.
  ##   placementIds: JArray
  ##               : Generate tags for these placements.
  var path_582555 = newJObject()
  var query_582556 = newJObject()
  add(path_582555, "profileId", newJString(profileId))
  add(query_582556, "fields", newJString(fields))
  add(query_582556, "quotaUser", newJString(quotaUser))
  add(query_582556, "alt", newJString(alt))
  add(query_582556, "oauth_token", newJString(oauthToken))
  add(query_582556, "userIp", newJString(userIp))
  add(query_582556, "key", newJString(key))
  add(query_582556, "prettyPrint", newJBool(prettyPrint))
  add(query_582556, "campaignId", newJString(campaignId))
  if tagFormats != nil:
    query_582556.add "tagFormats", tagFormats
  if placementIds != nil:
    query_582556.add "placementIds", placementIds
  result = call_582554.call(path_582555, query_582556, nil, nil, nil)

var dfareportingPlacementsGeneratetags* = Call_DfareportingPlacementsGeneratetags_582539(
    name: "dfareportingPlacementsGeneratetags", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placements/generatetags",
    validator: validate_DfareportingPlacementsGeneratetags_582540,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsGeneratetags_582541,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsGet_582557 = ref object of OpenApiRestCall_579437
proc url_DfareportingPlacementsGet_582559(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsGet_582558(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one placement by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Placement ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582560 = path.getOrDefault("profileId")
  valid_582560 = validateParameter(valid_582560, JString, required = true,
                                 default = nil)
  if valid_582560 != nil:
    section.add "profileId", valid_582560
  var valid_582561 = path.getOrDefault("id")
  valid_582561 = validateParameter(valid_582561, JString, required = true,
                                 default = nil)
  if valid_582561 != nil:
    section.add "id", valid_582561
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582562 = query.getOrDefault("fields")
  valid_582562 = validateParameter(valid_582562, JString, required = false,
                                 default = nil)
  if valid_582562 != nil:
    section.add "fields", valid_582562
  var valid_582563 = query.getOrDefault("quotaUser")
  valid_582563 = validateParameter(valid_582563, JString, required = false,
                                 default = nil)
  if valid_582563 != nil:
    section.add "quotaUser", valid_582563
  var valid_582564 = query.getOrDefault("alt")
  valid_582564 = validateParameter(valid_582564, JString, required = false,
                                 default = newJString("json"))
  if valid_582564 != nil:
    section.add "alt", valid_582564
  var valid_582565 = query.getOrDefault("oauth_token")
  valid_582565 = validateParameter(valid_582565, JString, required = false,
                                 default = nil)
  if valid_582565 != nil:
    section.add "oauth_token", valid_582565
  var valid_582566 = query.getOrDefault("userIp")
  valid_582566 = validateParameter(valid_582566, JString, required = false,
                                 default = nil)
  if valid_582566 != nil:
    section.add "userIp", valid_582566
  var valid_582567 = query.getOrDefault("key")
  valid_582567 = validateParameter(valid_582567, JString, required = false,
                                 default = nil)
  if valid_582567 != nil:
    section.add "key", valid_582567
  var valid_582568 = query.getOrDefault("prettyPrint")
  valid_582568 = validateParameter(valid_582568, JBool, required = false,
                                 default = newJBool(true))
  if valid_582568 != nil:
    section.add "prettyPrint", valid_582568
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582569: Call_DfareportingPlacementsGet_582557; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one placement by ID.
  ## 
  let valid = call_582569.validator(path, query, header, formData, body)
  let scheme = call_582569.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582569.url(scheme.get, call_582569.host, call_582569.base,
                         call_582569.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582569, url, valid)

proc call*(call_582570: Call_DfareportingPlacementsGet_582557; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementsGet
  ## Gets one placement by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Placement ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582571 = newJObject()
  var query_582572 = newJObject()
  add(path_582571, "profileId", newJString(profileId))
  add(query_582572, "fields", newJString(fields))
  add(query_582572, "quotaUser", newJString(quotaUser))
  add(query_582572, "alt", newJString(alt))
  add(query_582572, "oauth_token", newJString(oauthToken))
  add(query_582572, "userIp", newJString(userIp))
  add(path_582571, "id", newJString(id))
  add(query_582572, "key", newJString(key))
  add(query_582572, "prettyPrint", newJBool(prettyPrint))
  result = call_582570.call(path_582571, query_582572, nil, nil, nil)

var dfareportingPlacementsGet* = Call_DfareportingPlacementsGet_582557(
    name: "dfareportingPlacementsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placements/{id}",
    validator: validate_DfareportingPlacementsGet_582558,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsGet_582559,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlatformTypesList_582573 = ref object of OpenApiRestCall_579437
proc url_DfareportingPlatformTypesList_582575(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/platformTypes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlatformTypesList_582574(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of platform types.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582576 = path.getOrDefault("profileId")
  valid_582576 = validateParameter(valid_582576, JString, required = true,
                                 default = nil)
  if valid_582576 != nil:
    section.add "profileId", valid_582576
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582577 = query.getOrDefault("fields")
  valid_582577 = validateParameter(valid_582577, JString, required = false,
                                 default = nil)
  if valid_582577 != nil:
    section.add "fields", valid_582577
  var valid_582578 = query.getOrDefault("quotaUser")
  valid_582578 = validateParameter(valid_582578, JString, required = false,
                                 default = nil)
  if valid_582578 != nil:
    section.add "quotaUser", valid_582578
  var valid_582579 = query.getOrDefault("alt")
  valid_582579 = validateParameter(valid_582579, JString, required = false,
                                 default = newJString("json"))
  if valid_582579 != nil:
    section.add "alt", valid_582579
  var valid_582580 = query.getOrDefault("oauth_token")
  valid_582580 = validateParameter(valid_582580, JString, required = false,
                                 default = nil)
  if valid_582580 != nil:
    section.add "oauth_token", valid_582580
  var valid_582581 = query.getOrDefault("userIp")
  valid_582581 = validateParameter(valid_582581, JString, required = false,
                                 default = nil)
  if valid_582581 != nil:
    section.add "userIp", valid_582581
  var valid_582582 = query.getOrDefault("key")
  valid_582582 = validateParameter(valid_582582, JString, required = false,
                                 default = nil)
  if valid_582582 != nil:
    section.add "key", valid_582582
  var valid_582583 = query.getOrDefault("prettyPrint")
  valid_582583 = validateParameter(valid_582583, JBool, required = false,
                                 default = newJBool(true))
  if valid_582583 != nil:
    section.add "prettyPrint", valid_582583
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582584: Call_DfareportingPlatformTypesList_582573; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of platform types.
  ## 
  let valid = call_582584.validator(path, query, header, formData, body)
  let scheme = call_582584.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582584.url(scheme.get, call_582584.host, call_582584.base,
                         call_582584.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582584, url, valid)

proc call*(call_582585: Call_DfareportingPlatformTypesList_582573;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingPlatformTypesList
  ## Retrieves a list of platform types.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582586 = newJObject()
  var query_582587 = newJObject()
  add(path_582586, "profileId", newJString(profileId))
  add(query_582587, "fields", newJString(fields))
  add(query_582587, "quotaUser", newJString(quotaUser))
  add(query_582587, "alt", newJString(alt))
  add(query_582587, "oauth_token", newJString(oauthToken))
  add(query_582587, "userIp", newJString(userIp))
  add(query_582587, "key", newJString(key))
  add(query_582587, "prettyPrint", newJBool(prettyPrint))
  result = call_582585.call(path_582586, query_582587, nil, nil, nil)

var dfareportingPlatformTypesList* = Call_DfareportingPlatformTypesList_582573(
    name: "dfareportingPlatformTypesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/platformTypes",
    validator: validate_DfareportingPlatformTypesList_582574,
    base: "/dfareporting/v3.2", url: url_DfareportingPlatformTypesList_582575,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlatformTypesGet_582588 = ref object of OpenApiRestCall_579437
proc url_DfareportingPlatformTypesGet_582590(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/platformTypes/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlatformTypesGet_582589(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one platform type by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Platform type ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582591 = path.getOrDefault("profileId")
  valid_582591 = validateParameter(valid_582591, JString, required = true,
                                 default = nil)
  if valid_582591 != nil:
    section.add "profileId", valid_582591
  var valid_582592 = path.getOrDefault("id")
  valid_582592 = validateParameter(valid_582592, JString, required = true,
                                 default = nil)
  if valid_582592 != nil:
    section.add "id", valid_582592
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582593 = query.getOrDefault("fields")
  valid_582593 = validateParameter(valid_582593, JString, required = false,
                                 default = nil)
  if valid_582593 != nil:
    section.add "fields", valid_582593
  var valid_582594 = query.getOrDefault("quotaUser")
  valid_582594 = validateParameter(valid_582594, JString, required = false,
                                 default = nil)
  if valid_582594 != nil:
    section.add "quotaUser", valid_582594
  var valid_582595 = query.getOrDefault("alt")
  valid_582595 = validateParameter(valid_582595, JString, required = false,
                                 default = newJString("json"))
  if valid_582595 != nil:
    section.add "alt", valid_582595
  var valid_582596 = query.getOrDefault("oauth_token")
  valid_582596 = validateParameter(valid_582596, JString, required = false,
                                 default = nil)
  if valid_582596 != nil:
    section.add "oauth_token", valid_582596
  var valid_582597 = query.getOrDefault("userIp")
  valid_582597 = validateParameter(valid_582597, JString, required = false,
                                 default = nil)
  if valid_582597 != nil:
    section.add "userIp", valid_582597
  var valid_582598 = query.getOrDefault("key")
  valid_582598 = validateParameter(valid_582598, JString, required = false,
                                 default = nil)
  if valid_582598 != nil:
    section.add "key", valid_582598
  var valid_582599 = query.getOrDefault("prettyPrint")
  valid_582599 = validateParameter(valid_582599, JBool, required = false,
                                 default = newJBool(true))
  if valid_582599 != nil:
    section.add "prettyPrint", valid_582599
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582600: Call_DfareportingPlatformTypesGet_582588; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one platform type by ID.
  ## 
  let valid = call_582600.validator(path, query, header, formData, body)
  let scheme = call_582600.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582600.url(scheme.get, call_582600.host, call_582600.base,
                         call_582600.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582600, url, valid)

proc call*(call_582601: Call_DfareportingPlatformTypesGet_582588;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingPlatformTypesGet
  ## Gets one platform type by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Platform type ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582602 = newJObject()
  var query_582603 = newJObject()
  add(path_582602, "profileId", newJString(profileId))
  add(query_582603, "fields", newJString(fields))
  add(query_582603, "quotaUser", newJString(quotaUser))
  add(query_582603, "alt", newJString(alt))
  add(query_582603, "oauth_token", newJString(oauthToken))
  add(query_582603, "userIp", newJString(userIp))
  add(path_582602, "id", newJString(id))
  add(query_582603, "key", newJString(key))
  add(query_582603, "prettyPrint", newJBool(prettyPrint))
  result = call_582601.call(path_582602, query_582603, nil, nil, nil)

var dfareportingPlatformTypesGet* = Call_DfareportingPlatformTypesGet_582588(
    name: "dfareportingPlatformTypesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/platformTypes/{id}",
    validator: validate_DfareportingPlatformTypesGet_582589,
    base: "/dfareporting/v3.2", url: url_DfareportingPlatformTypesGet_582590,
    schemes: {Scheme.Https})
type
  Call_DfareportingPostalCodesList_582604 = ref object of OpenApiRestCall_579437
proc url_DfareportingPostalCodesList_582606(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/postalCodes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPostalCodesList_582605(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of postal codes.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582607 = path.getOrDefault("profileId")
  valid_582607 = validateParameter(valid_582607, JString, required = true,
                                 default = nil)
  if valid_582607 != nil:
    section.add "profileId", valid_582607
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582608 = query.getOrDefault("fields")
  valid_582608 = validateParameter(valid_582608, JString, required = false,
                                 default = nil)
  if valid_582608 != nil:
    section.add "fields", valid_582608
  var valid_582609 = query.getOrDefault("quotaUser")
  valid_582609 = validateParameter(valid_582609, JString, required = false,
                                 default = nil)
  if valid_582609 != nil:
    section.add "quotaUser", valid_582609
  var valid_582610 = query.getOrDefault("alt")
  valid_582610 = validateParameter(valid_582610, JString, required = false,
                                 default = newJString("json"))
  if valid_582610 != nil:
    section.add "alt", valid_582610
  var valid_582611 = query.getOrDefault("oauth_token")
  valid_582611 = validateParameter(valid_582611, JString, required = false,
                                 default = nil)
  if valid_582611 != nil:
    section.add "oauth_token", valid_582611
  var valid_582612 = query.getOrDefault("userIp")
  valid_582612 = validateParameter(valid_582612, JString, required = false,
                                 default = nil)
  if valid_582612 != nil:
    section.add "userIp", valid_582612
  var valid_582613 = query.getOrDefault("key")
  valid_582613 = validateParameter(valid_582613, JString, required = false,
                                 default = nil)
  if valid_582613 != nil:
    section.add "key", valid_582613
  var valid_582614 = query.getOrDefault("prettyPrint")
  valid_582614 = validateParameter(valid_582614, JBool, required = false,
                                 default = newJBool(true))
  if valid_582614 != nil:
    section.add "prettyPrint", valid_582614
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582615: Call_DfareportingPostalCodesList_582604; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of postal codes.
  ## 
  let valid = call_582615.validator(path, query, header, formData, body)
  let scheme = call_582615.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582615.url(scheme.get, call_582615.host, call_582615.base,
                         call_582615.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582615, url, valid)

proc call*(call_582616: Call_DfareportingPostalCodesList_582604; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingPostalCodesList
  ## Retrieves a list of postal codes.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582617 = newJObject()
  var query_582618 = newJObject()
  add(path_582617, "profileId", newJString(profileId))
  add(query_582618, "fields", newJString(fields))
  add(query_582618, "quotaUser", newJString(quotaUser))
  add(query_582618, "alt", newJString(alt))
  add(query_582618, "oauth_token", newJString(oauthToken))
  add(query_582618, "userIp", newJString(userIp))
  add(query_582618, "key", newJString(key))
  add(query_582618, "prettyPrint", newJBool(prettyPrint))
  result = call_582616.call(path_582617, query_582618, nil, nil, nil)

var dfareportingPostalCodesList* = Call_DfareportingPostalCodesList_582604(
    name: "dfareportingPostalCodesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/postalCodes",
    validator: validate_DfareportingPostalCodesList_582605,
    base: "/dfareporting/v3.2", url: url_DfareportingPostalCodesList_582606,
    schemes: {Scheme.Https})
type
  Call_DfareportingPostalCodesGet_582619 = ref object of OpenApiRestCall_579437
proc url_DfareportingPostalCodesGet_582621(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "code" in path, "`code` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/postalCodes/"),
               (kind: VariableSegment, value: "code")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPostalCodesGet_582620(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one postal code by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   code: JString (required)
  ##       : Postal code ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582622 = path.getOrDefault("profileId")
  valid_582622 = validateParameter(valid_582622, JString, required = true,
                                 default = nil)
  if valid_582622 != nil:
    section.add "profileId", valid_582622
  var valid_582623 = path.getOrDefault("code")
  valid_582623 = validateParameter(valid_582623, JString, required = true,
                                 default = nil)
  if valid_582623 != nil:
    section.add "code", valid_582623
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582624 = query.getOrDefault("fields")
  valid_582624 = validateParameter(valid_582624, JString, required = false,
                                 default = nil)
  if valid_582624 != nil:
    section.add "fields", valid_582624
  var valid_582625 = query.getOrDefault("quotaUser")
  valid_582625 = validateParameter(valid_582625, JString, required = false,
                                 default = nil)
  if valid_582625 != nil:
    section.add "quotaUser", valid_582625
  var valid_582626 = query.getOrDefault("alt")
  valid_582626 = validateParameter(valid_582626, JString, required = false,
                                 default = newJString("json"))
  if valid_582626 != nil:
    section.add "alt", valid_582626
  var valid_582627 = query.getOrDefault("oauth_token")
  valid_582627 = validateParameter(valid_582627, JString, required = false,
                                 default = nil)
  if valid_582627 != nil:
    section.add "oauth_token", valid_582627
  var valid_582628 = query.getOrDefault("userIp")
  valid_582628 = validateParameter(valid_582628, JString, required = false,
                                 default = nil)
  if valid_582628 != nil:
    section.add "userIp", valid_582628
  var valid_582629 = query.getOrDefault("key")
  valid_582629 = validateParameter(valid_582629, JString, required = false,
                                 default = nil)
  if valid_582629 != nil:
    section.add "key", valid_582629
  var valid_582630 = query.getOrDefault("prettyPrint")
  valid_582630 = validateParameter(valid_582630, JBool, required = false,
                                 default = newJBool(true))
  if valid_582630 != nil:
    section.add "prettyPrint", valid_582630
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582631: Call_DfareportingPostalCodesGet_582619; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one postal code by ID.
  ## 
  let valid = call_582631.validator(path, query, header, formData, body)
  let scheme = call_582631.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582631.url(scheme.get, call_582631.host, call_582631.base,
                         call_582631.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582631, url, valid)

proc call*(call_582632: Call_DfareportingPostalCodesGet_582619; profileId: string;
          code: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingPostalCodesGet
  ## Gets one postal code by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   code: string (required)
  ##       : Postal code ID.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582633 = newJObject()
  var query_582634 = newJObject()
  add(path_582633, "profileId", newJString(profileId))
  add(query_582634, "fields", newJString(fields))
  add(query_582634, "quotaUser", newJString(quotaUser))
  add(query_582634, "alt", newJString(alt))
  add(query_582634, "oauth_token", newJString(oauthToken))
  add(query_582634, "userIp", newJString(userIp))
  add(query_582634, "key", newJString(key))
  add(path_582633, "code", newJString(code))
  add(query_582634, "prettyPrint", newJBool(prettyPrint))
  result = call_582632.call(path_582633, query_582634, nil, nil, nil)

var dfareportingPostalCodesGet* = Call_DfareportingPostalCodesGet_582619(
    name: "dfareportingPostalCodesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/postalCodes/{code}",
    validator: validate_DfareportingPostalCodesGet_582620,
    base: "/dfareporting/v3.2", url: url_DfareportingPostalCodesGet_582621,
    schemes: {Scheme.Https})
type
  Call_DfareportingProjectsList_582635 = ref object of OpenApiRestCall_579437
proc url_DfareportingProjectsList_582637(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingProjectsList_582636(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of projects, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582638 = path.getOrDefault("profileId")
  valid_582638 = validateParameter(valid_582638, JString, required = true,
                                 default = nil)
  if valid_582638 != nil:
    section.add "profileId", valid_582638
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for projects by name or ID. Wildcards (*) are allowed. For example, "project*2015" will return projects with names like "project June 2015", "project April 2015", or simply "project 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "project" will match projects with name "my project", "project 2015", or simply "project".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only projects with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only projects with these advertiser IDs.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582639 = query.getOrDefault("fields")
  valid_582639 = validateParameter(valid_582639, JString, required = false,
                                 default = nil)
  if valid_582639 != nil:
    section.add "fields", valid_582639
  var valid_582640 = query.getOrDefault("pageToken")
  valid_582640 = validateParameter(valid_582640, JString, required = false,
                                 default = nil)
  if valid_582640 != nil:
    section.add "pageToken", valid_582640
  var valid_582641 = query.getOrDefault("quotaUser")
  valid_582641 = validateParameter(valid_582641, JString, required = false,
                                 default = nil)
  if valid_582641 != nil:
    section.add "quotaUser", valid_582641
  var valid_582642 = query.getOrDefault("sortField")
  valid_582642 = validateParameter(valid_582642, JString, required = false,
                                 default = newJString("ID"))
  if valid_582642 != nil:
    section.add "sortField", valid_582642
  var valid_582643 = query.getOrDefault("alt")
  valid_582643 = validateParameter(valid_582643, JString, required = false,
                                 default = newJString("json"))
  if valid_582643 != nil:
    section.add "alt", valid_582643
  var valid_582644 = query.getOrDefault("searchString")
  valid_582644 = validateParameter(valid_582644, JString, required = false,
                                 default = nil)
  if valid_582644 != nil:
    section.add "searchString", valid_582644
  var valid_582645 = query.getOrDefault("oauth_token")
  valid_582645 = validateParameter(valid_582645, JString, required = false,
                                 default = nil)
  if valid_582645 != nil:
    section.add "oauth_token", valid_582645
  var valid_582646 = query.getOrDefault("userIp")
  valid_582646 = validateParameter(valid_582646, JString, required = false,
                                 default = nil)
  if valid_582646 != nil:
    section.add "userIp", valid_582646
  var valid_582647 = query.getOrDefault("maxResults")
  valid_582647 = validateParameter(valid_582647, JInt, required = false,
                                 default = newJInt(1000))
  if valid_582647 != nil:
    section.add "maxResults", valid_582647
  var valid_582648 = query.getOrDefault("ids")
  valid_582648 = validateParameter(valid_582648, JArray, required = false,
                                 default = nil)
  if valid_582648 != nil:
    section.add "ids", valid_582648
  var valid_582649 = query.getOrDefault("key")
  valid_582649 = validateParameter(valid_582649, JString, required = false,
                                 default = nil)
  if valid_582649 != nil:
    section.add "key", valid_582649
  var valid_582650 = query.getOrDefault("advertiserIds")
  valid_582650 = validateParameter(valid_582650, JArray, required = false,
                                 default = nil)
  if valid_582650 != nil:
    section.add "advertiserIds", valid_582650
  var valid_582651 = query.getOrDefault("sortOrder")
  valid_582651 = validateParameter(valid_582651, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_582651 != nil:
    section.add "sortOrder", valid_582651
  var valid_582652 = query.getOrDefault("prettyPrint")
  valid_582652 = validateParameter(valid_582652, JBool, required = false,
                                 default = newJBool(true))
  if valid_582652 != nil:
    section.add "prettyPrint", valid_582652
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582653: Call_DfareportingProjectsList_582635; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of projects, possibly filtered. This method supports paging.
  ## 
  let valid = call_582653.validator(path, query, header, formData, body)
  let scheme = call_582653.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582653.url(scheme.get, call_582653.host, call_582653.base,
                         call_582653.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582653, url, valid)

proc call*(call_582654: Call_DfareportingProjectsList_582635; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "ID"; alt: string = "json"; searchString: string = "";
          oauthToken: string = ""; userIp: string = ""; maxResults: int = 1000;
          ids: JsonNode = nil; key: string = ""; advertiserIds: JsonNode = nil;
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingProjectsList
  ## Retrieves a list of projects, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for projects by name or ID. Wildcards (*) are allowed. For example, "project*2015" will return projects with names like "project June 2015", "project April 2015", or simply "project 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "project" will match projects with name "my project", "project 2015", or simply "project".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only projects with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only projects with these advertiser IDs.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582655 = newJObject()
  var query_582656 = newJObject()
  add(path_582655, "profileId", newJString(profileId))
  add(query_582656, "fields", newJString(fields))
  add(query_582656, "pageToken", newJString(pageToken))
  add(query_582656, "quotaUser", newJString(quotaUser))
  add(query_582656, "sortField", newJString(sortField))
  add(query_582656, "alt", newJString(alt))
  add(query_582656, "searchString", newJString(searchString))
  add(query_582656, "oauth_token", newJString(oauthToken))
  add(query_582656, "userIp", newJString(userIp))
  add(query_582656, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_582656.add "ids", ids
  add(query_582656, "key", newJString(key))
  if advertiserIds != nil:
    query_582656.add "advertiserIds", advertiserIds
  add(query_582656, "sortOrder", newJString(sortOrder))
  add(query_582656, "prettyPrint", newJBool(prettyPrint))
  result = call_582654.call(path_582655, query_582656, nil, nil, nil)

var dfareportingProjectsList* = Call_DfareportingProjectsList_582635(
    name: "dfareportingProjectsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/projects",
    validator: validate_DfareportingProjectsList_582636,
    base: "/dfareporting/v3.2", url: url_DfareportingProjectsList_582637,
    schemes: {Scheme.Https})
type
  Call_DfareportingProjectsGet_582657 = ref object of OpenApiRestCall_579437
proc url_DfareportingProjectsGet_582659(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingProjectsGet_582658(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one project by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Project ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582660 = path.getOrDefault("profileId")
  valid_582660 = validateParameter(valid_582660, JString, required = true,
                                 default = nil)
  if valid_582660 != nil:
    section.add "profileId", valid_582660
  var valid_582661 = path.getOrDefault("id")
  valid_582661 = validateParameter(valid_582661, JString, required = true,
                                 default = nil)
  if valid_582661 != nil:
    section.add "id", valid_582661
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582662 = query.getOrDefault("fields")
  valid_582662 = validateParameter(valid_582662, JString, required = false,
                                 default = nil)
  if valid_582662 != nil:
    section.add "fields", valid_582662
  var valid_582663 = query.getOrDefault("quotaUser")
  valid_582663 = validateParameter(valid_582663, JString, required = false,
                                 default = nil)
  if valid_582663 != nil:
    section.add "quotaUser", valid_582663
  var valid_582664 = query.getOrDefault("alt")
  valid_582664 = validateParameter(valid_582664, JString, required = false,
                                 default = newJString("json"))
  if valid_582664 != nil:
    section.add "alt", valid_582664
  var valid_582665 = query.getOrDefault("oauth_token")
  valid_582665 = validateParameter(valid_582665, JString, required = false,
                                 default = nil)
  if valid_582665 != nil:
    section.add "oauth_token", valid_582665
  var valid_582666 = query.getOrDefault("userIp")
  valid_582666 = validateParameter(valid_582666, JString, required = false,
                                 default = nil)
  if valid_582666 != nil:
    section.add "userIp", valid_582666
  var valid_582667 = query.getOrDefault("key")
  valid_582667 = validateParameter(valid_582667, JString, required = false,
                                 default = nil)
  if valid_582667 != nil:
    section.add "key", valid_582667
  var valid_582668 = query.getOrDefault("prettyPrint")
  valid_582668 = validateParameter(valid_582668, JBool, required = false,
                                 default = newJBool(true))
  if valid_582668 != nil:
    section.add "prettyPrint", valid_582668
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582669: Call_DfareportingProjectsGet_582657; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one project by ID.
  ## 
  let valid = call_582669.validator(path, query, header, formData, body)
  let scheme = call_582669.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582669.url(scheme.get, call_582669.host, call_582669.base,
                         call_582669.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582669, url, valid)

proc call*(call_582670: Call_DfareportingProjectsGet_582657; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingProjectsGet
  ## Gets one project by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Project ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582671 = newJObject()
  var query_582672 = newJObject()
  add(path_582671, "profileId", newJString(profileId))
  add(query_582672, "fields", newJString(fields))
  add(query_582672, "quotaUser", newJString(quotaUser))
  add(query_582672, "alt", newJString(alt))
  add(query_582672, "oauth_token", newJString(oauthToken))
  add(query_582672, "userIp", newJString(userIp))
  add(path_582671, "id", newJString(id))
  add(query_582672, "key", newJString(key))
  add(query_582672, "prettyPrint", newJBool(prettyPrint))
  result = call_582670.call(path_582671, query_582672, nil, nil, nil)

var dfareportingProjectsGet* = Call_DfareportingProjectsGet_582657(
    name: "dfareportingProjectsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/projects/{id}",
    validator: validate_DfareportingProjectsGet_582658,
    base: "/dfareporting/v3.2", url: url_DfareportingProjectsGet_582659,
    schemes: {Scheme.Https})
type
  Call_DfareportingInventoryItemsList_582673 = ref object of OpenApiRestCall_579437
proc url_DfareportingInventoryItemsList_582675(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/inventoryItems")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingInventoryItemsList_582674(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of inventory items, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   projectId: JString (required)
  ##            : Project ID for order documents.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582676 = path.getOrDefault("profileId")
  valid_582676 = validateParameter(valid_582676, JString, required = true,
                                 default = nil)
  if valid_582676 != nil:
    section.add "profileId", valid_582676
  var valid_582677 = path.getOrDefault("projectId")
  valid_582677 = validateParameter(valid_582677, JString, required = true,
                                 default = nil)
  if valid_582677 != nil:
    section.add "projectId", valid_582677
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   inPlan: JBool
  ##         : Select only inventory items that are in plan.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   orderId: JArray
  ##          : Select only inventory items that belong to specified orders.
  ##   type: JString
  ##       : Select only inventory items with this type.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   siteId: JArray
  ##         : Select only inventory items that are associated with these sites.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only inventory items with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582678 = query.getOrDefault("fields")
  valid_582678 = validateParameter(valid_582678, JString, required = false,
                                 default = nil)
  if valid_582678 != nil:
    section.add "fields", valid_582678
  var valid_582679 = query.getOrDefault("inPlan")
  valid_582679 = validateParameter(valid_582679, JBool, required = false, default = nil)
  if valid_582679 != nil:
    section.add "inPlan", valid_582679
  var valid_582680 = query.getOrDefault("quotaUser")
  valid_582680 = validateParameter(valid_582680, JString, required = false,
                                 default = nil)
  if valid_582680 != nil:
    section.add "quotaUser", valid_582680
  var valid_582681 = query.getOrDefault("pageToken")
  valid_582681 = validateParameter(valid_582681, JString, required = false,
                                 default = nil)
  if valid_582681 != nil:
    section.add "pageToken", valid_582681
  var valid_582682 = query.getOrDefault("sortField")
  valid_582682 = validateParameter(valid_582682, JString, required = false,
                                 default = newJString("ID"))
  if valid_582682 != nil:
    section.add "sortField", valid_582682
  var valid_582683 = query.getOrDefault("alt")
  valid_582683 = validateParameter(valid_582683, JString, required = false,
                                 default = newJString("json"))
  if valid_582683 != nil:
    section.add "alt", valid_582683
  var valid_582684 = query.getOrDefault("orderId")
  valid_582684 = validateParameter(valid_582684, JArray, required = false,
                                 default = nil)
  if valid_582684 != nil:
    section.add "orderId", valid_582684
  var valid_582685 = query.getOrDefault("type")
  valid_582685 = validateParameter(valid_582685, JString, required = false, default = newJString(
      "PLANNING_PLACEMENT_TYPE_CREDIT"))
  if valid_582685 != nil:
    section.add "type", valid_582685
  var valid_582686 = query.getOrDefault("oauth_token")
  valid_582686 = validateParameter(valid_582686, JString, required = false,
                                 default = nil)
  if valid_582686 != nil:
    section.add "oauth_token", valid_582686
  var valid_582687 = query.getOrDefault("userIp")
  valid_582687 = validateParameter(valid_582687, JString, required = false,
                                 default = nil)
  if valid_582687 != nil:
    section.add "userIp", valid_582687
  var valid_582688 = query.getOrDefault("siteId")
  valid_582688 = validateParameter(valid_582688, JArray, required = false,
                                 default = nil)
  if valid_582688 != nil:
    section.add "siteId", valid_582688
  var valid_582689 = query.getOrDefault("maxResults")
  valid_582689 = validateParameter(valid_582689, JInt, required = false,
                                 default = newJInt(1000))
  if valid_582689 != nil:
    section.add "maxResults", valid_582689
  var valid_582690 = query.getOrDefault("ids")
  valid_582690 = validateParameter(valid_582690, JArray, required = false,
                                 default = nil)
  if valid_582690 != nil:
    section.add "ids", valid_582690
  var valid_582691 = query.getOrDefault("key")
  valid_582691 = validateParameter(valid_582691, JString, required = false,
                                 default = nil)
  if valid_582691 != nil:
    section.add "key", valid_582691
  var valid_582692 = query.getOrDefault("sortOrder")
  valid_582692 = validateParameter(valid_582692, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_582692 != nil:
    section.add "sortOrder", valid_582692
  var valid_582693 = query.getOrDefault("prettyPrint")
  valid_582693 = validateParameter(valid_582693, JBool, required = false,
                                 default = newJBool(true))
  if valid_582693 != nil:
    section.add "prettyPrint", valid_582693
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582694: Call_DfareportingInventoryItemsList_582673; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of inventory items, possibly filtered. This method supports paging.
  ## 
  let valid = call_582694.validator(path, query, header, formData, body)
  let scheme = call_582694.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582694.url(scheme.get, call_582694.host, call_582694.base,
                         call_582694.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582694, url, valid)

proc call*(call_582695: Call_DfareportingInventoryItemsList_582673;
          profileId: string; projectId: string; fields: string = "";
          inPlan: bool = false; quotaUser: string = ""; pageToken: string = "";
          sortField: string = "ID"; alt: string = "json"; orderId: JsonNode = nil;
          `type`: string = "PLANNING_PLACEMENT_TYPE_CREDIT";
          oauthToken: string = ""; userIp: string = ""; siteId: JsonNode = nil;
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingInventoryItemsList
  ## Retrieves a list of inventory items, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   inPlan: bool
  ##         : Select only inventory items that are in plan.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   orderId: JArray
  ##          : Select only inventory items that belong to specified orders.
  ##   type: string
  ##       : Select only inventory items with this type.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   siteId: JArray
  ##         : Select only inventory items that are associated with these sites.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only inventory items with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   projectId: string (required)
  ##            : Project ID for order documents.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582696 = newJObject()
  var query_582697 = newJObject()
  add(path_582696, "profileId", newJString(profileId))
  add(query_582697, "fields", newJString(fields))
  add(query_582697, "inPlan", newJBool(inPlan))
  add(query_582697, "quotaUser", newJString(quotaUser))
  add(query_582697, "pageToken", newJString(pageToken))
  add(query_582697, "sortField", newJString(sortField))
  add(query_582697, "alt", newJString(alt))
  if orderId != nil:
    query_582697.add "orderId", orderId
  add(query_582697, "type", newJString(`type`))
  add(query_582697, "oauth_token", newJString(oauthToken))
  add(query_582697, "userIp", newJString(userIp))
  if siteId != nil:
    query_582697.add "siteId", siteId
  add(query_582697, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_582697.add "ids", ids
  add(query_582697, "key", newJString(key))
  add(path_582696, "projectId", newJString(projectId))
  add(query_582697, "sortOrder", newJString(sortOrder))
  add(query_582697, "prettyPrint", newJBool(prettyPrint))
  result = call_582695.call(path_582696, query_582697, nil, nil, nil)

var dfareportingInventoryItemsList* = Call_DfareportingInventoryItemsList_582673(
    name: "dfareportingInventoryItemsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/projects/{projectId}/inventoryItems",
    validator: validate_DfareportingInventoryItemsList_582674,
    base: "/dfareporting/v3.2", url: url_DfareportingInventoryItemsList_582675,
    schemes: {Scheme.Https})
type
  Call_DfareportingInventoryItemsGet_582698 = ref object of OpenApiRestCall_579437
proc url_DfareportingInventoryItemsGet_582700(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/inventoryItems/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingInventoryItemsGet_582699(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one inventory item by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Inventory item ID.
  ##   projectId: JString (required)
  ##            : Project ID for order documents.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582701 = path.getOrDefault("profileId")
  valid_582701 = validateParameter(valid_582701, JString, required = true,
                                 default = nil)
  if valid_582701 != nil:
    section.add "profileId", valid_582701
  var valid_582702 = path.getOrDefault("id")
  valid_582702 = validateParameter(valid_582702, JString, required = true,
                                 default = nil)
  if valid_582702 != nil:
    section.add "id", valid_582702
  var valid_582703 = path.getOrDefault("projectId")
  valid_582703 = validateParameter(valid_582703, JString, required = true,
                                 default = nil)
  if valid_582703 != nil:
    section.add "projectId", valid_582703
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582704 = query.getOrDefault("fields")
  valid_582704 = validateParameter(valid_582704, JString, required = false,
                                 default = nil)
  if valid_582704 != nil:
    section.add "fields", valid_582704
  var valid_582705 = query.getOrDefault("quotaUser")
  valid_582705 = validateParameter(valid_582705, JString, required = false,
                                 default = nil)
  if valid_582705 != nil:
    section.add "quotaUser", valid_582705
  var valid_582706 = query.getOrDefault("alt")
  valid_582706 = validateParameter(valid_582706, JString, required = false,
                                 default = newJString("json"))
  if valid_582706 != nil:
    section.add "alt", valid_582706
  var valid_582707 = query.getOrDefault("oauth_token")
  valid_582707 = validateParameter(valid_582707, JString, required = false,
                                 default = nil)
  if valid_582707 != nil:
    section.add "oauth_token", valid_582707
  var valid_582708 = query.getOrDefault("userIp")
  valid_582708 = validateParameter(valid_582708, JString, required = false,
                                 default = nil)
  if valid_582708 != nil:
    section.add "userIp", valid_582708
  var valid_582709 = query.getOrDefault("key")
  valid_582709 = validateParameter(valid_582709, JString, required = false,
                                 default = nil)
  if valid_582709 != nil:
    section.add "key", valid_582709
  var valid_582710 = query.getOrDefault("prettyPrint")
  valid_582710 = validateParameter(valid_582710, JBool, required = false,
                                 default = newJBool(true))
  if valid_582710 != nil:
    section.add "prettyPrint", valid_582710
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582711: Call_DfareportingInventoryItemsGet_582698; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one inventory item by ID.
  ## 
  let valid = call_582711.validator(path, query, header, formData, body)
  let scheme = call_582711.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582711.url(scheme.get, call_582711.host, call_582711.base,
                         call_582711.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582711, url, valid)

proc call*(call_582712: Call_DfareportingInventoryItemsGet_582698;
          profileId: string; id: string; projectId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingInventoryItemsGet
  ## Gets one inventory item by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Inventory item ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   projectId: string (required)
  ##            : Project ID for order documents.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582713 = newJObject()
  var query_582714 = newJObject()
  add(path_582713, "profileId", newJString(profileId))
  add(query_582714, "fields", newJString(fields))
  add(query_582714, "quotaUser", newJString(quotaUser))
  add(query_582714, "alt", newJString(alt))
  add(query_582714, "oauth_token", newJString(oauthToken))
  add(query_582714, "userIp", newJString(userIp))
  add(path_582713, "id", newJString(id))
  add(query_582714, "key", newJString(key))
  add(path_582713, "projectId", newJString(projectId))
  add(query_582714, "prettyPrint", newJBool(prettyPrint))
  result = call_582712.call(path_582713, query_582714, nil, nil, nil)

var dfareportingInventoryItemsGet* = Call_DfareportingInventoryItemsGet_582698(
    name: "dfareportingInventoryItemsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/projects/{projectId}/inventoryItems/{id}",
    validator: validate_DfareportingInventoryItemsGet_582699,
    base: "/dfareporting/v3.2", url: url_DfareportingInventoryItemsGet_582700,
    schemes: {Scheme.Https})
type
  Call_DfareportingOrderDocumentsList_582715 = ref object of OpenApiRestCall_579437
proc url_DfareportingOrderDocumentsList_582717(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/orderDocuments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOrderDocumentsList_582716(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of order documents, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   projectId: JString (required)
  ##            : Project ID for order documents.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582718 = path.getOrDefault("profileId")
  valid_582718 = validateParameter(valid_582718, JString, required = true,
                                 default = nil)
  if valid_582718 != nil:
    section.add "profileId", valid_582718
  var valid_582719 = path.getOrDefault("projectId")
  valid_582719 = validateParameter(valid_582719, JString, required = true,
                                 default = nil)
  if valid_582719 != nil:
    section.add "projectId", valid_582719
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for order documents by name or ID. Wildcards (*) are allowed. For example, "orderdocument*2015" will return order documents with names like "orderdocument June 2015", "orderdocument April 2015", or simply "orderdocument 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "orderdocument" will match order documents with name "my orderdocument", "orderdocument 2015", or simply "orderdocument".
  ##   orderId: JArray
  ##          : Select only order documents for specified orders.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   siteId: JArray
  ##         : Select only order documents that are associated with these sites.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only order documents with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   approved: JBool
  ##           : Select only order documents that have been approved by at least one user.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582720 = query.getOrDefault("fields")
  valid_582720 = validateParameter(valid_582720, JString, required = false,
                                 default = nil)
  if valid_582720 != nil:
    section.add "fields", valid_582720
  var valid_582721 = query.getOrDefault("pageToken")
  valid_582721 = validateParameter(valid_582721, JString, required = false,
                                 default = nil)
  if valid_582721 != nil:
    section.add "pageToken", valid_582721
  var valid_582722 = query.getOrDefault("quotaUser")
  valid_582722 = validateParameter(valid_582722, JString, required = false,
                                 default = nil)
  if valid_582722 != nil:
    section.add "quotaUser", valid_582722
  var valid_582723 = query.getOrDefault("sortField")
  valid_582723 = validateParameter(valid_582723, JString, required = false,
                                 default = newJString("ID"))
  if valid_582723 != nil:
    section.add "sortField", valid_582723
  var valid_582724 = query.getOrDefault("alt")
  valid_582724 = validateParameter(valid_582724, JString, required = false,
                                 default = newJString("json"))
  if valid_582724 != nil:
    section.add "alt", valid_582724
  var valid_582725 = query.getOrDefault("searchString")
  valid_582725 = validateParameter(valid_582725, JString, required = false,
                                 default = nil)
  if valid_582725 != nil:
    section.add "searchString", valid_582725
  var valid_582726 = query.getOrDefault("orderId")
  valid_582726 = validateParameter(valid_582726, JArray, required = false,
                                 default = nil)
  if valid_582726 != nil:
    section.add "orderId", valid_582726
  var valid_582727 = query.getOrDefault("oauth_token")
  valid_582727 = validateParameter(valid_582727, JString, required = false,
                                 default = nil)
  if valid_582727 != nil:
    section.add "oauth_token", valid_582727
  var valid_582728 = query.getOrDefault("userIp")
  valid_582728 = validateParameter(valid_582728, JString, required = false,
                                 default = nil)
  if valid_582728 != nil:
    section.add "userIp", valid_582728
  var valid_582729 = query.getOrDefault("siteId")
  valid_582729 = validateParameter(valid_582729, JArray, required = false,
                                 default = nil)
  if valid_582729 != nil:
    section.add "siteId", valid_582729
  var valid_582730 = query.getOrDefault("maxResults")
  valid_582730 = validateParameter(valid_582730, JInt, required = false,
                                 default = newJInt(1000))
  if valid_582730 != nil:
    section.add "maxResults", valid_582730
  var valid_582731 = query.getOrDefault("ids")
  valid_582731 = validateParameter(valid_582731, JArray, required = false,
                                 default = nil)
  if valid_582731 != nil:
    section.add "ids", valid_582731
  var valid_582732 = query.getOrDefault("key")
  valid_582732 = validateParameter(valid_582732, JString, required = false,
                                 default = nil)
  if valid_582732 != nil:
    section.add "key", valid_582732
  var valid_582733 = query.getOrDefault("sortOrder")
  valid_582733 = validateParameter(valid_582733, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_582733 != nil:
    section.add "sortOrder", valid_582733
  var valid_582734 = query.getOrDefault("approved")
  valid_582734 = validateParameter(valid_582734, JBool, required = false, default = nil)
  if valid_582734 != nil:
    section.add "approved", valid_582734
  var valid_582735 = query.getOrDefault("prettyPrint")
  valid_582735 = validateParameter(valid_582735, JBool, required = false,
                                 default = newJBool(true))
  if valid_582735 != nil:
    section.add "prettyPrint", valid_582735
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582736: Call_DfareportingOrderDocumentsList_582715; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of order documents, possibly filtered. This method supports paging.
  ## 
  let valid = call_582736.validator(path, query, header, formData, body)
  let scheme = call_582736.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582736.url(scheme.get, call_582736.host, call_582736.base,
                         call_582736.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582736, url, valid)

proc call*(call_582737: Call_DfareportingOrderDocumentsList_582715;
          profileId: string; projectId: string; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; sortField: string = "ID";
          alt: string = "json"; searchString: string = ""; orderId: JsonNode = nil;
          oauthToken: string = ""; userIp: string = ""; siteId: JsonNode = nil;
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; approved: bool = false;
          prettyPrint: bool = true): Recallable =
  ## dfareportingOrderDocumentsList
  ## Retrieves a list of order documents, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for order documents by name or ID. Wildcards (*) are allowed. For example, "orderdocument*2015" will return order documents with names like "orderdocument June 2015", "orderdocument April 2015", or simply "orderdocument 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "orderdocument" will match order documents with name "my orderdocument", "orderdocument 2015", or simply "orderdocument".
  ##   orderId: JArray
  ##          : Select only order documents for specified orders.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   siteId: JArray
  ##         : Select only order documents that are associated with these sites.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only order documents with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   projectId: string (required)
  ##            : Project ID for order documents.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   approved: bool
  ##           : Select only order documents that have been approved by at least one user.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582738 = newJObject()
  var query_582739 = newJObject()
  add(path_582738, "profileId", newJString(profileId))
  add(query_582739, "fields", newJString(fields))
  add(query_582739, "pageToken", newJString(pageToken))
  add(query_582739, "quotaUser", newJString(quotaUser))
  add(query_582739, "sortField", newJString(sortField))
  add(query_582739, "alt", newJString(alt))
  add(query_582739, "searchString", newJString(searchString))
  if orderId != nil:
    query_582739.add "orderId", orderId
  add(query_582739, "oauth_token", newJString(oauthToken))
  add(query_582739, "userIp", newJString(userIp))
  if siteId != nil:
    query_582739.add "siteId", siteId
  add(query_582739, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_582739.add "ids", ids
  add(query_582739, "key", newJString(key))
  add(path_582738, "projectId", newJString(projectId))
  add(query_582739, "sortOrder", newJString(sortOrder))
  add(query_582739, "approved", newJBool(approved))
  add(query_582739, "prettyPrint", newJBool(prettyPrint))
  result = call_582737.call(path_582738, query_582739, nil, nil, nil)

var dfareportingOrderDocumentsList* = Call_DfareportingOrderDocumentsList_582715(
    name: "dfareportingOrderDocumentsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/projects/{projectId}/orderDocuments",
    validator: validate_DfareportingOrderDocumentsList_582716,
    base: "/dfareporting/v3.2", url: url_DfareportingOrderDocumentsList_582717,
    schemes: {Scheme.Https})
type
  Call_DfareportingOrderDocumentsGet_582740 = ref object of OpenApiRestCall_579437
proc url_DfareportingOrderDocumentsGet_582742(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/orderDocuments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOrderDocumentsGet_582741(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one order document by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Order document ID.
  ##   projectId: JString (required)
  ##            : Project ID for order documents.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582743 = path.getOrDefault("profileId")
  valid_582743 = validateParameter(valid_582743, JString, required = true,
                                 default = nil)
  if valid_582743 != nil:
    section.add "profileId", valid_582743
  var valid_582744 = path.getOrDefault("id")
  valid_582744 = validateParameter(valid_582744, JString, required = true,
                                 default = nil)
  if valid_582744 != nil:
    section.add "id", valid_582744
  var valid_582745 = path.getOrDefault("projectId")
  valid_582745 = validateParameter(valid_582745, JString, required = true,
                                 default = nil)
  if valid_582745 != nil:
    section.add "projectId", valid_582745
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582746 = query.getOrDefault("fields")
  valid_582746 = validateParameter(valid_582746, JString, required = false,
                                 default = nil)
  if valid_582746 != nil:
    section.add "fields", valid_582746
  var valid_582747 = query.getOrDefault("quotaUser")
  valid_582747 = validateParameter(valid_582747, JString, required = false,
                                 default = nil)
  if valid_582747 != nil:
    section.add "quotaUser", valid_582747
  var valid_582748 = query.getOrDefault("alt")
  valid_582748 = validateParameter(valid_582748, JString, required = false,
                                 default = newJString("json"))
  if valid_582748 != nil:
    section.add "alt", valid_582748
  var valid_582749 = query.getOrDefault("oauth_token")
  valid_582749 = validateParameter(valid_582749, JString, required = false,
                                 default = nil)
  if valid_582749 != nil:
    section.add "oauth_token", valid_582749
  var valid_582750 = query.getOrDefault("userIp")
  valid_582750 = validateParameter(valid_582750, JString, required = false,
                                 default = nil)
  if valid_582750 != nil:
    section.add "userIp", valid_582750
  var valid_582751 = query.getOrDefault("key")
  valid_582751 = validateParameter(valid_582751, JString, required = false,
                                 default = nil)
  if valid_582751 != nil:
    section.add "key", valid_582751
  var valid_582752 = query.getOrDefault("prettyPrint")
  valid_582752 = validateParameter(valid_582752, JBool, required = false,
                                 default = newJBool(true))
  if valid_582752 != nil:
    section.add "prettyPrint", valid_582752
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582753: Call_DfareportingOrderDocumentsGet_582740; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one order document by ID.
  ## 
  let valid = call_582753.validator(path, query, header, formData, body)
  let scheme = call_582753.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582753.url(scheme.get, call_582753.host, call_582753.base,
                         call_582753.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582753, url, valid)

proc call*(call_582754: Call_DfareportingOrderDocumentsGet_582740;
          profileId: string; id: string; projectId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingOrderDocumentsGet
  ## Gets one order document by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Order document ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   projectId: string (required)
  ##            : Project ID for order documents.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582755 = newJObject()
  var query_582756 = newJObject()
  add(path_582755, "profileId", newJString(profileId))
  add(query_582756, "fields", newJString(fields))
  add(query_582756, "quotaUser", newJString(quotaUser))
  add(query_582756, "alt", newJString(alt))
  add(query_582756, "oauth_token", newJString(oauthToken))
  add(query_582756, "userIp", newJString(userIp))
  add(path_582755, "id", newJString(id))
  add(query_582756, "key", newJString(key))
  add(path_582755, "projectId", newJString(projectId))
  add(query_582756, "prettyPrint", newJBool(prettyPrint))
  result = call_582754.call(path_582755, query_582756, nil, nil, nil)

var dfareportingOrderDocumentsGet* = Call_DfareportingOrderDocumentsGet_582740(
    name: "dfareportingOrderDocumentsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/projects/{projectId}/orderDocuments/{id}",
    validator: validate_DfareportingOrderDocumentsGet_582741,
    base: "/dfareporting/v3.2", url: url_DfareportingOrderDocumentsGet_582742,
    schemes: {Scheme.Https})
type
  Call_DfareportingOrdersList_582757 = ref object of OpenApiRestCall_579437
proc url_DfareportingOrdersList_582759(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/orders")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOrdersList_582758(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of orders, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   projectId: JString (required)
  ##            : Project ID for orders.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582760 = path.getOrDefault("profileId")
  valid_582760 = validateParameter(valid_582760, JString, required = true,
                                 default = nil)
  if valid_582760 != nil:
    section.add "profileId", valid_582760
  var valid_582761 = path.getOrDefault("projectId")
  valid_582761 = validateParameter(valid_582761, JString, required = true,
                                 default = nil)
  if valid_582761 != nil:
    section.add "projectId", valid_582761
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for orders by name or ID. Wildcards (*) are allowed. For example, "order*2015" will return orders with names like "order June 2015", "order April 2015", or simply "order 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "order" will match orders with name "my order", "order 2015", or simply "order".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   siteId: JArray
  ##         : Select only orders that are associated with these site IDs.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only orders with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582762 = query.getOrDefault("fields")
  valid_582762 = validateParameter(valid_582762, JString, required = false,
                                 default = nil)
  if valid_582762 != nil:
    section.add "fields", valid_582762
  var valid_582763 = query.getOrDefault("pageToken")
  valid_582763 = validateParameter(valid_582763, JString, required = false,
                                 default = nil)
  if valid_582763 != nil:
    section.add "pageToken", valid_582763
  var valid_582764 = query.getOrDefault("quotaUser")
  valid_582764 = validateParameter(valid_582764, JString, required = false,
                                 default = nil)
  if valid_582764 != nil:
    section.add "quotaUser", valid_582764
  var valid_582765 = query.getOrDefault("sortField")
  valid_582765 = validateParameter(valid_582765, JString, required = false,
                                 default = newJString("ID"))
  if valid_582765 != nil:
    section.add "sortField", valid_582765
  var valid_582766 = query.getOrDefault("alt")
  valid_582766 = validateParameter(valid_582766, JString, required = false,
                                 default = newJString("json"))
  if valid_582766 != nil:
    section.add "alt", valid_582766
  var valid_582767 = query.getOrDefault("searchString")
  valid_582767 = validateParameter(valid_582767, JString, required = false,
                                 default = nil)
  if valid_582767 != nil:
    section.add "searchString", valid_582767
  var valid_582768 = query.getOrDefault("oauth_token")
  valid_582768 = validateParameter(valid_582768, JString, required = false,
                                 default = nil)
  if valid_582768 != nil:
    section.add "oauth_token", valid_582768
  var valid_582769 = query.getOrDefault("userIp")
  valid_582769 = validateParameter(valid_582769, JString, required = false,
                                 default = nil)
  if valid_582769 != nil:
    section.add "userIp", valid_582769
  var valid_582770 = query.getOrDefault("siteId")
  valid_582770 = validateParameter(valid_582770, JArray, required = false,
                                 default = nil)
  if valid_582770 != nil:
    section.add "siteId", valid_582770
  var valid_582771 = query.getOrDefault("maxResults")
  valid_582771 = validateParameter(valid_582771, JInt, required = false,
                                 default = newJInt(1000))
  if valid_582771 != nil:
    section.add "maxResults", valid_582771
  var valid_582772 = query.getOrDefault("ids")
  valid_582772 = validateParameter(valid_582772, JArray, required = false,
                                 default = nil)
  if valid_582772 != nil:
    section.add "ids", valid_582772
  var valid_582773 = query.getOrDefault("key")
  valid_582773 = validateParameter(valid_582773, JString, required = false,
                                 default = nil)
  if valid_582773 != nil:
    section.add "key", valid_582773
  var valid_582774 = query.getOrDefault("sortOrder")
  valid_582774 = validateParameter(valid_582774, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_582774 != nil:
    section.add "sortOrder", valid_582774
  var valid_582775 = query.getOrDefault("prettyPrint")
  valid_582775 = validateParameter(valid_582775, JBool, required = false,
                                 default = newJBool(true))
  if valid_582775 != nil:
    section.add "prettyPrint", valid_582775
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582776: Call_DfareportingOrdersList_582757; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of orders, possibly filtered. This method supports paging.
  ## 
  let valid = call_582776.validator(path, query, header, formData, body)
  let scheme = call_582776.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582776.url(scheme.get, call_582776.host, call_582776.base,
                         call_582776.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582776, url, valid)

proc call*(call_582777: Call_DfareportingOrdersList_582757; profileId: string;
          projectId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          siteId: JsonNode = nil; maxResults: int = 1000; ids: JsonNode = nil;
          key: string = ""; sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingOrdersList
  ## Retrieves a list of orders, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for orders by name or ID. Wildcards (*) are allowed. For example, "order*2015" will return orders with names like "order June 2015", "order April 2015", or simply "order 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "order" will match orders with name "my order", "order 2015", or simply "order".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   siteId: JArray
  ##         : Select only orders that are associated with these site IDs.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only orders with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   projectId: string (required)
  ##            : Project ID for orders.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582778 = newJObject()
  var query_582779 = newJObject()
  add(path_582778, "profileId", newJString(profileId))
  add(query_582779, "fields", newJString(fields))
  add(query_582779, "pageToken", newJString(pageToken))
  add(query_582779, "quotaUser", newJString(quotaUser))
  add(query_582779, "sortField", newJString(sortField))
  add(query_582779, "alt", newJString(alt))
  add(query_582779, "searchString", newJString(searchString))
  add(query_582779, "oauth_token", newJString(oauthToken))
  add(query_582779, "userIp", newJString(userIp))
  if siteId != nil:
    query_582779.add "siteId", siteId
  add(query_582779, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_582779.add "ids", ids
  add(query_582779, "key", newJString(key))
  add(path_582778, "projectId", newJString(projectId))
  add(query_582779, "sortOrder", newJString(sortOrder))
  add(query_582779, "prettyPrint", newJBool(prettyPrint))
  result = call_582777.call(path_582778, query_582779, nil, nil, nil)

var dfareportingOrdersList* = Call_DfareportingOrdersList_582757(
    name: "dfareportingOrdersList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/projects/{projectId}/orders",
    validator: validate_DfareportingOrdersList_582758, base: "/dfareporting/v3.2",
    url: url_DfareportingOrdersList_582759, schemes: {Scheme.Https})
type
  Call_DfareportingOrdersGet_582780 = ref object of OpenApiRestCall_579437
proc url_DfareportingOrdersGet_582782(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/orders/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOrdersGet_582781(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one order by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Order ID.
  ##   projectId: JString (required)
  ##            : Project ID for orders.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582783 = path.getOrDefault("profileId")
  valid_582783 = validateParameter(valid_582783, JString, required = true,
                                 default = nil)
  if valid_582783 != nil:
    section.add "profileId", valid_582783
  var valid_582784 = path.getOrDefault("id")
  valid_582784 = validateParameter(valid_582784, JString, required = true,
                                 default = nil)
  if valid_582784 != nil:
    section.add "id", valid_582784
  var valid_582785 = path.getOrDefault("projectId")
  valid_582785 = validateParameter(valid_582785, JString, required = true,
                                 default = nil)
  if valid_582785 != nil:
    section.add "projectId", valid_582785
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582786 = query.getOrDefault("fields")
  valid_582786 = validateParameter(valid_582786, JString, required = false,
                                 default = nil)
  if valid_582786 != nil:
    section.add "fields", valid_582786
  var valid_582787 = query.getOrDefault("quotaUser")
  valid_582787 = validateParameter(valid_582787, JString, required = false,
                                 default = nil)
  if valid_582787 != nil:
    section.add "quotaUser", valid_582787
  var valid_582788 = query.getOrDefault("alt")
  valid_582788 = validateParameter(valid_582788, JString, required = false,
                                 default = newJString("json"))
  if valid_582788 != nil:
    section.add "alt", valid_582788
  var valid_582789 = query.getOrDefault("oauth_token")
  valid_582789 = validateParameter(valid_582789, JString, required = false,
                                 default = nil)
  if valid_582789 != nil:
    section.add "oauth_token", valid_582789
  var valid_582790 = query.getOrDefault("userIp")
  valid_582790 = validateParameter(valid_582790, JString, required = false,
                                 default = nil)
  if valid_582790 != nil:
    section.add "userIp", valid_582790
  var valid_582791 = query.getOrDefault("key")
  valid_582791 = validateParameter(valid_582791, JString, required = false,
                                 default = nil)
  if valid_582791 != nil:
    section.add "key", valid_582791
  var valid_582792 = query.getOrDefault("prettyPrint")
  valid_582792 = validateParameter(valid_582792, JBool, required = false,
                                 default = newJBool(true))
  if valid_582792 != nil:
    section.add "prettyPrint", valid_582792
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582793: Call_DfareportingOrdersGet_582780; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one order by ID.
  ## 
  let valid = call_582793.validator(path, query, header, formData, body)
  let scheme = call_582793.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582793.url(scheme.get, call_582793.host, call_582793.base,
                         call_582793.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582793, url, valid)

proc call*(call_582794: Call_DfareportingOrdersGet_582780; profileId: string;
          id: string; projectId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingOrdersGet
  ## Gets one order by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Order ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   projectId: string (required)
  ##            : Project ID for orders.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582795 = newJObject()
  var query_582796 = newJObject()
  add(path_582795, "profileId", newJString(profileId))
  add(query_582796, "fields", newJString(fields))
  add(query_582796, "quotaUser", newJString(quotaUser))
  add(query_582796, "alt", newJString(alt))
  add(query_582796, "oauth_token", newJString(oauthToken))
  add(query_582796, "userIp", newJString(userIp))
  add(path_582795, "id", newJString(id))
  add(query_582796, "key", newJString(key))
  add(path_582795, "projectId", newJString(projectId))
  add(query_582796, "prettyPrint", newJBool(prettyPrint))
  result = call_582794.call(path_582795, query_582796, nil, nil, nil)

var dfareportingOrdersGet* = Call_DfareportingOrdersGet_582780(
    name: "dfareportingOrdersGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/projects/{projectId}/orders/{id}",
    validator: validate_DfareportingOrdersGet_582781, base: "/dfareporting/v3.2",
    url: url_DfareportingOrdersGet_582782, schemes: {Scheme.Https})
type
  Call_DfareportingRegionsList_582797 = ref object of OpenApiRestCall_579437
proc url_DfareportingRegionsList_582799(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/regions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRegionsList_582798(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of regions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582800 = path.getOrDefault("profileId")
  valid_582800 = validateParameter(valid_582800, JString, required = true,
                                 default = nil)
  if valid_582800 != nil:
    section.add "profileId", valid_582800
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582801 = query.getOrDefault("fields")
  valid_582801 = validateParameter(valid_582801, JString, required = false,
                                 default = nil)
  if valid_582801 != nil:
    section.add "fields", valid_582801
  var valid_582802 = query.getOrDefault("quotaUser")
  valid_582802 = validateParameter(valid_582802, JString, required = false,
                                 default = nil)
  if valid_582802 != nil:
    section.add "quotaUser", valid_582802
  var valid_582803 = query.getOrDefault("alt")
  valid_582803 = validateParameter(valid_582803, JString, required = false,
                                 default = newJString("json"))
  if valid_582803 != nil:
    section.add "alt", valid_582803
  var valid_582804 = query.getOrDefault("oauth_token")
  valid_582804 = validateParameter(valid_582804, JString, required = false,
                                 default = nil)
  if valid_582804 != nil:
    section.add "oauth_token", valid_582804
  var valid_582805 = query.getOrDefault("userIp")
  valid_582805 = validateParameter(valid_582805, JString, required = false,
                                 default = nil)
  if valid_582805 != nil:
    section.add "userIp", valid_582805
  var valid_582806 = query.getOrDefault("key")
  valid_582806 = validateParameter(valid_582806, JString, required = false,
                                 default = nil)
  if valid_582806 != nil:
    section.add "key", valid_582806
  var valid_582807 = query.getOrDefault("prettyPrint")
  valid_582807 = validateParameter(valid_582807, JBool, required = false,
                                 default = newJBool(true))
  if valid_582807 != nil:
    section.add "prettyPrint", valid_582807
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582808: Call_DfareportingRegionsList_582797; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of regions.
  ## 
  let valid = call_582808.validator(path, query, header, formData, body)
  let scheme = call_582808.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582808.url(scheme.get, call_582808.host, call_582808.base,
                         call_582808.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582808, url, valid)

proc call*(call_582809: Call_DfareportingRegionsList_582797; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingRegionsList
  ## Retrieves a list of regions.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582810 = newJObject()
  var query_582811 = newJObject()
  add(path_582810, "profileId", newJString(profileId))
  add(query_582811, "fields", newJString(fields))
  add(query_582811, "quotaUser", newJString(quotaUser))
  add(query_582811, "alt", newJString(alt))
  add(query_582811, "oauth_token", newJString(oauthToken))
  add(query_582811, "userIp", newJString(userIp))
  add(query_582811, "key", newJString(key))
  add(query_582811, "prettyPrint", newJBool(prettyPrint))
  result = call_582809.call(path_582810, query_582811, nil, nil, nil)

var dfareportingRegionsList* = Call_DfareportingRegionsList_582797(
    name: "dfareportingRegionsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/regions",
    validator: validate_DfareportingRegionsList_582798,
    base: "/dfareporting/v3.2", url: url_DfareportingRegionsList_582799,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListSharesUpdate_582812 = ref object of OpenApiRestCall_579437
proc url_DfareportingRemarketingListSharesUpdate_582814(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingListShares")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListSharesUpdate_582813(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing remarketing list share.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582815 = path.getOrDefault("profileId")
  valid_582815 = validateParameter(valid_582815, JString, required = true,
                                 default = nil)
  if valid_582815 != nil:
    section.add "profileId", valid_582815
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582816 = query.getOrDefault("fields")
  valid_582816 = validateParameter(valid_582816, JString, required = false,
                                 default = nil)
  if valid_582816 != nil:
    section.add "fields", valid_582816
  var valid_582817 = query.getOrDefault("quotaUser")
  valid_582817 = validateParameter(valid_582817, JString, required = false,
                                 default = nil)
  if valid_582817 != nil:
    section.add "quotaUser", valid_582817
  var valid_582818 = query.getOrDefault("alt")
  valid_582818 = validateParameter(valid_582818, JString, required = false,
                                 default = newJString("json"))
  if valid_582818 != nil:
    section.add "alt", valid_582818
  var valid_582819 = query.getOrDefault("oauth_token")
  valid_582819 = validateParameter(valid_582819, JString, required = false,
                                 default = nil)
  if valid_582819 != nil:
    section.add "oauth_token", valid_582819
  var valid_582820 = query.getOrDefault("userIp")
  valid_582820 = validateParameter(valid_582820, JString, required = false,
                                 default = nil)
  if valid_582820 != nil:
    section.add "userIp", valid_582820
  var valid_582821 = query.getOrDefault("key")
  valid_582821 = validateParameter(valid_582821, JString, required = false,
                                 default = nil)
  if valid_582821 != nil:
    section.add "key", valid_582821
  var valid_582822 = query.getOrDefault("prettyPrint")
  valid_582822 = validateParameter(valid_582822, JBool, required = false,
                                 default = newJBool(true))
  if valid_582822 != nil:
    section.add "prettyPrint", valid_582822
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582824: Call_DfareportingRemarketingListSharesUpdate_582812;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing remarketing list share.
  ## 
  let valid = call_582824.validator(path, query, header, formData, body)
  let scheme = call_582824.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582824.url(scheme.get, call_582824.host, call_582824.base,
                         call_582824.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582824, url, valid)

proc call*(call_582825: Call_DfareportingRemarketingListSharesUpdate_582812;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListSharesUpdate
  ## Updates an existing remarketing list share.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582826 = newJObject()
  var query_582827 = newJObject()
  var body_582828 = newJObject()
  add(path_582826, "profileId", newJString(profileId))
  add(query_582827, "fields", newJString(fields))
  add(query_582827, "quotaUser", newJString(quotaUser))
  add(query_582827, "alt", newJString(alt))
  add(query_582827, "oauth_token", newJString(oauthToken))
  add(query_582827, "userIp", newJString(userIp))
  add(query_582827, "key", newJString(key))
  if body != nil:
    body_582828 = body
  add(query_582827, "prettyPrint", newJBool(prettyPrint))
  result = call_582825.call(path_582826, query_582827, nil, nil, body_582828)

var dfareportingRemarketingListSharesUpdate* = Call_DfareportingRemarketingListSharesUpdate_582812(
    name: "dfareportingRemarketingListSharesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingListShares",
    validator: validate_DfareportingRemarketingListSharesUpdate_582813,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListSharesUpdate_582814,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListSharesPatch_582829 = ref object of OpenApiRestCall_579437
proc url_DfareportingRemarketingListSharesPatch_582831(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingListShares")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListSharesPatch_582830(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing remarketing list share. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582832 = path.getOrDefault("profileId")
  valid_582832 = validateParameter(valid_582832, JString, required = true,
                                 default = nil)
  if valid_582832 != nil:
    section.add "profileId", valid_582832
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   remarketingListId: JString (required)
  ##                    : Remarketing list ID.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582833 = query.getOrDefault("fields")
  valid_582833 = validateParameter(valid_582833, JString, required = false,
                                 default = nil)
  if valid_582833 != nil:
    section.add "fields", valid_582833
  var valid_582834 = query.getOrDefault("quotaUser")
  valid_582834 = validateParameter(valid_582834, JString, required = false,
                                 default = nil)
  if valid_582834 != nil:
    section.add "quotaUser", valid_582834
  var valid_582835 = query.getOrDefault("alt")
  valid_582835 = validateParameter(valid_582835, JString, required = false,
                                 default = newJString("json"))
  if valid_582835 != nil:
    section.add "alt", valid_582835
  var valid_582836 = query.getOrDefault("oauth_token")
  valid_582836 = validateParameter(valid_582836, JString, required = false,
                                 default = nil)
  if valid_582836 != nil:
    section.add "oauth_token", valid_582836
  var valid_582837 = query.getOrDefault("userIp")
  valid_582837 = validateParameter(valid_582837, JString, required = false,
                                 default = nil)
  if valid_582837 != nil:
    section.add "userIp", valid_582837
  var valid_582838 = query.getOrDefault("key")
  valid_582838 = validateParameter(valid_582838, JString, required = false,
                                 default = nil)
  if valid_582838 != nil:
    section.add "key", valid_582838
  assert query != nil,
        "query argument is necessary due to required `remarketingListId` field"
  var valid_582839 = query.getOrDefault("remarketingListId")
  valid_582839 = validateParameter(valid_582839, JString, required = true,
                                 default = nil)
  if valid_582839 != nil:
    section.add "remarketingListId", valid_582839
  var valid_582840 = query.getOrDefault("prettyPrint")
  valid_582840 = validateParameter(valid_582840, JBool, required = false,
                                 default = newJBool(true))
  if valid_582840 != nil:
    section.add "prettyPrint", valid_582840
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582842: Call_DfareportingRemarketingListSharesPatch_582829;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing remarketing list share. This method supports patch semantics.
  ## 
  let valid = call_582842.validator(path, query, header, formData, body)
  let scheme = call_582842.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582842.url(scheme.get, call_582842.host, call_582842.base,
                         call_582842.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582842, url, valid)

proc call*(call_582843: Call_DfareportingRemarketingListSharesPatch_582829;
          profileId: string; remarketingListId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; body: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListSharesPatch
  ## Updates an existing remarketing list share. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   remarketingListId: string (required)
  ##                    : Remarketing list ID.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582844 = newJObject()
  var query_582845 = newJObject()
  var body_582846 = newJObject()
  add(path_582844, "profileId", newJString(profileId))
  add(query_582845, "fields", newJString(fields))
  add(query_582845, "quotaUser", newJString(quotaUser))
  add(query_582845, "alt", newJString(alt))
  add(query_582845, "oauth_token", newJString(oauthToken))
  add(query_582845, "userIp", newJString(userIp))
  add(query_582845, "key", newJString(key))
  add(query_582845, "remarketingListId", newJString(remarketingListId))
  if body != nil:
    body_582846 = body
  add(query_582845, "prettyPrint", newJBool(prettyPrint))
  result = call_582843.call(path_582844, query_582845, nil, nil, body_582846)

var dfareportingRemarketingListSharesPatch* = Call_DfareportingRemarketingListSharesPatch_582829(
    name: "dfareportingRemarketingListSharesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingListShares",
    validator: validate_DfareportingRemarketingListSharesPatch_582830,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListSharesPatch_582831,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListSharesGet_582847 = ref object of OpenApiRestCall_579437
proc url_DfareportingRemarketingListSharesGet_582849(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "remarketingListId" in path,
        "`remarketingListId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingListShares/"),
               (kind: VariableSegment, value: "remarketingListId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListSharesGet_582848(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one remarketing list share by remarketing list ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   remarketingListId: JString (required)
  ##                    : Remarketing list ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582850 = path.getOrDefault("profileId")
  valid_582850 = validateParameter(valid_582850, JString, required = true,
                                 default = nil)
  if valid_582850 != nil:
    section.add "profileId", valid_582850
  var valid_582851 = path.getOrDefault("remarketingListId")
  valid_582851 = validateParameter(valid_582851, JString, required = true,
                                 default = nil)
  if valid_582851 != nil:
    section.add "remarketingListId", valid_582851
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582852 = query.getOrDefault("fields")
  valid_582852 = validateParameter(valid_582852, JString, required = false,
                                 default = nil)
  if valid_582852 != nil:
    section.add "fields", valid_582852
  var valid_582853 = query.getOrDefault("quotaUser")
  valid_582853 = validateParameter(valid_582853, JString, required = false,
                                 default = nil)
  if valid_582853 != nil:
    section.add "quotaUser", valid_582853
  var valid_582854 = query.getOrDefault("alt")
  valid_582854 = validateParameter(valid_582854, JString, required = false,
                                 default = newJString("json"))
  if valid_582854 != nil:
    section.add "alt", valid_582854
  var valid_582855 = query.getOrDefault("oauth_token")
  valid_582855 = validateParameter(valid_582855, JString, required = false,
                                 default = nil)
  if valid_582855 != nil:
    section.add "oauth_token", valid_582855
  var valid_582856 = query.getOrDefault("userIp")
  valid_582856 = validateParameter(valid_582856, JString, required = false,
                                 default = nil)
  if valid_582856 != nil:
    section.add "userIp", valid_582856
  var valid_582857 = query.getOrDefault("key")
  valid_582857 = validateParameter(valid_582857, JString, required = false,
                                 default = nil)
  if valid_582857 != nil:
    section.add "key", valid_582857
  var valid_582858 = query.getOrDefault("prettyPrint")
  valid_582858 = validateParameter(valid_582858, JBool, required = false,
                                 default = newJBool(true))
  if valid_582858 != nil:
    section.add "prettyPrint", valid_582858
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582859: Call_DfareportingRemarketingListSharesGet_582847;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one remarketing list share by remarketing list ID.
  ## 
  let valid = call_582859.validator(path, query, header, formData, body)
  let scheme = call_582859.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582859.url(scheme.get, call_582859.host, call_582859.base,
                         call_582859.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582859, url, valid)

proc call*(call_582860: Call_DfareportingRemarketingListSharesGet_582847;
          profileId: string; remarketingListId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListSharesGet
  ## Gets one remarketing list share by remarketing list ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   remarketingListId: string (required)
  ##                    : Remarketing list ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582861 = newJObject()
  var query_582862 = newJObject()
  add(path_582861, "profileId", newJString(profileId))
  add(query_582862, "fields", newJString(fields))
  add(query_582862, "quotaUser", newJString(quotaUser))
  add(query_582862, "alt", newJString(alt))
  add(query_582862, "oauth_token", newJString(oauthToken))
  add(query_582862, "userIp", newJString(userIp))
  add(path_582861, "remarketingListId", newJString(remarketingListId))
  add(query_582862, "key", newJString(key))
  add(query_582862, "prettyPrint", newJBool(prettyPrint))
  result = call_582860.call(path_582861, query_582862, nil, nil, nil)

var dfareportingRemarketingListSharesGet* = Call_DfareportingRemarketingListSharesGet_582847(
    name: "dfareportingRemarketingListSharesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/remarketingListShares/{remarketingListId}",
    validator: validate_DfareportingRemarketingListSharesGet_582848,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListSharesGet_582849,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsUpdate_582886 = ref object of OpenApiRestCall_579437
proc url_DfareportingRemarketingListsUpdate_582888(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsUpdate_582887(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing remarketing list.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582889 = path.getOrDefault("profileId")
  valid_582889 = validateParameter(valid_582889, JString, required = true,
                                 default = nil)
  if valid_582889 != nil:
    section.add "profileId", valid_582889
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582890 = query.getOrDefault("fields")
  valid_582890 = validateParameter(valid_582890, JString, required = false,
                                 default = nil)
  if valid_582890 != nil:
    section.add "fields", valid_582890
  var valid_582891 = query.getOrDefault("quotaUser")
  valid_582891 = validateParameter(valid_582891, JString, required = false,
                                 default = nil)
  if valid_582891 != nil:
    section.add "quotaUser", valid_582891
  var valid_582892 = query.getOrDefault("alt")
  valid_582892 = validateParameter(valid_582892, JString, required = false,
                                 default = newJString("json"))
  if valid_582892 != nil:
    section.add "alt", valid_582892
  var valid_582893 = query.getOrDefault("oauth_token")
  valid_582893 = validateParameter(valid_582893, JString, required = false,
                                 default = nil)
  if valid_582893 != nil:
    section.add "oauth_token", valid_582893
  var valid_582894 = query.getOrDefault("userIp")
  valid_582894 = validateParameter(valid_582894, JString, required = false,
                                 default = nil)
  if valid_582894 != nil:
    section.add "userIp", valid_582894
  var valid_582895 = query.getOrDefault("key")
  valid_582895 = validateParameter(valid_582895, JString, required = false,
                                 default = nil)
  if valid_582895 != nil:
    section.add "key", valid_582895
  var valid_582896 = query.getOrDefault("prettyPrint")
  valid_582896 = validateParameter(valid_582896, JBool, required = false,
                                 default = newJBool(true))
  if valid_582896 != nil:
    section.add "prettyPrint", valid_582896
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582898: Call_DfareportingRemarketingListsUpdate_582886;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing remarketing list.
  ## 
  let valid = call_582898.validator(path, query, header, formData, body)
  let scheme = call_582898.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582898.url(scheme.get, call_582898.host, call_582898.base,
                         call_582898.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582898, url, valid)

proc call*(call_582899: Call_DfareportingRemarketingListsUpdate_582886;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListsUpdate
  ## Updates an existing remarketing list.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582900 = newJObject()
  var query_582901 = newJObject()
  var body_582902 = newJObject()
  add(path_582900, "profileId", newJString(profileId))
  add(query_582901, "fields", newJString(fields))
  add(query_582901, "quotaUser", newJString(quotaUser))
  add(query_582901, "alt", newJString(alt))
  add(query_582901, "oauth_token", newJString(oauthToken))
  add(query_582901, "userIp", newJString(userIp))
  add(query_582901, "key", newJString(key))
  if body != nil:
    body_582902 = body
  add(query_582901, "prettyPrint", newJBool(prettyPrint))
  result = call_582899.call(path_582900, query_582901, nil, nil, body_582902)

var dfareportingRemarketingListsUpdate* = Call_DfareportingRemarketingListsUpdate_582886(
    name: "dfareportingRemarketingListsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists",
    validator: validate_DfareportingRemarketingListsUpdate_582887,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListsUpdate_582888,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsInsert_582903 = ref object of OpenApiRestCall_579437
proc url_DfareportingRemarketingListsInsert_582905(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsInsert_582904(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new remarketing list.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582906 = path.getOrDefault("profileId")
  valid_582906 = validateParameter(valid_582906, JString, required = true,
                                 default = nil)
  if valid_582906 != nil:
    section.add "profileId", valid_582906
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582907 = query.getOrDefault("fields")
  valid_582907 = validateParameter(valid_582907, JString, required = false,
                                 default = nil)
  if valid_582907 != nil:
    section.add "fields", valid_582907
  var valid_582908 = query.getOrDefault("quotaUser")
  valid_582908 = validateParameter(valid_582908, JString, required = false,
                                 default = nil)
  if valid_582908 != nil:
    section.add "quotaUser", valid_582908
  var valid_582909 = query.getOrDefault("alt")
  valid_582909 = validateParameter(valid_582909, JString, required = false,
                                 default = newJString("json"))
  if valid_582909 != nil:
    section.add "alt", valid_582909
  var valid_582910 = query.getOrDefault("oauth_token")
  valid_582910 = validateParameter(valid_582910, JString, required = false,
                                 default = nil)
  if valid_582910 != nil:
    section.add "oauth_token", valid_582910
  var valid_582911 = query.getOrDefault("userIp")
  valid_582911 = validateParameter(valid_582911, JString, required = false,
                                 default = nil)
  if valid_582911 != nil:
    section.add "userIp", valid_582911
  var valid_582912 = query.getOrDefault("key")
  valid_582912 = validateParameter(valid_582912, JString, required = false,
                                 default = nil)
  if valid_582912 != nil:
    section.add "key", valid_582912
  var valid_582913 = query.getOrDefault("prettyPrint")
  valid_582913 = validateParameter(valid_582913, JBool, required = false,
                                 default = newJBool(true))
  if valid_582913 != nil:
    section.add "prettyPrint", valid_582913
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582915: Call_DfareportingRemarketingListsInsert_582903;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new remarketing list.
  ## 
  let valid = call_582915.validator(path, query, header, formData, body)
  let scheme = call_582915.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582915.url(scheme.get, call_582915.host, call_582915.base,
                         call_582915.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582915, url, valid)

proc call*(call_582916: Call_DfareportingRemarketingListsInsert_582903;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListsInsert
  ## Inserts a new remarketing list.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582917 = newJObject()
  var query_582918 = newJObject()
  var body_582919 = newJObject()
  add(path_582917, "profileId", newJString(profileId))
  add(query_582918, "fields", newJString(fields))
  add(query_582918, "quotaUser", newJString(quotaUser))
  add(query_582918, "alt", newJString(alt))
  add(query_582918, "oauth_token", newJString(oauthToken))
  add(query_582918, "userIp", newJString(userIp))
  add(query_582918, "key", newJString(key))
  if body != nil:
    body_582919 = body
  add(query_582918, "prettyPrint", newJBool(prettyPrint))
  result = call_582916.call(path_582917, query_582918, nil, nil, body_582919)

var dfareportingRemarketingListsInsert* = Call_DfareportingRemarketingListsInsert_582903(
    name: "dfareportingRemarketingListsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists",
    validator: validate_DfareportingRemarketingListsInsert_582904,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListsInsert_582905,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsList_582863 = ref object of OpenApiRestCall_579437
proc url_DfareportingRemarketingListsList_582865(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsList_582864(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of remarketing lists, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582866 = path.getOrDefault("profileId")
  valid_582866 = validateParameter(valid_582866, JString, required = true,
                                 default = nil)
  if valid_582866 != nil:
    section.add "profileId", valid_582866
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   advertiserId: JString (required)
  ##               : Select only remarketing lists owned by this advertiser.
  ##   active: JBool
  ##         : Select only active or only inactive remarketing lists.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   floodlightActivityId: JString
  ##                       : Select only remarketing lists that have this floodlight activity ID.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   name: JString
  ##       : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582867 = query.getOrDefault("fields")
  valid_582867 = validateParameter(valid_582867, JString, required = false,
                                 default = nil)
  if valid_582867 != nil:
    section.add "fields", valid_582867
  var valid_582868 = query.getOrDefault("pageToken")
  valid_582868 = validateParameter(valid_582868, JString, required = false,
                                 default = nil)
  if valid_582868 != nil:
    section.add "pageToken", valid_582868
  var valid_582869 = query.getOrDefault("quotaUser")
  valid_582869 = validateParameter(valid_582869, JString, required = false,
                                 default = nil)
  if valid_582869 != nil:
    section.add "quotaUser", valid_582869
  var valid_582870 = query.getOrDefault("sortField")
  valid_582870 = validateParameter(valid_582870, JString, required = false,
                                 default = newJString("ID"))
  if valid_582870 != nil:
    section.add "sortField", valid_582870
  var valid_582871 = query.getOrDefault("alt")
  valid_582871 = validateParameter(valid_582871, JString, required = false,
                                 default = newJString("json"))
  if valid_582871 != nil:
    section.add "alt", valid_582871
  assert query != nil,
        "query argument is necessary due to required `advertiserId` field"
  var valid_582872 = query.getOrDefault("advertiserId")
  valid_582872 = validateParameter(valid_582872, JString, required = true,
                                 default = nil)
  if valid_582872 != nil:
    section.add "advertiserId", valid_582872
  var valid_582873 = query.getOrDefault("active")
  valid_582873 = validateParameter(valid_582873, JBool, required = false, default = nil)
  if valid_582873 != nil:
    section.add "active", valid_582873
  var valid_582874 = query.getOrDefault("oauth_token")
  valid_582874 = validateParameter(valid_582874, JString, required = false,
                                 default = nil)
  if valid_582874 != nil:
    section.add "oauth_token", valid_582874
  var valid_582875 = query.getOrDefault("floodlightActivityId")
  valid_582875 = validateParameter(valid_582875, JString, required = false,
                                 default = nil)
  if valid_582875 != nil:
    section.add "floodlightActivityId", valid_582875
  var valid_582876 = query.getOrDefault("userIp")
  valid_582876 = validateParameter(valid_582876, JString, required = false,
                                 default = nil)
  if valid_582876 != nil:
    section.add "userIp", valid_582876
  var valid_582877 = query.getOrDefault("maxResults")
  valid_582877 = validateParameter(valid_582877, JInt, required = false,
                                 default = newJInt(1000))
  if valid_582877 != nil:
    section.add "maxResults", valid_582877
  var valid_582878 = query.getOrDefault("key")
  valid_582878 = validateParameter(valid_582878, JString, required = false,
                                 default = nil)
  if valid_582878 != nil:
    section.add "key", valid_582878
  var valid_582879 = query.getOrDefault("name")
  valid_582879 = validateParameter(valid_582879, JString, required = false,
                                 default = nil)
  if valid_582879 != nil:
    section.add "name", valid_582879
  var valid_582880 = query.getOrDefault("sortOrder")
  valid_582880 = validateParameter(valid_582880, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_582880 != nil:
    section.add "sortOrder", valid_582880
  var valid_582881 = query.getOrDefault("prettyPrint")
  valid_582881 = validateParameter(valid_582881, JBool, required = false,
                                 default = newJBool(true))
  if valid_582881 != nil:
    section.add "prettyPrint", valid_582881
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582882: Call_DfareportingRemarketingListsList_582863;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of remarketing lists, possibly filtered. This method supports paging.
  ## 
  let valid = call_582882.validator(path, query, header, formData, body)
  let scheme = call_582882.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582882.url(scheme.get, call_582882.host, call_582882.base,
                         call_582882.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582882, url, valid)

proc call*(call_582883: Call_DfareportingRemarketingListsList_582863;
          profileId: string; advertiserId: string; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; sortField: string = "ID";
          alt: string = "json"; active: bool = false; oauthToken: string = "";
          floodlightActivityId: string = ""; userIp: string = "";
          maxResults: int = 1000; key: string = ""; name: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListsList
  ## Retrieves a list of remarketing lists, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   advertiserId: string (required)
  ##               : Select only remarketing lists owned by this advertiser.
  ##   active: bool
  ##         : Select only active or only inactive remarketing lists.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   floodlightActivityId: string
  ##                       : Select only remarketing lists that have this floodlight activity ID.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   name: string
  ##       : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582884 = newJObject()
  var query_582885 = newJObject()
  add(path_582884, "profileId", newJString(profileId))
  add(query_582885, "fields", newJString(fields))
  add(query_582885, "pageToken", newJString(pageToken))
  add(query_582885, "quotaUser", newJString(quotaUser))
  add(query_582885, "sortField", newJString(sortField))
  add(query_582885, "alt", newJString(alt))
  add(query_582885, "advertiserId", newJString(advertiserId))
  add(query_582885, "active", newJBool(active))
  add(query_582885, "oauth_token", newJString(oauthToken))
  add(query_582885, "floodlightActivityId", newJString(floodlightActivityId))
  add(query_582885, "userIp", newJString(userIp))
  add(query_582885, "maxResults", newJInt(maxResults))
  add(query_582885, "key", newJString(key))
  add(query_582885, "name", newJString(name))
  add(query_582885, "sortOrder", newJString(sortOrder))
  add(query_582885, "prettyPrint", newJBool(prettyPrint))
  result = call_582883.call(path_582884, query_582885, nil, nil, nil)

var dfareportingRemarketingListsList* = Call_DfareportingRemarketingListsList_582863(
    name: "dfareportingRemarketingListsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists",
    validator: validate_DfareportingRemarketingListsList_582864,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListsList_582865,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsPatch_582920 = ref object of OpenApiRestCall_579437
proc url_DfareportingRemarketingListsPatch_582922(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsPatch_582921(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing remarketing list. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582923 = path.getOrDefault("profileId")
  valid_582923 = validateParameter(valid_582923, JString, required = true,
                                 default = nil)
  if valid_582923 != nil:
    section.add "profileId", valid_582923
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Remarketing list ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582924 = query.getOrDefault("fields")
  valid_582924 = validateParameter(valid_582924, JString, required = false,
                                 default = nil)
  if valid_582924 != nil:
    section.add "fields", valid_582924
  var valid_582925 = query.getOrDefault("quotaUser")
  valid_582925 = validateParameter(valid_582925, JString, required = false,
                                 default = nil)
  if valid_582925 != nil:
    section.add "quotaUser", valid_582925
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_582926 = query.getOrDefault("id")
  valid_582926 = validateParameter(valid_582926, JString, required = true,
                                 default = nil)
  if valid_582926 != nil:
    section.add "id", valid_582926
  var valid_582927 = query.getOrDefault("alt")
  valid_582927 = validateParameter(valid_582927, JString, required = false,
                                 default = newJString("json"))
  if valid_582927 != nil:
    section.add "alt", valid_582927
  var valid_582928 = query.getOrDefault("oauth_token")
  valid_582928 = validateParameter(valid_582928, JString, required = false,
                                 default = nil)
  if valid_582928 != nil:
    section.add "oauth_token", valid_582928
  var valid_582929 = query.getOrDefault("userIp")
  valid_582929 = validateParameter(valid_582929, JString, required = false,
                                 default = nil)
  if valid_582929 != nil:
    section.add "userIp", valid_582929
  var valid_582930 = query.getOrDefault("key")
  valid_582930 = validateParameter(valid_582930, JString, required = false,
                                 default = nil)
  if valid_582930 != nil:
    section.add "key", valid_582930
  var valid_582931 = query.getOrDefault("prettyPrint")
  valid_582931 = validateParameter(valid_582931, JBool, required = false,
                                 default = newJBool(true))
  if valid_582931 != nil:
    section.add "prettyPrint", valid_582931
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582933: Call_DfareportingRemarketingListsPatch_582920;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing remarketing list. This method supports patch semantics.
  ## 
  let valid = call_582933.validator(path, query, header, formData, body)
  let scheme = call_582933.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582933.url(scheme.get, call_582933.host, call_582933.base,
                         call_582933.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582933, url, valid)

proc call*(call_582934: Call_DfareportingRemarketingListsPatch_582920;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListsPatch
  ## Updates an existing remarketing list. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Remarketing list ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582935 = newJObject()
  var query_582936 = newJObject()
  var body_582937 = newJObject()
  add(path_582935, "profileId", newJString(profileId))
  add(query_582936, "fields", newJString(fields))
  add(query_582936, "quotaUser", newJString(quotaUser))
  add(query_582936, "id", newJString(id))
  add(query_582936, "alt", newJString(alt))
  add(query_582936, "oauth_token", newJString(oauthToken))
  add(query_582936, "userIp", newJString(userIp))
  add(query_582936, "key", newJString(key))
  if body != nil:
    body_582937 = body
  add(query_582936, "prettyPrint", newJBool(prettyPrint))
  result = call_582934.call(path_582935, query_582936, nil, nil, body_582937)

var dfareportingRemarketingListsPatch* = Call_DfareportingRemarketingListsPatch_582920(
    name: "dfareportingRemarketingListsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists",
    validator: validate_DfareportingRemarketingListsPatch_582921,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListsPatch_582922,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsGet_582938 = ref object of OpenApiRestCall_579437
proc url_DfareportingRemarketingListsGet_582940(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsGet_582939(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one remarketing list by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Remarketing list ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582941 = path.getOrDefault("profileId")
  valid_582941 = validateParameter(valid_582941, JString, required = true,
                                 default = nil)
  if valid_582941 != nil:
    section.add "profileId", valid_582941
  var valid_582942 = path.getOrDefault("id")
  valid_582942 = validateParameter(valid_582942, JString, required = true,
                                 default = nil)
  if valid_582942 != nil:
    section.add "id", valid_582942
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582943 = query.getOrDefault("fields")
  valid_582943 = validateParameter(valid_582943, JString, required = false,
                                 default = nil)
  if valid_582943 != nil:
    section.add "fields", valid_582943
  var valid_582944 = query.getOrDefault("quotaUser")
  valid_582944 = validateParameter(valid_582944, JString, required = false,
                                 default = nil)
  if valid_582944 != nil:
    section.add "quotaUser", valid_582944
  var valid_582945 = query.getOrDefault("alt")
  valid_582945 = validateParameter(valid_582945, JString, required = false,
                                 default = newJString("json"))
  if valid_582945 != nil:
    section.add "alt", valid_582945
  var valid_582946 = query.getOrDefault("oauth_token")
  valid_582946 = validateParameter(valid_582946, JString, required = false,
                                 default = nil)
  if valid_582946 != nil:
    section.add "oauth_token", valid_582946
  var valid_582947 = query.getOrDefault("userIp")
  valid_582947 = validateParameter(valid_582947, JString, required = false,
                                 default = nil)
  if valid_582947 != nil:
    section.add "userIp", valid_582947
  var valid_582948 = query.getOrDefault("key")
  valid_582948 = validateParameter(valid_582948, JString, required = false,
                                 default = nil)
  if valid_582948 != nil:
    section.add "key", valid_582948
  var valid_582949 = query.getOrDefault("prettyPrint")
  valid_582949 = validateParameter(valid_582949, JBool, required = false,
                                 default = newJBool(true))
  if valid_582949 != nil:
    section.add "prettyPrint", valid_582949
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582950: Call_DfareportingRemarketingListsGet_582938;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one remarketing list by ID.
  ## 
  let valid = call_582950.validator(path, query, header, formData, body)
  let scheme = call_582950.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582950.url(scheme.get, call_582950.host, call_582950.base,
                         call_582950.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582950, url, valid)

proc call*(call_582951: Call_DfareportingRemarketingListsGet_582938;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListsGet
  ## Gets one remarketing list by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Remarketing list ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582952 = newJObject()
  var query_582953 = newJObject()
  add(path_582952, "profileId", newJString(profileId))
  add(query_582953, "fields", newJString(fields))
  add(query_582953, "quotaUser", newJString(quotaUser))
  add(query_582953, "alt", newJString(alt))
  add(query_582953, "oauth_token", newJString(oauthToken))
  add(query_582953, "userIp", newJString(userIp))
  add(path_582952, "id", newJString(id))
  add(query_582953, "key", newJString(key))
  add(query_582953, "prettyPrint", newJBool(prettyPrint))
  result = call_582951.call(path_582952, query_582953, nil, nil, nil)

var dfareportingRemarketingListsGet* = Call_DfareportingRemarketingListsGet_582938(
    name: "dfareportingRemarketingListsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists/{id}",
    validator: validate_DfareportingRemarketingListsGet_582939,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListsGet_582940,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsInsert_582974 = ref object of OpenApiRestCall_579437
proc url_DfareportingReportsInsert_582976(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsInsert_582975(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a report.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582977 = path.getOrDefault("profileId")
  valid_582977 = validateParameter(valid_582977, JString, required = true,
                                 default = nil)
  if valid_582977 != nil:
    section.add "profileId", valid_582977
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582978 = query.getOrDefault("fields")
  valid_582978 = validateParameter(valid_582978, JString, required = false,
                                 default = nil)
  if valid_582978 != nil:
    section.add "fields", valid_582978
  var valid_582979 = query.getOrDefault("quotaUser")
  valid_582979 = validateParameter(valid_582979, JString, required = false,
                                 default = nil)
  if valid_582979 != nil:
    section.add "quotaUser", valid_582979
  var valid_582980 = query.getOrDefault("alt")
  valid_582980 = validateParameter(valid_582980, JString, required = false,
                                 default = newJString("json"))
  if valid_582980 != nil:
    section.add "alt", valid_582980
  var valid_582981 = query.getOrDefault("oauth_token")
  valid_582981 = validateParameter(valid_582981, JString, required = false,
                                 default = nil)
  if valid_582981 != nil:
    section.add "oauth_token", valid_582981
  var valid_582982 = query.getOrDefault("userIp")
  valid_582982 = validateParameter(valid_582982, JString, required = false,
                                 default = nil)
  if valid_582982 != nil:
    section.add "userIp", valid_582982
  var valid_582983 = query.getOrDefault("key")
  valid_582983 = validateParameter(valid_582983, JString, required = false,
                                 default = nil)
  if valid_582983 != nil:
    section.add "key", valid_582983
  var valid_582984 = query.getOrDefault("prettyPrint")
  valid_582984 = validateParameter(valid_582984, JBool, required = false,
                                 default = newJBool(true))
  if valid_582984 != nil:
    section.add "prettyPrint", valid_582984
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582986: Call_DfareportingReportsInsert_582974; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a report.
  ## 
  let valid = call_582986.validator(path, query, header, formData, body)
  let scheme = call_582986.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582986.url(scheme.get, call_582986.host, call_582986.base,
                         call_582986.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582986, url, valid)

proc call*(call_582987: Call_DfareportingReportsInsert_582974; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsInsert
  ## Creates a report.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582988 = newJObject()
  var query_582989 = newJObject()
  var body_582990 = newJObject()
  add(path_582988, "profileId", newJString(profileId))
  add(query_582989, "fields", newJString(fields))
  add(query_582989, "quotaUser", newJString(quotaUser))
  add(query_582989, "alt", newJString(alt))
  add(query_582989, "oauth_token", newJString(oauthToken))
  add(query_582989, "userIp", newJString(userIp))
  add(query_582989, "key", newJString(key))
  if body != nil:
    body_582990 = body
  add(query_582989, "prettyPrint", newJBool(prettyPrint))
  result = call_582987.call(path_582988, query_582989, nil, nil, body_582990)

var dfareportingReportsInsert* = Call_DfareportingReportsInsert_582974(
    name: "dfareportingReportsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/reports",
    validator: validate_DfareportingReportsInsert_582975,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsInsert_582976,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsList_582954 = ref object of OpenApiRestCall_579437
proc url_DfareportingReportsList_582956(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsList_582955(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves list of reports.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582957 = path.getOrDefault("profileId")
  valid_582957 = validateParameter(valid_582957, JString, required = true,
                                 default = nil)
  if valid_582957 != nil:
    section.add "profileId", valid_582957
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : The field by which to sort the list.
  ##   scope: JString
  ##        : The scope that defines which results are returned.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582958 = query.getOrDefault("fields")
  valid_582958 = validateParameter(valid_582958, JString, required = false,
                                 default = nil)
  if valid_582958 != nil:
    section.add "fields", valid_582958
  var valid_582959 = query.getOrDefault("pageToken")
  valid_582959 = validateParameter(valid_582959, JString, required = false,
                                 default = nil)
  if valid_582959 != nil:
    section.add "pageToken", valid_582959
  var valid_582960 = query.getOrDefault("quotaUser")
  valid_582960 = validateParameter(valid_582960, JString, required = false,
                                 default = nil)
  if valid_582960 != nil:
    section.add "quotaUser", valid_582960
  var valid_582961 = query.getOrDefault("sortField")
  valid_582961 = validateParameter(valid_582961, JString, required = false,
                                 default = newJString("LAST_MODIFIED_TIME"))
  if valid_582961 != nil:
    section.add "sortField", valid_582961
  var valid_582962 = query.getOrDefault("scope")
  valid_582962 = validateParameter(valid_582962, JString, required = false,
                                 default = newJString("MINE"))
  if valid_582962 != nil:
    section.add "scope", valid_582962
  var valid_582963 = query.getOrDefault("alt")
  valid_582963 = validateParameter(valid_582963, JString, required = false,
                                 default = newJString("json"))
  if valid_582963 != nil:
    section.add "alt", valid_582963
  var valid_582964 = query.getOrDefault("oauth_token")
  valid_582964 = validateParameter(valid_582964, JString, required = false,
                                 default = nil)
  if valid_582964 != nil:
    section.add "oauth_token", valid_582964
  var valid_582965 = query.getOrDefault("userIp")
  valid_582965 = validateParameter(valid_582965, JString, required = false,
                                 default = nil)
  if valid_582965 != nil:
    section.add "userIp", valid_582965
  var valid_582966 = query.getOrDefault("maxResults")
  valid_582966 = validateParameter(valid_582966, JInt, required = false,
                                 default = newJInt(10))
  if valid_582966 != nil:
    section.add "maxResults", valid_582966
  var valid_582967 = query.getOrDefault("key")
  valid_582967 = validateParameter(valid_582967, JString, required = false,
                                 default = nil)
  if valid_582967 != nil:
    section.add "key", valid_582967
  var valid_582968 = query.getOrDefault("sortOrder")
  valid_582968 = validateParameter(valid_582968, JString, required = false,
                                 default = newJString("DESCENDING"))
  if valid_582968 != nil:
    section.add "sortOrder", valid_582968
  var valid_582969 = query.getOrDefault("prettyPrint")
  valid_582969 = validateParameter(valid_582969, JBool, required = false,
                                 default = newJBool(true))
  if valid_582969 != nil:
    section.add "prettyPrint", valid_582969
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582970: Call_DfareportingReportsList_582954; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves list of reports.
  ## 
  let valid = call_582970.validator(path, query, header, formData, body)
  let scheme = call_582970.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582970.url(scheme.get, call_582970.host, call_582970.base,
                         call_582970.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582970, url, valid)

proc call*(call_582971: Call_DfareportingReportsList_582954; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "LAST_MODIFIED_TIME"; scope: string = "MINE";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 10; key: string = ""; sortOrder: string = "DESCENDING";
          prettyPrint: bool = true): Recallable =
  ## dfareportingReportsList
  ## Retrieves list of reports.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : The field by which to sort the list.
  ##   scope: string
  ##        : The scope that defines which results are returned.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_582972 = newJObject()
  var query_582973 = newJObject()
  add(path_582972, "profileId", newJString(profileId))
  add(query_582973, "fields", newJString(fields))
  add(query_582973, "pageToken", newJString(pageToken))
  add(query_582973, "quotaUser", newJString(quotaUser))
  add(query_582973, "sortField", newJString(sortField))
  add(query_582973, "scope", newJString(scope))
  add(query_582973, "alt", newJString(alt))
  add(query_582973, "oauth_token", newJString(oauthToken))
  add(query_582973, "userIp", newJString(userIp))
  add(query_582973, "maxResults", newJInt(maxResults))
  add(query_582973, "key", newJString(key))
  add(query_582973, "sortOrder", newJString(sortOrder))
  add(query_582973, "prettyPrint", newJBool(prettyPrint))
  result = call_582971.call(path_582972, query_582973, nil, nil, nil)

var dfareportingReportsList* = Call_DfareportingReportsList_582954(
    name: "dfareportingReportsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/reports",
    validator: validate_DfareportingReportsList_582955,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsList_582956,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsCompatibleFieldsQuery_582991 = ref object of OpenApiRestCall_579437
proc url_DfareportingReportsCompatibleFieldsQuery_582993(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"), (kind: ConstantSegment,
        value: "/reports/compatiblefields/query")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsCompatibleFieldsQuery_582992(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582994 = path.getOrDefault("profileId")
  valid_582994 = validateParameter(valid_582994, JString, required = true,
                                 default = nil)
  if valid_582994 != nil:
    section.add "profileId", valid_582994
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_582995 = query.getOrDefault("fields")
  valid_582995 = validateParameter(valid_582995, JString, required = false,
                                 default = nil)
  if valid_582995 != nil:
    section.add "fields", valid_582995
  var valid_582996 = query.getOrDefault("quotaUser")
  valid_582996 = validateParameter(valid_582996, JString, required = false,
                                 default = nil)
  if valid_582996 != nil:
    section.add "quotaUser", valid_582996
  var valid_582997 = query.getOrDefault("alt")
  valid_582997 = validateParameter(valid_582997, JString, required = false,
                                 default = newJString("json"))
  if valid_582997 != nil:
    section.add "alt", valid_582997
  var valid_582998 = query.getOrDefault("oauth_token")
  valid_582998 = validateParameter(valid_582998, JString, required = false,
                                 default = nil)
  if valid_582998 != nil:
    section.add "oauth_token", valid_582998
  var valid_582999 = query.getOrDefault("userIp")
  valid_582999 = validateParameter(valid_582999, JString, required = false,
                                 default = nil)
  if valid_582999 != nil:
    section.add "userIp", valid_582999
  var valid_583000 = query.getOrDefault("key")
  valid_583000 = validateParameter(valid_583000, JString, required = false,
                                 default = nil)
  if valid_583000 != nil:
    section.add "key", valid_583000
  var valid_583001 = query.getOrDefault("prettyPrint")
  valid_583001 = validateParameter(valid_583001, JBool, required = false,
                                 default = newJBool(true))
  if valid_583001 != nil:
    section.add "prettyPrint", valid_583001
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_583003: Call_DfareportingReportsCompatibleFieldsQuery_582991;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.
  ## 
  let valid = call_583003.validator(path, query, header, formData, body)
  let scheme = call_583003.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583003.url(scheme.get, call_583003.host, call_583003.base,
                         call_583003.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583003, url, valid)

proc call*(call_583004: Call_DfareportingReportsCompatibleFieldsQuery_582991;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsCompatibleFieldsQuery
  ## Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583005 = newJObject()
  var query_583006 = newJObject()
  var body_583007 = newJObject()
  add(path_583005, "profileId", newJString(profileId))
  add(query_583006, "fields", newJString(fields))
  add(query_583006, "quotaUser", newJString(quotaUser))
  add(query_583006, "alt", newJString(alt))
  add(query_583006, "oauth_token", newJString(oauthToken))
  add(query_583006, "userIp", newJString(userIp))
  add(query_583006, "key", newJString(key))
  if body != nil:
    body_583007 = body
  add(query_583006, "prettyPrint", newJBool(prettyPrint))
  result = call_583004.call(path_583005, query_583006, nil, nil, body_583007)

var dfareportingReportsCompatibleFieldsQuery* = Call_DfareportingReportsCompatibleFieldsQuery_582991(
    name: "dfareportingReportsCompatibleFieldsQuery", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/compatiblefields/query",
    validator: validate_DfareportingReportsCompatibleFieldsQuery_582992,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsCompatibleFieldsQuery_582993,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsUpdate_583024 = ref object of OpenApiRestCall_579437
proc url_DfareportingReportsUpdate_583026(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsUpdate_583025(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a report.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583027 = path.getOrDefault("profileId")
  valid_583027 = validateParameter(valid_583027, JString, required = true,
                                 default = nil)
  if valid_583027 != nil:
    section.add "profileId", valid_583027
  var valid_583028 = path.getOrDefault("reportId")
  valid_583028 = validateParameter(valid_583028, JString, required = true,
                                 default = nil)
  if valid_583028 != nil:
    section.add "reportId", valid_583028
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583029 = query.getOrDefault("fields")
  valid_583029 = validateParameter(valid_583029, JString, required = false,
                                 default = nil)
  if valid_583029 != nil:
    section.add "fields", valid_583029
  var valid_583030 = query.getOrDefault("quotaUser")
  valid_583030 = validateParameter(valid_583030, JString, required = false,
                                 default = nil)
  if valid_583030 != nil:
    section.add "quotaUser", valid_583030
  var valid_583031 = query.getOrDefault("alt")
  valid_583031 = validateParameter(valid_583031, JString, required = false,
                                 default = newJString("json"))
  if valid_583031 != nil:
    section.add "alt", valid_583031
  var valid_583032 = query.getOrDefault("oauth_token")
  valid_583032 = validateParameter(valid_583032, JString, required = false,
                                 default = nil)
  if valid_583032 != nil:
    section.add "oauth_token", valid_583032
  var valid_583033 = query.getOrDefault("userIp")
  valid_583033 = validateParameter(valid_583033, JString, required = false,
                                 default = nil)
  if valid_583033 != nil:
    section.add "userIp", valid_583033
  var valid_583034 = query.getOrDefault("key")
  valid_583034 = validateParameter(valid_583034, JString, required = false,
                                 default = nil)
  if valid_583034 != nil:
    section.add "key", valid_583034
  var valid_583035 = query.getOrDefault("prettyPrint")
  valid_583035 = validateParameter(valid_583035, JBool, required = false,
                                 default = newJBool(true))
  if valid_583035 != nil:
    section.add "prettyPrint", valid_583035
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_583037: Call_DfareportingReportsUpdate_583024; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a report.
  ## 
  let valid = call_583037.validator(path, query, header, formData, body)
  let scheme = call_583037.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583037.url(scheme.get, call_583037.host, call_583037.base,
                         call_583037.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583037, url, valid)

proc call*(call_583038: Call_DfareportingReportsUpdate_583024; profileId: string;
          reportId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsUpdate
  ## Updates a report.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583039 = newJObject()
  var query_583040 = newJObject()
  var body_583041 = newJObject()
  add(path_583039, "profileId", newJString(profileId))
  add(query_583040, "fields", newJString(fields))
  add(query_583040, "quotaUser", newJString(quotaUser))
  add(query_583040, "alt", newJString(alt))
  add(query_583040, "oauth_token", newJString(oauthToken))
  add(query_583040, "userIp", newJString(userIp))
  add(query_583040, "key", newJString(key))
  add(path_583039, "reportId", newJString(reportId))
  if body != nil:
    body_583041 = body
  add(query_583040, "prettyPrint", newJBool(prettyPrint))
  result = call_583038.call(path_583039, query_583040, nil, nil, body_583041)

var dfareportingReportsUpdate* = Call_DfareportingReportsUpdate_583024(
    name: "dfareportingReportsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}",
    validator: validate_DfareportingReportsUpdate_583025,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsUpdate_583026,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsGet_583008 = ref object of OpenApiRestCall_579437
proc url_DfareportingReportsGet_583010(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsGet_583009(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a report by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583011 = path.getOrDefault("profileId")
  valid_583011 = validateParameter(valid_583011, JString, required = true,
                                 default = nil)
  if valid_583011 != nil:
    section.add "profileId", valid_583011
  var valid_583012 = path.getOrDefault("reportId")
  valid_583012 = validateParameter(valid_583012, JString, required = true,
                                 default = nil)
  if valid_583012 != nil:
    section.add "reportId", valid_583012
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583013 = query.getOrDefault("fields")
  valid_583013 = validateParameter(valid_583013, JString, required = false,
                                 default = nil)
  if valid_583013 != nil:
    section.add "fields", valid_583013
  var valid_583014 = query.getOrDefault("quotaUser")
  valid_583014 = validateParameter(valid_583014, JString, required = false,
                                 default = nil)
  if valid_583014 != nil:
    section.add "quotaUser", valid_583014
  var valid_583015 = query.getOrDefault("alt")
  valid_583015 = validateParameter(valid_583015, JString, required = false,
                                 default = newJString("json"))
  if valid_583015 != nil:
    section.add "alt", valid_583015
  var valid_583016 = query.getOrDefault("oauth_token")
  valid_583016 = validateParameter(valid_583016, JString, required = false,
                                 default = nil)
  if valid_583016 != nil:
    section.add "oauth_token", valid_583016
  var valid_583017 = query.getOrDefault("userIp")
  valid_583017 = validateParameter(valid_583017, JString, required = false,
                                 default = nil)
  if valid_583017 != nil:
    section.add "userIp", valid_583017
  var valid_583018 = query.getOrDefault("key")
  valid_583018 = validateParameter(valid_583018, JString, required = false,
                                 default = nil)
  if valid_583018 != nil:
    section.add "key", valid_583018
  var valid_583019 = query.getOrDefault("prettyPrint")
  valid_583019 = validateParameter(valid_583019, JBool, required = false,
                                 default = newJBool(true))
  if valid_583019 != nil:
    section.add "prettyPrint", valid_583019
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583020: Call_DfareportingReportsGet_583008; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a report by its ID.
  ## 
  let valid = call_583020.validator(path, query, header, formData, body)
  let scheme = call_583020.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583020.url(scheme.get, call_583020.host, call_583020.base,
                         call_583020.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583020, url, valid)

proc call*(call_583021: Call_DfareportingReportsGet_583008; profileId: string;
          reportId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsGet
  ## Retrieves a report by its ID.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583022 = newJObject()
  var query_583023 = newJObject()
  add(path_583022, "profileId", newJString(profileId))
  add(query_583023, "fields", newJString(fields))
  add(query_583023, "quotaUser", newJString(quotaUser))
  add(query_583023, "alt", newJString(alt))
  add(query_583023, "oauth_token", newJString(oauthToken))
  add(query_583023, "userIp", newJString(userIp))
  add(query_583023, "key", newJString(key))
  add(path_583022, "reportId", newJString(reportId))
  add(query_583023, "prettyPrint", newJBool(prettyPrint))
  result = call_583021.call(path_583022, query_583023, nil, nil, nil)

var dfareportingReportsGet* = Call_DfareportingReportsGet_583008(
    name: "dfareportingReportsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}",
    validator: validate_DfareportingReportsGet_583009, base: "/dfareporting/v3.2",
    url: url_DfareportingReportsGet_583010, schemes: {Scheme.Https})
type
  Call_DfareportingReportsPatch_583058 = ref object of OpenApiRestCall_579437
proc url_DfareportingReportsPatch_583060(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsPatch_583059(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a report. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583061 = path.getOrDefault("profileId")
  valid_583061 = validateParameter(valid_583061, JString, required = true,
                                 default = nil)
  if valid_583061 != nil:
    section.add "profileId", valid_583061
  var valid_583062 = path.getOrDefault("reportId")
  valid_583062 = validateParameter(valid_583062, JString, required = true,
                                 default = nil)
  if valid_583062 != nil:
    section.add "reportId", valid_583062
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583063 = query.getOrDefault("fields")
  valid_583063 = validateParameter(valid_583063, JString, required = false,
                                 default = nil)
  if valid_583063 != nil:
    section.add "fields", valid_583063
  var valid_583064 = query.getOrDefault("quotaUser")
  valid_583064 = validateParameter(valid_583064, JString, required = false,
                                 default = nil)
  if valid_583064 != nil:
    section.add "quotaUser", valid_583064
  var valid_583065 = query.getOrDefault("alt")
  valid_583065 = validateParameter(valid_583065, JString, required = false,
                                 default = newJString("json"))
  if valid_583065 != nil:
    section.add "alt", valid_583065
  var valid_583066 = query.getOrDefault("oauth_token")
  valid_583066 = validateParameter(valid_583066, JString, required = false,
                                 default = nil)
  if valid_583066 != nil:
    section.add "oauth_token", valid_583066
  var valid_583067 = query.getOrDefault("userIp")
  valid_583067 = validateParameter(valid_583067, JString, required = false,
                                 default = nil)
  if valid_583067 != nil:
    section.add "userIp", valid_583067
  var valid_583068 = query.getOrDefault("key")
  valid_583068 = validateParameter(valid_583068, JString, required = false,
                                 default = nil)
  if valid_583068 != nil:
    section.add "key", valid_583068
  var valid_583069 = query.getOrDefault("prettyPrint")
  valid_583069 = validateParameter(valid_583069, JBool, required = false,
                                 default = newJBool(true))
  if valid_583069 != nil:
    section.add "prettyPrint", valid_583069
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_583071: Call_DfareportingReportsPatch_583058; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a report. This method supports patch semantics.
  ## 
  let valid = call_583071.validator(path, query, header, formData, body)
  let scheme = call_583071.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583071.url(scheme.get, call_583071.host, call_583071.base,
                         call_583071.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583071, url, valid)

proc call*(call_583072: Call_DfareportingReportsPatch_583058; profileId: string;
          reportId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsPatch
  ## Updates a report. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583073 = newJObject()
  var query_583074 = newJObject()
  var body_583075 = newJObject()
  add(path_583073, "profileId", newJString(profileId))
  add(query_583074, "fields", newJString(fields))
  add(query_583074, "quotaUser", newJString(quotaUser))
  add(query_583074, "alt", newJString(alt))
  add(query_583074, "oauth_token", newJString(oauthToken))
  add(query_583074, "userIp", newJString(userIp))
  add(query_583074, "key", newJString(key))
  add(path_583073, "reportId", newJString(reportId))
  if body != nil:
    body_583075 = body
  add(query_583074, "prettyPrint", newJBool(prettyPrint))
  result = call_583072.call(path_583073, query_583074, nil, nil, body_583075)

var dfareportingReportsPatch* = Call_DfareportingReportsPatch_583058(
    name: "dfareportingReportsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}",
    validator: validate_DfareportingReportsPatch_583059,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsPatch_583060,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsDelete_583042 = ref object of OpenApiRestCall_579437
proc url_DfareportingReportsDelete_583044(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsDelete_583043(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a report by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583045 = path.getOrDefault("profileId")
  valid_583045 = validateParameter(valid_583045, JString, required = true,
                                 default = nil)
  if valid_583045 != nil:
    section.add "profileId", valid_583045
  var valid_583046 = path.getOrDefault("reportId")
  valid_583046 = validateParameter(valid_583046, JString, required = true,
                                 default = nil)
  if valid_583046 != nil:
    section.add "reportId", valid_583046
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583047 = query.getOrDefault("fields")
  valid_583047 = validateParameter(valid_583047, JString, required = false,
                                 default = nil)
  if valid_583047 != nil:
    section.add "fields", valid_583047
  var valid_583048 = query.getOrDefault("quotaUser")
  valid_583048 = validateParameter(valid_583048, JString, required = false,
                                 default = nil)
  if valid_583048 != nil:
    section.add "quotaUser", valid_583048
  var valid_583049 = query.getOrDefault("alt")
  valid_583049 = validateParameter(valid_583049, JString, required = false,
                                 default = newJString("json"))
  if valid_583049 != nil:
    section.add "alt", valid_583049
  var valid_583050 = query.getOrDefault("oauth_token")
  valid_583050 = validateParameter(valid_583050, JString, required = false,
                                 default = nil)
  if valid_583050 != nil:
    section.add "oauth_token", valid_583050
  var valid_583051 = query.getOrDefault("userIp")
  valid_583051 = validateParameter(valid_583051, JString, required = false,
                                 default = nil)
  if valid_583051 != nil:
    section.add "userIp", valid_583051
  var valid_583052 = query.getOrDefault("key")
  valid_583052 = validateParameter(valid_583052, JString, required = false,
                                 default = nil)
  if valid_583052 != nil:
    section.add "key", valid_583052
  var valid_583053 = query.getOrDefault("prettyPrint")
  valid_583053 = validateParameter(valid_583053, JBool, required = false,
                                 default = newJBool(true))
  if valid_583053 != nil:
    section.add "prettyPrint", valid_583053
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583054: Call_DfareportingReportsDelete_583042; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a report by its ID.
  ## 
  let valid = call_583054.validator(path, query, header, formData, body)
  let scheme = call_583054.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583054.url(scheme.get, call_583054.host, call_583054.base,
                         call_583054.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583054, url, valid)

proc call*(call_583055: Call_DfareportingReportsDelete_583042; profileId: string;
          reportId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsDelete
  ## Deletes a report by its ID.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583056 = newJObject()
  var query_583057 = newJObject()
  add(path_583056, "profileId", newJString(profileId))
  add(query_583057, "fields", newJString(fields))
  add(query_583057, "quotaUser", newJString(quotaUser))
  add(query_583057, "alt", newJString(alt))
  add(query_583057, "oauth_token", newJString(oauthToken))
  add(query_583057, "userIp", newJString(userIp))
  add(query_583057, "key", newJString(key))
  add(path_583056, "reportId", newJString(reportId))
  add(query_583057, "prettyPrint", newJBool(prettyPrint))
  result = call_583055.call(path_583056, query_583057, nil, nil, nil)

var dfareportingReportsDelete* = Call_DfareportingReportsDelete_583042(
    name: "dfareportingReportsDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}",
    validator: validate_DfareportingReportsDelete_583043,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsDelete_583044,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsFilesList_583076 = ref object of OpenApiRestCall_579437
proc url_DfareportingReportsFilesList_583078(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId"),
               (kind: ConstantSegment, value: "/files")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsFilesList_583077(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists files for a report.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the parent report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583079 = path.getOrDefault("profileId")
  valid_583079 = validateParameter(valid_583079, JString, required = true,
                                 default = nil)
  if valid_583079 != nil:
    section.add "profileId", valid_583079
  var valid_583080 = path.getOrDefault("reportId")
  valid_583080 = validateParameter(valid_583080, JString, required = true,
                                 default = nil)
  if valid_583080 != nil:
    section.add "reportId", valid_583080
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : The field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583081 = query.getOrDefault("fields")
  valid_583081 = validateParameter(valid_583081, JString, required = false,
                                 default = nil)
  if valid_583081 != nil:
    section.add "fields", valid_583081
  var valid_583082 = query.getOrDefault("pageToken")
  valid_583082 = validateParameter(valid_583082, JString, required = false,
                                 default = nil)
  if valid_583082 != nil:
    section.add "pageToken", valid_583082
  var valid_583083 = query.getOrDefault("quotaUser")
  valid_583083 = validateParameter(valid_583083, JString, required = false,
                                 default = nil)
  if valid_583083 != nil:
    section.add "quotaUser", valid_583083
  var valid_583084 = query.getOrDefault("sortField")
  valid_583084 = validateParameter(valid_583084, JString, required = false,
                                 default = newJString("LAST_MODIFIED_TIME"))
  if valid_583084 != nil:
    section.add "sortField", valid_583084
  var valid_583085 = query.getOrDefault("alt")
  valid_583085 = validateParameter(valid_583085, JString, required = false,
                                 default = newJString("json"))
  if valid_583085 != nil:
    section.add "alt", valid_583085
  var valid_583086 = query.getOrDefault("oauth_token")
  valid_583086 = validateParameter(valid_583086, JString, required = false,
                                 default = nil)
  if valid_583086 != nil:
    section.add "oauth_token", valid_583086
  var valid_583087 = query.getOrDefault("userIp")
  valid_583087 = validateParameter(valid_583087, JString, required = false,
                                 default = nil)
  if valid_583087 != nil:
    section.add "userIp", valid_583087
  var valid_583088 = query.getOrDefault("maxResults")
  valid_583088 = validateParameter(valid_583088, JInt, required = false,
                                 default = newJInt(10))
  if valid_583088 != nil:
    section.add "maxResults", valid_583088
  var valid_583089 = query.getOrDefault("key")
  valid_583089 = validateParameter(valid_583089, JString, required = false,
                                 default = nil)
  if valid_583089 != nil:
    section.add "key", valid_583089
  var valid_583090 = query.getOrDefault("sortOrder")
  valid_583090 = validateParameter(valid_583090, JString, required = false,
                                 default = newJString("DESCENDING"))
  if valid_583090 != nil:
    section.add "sortOrder", valid_583090
  var valid_583091 = query.getOrDefault("prettyPrint")
  valid_583091 = validateParameter(valid_583091, JBool, required = false,
                                 default = newJBool(true))
  if valid_583091 != nil:
    section.add "prettyPrint", valid_583091
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583092: Call_DfareportingReportsFilesList_583076; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists files for a report.
  ## 
  let valid = call_583092.validator(path, query, header, formData, body)
  let scheme = call_583092.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583092.url(scheme.get, call_583092.host, call_583092.base,
                         call_583092.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583092, url, valid)

proc call*(call_583093: Call_DfareportingReportsFilesList_583076;
          profileId: string; reportId: string; fields: string = "";
          pageToken: string = ""; quotaUser: string = "";
          sortField: string = "LAST_MODIFIED_TIME"; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; maxResults: int = 10;
          key: string = ""; sortOrder: string = "DESCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsFilesList
  ## Lists files for a report.
  ##   profileId: string (required)
  ##            : The DFA profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : The field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   reportId: string (required)
  ##           : The ID of the parent report.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583094 = newJObject()
  var query_583095 = newJObject()
  add(path_583094, "profileId", newJString(profileId))
  add(query_583095, "fields", newJString(fields))
  add(query_583095, "pageToken", newJString(pageToken))
  add(query_583095, "quotaUser", newJString(quotaUser))
  add(query_583095, "sortField", newJString(sortField))
  add(query_583095, "alt", newJString(alt))
  add(query_583095, "oauth_token", newJString(oauthToken))
  add(query_583095, "userIp", newJString(userIp))
  add(query_583095, "maxResults", newJInt(maxResults))
  add(query_583095, "key", newJString(key))
  add(query_583095, "sortOrder", newJString(sortOrder))
  add(path_583094, "reportId", newJString(reportId))
  add(query_583095, "prettyPrint", newJBool(prettyPrint))
  result = call_583093.call(path_583094, query_583095, nil, nil, nil)

var dfareportingReportsFilesList* = Call_DfareportingReportsFilesList_583076(
    name: "dfareportingReportsFilesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}/files",
    validator: validate_DfareportingReportsFilesList_583077,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsFilesList_583078,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsFilesGet_583096 = ref object of OpenApiRestCall_579437
proc url_DfareportingReportsFilesGet_583098(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  assert "fileId" in path, "`fileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId"),
               (kind: ConstantSegment, value: "/files/"),
               (kind: VariableSegment, value: "fileId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsFilesGet_583097(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a report file. This method supports media download.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA profile ID.
  ##   fileId: JString (required)
  ##         : The ID of the report file.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583099 = path.getOrDefault("profileId")
  valid_583099 = validateParameter(valid_583099, JString, required = true,
                                 default = nil)
  if valid_583099 != nil:
    section.add "profileId", valid_583099
  var valid_583100 = path.getOrDefault("fileId")
  valid_583100 = validateParameter(valid_583100, JString, required = true,
                                 default = nil)
  if valid_583100 != nil:
    section.add "fileId", valid_583100
  var valid_583101 = path.getOrDefault("reportId")
  valid_583101 = validateParameter(valid_583101, JString, required = true,
                                 default = nil)
  if valid_583101 != nil:
    section.add "reportId", valid_583101
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583102 = query.getOrDefault("fields")
  valid_583102 = validateParameter(valid_583102, JString, required = false,
                                 default = nil)
  if valid_583102 != nil:
    section.add "fields", valid_583102
  var valid_583103 = query.getOrDefault("quotaUser")
  valid_583103 = validateParameter(valid_583103, JString, required = false,
                                 default = nil)
  if valid_583103 != nil:
    section.add "quotaUser", valid_583103
  var valid_583104 = query.getOrDefault("alt")
  valid_583104 = validateParameter(valid_583104, JString, required = false,
                                 default = newJString("json"))
  if valid_583104 != nil:
    section.add "alt", valid_583104
  var valid_583105 = query.getOrDefault("oauth_token")
  valid_583105 = validateParameter(valid_583105, JString, required = false,
                                 default = nil)
  if valid_583105 != nil:
    section.add "oauth_token", valid_583105
  var valid_583106 = query.getOrDefault("userIp")
  valid_583106 = validateParameter(valid_583106, JString, required = false,
                                 default = nil)
  if valid_583106 != nil:
    section.add "userIp", valid_583106
  var valid_583107 = query.getOrDefault("key")
  valid_583107 = validateParameter(valid_583107, JString, required = false,
                                 default = nil)
  if valid_583107 != nil:
    section.add "key", valid_583107
  var valid_583108 = query.getOrDefault("prettyPrint")
  valid_583108 = validateParameter(valid_583108, JBool, required = false,
                                 default = newJBool(true))
  if valid_583108 != nil:
    section.add "prettyPrint", valid_583108
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583109: Call_DfareportingReportsFilesGet_583096; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a report file. This method supports media download.
  ## 
  let valid = call_583109.validator(path, query, header, formData, body)
  let scheme = call_583109.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583109.url(scheme.get, call_583109.host, call_583109.base,
                         call_583109.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583109, url, valid)

proc call*(call_583110: Call_DfareportingReportsFilesGet_583096; profileId: string;
          fileId: string; reportId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsFilesGet
  ## Retrieves a report file. This method supports media download.
  ##   profileId: string (required)
  ##            : The DFA profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fileId: string (required)
  ##         : The ID of the report file.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583111 = newJObject()
  var query_583112 = newJObject()
  add(path_583111, "profileId", newJString(profileId))
  add(query_583112, "fields", newJString(fields))
  add(query_583112, "quotaUser", newJString(quotaUser))
  add(path_583111, "fileId", newJString(fileId))
  add(query_583112, "alt", newJString(alt))
  add(query_583112, "oauth_token", newJString(oauthToken))
  add(query_583112, "userIp", newJString(userIp))
  add(query_583112, "key", newJString(key))
  add(path_583111, "reportId", newJString(reportId))
  add(query_583112, "prettyPrint", newJBool(prettyPrint))
  result = call_583110.call(path_583111, query_583112, nil, nil, nil)

var dfareportingReportsFilesGet* = Call_DfareportingReportsFilesGet_583096(
    name: "dfareportingReportsFilesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}/files/{fileId}",
    validator: validate_DfareportingReportsFilesGet_583097,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsFilesGet_583098,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsRun_583113 = ref object of OpenApiRestCall_579437
proc url_DfareportingReportsRun_583115(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId"),
               (kind: ConstantSegment, value: "/run")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsRun_583114(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Runs a report.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583116 = path.getOrDefault("profileId")
  valid_583116 = validateParameter(valid_583116, JString, required = true,
                                 default = nil)
  if valid_583116 != nil:
    section.add "profileId", valid_583116
  var valid_583117 = path.getOrDefault("reportId")
  valid_583117 = validateParameter(valid_583117, JString, required = true,
                                 default = nil)
  if valid_583117 != nil:
    section.add "reportId", valid_583117
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   synchronous: JBool
  ##              : If set and true, tries to run the report synchronously.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583118 = query.getOrDefault("fields")
  valid_583118 = validateParameter(valid_583118, JString, required = false,
                                 default = nil)
  if valid_583118 != nil:
    section.add "fields", valid_583118
  var valid_583119 = query.getOrDefault("quotaUser")
  valid_583119 = validateParameter(valid_583119, JString, required = false,
                                 default = nil)
  if valid_583119 != nil:
    section.add "quotaUser", valid_583119
  var valid_583120 = query.getOrDefault("alt")
  valid_583120 = validateParameter(valid_583120, JString, required = false,
                                 default = newJString("json"))
  if valid_583120 != nil:
    section.add "alt", valid_583120
  var valid_583121 = query.getOrDefault("oauth_token")
  valid_583121 = validateParameter(valid_583121, JString, required = false,
                                 default = nil)
  if valid_583121 != nil:
    section.add "oauth_token", valid_583121
  var valid_583122 = query.getOrDefault("userIp")
  valid_583122 = validateParameter(valid_583122, JString, required = false,
                                 default = nil)
  if valid_583122 != nil:
    section.add "userIp", valid_583122
  var valid_583123 = query.getOrDefault("synchronous")
  valid_583123 = validateParameter(valid_583123, JBool, required = false,
                                 default = newJBool(false))
  if valid_583123 != nil:
    section.add "synchronous", valid_583123
  var valid_583124 = query.getOrDefault("key")
  valid_583124 = validateParameter(valid_583124, JString, required = false,
                                 default = nil)
  if valid_583124 != nil:
    section.add "key", valid_583124
  var valid_583125 = query.getOrDefault("prettyPrint")
  valid_583125 = validateParameter(valid_583125, JBool, required = false,
                                 default = newJBool(true))
  if valid_583125 != nil:
    section.add "prettyPrint", valid_583125
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583126: Call_DfareportingReportsRun_583113; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Runs a report.
  ## 
  let valid = call_583126.validator(path, query, header, formData, body)
  let scheme = call_583126.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583126.url(scheme.get, call_583126.host, call_583126.base,
                         call_583126.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583126, url, valid)

proc call*(call_583127: Call_DfareportingReportsRun_583113; profileId: string;
          reportId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          synchronous: bool = false; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsRun
  ## Runs a report.
  ##   profileId: string (required)
  ##            : The DFA profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   synchronous: bool
  ##              : If set and true, tries to run the report synchronously.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583128 = newJObject()
  var query_583129 = newJObject()
  add(path_583128, "profileId", newJString(profileId))
  add(query_583129, "fields", newJString(fields))
  add(query_583129, "quotaUser", newJString(quotaUser))
  add(query_583129, "alt", newJString(alt))
  add(query_583129, "oauth_token", newJString(oauthToken))
  add(query_583129, "userIp", newJString(userIp))
  add(query_583129, "synchronous", newJBool(synchronous))
  add(query_583129, "key", newJString(key))
  add(path_583128, "reportId", newJString(reportId))
  add(query_583129, "prettyPrint", newJBool(prettyPrint))
  result = call_583127.call(path_583128, query_583129, nil, nil, nil)

var dfareportingReportsRun* = Call_DfareportingReportsRun_583113(
    name: "dfareportingReportsRun", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}/run",
    validator: validate_DfareportingReportsRun_583114, base: "/dfareporting/v3.2",
    url: url_DfareportingReportsRun_583115, schemes: {Scheme.Https})
type
  Call_DfareportingSitesUpdate_583160 = ref object of OpenApiRestCall_579437
proc url_DfareportingSitesUpdate_583162(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesUpdate_583161(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583163 = path.getOrDefault("profileId")
  valid_583163 = validateParameter(valid_583163, JString, required = true,
                                 default = nil)
  if valid_583163 != nil:
    section.add "profileId", valid_583163
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583164 = query.getOrDefault("fields")
  valid_583164 = validateParameter(valid_583164, JString, required = false,
                                 default = nil)
  if valid_583164 != nil:
    section.add "fields", valid_583164
  var valid_583165 = query.getOrDefault("quotaUser")
  valid_583165 = validateParameter(valid_583165, JString, required = false,
                                 default = nil)
  if valid_583165 != nil:
    section.add "quotaUser", valid_583165
  var valid_583166 = query.getOrDefault("alt")
  valid_583166 = validateParameter(valid_583166, JString, required = false,
                                 default = newJString("json"))
  if valid_583166 != nil:
    section.add "alt", valid_583166
  var valid_583167 = query.getOrDefault("oauth_token")
  valid_583167 = validateParameter(valid_583167, JString, required = false,
                                 default = nil)
  if valid_583167 != nil:
    section.add "oauth_token", valid_583167
  var valid_583168 = query.getOrDefault("userIp")
  valid_583168 = validateParameter(valid_583168, JString, required = false,
                                 default = nil)
  if valid_583168 != nil:
    section.add "userIp", valid_583168
  var valid_583169 = query.getOrDefault("key")
  valid_583169 = validateParameter(valid_583169, JString, required = false,
                                 default = nil)
  if valid_583169 != nil:
    section.add "key", valid_583169
  var valid_583170 = query.getOrDefault("prettyPrint")
  valid_583170 = validateParameter(valid_583170, JBool, required = false,
                                 default = newJBool(true))
  if valid_583170 != nil:
    section.add "prettyPrint", valid_583170
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_583172: Call_DfareportingSitesUpdate_583160; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing site.
  ## 
  let valid = call_583172.validator(path, query, header, formData, body)
  let scheme = call_583172.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583172.url(scheme.get, call_583172.host, call_583172.base,
                         call_583172.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583172, url, valid)

proc call*(call_583173: Call_DfareportingSitesUpdate_583160; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSitesUpdate
  ## Updates an existing site.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583174 = newJObject()
  var query_583175 = newJObject()
  var body_583176 = newJObject()
  add(path_583174, "profileId", newJString(profileId))
  add(query_583175, "fields", newJString(fields))
  add(query_583175, "quotaUser", newJString(quotaUser))
  add(query_583175, "alt", newJString(alt))
  add(query_583175, "oauth_token", newJString(oauthToken))
  add(query_583175, "userIp", newJString(userIp))
  add(query_583175, "key", newJString(key))
  if body != nil:
    body_583176 = body
  add(query_583175, "prettyPrint", newJBool(prettyPrint))
  result = call_583173.call(path_583174, query_583175, nil, nil, body_583176)

var dfareportingSitesUpdate* = Call_DfareportingSitesUpdate_583160(
    name: "dfareportingSitesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites",
    validator: validate_DfareportingSitesUpdate_583161,
    base: "/dfareporting/v3.2", url: url_DfareportingSitesUpdate_583162,
    schemes: {Scheme.Https})
type
  Call_DfareportingSitesInsert_583177 = ref object of OpenApiRestCall_579437
proc url_DfareportingSitesInsert_583179(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesInsert_583178(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583180 = path.getOrDefault("profileId")
  valid_583180 = validateParameter(valid_583180, JString, required = true,
                                 default = nil)
  if valid_583180 != nil:
    section.add "profileId", valid_583180
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583181 = query.getOrDefault("fields")
  valid_583181 = validateParameter(valid_583181, JString, required = false,
                                 default = nil)
  if valid_583181 != nil:
    section.add "fields", valid_583181
  var valid_583182 = query.getOrDefault("quotaUser")
  valid_583182 = validateParameter(valid_583182, JString, required = false,
                                 default = nil)
  if valid_583182 != nil:
    section.add "quotaUser", valid_583182
  var valid_583183 = query.getOrDefault("alt")
  valid_583183 = validateParameter(valid_583183, JString, required = false,
                                 default = newJString("json"))
  if valid_583183 != nil:
    section.add "alt", valid_583183
  var valid_583184 = query.getOrDefault("oauth_token")
  valid_583184 = validateParameter(valid_583184, JString, required = false,
                                 default = nil)
  if valid_583184 != nil:
    section.add "oauth_token", valid_583184
  var valid_583185 = query.getOrDefault("userIp")
  valid_583185 = validateParameter(valid_583185, JString, required = false,
                                 default = nil)
  if valid_583185 != nil:
    section.add "userIp", valid_583185
  var valid_583186 = query.getOrDefault("key")
  valid_583186 = validateParameter(valid_583186, JString, required = false,
                                 default = nil)
  if valid_583186 != nil:
    section.add "key", valid_583186
  var valid_583187 = query.getOrDefault("prettyPrint")
  valid_583187 = validateParameter(valid_583187, JBool, required = false,
                                 default = newJBool(true))
  if valid_583187 != nil:
    section.add "prettyPrint", valid_583187
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_583189: Call_DfareportingSitesInsert_583177; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new site.
  ## 
  let valid = call_583189.validator(path, query, header, formData, body)
  let scheme = call_583189.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583189.url(scheme.get, call_583189.host, call_583189.base,
                         call_583189.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583189, url, valid)

proc call*(call_583190: Call_DfareportingSitesInsert_583177; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSitesInsert
  ## Inserts a new site.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583191 = newJObject()
  var query_583192 = newJObject()
  var body_583193 = newJObject()
  add(path_583191, "profileId", newJString(profileId))
  add(query_583192, "fields", newJString(fields))
  add(query_583192, "quotaUser", newJString(quotaUser))
  add(query_583192, "alt", newJString(alt))
  add(query_583192, "oauth_token", newJString(oauthToken))
  add(query_583192, "userIp", newJString(userIp))
  add(query_583192, "key", newJString(key))
  if body != nil:
    body_583193 = body
  add(query_583192, "prettyPrint", newJBool(prettyPrint))
  result = call_583190.call(path_583191, query_583192, nil, nil, body_583193)

var dfareportingSitesInsert* = Call_DfareportingSitesInsert_583177(
    name: "dfareportingSitesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites",
    validator: validate_DfareportingSitesInsert_583178,
    base: "/dfareporting/v3.2", url: url_DfareportingSitesInsert_583179,
    schemes: {Scheme.Https})
type
  Call_DfareportingSitesList_583130 = ref object of OpenApiRestCall_579437
proc url_DfareportingSitesList_583132(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesList_583131(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of sites, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583133 = path.getOrDefault("profileId")
  valid_583133 = validateParameter(valid_583133, JString, required = true,
                                 default = nil)
  if valid_583133 != nil:
    section.add "profileId", valid_583133
  result.add "path", section
  ## parameters in `query` object:
  ##   subaccountId: JString
  ##               : Select only sites with this subaccount ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name, ID or keyName. Wildcards (*) are allowed. For example, "site*2015" will return objects with names like "site June 2015", "site April 2015", or simply "site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "site" will match objects with name "my site", "site 2015", or simply "site".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   campaignIds: JArray
  ##              : Select only sites with these campaign IDs.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only sites with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   acceptsInterstitialPlacements: JBool
  ##                                : This search filter is no longer supported and will have no effect on the results returned.
  ##   acceptsInStreamVideoPlacements: JBool
  ##                                 : This search filter is no longer supported and will have no effect on the results returned.
  ##   adWordsSite: JBool
  ##              : Select only AdWords sites.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   approved: JBool
  ##           : Select only approved sites.
  ##   unmappedSite: JBool
  ##               : Select only sites that have not been mapped to a directory site.
  ##   acceptsPublisherPaidPlacements: JBool
  ##                                 : Select only sites that accept publisher paid placements.
  ##   directorySiteIds: JArray
  ##                   : Select only sites with these directory site IDs.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583134 = query.getOrDefault("subaccountId")
  valid_583134 = validateParameter(valid_583134, JString, required = false,
                                 default = nil)
  if valid_583134 != nil:
    section.add "subaccountId", valid_583134
  var valid_583135 = query.getOrDefault("fields")
  valid_583135 = validateParameter(valid_583135, JString, required = false,
                                 default = nil)
  if valid_583135 != nil:
    section.add "fields", valid_583135
  var valid_583136 = query.getOrDefault("pageToken")
  valid_583136 = validateParameter(valid_583136, JString, required = false,
                                 default = nil)
  if valid_583136 != nil:
    section.add "pageToken", valid_583136
  var valid_583137 = query.getOrDefault("quotaUser")
  valid_583137 = validateParameter(valid_583137, JString, required = false,
                                 default = nil)
  if valid_583137 != nil:
    section.add "quotaUser", valid_583137
  var valid_583138 = query.getOrDefault("sortField")
  valid_583138 = validateParameter(valid_583138, JString, required = false,
                                 default = newJString("ID"))
  if valid_583138 != nil:
    section.add "sortField", valid_583138
  var valid_583139 = query.getOrDefault("alt")
  valid_583139 = validateParameter(valid_583139, JString, required = false,
                                 default = newJString("json"))
  if valid_583139 != nil:
    section.add "alt", valid_583139
  var valid_583140 = query.getOrDefault("searchString")
  valid_583140 = validateParameter(valid_583140, JString, required = false,
                                 default = nil)
  if valid_583140 != nil:
    section.add "searchString", valid_583140
  var valid_583141 = query.getOrDefault("oauth_token")
  valid_583141 = validateParameter(valid_583141, JString, required = false,
                                 default = nil)
  if valid_583141 != nil:
    section.add "oauth_token", valid_583141
  var valid_583142 = query.getOrDefault("campaignIds")
  valid_583142 = validateParameter(valid_583142, JArray, required = false,
                                 default = nil)
  if valid_583142 != nil:
    section.add "campaignIds", valid_583142
  var valid_583143 = query.getOrDefault("userIp")
  valid_583143 = validateParameter(valid_583143, JString, required = false,
                                 default = nil)
  if valid_583143 != nil:
    section.add "userIp", valid_583143
  var valid_583144 = query.getOrDefault("maxResults")
  valid_583144 = validateParameter(valid_583144, JInt, required = false,
                                 default = newJInt(1000))
  if valid_583144 != nil:
    section.add "maxResults", valid_583144
  var valid_583145 = query.getOrDefault("ids")
  valid_583145 = validateParameter(valid_583145, JArray, required = false,
                                 default = nil)
  if valid_583145 != nil:
    section.add "ids", valid_583145
  var valid_583146 = query.getOrDefault("key")
  valid_583146 = validateParameter(valid_583146, JString, required = false,
                                 default = nil)
  if valid_583146 != nil:
    section.add "key", valid_583146
  var valid_583147 = query.getOrDefault("acceptsInterstitialPlacements")
  valid_583147 = validateParameter(valid_583147, JBool, required = false, default = nil)
  if valid_583147 != nil:
    section.add "acceptsInterstitialPlacements", valid_583147
  var valid_583148 = query.getOrDefault("acceptsInStreamVideoPlacements")
  valid_583148 = validateParameter(valid_583148, JBool, required = false, default = nil)
  if valid_583148 != nil:
    section.add "acceptsInStreamVideoPlacements", valid_583148
  var valid_583149 = query.getOrDefault("adWordsSite")
  valid_583149 = validateParameter(valid_583149, JBool, required = false, default = nil)
  if valid_583149 != nil:
    section.add "adWordsSite", valid_583149
  var valid_583150 = query.getOrDefault("sortOrder")
  valid_583150 = validateParameter(valid_583150, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_583150 != nil:
    section.add "sortOrder", valid_583150
  var valid_583151 = query.getOrDefault("approved")
  valid_583151 = validateParameter(valid_583151, JBool, required = false, default = nil)
  if valid_583151 != nil:
    section.add "approved", valid_583151
  var valid_583152 = query.getOrDefault("unmappedSite")
  valid_583152 = validateParameter(valid_583152, JBool, required = false, default = nil)
  if valid_583152 != nil:
    section.add "unmappedSite", valid_583152
  var valid_583153 = query.getOrDefault("acceptsPublisherPaidPlacements")
  valid_583153 = validateParameter(valid_583153, JBool, required = false, default = nil)
  if valid_583153 != nil:
    section.add "acceptsPublisherPaidPlacements", valid_583153
  var valid_583154 = query.getOrDefault("directorySiteIds")
  valid_583154 = validateParameter(valid_583154, JArray, required = false,
                                 default = nil)
  if valid_583154 != nil:
    section.add "directorySiteIds", valid_583154
  var valid_583155 = query.getOrDefault("prettyPrint")
  valid_583155 = validateParameter(valid_583155, JBool, required = false,
                                 default = newJBool(true))
  if valid_583155 != nil:
    section.add "prettyPrint", valid_583155
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583156: Call_DfareportingSitesList_583130; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of sites, possibly filtered. This method supports paging.
  ## 
  let valid = call_583156.validator(path, query, header, formData, body)
  let scheme = call_583156.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583156.url(scheme.get, call_583156.host, call_583156.base,
                         call_583156.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583156, url, valid)

proc call*(call_583157: Call_DfareportingSitesList_583130; profileId: string;
          subaccountId: string = ""; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = "";
          campaignIds: JsonNode = nil; userIp: string = ""; maxResults: int = 1000;
          ids: JsonNode = nil; key: string = "";
          acceptsInterstitialPlacements: bool = false;
          acceptsInStreamVideoPlacements: bool = false; adWordsSite: bool = false;
          sortOrder: string = "ASCENDING"; approved: bool = false;
          unmappedSite: bool = false; acceptsPublisherPaidPlacements: bool = false;
          directorySiteIds: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSitesList
  ## Retrieves a list of sites, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   subaccountId: string
  ##               : Select only sites with this subaccount ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name, ID or keyName. Wildcards (*) are allowed. For example, "site*2015" will return objects with names like "site June 2015", "site April 2015", or simply "site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "site" will match objects with name "my site", "site 2015", or simply "site".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   campaignIds: JArray
  ##              : Select only sites with these campaign IDs.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only sites with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   acceptsInterstitialPlacements: bool
  ##                                : This search filter is no longer supported and will have no effect on the results returned.
  ##   acceptsInStreamVideoPlacements: bool
  ##                                 : This search filter is no longer supported and will have no effect on the results returned.
  ##   adWordsSite: bool
  ##              : Select only AdWords sites.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   approved: bool
  ##           : Select only approved sites.
  ##   unmappedSite: bool
  ##               : Select only sites that have not been mapped to a directory site.
  ##   acceptsPublisherPaidPlacements: bool
  ##                                 : Select only sites that accept publisher paid placements.
  ##   directorySiteIds: JArray
  ##                   : Select only sites with these directory site IDs.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583158 = newJObject()
  var query_583159 = newJObject()
  add(path_583158, "profileId", newJString(profileId))
  add(query_583159, "subaccountId", newJString(subaccountId))
  add(query_583159, "fields", newJString(fields))
  add(query_583159, "pageToken", newJString(pageToken))
  add(query_583159, "quotaUser", newJString(quotaUser))
  add(query_583159, "sortField", newJString(sortField))
  add(query_583159, "alt", newJString(alt))
  add(query_583159, "searchString", newJString(searchString))
  add(query_583159, "oauth_token", newJString(oauthToken))
  if campaignIds != nil:
    query_583159.add "campaignIds", campaignIds
  add(query_583159, "userIp", newJString(userIp))
  add(query_583159, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_583159.add "ids", ids
  add(query_583159, "key", newJString(key))
  add(query_583159, "acceptsInterstitialPlacements",
      newJBool(acceptsInterstitialPlacements))
  add(query_583159, "acceptsInStreamVideoPlacements",
      newJBool(acceptsInStreamVideoPlacements))
  add(query_583159, "adWordsSite", newJBool(adWordsSite))
  add(query_583159, "sortOrder", newJString(sortOrder))
  add(query_583159, "approved", newJBool(approved))
  add(query_583159, "unmappedSite", newJBool(unmappedSite))
  add(query_583159, "acceptsPublisherPaidPlacements",
      newJBool(acceptsPublisherPaidPlacements))
  if directorySiteIds != nil:
    query_583159.add "directorySiteIds", directorySiteIds
  add(query_583159, "prettyPrint", newJBool(prettyPrint))
  result = call_583157.call(path_583158, query_583159, nil, nil, nil)

var dfareportingSitesList* = Call_DfareportingSitesList_583130(
    name: "dfareportingSitesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites",
    validator: validate_DfareportingSitesList_583131, base: "/dfareporting/v3.2",
    url: url_DfareportingSitesList_583132, schemes: {Scheme.Https})
type
  Call_DfareportingSitesPatch_583194 = ref object of OpenApiRestCall_579437
proc url_DfareportingSitesPatch_583196(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesPatch_583195(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing site. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583197 = path.getOrDefault("profileId")
  valid_583197 = validateParameter(valid_583197, JString, required = true,
                                 default = nil)
  if valid_583197 != nil:
    section.add "profileId", valid_583197
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Site ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583198 = query.getOrDefault("fields")
  valid_583198 = validateParameter(valid_583198, JString, required = false,
                                 default = nil)
  if valid_583198 != nil:
    section.add "fields", valid_583198
  var valid_583199 = query.getOrDefault("quotaUser")
  valid_583199 = validateParameter(valid_583199, JString, required = false,
                                 default = nil)
  if valid_583199 != nil:
    section.add "quotaUser", valid_583199
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_583200 = query.getOrDefault("id")
  valid_583200 = validateParameter(valid_583200, JString, required = true,
                                 default = nil)
  if valid_583200 != nil:
    section.add "id", valid_583200
  var valid_583201 = query.getOrDefault("alt")
  valid_583201 = validateParameter(valid_583201, JString, required = false,
                                 default = newJString("json"))
  if valid_583201 != nil:
    section.add "alt", valid_583201
  var valid_583202 = query.getOrDefault("oauth_token")
  valid_583202 = validateParameter(valid_583202, JString, required = false,
                                 default = nil)
  if valid_583202 != nil:
    section.add "oauth_token", valid_583202
  var valid_583203 = query.getOrDefault("userIp")
  valid_583203 = validateParameter(valid_583203, JString, required = false,
                                 default = nil)
  if valid_583203 != nil:
    section.add "userIp", valid_583203
  var valid_583204 = query.getOrDefault("key")
  valid_583204 = validateParameter(valid_583204, JString, required = false,
                                 default = nil)
  if valid_583204 != nil:
    section.add "key", valid_583204
  var valid_583205 = query.getOrDefault("prettyPrint")
  valid_583205 = validateParameter(valid_583205, JBool, required = false,
                                 default = newJBool(true))
  if valid_583205 != nil:
    section.add "prettyPrint", valid_583205
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_583207: Call_DfareportingSitesPatch_583194; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing site. This method supports patch semantics.
  ## 
  let valid = call_583207.validator(path, query, header, formData, body)
  let scheme = call_583207.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583207.url(scheme.get, call_583207.host, call_583207.base,
                         call_583207.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583207, url, valid)

proc call*(call_583208: Call_DfareportingSitesPatch_583194; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSitesPatch
  ## Updates an existing site. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Site ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583209 = newJObject()
  var query_583210 = newJObject()
  var body_583211 = newJObject()
  add(path_583209, "profileId", newJString(profileId))
  add(query_583210, "fields", newJString(fields))
  add(query_583210, "quotaUser", newJString(quotaUser))
  add(query_583210, "id", newJString(id))
  add(query_583210, "alt", newJString(alt))
  add(query_583210, "oauth_token", newJString(oauthToken))
  add(query_583210, "userIp", newJString(userIp))
  add(query_583210, "key", newJString(key))
  if body != nil:
    body_583211 = body
  add(query_583210, "prettyPrint", newJBool(prettyPrint))
  result = call_583208.call(path_583209, query_583210, nil, nil, body_583211)

var dfareportingSitesPatch* = Call_DfareportingSitesPatch_583194(
    name: "dfareportingSitesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites",
    validator: validate_DfareportingSitesPatch_583195, base: "/dfareporting/v3.2",
    url: url_DfareportingSitesPatch_583196, schemes: {Scheme.Https})
type
  Call_DfareportingSitesGet_583212 = ref object of OpenApiRestCall_579437
proc url_DfareportingSitesGet_583214(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesGet_583213(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one site by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Site ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583215 = path.getOrDefault("profileId")
  valid_583215 = validateParameter(valid_583215, JString, required = true,
                                 default = nil)
  if valid_583215 != nil:
    section.add "profileId", valid_583215
  var valid_583216 = path.getOrDefault("id")
  valid_583216 = validateParameter(valid_583216, JString, required = true,
                                 default = nil)
  if valid_583216 != nil:
    section.add "id", valid_583216
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583217 = query.getOrDefault("fields")
  valid_583217 = validateParameter(valid_583217, JString, required = false,
                                 default = nil)
  if valid_583217 != nil:
    section.add "fields", valid_583217
  var valid_583218 = query.getOrDefault("quotaUser")
  valid_583218 = validateParameter(valid_583218, JString, required = false,
                                 default = nil)
  if valid_583218 != nil:
    section.add "quotaUser", valid_583218
  var valid_583219 = query.getOrDefault("alt")
  valid_583219 = validateParameter(valid_583219, JString, required = false,
                                 default = newJString("json"))
  if valid_583219 != nil:
    section.add "alt", valid_583219
  var valid_583220 = query.getOrDefault("oauth_token")
  valid_583220 = validateParameter(valid_583220, JString, required = false,
                                 default = nil)
  if valid_583220 != nil:
    section.add "oauth_token", valid_583220
  var valid_583221 = query.getOrDefault("userIp")
  valid_583221 = validateParameter(valid_583221, JString, required = false,
                                 default = nil)
  if valid_583221 != nil:
    section.add "userIp", valid_583221
  var valid_583222 = query.getOrDefault("key")
  valid_583222 = validateParameter(valid_583222, JString, required = false,
                                 default = nil)
  if valid_583222 != nil:
    section.add "key", valid_583222
  var valid_583223 = query.getOrDefault("prettyPrint")
  valid_583223 = validateParameter(valid_583223, JBool, required = false,
                                 default = newJBool(true))
  if valid_583223 != nil:
    section.add "prettyPrint", valid_583223
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583224: Call_DfareportingSitesGet_583212; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one site by ID.
  ## 
  let valid = call_583224.validator(path, query, header, formData, body)
  let scheme = call_583224.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583224.url(scheme.get, call_583224.host, call_583224.base,
                         call_583224.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583224, url, valid)

proc call*(call_583225: Call_DfareportingSitesGet_583212; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingSitesGet
  ## Gets one site by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Site ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583226 = newJObject()
  var query_583227 = newJObject()
  add(path_583226, "profileId", newJString(profileId))
  add(query_583227, "fields", newJString(fields))
  add(query_583227, "quotaUser", newJString(quotaUser))
  add(query_583227, "alt", newJString(alt))
  add(query_583227, "oauth_token", newJString(oauthToken))
  add(query_583227, "userIp", newJString(userIp))
  add(path_583226, "id", newJString(id))
  add(query_583227, "key", newJString(key))
  add(query_583227, "prettyPrint", newJBool(prettyPrint))
  result = call_583225.call(path_583226, query_583227, nil, nil, nil)

var dfareportingSitesGet* = Call_DfareportingSitesGet_583212(
    name: "dfareportingSitesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites/{id}",
    validator: validate_DfareportingSitesGet_583213, base: "/dfareporting/v3.2",
    url: url_DfareportingSitesGet_583214, schemes: {Scheme.Https})
type
  Call_DfareportingSizesInsert_583247 = ref object of OpenApiRestCall_579437
proc url_DfareportingSizesInsert_583249(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sizes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSizesInsert_583248(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new size.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583250 = path.getOrDefault("profileId")
  valid_583250 = validateParameter(valid_583250, JString, required = true,
                                 default = nil)
  if valid_583250 != nil:
    section.add "profileId", valid_583250
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583251 = query.getOrDefault("fields")
  valid_583251 = validateParameter(valid_583251, JString, required = false,
                                 default = nil)
  if valid_583251 != nil:
    section.add "fields", valid_583251
  var valid_583252 = query.getOrDefault("quotaUser")
  valid_583252 = validateParameter(valid_583252, JString, required = false,
                                 default = nil)
  if valid_583252 != nil:
    section.add "quotaUser", valid_583252
  var valid_583253 = query.getOrDefault("alt")
  valid_583253 = validateParameter(valid_583253, JString, required = false,
                                 default = newJString("json"))
  if valid_583253 != nil:
    section.add "alt", valid_583253
  var valid_583254 = query.getOrDefault("oauth_token")
  valid_583254 = validateParameter(valid_583254, JString, required = false,
                                 default = nil)
  if valid_583254 != nil:
    section.add "oauth_token", valid_583254
  var valid_583255 = query.getOrDefault("userIp")
  valid_583255 = validateParameter(valid_583255, JString, required = false,
                                 default = nil)
  if valid_583255 != nil:
    section.add "userIp", valid_583255
  var valid_583256 = query.getOrDefault("key")
  valid_583256 = validateParameter(valid_583256, JString, required = false,
                                 default = nil)
  if valid_583256 != nil:
    section.add "key", valid_583256
  var valid_583257 = query.getOrDefault("prettyPrint")
  valid_583257 = validateParameter(valid_583257, JBool, required = false,
                                 default = newJBool(true))
  if valid_583257 != nil:
    section.add "prettyPrint", valid_583257
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_583259: Call_DfareportingSizesInsert_583247; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new size.
  ## 
  let valid = call_583259.validator(path, query, header, formData, body)
  let scheme = call_583259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583259.url(scheme.get, call_583259.host, call_583259.base,
                         call_583259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583259, url, valid)

proc call*(call_583260: Call_DfareportingSizesInsert_583247; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSizesInsert
  ## Inserts a new size.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583261 = newJObject()
  var query_583262 = newJObject()
  var body_583263 = newJObject()
  add(path_583261, "profileId", newJString(profileId))
  add(query_583262, "fields", newJString(fields))
  add(query_583262, "quotaUser", newJString(quotaUser))
  add(query_583262, "alt", newJString(alt))
  add(query_583262, "oauth_token", newJString(oauthToken))
  add(query_583262, "userIp", newJString(userIp))
  add(query_583262, "key", newJString(key))
  if body != nil:
    body_583263 = body
  add(query_583262, "prettyPrint", newJBool(prettyPrint))
  result = call_583260.call(path_583261, query_583262, nil, nil, body_583263)

var dfareportingSizesInsert* = Call_DfareportingSizesInsert_583247(
    name: "dfareportingSizesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sizes",
    validator: validate_DfareportingSizesInsert_583248,
    base: "/dfareporting/v3.2", url: url_DfareportingSizesInsert_583249,
    schemes: {Scheme.Https})
type
  Call_DfareportingSizesList_583228 = ref object of OpenApiRestCall_579437
proc url_DfareportingSizesList_583230(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sizes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSizesList_583229(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of sizes, possibly filtered. Retrieved sizes are globally unique and may include values not currently in use by your account. Due to this, the list of sizes returned by this method may differ from the list seen in the Trafficking UI.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583231 = path.getOrDefault("profileId")
  valid_583231 = validateParameter(valid_583231, JString, required = true,
                                 default = nil)
  if valid_583231 != nil:
    section.add "profileId", valid_583231
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   height: JInt
  ##         : Select only sizes with this height.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   ids: JArray
  ##      : Select only sizes with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   iabStandard: JBool
  ##              : Select only IAB standard sizes.
  ##   width: JInt
  ##        : Select only sizes with this width.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583232 = query.getOrDefault("fields")
  valid_583232 = validateParameter(valid_583232, JString, required = false,
                                 default = nil)
  if valid_583232 != nil:
    section.add "fields", valid_583232
  var valid_583233 = query.getOrDefault("quotaUser")
  valid_583233 = validateParameter(valid_583233, JString, required = false,
                                 default = nil)
  if valid_583233 != nil:
    section.add "quotaUser", valid_583233
  var valid_583234 = query.getOrDefault("alt")
  valid_583234 = validateParameter(valid_583234, JString, required = false,
                                 default = newJString("json"))
  if valid_583234 != nil:
    section.add "alt", valid_583234
  var valid_583235 = query.getOrDefault("oauth_token")
  valid_583235 = validateParameter(valid_583235, JString, required = false,
                                 default = nil)
  if valid_583235 != nil:
    section.add "oauth_token", valid_583235
  var valid_583236 = query.getOrDefault("height")
  valid_583236 = validateParameter(valid_583236, JInt, required = false, default = nil)
  if valid_583236 != nil:
    section.add "height", valid_583236
  var valid_583237 = query.getOrDefault("userIp")
  valid_583237 = validateParameter(valid_583237, JString, required = false,
                                 default = nil)
  if valid_583237 != nil:
    section.add "userIp", valid_583237
  var valid_583238 = query.getOrDefault("ids")
  valid_583238 = validateParameter(valid_583238, JArray, required = false,
                                 default = nil)
  if valid_583238 != nil:
    section.add "ids", valid_583238
  var valid_583239 = query.getOrDefault("key")
  valid_583239 = validateParameter(valid_583239, JString, required = false,
                                 default = nil)
  if valid_583239 != nil:
    section.add "key", valid_583239
  var valid_583240 = query.getOrDefault("iabStandard")
  valid_583240 = validateParameter(valid_583240, JBool, required = false, default = nil)
  if valid_583240 != nil:
    section.add "iabStandard", valid_583240
  var valid_583241 = query.getOrDefault("width")
  valid_583241 = validateParameter(valid_583241, JInt, required = false, default = nil)
  if valid_583241 != nil:
    section.add "width", valid_583241
  var valid_583242 = query.getOrDefault("prettyPrint")
  valid_583242 = validateParameter(valid_583242, JBool, required = false,
                                 default = newJBool(true))
  if valid_583242 != nil:
    section.add "prettyPrint", valid_583242
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583243: Call_DfareportingSizesList_583228; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of sizes, possibly filtered. Retrieved sizes are globally unique and may include values not currently in use by your account. Due to this, the list of sizes returned by this method may differ from the list seen in the Trafficking UI.
  ## 
  let valid = call_583243.validator(path, query, header, formData, body)
  let scheme = call_583243.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583243.url(scheme.get, call_583243.host, call_583243.base,
                         call_583243.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583243, url, valid)

proc call*(call_583244: Call_DfareportingSizesList_583228; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; height: int = 0; userIp: string = "";
          ids: JsonNode = nil; key: string = ""; iabStandard: bool = false; width: int = 0;
          prettyPrint: bool = true): Recallable =
  ## dfareportingSizesList
  ## Retrieves a list of sizes, possibly filtered. Retrieved sizes are globally unique and may include values not currently in use by your account. Due to this, the list of sizes returned by this method may differ from the list seen in the Trafficking UI.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   height: int
  ##         : Select only sizes with this height.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   ids: JArray
  ##      : Select only sizes with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   iabStandard: bool
  ##              : Select only IAB standard sizes.
  ##   width: int
  ##        : Select only sizes with this width.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583245 = newJObject()
  var query_583246 = newJObject()
  add(path_583245, "profileId", newJString(profileId))
  add(query_583246, "fields", newJString(fields))
  add(query_583246, "quotaUser", newJString(quotaUser))
  add(query_583246, "alt", newJString(alt))
  add(query_583246, "oauth_token", newJString(oauthToken))
  add(query_583246, "height", newJInt(height))
  add(query_583246, "userIp", newJString(userIp))
  if ids != nil:
    query_583246.add "ids", ids
  add(query_583246, "key", newJString(key))
  add(query_583246, "iabStandard", newJBool(iabStandard))
  add(query_583246, "width", newJInt(width))
  add(query_583246, "prettyPrint", newJBool(prettyPrint))
  result = call_583244.call(path_583245, query_583246, nil, nil, nil)

var dfareportingSizesList* = Call_DfareportingSizesList_583228(
    name: "dfareportingSizesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sizes",
    validator: validate_DfareportingSizesList_583229, base: "/dfareporting/v3.2",
    url: url_DfareportingSizesList_583230, schemes: {Scheme.Https})
type
  Call_DfareportingSizesGet_583264 = ref object of OpenApiRestCall_579437
proc url_DfareportingSizesGet_583266(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sizes/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSizesGet_583265(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one size by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Size ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583267 = path.getOrDefault("profileId")
  valid_583267 = validateParameter(valid_583267, JString, required = true,
                                 default = nil)
  if valid_583267 != nil:
    section.add "profileId", valid_583267
  var valid_583268 = path.getOrDefault("id")
  valid_583268 = validateParameter(valid_583268, JString, required = true,
                                 default = nil)
  if valid_583268 != nil:
    section.add "id", valid_583268
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583269 = query.getOrDefault("fields")
  valid_583269 = validateParameter(valid_583269, JString, required = false,
                                 default = nil)
  if valid_583269 != nil:
    section.add "fields", valid_583269
  var valid_583270 = query.getOrDefault("quotaUser")
  valid_583270 = validateParameter(valid_583270, JString, required = false,
                                 default = nil)
  if valid_583270 != nil:
    section.add "quotaUser", valid_583270
  var valid_583271 = query.getOrDefault("alt")
  valid_583271 = validateParameter(valid_583271, JString, required = false,
                                 default = newJString("json"))
  if valid_583271 != nil:
    section.add "alt", valid_583271
  var valid_583272 = query.getOrDefault("oauth_token")
  valid_583272 = validateParameter(valid_583272, JString, required = false,
                                 default = nil)
  if valid_583272 != nil:
    section.add "oauth_token", valid_583272
  var valid_583273 = query.getOrDefault("userIp")
  valid_583273 = validateParameter(valid_583273, JString, required = false,
                                 default = nil)
  if valid_583273 != nil:
    section.add "userIp", valid_583273
  var valid_583274 = query.getOrDefault("key")
  valid_583274 = validateParameter(valid_583274, JString, required = false,
                                 default = nil)
  if valid_583274 != nil:
    section.add "key", valid_583274
  var valid_583275 = query.getOrDefault("prettyPrint")
  valid_583275 = validateParameter(valid_583275, JBool, required = false,
                                 default = newJBool(true))
  if valid_583275 != nil:
    section.add "prettyPrint", valid_583275
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583276: Call_DfareportingSizesGet_583264; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one size by ID.
  ## 
  let valid = call_583276.validator(path, query, header, formData, body)
  let scheme = call_583276.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583276.url(scheme.get, call_583276.host, call_583276.base,
                         call_583276.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583276, url, valid)

proc call*(call_583277: Call_DfareportingSizesGet_583264; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingSizesGet
  ## Gets one size by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Size ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583278 = newJObject()
  var query_583279 = newJObject()
  add(path_583278, "profileId", newJString(profileId))
  add(query_583279, "fields", newJString(fields))
  add(query_583279, "quotaUser", newJString(quotaUser))
  add(query_583279, "alt", newJString(alt))
  add(query_583279, "oauth_token", newJString(oauthToken))
  add(query_583279, "userIp", newJString(userIp))
  add(path_583278, "id", newJString(id))
  add(query_583279, "key", newJString(key))
  add(query_583279, "prettyPrint", newJBool(prettyPrint))
  result = call_583277.call(path_583278, query_583279, nil, nil, nil)

var dfareportingSizesGet* = Call_DfareportingSizesGet_583264(
    name: "dfareportingSizesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sizes/{id}",
    validator: validate_DfareportingSizesGet_583265, base: "/dfareporting/v3.2",
    url: url_DfareportingSizesGet_583266, schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsUpdate_583301 = ref object of OpenApiRestCall_579437
proc url_DfareportingSubaccountsUpdate_583303(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsUpdate_583302(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing subaccount.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583304 = path.getOrDefault("profileId")
  valid_583304 = validateParameter(valid_583304, JString, required = true,
                                 default = nil)
  if valid_583304 != nil:
    section.add "profileId", valid_583304
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583305 = query.getOrDefault("fields")
  valid_583305 = validateParameter(valid_583305, JString, required = false,
                                 default = nil)
  if valid_583305 != nil:
    section.add "fields", valid_583305
  var valid_583306 = query.getOrDefault("quotaUser")
  valid_583306 = validateParameter(valid_583306, JString, required = false,
                                 default = nil)
  if valid_583306 != nil:
    section.add "quotaUser", valid_583306
  var valid_583307 = query.getOrDefault("alt")
  valid_583307 = validateParameter(valid_583307, JString, required = false,
                                 default = newJString("json"))
  if valid_583307 != nil:
    section.add "alt", valid_583307
  var valid_583308 = query.getOrDefault("oauth_token")
  valid_583308 = validateParameter(valid_583308, JString, required = false,
                                 default = nil)
  if valid_583308 != nil:
    section.add "oauth_token", valid_583308
  var valid_583309 = query.getOrDefault("userIp")
  valid_583309 = validateParameter(valid_583309, JString, required = false,
                                 default = nil)
  if valid_583309 != nil:
    section.add "userIp", valid_583309
  var valid_583310 = query.getOrDefault("key")
  valid_583310 = validateParameter(valid_583310, JString, required = false,
                                 default = nil)
  if valid_583310 != nil:
    section.add "key", valid_583310
  var valid_583311 = query.getOrDefault("prettyPrint")
  valid_583311 = validateParameter(valid_583311, JBool, required = false,
                                 default = newJBool(true))
  if valid_583311 != nil:
    section.add "prettyPrint", valid_583311
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_583313: Call_DfareportingSubaccountsUpdate_583301; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing subaccount.
  ## 
  let valid = call_583313.validator(path, query, header, formData, body)
  let scheme = call_583313.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583313.url(scheme.get, call_583313.host, call_583313.base,
                         call_583313.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583313, url, valid)

proc call*(call_583314: Call_DfareportingSubaccountsUpdate_583301;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSubaccountsUpdate
  ## Updates an existing subaccount.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583315 = newJObject()
  var query_583316 = newJObject()
  var body_583317 = newJObject()
  add(path_583315, "profileId", newJString(profileId))
  add(query_583316, "fields", newJString(fields))
  add(query_583316, "quotaUser", newJString(quotaUser))
  add(query_583316, "alt", newJString(alt))
  add(query_583316, "oauth_token", newJString(oauthToken))
  add(query_583316, "userIp", newJString(userIp))
  add(query_583316, "key", newJString(key))
  if body != nil:
    body_583317 = body
  add(query_583316, "prettyPrint", newJBool(prettyPrint))
  result = call_583314.call(path_583315, query_583316, nil, nil, body_583317)

var dfareportingSubaccountsUpdate* = Call_DfareportingSubaccountsUpdate_583301(
    name: "dfareportingSubaccountsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/subaccounts",
    validator: validate_DfareportingSubaccountsUpdate_583302,
    base: "/dfareporting/v3.2", url: url_DfareportingSubaccountsUpdate_583303,
    schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsInsert_583318 = ref object of OpenApiRestCall_579437
proc url_DfareportingSubaccountsInsert_583320(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsInsert_583319(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new subaccount.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583321 = path.getOrDefault("profileId")
  valid_583321 = validateParameter(valid_583321, JString, required = true,
                                 default = nil)
  if valid_583321 != nil:
    section.add "profileId", valid_583321
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583322 = query.getOrDefault("fields")
  valid_583322 = validateParameter(valid_583322, JString, required = false,
                                 default = nil)
  if valid_583322 != nil:
    section.add "fields", valid_583322
  var valid_583323 = query.getOrDefault("quotaUser")
  valid_583323 = validateParameter(valid_583323, JString, required = false,
                                 default = nil)
  if valid_583323 != nil:
    section.add "quotaUser", valid_583323
  var valid_583324 = query.getOrDefault("alt")
  valid_583324 = validateParameter(valid_583324, JString, required = false,
                                 default = newJString("json"))
  if valid_583324 != nil:
    section.add "alt", valid_583324
  var valid_583325 = query.getOrDefault("oauth_token")
  valid_583325 = validateParameter(valid_583325, JString, required = false,
                                 default = nil)
  if valid_583325 != nil:
    section.add "oauth_token", valid_583325
  var valid_583326 = query.getOrDefault("userIp")
  valid_583326 = validateParameter(valid_583326, JString, required = false,
                                 default = nil)
  if valid_583326 != nil:
    section.add "userIp", valid_583326
  var valid_583327 = query.getOrDefault("key")
  valid_583327 = validateParameter(valid_583327, JString, required = false,
                                 default = nil)
  if valid_583327 != nil:
    section.add "key", valid_583327
  var valid_583328 = query.getOrDefault("prettyPrint")
  valid_583328 = validateParameter(valid_583328, JBool, required = false,
                                 default = newJBool(true))
  if valid_583328 != nil:
    section.add "prettyPrint", valid_583328
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_583330: Call_DfareportingSubaccountsInsert_583318; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new subaccount.
  ## 
  let valid = call_583330.validator(path, query, header, formData, body)
  let scheme = call_583330.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583330.url(scheme.get, call_583330.host, call_583330.base,
                         call_583330.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583330, url, valid)

proc call*(call_583331: Call_DfareportingSubaccountsInsert_583318;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSubaccountsInsert
  ## Inserts a new subaccount.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583332 = newJObject()
  var query_583333 = newJObject()
  var body_583334 = newJObject()
  add(path_583332, "profileId", newJString(profileId))
  add(query_583333, "fields", newJString(fields))
  add(query_583333, "quotaUser", newJString(quotaUser))
  add(query_583333, "alt", newJString(alt))
  add(query_583333, "oauth_token", newJString(oauthToken))
  add(query_583333, "userIp", newJString(userIp))
  add(query_583333, "key", newJString(key))
  if body != nil:
    body_583334 = body
  add(query_583333, "prettyPrint", newJBool(prettyPrint))
  result = call_583331.call(path_583332, query_583333, nil, nil, body_583334)

var dfareportingSubaccountsInsert* = Call_DfareportingSubaccountsInsert_583318(
    name: "dfareportingSubaccountsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/subaccounts",
    validator: validate_DfareportingSubaccountsInsert_583319,
    base: "/dfareporting/v3.2", url: url_DfareportingSubaccountsInsert_583320,
    schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsList_583280 = ref object of OpenApiRestCall_579437
proc url_DfareportingSubaccountsList_583282(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsList_583281(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of subaccounts, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583283 = path.getOrDefault("profileId")
  valid_583283 = validateParameter(valid_583283, JString, required = true,
                                 default = nil)
  if valid_583283 != nil:
    section.add "profileId", valid_583283
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "subaccount*2015" will return objects with names like "subaccount June 2015", "subaccount April 2015", or simply "subaccount 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "subaccount" will match objects with name "my subaccount", "subaccount 2015", or simply "subaccount".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only subaccounts with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583284 = query.getOrDefault("fields")
  valid_583284 = validateParameter(valid_583284, JString, required = false,
                                 default = nil)
  if valid_583284 != nil:
    section.add "fields", valid_583284
  var valid_583285 = query.getOrDefault("pageToken")
  valid_583285 = validateParameter(valid_583285, JString, required = false,
                                 default = nil)
  if valid_583285 != nil:
    section.add "pageToken", valid_583285
  var valid_583286 = query.getOrDefault("quotaUser")
  valid_583286 = validateParameter(valid_583286, JString, required = false,
                                 default = nil)
  if valid_583286 != nil:
    section.add "quotaUser", valid_583286
  var valid_583287 = query.getOrDefault("sortField")
  valid_583287 = validateParameter(valid_583287, JString, required = false,
                                 default = newJString("ID"))
  if valid_583287 != nil:
    section.add "sortField", valid_583287
  var valid_583288 = query.getOrDefault("alt")
  valid_583288 = validateParameter(valid_583288, JString, required = false,
                                 default = newJString("json"))
  if valid_583288 != nil:
    section.add "alt", valid_583288
  var valid_583289 = query.getOrDefault("searchString")
  valid_583289 = validateParameter(valid_583289, JString, required = false,
                                 default = nil)
  if valid_583289 != nil:
    section.add "searchString", valid_583289
  var valid_583290 = query.getOrDefault("oauth_token")
  valid_583290 = validateParameter(valid_583290, JString, required = false,
                                 default = nil)
  if valid_583290 != nil:
    section.add "oauth_token", valid_583290
  var valid_583291 = query.getOrDefault("userIp")
  valid_583291 = validateParameter(valid_583291, JString, required = false,
                                 default = nil)
  if valid_583291 != nil:
    section.add "userIp", valid_583291
  var valid_583292 = query.getOrDefault("maxResults")
  valid_583292 = validateParameter(valid_583292, JInt, required = false,
                                 default = newJInt(1000))
  if valid_583292 != nil:
    section.add "maxResults", valid_583292
  var valid_583293 = query.getOrDefault("ids")
  valid_583293 = validateParameter(valid_583293, JArray, required = false,
                                 default = nil)
  if valid_583293 != nil:
    section.add "ids", valid_583293
  var valid_583294 = query.getOrDefault("key")
  valid_583294 = validateParameter(valid_583294, JString, required = false,
                                 default = nil)
  if valid_583294 != nil:
    section.add "key", valid_583294
  var valid_583295 = query.getOrDefault("sortOrder")
  valid_583295 = validateParameter(valid_583295, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_583295 != nil:
    section.add "sortOrder", valid_583295
  var valid_583296 = query.getOrDefault("prettyPrint")
  valid_583296 = validateParameter(valid_583296, JBool, required = false,
                                 default = newJBool(true))
  if valid_583296 != nil:
    section.add "prettyPrint", valid_583296
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583297: Call_DfareportingSubaccountsList_583280; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a list of subaccounts, possibly filtered. This method supports paging.
  ## 
  let valid = call_583297.validator(path, query, header, formData, body)
  let scheme = call_583297.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583297.url(scheme.get, call_583297.host, call_583297.base,
                         call_583297.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583297, url, valid)

proc call*(call_583298: Call_DfareportingSubaccountsList_583280; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "ID"; alt: string = "json"; searchString: string = "";
          oauthToken: string = ""; userIp: string = ""; maxResults: int = 1000;
          ids: JsonNode = nil; key: string = ""; sortOrder: string = "ASCENDING";
          prettyPrint: bool = true): Recallable =
  ## dfareportingSubaccountsList
  ## Gets a list of subaccounts, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "subaccount*2015" will return objects with names like "subaccount June 2015", "subaccount April 2015", or simply "subaccount 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "subaccount" will match objects with name "my subaccount", "subaccount 2015", or simply "subaccount".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only subaccounts with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583299 = newJObject()
  var query_583300 = newJObject()
  add(path_583299, "profileId", newJString(profileId))
  add(query_583300, "fields", newJString(fields))
  add(query_583300, "pageToken", newJString(pageToken))
  add(query_583300, "quotaUser", newJString(quotaUser))
  add(query_583300, "sortField", newJString(sortField))
  add(query_583300, "alt", newJString(alt))
  add(query_583300, "searchString", newJString(searchString))
  add(query_583300, "oauth_token", newJString(oauthToken))
  add(query_583300, "userIp", newJString(userIp))
  add(query_583300, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_583300.add "ids", ids
  add(query_583300, "key", newJString(key))
  add(query_583300, "sortOrder", newJString(sortOrder))
  add(query_583300, "prettyPrint", newJBool(prettyPrint))
  result = call_583298.call(path_583299, query_583300, nil, nil, nil)

var dfareportingSubaccountsList* = Call_DfareportingSubaccountsList_583280(
    name: "dfareportingSubaccountsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/subaccounts",
    validator: validate_DfareportingSubaccountsList_583281,
    base: "/dfareporting/v3.2", url: url_DfareportingSubaccountsList_583282,
    schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsPatch_583335 = ref object of OpenApiRestCall_579437
proc url_DfareportingSubaccountsPatch_583337(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsPatch_583336(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing subaccount. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583338 = path.getOrDefault("profileId")
  valid_583338 = validateParameter(valid_583338, JString, required = true,
                                 default = nil)
  if valid_583338 != nil:
    section.add "profileId", valid_583338
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Subaccount ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583339 = query.getOrDefault("fields")
  valid_583339 = validateParameter(valid_583339, JString, required = false,
                                 default = nil)
  if valid_583339 != nil:
    section.add "fields", valid_583339
  var valid_583340 = query.getOrDefault("quotaUser")
  valid_583340 = validateParameter(valid_583340, JString, required = false,
                                 default = nil)
  if valid_583340 != nil:
    section.add "quotaUser", valid_583340
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_583341 = query.getOrDefault("id")
  valid_583341 = validateParameter(valid_583341, JString, required = true,
                                 default = nil)
  if valid_583341 != nil:
    section.add "id", valid_583341
  var valid_583342 = query.getOrDefault("alt")
  valid_583342 = validateParameter(valid_583342, JString, required = false,
                                 default = newJString("json"))
  if valid_583342 != nil:
    section.add "alt", valid_583342
  var valid_583343 = query.getOrDefault("oauth_token")
  valid_583343 = validateParameter(valid_583343, JString, required = false,
                                 default = nil)
  if valid_583343 != nil:
    section.add "oauth_token", valid_583343
  var valid_583344 = query.getOrDefault("userIp")
  valid_583344 = validateParameter(valid_583344, JString, required = false,
                                 default = nil)
  if valid_583344 != nil:
    section.add "userIp", valid_583344
  var valid_583345 = query.getOrDefault("key")
  valid_583345 = validateParameter(valid_583345, JString, required = false,
                                 default = nil)
  if valid_583345 != nil:
    section.add "key", valid_583345
  var valid_583346 = query.getOrDefault("prettyPrint")
  valid_583346 = validateParameter(valid_583346, JBool, required = false,
                                 default = newJBool(true))
  if valid_583346 != nil:
    section.add "prettyPrint", valid_583346
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_583348: Call_DfareportingSubaccountsPatch_583335; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing subaccount. This method supports patch semantics.
  ## 
  let valid = call_583348.validator(path, query, header, formData, body)
  let scheme = call_583348.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583348.url(scheme.get, call_583348.host, call_583348.base,
                         call_583348.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583348, url, valid)

proc call*(call_583349: Call_DfareportingSubaccountsPatch_583335;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSubaccountsPatch
  ## Updates an existing subaccount. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Subaccount ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583350 = newJObject()
  var query_583351 = newJObject()
  var body_583352 = newJObject()
  add(path_583350, "profileId", newJString(profileId))
  add(query_583351, "fields", newJString(fields))
  add(query_583351, "quotaUser", newJString(quotaUser))
  add(query_583351, "id", newJString(id))
  add(query_583351, "alt", newJString(alt))
  add(query_583351, "oauth_token", newJString(oauthToken))
  add(query_583351, "userIp", newJString(userIp))
  add(query_583351, "key", newJString(key))
  if body != nil:
    body_583352 = body
  add(query_583351, "prettyPrint", newJBool(prettyPrint))
  result = call_583349.call(path_583350, query_583351, nil, nil, body_583352)

var dfareportingSubaccountsPatch* = Call_DfareportingSubaccountsPatch_583335(
    name: "dfareportingSubaccountsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/subaccounts",
    validator: validate_DfareportingSubaccountsPatch_583336,
    base: "/dfareporting/v3.2", url: url_DfareportingSubaccountsPatch_583337,
    schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsGet_583353 = ref object of OpenApiRestCall_579437
proc url_DfareportingSubaccountsGet_583355(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsGet_583354(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one subaccount by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Subaccount ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583356 = path.getOrDefault("profileId")
  valid_583356 = validateParameter(valid_583356, JString, required = true,
                                 default = nil)
  if valid_583356 != nil:
    section.add "profileId", valid_583356
  var valid_583357 = path.getOrDefault("id")
  valid_583357 = validateParameter(valid_583357, JString, required = true,
                                 default = nil)
  if valid_583357 != nil:
    section.add "id", valid_583357
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583358 = query.getOrDefault("fields")
  valid_583358 = validateParameter(valid_583358, JString, required = false,
                                 default = nil)
  if valid_583358 != nil:
    section.add "fields", valid_583358
  var valid_583359 = query.getOrDefault("quotaUser")
  valid_583359 = validateParameter(valid_583359, JString, required = false,
                                 default = nil)
  if valid_583359 != nil:
    section.add "quotaUser", valid_583359
  var valid_583360 = query.getOrDefault("alt")
  valid_583360 = validateParameter(valid_583360, JString, required = false,
                                 default = newJString("json"))
  if valid_583360 != nil:
    section.add "alt", valid_583360
  var valid_583361 = query.getOrDefault("oauth_token")
  valid_583361 = validateParameter(valid_583361, JString, required = false,
                                 default = nil)
  if valid_583361 != nil:
    section.add "oauth_token", valid_583361
  var valid_583362 = query.getOrDefault("userIp")
  valid_583362 = validateParameter(valid_583362, JString, required = false,
                                 default = nil)
  if valid_583362 != nil:
    section.add "userIp", valid_583362
  var valid_583363 = query.getOrDefault("key")
  valid_583363 = validateParameter(valid_583363, JString, required = false,
                                 default = nil)
  if valid_583363 != nil:
    section.add "key", valid_583363
  var valid_583364 = query.getOrDefault("prettyPrint")
  valid_583364 = validateParameter(valid_583364, JBool, required = false,
                                 default = newJBool(true))
  if valid_583364 != nil:
    section.add "prettyPrint", valid_583364
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583365: Call_DfareportingSubaccountsGet_583353; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one subaccount by ID.
  ## 
  let valid = call_583365.validator(path, query, header, formData, body)
  let scheme = call_583365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583365.url(scheme.get, call_583365.host, call_583365.base,
                         call_583365.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583365, url, valid)

proc call*(call_583366: Call_DfareportingSubaccountsGet_583353; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingSubaccountsGet
  ## Gets one subaccount by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Subaccount ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583367 = newJObject()
  var query_583368 = newJObject()
  add(path_583367, "profileId", newJString(profileId))
  add(query_583368, "fields", newJString(fields))
  add(query_583368, "quotaUser", newJString(quotaUser))
  add(query_583368, "alt", newJString(alt))
  add(query_583368, "oauth_token", newJString(oauthToken))
  add(query_583368, "userIp", newJString(userIp))
  add(path_583367, "id", newJString(id))
  add(query_583368, "key", newJString(key))
  add(query_583368, "prettyPrint", newJBool(prettyPrint))
  result = call_583366.call(path_583367, query_583368, nil, nil, nil)

var dfareportingSubaccountsGet* = Call_DfareportingSubaccountsGet_583353(
    name: "dfareportingSubaccountsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/subaccounts/{id}",
    validator: validate_DfareportingSubaccountsGet_583354,
    base: "/dfareporting/v3.2", url: url_DfareportingSubaccountsGet_583355,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetableRemarketingListsList_583369 = ref object of OpenApiRestCall_579437
proc url_DfareportingTargetableRemarketingListsList_583371(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetableRemarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetableRemarketingListsList_583370(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583372 = path.getOrDefault("profileId")
  valid_583372 = validateParameter(valid_583372, JString, required = true,
                                 default = nil)
  if valid_583372 != nil:
    section.add "profileId", valid_583372
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   advertiserId: JString (required)
  ##               : Select only targetable remarketing lists targetable by these advertisers.
  ##   active: JBool
  ##         : Select only active or only inactive targetable remarketing lists.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   name: JString
  ##       : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583373 = query.getOrDefault("fields")
  valid_583373 = validateParameter(valid_583373, JString, required = false,
                                 default = nil)
  if valid_583373 != nil:
    section.add "fields", valid_583373
  var valid_583374 = query.getOrDefault("pageToken")
  valid_583374 = validateParameter(valid_583374, JString, required = false,
                                 default = nil)
  if valid_583374 != nil:
    section.add "pageToken", valid_583374
  var valid_583375 = query.getOrDefault("quotaUser")
  valid_583375 = validateParameter(valid_583375, JString, required = false,
                                 default = nil)
  if valid_583375 != nil:
    section.add "quotaUser", valid_583375
  var valid_583376 = query.getOrDefault("sortField")
  valid_583376 = validateParameter(valid_583376, JString, required = false,
                                 default = newJString("ID"))
  if valid_583376 != nil:
    section.add "sortField", valid_583376
  var valid_583377 = query.getOrDefault("alt")
  valid_583377 = validateParameter(valid_583377, JString, required = false,
                                 default = newJString("json"))
  if valid_583377 != nil:
    section.add "alt", valid_583377
  assert query != nil,
        "query argument is necessary due to required `advertiserId` field"
  var valid_583378 = query.getOrDefault("advertiserId")
  valid_583378 = validateParameter(valid_583378, JString, required = true,
                                 default = nil)
  if valid_583378 != nil:
    section.add "advertiserId", valid_583378
  var valid_583379 = query.getOrDefault("active")
  valid_583379 = validateParameter(valid_583379, JBool, required = false, default = nil)
  if valid_583379 != nil:
    section.add "active", valid_583379
  var valid_583380 = query.getOrDefault("oauth_token")
  valid_583380 = validateParameter(valid_583380, JString, required = false,
                                 default = nil)
  if valid_583380 != nil:
    section.add "oauth_token", valid_583380
  var valid_583381 = query.getOrDefault("userIp")
  valid_583381 = validateParameter(valid_583381, JString, required = false,
                                 default = nil)
  if valid_583381 != nil:
    section.add "userIp", valid_583381
  var valid_583382 = query.getOrDefault("maxResults")
  valid_583382 = validateParameter(valid_583382, JInt, required = false,
                                 default = newJInt(1000))
  if valid_583382 != nil:
    section.add "maxResults", valid_583382
  var valid_583383 = query.getOrDefault("key")
  valid_583383 = validateParameter(valid_583383, JString, required = false,
                                 default = nil)
  if valid_583383 != nil:
    section.add "key", valid_583383
  var valid_583384 = query.getOrDefault("name")
  valid_583384 = validateParameter(valid_583384, JString, required = false,
                                 default = nil)
  if valid_583384 != nil:
    section.add "name", valid_583384
  var valid_583385 = query.getOrDefault("sortOrder")
  valid_583385 = validateParameter(valid_583385, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_583385 != nil:
    section.add "sortOrder", valid_583385
  var valid_583386 = query.getOrDefault("prettyPrint")
  valid_583386 = validateParameter(valid_583386, JBool, required = false,
                                 default = newJBool(true))
  if valid_583386 != nil:
    section.add "prettyPrint", valid_583386
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583387: Call_DfareportingTargetableRemarketingListsList_583369;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging.
  ## 
  let valid = call_583387.validator(path, query, header, formData, body)
  let scheme = call_583387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583387.url(scheme.get, call_583387.host, call_583387.base,
                         call_583387.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583387, url, valid)

proc call*(call_583388: Call_DfareportingTargetableRemarketingListsList_583369;
          profileId: string; advertiserId: string; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; sortField: string = "ID";
          alt: string = "json"; active: bool = false; oauthToken: string = "";
          userIp: string = ""; maxResults: int = 1000; key: string = ""; name: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingTargetableRemarketingListsList
  ## Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   advertiserId: string (required)
  ##               : Select only targetable remarketing lists targetable by these advertisers.
  ##   active: bool
  ##         : Select only active or only inactive targetable remarketing lists.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   name: string
  ##       : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583389 = newJObject()
  var query_583390 = newJObject()
  add(path_583389, "profileId", newJString(profileId))
  add(query_583390, "fields", newJString(fields))
  add(query_583390, "pageToken", newJString(pageToken))
  add(query_583390, "quotaUser", newJString(quotaUser))
  add(query_583390, "sortField", newJString(sortField))
  add(query_583390, "alt", newJString(alt))
  add(query_583390, "advertiserId", newJString(advertiserId))
  add(query_583390, "active", newJBool(active))
  add(query_583390, "oauth_token", newJString(oauthToken))
  add(query_583390, "userIp", newJString(userIp))
  add(query_583390, "maxResults", newJInt(maxResults))
  add(query_583390, "key", newJString(key))
  add(query_583390, "name", newJString(name))
  add(query_583390, "sortOrder", newJString(sortOrder))
  add(query_583390, "prettyPrint", newJBool(prettyPrint))
  result = call_583388.call(path_583389, query_583390, nil, nil, nil)

var dfareportingTargetableRemarketingListsList* = Call_DfareportingTargetableRemarketingListsList_583369(
    name: "dfareportingTargetableRemarketingListsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetableRemarketingLists",
    validator: validate_DfareportingTargetableRemarketingListsList_583370,
    base: "/dfareporting/v3.2",
    url: url_DfareportingTargetableRemarketingListsList_583371,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetableRemarketingListsGet_583391 = ref object of OpenApiRestCall_579437
proc url_DfareportingTargetableRemarketingListsGet_583393(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetableRemarketingLists/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetableRemarketingListsGet_583392(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one remarketing list by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Remarketing list ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583394 = path.getOrDefault("profileId")
  valid_583394 = validateParameter(valid_583394, JString, required = true,
                                 default = nil)
  if valid_583394 != nil:
    section.add "profileId", valid_583394
  var valid_583395 = path.getOrDefault("id")
  valid_583395 = validateParameter(valid_583395, JString, required = true,
                                 default = nil)
  if valid_583395 != nil:
    section.add "id", valid_583395
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583396 = query.getOrDefault("fields")
  valid_583396 = validateParameter(valid_583396, JString, required = false,
                                 default = nil)
  if valid_583396 != nil:
    section.add "fields", valid_583396
  var valid_583397 = query.getOrDefault("quotaUser")
  valid_583397 = validateParameter(valid_583397, JString, required = false,
                                 default = nil)
  if valid_583397 != nil:
    section.add "quotaUser", valid_583397
  var valid_583398 = query.getOrDefault("alt")
  valid_583398 = validateParameter(valid_583398, JString, required = false,
                                 default = newJString("json"))
  if valid_583398 != nil:
    section.add "alt", valid_583398
  var valid_583399 = query.getOrDefault("oauth_token")
  valid_583399 = validateParameter(valid_583399, JString, required = false,
                                 default = nil)
  if valid_583399 != nil:
    section.add "oauth_token", valid_583399
  var valid_583400 = query.getOrDefault("userIp")
  valid_583400 = validateParameter(valid_583400, JString, required = false,
                                 default = nil)
  if valid_583400 != nil:
    section.add "userIp", valid_583400
  var valid_583401 = query.getOrDefault("key")
  valid_583401 = validateParameter(valid_583401, JString, required = false,
                                 default = nil)
  if valid_583401 != nil:
    section.add "key", valid_583401
  var valid_583402 = query.getOrDefault("prettyPrint")
  valid_583402 = validateParameter(valid_583402, JBool, required = false,
                                 default = newJBool(true))
  if valid_583402 != nil:
    section.add "prettyPrint", valid_583402
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583403: Call_DfareportingTargetableRemarketingListsGet_583391;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one remarketing list by ID.
  ## 
  let valid = call_583403.validator(path, query, header, formData, body)
  let scheme = call_583403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583403.url(scheme.get, call_583403.host, call_583403.base,
                         call_583403.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583403, url, valid)

proc call*(call_583404: Call_DfareportingTargetableRemarketingListsGet_583391;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingTargetableRemarketingListsGet
  ## Gets one remarketing list by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Remarketing list ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583405 = newJObject()
  var query_583406 = newJObject()
  add(path_583405, "profileId", newJString(profileId))
  add(query_583406, "fields", newJString(fields))
  add(query_583406, "quotaUser", newJString(quotaUser))
  add(query_583406, "alt", newJString(alt))
  add(query_583406, "oauth_token", newJString(oauthToken))
  add(query_583406, "userIp", newJString(userIp))
  add(path_583405, "id", newJString(id))
  add(query_583406, "key", newJString(key))
  add(query_583406, "prettyPrint", newJBool(prettyPrint))
  result = call_583404.call(path_583405, query_583406, nil, nil, nil)

var dfareportingTargetableRemarketingListsGet* = Call_DfareportingTargetableRemarketingListsGet_583391(
    name: "dfareportingTargetableRemarketingListsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetableRemarketingLists/{id}",
    validator: validate_DfareportingTargetableRemarketingListsGet_583392,
    base: "/dfareporting/v3.2",
    url: url_DfareportingTargetableRemarketingListsGet_583393,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesUpdate_583429 = ref object of OpenApiRestCall_579437
proc url_DfareportingTargetingTemplatesUpdate_583431(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesUpdate_583430(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing targeting template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583432 = path.getOrDefault("profileId")
  valid_583432 = validateParameter(valid_583432, JString, required = true,
                                 default = nil)
  if valid_583432 != nil:
    section.add "profileId", valid_583432
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583433 = query.getOrDefault("fields")
  valid_583433 = validateParameter(valid_583433, JString, required = false,
                                 default = nil)
  if valid_583433 != nil:
    section.add "fields", valid_583433
  var valid_583434 = query.getOrDefault("quotaUser")
  valid_583434 = validateParameter(valid_583434, JString, required = false,
                                 default = nil)
  if valid_583434 != nil:
    section.add "quotaUser", valid_583434
  var valid_583435 = query.getOrDefault("alt")
  valid_583435 = validateParameter(valid_583435, JString, required = false,
                                 default = newJString("json"))
  if valid_583435 != nil:
    section.add "alt", valid_583435
  var valid_583436 = query.getOrDefault("oauth_token")
  valid_583436 = validateParameter(valid_583436, JString, required = false,
                                 default = nil)
  if valid_583436 != nil:
    section.add "oauth_token", valid_583436
  var valid_583437 = query.getOrDefault("userIp")
  valid_583437 = validateParameter(valid_583437, JString, required = false,
                                 default = nil)
  if valid_583437 != nil:
    section.add "userIp", valid_583437
  var valid_583438 = query.getOrDefault("key")
  valid_583438 = validateParameter(valid_583438, JString, required = false,
                                 default = nil)
  if valid_583438 != nil:
    section.add "key", valid_583438
  var valid_583439 = query.getOrDefault("prettyPrint")
  valid_583439 = validateParameter(valid_583439, JBool, required = false,
                                 default = newJBool(true))
  if valid_583439 != nil:
    section.add "prettyPrint", valid_583439
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_583441: Call_DfareportingTargetingTemplatesUpdate_583429;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing targeting template.
  ## 
  let valid = call_583441.validator(path, query, header, formData, body)
  let scheme = call_583441.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583441.url(scheme.get, call_583441.host, call_583441.base,
                         call_583441.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583441, url, valid)

proc call*(call_583442: Call_DfareportingTargetingTemplatesUpdate_583429;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingTargetingTemplatesUpdate
  ## Updates an existing targeting template.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583443 = newJObject()
  var query_583444 = newJObject()
  var body_583445 = newJObject()
  add(path_583443, "profileId", newJString(profileId))
  add(query_583444, "fields", newJString(fields))
  add(query_583444, "quotaUser", newJString(quotaUser))
  add(query_583444, "alt", newJString(alt))
  add(query_583444, "oauth_token", newJString(oauthToken))
  add(query_583444, "userIp", newJString(userIp))
  add(query_583444, "key", newJString(key))
  if body != nil:
    body_583445 = body
  add(query_583444, "prettyPrint", newJBool(prettyPrint))
  result = call_583442.call(path_583443, query_583444, nil, nil, body_583445)

var dfareportingTargetingTemplatesUpdate* = Call_DfareportingTargetingTemplatesUpdate_583429(
    name: "dfareportingTargetingTemplatesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates",
    validator: validate_DfareportingTargetingTemplatesUpdate_583430,
    base: "/dfareporting/v3.2", url: url_DfareportingTargetingTemplatesUpdate_583431,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesInsert_583446 = ref object of OpenApiRestCall_579437
proc url_DfareportingTargetingTemplatesInsert_583448(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesInsert_583447(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new targeting template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583449 = path.getOrDefault("profileId")
  valid_583449 = validateParameter(valid_583449, JString, required = true,
                                 default = nil)
  if valid_583449 != nil:
    section.add "profileId", valid_583449
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583450 = query.getOrDefault("fields")
  valid_583450 = validateParameter(valid_583450, JString, required = false,
                                 default = nil)
  if valid_583450 != nil:
    section.add "fields", valid_583450
  var valid_583451 = query.getOrDefault("quotaUser")
  valid_583451 = validateParameter(valid_583451, JString, required = false,
                                 default = nil)
  if valid_583451 != nil:
    section.add "quotaUser", valid_583451
  var valid_583452 = query.getOrDefault("alt")
  valid_583452 = validateParameter(valid_583452, JString, required = false,
                                 default = newJString("json"))
  if valid_583452 != nil:
    section.add "alt", valid_583452
  var valid_583453 = query.getOrDefault("oauth_token")
  valid_583453 = validateParameter(valid_583453, JString, required = false,
                                 default = nil)
  if valid_583453 != nil:
    section.add "oauth_token", valid_583453
  var valid_583454 = query.getOrDefault("userIp")
  valid_583454 = validateParameter(valid_583454, JString, required = false,
                                 default = nil)
  if valid_583454 != nil:
    section.add "userIp", valid_583454
  var valid_583455 = query.getOrDefault("key")
  valid_583455 = validateParameter(valid_583455, JString, required = false,
                                 default = nil)
  if valid_583455 != nil:
    section.add "key", valid_583455
  var valid_583456 = query.getOrDefault("prettyPrint")
  valid_583456 = validateParameter(valid_583456, JBool, required = false,
                                 default = newJBool(true))
  if valid_583456 != nil:
    section.add "prettyPrint", valid_583456
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_583458: Call_DfareportingTargetingTemplatesInsert_583446;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new targeting template.
  ## 
  let valid = call_583458.validator(path, query, header, formData, body)
  let scheme = call_583458.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583458.url(scheme.get, call_583458.host, call_583458.base,
                         call_583458.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583458, url, valid)

proc call*(call_583459: Call_DfareportingTargetingTemplatesInsert_583446;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingTargetingTemplatesInsert
  ## Inserts a new targeting template.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583460 = newJObject()
  var query_583461 = newJObject()
  var body_583462 = newJObject()
  add(path_583460, "profileId", newJString(profileId))
  add(query_583461, "fields", newJString(fields))
  add(query_583461, "quotaUser", newJString(quotaUser))
  add(query_583461, "alt", newJString(alt))
  add(query_583461, "oauth_token", newJString(oauthToken))
  add(query_583461, "userIp", newJString(userIp))
  add(query_583461, "key", newJString(key))
  if body != nil:
    body_583462 = body
  add(query_583461, "prettyPrint", newJBool(prettyPrint))
  result = call_583459.call(path_583460, query_583461, nil, nil, body_583462)

var dfareportingTargetingTemplatesInsert* = Call_DfareportingTargetingTemplatesInsert_583446(
    name: "dfareportingTargetingTemplatesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates",
    validator: validate_DfareportingTargetingTemplatesInsert_583447,
    base: "/dfareporting/v3.2", url: url_DfareportingTargetingTemplatesInsert_583448,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesList_583407 = ref object of OpenApiRestCall_579437
proc url_DfareportingTargetingTemplatesList_583409(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesList_583408(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of targeting templates, optionally filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583410 = path.getOrDefault("profileId")
  valid_583410 = validateParameter(valid_583410, JString, required = true,
                                 default = nil)
  if valid_583410 != nil:
    section.add "profileId", valid_583410
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "template*2015" will return objects with names like "template June 2015", "template April 2015", or simply "template 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "template" will match objects with name "my template", "template 2015", or simply "template".
  ##   advertiserId: JString
  ##               : Select only targeting templates with this advertiser ID.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only targeting templates with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583411 = query.getOrDefault("fields")
  valid_583411 = validateParameter(valid_583411, JString, required = false,
                                 default = nil)
  if valid_583411 != nil:
    section.add "fields", valid_583411
  var valid_583412 = query.getOrDefault("pageToken")
  valid_583412 = validateParameter(valid_583412, JString, required = false,
                                 default = nil)
  if valid_583412 != nil:
    section.add "pageToken", valid_583412
  var valid_583413 = query.getOrDefault("quotaUser")
  valid_583413 = validateParameter(valid_583413, JString, required = false,
                                 default = nil)
  if valid_583413 != nil:
    section.add "quotaUser", valid_583413
  var valid_583414 = query.getOrDefault("sortField")
  valid_583414 = validateParameter(valid_583414, JString, required = false,
                                 default = newJString("ID"))
  if valid_583414 != nil:
    section.add "sortField", valid_583414
  var valid_583415 = query.getOrDefault("alt")
  valid_583415 = validateParameter(valid_583415, JString, required = false,
                                 default = newJString("json"))
  if valid_583415 != nil:
    section.add "alt", valid_583415
  var valid_583416 = query.getOrDefault("searchString")
  valid_583416 = validateParameter(valid_583416, JString, required = false,
                                 default = nil)
  if valid_583416 != nil:
    section.add "searchString", valid_583416
  var valid_583417 = query.getOrDefault("advertiserId")
  valid_583417 = validateParameter(valid_583417, JString, required = false,
                                 default = nil)
  if valid_583417 != nil:
    section.add "advertiserId", valid_583417
  var valid_583418 = query.getOrDefault("oauth_token")
  valid_583418 = validateParameter(valid_583418, JString, required = false,
                                 default = nil)
  if valid_583418 != nil:
    section.add "oauth_token", valid_583418
  var valid_583419 = query.getOrDefault("userIp")
  valid_583419 = validateParameter(valid_583419, JString, required = false,
                                 default = nil)
  if valid_583419 != nil:
    section.add "userIp", valid_583419
  var valid_583420 = query.getOrDefault("maxResults")
  valid_583420 = validateParameter(valid_583420, JInt, required = false,
                                 default = newJInt(1000))
  if valid_583420 != nil:
    section.add "maxResults", valid_583420
  var valid_583421 = query.getOrDefault("ids")
  valid_583421 = validateParameter(valid_583421, JArray, required = false,
                                 default = nil)
  if valid_583421 != nil:
    section.add "ids", valid_583421
  var valid_583422 = query.getOrDefault("key")
  valid_583422 = validateParameter(valid_583422, JString, required = false,
                                 default = nil)
  if valid_583422 != nil:
    section.add "key", valid_583422
  var valid_583423 = query.getOrDefault("sortOrder")
  valid_583423 = validateParameter(valid_583423, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_583423 != nil:
    section.add "sortOrder", valid_583423
  var valid_583424 = query.getOrDefault("prettyPrint")
  valid_583424 = validateParameter(valid_583424, JBool, required = false,
                                 default = newJBool(true))
  if valid_583424 != nil:
    section.add "prettyPrint", valid_583424
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583425: Call_DfareportingTargetingTemplatesList_583407;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of targeting templates, optionally filtered. This method supports paging.
  ## 
  let valid = call_583425.validator(path, query, header, formData, body)
  let scheme = call_583425.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583425.url(scheme.get, call_583425.host, call_583425.base,
                         call_583425.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583425, url, valid)

proc call*(call_583426: Call_DfareportingTargetingTemplatesList_583407;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; advertiserId: string = ""; oauthToken: string = "";
          userIp: string = ""; maxResults: int = 1000; ids: JsonNode = nil;
          key: string = ""; sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingTargetingTemplatesList
  ## Retrieves a list of targeting templates, optionally filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "template*2015" will return objects with names like "template June 2015", "template April 2015", or simply "template 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "template" will match objects with name "my template", "template 2015", or simply "template".
  ##   advertiserId: string
  ##               : Select only targeting templates with this advertiser ID.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only targeting templates with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583427 = newJObject()
  var query_583428 = newJObject()
  add(path_583427, "profileId", newJString(profileId))
  add(query_583428, "fields", newJString(fields))
  add(query_583428, "pageToken", newJString(pageToken))
  add(query_583428, "quotaUser", newJString(quotaUser))
  add(query_583428, "sortField", newJString(sortField))
  add(query_583428, "alt", newJString(alt))
  add(query_583428, "searchString", newJString(searchString))
  add(query_583428, "advertiserId", newJString(advertiserId))
  add(query_583428, "oauth_token", newJString(oauthToken))
  add(query_583428, "userIp", newJString(userIp))
  add(query_583428, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_583428.add "ids", ids
  add(query_583428, "key", newJString(key))
  add(query_583428, "sortOrder", newJString(sortOrder))
  add(query_583428, "prettyPrint", newJBool(prettyPrint))
  result = call_583426.call(path_583427, query_583428, nil, nil, nil)

var dfareportingTargetingTemplatesList* = Call_DfareportingTargetingTemplatesList_583407(
    name: "dfareportingTargetingTemplatesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates",
    validator: validate_DfareportingTargetingTemplatesList_583408,
    base: "/dfareporting/v3.2", url: url_DfareportingTargetingTemplatesList_583409,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesPatch_583463 = ref object of OpenApiRestCall_579437
proc url_DfareportingTargetingTemplatesPatch_583465(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesPatch_583464(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing targeting template. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583466 = path.getOrDefault("profileId")
  valid_583466 = validateParameter(valid_583466, JString, required = true,
                                 default = nil)
  if valid_583466 != nil:
    section.add "profileId", valid_583466
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Targeting template ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583467 = query.getOrDefault("fields")
  valid_583467 = validateParameter(valid_583467, JString, required = false,
                                 default = nil)
  if valid_583467 != nil:
    section.add "fields", valid_583467
  var valid_583468 = query.getOrDefault("quotaUser")
  valid_583468 = validateParameter(valid_583468, JString, required = false,
                                 default = nil)
  if valid_583468 != nil:
    section.add "quotaUser", valid_583468
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_583469 = query.getOrDefault("id")
  valid_583469 = validateParameter(valid_583469, JString, required = true,
                                 default = nil)
  if valid_583469 != nil:
    section.add "id", valid_583469
  var valid_583470 = query.getOrDefault("alt")
  valid_583470 = validateParameter(valid_583470, JString, required = false,
                                 default = newJString("json"))
  if valid_583470 != nil:
    section.add "alt", valid_583470
  var valid_583471 = query.getOrDefault("oauth_token")
  valid_583471 = validateParameter(valid_583471, JString, required = false,
                                 default = nil)
  if valid_583471 != nil:
    section.add "oauth_token", valid_583471
  var valid_583472 = query.getOrDefault("userIp")
  valid_583472 = validateParameter(valid_583472, JString, required = false,
                                 default = nil)
  if valid_583472 != nil:
    section.add "userIp", valid_583472
  var valid_583473 = query.getOrDefault("key")
  valid_583473 = validateParameter(valid_583473, JString, required = false,
                                 default = nil)
  if valid_583473 != nil:
    section.add "key", valid_583473
  var valid_583474 = query.getOrDefault("prettyPrint")
  valid_583474 = validateParameter(valid_583474, JBool, required = false,
                                 default = newJBool(true))
  if valid_583474 != nil:
    section.add "prettyPrint", valid_583474
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_583476: Call_DfareportingTargetingTemplatesPatch_583463;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing targeting template. This method supports patch semantics.
  ## 
  let valid = call_583476.validator(path, query, header, formData, body)
  let scheme = call_583476.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583476.url(scheme.get, call_583476.host, call_583476.base,
                         call_583476.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583476, url, valid)

proc call*(call_583477: Call_DfareportingTargetingTemplatesPatch_583463;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingTargetingTemplatesPatch
  ## Updates an existing targeting template. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Targeting template ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583478 = newJObject()
  var query_583479 = newJObject()
  var body_583480 = newJObject()
  add(path_583478, "profileId", newJString(profileId))
  add(query_583479, "fields", newJString(fields))
  add(query_583479, "quotaUser", newJString(quotaUser))
  add(query_583479, "id", newJString(id))
  add(query_583479, "alt", newJString(alt))
  add(query_583479, "oauth_token", newJString(oauthToken))
  add(query_583479, "userIp", newJString(userIp))
  add(query_583479, "key", newJString(key))
  if body != nil:
    body_583480 = body
  add(query_583479, "prettyPrint", newJBool(prettyPrint))
  result = call_583477.call(path_583478, query_583479, nil, nil, body_583480)

var dfareportingTargetingTemplatesPatch* = Call_DfareportingTargetingTemplatesPatch_583463(
    name: "dfareportingTargetingTemplatesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates",
    validator: validate_DfareportingTargetingTemplatesPatch_583464,
    base: "/dfareporting/v3.2", url: url_DfareportingTargetingTemplatesPatch_583465,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesGet_583481 = ref object of OpenApiRestCall_579437
proc url_DfareportingTargetingTemplatesGet_583483(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesGet_583482(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one targeting template by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Targeting template ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583484 = path.getOrDefault("profileId")
  valid_583484 = validateParameter(valid_583484, JString, required = true,
                                 default = nil)
  if valid_583484 != nil:
    section.add "profileId", valid_583484
  var valid_583485 = path.getOrDefault("id")
  valid_583485 = validateParameter(valid_583485, JString, required = true,
                                 default = nil)
  if valid_583485 != nil:
    section.add "id", valid_583485
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583486 = query.getOrDefault("fields")
  valid_583486 = validateParameter(valid_583486, JString, required = false,
                                 default = nil)
  if valid_583486 != nil:
    section.add "fields", valid_583486
  var valid_583487 = query.getOrDefault("quotaUser")
  valid_583487 = validateParameter(valid_583487, JString, required = false,
                                 default = nil)
  if valid_583487 != nil:
    section.add "quotaUser", valid_583487
  var valid_583488 = query.getOrDefault("alt")
  valid_583488 = validateParameter(valid_583488, JString, required = false,
                                 default = newJString("json"))
  if valid_583488 != nil:
    section.add "alt", valid_583488
  var valid_583489 = query.getOrDefault("oauth_token")
  valid_583489 = validateParameter(valid_583489, JString, required = false,
                                 default = nil)
  if valid_583489 != nil:
    section.add "oauth_token", valid_583489
  var valid_583490 = query.getOrDefault("userIp")
  valid_583490 = validateParameter(valid_583490, JString, required = false,
                                 default = nil)
  if valid_583490 != nil:
    section.add "userIp", valid_583490
  var valid_583491 = query.getOrDefault("key")
  valid_583491 = validateParameter(valid_583491, JString, required = false,
                                 default = nil)
  if valid_583491 != nil:
    section.add "key", valid_583491
  var valid_583492 = query.getOrDefault("prettyPrint")
  valid_583492 = validateParameter(valid_583492, JBool, required = false,
                                 default = newJBool(true))
  if valid_583492 != nil:
    section.add "prettyPrint", valid_583492
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583493: Call_DfareportingTargetingTemplatesGet_583481;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one targeting template by ID.
  ## 
  let valid = call_583493.validator(path, query, header, formData, body)
  let scheme = call_583493.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583493.url(scheme.get, call_583493.host, call_583493.base,
                         call_583493.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583493, url, valid)

proc call*(call_583494: Call_DfareportingTargetingTemplatesGet_583481;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingTargetingTemplatesGet
  ## Gets one targeting template by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Targeting template ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583495 = newJObject()
  var query_583496 = newJObject()
  add(path_583495, "profileId", newJString(profileId))
  add(query_583496, "fields", newJString(fields))
  add(query_583496, "quotaUser", newJString(quotaUser))
  add(query_583496, "alt", newJString(alt))
  add(query_583496, "oauth_token", newJString(oauthToken))
  add(query_583496, "userIp", newJString(userIp))
  add(path_583495, "id", newJString(id))
  add(query_583496, "key", newJString(key))
  add(query_583496, "prettyPrint", newJBool(prettyPrint))
  result = call_583494.call(path_583495, query_583496, nil, nil, nil)

var dfareportingTargetingTemplatesGet* = Call_DfareportingTargetingTemplatesGet_583481(
    name: "dfareportingTargetingTemplatesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates/{id}",
    validator: validate_DfareportingTargetingTemplatesGet_583482,
    base: "/dfareporting/v3.2", url: url_DfareportingTargetingTemplatesGet_583483,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolePermissionGroupsList_583497 = ref object of OpenApiRestCall_579437
proc url_DfareportingUserRolePermissionGroupsList_583499(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRolePermissionGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolePermissionGroupsList_583498(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of all supported user role permission groups.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583500 = path.getOrDefault("profileId")
  valid_583500 = validateParameter(valid_583500, JString, required = true,
                                 default = nil)
  if valid_583500 != nil:
    section.add "profileId", valid_583500
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583501 = query.getOrDefault("fields")
  valid_583501 = validateParameter(valid_583501, JString, required = false,
                                 default = nil)
  if valid_583501 != nil:
    section.add "fields", valid_583501
  var valid_583502 = query.getOrDefault("quotaUser")
  valid_583502 = validateParameter(valid_583502, JString, required = false,
                                 default = nil)
  if valid_583502 != nil:
    section.add "quotaUser", valid_583502
  var valid_583503 = query.getOrDefault("alt")
  valid_583503 = validateParameter(valid_583503, JString, required = false,
                                 default = newJString("json"))
  if valid_583503 != nil:
    section.add "alt", valid_583503
  var valid_583504 = query.getOrDefault("oauth_token")
  valid_583504 = validateParameter(valid_583504, JString, required = false,
                                 default = nil)
  if valid_583504 != nil:
    section.add "oauth_token", valid_583504
  var valid_583505 = query.getOrDefault("userIp")
  valid_583505 = validateParameter(valid_583505, JString, required = false,
                                 default = nil)
  if valid_583505 != nil:
    section.add "userIp", valid_583505
  var valid_583506 = query.getOrDefault("key")
  valid_583506 = validateParameter(valid_583506, JString, required = false,
                                 default = nil)
  if valid_583506 != nil:
    section.add "key", valid_583506
  var valid_583507 = query.getOrDefault("prettyPrint")
  valid_583507 = validateParameter(valid_583507, JBool, required = false,
                                 default = newJBool(true))
  if valid_583507 != nil:
    section.add "prettyPrint", valid_583507
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583508: Call_DfareportingUserRolePermissionGroupsList_583497;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of all supported user role permission groups.
  ## 
  let valid = call_583508.validator(path, query, header, formData, body)
  let scheme = call_583508.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583508.url(scheme.get, call_583508.host, call_583508.base,
                         call_583508.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583508, url, valid)

proc call*(call_583509: Call_DfareportingUserRolePermissionGroupsList_583497;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolePermissionGroupsList
  ## Gets a list of all supported user role permission groups.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583510 = newJObject()
  var query_583511 = newJObject()
  add(path_583510, "profileId", newJString(profileId))
  add(query_583511, "fields", newJString(fields))
  add(query_583511, "quotaUser", newJString(quotaUser))
  add(query_583511, "alt", newJString(alt))
  add(query_583511, "oauth_token", newJString(oauthToken))
  add(query_583511, "userIp", newJString(userIp))
  add(query_583511, "key", newJString(key))
  add(query_583511, "prettyPrint", newJBool(prettyPrint))
  result = call_583509.call(path_583510, query_583511, nil, nil, nil)

var dfareportingUserRolePermissionGroupsList* = Call_DfareportingUserRolePermissionGroupsList_583497(
    name: "dfareportingUserRolePermissionGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/userRolePermissionGroups",
    validator: validate_DfareportingUserRolePermissionGroupsList_583498,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolePermissionGroupsList_583499,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolePermissionGroupsGet_583512 = ref object of OpenApiRestCall_579437
proc url_DfareportingUserRolePermissionGroupsGet_583514(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRolePermissionGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolePermissionGroupsGet_583513(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one user role permission group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User role permission group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583515 = path.getOrDefault("profileId")
  valid_583515 = validateParameter(valid_583515, JString, required = true,
                                 default = nil)
  if valid_583515 != nil:
    section.add "profileId", valid_583515
  var valid_583516 = path.getOrDefault("id")
  valid_583516 = validateParameter(valid_583516, JString, required = true,
                                 default = nil)
  if valid_583516 != nil:
    section.add "id", valid_583516
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583517 = query.getOrDefault("fields")
  valid_583517 = validateParameter(valid_583517, JString, required = false,
                                 default = nil)
  if valid_583517 != nil:
    section.add "fields", valid_583517
  var valid_583518 = query.getOrDefault("quotaUser")
  valid_583518 = validateParameter(valid_583518, JString, required = false,
                                 default = nil)
  if valid_583518 != nil:
    section.add "quotaUser", valid_583518
  var valid_583519 = query.getOrDefault("alt")
  valid_583519 = validateParameter(valid_583519, JString, required = false,
                                 default = newJString("json"))
  if valid_583519 != nil:
    section.add "alt", valid_583519
  var valid_583520 = query.getOrDefault("oauth_token")
  valid_583520 = validateParameter(valid_583520, JString, required = false,
                                 default = nil)
  if valid_583520 != nil:
    section.add "oauth_token", valid_583520
  var valid_583521 = query.getOrDefault("userIp")
  valid_583521 = validateParameter(valid_583521, JString, required = false,
                                 default = nil)
  if valid_583521 != nil:
    section.add "userIp", valid_583521
  var valid_583522 = query.getOrDefault("key")
  valid_583522 = validateParameter(valid_583522, JString, required = false,
                                 default = nil)
  if valid_583522 != nil:
    section.add "key", valid_583522
  var valid_583523 = query.getOrDefault("prettyPrint")
  valid_583523 = validateParameter(valid_583523, JBool, required = false,
                                 default = newJBool(true))
  if valid_583523 != nil:
    section.add "prettyPrint", valid_583523
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583524: Call_DfareportingUserRolePermissionGroupsGet_583512;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one user role permission group by ID.
  ## 
  let valid = call_583524.validator(path, query, header, formData, body)
  let scheme = call_583524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583524.url(scheme.get, call_583524.host, call_583524.base,
                         call_583524.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583524, url, valid)

proc call*(call_583525: Call_DfareportingUserRolePermissionGroupsGet_583512;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolePermissionGroupsGet
  ## Gets one user role permission group by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : User role permission group ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583526 = newJObject()
  var query_583527 = newJObject()
  add(path_583526, "profileId", newJString(profileId))
  add(query_583527, "fields", newJString(fields))
  add(query_583527, "quotaUser", newJString(quotaUser))
  add(query_583527, "alt", newJString(alt))
  add(query_583527, "oauth_token", newJString(oauthToken))
  add(query_583527, "userIp", newJString(userIp))
  add(path_583526, "id", newJString(id))
  add(query_583527, "key", newJString(key))
  add(query_583527, "prettyPrint", newJBool(prettyPrint))
  result = call_583525.call(path_583526, query_583527, nil, nil, nil)

var dfareportingUserRolePermissionGroupsGet* = Call_DfareportingUserRolePermissionGroupsGet_583512(
    name: "dfareportingUserRolePermissionGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/userRolePermissionGroups/{id}",
    validator: validate_DfareportingUserRolePermissionGroupsGet_583513,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolePermissionGroupsGet_583514,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolePermissionsList_583528 = ref object of OpenApiRestCall_579437
proc url_DfareportingUserRolePermissionsList_583530(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRolePermissions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolePermissionsList_583529(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of user role permissions, possibly filtered.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583531 = path.getOrDefault("profileId")
  valid_583531 = validateParameter(valid_583531, JString, required = true,
                                 default = nil)
  if valid_583531 != nil:
    section.add "profileId", valid_583531
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   ids: JArray
  ##      : Select only user role permissions with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583532 = query.getOrDefault("fields")
  valid_583532 = validateParameter(valid_583532, JString, required = false,
                                 default = nil)
  if valid_583532 != nil:
    section.add "fields", valid_583532
  var valid_583533 = query.getOrDefault("quotaUser")
  valid_583533 = validateParameter(valid_583533, JString, required = false,
                                 default = nil)
  if valid_583533 != nil:
    section.add "quotaUser", valid_583533
  var valid_583534 = query.getOrDefault("alt")
  valid_583534 = validateParameter(valid_583534, JString, required = false,
                                 default = newJString("json"))
  if valid_583534 != nil:
    section.add "alt", valid_583534
  var valid_583535 = query.getOrDefault("oauth_token")
  valid_583535 = validateParameter(valid_583535, JString, required = false,
                                 default = nil)
  if valid_583535 != nil:
    section.add "oauth_token", valid_583535
  var valid_583536 = query.getOrDefault("userIp")
  valid_583536 = validateParameter(valid_583536, JString, required = false,
                                 default = nil)
  if valid_583536 != nil:
    section.add "userIp", valid_583536
  var valid_583537 = query.getOrDefault("ids")
  valid_583537 = validateParameter(valid_583537, JArray, required = false,
                                 default = nil)
  if valid_583537 != nil:
    section.add "ids", valid_583537
  var valid_583538 = query.getOrDefault("key")
  valid_583538 = validateParameter(valid_583538, JString, required = false,
                                 default = nil)
  if valid_583538 != nil:
    section.add "key", valid_583538
  var valid_583539 = query.getOrDefault("prettyPrint")
  valid_583539 = validateParameter(valid_583539, JBool, required = false,
                                 default = newJBool(true))
  if valid_583539 != nil:
    section.add "prettyPrint", valid_583539
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583540: Call_DfareportingUserRolePermissionsList_583528;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of user role permissions, possibly filtered.
  ## 
  let valid = call_583540.validator(path, query, header, formData, body)
  let scheme = call_583540.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583540.url(scheme.get, call_583540.host, call_583540.base,
                         call_583540.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583540, url, valid)

proc call*(call_583541: Call_DfareportingUserRolePermissionsList_583528;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          ids: JsonNode = nil; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolePermissionsList
  ## Gets a list of user role permissions, possibly filtered.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   ids: JArray
  ##      : Select only user role permissions with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583542 = newJObject()
  var query_583543 = newJObject()
  add(path_583542, "profileId", newJString(profileId))
  add(query_583543, "fields", newJString(fields))
  add(query_583543, "quotaUser", newJString(quotaUser))
  add(query_583543, "alt", newJString(alt))
  add(query_583543, "oauth_token", newJString(oauthToken))
  add(query_583543, "userIp", newJString(userIp))
  if ids != nil:
    query_583543.add "ids", ids
  add(query_583543, "key", newJString(key))
  add(query_583543, "prettyPrint", newJBool(prettyPrint))
  result = call_583541.call(path_583542, query_583543, nil, nil, nil)

var dfareportingUserRolePermissionsList* = Call_DfareportingUserRolePermissionsList_583528(
    name: "dfareportingUserRolePermissionsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/userRolePermissions",
    validator: validate_DfareportingUserRolePermissionsList_583529,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolePermissionsList_583530,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolePermissionsGet_583544 = ref object of OpenApiRestCall_579437
proc url_DfareportingUserRolePermissionsGet_583546(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRolePermissions/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolePermissionsGet_583545(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one user role permission by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User role permission ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583547 = path.getOrDefault("profileId")
  valid_583547 = validateParameter(valid_583547, JString, required = true,
                                 default = nil)
  if valid_583547 != nil:
    section.add "profileId", valid_583547
  var valid_583548 = path.getOrDefault("id")
  valid_583548 = validateParameter(valid_583548, JString, required = true,
                                 default = nil)
  if valid_583548 != nil:
    section.add "id", valid_583548
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583549 = query.getOrDefault("fields")
  valid_583549 = validateParameter(valid_583549, JString, required = false,
                                 default = nil)
  if valid_583549 != nil:
    section.add "fields", valid_583549
  var valid_583550 = query.getOrDefault("quotaUser")
  valid_583550 = validateParameter(valid_583550, JString, required = false,
                                 default = nil)
  if valid_583550 != nil:
    section.add "quotaUser", valid_583550
  var valid_583551 = query.getOrDefault("alt")
  valid_583551 = validateParameter(valid_583551, JString, required = false,
                                 default = newJString("json"))
  if valid_583551 != nil:
    section.add "alt", valid_583551
  var valid_583552 = query.getOrDefault("oauth_token")
  valid_583552 = validateParameter(valid_583552, JString, required = false,
                                 default = nil)
  if valid_583552 != nil:
    section.add "oauth_token", valid_583552
  var valid_583553 = query.getOrDefault("userIp")
  valid_583553 = validateParameter(valid_583553, JString, required = false,
                                 default = nil)
  if valid_583553 != nil:
    section.add "userIp", valid_583553
  var valid_583554 = query.getOrDefault("key")
  valid_583554 = validateParameter(valid_583554, JString, required = false,
                                 default = nil)
  if valid_583554 != nil:
    section.add "key", valid_583554
  var valid_583555 = query.getOrDefault("prettyPrint")
  valid_583555 = validateParameter(valid_583555, JBool, required = false,
                                 default = newJBool(true))
  if valid_583555 != nil:
    section.add "prettyPrint", valid_583555
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583556: Call_DfareportingUserRolePermissionsGet_583544;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one user role permission by ID.
  ## 
  let valid = call_583556.validator(path, query, header, formData, body)
  let scheme = call_583556.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583556.url(scheme.get, call_583556.host, call_583556.base,
                         call_583556.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583556, url, valid)

proc call*(call_583557: Call_DfareportingUserRolePermissionsGet_583544;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolePermissionsGet
  ## Gets one user role permission by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : User role permission ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583558 = newJObject()
  var query_583559 = newJObject()
  add(path_583558, "profileId", newJString(profileId))
  add(query_583559, "fields", newJString(fields))
  add(query_583559, "quotaUser", newJString(quotaUser))
  add(query_583559, "alt", newJString(alt))
  add(query_583559, "oauth_token", newJString(oauthToken))
  add(query_583559, "userIp", newJString(userIp))
  add(path_583558, "id", newJString(id))
  add(query_583559, "key", newJString(key))
  add(query_583559, "prettyPrint", newJBool(prettyPrint))
  result = call_583557.call(path_583558, query_583559, nil, nil, nil)

var dfareportingUserRolePermissionsGet* = Call_DfareportingUserRolePermissionsGet_583544(
    name: "dfareportingUserRolePermissionsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/userRolePermissions/{id}",
    validator: validate_DfareportingUserRolePermissionsGet_583545,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolePermissionsGet_583546,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesUpdate_583583 = ref object of OpenApiRestCall_579437
proc url_DfareportingUserRolesUpdate_583585(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesUpdate_583584(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing user role.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583586 = path.getOrDefault("profileId")
  valid_583586 = validateParameter(valid_583586, JString, required = true,
                                 default = nil)
  if valid_583586 != nil:
    section.add "profileId", valid_583586
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583587 = query.getOrDefault("fields")
  valid_583587 = validateParameter(valid_583587, JString, required = false,
                                 default = nil)
  if valid_583587 != nil:
    section.add "fields", valid_583587
  var valid_583588 = query.getOrDefault("quotaUser")
  valid_583588 = validateParameter(valid_583588, JString, required = false,
                                 default = nil)
  if valid_583588 != nil:
    section.add "quotaUser", valid_583588
  var valid_583589 = query.getOrDefault("alt")
  valid_583589 = validateParameter(valid_583589, JString, required = false,
                                 default = newJString("json"))
  if valid_583589 != nil:
    section.add "alt", valid_583589
  var valid_583590 = query.getOrDefault("oauth_token")
  valid_583590 = validateParameter(valid_583590, JString, required = false,
                                 default = nil)
  if valid_583590 != nil:
    section.add "oauth_token", valid_583590
  var valid_583591 = query.getOrDefault("userIp")
  valid_583591 = validateParameter(valid_583591, JString, required = false,
                                 default = nil)
  if valid_583591 != nil:
    section.add "userIp", valid_583591
  var valid_583592 = query.getOrDefault("key")
  valid_583592 = validateParameter(valid_583592, JString, required = false,
                                 default = nil)
  if valid_583592 != nil:
    section.add "key", valid_583592
  var valid_583593 = query.getOrDefault("prettyPrint")
  valid_583593 = validateParameter(valid_583593, JBool, required = false,
                                 default = newJBool(true))
  if valid_583593 != nil:
    section.add "prettyPrint", valid_583593
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_583595: Call_DfareportingUserRolesUpdate_583583; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing user role.
  ## 
  let valid = call_583595.validator(path, query, header, formData, body)
  let scheme = call_583595.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583595.url(scheme.get, call_583595.host, call_583595.base,
                         call_583595.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583595, url, valid)

proc call*(call_583596: Call_DfareportingUserRolesUpdate_583583; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolesUpdate
  ## Updates an existing user role.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583597 = newJObject()
  var query_583598 = newJObject()
  var body_583599 = newJObject()
  add(path_583597, "profileId", newJString(profileId))
  add(query_583598, "fields", newJString(fields))
  add(query_583598, "quotaUser", newJString(quotaUser))
  add(query_583598, "alt", newJString(alt))
  add(query_583598, "oauth_token", newJString(oauthToken))
  add(query_583598, "userIp", newJString(userIp))
  add(query_583598, "key", newJString(key))
  if body != nil:
    body_583599 = body
  add(query_583598, "prettyPrint", newJBool(prettyPrint))
  result = call_583596.call(path_583597, query_583598, nil, nil, body_583599)

var dfareportingUserRolesUpdate* = Call_DfareportingUserRolesUpdate_583583(
    name: "dfareportingUserRolesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles",
    validator: validate_DfareportingUserRolesUpdate_583584,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesUpdate_583585,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesInsert_583600 = ref object of OpenApiRestCall_579437
proc url_DfareportingUserRolesInsert_583602(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesInsert_583601(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new user role.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583603 = path.getOrDefault("profileId")
  valid_583603 = validateParameter(valid_583603, JString, required = true,
                                 default = nil)
  if valid_583603 != nil:
    section.add "profileId", valid_583603
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583604 = query.getOrDefault("fields")
  valid_583604 = validateParameter(valid_583604, JString, required = false,
                                 default = nil)
  if valid_583604 != nil:
    section.add "fields", valid_583604
  var valid_583605 = query.getOrDefault("quotaUser")
  valid_583605 = validateParameter(valid_583605, JString, required = false,
                                 default = nil)
  if valid_583605 != nil:
    section.add "quotaUser", valid_583605
  var valid_583606 = query.getOrDefault("alt")
  valid_583606 = validateParameter(valid_583606, JString, required = false,
                                 default = newJString("json"))
  if valid_583606 != nil:
    section.add "alt", valid_583606
  var valid_583607 = query.getOrDefault("oauth_token")
  valid_583607 = validateParameter(valid_583607, JString, required = false,
                                 default = nil)
  if valid_583607 != nil:
    section.add "oauth_token", valid_583607
  var valid_583608 = query.getOrDefault("userIp")
  valid_583608 = validateParameter(valid_583608, JString, required = false,
                                 default = nil)
  if valid_583608 != nil:
    section.add "userIp", valid_583608
  var valid_583609 = query.getOrDefault("key")
  valid_583609 = validateParameter(valid_583609, JString, required = false,
                                 default = nil)
  if valid_583609 != nil:
    section.add "key", valid_583609
  var valid_583610 = query.getOrDefault("prettyPrint")
  valid_583610 = validateParameter(valid_583610, JBool, required = false,
                                 default = newJBool(true))
  if valid_583610 != nil:
    section.add "prettyPrint", valid_583610
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_583612: Call_DfareportingUserRolesInsert_583600; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new user role.
  ## 
  let valid = call_583612.validator(path, query, header, formData, body)
  let scheme = call_583612.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583612.url(scheme.get, call_583612.host, call_583612.base,
                         call_583612.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583612, url, valid)

proc call*(call_583613: Call_DfareportingUserRolesInsert_583600; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolesInsert
  ## Inserts a new user role.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583614 = newJObject()
  var query_583615 = newJObject()
  var body_583616 = newJObject()
  add(path_583614, "profileId", newJString(profileId))
  add(query_583615, "fields", newJString(fields))
  add(query_583615, "quotaUser", newJString(quotaUser))
  add(query_583615, "alt", newJString(alt))
  add(query_583615, "oauth_token", newJString(oauthToken))
  add(query_583615, "userIp", newJString(userIp))
  add(query_583615, "key", newJString(key))
  if body != nil:
    body_583616 = body
  add(query_583615, "prettyPrint", newJBool(prettyPrint))
  result = call_583613.call(path_583614, query_583615, nil, nil, body_583616)

var dfareportingUserRolesInsert* = Call_DfareportingUserRolesInsert_583600(
    name: "dfareportingUserRolesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles",
    validator: validate_DfareportingUserRolesInsert_583601,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesInsert_583602,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesList_583560 = ref object of OpenApiRestCall_579437
proc url_DfareportingUserRolesList_583562(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesList_583561(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of user roles, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583563 = path.getOrDefault("profileId")
  valid_583563 = validateParameter(valid_583563, JString, required = true,
                                 default = nil)
  if valid_583563 != nil:
    section.add "profileId", valid_583563
  result.add "path", section
  ## parameters in `query` object:
  ##   subaccountId: JString
  ##               : Select only user roles that belong to this subaccount.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "userrole*2015" will return objects with names like "userrole June 2015", "userrole April 2015", or simply "userrole 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "userrole" will match objects with name "my userrole", "userrole 2015", or simply "userrole".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   accountUserRoleOnly: JBool
  ##                      : Select only account level user roles not associated with any specific subaccount.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only user roles with the specified IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583564 = query.getOrDefault("subaccountId")
  valid_583564 = validateParameter(valid_583564, JString, required = false,
                                 default = nil)
  if valid_583564 != nil:
    section.add "subaccountId", valid_583564
  var valid_583565 = query.getOrDefault("fields")
  valid_583565 = validateParameter(valid_583565, JString, required = false,
                                 default = nil)
  if valid_583565 != nil:
    section.add "fields", valid_583565
  var valid_583566 = query.getOrDefault("pageToken")
  valid_583566 = validateParameter(valid_583566, JString, required = false,
                                 default = nil)
  if valid_583566 != nil:
    section.add "pageToken", valid_583566
  var valid_583567 = query.getOrDefault("quotaUser")
  valid_583567 = validateParameter(valid_583567, JString, required = false,
                                 default = nil)
  if valid_583567 != nil:
    section.add "quotaUser", valid_583567
  var valid_583568 = query.getOrDefault("sortField")
  valid_583568 = validateParameter(valid_583568, JString, required = false,
                                 default = newJString("ID"))
  if valid_583568 != nil:
    section.add "sortField", valid_583568
  var valid_583569 = query.getOrDefault("alt")
  valid_583569 = validateParameter(valid_583569, JString, required = false,
                                 default = newJString("json"))
  if valid_583569 != nil:
    section.add "alt", valid_583569
  var valid_583570 = query.getOrDefault("searchString")
  valid_583570 = validateParameter(valid_583570, JString, required = false,
                                 default = nil)
  if valid_583570 != nil:
    section.add "searchString", valid_583570
  var valid_583571 = query.getOrDefault("oauth_token")
  valid_583571 = validateParameter(valid_583571, JString, required = false,
                                 default = nil)
  if valid_583571 != nil:
    section.add "oauth_token", valid_583571
  var valid_583572 = query.getOrDefault("accountUserRoleOnly")
  valid_583572 = validateParameter(valid_583572, JBool, required = false, default = nil)
  if valid_583572 != nil:
    section.add "accountUserRoleOnly", valid_583572
  var valid_583573 = query.getOrDefault("userIp")
  valid_583573 = validateParameter(valid_583573, JString, required = false,
                                 default = nil)
  if valid_583573 != nil:
    section.add "userIp", valid_583573
  var valid_583574 = query.getOrDefault("maxResults")
  valid_583574 = validateParameter(valid_583574, JInt, required = false,
                                 default = newJInt(1000))
  if valid_583574 != nil:
    section.add "maxResults", valid_583574
  var valid_583575 = query.getOrDefault("ids")
  valid_583575 = validateParameter(valid_583575, JArray, required = false,
                                 default = nil)
  if valid_583575 != nil:
    section.add "ids", valid_583575
  var valid_583576 = query.getOrDefault("key")
  valid_583576 = validateParameter(valid_583576, JString, required = false,
                                 default = nil)
  if valid_583576 != nil:
    section.add "key", valid_583576
  var valid_583577 = query.getOrDefault("sortOrder")
  valid_583577 = validateParameter(valid_583577, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_583577 != nil:
    section.add "sortOrder", valid_583577
  var valid_583578 = query.getOrDefault("prettyPrint")
  valid_583578 = validateParameter(valid_583578, JBool, required = false,
                                 default = newJBool(true))
  if valid_583578 != nil:
    section.add "prettyPrint", valid_583578
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583579: Call_DfareportingUserRolesList_583560; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of user roles, possibly filtered. This method supports paging.
  ## 
  let valid = call_583579.validator(path, query, header, formData, body)
  let scheme = call_583579.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583579.url(scheme.get, call_583579.host, call_583579.base,
                         call_583579.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583579, url, valid)

proc call*(call_583580: Call_DfareportingUserRolesList_583560; profileId: string;
          subaccountId: string = ""; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = "";
          accountUserRoleOnly: bool = false; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolesList
  ## Retrieves a list of user roles, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   subaccountId: string
  ##               : Select only user roles that belong to this subaccount.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "userrole*2015" will return objects with names like "userrole June 2015", "userrole April 2015", or simply "userrole 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "userrole" will match objects with name "my userrole", "userrole 2015", or simply "userrole".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   accountUserRoleOnly: bool
  ##                      : Select only account level user roles not associated with any specific subaccount.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only user roles with the specified IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583581 = newJObject()
  var query_583582 = newJObject()
  add(path_583581, "profileId", newJString(profileId))
  add(query_583582, "subaccountId", newJString(subaccountId))
  add(query_583582, "fields", newJString(fields))
  add(query_583582, "pageToken", newJString(pageToken))
  add(query_583582, "quotaUser", newJString(quotaUser))
  add(query_583582, "sortField", newJString(sortField))
  add(query_583582, "alt", newJString(alt))
  add(query_583582, "searchString", newJString(searchString))
  add(query_583582, "oauth_token", newJString(oauthToken))
  add(query_583582, "accountUserRoleOnly", newJBool(accountUserRoleOnly))
  add(query_583582, "userIp", newJString(userIp))
  add(query_583582, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_583582.add "ids", ids
  add(query_583582, "key", newJString(key))
  add(query_583582, "sortOrder", newJString(sortOrder))
  add(query_583582, "prettyPrint", newJBool(prettyPrint))
  result = call_583580.call(path_583581, query_583582, nil, nil, nil)

var dfareportingUserRolesList* = Call_DfareportingUserRolesList_583560(
    name: "dfareportingUserRolesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles",
    validator: validate_DfareportingUserRolesList_583561,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesList_583562,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesPatch_583617 = ref object of OpenApiRestCall_579437
proc url_DfareportingUserRolesPatch_583619(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesPatch_583618(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing user role. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583620 = path.getOrDefault("profileId")
  valid_583620 = validateParameter(valid_583620, JString, required = true,
                                 default = nil)
  if valid_583620 != nil:
    section.add "profileId", valid_583620
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : User role ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583621 = query.getOrDefault("fields")
  valid_583621 = validateParameter(valid_583621, JString, required = false,
                                 default = nil)
  if valid_583621 != nil:
    section.add "fields", valid_583621
  var valid_583622 = query.getOrDefault("quotaUser")
  valid_583622 = validateParameter(valid_583622, JString, required = false,
                                 default = nil)
  if valid_583622 != nil:
    section.add "quotaUser", valid_583622
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_583623 = query.getOrDefault("id")
  valid_583623 = validateParameter(valid_583623, JString, required = true,
                                 default = nil)
  if valid_583623 != nil:
    section.add "id", valid_583623
  var valid_583624 = query.getOrDefault("alt")
  valid_583624 = validateParameter(valid_583624, JString, required = false,
                                 default = newJString("json"))
  if valid_583624 != nil:
    section.add "alt", valid_583624
  var valid_583625 = query.getOrDefault("oauth_token")
  valid_583625 = validateParameter(valid_583625, JString, required = false,
                                 default = nil)
  if valid_583625 != nil:
    section.add "oauth_token", valid_583625
  var valid_583626 = query.getOrDefault("userIp")
  valid_583626 = validateParameter(valid_583626, JString, required = false,
                                 default = nil)
  if valid_583626 != nil:
    section.add "userIp", valid_583626
  var valid_583627 = query.getOrDefault("key")
  valid_583627 = validateParameter(valid_583627, JString, required = false,
                                 default = nil)
  if valid_583627 != nil:
    section.add "key", valid_583627
  var valid_583628 = query.getOrDefault("prettyPrint")
  valid_583628 = validateParameter(valid_583628, JBool, required = false,
                                 default = newJBool(true))
  if valid_583628 != nil:
    section.add "prettyPrint", valid_583628
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_583630: Call_DfareportingUserRolesPatch_583617; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing user role. This method supports patch semantics.
  ## 
  let valid = call_583630.validator(path, query, header, formData, body)
  let scheme = call_583630.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583630.url(scheme.get, call_583630.host, call_583630.base,
                         call_583630.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583630, url, valid)

proc call*(call_583631: Call_DfareportingUserRolesPatch_583617; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolesPatch
  ## Updates an existing user role. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : User role ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583632 = newJObject()
  var query_583633 = newJObject()
  var body_583634 = newJObject()
  add(path_583632, "profileId", newJString(profileId))
  add(query_583633, "fields", newJString(fields))
  add(query_583633, "quotaUser", newJString(quotaUser))
  add(query_583633, "id", newJString(id))
  add(query_583633, "alt", newJString(alt))
  add(query_583633, "oauth_token", newJString(oauthToken))
  add(query_583633, "userIp", newJString(userIp))
  add(query_583633, "key", newJString(key))
  if body != nil:
    body_583634 = body
  add(query_583633, "prettyPrint", newJBool(prettyPrint))
  result = call_583631.call(path_583632, query_583633, nil, nil, body_583634)

var dfareportingUserRolesPatch* = Call_DfareportingUserRolesPatch_583617(
    name: "dfareportingUserRolesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles",
    validator: validate_DfareportingUserRolesPatch_583618,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesPatch_583619,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesGet_583635 = ref object of OpenApiRestCall_579437
proc url_DfareportingUserRolesGet_583637(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesGet_583636(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one user role by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User role ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583638 = path.getOrDefault("profileId")
  valid_583638 = validateParameter(valid_583638, JString, required = true,
                                 default = nil)
  if valid_583638 != nil:
    section.add "profileId", valid_583638
  var valid_583639 = path.getOrDefault("id")
  valid_583639 = validateParameter(valid_583639, JString, required = true,
                                 default = nil)
  if valid_583639 != nil:
    section.add "id", valid_583639
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583640 = query.getOrDefault("fields")
  valid_583640 = validateParameter(valid_583640, JString, required = false,
                                 default = nil)
  if valid_583640 != nil:
    section.add "fields", valid_583640
  var valid_583641 = query.getOrDefault("quotaUser")
  valid_583641 = validateParameter(valid_583641, JString, required = false,
                                 default = nil)
  if valid_583641 != nil:
    section.add "quotaUser", valid_583641
  var valid_583642 = query.getOrDefault("alt")
  valid_583642 = validateParameter(valid_583642, JString, required = false,
                                 default = newJString("json"))
  if valid_583642 != nil:
    section.add "alt", valid_583642
  var valid_583643 = query.getOrDefault("oauth_token")
  valid_583643 = validateParameter(valid_583643, JString, required = false,
                                 default = nil)
  if valid_583643 != nil:
    section.add "oauth_token", valid_583643
  var valid_583644 = query.getOrDefault("userIp")
  valid_583644 = validateParameter(valid_583644, JString, required = false,
                                 default = nil)
  if valid_583644 != nil:
    section.add "userIp", valid_583644
  var valid_583645 = query.getOrDefault("key")
  valid_583645 = validateParameter(valid_583645, JString, required = false,
                                 default = nil)
  if valid_583645 != nil:
    section.add "key", valid_583645
  var valid_583646 = query.getOrDefault("prettyPrint")
  valid_583646 = validateParameter(valid_583646, JBool, required = false,
                                 default = newJBool(true))
  if valid_583646 != nil:
    section.add "prettyPrint", valid_583646
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583647: Call_DfareportingUserRolesGet_583635; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one user role by ID.
  ## 
  let valid = call_583647.validator(path, query, header, formData, body)
  let scheme = call_583647.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583647.url(scheme.get, call_583647.host, call_583647.base,
                         call_583647.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583647, url, valid)

proc call*(call_583648: Call_DfareportingUserRolesGet_583635; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolesGet
  ## Gets one user role by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : User role ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583649 = newJObject()
  var query_583650 = newJObject()
  add(path_583649, "profileId", newJString(profileId))
  add(query_583650, "fields", newJString(fields))
  add(query_583650, "quotaUser", newJString(quotaUser))
  add(query_583650, "alt", newJString(alt))
  add(query_583650, "oauth_token", newJString(oauthToken))
  add(query_583650, "userIp", newJString(userIp))
  add(path_583649, "id", newJString(id))
  add(query_583650, "key", newJString(key))
  add(query_583650, "prettyPrint", newJBool(prettyPrint))
  result = call_583648.call(path_583649, query_583650, nil, nil, nil)

var dfareportingUserRolesGet* = Call_DfareportingUserRolesGet_583635(
    name: "dfareportingUserRolesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles/{id}",
    validator: validate_DfareportingUserRolesGet_583636,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesGet_583637,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesDelete_583651 = ref object of OpenApiRestCall_579437
proc url_DfareportingUserRolesDelete_583653(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesDelete_583652(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing user role.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User role ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583654 = path.getOrDefault("profileId")
  valid_583654 = validateParameter(valid_583654, JString, required = true,
                                 default = nil)
  if valid_583654 != nil:
    section.add "profileId", valid_583654
  var valid_583655 = path.getOrDefault("id")
  valid_583655 = validateParameter(valid_583655, JString, required = true,
                                 default = nil)
  if valid_583655 != nil:
    section.add "id", valid_583655
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583656 = query.getOrDefault("fields")
  valid_583656 = validateParameter(valid_583656, JString, required = false,
                                 default = nil)
  if valid_583656 != nil:
    section.add "fields", valid_583656
  var valid_583657 = query.getOrDefault("quotaUser")
  valid_583657 = validateParameter(valid_583657, JString, required = false,
                                 default = nil)
  if valid_583657 != nil:
    section.add "quotaUser", valid_583657
  var valid_583658 = query.getOrDefault("alt")
  valid_583658 = validateParameter(valid_583658, JString, required = false,
                                 default = newJString("json"))
  if valid_583658 != nil:
    section.add "alt", valid_583658
  var valid_583659 = query.getOrDefault("oauth_token")
  valid_583659 = validateParameter(valid_583659, JString, required = false,
                                 default = nil)
  if valid_583659 != nil:
    section.add "oauth_token", valid_583659
  var valid_583660 = query.getOrDefault("userIp")
  valid_583660 = validateParameter(valid_583660, JString, required = false,
                                 default = nil)
  if valid_583660 != nil:
    section.add "userIp", valid_583660
  var valid_583661 = query.getOrDefault("key")
  valid_583661 = validateParameter(valid_583661, JString, required = false,
                                 default = nil)
  if valid_583661 != nil:
    section.add "key", valid_583661
  var valid_583662 = query.getOrDefault("prettyPrint")
  valid_583662 = validateParameter(valid_583662, JBool, required = false,
                                 default = newJBool(true))
  if valid_583662 != nil:
    section.add "prettyPrint", valid_583662
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583663: Call_DfareportingUserRolesDelete_583651; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing user role.
  ## 
  let valid = call_583663.validator(path, query, header, formData, body)
  let scheme = call_583663.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583663.url(scheme.get, call_583663.host, call_583663.base,
                         call_583663.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583663, url, valid)

proc call*(call_583664: Call_DfareportingUserRolesDelete_583651; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolesDelete
  ## Deletes an existing user role.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : User role ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583665 = newJObject()
  var query_583666 = newJObject()
  add(path_583665, "profileId", newJString(profileId))
  add(query_583666, "fields", newJString(fields))
  add(query_583666, "quotaUser", newJString(quotaUser))
  add(query_583666, "alt", newJString(alt))
  add(query_583666, "oauth_token", newJString(oauthToken))
  add(query_583666, "userIp", newJString(userIp))
  add(path_583665, "id", newJString(id))
  add(query_583666, "key", newJString(key))
  add(query_583666, "prettyPrint", newJBool(prettyPrint))
  result = call_583664.call(path_583665, query_583666, nil, nil, nil)

var dfareportingUserRolesDelete* = Call_DfareportingUserRolesDelete_583651(
    name: "dfareportingUserRolesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles/{id}",
    validator: validate_DfareportingUserRolesDelete_583652,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesDelete_583653,
    schemes: {Scheme.Https})
type
  Call_DfareportingVideoFormatsList_583667 = ref object of OpenApiRestCall_579437
proc url_DfareportingVideoFormatsList_583669(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/videoFormats")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingVideoFormatsList_583668(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available video formats.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583670 = path.getOrDefault("profileId")
  valid_583670 = validateParameter(valid_583670, JString, required = true,
                                 default = nil)
  if valid_583670 != nil:
    section.add "profileId", valid_583670
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583671 = query.getOrDefault("fields")
  valid_583671 = validateParameter(valid_583671, JString, required = false,
                                 default = nil)
  if valid_583671 != nil:
    section.add "fields", valid_583671
  var valid_583672 = query.getOrDefault("quotaUser")
  valid_583672 = validateParameter(valid_583672, JString, required = false,
                                 default = nil)
  if valid_583672 != nil:
    section.add "quotaUser", valid_583672
  var valid_583673 = query.getOrDefault("alt")
  valid_583673 = validateParameter(valid_583673, JString, required = false,
                                 default = newJString("json"))
  if valid_583673 != nil:
    section.add "alt", valid_583673
  var valid_583674 = query.getOrDefault("oauth_token")
  valid_583674 = validateParameter(valid_583674, JString, required = false,
                                 default = nil)
  if valid_583674 != nil:
    section.add "oauth_token", valid_583674
  var valid_583675 = query.getOrDefault("userIp")
  valid_583675 = validateParameter(valid_583675, JString, required = false,
                                 default = nil)
  if valid_583675 != nil:
    section.add "userIp", valid_583675
  var valid_583676 = query.getOrDefault("key")
  valid_583676 = validateParameter(valid_583676, JString, required = false,
                                 default = nil)
  if valid_583676 != nil:
    section.add "key", valid_583676
  var valid_583677 = query.getOrDefault("prettyPrint")
  valid_583677 = validateParameter(valid_583677, JBool, required = false,
                                 default = newJBool(true))
  if valid_583677 != nil:
    section.add "prettyPrint", valid_583677
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583678: Call_DfareportingVideoFormatsList_583667; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists available video formats.
  ## 
  let valid = call_583678.validator(path, query, header, formData, body)
  let scheme = call_583678.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583678.url(scheme.get, call_583678.host, call_583678.base,
                         call_583678.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583678, url, valid)

proc call*(call_583679: Call_DfareportingVideoFormatsList_583667;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingVideoFormatsList
  ## Lists available video formats.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583680 = newJObject()
  var query_583681 = newJObject()
  add(path_583680, "profileId", newJString(profileId))
  add(query_583681, "fields", newJString(fields))
  add(query_583681, "quotaUser", newJString(quotaUser))
  add(query_583681, "alt", newJString(alt))
  add(query_583681, "oauth_token", newJString(oauthToken))
  add(query_583681, "userIp", newJString(userIp))
  add(query_583681, "key", newJString(key))
  add(query_583681, "prettyPrint", newJBool(prettyPrint))
  result = call_583679.call(path_583680, query_583681, nil, nil, nil)

var dfareportingVideoFormatsList* = Call_DfareportingVideoFormatsList_583667(
    name: "dfareportingVideoFormatsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/videoFormats",
    validator: validate_DfareportingVideoFormatsList_583668,
    base: "/dfareporting/v3.2", url: url_DfareportingVideoFormatsList_583669,
    schemes: {Scheme.Https})
type
  Call_DfareportingVideoFormatsGet_583682 = ref object of OpenApiRestCall_579437
proc url_DfareportingVideoFormatsGet_583684(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/videoFormats/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingVideoFormatsGet_583683(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one video format by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JInt (required)
  ##     : Video format ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_583685 = path.getOrDefault("profileId")
  valid_583685 = validateParameter(valid_583685, JString, required = true,
                                 default = nil)
  if valid_583685 != nil:
    section.add "profileId", valid_583685
  var valid_583686 = path.getOrDefault("id")
  valid_583686 = validateParameter(valid_583686, JInt, required = true, default = nil)
  if valid_583686 != nil:
    section.add "id", valid_583686
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_583687 = query.getOrDefault("fields")
  valid_583687 = validateParameter(valid_583687, JString, required = false,
                                 default = nil)
  if valid_583687 != nil:
    section.add "fields", valid_583687
  var valid_583688 = query.getOrDefault("quotaUser")
  valid_583688 = validateParameter(valid_583688, JString, required = false,
                                 default = nil)
  if valid_583688 != nil:
    section.add "quotaUser", valid_583688
  var valid_583689 = query.getOrDefault("alt")
  valid_583689 = validateParameter(valid_583689, JString, required = false,
                                 default = newJString("json"))
  if valid_583689 != nil:
    section.add "alt", valid_583689
  var valid_583690 = query.getOrDefault("oauth_token")
  valid_583690 = validateParameter(valid_583690, JString, required = false,
                                 default = nil)
  if valid_583690 != nil:
    section.add "oauth_token", valid_583690
  var valid_583691 = query.getOrDefault("userIp")
  valid_583691 = validateParameter(valid_583691, JString, required = false,
                                 default = nil)
  if valid_583691 != nil:
    section.add "userIp", valid_583691
  var valid_583692 = query.getOrDefault("key")
  valid_583692 = validateParameter(valid_583692, JString, required = false,
                                 default = nil)
  if valid_583692 != nil:
    section.add "key", valid_583692
  var valid_583693 = query.getOrDefault("prettyPrint")
  valid_583693 = validateParameter(valid_583693, JBool, required = false,
                                 default = newJBool(true))
  if valid_583693 != nil:
    section.add "prettyPrint", valid_583693
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_583694: Call_DfareportingVideoFormatsGet_583682; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one video format by ID.
  ## 
  let valid = call_583694.validator(path, query, header, formData, body)
  let scheme = call_583694.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_583694.url(scheme.get, call_583694.host, call_583694.base,
                         call_583694.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_583694, url, valid)

proc call*(call_583695: Call_DfareportingVideoFormatsGet_583682; profileId: string;
          id: int; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingVideoFormatsGet
  ## Gets one video format by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: int (required)
  ##     : Video format ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_583696 = newJObject()
  var query_583697 = newJObject()
  add(path_583696, "profileId", newJString(profileId))
  add(query_583697, "fields", newJString(fields))
  add(query_583697, "quotaUser", newJString(quotaUser))
  add(query_583697, "alt", newJString(alt))
  add(query_583697, "oauth_token", newJString(oauthToken))
  add(query_583697, "userIp", newJString(userIp))
  add(path_583696, "id", newJInt(id))
  add(query_583697, "key", newJString(key))
  add(query_583697, "prettyPrint", newJBool(prettyPrint))
  result = call_583695.call(path_583696, query_583697, nil, nil, nil)

var dfareportingVideoFormatsGet* = Call_DfareportingVideoFormatsGet_583682(
    name: "dfareportingVideoFormatsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/videoFormats/{id}",
    validator: validate_DfareportingVideoFormatsGet_583683,
    base: "/dfareporting/v3.2", url: url_DfareportingVideoFormatsGet_583684,
    schemes: {Scheme.Https})
export
  rest

type
  GoogleAuth = ref object
    endpoint*: Uri
    token: string
    expiry*: float64
    issued*: float64
    email: string
    key: string
    scope*: seq[string]
    form: string
    digest: Hash

const
  endpoint = "https://www.googleapis.com/oauth2/v4/token".parseUri
var auth = GoogleAuth(endpoint: endpoint)
proc hash(auth: GoogleAuth): Hash =
  ## yield differing values for effectively different auth payloads
  result = hash($auth.endpoint)
  result = result !& hash(auth.email)
  result = result !& hash(auth.key)
  result = result !& hash(auth.scope.join(" "))
  result = !$result

proc newAuthenticator*(path: string): GoogleAuth =
  let
    input = readFile(path)
    js = parseJson(input)
  auth.email = js["client_email"].getStr
  auth.key = js["private_key"].getStr
  result = auth

proc store(auth: var GoogleAuth; token: string; expiry: int; form: string) =
  auth.token = token
  auth.issued = epochTime()
  auth.expiry = auth.issued + expiry.float64
  auth.form = form
  auth.digest = auth.hash

proc authenticate*(fresh: float64 = -3600.0; lifetime: int = 3600): Future[bool] {.async.} =
  ## get or refresh an authentication token; provide `fresh`
  ## to ensure that the token won't expire in the next N seconds.
  ## provide `lifetime` to indicate how long the token should last.
  let clock = epochTime()
  if auth.expiry > clock + fresh:
    if auth.hash == auth.digest:
      return true
  let
    expiry = clock.int + lifetime
    header = JOSEHeader(alg: RS256, typ: "JWT")
    claims = %*{"iss": auth.email, "scope": auth.scope.join(" "),
              "aud": "https://www.googleapis.com/oauth2/v4/token", "exp": expiry,
              "iat": clock.int}
  var tok = JWT(header: header, claims: toClaims(claims))
  tok.sign(auth.key)
  let post = encodeQuery({"grant_type": "urn:ietf:params:oauth:grant-type:jwt-bearer",
                       "assertion": $tok}, usePlus = false, omitEq = false)
  var client = newAsyncHttpClient()
  client.headers = newHttpHeaders({"Content-Type": "application/x-www-form-urlencoded",
                                 "Content-Length": $post.len})
  let response = await client.request($auth.endpoint, HttpPost, body = post)
  if not response.code.is2xx:
    return false
  let body = await response.body
  client.close
  try:
    let js = parseJson(body)
    auth.store(js["access_token"].getStr, js["expires_in"].getInt,
               js["token_type"].getStr)
  except KeyError:
    return false
  except JsonParsingError:
    return false
  return true

proc composeQueryString(query: JsonNode): string =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs, usePlus = false, omitEq = false)

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  var headers = massageHeaders(input.getOrDefault("header"))
  let body = input.getOrDefault("body").getStr
  if auth.scope.len == 0:
    raise newException(ValueError, "specify authentication scopes")
  if not waitfor authenticate(fresh = 10.0):
    raise newException(IOError, "unable to refresh authentication token")
  headers.add ("Authorization", auth.form & " " & auth.token)
  headers.add ("Content-Type", "application/json")
  headers.add ("Content-Length", $body.len)
  result = newRecallable(call, url, headers, body = body)
