
import
  json, options, hashes, uri, rest, os, uri, strutils, times, httpcore, httpclient,
  asyncdispatch, jwt

## auto-generated via openapi macro
## title: DCM/DFA Reporting And Trafficking
## version: v3.2
## termsOfService: https://developers.google.com/terms/
## license:
##     name: Creative Commons Attribution 3.0
##     url: http://creativecommons.org/licenses/by/3.0/
## 
## Manages your DoubleClick Campaign Manager ad campaigns and reports.
## 
## https://developers.google.com/doubleclick-advertisers/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_578364 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_578364](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_578364): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  gcpServiceName = "dfareporting"
proc composeQueryString(query: JsonNode): string
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_DfareportingFilesGet_578635 = ref object of OpenApiRestCall_578364
proc url_DfareportingFilesGet_578637(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "reportId" in path, "`reportId` is a required path parameter"
  assert "fileId" in path, "`fileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId"),
               (kind: ConstantSegment, value: "/files/"),
               (kind: VariableSegment, value: "fileId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFilesGet_578636(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a report file by its report ID and file ID. This method supports media download.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   fileId: JString (required)
  ##         : The ID of the report file.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `fileId` field"
  var valid_578763 = path.getOrDefault("fileId")
  valid_578763 = validateParameter(valid_578763, JString, required = true,
                                 default = nil)
  if valid_578763 != nil:
    section.add "fileId", valid_578763
  var valid_578764 = path.getOrDefault("reportId")
  valid_578764 = validateParameter(valid_578764, JString, required = true,
                                 default = nil)
  if valid_578764 != nil:
    section.add "reportId", valid_578764
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_578765 = query.getOrDefault("key")
  valid_578765 = validateParameter(valid_578765, JString, required = false,
                                 default = nil)
  if valid_578765 != nil:
    section.add "key", valid_578765
  var valid_578779 = query.getOrDefault("prettyPrint")
  valid_578779 = validateParameter(valid_578779, JBool, required = false,
                                 default = newJBool(true))
  if valid_578779 != nil:
    section.add "prettyPrint", valid_578779
  var valid_578780 = query.getOrDefault("oauth_token")
  valid_578780 = validateParameter(valid_578780, JString, required = false,
                                 default = nil)
  if valid_578780 != nil:
    section.add "oauth_token", valid_578780
  var valid_578781 = query.getOrDefault("alt")
  valid_578781 = validateParameter(valid_578781, JString, required = false,
                                 default = newJString("json"))
  if valid_578781 != nil:
    section.add "alt", valid_578781
  var valid_578782 = query.getOrDefault("userIp")
  valid_578782 = validateParameter(valid_578782, JString, required = false,
                                 default = nil)
  if valid_578782 != nil:
    section.add "userIp", valid_578782
  var valid_578783 = query.getOrDefault("quotaUser")
  valid_578783 = validateParameter(valid_578783, JString, required = false,
                                 default = nil)
  if valid_578783 != nil:
    section.add "quotaUser", valid_578783
  var valid_578784 = query.getOrDefault("fields")
  valid_578784 = validateParameter(valid_578784, JString, required = false,
                                 default = nil)
  if valid_578784 != nil:
    section.add "fields", valid_578784
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_578807: Call_DfareportingFilesGet_578635; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a report file by its report ID and file ID. This method supports media download.
  ## 
  let valid = call_578807.validator(path, query, header, formData, body)
  let scheme = call_578807.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_578807.url(scheme.get, call_578807.host, call_578807.base,
                         call_578807.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_578807, url, valid)

proc call*(call_578878: Call_DfareportingFilesGet_578635; fileId: string;
          reportId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingFilesGet
  ## Retrieves a report file by its report ID and file ID. This method supports media download.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fileId: string (required)
  ##         : The ID of the report file.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_578879 = newJObject()
  var query_578881 = newJObject()
  add(query_578881, "key", newJString(key))
  add(query_578881, "prettyPrint", newJBool(prettyPrint))
  add(query_578881, "oauth_token", newJString(oauthToken))
  add(query_578881, "alt", newJString(alt))
  add(query_578881, "userIp", newJString(userIp))
  add(query_578881, "quotaUser", newJString(quotaUser))
  add(path_578879, "fileId", newJString(fileId))
  add(path_578879, "reportId", newJString(reportId))
  add(query_578881, "fields", newJString(fields))
  result = call_578878.call(path_578879, query_578881, nil, nil, nil)

var dfareportingFilesGet* = Call_DfareportingFilesGet_578635(
    name: "dfareportingFilesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/reports/{reportId}/files/{fileId}",
    validator: validate_DfareportingFilesGet_578636, base: "/dfareporting/v3.2",
    url: url_DfareportingFilesGet_578637, schemes: {Scheme.Https})
type
  Call_DfareportingUserProfilesList_578920 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserProfilesList_578922(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  result.path = base & route

proc validate_DfareportingUserProfilesList_578921(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves list of user profiles for a user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_578923 = query.getOrDefault("key")
  valid_578923 = validateParameter(valid_578923, JString, required = false,
                                 default = nil)
  if valid_578923 != nil:
    section.add "key", valid_578923
  var valid_578924 = query.getOrDefault("prettyPrint")
  valid_578924 = validateParameter(valid_578924, JBool, required = false,
                                 default = newJBool(true))
  if valid_578924 != nil:
    section.add "prettyPrint", valid_578924
  var valid_578925 = query.getOrDefault("oauth_token")
  valid_578925 = validateParameter(valid_578925, JString, required = false,
                                 default = nil)
  if valid_578925 != nil:
    section.add "oauth_token", valid_578925
  var valid_578926 = query.getOrDefault("alt")
  valid_578926 = validateParameter(valid_578926, JString, required = false,
                                 default = newJString("json"))
  if valid_578926 != nil:
    section.add "alt", valid_578926
  var valid_578927 = query.getOrDefault("userIp")
  valid_578927 = validateParameter(valid_578927, JString, required = false,
                                 default = nil)
  if valid_578927 != nil:
    section.add "userIp", valid_578927
  var valid_578928 = query.getOrDefault("quotaUser")
  valid_578928 = validateParameter(valid_578928, JString, required = false,
                                 default = nil)
  if valid_578928 != nil:
    section.add "quotaUser", valid_578928
  var valid_578929 = query.getOrDefault("fields")
  valid_578929 = validateParameter(valid_578929, JString, required = false,
                                 default = nil)
  if valid_578929 != nil:
    section.add "fields", valid_578929
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_578930: Call_DfareportingUserProfilesList_578920; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves list of user profiles for a user.
  ## 
  let valid = call_578930.validator(path, query, header, formData, body)
  let scheme = call_578930.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_578930.url(scheme.get, call_578930.host, call_578930.base,
                         call_578930.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_578930, url, valid)

proc call*(call_578931: Call_DfareportingUserProfilesList_578920; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingUserProfilesList
  ## Retrieves list of user profiles for a user.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var query_578932 = newJObject()
  add(query_578932, "key", newJString(key))
  add(query_578932, "prettyPrint", newJBool(prettyPrint))
  add(query_578932, "oauth_token", newJString(oauthToken))
  add(query_578932, "alt", newJString(alt))
  add(query_578932, "userIp", newJString(userIp))
  add(query_578932, "quotaUser", newJString(quotaUser))
  add(query_578932, "fields", newJString(fields))
  result = call_578931.call(nil, query_578932, nil, nil, nil)

var dfareportingUserProfilesList* = Call_DfareportingUserProfilesList_578920(
    name: "dfareportingUserProfilesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles",
    validator: validate_DfareportingUserProfilesList_578921,
    base: "/dfareporting/v3.2", url: url_DfareportingUserProfilesList_578922,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserProfilesGet_578933 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserProfilesGet_578935(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserProfilesGet_578934(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one user profile by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_578936 = path.getOrDefault("profileId")
  valid_578936 = validateParameter(valid_578936, JString, required = true,
                                 default = nil)
  if valid_578936 != nil:
    section.add "profileId", valid_578936
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_578937 = query.getOrDefault("key")
  valid_578937 = validateParameter(valid_578937, JString, required = false,
                                 default = nil)
  if valid_578937 != nil:
    section.add "key", valid_578937
  var valid_578938 = query.getOrDefault("prettyPrint")
  valid_578938 = validateParameter(valid_578938, JBool, required = false,
                                 default = newJBool(true))
  if valid_578938 != nil:
    section.add "prettyPrint", valid_578938
  var valid_578939 = query.getOrDefault("oauth_token")
  valid_578939 = validateParameter(valid_578939, JString, required = false,
                                 default = nil)
  if valid_578939 != nil:
    section.add "oauth_token", valid_578939
  var valid_578940 = query.getOrDefault("alt")
  valid_578940 = validateParameter(valid_578940, JString, required = false,
                                 default = newJString("json"))
  if valid_578940 != nil:
    section.add "alt", valid_578940
  var valid_578941 = query.getOrDefault("userIp")
  valid_578941 = validateParameter(valid_578941, JString, required = false,
                                 default = nil)
  if valid_578941 != nil:
    section.add "userIp", valid_578941
  var valid_578942 = query.getOrDefault("quotaUser")
  valid_578942 = validateParameter(valid_578942, JString, required = false,
                                 default = nil)
  if valid_578942 != nil:
    section.add "quotaUser", valid_578942
  var valid_578943 = query.getOrDefault("fields")
  valid_578943 = validateParameter(valid_578943, JString, required = false,
                                 default = nil)
  if valid_578943 != nil:
    section.add "fields", valid_578943
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_578944: Call_DfareportingUserProfilesGet_578933; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one user profile by ID.
  ## 
  let valid = call_578944.validator(path, query, header, formData, body)
  let scheme = call_578944.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_578944.url(scheme.get, call_578944.host, call_578944.base,
                         call_578944.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_578944, url, valid)

proc call*(call_578945: Call_DfareportingUserProfilesGet_578933; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingUserProfilesGet
  ## Gets one user profile by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : The user profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_578946 = newJObject()
  var query_578947 = newJObject()
  add(query_578947, "key", newJString(key))
  add(query_578947, "prettyPrint", newJBool(prettyPrint))
  add(query_578947, "oauth_token", newJString(oauthToken))
  add(path_578946, "profileId", newJString(profileId))
  add(query_578947, "alt", newJString(alt))
  add(query_578947, "userIp", newJString(userIp))
  add(query_578947, "quotaUser", newJString(quotaUser))
  add(query_578947, "fields", newJString(fields))
  result = call_578945.call(path_578946, query_578947, nil, nil, nil)

var dfareportingUserProfilesGet* = Call_DfareportingUserProfilesGet_578933(
    name: "dfareportingUserProfilesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}",
    validator: validate_DfareportingUserProfilesGet_578934,
    base: "/dfareporting/v3.2", url: url_DfareportingUserProfilesGet_578935,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountActiveAdSummariesGet_578948 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountActiveAdSummariesGet_578950(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "summaryAccountId" in path,
        "`summaryAccountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountActiveAdSummaries/"),
               (kind: VariableSegment, value: "summaryAccountId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountActiveAdSummariesGet_578949(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the account's active ad summary by account ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   summaryAccountId: JString (required)
  ##                   : Account ID.
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `summaryAccountId` field"
  var valid_578951 = path.getOrDefault("summaryAccountId")
  valid_578951 = validateParameter(valid_578951, JString, required = true,
                                 default = nil)
  if valid_578951 != nil:
    section.add "summaryAccountId", valid_578951
  var valid_578952 = path.getOrDefault("profileId")
  valid_578952 = validateParameter(valid_578952, JString, required = true,
                                 default = nil)
  if valid_578952 != nil:
    section.add "profileId", valid_578952
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_578953 = query.getOrDefault("key")
  valid_578953 = validateParameter(valid_578953, JString, required = false,
                                 default = nil)
  if valid_578953 != nil:
    section.add "key", valid_578953
  var valid_578954 = query.getOrDefault("prettyPrint")
  valid_578954 = validateParameter(valid_578954, JBool, required = false,
                                 default = newJBool(true))
  if valid_578954 != nil:
    section.add "prettyPrint", valid_578954
  var valid_578955 = query.getOrDefault("oauth_token")
  valid_578955 = validateParameter(valid_578955, JString, required = false,
                                 default = nil)
  if valid_578955 != nil:
    section.add "oauth_token", valid_578955
  var valid_578956 = query.getOrDefault("alt")
  valid_578956 = validateParameter(valid_578956, JString, required = false,
                                 default = newJString("json"))
  if valid_578956 != nil:
    section.add "alt", valid_578956
  var valid_578957 = query.getOrDefault("userIp")
  valid_578957 = validateParameter(valid_578957, JString, required = false,
                                 default = nil)
  if valid_578957 != nil:
    section.add "userIp", valid_578957
  var valid_578958 = query.getOrDefault("quotaUser")
  valid_578958 = validateParameter(valid_578958, JString, required = false,
                                 default = nil)
  if valid_578958 != nil:
    section.add "quotaUser", valid_578958
  var valid_578959 = query.getOrDefault("fields")
  valid_578959 = validateParameter(valid_578959, JString, required = false,
                                 default = nil)
  if valid_578959 != nil:
    section.add "fields", valid_578959
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_578960: Call_DfareportingAccountActiveAdSummariesGet_578948;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the account's active ad summary by account ID.
  ## 
  let valid = call_578960.validator(path, query, header, formData, body)
  let scheme = call_578960.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_578960.url(scheme.get, call_578960.host, call_578960.base,
                         call_578960.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_578960, url, valid)

proc call*(call_578961: Call_DfareportingAccountActiveAdSummariesGet_578948;
          summaryAccountId: string; profileId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingAccountActiveAdSummariesGet
  ## Gets the account's active ad summary by account ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   summaryAccountId: string (required)
  ##                   : Account ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_578962 = newJObject()
  var query_578963 = newJObject()
  add(query_578963, "key", newJString(key))
  add(query_578963, "prettyPrint", newJBool(prettyPrint))
  add(query_578963, "oauth_token", newJString(oauthToken))
  add(path_578962, "summaryAccountId", newJString(summaryAccountId))
  add(path_578962, "profileId", newJString(profileId))
  add(query_578963, "alt", newJString(alt))
  add(query_578963, "userIp", newJString(userIp))
  add(query_578963, "quotaUser", newJString(quotaUser))
  add(query_578963, "fields", newJString(fields))
  result = call_578961.call(path_578962, query_578963, nil, nil, nil)

var dfareportingAccountActiveAdSummariesGet* = Call_DfareportingAccountActiveAdSummariesGet_578948(
    name: "dfareportingAccountActiveAdSummariesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accountActiveAdSummaries/{summaryAccountId}",
    validator: validate_DfareportingAccountActiveAdSummariesGet_578949,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountActiveAdSummariesGet_578950,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountPermissionGroupsList_578964 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountPermissionGroupsList_578966(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountPermissionGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountPermissionGroupsList_578965(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the list of account permission groups.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_578967 = path.getOrDefault("profileId")
  valid_578967 = validateParameter(valid_578967, JString, required = true,
                                 default = nil)
  if valid_578967 != nil:
    section.add "profileId", valid_578967
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_578968 = query.getOrDefault("key")
  valid_578968 = validateParameter(valid_578968, JString, required = false,
                                 default = nil)
  if valid_578968 != nil:
    section.add "key", valid_578968
  var valid_578969 = query.getOrDefault("prettyPrint")
  valid_578969 = validateParameter(valid_578969, JBool, required = false,
                                 default = newJBool(true))
  if valid_578969 != nil:
    section.add "prettyPrint", valid_578969
  var valid_578970 = query.getOrDefault("oauth_token")
  valid_578970 = validateParameter(valid_578970, JString, required = false,
                                 default = nil)
  if valid_578970 != nil:
    section.add "oauth_token", valid_578970
  var valid_578971 = query.getOrDefault("alt")
  valid_578971 = validateParameter(valid_578971, JString, required = false,
                                 default = newJString("json"))
  if valid_578971 != nil:
    section.add "alt", valid_578971
  var valid_578972 = query.getOrDefault("userIp")
  valid_578972 = validateParameter(valid_578972, JString, required = false,
                                 default = nil)
  if valid_578972 != nil:
    section.add "userIp", valid_578972
  var valid_578973 = query.getOrDefault("quotaUser")
  valid_578973 = validateParameter(valid_578973, JString, required = false,
                                 default = nil)
  if valid_578973 != nil:
    section.add "quotaUser", valid_578973
  var valid_578974 = query.getOrDefault("fields")
  valid_578974 = validateParameter(valid_578974, JString, required = false,
                                 default = nil)
  if valid_578974 != nil:
    section.add "fields", valid_578974
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_578975: Call_DfareportingAccountPermissionGroupsList_578964;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the list of account permission groups.
  ## 
  let valid = call_578975.validator(path, query, header, formData, body)
  let scheme = call_578975.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_578975.url(scheme.get, call_578975.host, call_578975.base,
                         call_578975.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_578975, url, valid)

proc call*(call_578976: Call_DfareportingAccountPermissionGroupsList_578964;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingAccountPermissionGroupsList
  ## Retrieves the list of account permission groups.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_578977 = newJObject()
  var query_578978 = newJObject()
  add(query_578978, "key", newJString(key))
  add(query_578978, "prettyPrint", newJBool(prettyPrint))
  add(query_578978, "oauth_token", newJString(oauthToken))
  add(path_578977, "profileId", newJString(profileId))
  add(query_578978, "alt", newJString(alt))
  add(query_578978, "userIp", newJString(userIp))
  add(query_578978, "quotaUser", newJString(quotaUser))
  add(query_578978, "fields", newJString(fields))
  result = call_578976.call(path_578977, query_578978, nil, nil, nil)

var dfareportingAccountPermissionGroupsList* = Call_DfareportingAccountPermissionGroupsList_578964(
    name: "dfareportingAccountPermissionGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountPermissionGroups",
    validator: validate_DfareportingAccountPermissionGroupsList_578965,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountPermissionGroupsList_578966,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountPermissionGroupsGet_578979 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountPermissionGroupsGet_578981(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountPermissionGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountPermissionGroupsGet_578980(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one account permission group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Account permission group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_578982 = path.getOrDefault("profileId")
  valid_578982 = validateParameter(valid_578982, JString, required = true,
                                 default = nil)
  if valid_578982 != nil:
    section.add "profileId", valid_578982
  var valid_578983 = path.getOrDefault("id")
  valid_578983 = validateParameter(valid_578983, JString, required = true,
                                 default = nil)
  if valid_578983 != nil:
    section.add "id", valid_578983
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_578984 = query.getOrDefault("key")
  valid_578984 = validateParameter(valid_578984, JString, required = false,
                                 default = nil)
  if valid_578984 != nil:
    section.add "key", valid_578984
  var valid_578985 = query.getOrDefault("prettyPrint")
  valid_578985 = validateParameter(valid_578985, JBool, required = false,
                                 default = newJBool(true))
  if valid_578985 != nil:
    section.add "prettyPrint", valid_578985
  var valid_578986 = query.getOrDefault("oauth_token")
  valid_578986 = validateParameter(valid_578986, JString, required = false,
                                 default = nil)
  if valid_578986 != nil:
    section.add "oauth_token", valid_578986
  var valid_578987 = query.getOrDefault("alt")
  valid_578987 = validateParameter(valid_578987, JString, required = false,
                                 default = newJString("json"))
  if valid_578987 != nil:
    section.add "alt", valid_578987
  var valid_578988 = query.getOrDefault("userIp")
  valid_578988 = validateParameter(valid_578988, JString, required = false,
                                 default = nil)
  if valid_578988 != nil:
    section.add "userIp", valid_578988
  var valid_578989 = query.getOrDefault("quotaUser")
  valid_578989 = validateParameter(valid_578989, JString, required = false,
                                 default = nil)
  if valid_578989 != nil:
    section.add "quotaUser", valid_578989
  var valid_578990 = query.getOrDefault("fields")
  valid_578990 = validateParameter(valid_578990, JString, required = false,
                                 default = nil)
  if valid_578990 != nil:
    section.add "fields", valid_578990
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_578991: Call_DfareportingAccountPermissionGroupsGet_578979;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one account permission group by ID.
  ## 
  let valid = call_578991.validator(path, query, header, formData, body)
  let scheme = call_578991.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_578991.url(scheme.get, call_578991.host, call_578991.base,
                         call_578991.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_578991, url, valid)

proc call*(call_578992: Call_DfareportingAccountPermissionGroupsGet_578979;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingAccountPermissionGroupsGet
  ## Gets one account permission group by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Account permission group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_578993 = newJObject()
  var query_578994 = newJObject()
  add(query_578994, "key", newJString(key))
  add(query_578994, "prettyPrint", newJBool(prettyPrint))
  add(query_578994, "oauth_token", newJString(oauthToken))
  add(path_578993, "profileId", newJString(profileId))
  add(path_578993, "id", newJString(id))
  add(query_578994, "alt", newJString(alt))
  add(query_578994, "userIp", newJString(userIp))
  add(query_578994, "quotaUser", newJString(quotaUser))
  add(query_578994, "fields", newJString(fields))
  result = call_578992.call(path_578993, query_578994, nil, nil, nil)

var dfareportingAccountPermissionGroupsGet* = Call_DfareportingAccountPermissionGroupsGet_578979(
    name: "dfareportingAccountPermissionGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountPermissionGroups/{id}",
    validator: validate_DfareportingAccountPermissionGroupsGet_578980,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountPermissionGroupsGet_578981,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountPermissionsList_578995 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountPermissionsList_578997(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountPermissions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountPermissionsList_578996(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the list of account permissions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_578998 = path.getOrDefault("profileId")
  valid_578998 = validateParameter(valid_578998, JString, required = true,
                                 default = nil)
  if valid_578998 != nil:
    section.add "profileId", valid_578998
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_578999 = query.getOrDefault("key")
  valid_578999 = validateParameter(valid_578999, JString, required = false,
                                 default = nil)
  if valid_578999 != nil:
    section.add "key", valid_578999
  var valid_579000 = query.getOrDefault("prettyPrint")
  valid_579000 = validateParameter(valid_579000, JBool, required = false,
                                 default = newJBool(true))
  if valid_579000 != nil:
    section.add "prettyPrint", valid_579000
  var valid_579001 = query.getOrDefault("oauth_token")
  valid_579001 = validateParameter(valid_579001, JString, required = false,
                                 default = nil)
  if valid_579001 != nil:
    section.add "oauth_token", valid_579001
  var valid_579002 = query.getOrDefault("alt")
  valid_579002 = validateParameter(valid_579002, JString, required = false,
                                 default = newJString("json"))
  if valid_579002 != nil:
    section.add "alt", valid_579002
  var valid_579003 = query.getOrDefault("userIp")
  valid_579003 = validateParameter(valid_579003, JString, required = false,
                                 default = nil)
  if valid_579003 != nil:
    section.add "userIp", valid_579003
  var valid_579004 = query.getOrDefault("quotaUser")
  valid_579004 = validateParameter(valid_579004, JString, required = false,
                                 default = nil)
  if valid_579004 != nil:
    section.add "quotaUser", valid_579004
  var valid_579005 = query.getOrDefault("fields")
  valid_579005 = validateParameter(valid_579005, JString, required = false,
                                 default = nil)
  if valid_579005 != nil:
    section.add "fields", valid_579005
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579006: Call_DfareportingAccountPermissionsList_578995;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the list of account permissions.
  ## 
  let valid = call_579006.validator(path, query, header, formData, body)
  let scheme = call_579006.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579006.url(scheme.get, call_579006.host, call_579006.base,
                         call_579006.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579006, url, valid)

proc call*(call_579007: Call_DfareportingAccountPermissionsList_578995;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingAccountPermissionsList
  ## Retrieves the list of account permissions.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579008 = newJObject()
  var query_579009 = newJObject()
  add(query_579009, "key", newJString(key))
  add(query_579009, "prettyPrint", newJBool(prettyPrint))
  add(query_579009, "oauth_token", newJString(oauthToken))
  add(path_579008, "profileId", newJString(profileId))
  add(query_579009, "alt", newJString(alt))
  add(query_579009, "userIp", newJString(userIp))
  add(query_579009, "quotaUser", newJString(quotaUser))
  add(query_579009, "fields", newJString(fields))
  result = call_579007.call(path_579008, query_579009, nil, nil, nil)

var dfareportingAccountPermissionsList* = Call_DfareportingAccountPermissionsList_578995(
    name: "dfareportingAccountPermissionsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountPermissions",
    validator: validate_DfareportingAccountPermissionsList_578996,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountPermissionsList_578997,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountPermissionsGet_579010 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountPermissionsGet_579012(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountPermissions/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountPermissionsGet_579011(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one account permission by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Account permission ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579013 = path.getOrDefault("profileId")
  valid_579013 = validateParameter(valid_579013, JString, required = true,
                                 default = nil)
  if valid_579013 != nil:
    section.add "profileId", valid_579013
  var valid_579014 = path.getOrDefault("id")
  valid_579014 = validateParameter(valid_579014, JString, required = true,
                                 default = nil)
  if valid_579014 != nil:
    section.add "id", valid_579014
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579015 = query.getOrDefault("key")
  valid_579015 = validateParameter(valid_579015, JString, required = false,
                                 default = nil)
  if valid_579015 != nil:
    section.add "key", valid_579015
  var valid_579016 = query.getOrDefault("prettyPrint")
  valid_579016 = validateParameter(valid_579016, JBool, required = false,
                                 default = newJBool(true))
  if valid_579016 != nil:
    section.add "prettyPrint", valid_579016
  var valid_579017 = query.getOrDefault("oauth_token")
  valid_579017 = validateParameter(valid_579017, JString, required = false,
                                 default = nil)
  if valid_579017 != nil:
    section.add "oauth_token", valid_579017
  var valid_579018 = query.getOrDefault("alt")
  valid_579018 = validateParameter(valid_579018, JString, required = false,
                                 default = newJString("json"))
  if valid_579018 != nil:
    section.add "alt", valid_579018
  var valid_579019 = query.getOrDefault("userIp")
  valid_579019 = validateParameter(valid_579019, JString, required = false,
                                 default = nil)
  if valid_579019 != nil:
    section.add "userIp", valid_579019
  var valid_579020 = query.getOrDefault("quotaUser")
  valid_579020 = validateParameter(valid_579020, JString, required = false,
                                 default = nil)
  if valid_579020 != nil:
    section.add "quotaUser", valid_579020
  var valid_579021 = query.getOrDefault("fields")
  valid_579021 = validateParameter(valid_579021, JString, required = false,
                                 default = nil)
  if valid_579021 != nil:
    section.add "fields", valid_579021
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579022: Call_DfareportingAccountPermissionsGet_579010;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one account permission by ID.
  ## 
  let valid = call_579022.validator(path, query, header, formData, body)
  let scheme = call_579022.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579022.url(scheme.get, call_579022.host, call_579022.base,
                         call_579022.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579022, url, valid)

proc call*(call_579023: Call_DfareportingAccountPermissionsGet_579010;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingAccountPermissionsGet
  ## Gets one account permission by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Account permission ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579024 = newJObject()
  var query_579025 = newJObject()
  add(query_579025, "key", newJString(key))
  add(query_579025, "prettyPrint", newJBool(prettyPrint))
  add(query_579025, "oauth_token", newJString(oauthToken))
  add(path_579024, "profileId", newJString(profileId))
  add(path_579024, "id", newJString(id))
  add(query_579025, "alt", newJString(alt))
  add(query_579025, "userIp", newJString(userIp))
  add(query_579025, "quotaUser", newJString(quotaUser))
  add(query_579025, "fields", newJString(fields))
  result = call_579023.call(path_579024, query_579025, nil, nil, nil)

var dfareportingAccountPermissionsGet* = Call_DfareportingAccountPermissionsGet_579010(
    name: "dfareportingAccountPermissionsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountPermissions/{id}",
    validator: validate_DfareportingAccountPermissionsGet_579011,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountPermissionsGet_579012,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesUpdate_579051 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountUserProfilesUpdate_579053(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesUpdate_579052(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing account user profile.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579054 = path.getOrDefault("profileId")
  valid_579054 = validateParameter(valid_579054, JString, required = true,
                                 default = nil)
  if valid_579054 != nil:
    section.add "profileId", valid_579054
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579055 = query.getOrDefault("key")
  valid_579055 = validateParameter(valid_579055, JString, required = false,
                                 default = nil)
  if valid_579055 != nil:
    section.add "key", valid_579055
  var valid_579056 = query.getOrDefault("prettyPrint")
  valid_579056 = validateParameter(valid_579056, JBool, required = false,
                                 default = newJBool(true))
  if valid_579056 != nil:
    section.add "prettyPrint", valid_579056
  var valid_579057 = query.getOrDefault("oauth_token")
  valid_579057 = validateParameter(valid_579057, JString, required = false,
                                 default = nil)
  if valid_579057 != nil:
    section.add "oauth_token", valid_579057
  var valid_579058 = query.getOrDefault("alt")
  valid_579058 = validateParameter(valid_579058, JString, required = false,
                                 default = newJString("json"))
  if valid_579058 != nil:
    section.add "alt", valid_579058
  var valid_579059 = query.getOrDefault("userIp")
  valid_579059 = validateParameter(valid_579059, JString, required = false,
                                 default = nil)
  if valid_579059 != nil:
    section.add "userIp", valid_579059
  var valid_579060 = query.getOrDefault("quotaUser")
  valid_579060 = validateParameter(valid_579060, JString, required = false,
                                 default = nil)
  if valid_579060 != nil:
    section.add "quotaUser", valid_579060
  var valid_579061 = query.getOrDefault("fields")
  valid_579061 = validateParameter(valid_579061, JString, required = false,
                                 default = nil)
  if valid_579061 != nil:
    section.add "fields", valid_579061
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579063: Call_DfareportingAccountUserProfilesUpdate_579051;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing account user profile.
  ## 
  let valid = call_579063.validator(path, query, header, formData, body)
  let scheme = call_579063.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579063.url(scheme.get, call_579063.host, call_579063.base,
                         call_579063.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579063, url, valid)

proc call*(call_579064: Call_DfareportingAccountUserProfilesUpdate_579051;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAccountUserProfilesUpdate
  ## Updates an existing account user profile.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579065 = newJObject()
  var query_579066 = newJObject()
  var body_579067 = newJObject()
  add(query_579066, "key", newJString(key))
  add(query_579066, "prettyPrint", newJBool(prettyPrint))
  add(query_579066, "oauth_token", newJString(oauthToken))
  add(path_579065, "profileId", newJString(profileId))
  add(query_579066, "alt", newJString(alt))
  add(query_579066, "userIp", newJString(userIp))
  add(query_579066, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579067 = body
  add(query_579066, "fields", newJString(fields))
  result = call_579064.call(path_579065, query_579066, nil, nil, body_579067)

var dfareportingAccountUserProfilesUpdate* = Call_DfareportingAccountUserProfilesUpdate_579051(
    name: "dfareportingAccountUserProfilesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles",
    validator: validate_DfareportingAccountUserProfilesUpdate_579052,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountUserProfilesUpdate_579053,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesInsert_579068 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountUserProfilesInsert_579070(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesInsert_579069(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new account user profile.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579071 = path.getOrDefault("profileId")
  valid_579071 = validateParameter(valid_579071, JString, required = true,
                                 default = nil)
  if valid_579071 != nil:
    section.add "profileId", valid_579071
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579072 = query.getOrDefault("key")
  valid_579072 = validateParameter(valid_579072, JString, required = false,
                                 default = nil)
  if valid_579072 != nil:
    section.add "key", valid_579072
  var valid_579073 = query.getOrDefault("prettyPrint")
  valid_579073 = validateParameter(valid_579073, JBool, required = false,
                                 default = newJBool(true))
  if valid_579073 != nil:
    section.add "prettyPrint", valid_579073
  var valid_579074 = query.getOrDefault("oauth_token")
  valid_579074 = validateParameter(valid_579074, JString, required = false,
                                 default = nil)
  if valid_579074 != nil:
    section.add "oauth_token", valid_579074
  var valid_579075 = query.getOrDefault("alt")
  valid_579075 = validateParameter(valid_579075, JString, required = false,
                                 default = newJString("json"))
  if valid_579075 != nil:
    section.add "alt", valid_579075
  var valid_579076 = query.getOrDefault("userIp")
  valid_579076 = validateParameter(valid_579076, JString, required = false,
                                 default = nil)
  if valid_579076 != nil:
    section.add "userIp", valid_579076
  var valid_579077 = query.getOrDefault("quotaUser")
  valid_579077 = validateParameter(valid_579077, JString, required = false,
                                 default = nil)
  if valid_579077 != nil:
    section.add "quotaUser", valid_579077
  var valid_579078 = query.getOrDefault("fields")
  valid_579078 = validateParameter(valid_579078, JString, required = false,
                                 default = nil)
  if valid_579078 != nil:
    section.add "fields", valid_579078
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579080: Call_DfareportingAccountUserProfilesInsert_579068;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new account user profile.
  ## 
  let valid = call_579080.validator(path, query, header, formData, body)
  let scheme = call_579080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579080.url(scheme.get, call_579080.host, call_579080.base,
                         call_579080.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579080, url, valid)

proc call*(call_579081: Call_DfareportingAccountUserProfilesInsert_579068;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAccountUserProfilesInsert
  ## Inserts a new account user profile.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579082 = newJObject()
  var query_579083 = newJObject()
  var body_579084 = newJObject()
  add(query_579083, "key", newJString(key))
  add(query_579083, "prettyPrint", newJBool(prettyPrint))
  add(query_579083, "oauth_token", newJString(oauthToken))
  add(path_579082, "profileId", newJString(profileId))
  add(query_579083, "alt", newJString(alt))
  add(query_579083, "userIp", newJString(userIp))
  add(query_579083, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579084 = body
  add(query_579083, "fields", newJString(fields))
  result = call_579081.call(path_579082, query_579083, nil, nil, body_579084)

var dfareportingAccountUserProfilesInsert* = Call_DfareportingAccountUserProfilesInsert_579068(
    name: "dfareportingAccountUserProfilesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles",
    validator: validate_DfareportingAccountUserProfilesInsert_579069,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountUserProfilesInsert_579070,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesList_579026 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountUserProfilesList_579028(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesList_579027(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of account user profiles, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579029 = path.getOrDefault("profileId")
  valid_579029 = validateParameter(valid_579029, JString, required = true,
                                 default = nil)
  if valid_579029 != nil:
    section.add "profileId", valid_579029
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   active: JBool
  ##         : Select only active user profiles.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "user profile*2015" will return objects with names like "user profile June 2015", "user profile April 2015", or simply "user profile 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "user profile" will match objects with name "my user profile", "user profile 2015", or simply "user profile".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   userRoleId: JString
  ##             : Select only user profiles with the specified user role ID.
  ##   subaccountId: JString
  ##               : Select only user profiles with the specified subaccount ID.
  ##   ids: JArray
  ##      : Select only user profiles with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_579030 = query.getOrDefault("key")
  valid_579030 = validateParameter(valid_579030, JString, required = false,
                                 default = nil)
  if valid_579030 != nil:
    section.add "key", valid_579030
  var valid_579031 = query.getOrDefault("prettyPrint")
  valid_579031 = validateParameter(valid_579031, JBool, required = false,
                                 default = newJBool(true))
  if valid_579031 != nil:
    section.add "prettyPrint", valid_579031
  var valid_579032 = query.getOrDefault("oauth_token")
  valid_579032 = validateParameter(valid_579032, JString, required = false,
                                 default = nil)
  if valid_579032 != nil:
    section.add "oauth_token", valid_579032
  var valid_579033 = query.getOrDefault("active")
  valid_579033 = validateParameter(valid_579033, JBool, required = false, default = nil)
  if valid_579033 != nil:
    section.add "active", valid_579033
  var valid_579034 = query.getOrDefault("sortField")
  valid_579034 = validateParameter(valid_579034, JString, required = false,
                                 default = newJString("ID"))
  if valid_579034 != nil:
    section.add "sortField", valid_579034
  var valid_579035 = query.getOrDefault("alt")
  valid_579035 = validateParameter(valid_579035, JString, required = false,
                                 default = newJString("json"))
  if valid_579035 != nil:
    section.add "alt", valid_579035
  var valid_579036 = query.getOrDefault("userIp")
  valid_579036 = validateParameter(valid_579036, JString, required = false,
                                 default = nil)
  if valid_579036 != nil:
    section.add "userIp", valid_579036
  var valid_579037 = query.getOrDefault("quotaUser")
  valid_579037 = validateParameter(valid_579037, JString, required = false,
                                 default = nil)
  if valid_579037 != nil:
    section.add "quotaUser", valid_579037
  var valid_579038 = query.getOrDefault("pageToken")
  valid_579038 = validateParameter(valid_579038, JString, required = false,
                                 default = nil)
  if valid_579038 != nil:
    section.add "pageToken", valid_579038
  var valid_579039 = query.getOrDefault("searchString")
  valid_579039 = validateParameter(valid_579039, JString, required = false,
                                 default = nil)
  if valid_579039 != nil:
    section.add "searchString", valid_579039
  var valid_579040 = query.getOrDefault("sortOrder")
  valid_579040 = validateParameter(valid_579040, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_579040 != nil:
    section.add "sortOrder", valid_579040
  var valid_579041 = query.getOrDefault("userRoleId")
  valid_579041 = validateParameter(valid_579041, JString, required = false,
                                 default = nil)
  if valid_579041 != nil:
    section.add "userRoleId", valid_579041
  var valid_579042 = query.getOrDefault("subaccountId")
  valid_579042 = validateParameter(valid_579042, JString, required = false,
                                 default = nil)
  if valid_579042 != nil:
    section.add "subaccountId", valid_579042
  var valid_579043 = query.getOrDefault("ids")
  valid_579043 = validateParameter(valid_579043, JArray, required = false,
                                 default = nil)
  if valid_579043 != nil:
    section.add "ids", valid_579043
  var valid_579044 = query.getOrDefault("fields")
  valid_579044 = validateParameter(valid_579044, JString, required = false,
                                 default = nil)
  if valid_579044 != nil:
    section.add "fields", valid_579044
  var valid_579046 = query.getOrDefault("maxResults")
  valid_579046 = validateParameter(valid_579046, JInt, required = false,
                                 default = newJInt(1000))
  if valid_579046 != nil:
    section.add "maxResults", valid_579046
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579047: Call_DfareportingAccountUserProfilesList_579026;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of account user profiles, possibly filtered. This method supports paging.
  ## 
  let valid = call_579047.validator(path, query, header, formData, body)
  let scheme = call_579047.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579047.url(scheme.get, call_579047.host, call_579047.base,
                         call_579047.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579047, url, valid)

proc call*(call_579048: Call_DfareportingAccountUserProfilesList_579026;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; active: bool = false; sortField: string = "ID";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          pageToken: string = ""; searchString: string = "";
          sortOrder: string = "ASCENDING"; userRoleId: string = "";
          subaccountId: string = ""; ids: JsonNode = nil; fields: string = "";
          maxResults: int = 1000): Recallable =
  ## dfareportingAccountUserProfilesList
  ## Retrieves a list of account user profiles, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   active: bool
  ##         : Select only active user profiles.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "user profile*2015" will return objects with names like "user profile June 2015", "user profile April 2015", or simply "user profile 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "user profile" will match objects with name "my user profile", "user profile 2015", or simply "user profile".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   userRoleId: string
  ##             : Select only user profiles with the specified user role ID.
  ##   subaccountId: string
  ##               : Select only user profiles with the specified subaccount ID.
  ##   ids: JArray
  ##      : Select only user profiles with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_579049 = newJObject()
  var query_579050 = newJObject()
  add(query_579050, "key", newJString(key))
  add(query_579050, "prettyPrint", newJBool(prettyPrint))
  add(query_579050, "oauth_token", newJString(oauthToken))
  add(query_579050, "active", newJBool(active))
  add(path_579049, "profileId", newJString(profileId))
  add(query_579050, "sortField", newJString(sortField))
  add(query_579050, "alt", newJString(alt))
  add(query_579050, "userIp", newJString(userIp))
  add(query_579050, "quotaUser", newJString(quotaUser))
  add(query_579050, "pageToken", newJString(pageToken))
  add(query_579050, "searchString", newJString(searchString))
  add(query_579050, "sortOrder", newJString(sortOrder))
  add(query_579050, "userRoleId", newJString(userRoleId))
  add(query_579050, "subaccountId", newJString(subaccountId))
  if ids != nil:
    query_579050.add "ids", ids
  add(query_579050, "fields", newJString(fields))
  add(query_579050, "maxResults", newJInt(maxResults))
  result = call_579048.call(path_579049, query_579050, nil, nil, nil)

var dfareportingAccountUserProfilesList* = Call_DfareportingAccountUserProfilesList_579026(
    name: "dfareportingAccountUserProfilesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles",
    validator: validate_DfareportingAccountUserProfilesList_579027,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountUserProfilesList_579028,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesPatch_579085 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountUserProfilesPatch_579087(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesPatch_579086(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing account user profile. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579088 = path.getOrDefault("profileId")
  valid_579088 = validateParameter(valid_579088, JString, required = true,
                                 default = nil)
  if valid_579088 != nil:
    section.add "profileId", valid_579088
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : User profile ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579089 = query.getOrDefault("key")
  valid_579089 = validateParameter(valid_579089, JString, required = false,
                                 default = nil)
  if valid_579089 != nil:
    section.add "key", valid_579089
  var valid_579090 = query.getOrDefault("prettyPrint")
  valid_579090 = validateParameter(valid_579090, JBool, required = false,
                                 default = newJBool(true))
  if valid_579090 != nil:
    section.add "prettyPrint", valid_579090
  var valid_579091 = query.getOrDefault("oauth_token")
  valid_579091 = validateParameter(valid_579091, JString, required = false,
                                 default = nil)
  if valid_579091 != nil:
    section.add "oauth_token", valid_579091
  var valid_579092 = query.getOrDefault("alt")
  valid_579092 = validateParameter(valid_579092, JString, required = false,
                                 default = newJString("json"))
  if valid_579092 != nil:
    section.add "alt", valid_579092
  var valid_579093 = query.getOrDefault("userIp")
  valid_579093 = validateParameter(valid_579093, JString, required = false,
                                 default = nil)
  if valid_579093 != nil:
    section.add "userIp", valid_579093
  var valid_579094 = query.getOrDefault("quotaUser")
  valid_579094 = validateParameter(valid_579094, JString, required = false,
                                 default = nil)
  if valid_579094 != nil:
    section.add "quotaUser", valid_579094
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_579095 = query.getOrDefault("id")
  valid_579095 = validateParameter(valid_579095, JString, required = true,
                                 default = nil)
  if valid_579095 != nil:
    section.add "id", valid_579095
  var valid_579096 = query.getOrDefault("fields")
  valid_579096 = validateParameter(valid_579096, JString, required = false,
                                 default = nil)
  if valid_579096 != nil:
    section.add "fields", valid_579096
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579098: Call_DfareportingAccountUserProfilesPatch_579085;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing account user profile. This method supports patch semantics.
  ## 
  let valid = call_579098.validator(path, query, header, formData, body)
  let scheme = call_579098.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579098.url(scheme.get, call_579098.host, call_579098.base,
                         call_579098.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579098, url, valid)

proc call*(call_579099: Call_DfareportingAccountUserProfilesPatch_579085;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAccountUserProfilesPatch
  ## Updates an existing account user profile. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : User profile ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579100 = newJObject()
  var query_579101 = newJObject()
  var body_579102 = newJObject()
  add(query_579101, "key", newJString(key))
  add(query_579101, "prettyPrint", newJBool(prettyPrint))
  add(query_579101, "oauth_token", newJString(oauthToken))
  add(path_579100, "profileId", newJString(profileId))
  add(query_579101, "alt", newJString(alt))
  add(query_579101, "userIp", newJString(userIp))
  add(query_579101, "quotaUser", newJString(quotaUser))
  add(query_579101, "id", newJString(id))
  if body != nil:
    body_579102 = body
  add(query_579101, "fields", newJString(fields))
  result = call_579099.call(path_579100, query_579101, nil, nil, body_579102)

var dfareportingAccountUserProfilesPatch* = Call_DfareportingAccountUserProfilesPatch_579085(
    name: "dfareportingAccountUserProfilesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles",
    validator: validate_DfareportingAccountUserProfilesPatch_579086,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountUserProfilesPatch_579087,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesGet_579103 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountUserProfilesGet_579105(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesGet_579104(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one account user profile by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579106 = path.getOrDefault("profileId")
  valid_579106 = validateParameter(valid_579106, JString, required = true,
                                 default = nil)
  if valid_579106 != nil:
    section.add "profileId", valid_579106
  var valid_579107 = path.getOrDefault("id")
  valid_579107 = validateParameter(valid_579107, JString, required = true,
                                 default = nil)
  if valid_579107 != nil:
    section.add "id", valid_579107
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579108 = query.getOrDefault("key")
  valid_579108 = validateParameter(valid_579108, JString, required = false,
                                 default = nil)
  if valid_579108 != nil:
    section.add "key", valid_579108
  var valid_579109 = query.getOrDefault("prettyPrint")
  valid_579109 = validateParameter(valid_579109, JBool, required = false,
                                 default = newJBool(true))
  if valid_579109 != nil:
    section.add "prettyPrint", valid_579109
  var valid_579110 = query.getOrDefault("oauth_token")
  valid_579110 = validateParameter(valid_579110, JString, required = false,
                                 default = nil)
  if valid_579110 != nil:
    section.add "oauth_token", valid_579110
  var valid_579111 = query.getOrDefault("alt")
  valid_579111 = validateParameter(valid_579111, JString, required = false,
                                 default = newJString("json"))
  if valid_579111 != nil:
    section.add "alt", valid_579111
  var valid_579112 = query.getOrDefault("userIp")
  valid_579112 = validateParameter(valid_579112, JString, required = false,
                                 default = nil)
  if valid_579112 != nil:
    section.add "userIp", valid_579112
  var valid_579113 = query.getOrDefault("quotaUser")
  valid_579113 = validateParameter(valid_579113, JString, required = false,
                                 default = nil)
  if valid_579113 != nil:
    section.add "quotaUser", valid_579113
  var valid_579114 = query.getOrDefault("fields")
  valid_579114 = validateParameter(valid_579114, JString, required = false,
                                 default = nil)
  if valid_579114 != nil:
    section.add "fields", valid_579114
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579115: Call_DfareportingAccountUserProfilesGet_579103;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one account user profile by ID.
  ## 
  let valid = call_579115.validator(path, query, header, formData, body)
  let scheme = call_579115.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579115.url(scheme.get, call_579115.host, call_579115.base,
                         call_579115.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579115, url, valid)

proc call*(call_579116: Call_DfareportingAccountUserProfilesGet_579103;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingAccountUserProfilesGet
  ## Gets one account user profile by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : User profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579117 = newJObject()
  var query_579118 = newJObject()
  add(query_579118, "key", newJString(key))
  add(query_579118, "prettyPrint", newJBool(prettyPrint))
  add(query_579118, "oauth_token", newJString(oauthToken))
  add(path_579117, "profileId", newJString(profileId))
  add(path_579117, "id", newJString(id))
  add(query_579118, "alt", newJString(alt))
  add(query_579118, "userIp", newJString(userIp))
  add(query_579118, "quotaUser", newJString(quotaUser))
  add(query_579118, "fields", newJString(fields))
  result = call_579116.call(path_579117, query_579118, nil, nil, nil)

var dfareportingAccountUserProfilesGet* = Call_DfareportingAccountUserProfilesGet_579103(
    name: "dfareportingAccountUserProfilesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles/{id}",
    validator: validate_DfareportingAccountUserProfilesGet_579104,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountUserProfilesGet_579105,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountsUpdate_579141 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountsUpdate_579143(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountsUpdate_579142(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing account.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579144 = path.getOrDefault("profileId")
  valid_579144 = validateParameter(valid_579144, JString, required = true,
                                 default = nil)
  if valid_579144 != nil:
    section.add "profileId", valid_579144
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579145 = query.getOrDefault("key")
  valid_579145 = validateParameter(valid_579145, JString, required = false,
                                 default = nil)
  if valid_579145 != nil:
    section.add "key", valid_579145
  var valid_579146 = query.getOrDefault("prettyPrint")
  valid_579146 = validateParameter(valid_579146, JBool, required = false,
                                 default = newJBool(true))
  if valid_579146 != nil:
    section.add "prettyPrint", valid_579146
  var valid_579147 = query.getOrDefault("oauth_token")
  valid_579147 = validateParameter(valid_579147, JString, required = false,
                                 default = nil)
  if valid_579147 != nil:
    section.add "oauth_token", valid_579147
  var valid_579148 = query.getOrDefault("alt")
  valid_579148 = validateParameter(valid_579148, JString, required = false,
                                 default = newJString("json"))
  if valid_579148 != nil:
    section.add "alt", valid_579148
  var valid_579149 = query.getOrDefault("userIp")
  valid_579149 = validateParameter(valid_579149, JString, required = false,
                                 default = nil)
  if valid_579149 != nil:
    section.add "userIp", valid_579149
  var valid_579150 = query.getOrDefault("quotaUser")
  valid_579150 = validateParameter(valid_579150, JString, required = false,
                                 default = nil)
  if valid_579150 != nil:
    section.add "quotaUser", valid_579150
  var valid_579151 = query.getOrDefault("fields")
  valid_579151 = validateParameter(valid_579151, JString, required = false,
                                 default = nil)
  if valid_579151 != nil:
    section.add "fields", valid_579151
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579153: Call_DfareportingAccountsUpdate_579141; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing account.
  ## 
  let valid = call_579153.validator(path, query, header, formData, body)
  let scheme = call_579153.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579153.url(scheme.get, call_579153.host, call_579153.base,
                         call_579153.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579153, url, valid)

proc call*(call_579154: Call_DfareportingAccountsUpdate_579141; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAccountsUpdate
  ## Updates an existing account.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579155 = newJObject()
  var query_579156 = newJObject()
  var body_579157 = newJObject()
  add(query_579156, "key", newJString(key))
  add(query_579156, "prettyPrint", newJBool(prettyPrint))
  add(query_579156, "oauth_token", newJString(oauthToken))
  add(path_579155, "profileId", newJString(profileId))
  add(query_579156, "alt", newJString(alt))
  add(query_579156, "userIp", newJString(userIp))
  add(query_579156, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579157 = body
  add(query_579156, "fields", newJString(fields))
  result = call_579154.call(path_579155, query_579156, nil, nil, body_579157)

var dfareportingAccountsUpdate* = Call_DfareportingAccountsUpdate_579141(
    name: "dfareportingAccountsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accounts",
    validator: validate_DfareportingAccountsUpdate_579142,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountsUpdate_579143,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountsList_579119 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountsList_579121(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountsList_579120(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the list of accounts, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579122 = path.getOrDefault("profileId")
  valid_579122 = validateParameter(valid_579122, JString, required = true,
                                 default = nil)
  if valid_579122 != nil:
    section.add "profileId", valid_579122
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   active: JBool
  ##         : Select only active accounts. Don't set this field to select both active and non-active accounts.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "account*2015" will return objects with names like "account June 2015", "account April 2015", or simply "account 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "account" will match objects with name "my account", "account 2015", or simply "account".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only accounts with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_579123 = query.getOrDefault("key")
  valid_579123 = validateParameter(valid_579123, JString, required = false,
                                 default = nil)
  if valid_579123 != nil:
    section.add "key", valid_579123
  var valid_579124 = query.getOrDefault("prettyPrint")
  valid_579124 = validateParameter(valid_579124, JBool, required = false,
                                 default = newJBool(true))
  if valid_579124 != nil:
    section.add "prettyPrint", valid_579124
  var valid_579125 = query.getOrDefault("oauth_token")
  valid_579125 = validateParameter(valid_579125, JString, required = false,
                                 default = nil)
  if valid_579125 != nil:
    section.add "oauth_token", valid_579125
  var valid_579126 = query.getOrDefault("active")
  valid_579126 = validateParameter(valid_579126, JBool, required = false, default = nil)
  if valid_579126 != nil:
    section.add "active", valid_579126
  var valid_579127 = query.getOrDefault("sortField")
  valid_579127 = validateParameter(valid_579127, JString, required = false,
                                 default = newJString("ID"))
  if valid_579127 != nil:
    section.add "sortField", valid_579127
  var valid_579128 = query.getOrDefault("alt")
  valid_579128 = validateParameter(valid_579128, JString, required = false,
                                 default = newJString("json"))
  if valid_579128 != nil:
    section.add "alt", valid_579128
  var valid_579129 = query.getOrDefault("userIp")
  valid_579129 = validateParameter(valid_579129, JString, required = false,
                                 default = nil)
  if valid_579129 != nil:
    section.add "userIp", valid_579129
  var valid_579130 = query.getOrDefault("quotaUser")
  valid_579130 = validateParameter(valid_579130, JString, required = false,
                                 default = nil)
  if valid_579130 != nil:
    section.add "quotaUser", valid_579130
  var valid_579131 = query.getOrDefault("pageToken")
  valid_579131 = validateParameter(valid_579131, JString, required = false,
                                 default = nil)
  if valid_579131 != nil:
    section.add "pageToken", valid_579131
  var valid_579132 = query.getOrDefault("searchString")
  valid_579132 = validateParameter(valid_579132, JString, required = false,
                                 default = nil)
  if valid_579132 != nil:
    section.add "searchString", valid_579132
  var valid_579133 = query.getOrDefault("sortOrder")
  valid_579133 = validateParameter(valid_579133, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_579133 != nil:
    section.add "sortOrder", valid_579133
  var valid_579134 = query.getOrDefault("ids")
  valid_579134 = validateParameter(valid_579134, JArray, required = false,
                                 default = nil)
  if valid_579134 != nil:
    section.add "ids", valid_579134
  var valid_579135 = query.getOrDefault("fields")
  valid_579135 = validateParameter(valid_579135, JString, required = false,
                                 default = nil)
  if valid_579135 != nil:
    section.add "fields", valid_579135
  var valid_579136 = query.getOrDefault("maxResults")
  valid_579136 = validateParameter(valid_579136, JInt, required = false,
                                 default = newJInt(1000))
  if valid_579136 != nil:
    section.add "maxResults", valid_579136
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579137: Call_DfareportingAccountsList_579119; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the list of accounts, possibly filtered. This method supports paging.
  ## 
  let valid = call_579137.validator(path, query, header, formData, body)
  let scheme = call_579137.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579137.url(scheme.get, call_579137.host, call_579137.base,
                         call_579137.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579137, url, valid)

proc call*(call_579138: Call_DfareportingAccountsList_579119; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          active: bool = false; sortField: string = "ID"; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          ids: JsonNode = nil; fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingAccountsList
  ## Retrieves the list of accounts, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   active: bool
  ##         : Select only active accounts. Don't set this field to select both active and non-active accounts.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "account*2015" will return objects with names like "account June 2015", "account April 2015", or simply "account 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "account" will match objects with name "my account", "account 2015", or simply "account".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only accounts with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_579139 = newJObject()
  var query_579140 = newJObject()
  add(query_579140, "key", newJString(key))
  add(query_579140, "prettyPrint", newJBool(prettyPrint))
  add(query_579140, "oauth_token", newJString(oauthToken))
  add(query_579140, "active", newJBool(active))
  add(path_579139, "profileId", newJString(profileId))
  add(query_579140, "sortField", newJString(sortField))
  add(query_579140, "alt", newJString(alt))
  add(query_579140, "userIp", newJString(userIp))
  add(query_579140, "quotaUser", newJString(quotaUser))
  add(query_579140, "pageToken", newJString(pageToken))
  add(query_579140, "searchString", newJString(searchString))
  add(query_579140, "sortOrder", newJString(sortOrder))
  if ids != nil:
    query_579140.add "ids", ids
  add(query_579140, "fields", newJString(fields))
  add(query_579140, "maxResults", newJInt(maxResults))
  result = call_579138.call(path_579139, query_579140, nil, nil, nil)

var dfareportingAccountsList* = Call_DfareportingAccountsList_579119(
    name: "dfareportingAccountsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accounts",
    validator: validate_DfareportingAccountsList_579120,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountsList_579121,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountsPatch_579158 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountsPatch_579160(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountsPatch_579159(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing account. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579161 = path.getOrDefault("profileId")
  valid_579161 = validateParameter(valid_579161, JString, required = true,
                                 default = nil)
  if valid_579161 != nil:
    section.add "profileId", valid_579161
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Account ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579162 = query.getOrDefault("key")
  valid_579162 = validateParameter(valid_579162, JString, required = false,
                                 default = nil)
  if valid_579162 != nil:
    section.add "key", valid_579162
  var valid_579163 = query.getOrDefault("prettyPrint")
  valid_579163 = validateParameter(valid_579163, JBool, required = false,
                                 default = newJBool(true))
  if valid_579163 != nil:
    section.add "prettyPrint", valid_579163
  var valid_579164 = query.getOrDefault("oauth_token")
  valid_579164 = validateParameter(valid_579164, JString, required = false,
                                 default = nil)
  if valid_579164 != nil:
    section.add "oauth_token", valid_579164
  var valid_579165 = query.getOrDefault("alt")
  valid_579165 = validateParameter(valid_579165, JString, required = false,
                                 default = newJString("json"))
  if valid_579165 != nil:
    section.add "alt", valid_579165
  var valid_579166 = query.getOrDefault("userIp")
  valid_579166 = validateParameter(valid_579166, JString, required = false,
                                 default = nil)
  if valid_579166 != nil:
    section.add "userIp", valid_579166
  var valid_579167 = query.getOrDefault("quotaUser")
  valid_579167 = validateParameter(valid_579167, JString, required = false,
                                 default = nil)
  if valid_579167 != nil:
    section.add "quotaUser", valid_579167
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_579168 = query.getOrDefault("id")
  valid_579168 = validateParameter(valid_579168, JString, required = true,
                                 default = nil)
  if valid_579168 != nil:
    section.add "id", valid_579168
  var valid_579169 = query.getOrDefault("fields")
  valid_579169 = validateParameter(valid_579169, JString, required = false,
                                 default = nil)
  if valid_579169 != nil:
    section.add "fields", valid_579169
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579171: Call_DfareportingAccountsPatch_579158; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing account. This method supports patch semantics.
  ## 
  let valid = call_579171.validator(path, query, header, formData, body)
  let scheme = call_579171.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579171.url(scheme.get, call_579171.host, call_579171.base,
                         call_579171.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579171, url, valid)

proc call*(call_579172: Call_DfareportingAccountsPatch_579158; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAccountsPatch
  ## Updates an existing account. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Account ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579173 = newJObject()
  var query_579174 = newJObject()
  var body_579175 = newJObject()
  add(query_579174, "key", newJString(key))
  add(query_579174, "prettyPrint", newJBool(prettyPrint))
  add(query_579174, "oauth_token", newJString(oauthToken))
  add(path_579173, "profileId", newJString(profileId))
  add(query_579174, "alt", newJString(alt))
  add(query_579174, "userIp", newJString(userIp))
  add(query_579174, "quotaUser", newJString(quotaUser))
  add(query_579174, "id", newJString(id))
  if body != nil:
    body_579175 = body
  add(query_579174, "fields", newJString(fields))
  result = call_579172.call(path_579173, query_579174, nil, nil, body_579175)

var dfareportingAccountsPatch* = Call_DfareportingAccountsPatch_579158(
    name: "dfareportingAccountsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accounts",
    validator: validate_DfareportingAccountsPatch_579159,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountsPatch_579160,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountsGet_579176 = ref object of OpenApiRestCall_578364
proc url_DfareportingAccountsGet_579178(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accounts/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountsGet_579177(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one account by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Account ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579179 = path.getOrDefault("profileId")
  valid_579179 = validateParameter(valid_579179, JString, required = true,
                                 default = nil)
  if valid_579179 != nil:
    section.add "profileId", valid_579179
  var valid_579180 = path.getOrDefault("id")
  valid_579180 = validateParameter(valid_579180, JString, required = true,
                                 default = nil)
  if valid_579180 != nil:
    section.add "id", valid_579180
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579181 = query.getOrDefault("key")
  valid_579181 = validateParameter(valid_579181, JString, required = false,
                                 default = nil)
  if valid_579181 != nil:
    section.add "key", valid_579181
  var valid_579182 = query.getOrDefault("prettyPrint")
  valid_579182 = validateParameter(valid_579182, JBool, required = false,
                                 default = newJBool(true))
  if valid_579182 != nil:
    section.add "prettyPrint", valid_579182
  var valid_579183 = query.getOrDefault("oauth_token")
  valid_579183 = validateParameter(valid_579183, JString, required = false,
                                 default = nil)
  if valid_579183 != nil:
    section.add "oauth_token", valid_579183
  var valid_579184 = query.getOrDefault("alt")
  valid_579184 = validateParameter(valid_579184, JString, required = false,
                                 default = newJString("json"))
  if valid_579184 != nil:
    section.add "alt", valid_579184
  var valid_579185 = query.getOrDefault("userIp")
  valid_579185 = validateParameter(valid_579185, JString, required = false,
                                 default = nil)
  if valid_579185 != nil:
    section.add "userIp", valid_579185
  var valid_579186 = query.getOrDefault("quotaUser")
  valid_579186 = validateParameter(valid_579186, JString, required = false,
                                 default = nil)
  if valid_579186 != nil:
    section.add "quotaUser", valid_579186
  var valid_579187 = query.getOrDefault("fields")
  valid_579187 = validateParameter(valid_579187, JString, required = false,
                                 default = nil)
  if valid_579187 != nil:
    section.add "fields", valid_579187
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579188: Call_DfareportingAccountsGet_579176; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one account by ID.
  ## 
  let valid = call_579188.validator(path, query, header, formData, body)
  let scheme = call_579188.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579188.url(scheme.get, call_579188.host, call_579188.base,
                         call_579188.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579188, url, valid)

proc call*(call_579189: Call_DfareportingAccountsGet_579176; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingAccountsGet
  ## Gets one account by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Account ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579190 = newJObject()
  var query_579191 = newJObject()
  add(query_579191, "key", newJString(key))
  add(query_579191, "prettyPrint", newJBool(prettyPrint))
  add(query_579191, "oauth_token", newJString(oauthToken))
  add(path_579190, "profileId", newJString(profileId))
  add(path_579190, "id", newJString(id))
  add(query_579191, "alt", newJString(alt))
  add(query_579191, "userIp", newJString(userIp))
  add(query_579191, "quotaUser", newJString(quotaUser))
  add(query_579191, "fields", newJString(fields))
  result = call_579189.call(path_579190, query_579191, nil, nil, nil)

var dfareportingAccountsGet* = Call_DfareportingAccountsGet_579176(
    name: "dfareportingAccountsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accounts/{id}",
    validator: validate_DfareportingAccountsGet_579177,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountsGet_579178,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdsUpdate_579230 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdsUpdate_579232(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsUpdate_579231(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing ad.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579233 = path.getOrDefault("profileId")
  valid_579233 = validateParameter(valid_579233, JString, required = true,
                                 default = nil)
  if valid_579233 != nil:
    section.add "profileId", valid_579233
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579234 = query.getOrDefault("key")
  valid_579234 = validateParameter(valid_579234, JString, required = false,
                                 default = nil)
  if valid_579234 != nil:
    section.add "key", valid_579234
  var valid_579235 = query.getOrDefault("prettyPrint")
  valid_579235 = validateParameter(valid_579235, JBool, required = false,
                                 default = newJBool(true))
  if valid_579235 != nil:
    section.add "prettyPrint", valid_579235
  var valid_579236 = query.getOrDefault("oauth_token")
  valid_579236 = validateParameter(valid_579236, JString, required = false,
                                 default = nil)
  if valid_579236 != nil:
    section.add "oauth_token", valid_579236
  var valid_579237 = query.getOrDefault("alt")
  valid_579237 = validateParameter(valid_579237, JString, required = false,
                                 default = newJString("json"))
  if valid_579237 != nil:
    section.add "alt", valid_579237
  var valid_579238 = query.getOrDefault("userIp")
  valid_579238 = validateParameter(valid_579238, JString, required = false,
                                 default = nil)
  if valid_579238 != nil:
    section.add "userIp", valid_579238
  var valid_579239 = query.getOrDefault("quotaUser")
  valid_579239 = validateParameter(valid_579239, JString, required = false,
                                 default = nil)
  if valid_579239 != nil:
    section.add "quotaUser", valid_579239
  var valid_579240 = query.getOrDefault("fields")
  valid_579240 = validateParameter(valid_579240, JString, required = false,
                                 default = nil)
  if valid_579240 != nil:
    section.add "fields", valid_579240
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579242: Call_DfareportingAdsUpdate_579230; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing ad.
  ## 
  let valid = call_579242.validator(path, query, header, formData, body)
  let scheme = call_579242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579242.url(scheme.get, call_579242.host, call_579242.base,
                         call_579242.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579242, url, valid)

proc call*(call_579243: Call_DfareportingAdsUpdate_579230; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdsUpdate
  ## Updates an existing ad.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579244 = newJObject()
  var query_579245 = newJObject()
  var body_579246 = newJObject()
  add(query_579245, "key", newJString(key))
  add(query_579245, "prettyPrint", newJBool(prettyPrint))
  add(query_579245, "oauth_token", newJString(oauthToken))
  add(path_579244, "profileId", newJString(profileId))
  add(query_579245, "alt", newJString(alt))
  add(query_579245, "userIp", newJString(userIp))
  add(query_579245, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579246 = body
  add(query_579245, "fields", newJString(fields))
  result = call_579243.call(path_579244, query_579245, nil, nil, body_579246)

var dfareportingAdsUpdate* = Call_DfareportingAdsUpdate_579230(
    name: "dfareportingAdsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads",
    validator: validate_DfareportingAdsUpdate_579231, base: "/dfareporting/v3.2",
    url: url_DfareportingAdsUpdate_579232, schemes: {Scheme.Https})
type
  Call_DfareportingAdsInsert_579247 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdsInsert_579249(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsInsert_579248(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new ad.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579250 = path.getOrDefault("profileId")
  valid_579250 = validateParameter(valid_579250, JString, required = true,
                                 default = nil)
  if valid_579250 != nil:
    section.add "profileId", valid_579250
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579251 = query.getOrDefault("key")
  valid_579251 = validateParameter(valid_579251, JString, required = false,
                                 default = nil)
  if valid_579251 != nil:
    section.add "key", valid_579251
  var valid_579252 = query.getOrDefault("prettyPrint")
  valid_579252 = validateParameter(valid_579252, JBool, required = false,
                                 default = newJBool(true))
  if valid_579252 != nil:
    section.add "prettyPrint", valid_579252
  var valid_579253 = query.getOrDefault("oauth_token")
  valid_579253 = validateParameter(valid_579253, JString, required = false,
                                 default = nil)
  if valid_579253 != nil:
    section.add "oauth_token", valid_579253
  var valid_579254 = query.getOrDefault("alt")
  valid_579254 = validateParameter(valid_579254, JString, required = false,
                                 default = newJString("json"))
  if valid_579254 != nil:
    section.add "alt", valid_579254
  var valid_579255 = query.getOrDefault("userIp")
  valid_579255 = validateParameter(valid_579255, JString, required = false,
                                 default = nil)
  if valid_579255 != nil:
    section.add "userIp", valid_579255
  var valid_579256 = query.getOrDefault("quotaUser")
  valid_579256 = validateParameter(valid_579256, JString, required = false,
                                 default = nil)
  if valid_579256 != nil:
    section.add "quotaUser", valid_579256
  var valid_579257 = query.getOrDefault("fields")
  valid_579257 = validateParameter(valid_579257, JString, required = false,
                                 default = nil)
  if valid_579257 != nil:
    section.add "fields", valid_579257
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579259: Call_DfareportingAdsInsert_579247; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new ad.
  ## 
  let valid = call_579259.validator(path, query, header, formData, body)
  let scheme = call_579259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579259.url(scheme.get, call_579259.host, call_579259.base,
                         call_579259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579259, url, valid)

proc call*(call_579260: Call_DfareportingAdsInsert_579247; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdsInsert
  ## Inserts a new ad.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579261 = newJObject()
  var query_579262 = newJObject()
  var body_579263 = newJObject()
  add(query_579262, "key", newJString(key))
  add(query_579262, "prettyPrint", newJBool(prettyPrint))
  add(query_579262, "oauth_token", newJString(oauthToken))
  add(path_579261, "profileId", newJString(profileId))
  add(query_579262, "alt", newJString(alt))
  add(query_579262, "userIp", newJString(userIp))
  add(query_579262, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579263 = body
  add(query_579262, "fields", newJString(fields))
  result = call_579260.call(path_579261, query_579262, nil, nil, body_579263)

var dfareportingAdsInsert* = Call_DfareportingAdsInsert_579247(
    name: "dfareportingAdsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads",
    validator: validate_DfareportingAdsInsert_579248, base: "/dfareporting/v3.2",
    url: url_DfareportingAdsInsert_579249, schemes: {Scheme.Https})
type
  Call_DfareportingAdsList_579192 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdsList_579194(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsList_579193(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Retrieves a list of ads, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579195 = path.getOrDefault("profileId")
  valid_579195 = validateParameter(valid_579195, JString, required = true,
                                 default = nil)
  if valid_579195 != nil:
    section.add "profileId", valid_579195
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   remarketingListIds: JArray
  ##                     : Select only ads whose list targeting expression use these remarketing list IDs.
  ##   audienceSegmentIds: JArray
  ##                     : Select only ads with these audience segment IDs.
  ##   active: JBool
  ##         : Select only active ads.
  ##   landingPageIds: JArray
  ##                 : Select only ads with these landing page IDs.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived ads.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   placementIds: JArray
  ##               : Select only ads with these placement IDs assigned.
  ##   overriddenEventTagId: JString
  ##                       : Select only ads with this event tag override ID.
  ##   type: JArray
  ##       : Select only ads with these types.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "ad*2015" will return objects with names like "ad June 2015", "ad April 2015", or simply "ad 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "ad" will match objects with name "my ad", "ad 2015", or simply "ad".
  ##   compatibility: JString
  ##                : Select default ads with the specified compatibility. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering an in-stream video ads developed with the VAST standard.
  ##   sizeIds: JArray
  ##          : Select only ads with these size IDs.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   sslCompliant: JBool
  ##               : Select only ads that are SSL-compliant.
  ##   advertiserId: JString
  ##               : Select only ads with this advertiser ID.
  ##   dynamicClickTracker: JBool
  ##                      : Select only dynamic click trackers. Applicable when type is AD_SERVING_CLICK_TRACKER. If true, select dynamic click trackers. If false, select static click trackers. Leave unset to select both.
  ##   campaignIds: JArray
  ##              : Select only ads with these campaign IDs.
  ##   ids: JArray
  ##      : Select only ads with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   creativeOptimizationConfigurationIds: JArray
  ##                                       : Select only ads with these creative optimization configuration IDs.
  ##   sslRequired: JBool
  ##              : Select only ads that require SSL.
  ##   creativeIds: JArray
  ##              : Select only ads with these creative IDs assigned.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_579196 = query.getOrDefault("key")
  valid_579196 = validateParameter(valid_579196, JString, required = false,
                                 default = nil)
  if valid_579196 != nil:
    section.add "key", valid_579196
  var valid_579197 = query.getOrDefault("prettyPrint")
  valid_579197 = validateParameter(valid_579197, JBool, required = false,
                                 default = newJBool(true))
  if valid_579197 != nil:
    section.add "prettyPrint", valid_579197
  var valid_579198 = query.getOrDefault("oauth_token")
  valid_579198 = validateParameter(valid_579198, JString, required = false,
                                 default = nil)
  if valid_579198 != nil:
    section.add "oauth_token", valid_579198
  var valid_579199 = query.getOrDefault("remarketingListIds")
  valid_579199 = validateParameter(valid_579199, JArray, required = false,
                                 default = nil)
  if valid_579199 != nil:
    section.add "remarketingListIds", valid_579199
  var valid_579200 = query.getOrDefault("audienceSegmentIds")
  valid_579200 = validateParameter(valid_579200, JArray, required = false,
                                 default = nil)
  if valid_579200 != nil:
    section.add "audienceSegmentIds", valid_579200
  var valid_579201 = query.getOrDefault("active")
  valid_579201 = validateParameter(valid_579201, JBool, required = false, default = nil)
  if valid_579201 != nil:
    section.add "active", valid_579201
  var valid_579202 = query.getOrDefault("landingPageIds")
  valid_579202 = validateParameter(valid_579202, JArray, required = false,
                                 default = nil)
  if valid_579202 != nil:
    section.add "landingPageIds", valid_579202
  var valid_579203 = query.getOrDefault("sortField")
  valid_579203 = validateParameter(valid_579203, JString, required = false,
                                 default = newJString("ID"))
  if valid_579203 != nil:
    section.add "sortField", valid_579203
  var valid_579204 = query.getOrDefault("alt")
  valid_579204 = validateParameter(valid_579204, JString, required = false,
                                 default = newJString("json"))
  if valid_579204 != nil:
    section.add "alt", valid_579204
  var valid_579205 = query.getOrDefault("userIp")
  valid_579205 = validateParameter(valid_579205, JString, required = false,
                                 default = nil)
  if valid_579205 != nil:
    section.add "userIp", valid_579205
  var valid_579206 = query.getOrDefault("archived")
  valid_579206 = validateParameter(valid_579206, JBool, required = false, default = nil)
  if valid_579206 != nil:
    section.add "archived", valid_579206
  var valid_579207 = query.getOrDefault("quotaUser")
  valid_579207 = validateParameter(valid_579207, JString, required = false,
                                 default = nil)
  if valid_579207 != nil:
    section.add "quotaUser", valid_579207
  var valid_579208 = query.getOrDefault("placementIds")
  valid_579208 = validateParameter(valid_579208, JArray, required = false,
                                 default = nil)
  if valid_579208 != nil:
    section.add "placementIds", valid_579208
  var valid_579209 = query.getOrDefault("overriddenEventTagId")
  valid_579209 = validateParameter(valid_579209, JString, required = false,
                                 default = nil)
  if valid_579209 != nil:
    section.add "overriddenEventTagId", valid_579209
  var valid_579210 = query.getOrDefault("type")
  valid_579210 = validateParameter(valid_579210, JArray, required = false,
                                 default = nil)
  if valid_579210 != nil:
    section.add "type", valid_579210
  var valid_579211 = query.getOrDefault("pageToken")
  valid_579211 = validateParameter(valid_579211, JString, required = false,
                                 default = nil)
  if valid_579211 != nil:
    section.add "pageToken", valid_579211
  var valid_579212 = query.getOrDefault("searchString")
  valid_579212 = validateParameter(valid_579212, JString, required = false,
                                 default = nil)
  if valid_579212 != nil:
    section.add "searchString", valid_579212
  var valid_579213 = query.getOrDefault("compatibility")
  valid_579213 = validateParameter(valid_579213, JString, required = false,
                                 default = newJString("APP"))
  if valid_579213 != nil:
    section.add "compatibility", valid_579213
  var valid_579214 = query.getOrDefault("sizeIds")
  valid_579214 = validateParameter(valid_579214, JArray, required = false,
                                 default = nil)
  if valid_579214 != nil:
    section.add "sizeIds", valid_579214
  var valid_579215 = query.getOrDefault("sortOrder")
  valid_579215 = validateParameter(valid_579215, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_579215 != nil:
    section.add "sortOrder", valid_579215
  var valid_579216 = query.getOrDefault("sslCompliant")
  valid_579216 = validateParameter(valid_579216, JBool, required = false, default = nil)
  if valid_579216 != nil:
    section.add "sslCompliant", valid_579216
  var valid_579217 = query.getOrDefault("advertiserId")
  valid_579217 = validateParameter(valid_579217, JString, required = false,
                                 default = nil)
  if valid_579217 != nil:
    section.add "advertiserId", valid_579217
  var valid_579218 = query.getOrDefault("dynamicClickTracker")
  valid_579218 = validateParameter(valid_579218, JBool, required = false, default = nil)
  if valid_579218 != nil:
    section.add "dynamicClickTracker", valid_579218
  var valid_579219 = query.getOrDefault("campaignIds")
  valid_579219 = validateParameter(valid_579219, JArray, required = false,
                                 default = nil)
  if valid_579219 != nil:
    section.add "campaignIds", valid_579219
  var valid_579220 = query.getOrDefault("ids")
  valid_579220 = validateParameter(valid_579220, JArray, required = false,
                                 default = nil)
  if valid_579220 != nil:
    section.add "ids", valid_579220
  var valid_579221 = query.getOrDefault("fields")
  valid_579221 = validateParameter(valid_579221, JString, required = false,
                                 default = nil)
  if valid_579221 != nil:
    section.add "fields", valid_579221
  var valid_579222 = query.getOrDefault("creativeOptimizationConfigurationIds")
  valid_579222 = validateParameter(valid_579222, JArray, required = false,
                                 default = nil)
  if valid_579222 != nil:
    section.add "creativeOptimizationConfigurationIds", valid_579222
  var valid_579223 = query.getOrDefault("sslRequired")
  valid_579223 = validateParameter(valid_579223, JBool, required = false, default = nil)
  if valid_579223 != nil:
    section.add "sslRequired", valid_579223
  var valid_579224 = query.getOrDefault("creativeIds")
  valid_579224 = validateParameter(valid_579224, JArray, required = false,
                                 default = nil)
  if valid_579224 != nil:
    section.add "creativeIds", valid_579224
  var valid_579225 = query.getOrDefault("maxResults")
  valid_579225 = validateParameter(valid_579225, JInt, required = false,
                                 default = newJInt(1000))
  if valid_579225 != nil:
    section.add "maxResults", valid_579225
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579226: Call_DfareportingAdsList_579192; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of ads, possibly filtered. This method supports paging.
  ## 
  let valid = call_579226.validator(path, query, header, formData, body)
  let scheme = call_579226.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579226.url(scheme.get, call_579226.host, call_579226.base,
                         call_579226.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579226, url, valid)

proc call*(call_579227: Call_DfareportingAdsList_579192; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          remarketingListIds: JsonNode = nil; audienceSegmentIds: JsonNode = nil;
          active: bool = false; landingPageIds: JsonNode = nil;
          sortField: string = "ID"; alt: string = "json"; userIp: string = "";
          archived: bool = false; quotaUser: string = ""; placementIds: JsonNode = nil;
          overriddenEventTagId: string = ""; `type`: JsonNode = nil;
          pageToken: string = ""; searchString: string = "";
          compatibility: string = "APP"; sizeIds: JsonNode = nil;
          sortOrder: string = "ASCENDING"; sslCompliant: bool = false;
          advertiserId: string = ""; dynamicClickTracker: bool = false;
          campaignIds: JsonNode = nil; ids: JsonNode = nil; fields: string = "";
          creativeOptimizationConfigurationIds: JsonNode = nil;
          sslRequired: bool = false; creativeIds: JsonNode = nil; maxResults: int = 1000): Recallable =
  ## dfareportingAdsList
  ## Retrieves a list of ads, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   remarketingListIds: JArray
  ##                     : Select only ads whose list targeting expression use these remarketing list IDs.
  ##   audienceSegmentIds: JArray
  ##                     : Select only ads with these audience segment IDs.
  ##   active: bool
  ##         : Select only active ads.
  ##   landingPageIds: JArray
  ##                 : Select only ads with these landing page IDs.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived ads.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   placementIds: JArray
  ##               : Select only ads with these placement IDs assigned.
  ##   overriddenEventTagId: string
  ##                       : Select only ads with this event tag override ID.
  ##   type: JArray
  ##       : Select only ads with these types.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "ad*2015" will return objects with names like "ad June 2015", "ad April 2015", or simply "ad 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "ad" will match objects with name "my ad", "ad 2015", or simply "ad".
  ##   compatibility: string
  ##                : Select default ads with the specified compatibility. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering an in-stream video ads developed with the VAST standard.
  ##   sizeIds: JArray
  ##          : Select only ads with these size IDs.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   sslCompliant: bool
  ##               : Select only ads that are SSL-compliant.
  ##   advertiserId: string
  ##               : Select only ads with this advertiser ID.
  ##   dynamicClickTracker: bool
  ##                      : Select only dynamic click trackers. Applicable when type is AD_SERVING_CLICK_TRACKER. If true, select dynamic click trackers. If false, select static click trackers. Leave unset to select both.
  ##   campaignIds: JArray
  ##              : Select only ads with these campaign IDs.
  ##   ids: JArray
  ##      : Select only ads with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   creativeOptimizationConfigurationIds: JArray
  ##                                       : Select only ads with these creative optimization configuration IDs.
  ##   sslRequired: bool
  ##              : Select only ads that require SSL.
  ##   creativeIds: JArray
  ##              : Select only ads with these creative IDs assigned.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_579228 = newJObject()
  var query_579229 = newJObject()
  add(query_579229, "key", newJString(key))
  add(query_579229, "prettyPrint", newJBool(prettyPrint))
  add(query_579229, "oauth_token", newJString(oauthToken))
  if remarketingListIds != nil:
    query_579229.add "remarketingListIds", remarketingListIds
  if audienceSegmentIds != nil:
    query_579229.add "audienceSegmentIds", audienceSegmentIds
  add(query_579229, "active", newJBool(active))
  if landingPageIds != nil:
    query_579229.add "landingPageIds", landingPageIds
  add(path_579228, "profileId", newJString(profileId))
  add(query_579229, "sortField", newJString(sortField))
  add(query_579229, "alt", newJString(alt))
  add(query_579229, "userIp", newJString(userIp))
  add(query_579229, "archived", newJBool(archived))
  add(query_579229, "quotaUser", newJString(quotaUser))
  if placementIds != nil:
    query_579229.add "placementIds", placementIds
  add(query_579229, "overriddenEventTagId", newJString(overriddenEventTagId))
  if `type` != nil:
    query_579229.add "type", `type`
  add(query_579229, "pageToken", newJString(pageToken))
  add(query_579229, "searchString", newJString(searchString))
  add(query_579229, "compatibility", newJString(compatibility))
  if sizeIds != nil:
    query_579229.add "sizeIds", sizeIds
  add(query_579229, "sortOrder", newJString(sortOrder))
  add(query_579229, "sslCompliant", newJBool(sslCompliant))
  add(query_579229, "advertiserId", newJString(advertiserId))
  add(query_579229, "dynamicClickTracker", newJBool(dynamicClickTracker))
  if campaignIds != nil:
    query_579229.add "campaignIds", campaignIds
  if ids != nil:
    query_579229.add "ids", ids
  add(query_579229, "fields", newJString(fields))
  if creativeOptimizationConfigurationIds != nil:
    query_579229.add "creativeOptimizationConfigurationIds",
                    creativeOptimizationConfigurationIds
  add(query_579229, "sslRequired", newJBool(sslRequired))
  if creativeIds != nil:
    query_579229.add "creativeIds", creativeIds
  add(query_579229, "maxResults", newJInt(maxResults))
  result = call_579227.call(path_579228, query_579229, nil, nil, nil)

var dfareportingAdsList* = Call_DfareportingAdsList_579192(
    name: "dfareportingAdsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads",
    validator: validate_DfareportingAdsList_579193, base: "/dfareporting/v3.2",
    url: url_DfareportingAdsList_579194, schemes: {Scheme.Https})
type
  Call_DfareportingAdsPatch_579264 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdsPatch_579266(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsPatch_579265(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing ad. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579267 = path.getOrDefault("profileId")
  valid_579267 = validateParameter(valid_579267, JString, required = true,
                                 default = nil)
  if valid_579267 != nil:
    section.add "profileId", valid_579267
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Ad ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579268 = query.getOrDefault("key")
  valid_579268 = validateParameter(valid_579268, JString, required = false,
                                 default = nil)
  if valid_579268 != nil:
    section.add "key", valid_579268
  var valid_579269 = query.getOrDefault("prettyPrint")
  valid_579269 = validateParameter(valid_579269, JBool, required = false,
                                 default = newJBool(true))
  if valid_579269 != nil:
    section.add "prettyPrint", valid_579269
  var valid_579270 = query.getOrDefault("oauth_token")
  valid_579270 = validateParameter(valid_579270, JString, required = false,
                                 default = nil)
  if valid_579270 != nil:
    section.add "oauth_token", valid_579270
  var valid_579271 = query.getOrDefault("alt")
  valid_579271 = validateParameter(valid_579271, JString, required = false,
                                 default = newJString("json"))
  if valid_579271 != nil:
    section.add "alt", valid_579271
  var valid_579272 = query.getOrDefault("userIp")
  valid_579272 = validateParameter(valid_579272, JString, required = false,
                                 default = nil)
  if valid_579272 != nil:
    section.add "userIp", valid_579272
  var valid_579273 = query.getOrDefault("quotaUser")
  valid_579273 = validateParameter(valid_579273, JString, required = false,
                                 default = nil)
  if valid_579273 != nil:
    section.add "quotaUser", valid_579273
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_579274 = query.getOrDefault("id")
  valid_579274 = validateParameter(valid_579274, JString, required = true,
                                 default = nil)
  if valid_579274 != nil:
    section.add "id", valid_579274
  var valid_579275 = query.getOrDefault("fields")
  valid_579275 = validateParameter(valid_579275, JString, required = false,
                                 default = nil)
  if valid_579275 != nil:
    section.add "fields", valid_579275
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579277: Call_DfareportingAdsPatch_579264; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing ad. This method supports patch semantics.
  ## 
  let valid = call_579277.validator(path, query, header, formData, body)
  let scheme = call_579277.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579277.url(scheme.get, call_579277.host, call_579277.base,
                         call_579277.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579277, url, valid)

proc call*(call_579278: Call_DfareportingAdsPatch_579264; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdsPatch
  ## Updates an existing ad. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Ad ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579279 = newJObject()
  var query_579280 = newJObject()
  var body_579281 = newJObject()
  add(query_579280, "key", newJString(key))
  add(query_579280, "prettyPrint", newJBool(prettyPrint))
  add(query_579280, "oauth_token", newJString(oauthToken))
  add(path_579279, "profileId", newJString(profileId))
  add(query_579280, "alt", newJString(alt))
  add(query_579280, "userIp", newJString(userIp))
  add(query_579280, "quotaUser", newJString(quotaUser))
  add(query_579280, "id", newJString(id))
  if body != nil:
    body_579281 = body
  add(query_579280, "fields", newJString(fields))
  result = call_579278.call(path_579279, query_579280, nil, nil, body_579281)

var dfareportingAdsPatch* = Call_DfareportingAdsPatch_579264(
    name: "dfareportingAdsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads",
    validator: validate_DfareportingAdsPatch_579265, base: "/dfareporting/v3.2",
    url: url_DfareportingAdsPatch_579266, schemes: {Scheme.Https})
type
  Call_DfareportingAdsGet_579282 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdsGet_579284(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsGet_579283(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets one ad by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Ad ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579285 = path.getOrDefault("profileId")
  valid_579285 = validateParameter(valid_579285, JString, required = true,
                                 default = nil)
  if valid_579285 != nil:
    section.add "profileId", valid_579285
  var valid_579286 = path.getOrDefault("id")
  valid_579286 = validateParameter(valid_579286, JString, required = true,
                                 default = nil)
  if valid_579286 != nil:
    section.add "id", valid_579286
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579287 = query.getOrDefault("key")
  valid_579287 = validateParameter(valid_579287, JString, required = false,
                                 default = nil)
  if valid_579287 != nil:
    section.add "key", valid_579287
  var valid_579288 = query.getOrDefault("prettyPrint")
  valid_579288 = validateParameter(valid_579288, JBool, required = false,
                                 default = newJBool(true))
  if valid_579288 != nil:
    section.add "prettyPrint", valid_579288
  var valid_579289 = query.getOrDefault("oauth_token")
  valid_579289 = validateParameter(valid_579289, JString, required = false,
                                 default = nil)
  if valid_579289 != nil:
    section.add "oauth_token", valid_579289
  var valid_579290 = query.getOrDefault("alt")
  valid_579290 = validateParameter(valid_579290, JString, required = false,
                                 default = newJString("json"))
  if valid_579290 != nil:
    section.add "alt", valid_579290
  var valid_579291 = query.getOrDefault("userIp")
  valid_579291 = validateParameter(valid_579291, JString, required = false,
                                 default = nil)
  if valid_579291 != nil:
    section.add "userIp", valid_579291
  var valid_579292 = query.getOrDefault("quotaUser")
  valid_579292 = validateParameter(valid_579292, JString, required = false,
                                 default = nil)
  if valid_579292 != nil:
    section.add "quotaUser", valid_579292
  var valid_579293 = query.getOrDefault("fields")
  valid_579293 = validateParameter(valid_579293, JString, required = false,
                                 default = nil)
  if valid_579293 != nil:
    section.add "fields", valid_579293
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579294: Call_DfareportingAdsGet_579282; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one ad by ID.
  ## 
  let valid = call_579294.validator(path, query, header, formData, body)
  let scheme = call_579294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579294.url(scheme.get, call_579294.host, call_579294.base,
                         call_579294.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579294, url, valid)

proc call*(call_579295: Call_DfareportingAdsGet_579282; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingAdsGet
  ## Gets one ad by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Ad ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579296 = newJObject()
  var query_579297 = newJObject()
  add(query_579297, "key", newJString(key))
  add(query_579297, "prettyPrint", newJBool(prettyPrint))
  add(query_579297, "oauth_token", newJString(oauthToken))
  add(path_579296, "profileId", newJString(profileId))
  add(path_579296, "id", newJString(id))
  add(query_579297, "alt", newJString(alt))
  add(query_579297, "userIp", newJString(userIp))
  add(query_579297, "quotaUser", newJString(quotaUser))
  add(query_579297, "fields", newJString(fields))
  result = call_579295.call(path_579296, query_579297, nil, nil, nil)

var dfareportingAdsGet* = Call_DfareportingAdsGet_579282(
    name: "dfareportingAdsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads/{id}",
    validator: validate_DfareportingAdsGet_579283, base: "/dfareporting/v3.2",
    url: url_DfareportingAdsGet_579284, schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsUpdate_579319 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserGroupsUpdate_579321(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsUpdate_579320(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing advertiser group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579322 = path.getOrDefault("profileId")
  valid_579322 = validateParameter(valid_579322, JString, required = true,
                                 default = nil)
  if valid_579322 != nil:
    section.add "profileId", valid_579322
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579323 = query.getOrDefault("key")
  valid_579323 = validateParameter(valid_579323, JString, required = false,
                                 default = nil)
  if valid_579323 != nil:
    section.add "key", valid_579323
  var valid_579324 = query.getOrDefault("prettyPrint")
  valid_579324 = validateParameter(valid_579324, JBool, required = false,
                                 default = newJBool(true))
  if valid_579324 != nil:
    section.add "prettyPrint", valid_579324
  var valid_579325 = query.getOrDefault("oauth_token")
  valid_579325 = validateParameter(valid_579325, JString, required = false,
                                 default = nil)
  if valid_579325 != nil:
    section.add "oauth_token", valid_579325
  var valid_579326 = query.getOrDefault("alt")
  valid_579326 = validateParameter(valid_579326, JString, required = false,
                                 default = newJString("json"))
  if valid_579326 != nil:
    section.add "alt", valid_579326
  var valid_579327 = query.getOrDefault("userIp")
  valid_579327 = validateParameter(valid_579327, JString, required = false,
                                 default = nil)
  if valid_579327 != nil:
    section.add "userIp", valid_579327
  var valid_579328 = query.getOrDefault("quotaUser")
  valid_579328 = validateParameter(valid_579328, JString, required = false,
                                 default = nil)
  if valid_579328 != nil:
    section.add "quotaUser", valid_579328
  var valid_579329 = query.getOrDefault("fields")
  valid_579329 = validateParameter(valid_579329, JString, required = false,
                                 default = nil)
  if valid_579329 != nil:
    section.add "fields", valid_579329
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579331: Call_DfareportingAdvertiserGroupsUpdate_579319;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing advertiser group.
  ## 
  let valid = call_579331.validator(path, query, header, formData, body)
  let scheme = call_579331.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579331.url(scheme.get, call_579331.host, call_579331.base,
                         call_579331.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579331, url, valid)

proc call*(call_579332: Call_DfareportingAdvertiserGroupsUpdate_579319;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdvertiserGroupsUpdate
  ## Updates an existing advertiser group.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579333 = newJObject()
  var query_579334 = newJObject()
  var body_579335 = newJObject()
  add(query_579334, "key", newJString(key))
  add(query_579334, "prettyPrint", newJBool(prettyPrint))
  add(query_579334, "oauth_token", newJString(oauthToken))
  add(path_579333, "profileId", newJString(profileId))
  add(query_579334, "alt", newJString(alt))
  add(query_579334, "userIp", newJString(userIp))
  add(query_579334, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579335 = body
  add(query_579334, "fields", newJString(fields))
  result = call_579332.call(path_579333, query_579334, nil, nil, body_579335)

var dfareportingAdvertiserGroupsUpdate* = Call_DfareportingAdvertiserGroupsUpdate_579319(
    name: "dfareportingAdvertiserGroupsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups",
    validator: validate_DfareportingAdvertiserGroupsUpdate_579320,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsUpdate_579321,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsInsert_579336 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserGroupsInsert_579338(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsInsert_579337(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new advertiser group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579339 = path.getOrDefault("profileId")
  valid_579339 = validateParameter(valid_579339, JString, required = true,
                                 default = nil)
  if valid_579339 != nil:
    section.add "profileId", valid_579339
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579340 = query.getOrDefault("key")
  valid_579340 = validateParameter(valid_579340, JString, required = false,
                                 default = nil)
  if valid_579340 != nil:
    section.add "key", valid_579340
  var valid_579341 = query.getOrDefault("prettyPrint")
  valid_579341 = validateParameter(valid_579341, JBool, required = false,
                                 default = newJBool(true))
  if valid_579341 != nil:
    section.add "prettyPrint", valid_579341
  var valid_579342 = query.getOrDefault("oauth_token")
  valid_579342 = validateParameter(valid_579342, JString, required = false,
                                 default = nil)
  if valid_579342 != nil:
    section.add "oauth_token", valid_579342
  var valid_579343 = query.getOrDefault("alt")
  valid_579343 = validateParameter(valid_579343, JString, required = false,
                                 default = newJString("json"))
  if valid_579343 != nil:
    section.add "alt", valid_579343
  var valid_579344 = query.getOrDefault("userIp")
  valid_579344 = validateParameter(valid_579344, JString, required = false,
                                 default = nil)
  if valid_579344 != nil:
    section.add "userIp", valid_579344
  var valid_579345 = query.getOrDefault("quotaUser")
  valid_579345 = validateParameter(valid_579345, JString, required = false,
                                 default = nil)
  if valid_579345 != nil:
    section.add "quotaUser", valid_579345
  var valid_579346 = query.getOrDefault("fields")
  valid_579346 = validateParameter(valid_579346, JString, required = false,
                                 default = nil)
  if valid_579346 != nil:
    section.add "fields", valid_579346
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579348: Call_DfareportingAdvertiserGroupsInsert_579336;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new advertiser group.
  ## 
  let valid = call_579348.validator(path, query, header, formData, body)
  let scheme = call_579348.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579348.url(scheme.get, call_579348.host, call_579348.base,
                         call_579348.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579348, url, valid)

proc call*(call_579349: Call_DfareportingAdvertiserGroupsInsert_579336;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdvertiserGroupsInsert
  ## Inserts a new advertiser group.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579350 = newJObject()
  var query_579351 = newJObject()
  var body_579352 = newJObject()
  add(query_579351, "key", newJString(key))
  add(query_579351, "prettyPrint", newJBool(prettyPrint))
  add(query_579351, "oauth_token", newJString(oauthToken))
  add(path_579350, "profileId", newJString(profileId))
  add(query_579351, "alt", newJString(alt))
  add(query_579351, "userIp", newJString(userIp))
  add(query_579351, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579352 = body
  add(query_579351, "fields", newJString(fields))
  result = call_579349.call(path_579350, query_579351, nil, nil, body_579352)

var dfareportingAdvertiserGroupsInsert* = Call_DfareportingAdvertiserGroupsInsert_579336(
    name: "dfareportingAdvertiserGroupsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups",
    validator: validate_DfareportingAdvertiserGroupsInsert_579337,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsInsert_579338,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsList_579298 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserGroupsList_579300(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsList_579299(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of advertiser groups, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579301 = path.getOrDefault("profileId")
  valid_579301 = validateParameter(valid_579301, JString, required = true,
                                 default = nil)
  if valid_579301 != nil:
    section.add "profileId", valid_579301
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser group June 2015", "advertiser group April 2015", or simply "advertiser group 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertisergroup" will match objects with name "my advertisergroup", "advertisergroup 2015", or simply "advertisergroup".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only advertiser groups with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_579302 = query.getOrDefault("key")
  valid_579302 = validateParameter(valid_579302, JString, required = false,
                                 default = nil)
  if valid_579302 != nil:
    section.add "key", valid_579302
  var valid_579303 = query.getOrDefault("prettyPrint")
  valid_579303 = validateParameter(valid_579303, JBool, required = false,
                                 default = newJBool(true))
  if valid_579303 != nil:
    section.add "prettyPrint", valid_579303
  var valid_579304 = query.getOrDefault("oauth_token")
  valid_579304 = validateParameter(valid_579304, JString, required = false,
                                 default = nil)
  if valid_579304 != nil:
    section.add "oauth_token", valid_579304
  var valid_579305 = query.getOrDefault("sortField")
  valid_579305 = validateParameter(valid_579305, JString, required = false,
                                 default = newJString("ID"))
  if valid_579305 != nil:
    section.add "sortField", valid_579305
  var valid_579306 = query.getOrDefault("alt")
  valid_579306 = validateParameter(valid_579306, JString, required = false,
                                 default = newJString("json"))
  if valid_579306 != nil:
    section.add "alt", valid_579306
  var valid_579307 = query.getOrDefault("userIp")
  valid_579307 = validateParameter(valid_579307, JString, required = false,
                                 default = nil)
  if valid_579307 != nil:
    section.add "userIp", valid_579307
  var valid_579308 = query.getOrDefault("quotaUser")
  valid_579308 = validateParameter(valid_579308, JString, required = false,
                                 default = nil)
  if valid_579308 != nil:
    section.add "quotaUser", valid_579308
  var valid_579309 = query.getOrDefault("pageToken")
  valid_579309 = validateParameter(valid_579309, JString, required = false,
                                 default = nil)
  if valid_579309 != nil:
    section.add "pageToken", valid_579309
  var valid_579310 = query.getOrDefault("searchString")
  valid_579310 = validateParameter(valid_579310, JString, required = false,
                                 default = nil)
  if valid_579310 != nil:
    section.add "searchString", valid_579310
  var valid_579311 = query.getOrDefault("sortOrder")
  valid_579311 = validateParameter(valid_579311, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_579311 != nil:
    section.add "sortOrder", valid_579311
  var valid_579312 = query.getOrDefault("ids")
  valid_579312 = validateParameter(valid_579312, JArray, required = false,
                                 default = nil)
  if valid_579312 != nil:
    section.add "ids", valid_579312
  var valid_579313 = query.getOrDefault("fields")
  valid_579313 = validateParameter(valid_579313, JString, required = false,
                                 default = nil)
  if valid_579313 != nil:
    section.add "fields", valid_579313
  var valid_579314 = query.getOrDefault("maxResults")
  valid_579314 = validateParameter(valid_579314, JInt, required = false,
                                 default = newJInt(1000))
  if valid_579314 != nil:
    section.add "maxResults", valid_579314
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579315: Call_DfareportingAdvertiserGroupsList_579298;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of advertiser groups, possibly filtered. This method supports paging.
  ## 
  let valid = call_579315.validator(path, query, header, formData, body)
  let scheme = call_579315.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579315.url(scheme.get, call_579315.host, call_579315.base,
                         call_579315.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579315, url, valid)

proc call*(call_579316: Call_DfareportingAdvertiserGroupsList_579298;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; sortField: string = "ID"; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          ids: JsonNode = nil; fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingAdvertiserGroupsList
  ## Retrieves a list of advertiser groups, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser group June 2015", "advertiser group April 2015", or simply "advertiser group 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertisergroup" will match objects with name "my advertisergroup", "advertisergroup 2015", or simply "advertisergroup".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only advertiser groups with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_579317 = newJObject()
  var query_579318 = newJObject()
  add(query_579318, "key", newJString(key))
  add(query_579318, "prettyPrint", newJBool(prettyPrint))
  add(query_579318, "oauth_token", newJString(oauthToken))
  add(path_579317, "profileId", newJString(profileId))
  add(query_579318, "sortField", newJString(sortField))
  add(query_579318, "alt", newJString(alt))
  add(query_579318, "userIp", newJString(userIp))
  add(query_579318, "quotaUser", newJString(quotaUser))
  add(query_579318, "pageToken", newJString(pageToken))
  add(query_579318, "searchString", newJString(searchString))
  add(query_579318, "sortOrder", newJString(sortOrder))
  if ids != nil:
    query_579318.add "ids", ids
  add(query_579318, "fields", newJString(fields))
  add(query_579318, "maxResults", newJInt(maxResults))
  result = call_579316.call(path_579317, query_579318, nil, nil, nil)

var dfareportingAdvertiserGroupsList* = Call_DfareportingAdvertiserGroupsList_579298(
    name: "dfareportingAdvertiserGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups",
    validator: validate_DfareportingAdvertiserGroupsList_579299,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsList_579300,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsPatch_579353 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserGroupsPatch_579355(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsPatch_579354(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing advertiser group. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579356 = path.getOrDefault("profileId")
  valid_579356 = validateParameter(valid_579356, JString, required = true,
                                 default = nil)
  if valid_579356 != nil:
    section.add "profileId", valid_579356
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Advertiser group ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579357 = query.getOrDefault("key")
  valid_579357 = validateParameter(valid_579357, JString, required = false,
                                 default = nil)
  if valid_579357 != nil:
    section.add "key", valid_579357
  var valid_579358 = query.getOrDefault("prettyPrint")
  valid_579358 = validateParameter(valid_579358, JBool, required = false,
                                 default = newJBool(true))
  if valid_579358 != nil:
    section.add "prettyPrint", valid_579358
  var valid_579359 = query.getOrDefault("oauth_token")
  valid_579359 = validateParameter(valid_579359, JString, required = false,
                                 default = nil)
  if valid_579359 != nil:
    section.add "oauth_token", valid_579359
  var valid_579360 = query.getOrDefault("alt")
  valid_579360 = validateParameter(valid_579360, JString, required = false,
                                 default = newJString("json"))
  if valid_579360 != nil:
    section.add "alt", valid_579360
  var valid_579361 = query.getOrDefault("userIp")
  valid_579361 = validateParameter(valid_579361, JString, required = false,
                                 default = nil)
  if valid_579361 != nil:
    section.add "userIp", valid_579361
  var valid_579362 = query.getOrDefault("quotaUser")
  valid_579362 = validateParameter(valid_579362, JString, required = false,
                                 default = nil)
  if valid_579362 != nil:
    section.add "quotaUser", valid_579362
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_579363 = query.getOrDefault("id")
  valid_579363 = validateParameter(valid_579363, JString, required = true,
                                 default = nil)
  if valid_579363 != nil:
    section.add "id", valid_579363
  var valid_579364 = query.getOrDefault("fields")
  valid_579364 = validateParameter(valid_579364, JString, required = false,
                                 default = nil)
  if valid_579364 != nil:
    section.add "fields", valid_579364
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579366: Call_DfareportingAdvertiserGroupsPatch_579353;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing advertiser group. This method supports patch semantics.
  ## 
  let valid = call_579366.validator(path, query, header, formData, body)
  let scheme = call_579366.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579366.url(scheme.get, call_579366.host, call_579366.base,
                         call_579366.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579366, url, valid)

proc call*(call_579367: Call_DfareportingAdvertiserGroupsPatch_579353;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdvertiserGroupsPatch
  ## Updates an existing advertiser group. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Advertiser group ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579368 = newJObject()
  var query_579369 = newJObject()
  var body_579370 = newJObject()
  add(query_579369, "key", newJString(key))
  add(query_579369, "prettyPrint", newJBool(prettyPrint))
  add(query_579369, "oauth_token", newJString(oauthToken))
  add(path_579368, "profileId", newJString(profileId))
  add(query_579369, "alt", newJString(alt))
  add(query_579369, "userIp", newJString(userIp))
  add(query_579369, "quotaUser", newJString(quotaUser))
  add(query_579369, "id", newJString(id))
  if body != nil:
    body_579370 = body
  add(query_579369, "fields", newJString(fields))
  result = call_579367.call(path_579368, query_579369, nil, nil, body_579370)

var dfareportingAdvertiserGroupsPatch* = Call_DfareportingAdvertiserGroupsPatch_579353(
    name: "dfareportingAdvertiserGroupsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups",
    validator: validate_DfareportingAdvertiserGroupsPatch_579354,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsPatch_579355,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsGet_579371 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserGroupsGet_579373(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsGet_579372(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one advertiser group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Advertiser group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579374 = path.getOrDefault("profileId")
  valid_579374 = validateParameter(valid_579374, JString, required = true,
                                 default = nil)
  if valid_579374 != nil:
    section.add "profileId", valid_579374
  var valid_579375 = path.getOrDefault("id")
  valid_579375 = validateParameter(valid_579375, JString, required = true,
                                 default = nil)
  if valid_579375 != nil:
    section.add "id", valid_579375
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579376 = query.getOrDefault("key")
  valid_579376 = validateParameter(valid_579376, JString, required = false,
                                 default = nil)
  if valid_579376 != nil:
    section.add "key", valid_579376
  var valid_579377 = query.getOrDefault("prettyPrint")
  valid_579377 = validateParameter(valid_579377, JBool, required = false,
                                 default = newJBool(true))
  if valid_579377 != nil:
    section.add "prettyPrint", valid_579377
  var valid_579378 = query.getOrDefault("oauth_token")
  valid_579378 = validateParameter(valid_579378, JString, required = false,
                                 default = nil)
  if valid_579378 != nil:
    section.add "oauth_token", valid_579378
  var valid_579379 = query.getOrDefault("alt")
  valid_579379 = validateParameter(valid_579379, JString, required = false,
                                 default = newJString("json"))
  if valid_579379 != nil:
    section.add "alt", valid_579379
  var valid_579380 = query.getOrDefault("userIp")
  valid_579380 = validateParameter(valid_579380, JString, required = false,
                                 default = nil)
  if valid_579380 != nil:
    section.add "userIp", valid_579380
  var valid_579381 = query.getOrDefault("quotaUser")
  valid_579381 = validateParameter(valid_579381, JString, required = false,
                                 default = nil)
  if valid_579381 != nil:
    section.add "quotaUser", valid_579381
  var valid_579382 = query.getOrDefault("fields")
  valid_579382 = validateParameter(valid_579382, JString, required = false,
                                 default = nil)
  if valid_579382 != nil:
    section.add "fields", valid_579382
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579383: Call_DfareportingAdvertiserGroupsGet_579371;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one advertiser group by ID.
  ## 
  let valid = call_579383.validator(path, query, header, formData, body)
  let scheme = call_579383.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579383.url(scheme.get, call_579383.host, call_579383.base,
                         call_579383.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579383, url, valid)

proc call*(call_579384: Call_DfareportingAdvertiserGroupsGet_579371;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingAdvertiserGroupsGet
  ## Gets one advertiser group by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Advertiser group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579385 = newJObject()
  var query_579386 = newJObject()
  add(query_579386, "key", newJString(key))
  add(query_579386, "prettyPrint", newJBool(prettyPrint))
  add(query_579386, "oauth_token", newJString(oauthToken))
  add(path_579385, "profileId", newJString(profileId))
  add(path_579385, "id", newJString(id))
  add(query_579386, "alt", newJString(alt))
  add(query_579386, "userIp", newJString(userIp))
  add(query_579386, "quotaUser", newJString(quotaUser))
  add(query_579386, "fields", newJString(fields))
  result = call_579384.call(path_579385, query_579386, nil, nil, nil)

var dfareportingAdvertiserGroupsGet* = Call_DfareportingAdvertiserGroupsGet_579371(
    name: "dfareportingAdvertiserGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups/{id}",
    validator: validate_DfareportingAdvertiserGroupsGet_579372,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsGet_579373,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsDelete_579387 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserGroupsDelete_579389(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsDelete_579388(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing advertiser group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Advertiser group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579390 = path.getOrDefault("profileId")
  valid_579390 = validateParameter(valid_579390, JString, required = true,
                                 default = nil)
  if valid_579390 != nil:
    section.add "profileId", valid_579390
  var valid_579391 = path.getOrDefault("id")
  valid_579391 = validateParameter(valid_579391, JString, required = true,
                                 default = nil)
  if valid_579391 != nil:
    section.add "id", valid_579391
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579392 = query.getOrDefault("key")
  valid_579392 = validateParameter(valid_579392, JString, required = false,
                                 default = nil)
  if valid_579392 != nil:
    section.add "key", valid_579392
  var valid_579393 = query.getOrDefault("prettyPrint")
  valid_579393 = validateParameter(valid_579393, JBool, required = false,
                                 default = newJBool(true))
  if valid_579393 != nil:
    section.add "prettyPrint", valid_579393
  var valid_579394 = query.getOrDefault("oauth_token")
  valid_579394 = validateParameter(valid_579394, JString, required = false,
                                 default = nil)
  if valid_579394 != nil:
    section.add "oauth_token", valid_579394
  var valid_579395 = query.getOrDefault("alt")
  valid_579395 = validateParameter(valid_579395, JString, required = false,
                                 default = newJString("json"))
  if valid_579395 != nil:
    section.add "alt", valid_579395
  var valid_579396 = query.getOrDefault("userIp")
  valid_579396 = validateParameter(valid_579396, JString, required = false,
                                 default = nil)
  if valid_579396 != nil:
    section.add "userIp", valid_579396
  var valid_579397 = query.getOrDefault("quotaUser")
  valid_579397 = validateParameter(valid_579397, JString, required = false,
                                 default = nil)
  if valid_579397 != nil:
    section.add "quotaUser", valid_579397
  var valid_579398 = query.getOrDefault("fields")
  valid_579398 = validateParameter(valid_579398, JString, required = false,
                                 default = nil)
  if valid_579398 != nil:
    section.add "fields", valid_579398
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579399: Call_DfareportingAdvertiserGroupsDelete_579387;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing advertiser group.
  ## 
  let valid = call_579399.validator(path, query, header, formData, body)
  let scheme = call_579399.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579399.url(scheme.get, call_579399.host, call_579399.base,
                         call_579399.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579399, url, valid)

proc call*(call_579400: Call_DfareportingAdvertiserGroupsDelete_579387;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingAdvertiserGroupsDelete
  ## Deletes an existing advertiser group.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Advertiser group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579401 = newJObject()
  var query_579402 = newJObject()
  add(query_579402, "key", newJString(key))
  add(query_579402, "prettyPrint", newJBool(prettyPrint))
  add(query_579402, "oauth_token", newJString(oauthToken))
  add(path_579401, "profileId", newJString(profileId))
  add(path_579401, "id", newJString(id))
  add(query_579402, "alt", newJString(alt))
  add(query_579402, "userIp", newJString(userIp))
  add(query_579402, "quotaUser", newJString(quotaUser))
  add(query_579402, "fields", newJString(fields))
  result = call_579400.call(path_579401, query_579402, nil, nil, nil)

var dfareportingAdvertiserGroupsDelete* = Call_DfareportingAdvertiserGroupsDelete_579387(
    name: "dfareportingAdvertiserGroupsDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups/{id}",
    validator: validate_DfareportingAdvertiserGroupsDelete_579388,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsDelete_579389,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesUpdate_579428 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserLandingPagesUpdate_579430(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesUpdate_579429(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing landing page.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579431 = path.getOrDefault("profileId")
  valid_579431 = validateParameter(valid_579431, JString, required = true,
                                 default = nil)
  if valid_579431 != nil:
    section.add "profileId", valid_579431
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579432 = query.getOrDefault("key")
  valid_579432 = validateParameter(valid_579432, JString, required = false,
                                 default = nil)
  if valid_579432 != nil:
    section.add "key", valid_579432
  var valid_579433 = query.getOrDefault("prettyPrint")
  valid_579433 = validateParameter(valid_579433, JBool, required = false,
                                 default = newJBool(true))
  if valid_579433 != nil:
    section.add "prettyPrint", valid_579433
  var valid_579434 = query.getOrDefault("oauth_token")
  valid_579434 = validateParameter(valid_579434, JString, required = false,
                                 default = nil)
  if valid_579434 != nil:
    section.add "oauth_token", valid_579434
  var valid_579435 = query.getOrDefault("alt")
  valid_579435 = validateParameter(valid_579435, JString, required = false,
                                 default = newJString("json"))
  if valid_579435 != nil:
    section.add "alt", valid_579435
  var valid_579436 = query.getOrDefault("userIp")
  valid_579436 = validateParameter(valid_579436, JString, required = false,
                                 default = nil)
  if valid_579436 != nil:
    section.add "userIp", valid_579436
  var valid_579437 = query.getOrDefault("quotaUser")
  valid_579437 = validateParameter(valid_579437, JString, required = false,
                                 default = nil)
  if valid_579437 != nil:
    section.add "quotaUser", valid_579437
  var valid_579438 = query.getOrDefault("fields")
  valid_579438 = validateParameter(valid_579438, JString, required = false,
                                 default = nil)
  if valid_579438 != nil:
    section.add "fields", valid_579438
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579440: Call_DfareportingAdvertiserLandingPagesUpdate_579428;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing landing page.
  ## 
  let valid = call_579440.validator(path, query, header, formData, body)
  let scheme = call_579440.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579440.url(scheme.get, call_579440.host, call_579440.base,
                         call_579440.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579440, url, valid)

proc call*(call_579441: Call_DfareportingAdvertiserLandingPagesUpdate_579428;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdvertiserLandingPagesUpdate
  ## Updates an existing landing page.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579442 = newJObject()
  var query_579443 = newJObject()
  var body_579444 = newJObject()
  add(query_579443, "key", newJString(key))
  add(query_579443, "prettyPrint", newJBool(prettyPrint))
  add(query_579443, "oauth_token", newJString(oauthToken))
  add(path_579442, "profileId", newJString(profileId))
  add(query_579443, "alt", newJString(alt))
  add(query_579443, "userIp", newJString(userIp))
  add(query_579443, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579444 = body
  add(query_579443, "fields", newJString(fields))
  result = call_579441.call(path_579442, query_579443, nil, nil, body_579444)

var dfareportingAdvertiserLandingPagesUpdate* = Call_DfareportingAdvertiserLandingPagesUpdate_579428(
    name: "dfareportingAdvertiserLandingPagesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages",
    validator: validate_DfareportingAdvertiserLandingPagesUpdate_579429,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserLandingPagesUpdate_579430,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesInsert_579445 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserLandingPagesInsert_579447(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesInsert_579446(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new landing page.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579448 = path.getOrDefault("profileId")
  valid_579448 = validateParameter(valid_579448, JString, required = true,
                                 default = nil)
  if valid_579448 != nil:
    section.add "profileId", valid_579448
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579449 = query.getOrDefault("key")
  valid_579449 = validateParameter(valid_579449, JString, required = false,
                                 default = nil)
  if valid_579449 != nil:
    section.add "key", valid_579449
  var valid_579450 = query.getOrDefault("prettyPrint")
  valid_579450 = validateParameter(valid_579450, JBool, required = false,
                                 default = newJBool(true))
  if valid_579450 != nil:
    section.add "prettyPrint", valid_579450
  var valid_579451 = query.getOrDefault("oauth_token")
  valid_579451 = validateParameter(valid_579451, JString, required = false,
                                 default = nil)
  if valid_579451 != nil:
    section.add "oauth_token", valid_579451
  var valid_579452 = query.getOrDefault("alt")
  valid_579452 = validateParameter(valid_579452, JString, required = false,
                                 default = newJString("json"))
  if valid_579452 != nil:
    section.add "alt", valid_579452
  var valid_579453 = query.getOrDefault("userIp")
  valid_579453 = validateParameter(valid_579453, JString, required = false,
                                 default = nil)
  if valid_579453 != nil:
    section.add "userIp", valid_579453
  var valid_579454 = query.getOrDefault("quotaUser")
  valid_579454 = validateParameter(valid_579454, JString, required = false,
                                 default = nil)
  if valid_579454 != nil:
    section.add "quotaUser", valid_579454
  var valid_579455 = query.getOrDefault("fields")
  valid_579455 = validateParameter(valid_579455, JString, required = false,
                                 default = nil)
  if valid_579455 != nil:
    section.add "fields", valid_579455
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579457: Call_DfareportingAdvertiserLandingPagesInsert_579445;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new landing page.
  ## 
  let valid = call_579457.validator(path, query, header, formData, body)
  let scheme = call_579457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579457.url(scheme.get, call_579457.host, call_579457.base,
                         call_579457.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579457, url, valid)

proc call*(call_579458: Call_DfareportingAdvertiserLandingPagesInsert_579445;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdvertiserLandingPagesInsert
  ## Inserts a new landing page.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579459 = newJObject()
  var query_579460 = newJObject()
  var body_579461 = newJObject()
  add(query_579460, "key", newJString(key))
  add(query_579460, "prettyPrint", newJBool(prettyPrint))
  add(query_579460, "oauth_token", newJString(oauthToken))
  add(path_579459, "profileId", newJString(profileId))
  add(query_579460, "alt", newJString(alt))
  add(query_579460, "userIp", newJString(userIp))
  add(query_579460, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579461 = body
  add(query_579460, "fields", newJString(fields))
  result = call_579458.call(path_579459, query_579460, nil, nil, body_579461)

var dfareportingAdvertiserLandingPagesInsert* = Call_DfareportingAdvertiserLandingPagesInsert_579445(
    name: "dfareportingAdvertiserLandingPagesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages",
    validator: validate_DfareportingAdvertiserLandingPagesInsert_579446,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserLandingPagesInsert_579447,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesList_579403 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserLandingPagesList_579405(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesList_579404(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of landing pages.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579406 = path.getOrDefault("profileId")
  valid_579406 = validateParameter(valid_579406, JString, required = true,
                                 default = nil)
  if valid_579406 != nil:
    section.add "profileId", valid_579406
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   advertiserIds: JArray
  ##                : Select only landing pages that belong to these advertisers.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived landing pages. Don't set this field to select both archived and non-archived landing pages.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for landing pages by name or ID. Wildcards (*) are allowed. For example, "landingpage*2017" will return landing pages with names like "landingpage July 2017", "landingpage March 2017", or simply "landingpage 2017". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "landingpage" will match campaigns with name "my landingpage", "landingpage 2015", or simply "landingpage".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   subaccountId: JString
  ##               : Select only landing pages that belong to this subaccount.
  ##   campaignIds: JArray
  ##              : Select only landing pages that are associated with these campaigns.
  ##   ids: JArray
  ##      : Select only landing pages with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_579407 = query.getOrDefault("key")
  valid_579407 = validateParameter(valid_579407, JString, required = false,
                                 default = nil)
  if valid_579407 != nil:
    section.add "key", valid_579407
  var valid_579408 = query.getOrDefault("prettyPrint")
  valid_579408 = validateParameter(valid_579408, JBool, required = false,
                                 default = newJBool(true))
  if valid_579408 != nil:
    section.add "prettyPrint", valid_579408
  var valid_579409 = query.getOrDefault("oauth_token")
  valid_579409 = validateParameter(valid_579409, JString, required = false,
                                 default = nil)
  if valid_579409 != nil:
    section.add "oauth_token", valid_579409
  var valid_579410 = query.getOrDefault("sortField")
  valid_579410 = validateParameter(valid_579410, JString, required = false,
                                 default = newJString("ID"))
  if valid_579410 != nil:
    section.add "sortField", valid_579410
  var valid_579411 = query.getOrDefault("advertiserIds")
  valid_579411 = validateParameter(valid_579411, JArray, required = false,
                                 default = nil)
  if valid_579411 != nil:
    section.add "advertiserIds", valid_579411
  var valid_579412 = query.getOrDefault("alt")
  valid_579412 = validateParameter(valid_579412, JString, required = false,
                                 default = newJString("json"))
  if valid_579412 != nil:
    section.add "alt", valid_579412
  var valid_579413 = query.getOrDefault("userIp")
  valid_579413 = validateParameter(valid_579413, JString, required = false,
                                 default = nil)
  if valid_579413 != nil:
    section.add "userIp", valid_579413
  var valid_579414 = query.getOrDefault("archived")
  valid_579414 = validateParameter(valid_579414, JBool, required = false, default = nil)
  if valid_579414 != nil:
    section.add "archived", valid_579414
  var valid_579415 = query.getOrDefault("quotaUser")
  valid_579415 = validateParameter(valid_579415, JString, required = false,
                                 default = nil)
  if valid_579415 != nil:
    section.add "quotaUser", valid_579415
  var valid_579416 = query.getOrDefault("pageToken")
  valid_579416 = validateParameter(valid_579416, JString, required = false,
                                 default = nil)
  if valid_579416 != nil:
    section.add "pageToken", valid_579416
  var valid_579417 = query.getOrDefault("searchString")
  valid_579417 = validateParameter(valid_579417, JString, required = false,
                                 default = nil)
  if valid_579417 != nil:
    section.add "searchString", valid_579417
  var valid_579418 = query.getOrDefault("sortOrder")
  valid_579418 = validateParameter(valid_579418, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_579418 != nil:
    section.add "sortOrder", valid_579418
  var valid_579419 = query.getOrDefault("subaccountId")
  valid_579419 = validateParameter(valid_579419, JString, required = false,
                                 default = nil)
  if valid_579419 != nil:
    section.add "subaccountId", valid_579419
  var valid_579420 = query.getOrDefault("campaignIds")
  valid_579420 = validateParameter(valid_579420, JArray, required = false,
                                 default = nil)
  if valid_579420 != nil:
    section.add "campaignIds", valid_579420
  var valid_579421 = query.getOrDefault("ids")
  valid_579421 = validateParameter(valid_579421, JArray, required = false,
                                 default = nil)
  if valid_579421 != nil:
    section.add "ids", valid_579421
  var valid_579422 = query.getOrDefault("fields")
  valid_579422 = validateParameter(valid_579422, JString, required = false,
                                 default = nil)
  if valid_579422 != nil:
    section.add "fields", valid_579422
  var valid_579423 = query.getOrDefault("maxResults")
  valid_579423 = validateParameter(valid_579423, JInt, required = false,
                                 default = newJInt(1000))
  if valid_579423 != nil:
    section.add "maxResults", valid_579423
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579424: Call_DfareportingAdvertiserLandingPagesList_579403;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of landing pages.
  ## 
  let valid = call_579424.validator(path, query, header, formData, body)
  let scheme = call_579424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579424.url(scheme.get, call_579424.host, call_579424.base,
                         call_579424.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579424, url, valid)

proc call*(call_579425: Call_DfareportingAdvertiserLandingPagesList_579403;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; sortField: string = "ID";
          advertiserIds: JsonNode = nil; alt: string = "json"; userIp: string = "";
          archived: bool = false; quotaUser: string = ""; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          subaccountId: string = ""; campaignIds: JsonNode = nil; ids: JsonNode = nil;
          fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingAdvertiserLandingPagesList
  ## Retrieves a list of landing pages.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   advertiserIds: JArray
  ##                : Select only landing pages that belong to these advertisers.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived landing pages. Don't set this field to select both archived and non-archived landing pages.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for landing pages by name or ID. Wildcards (*) are allowed. For example, "landingpage*2017" will return landing pages with names like "landingpage July 2017", "landingpage March 2017", or simply "landingpage 2017". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "landingpage" will match campaigns with name "my landingpage", "landingpage 2015", or simply "landingpage".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   subaccountId: string
  ##               : Select only landing pages that belong to this subaccount.
  ##   campaignIds: JArray
  ##              : Select only landing pages that are associated with these campaigns.
  ##   ids: JArray
  ##      : Select only landing pages with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_579426 = newJObject()
  var query_579427 = newJObject()
  add(query_579427, "key", newJString(key))
  add(query_579427, "prettyPrint", newJBool(prettyPrint))
  add(query_579427, "oauth_token", newJString(oauthToken))
  add(path_579426, "profileId", newJString(profileId))
  add(query_579427, "sortField", newJString(sortField))
  if advertiserIds != nil:
    query_579427.add "advertiserIds", advertiserIds
  add(query_579427, "alt", newJString(alt))
  add(query_579427, "userIp", newJString(userIp))
  add(query_579427, "archived", newJBool(archived))
  add(query_579427, "quotaUser", newJString(quotaUser))
  add(query_579427, "pageToken", newJString(pageToken))
  add(query_579427, "searchString", newJString(searchString))
  add(query_579427, "sortOrder", newJString(sortOrder))
  add(query_579427, "subaccountId", newJString(subaccountId))
  if campaignIds != nil:
    query_579427.add "campaignIds", campaignIds
  if ids != nil:
    query_579427.add "ids", ids
  add(query_579427, "fields", newJString(fields))
  add(query_579427, "maxResults", newJInt(maxResults))
  result = call_579425.call(path_579426, query_579427, nil, nil, nil)

var dfareportingAdvertiserLandingPagesList* = Call_DfareportingAdvertiserLandingPagesList_579403(
    name: "dfareportingAdvertiserLandingPagesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages",
    validator: validate_DfareportingAdvertiserLandingPagesList_579404,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserLandingPagesList_579405,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesPatch_579462 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserLandingPagesPatch_579464(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesPatch_579463(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing landing page. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579465 = path.getOrDefault("profileId")
  valid_579465 = validateParameter(valid_579465, JString, required = true,
                                 default = nil)
  if valid_579465 != nil:
    section.add "profileId", valid_579465
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Landing page ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579466 = query.getOrDefault("key")
  valid_579466 = validateParameter(valid_579466, JString, required = false,
                                 default = nil)
  if valid_579466 != nil:
    section.add "key", valid_579466
  var valid_579467 = query.getOrDefault("prettyPrint")
  valid_579467 = validateParameter(valid_579467, JBool, required = false,
                                 default = newJBool(true))
  if valid_579467 != nil:
    section.add "prettyPrint", valid_579467
  var valid_579468 = query.getOrDefault("oauth_token")
  valid_579468 = validateParameter(valid_579468, JString, required = false,
                                 default = nil)
  if valid_579468 != nil:
    section.add "oauth_token", valid_579468
  var valid_579469 = query.getOrDefault("alt")
  valid_579469 = validateParameter(valid_579469, JString, required = false,
                                 default = newJString("json"))
  if valid_579469 != nil:
    section.add "alt", valid_579469
  var valid_579470 = query.getOrDefault("userIp")
  valid_579470 = validateParameter(valid_579470, JString, required = false,
                                 default = nil)
  if valid_579470 != nil:
    section.add "userIp", valid_579470
  var valid_579471 = query.getOrDefault("quotaUser")
  valid_579471 = validateParameter(valid_579471, JString, required = false,
                                 default = nil)
  if valid_579471 != nil:
    section.add "quotaUser", valid_579471
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_579472 = query.getOrDefault("id")
  valid_579472 = validateParameter(valid_579472, JString, required = true,
                                 default = nil)
  if valid_579472 != nil:
    section.add "id", valid_579472
  var valid_579473 = query.getOrDefault("fields")
  valid_579473 = validateParameter(valid_579473, JString, required = false,
                                 default = nil)
  if valid_579473 != nil:
    section.add "fields", valid_579473
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579475: Call_DfareportingAdvertiserLandingPagesPatch_579462;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing landing page. This method supports patch semantics.
  ## 
  let valid = call_579475.validator(path, query, header, formData, body)
  let scheme = call_579475.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579475.url(scheme.get, call_579475.host, call_579475.base,
                         call_579475.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579475, url, valid)

proc call*(call_579476: Call_DfareportingAdvertiserLandingPagesPatch_579462;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdvertiserLandingPagesPatch
  ## Updates an existing landing page. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Landing page ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579477 = newJObject()
  var query_579478 = newJObject()
  var body_579479 = newJObject()
  add(query_579478, "key", newJString(key))
  add(query_579478, "prettyPrint", newJBool(prettyPrint))
  add(query_579478, "oauth_token", newJString(oauthToken))
  add(path_579477, "profileId", newJString(profileId))
  add(query_579478, "alt", newJString(alt))
  add(query_579478, "userIp", newJString(userIp))
  add(query_579478, "quotaUser", newJString(quotaUser))
  add(query_579478, "id", newJString(id))
  if body != nil:
    body_579479 = body
  add(query_579478, "fields", newJString(fields))
  result = call_579476.call(path_579477, query_579478, nil, nil, body_579479)

var dfareportingAdvertiserLandingPagesPatch* = Call_DfareportingAdvertiserLandingPagesPatch_579462(
    name: "dfareportingAdvertiserLandingPagesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages",
    validator: validate_DfareportingAdvertiserLandingPagesPatch_579463,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserLandingPagesPatch_579464,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesGet_579480 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertiserLandingPagesGet_579482(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesGet_579481(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one landing page by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Landing page ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579483 = path.getOrDefault("profileId")
  valid_579483 = validateParameter(valid_579483, JString, required = true,
                                 default = nil)
  if valid_579483 != nil:
    section.add "profileId", valid_579483
  var valid_579484 = path.getOrDefault("id")
  valid_579484 = validateParameter(valid_579484, JString, required = true,
                                 default = nil)
  if valid_579484 != nil:
    section.add "id", valid_579484
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579485 = query.getOrDefault("key")
  valid_579485 = validateParameter(valid_579485, JString, required = false,
                                 default = nil)
  if valid_579485 != nil:
    section.add "key", valid_579485
  var valid_579486 = query.getOrDefault("prettyPrint")
  valid_579486 = validateParameter(valid_579486, JBool, required = false,
                                 default = newJBool(true))
  if valid_579486 != nil:
    section.add "prettyPrint", valid_579486
  var valid_579487 = query.getOrDefault("oauth_token")
  valid_579487 = validateParameter(valid_579487, JString, required = false,
                                 default = nil)
  if valid_579487 != nil:
    section.add "oauth_token", valid_579487
  var valid_579488 = query.getOrDefault("alt")
  valid_579488 = validateParameter(valid_579488, JString, required = false,
                                 default = newJString("json"))
  if valid_579488 != nil:
    section.add "alt", valid_579488
  var valid_579489 = query.getOrDefault("userIp")
  valid_579489 = validateParameter(valid_579489, JString, required = false,
                                 default = nil)
  if valid_579489 != nil:
    section.add "userIp", valid_579489
  var valid_579490 = query.getOrDefault("quotaUser")
  valid_579490 = validateParameter(valid_579490, JString, required = false,
                                 default = nil)
  if valid_579490 != nil:
    section.add "quotaUser", valid_579490
  var valid_579491 = query.getOrDefault("fields")
  valid_579491 = validateParameter(valid_579491, JString, required = false,
                                 default = nil)
  if valid_579491 != nil:
    section.add "fields", valid_579491
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579492: Call_DfareportingAdvertiserLandingPagesGet_579480;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one landing page by ID.
  ## 
  let valid = call_579492.validator(path, query, header, formData, body)
  let scheme = call_579492.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579492.url(scheme.get, call_579492.host, call_579492.base,
                         call_579492.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579492, url, valid)

proc call*(call_579493: Call_DfareportingAdvertiserLandingPagesGet_579480;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingAdvertiserLandingPagesGet
  ## Gets one landing page by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Landing page ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579494 = newJObject()
  var query_579495 = newJObject()
  add(query_579495, "key", newJString(key))
  add(query_579495, "prettyPrint", newJBool(prettyPrint))
  add(query_579495, "oauth_token", newJString(oauthToken))
  add(path_579494, "profileId", newJString(profileId))
  add(path_579494, "id", newJString(id))
  add(query_579495, "alt", newJString(alt))
  add(query_579495, "userIp", newJString(userIp))
  add(query_579495, "quotaUser", newJString(quotaUser))
  add(query_579495, "fields", newJString(fields))
  result = call_579493.call(path_579494, query_579495, nil, nil, nil)

var dfareportingAdvertiserLandingPagesGet* = Call_DfareportingAdvertiserLandingPagesGet_579480(
    name: "dfareportingAdvertiserLandingPagesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages/{id}",
    validator: validate_DfareportingAdvertiserLandingPagesGet_579481,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserLandingPagesGet_579482,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersUpdate_579523 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertisersUpdate_579525(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersUpdate_579524(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing advertiser.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579526 = path.getOrDefault("profileId")
  valid_579526 = validateParameter(valid_579526, JString, required = true,
                                 default = nil)
  if valid_579526 != nil:
    section.add "profileId", valid_579526
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579527 = query.getOrDefault("key")
  valid_579527 = validateParameter(valid_579527, JString, required = false,
                                 default = nil)
  if valid_579527 != nil:
    section.add "key", valid_579527
  var valid_579528 = query.getOrDefault("prettyPrint")
  valid_579528 = validateParameter(valid_579528, JBool, required = false,
                                 default = newJBool(true))
  if valid_579528 != nil:
    section.add "prettyPrint", valid_579528
  var valid_579529 = query.getOrDefault("oauth_token")
  valid_579529 = validateParameter(valid_579529, JString, required = false,
                                 default = nil)
  if valid_579529 != nil:
    section.add "oauth_token", valid_579529
  var valid_579530 = query.getOrDefault("alt")
  valid_579530 = validateParameter(valid_579530, JString, required = false,
                                 default = newJString("json"))
  if valid_579530 != nil:
    section.add "alt", valid_579530
  var valid_579531 = query.getOrDefault("userIp")
  valid_579531 = validateParameter(valid_579531, JString, required = false,
                                 default = nil)
  if valid_579531 != nil:
    section.add "userIp", valid_579531
  var valid_579532 = query.getOrDefault("quotaUser")
  valid_579532 = validateParameter(valid_579532, JString, required = false,
                                 default = nil)
  if valid_579532 != nil:
    section.add "quotaUser", valid_579532
  var valid_579533 = query.getOrDefault("fields")
  valid_579533 = validateParameter(valid_579533, JString, required = false,
                                 default = nil)
  if valid_579533 != nil:
    section.add "fields", valid_579533
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579535: Call_DfareportingAdvertisersUpdate_579523; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing advertiser.
  ## 
  let valid = call_579535.validator(path, query, header, formData, body)
  let scheme = call_579535.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579535.url(scheme.get, call_579535.host, call_579535.base,
                         call_579535.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579535, url, valid)

proc call*(call_579536: Call_DfareportingAdvertisersUpdate_579523;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdvertisersUpdate
  ## Updates an existing advertiser.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579537 = newJObject()
  var query_579538 = newJObject()
  var body_579539 = newJObject()
  add(query_579538, "key", newJString(key))
  add(query_579538, "prettyPrint", newJBool(prettyPrint))
  add(query_579538, "oauth_token", newJString(oauthToken))
  add(path_579537, "profileId", newJString(profileId))
  add(query_579538, "alt", newJString(alt))
  add(query_579538, "userIp", newJString(userIp))
  add(query_579538, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579539 = body
  add(query_579538, "fields", newJString(fields))
  result = call_579536.call(path_579537, query_579538, nil, nil, body_579539)

var dfareportingAdvertisersUpdate* = Call_DfareportingAdvertisersUpdate_579523(
    name: "dfareportingAdvertisersUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/advertisers",
    validator: validate_DfareportingAdvertisersUpdate_579524,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertisersUpdate_579525,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersInsert_579540 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertisersInsert_579542(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersInsert_579541(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new advertiser.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579543 = path.getOrDefault("profileId")
  valid_579543 = validateParameter(valid_579543, JString, required = true,
                                 default = nil)
  if valid_579543 != nil:
    section.add "profileId", valid_579543
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579544 = query.getOrDefault("key")
  valid_579544 = validateParameter(valid_579544, JString, required = false,
                                 default = nil)
  if valid_579544 != nil:
    section.add "key", valid_579544
  var valid_579545 = query.getOrDefault("prettyPrint")
  valid_579545 = validateParameter(valid_579545, JBool, required = false,
                                 default = newJBool(true))
  if valid_579545 != nil:
    section.add "prettyPrint", valid_579545
  var valid_579546 = query.getOrDefault("oauth_token")
  valid_579546 = validateParameter(valid_579546, JString, required = false,
                                 default = nil)
  if valid_579546 != nil:
    section.add "oauth_token", valid_579546
  var valid_579547 = query.getOrDefault("alt")
  valid_579547 = validateParameter(valid_579547, JString, required = false,
                                 default = newJString("json"))
  if valid_579547 != nil:
    section.add "alt", valid_579547
  var valid_579548 = query.getOrDefault("userIp")
  valid_579548 = validateParameter(valid_579548, JString, required = false,
                                 default = nil)
  if valid_579548 != nil:
    section.add "userIp", valid_579548
  var valid_579549 = query.getOrDefault("quotaUser")
  valid_579549 = validateParameter(valid_579549, JString, required = false,
                                 default = nil)
  if valid_579549 != nil:
    section.add "quotaUser", valid_579549
  var valid_579550 = query.getOrDefault("fields")
  valid_579550 = validateParameter(valid_579550, JString, required = false,
                                 default = nil)
  if valid_579550 != nil:
    section.add "fields", valid_579550
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579552: Call_DfareportingAdvertisersInsert_579540; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new advertiser.
  ## 
  let valid = call_579552.validator(path, query, header, formData, body)
  let scheme = call_579552.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579552.url(scheme.get, call_579552.host, call_579552.base,
                         call_579552.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579552, url, valid)

proc call*(call_579553: Call_DfareportingAdvertisersInsert_579540;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdvertisersInsert
  ## Inserts a new advertiser.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579554 = newJObject()
  var query_579555 = newJObject()
  var body_579556 = newJObject()
  add(query_579555, "key", newJString(key))
  add(query_579555, "prettyPrint", newJBool(prettyPrint))
  add(query_579555, "oauth_token", newJString(oauthToken))
  add(path_579554, "profileId", newJString(profileId))
  add(query_579555, "alt", newJString(alt))
  add(query_579555, "userIp", newJString(userIp))
  add(query_579555, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579556 = body
  add(query_579555, "fields", newJString(fields))
  result = call_579553.call(path_579554, query_579555, nil, nil, body_579556)

var dfareportingAdvertisersInsert* = Call_DfareportingAdvertisersInsert_579540(
    name: "dfareportingAdvertisersInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/advertisers",
    validator: validate_DfareportingAdvertisersInsert_579541,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertisersInsert_579542,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersList_579496 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertisersList_579498(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersList_579497(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of advertisers, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579499 = path.getOrDefault("profileId")
  valid_579499 = validateParameter(valid_579499, JString, required = true,
                                 default = nil)
  if valid_579499 != nil:
    section.add "profileId", valid_579499
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   floodlightConfigurationIds: JArray
  ##                             : Select only advertisers with these floodlight configuration IDs.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser June 2015", "advertiser April 2015", or simply "advertiser 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertiser" will match objects with name "my advertiser", "advertiser 2015", or simply "advertiser".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   subaccountId: JString
  ##               : Select only advertisers with these subaccount IDs.
  ##   onlyParent: JBool
  ##             : Select only advertisers which use another advertiser's floodlight configuration.
  ##   status: JString
  ##         : Select only advertisers with the specified status.
  ##   ids: JArray
  ##      : Select only advertisers with these IDs.
  ##   includeAdvertisersWithoutGroupsOnly: JBool
  ##                                      : Select only advertisers which do not belong to any advertiser group.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   advertiserGroupIds: JArray
  ##                     : Select only advertisers with these advertiser group IDs.
  section = newJObject()
  var valid_579500 = query.getOrDefault("key")
  valid_579500 = validateParameter(valid_579500, JString, required = false,
                                 default = nil)
  if valid_579500 != nil:
    section.add "key", valid_579500
  var valid_579501 = query.getOrDefault("prettyPrint")
  valid_579501 = validateParameter(valid_579501, JBool, required = false,
                                 default = newJBool(true))
  if valid_579501 != nil:
    section.add "prettyPrint", valid_579501
  var valid_579502 = query.getOrDefault("oauth_token")
  valid_579502 = validateParameter(valid_579502, JString, required = false,
                                 default = nil)
  if valid_579502 != nil:
    section.add "oauth_token", valid_579502
  var valid_579503 = query.getOrDefault("floodlightConfigurationIds")
  valid_579503 = validateParameter(valid_579503, JArray, required = false,
                                 default = nil)
  if valid_579503 != nil:
    section.add "floodlightConfigurationIds", valid_579503
  var valid_579504 = query.getOrDefault("sortField")
  valid_579504 = validateParameter(valid_579504, JString, required = false,
                                 default = newJString("ID"))
  if valid_579504 != nil:
    section.add "sortField", valid_579504
  var valid_579505 = query.getOrDefault("alt")
  valid_579505 = validateParameter(valid_579505, JString, required = false,
                                 default = newJString("json"))
  if valid_579505 != nil:
    section.add "alt", valid_579505
  var valid_579506 = query.getOrDefault("userIp")
  valid_579506 = validateParameter(valid_579506, JString, required = false,
                                 default = nil)
  if valid_579506 != nil:
    section.add "userIp", valid_579506
  var valid_579507 = query.getOrDefault("quotaUser")
  valid_579507 = validateParameter(valid_579507, JString, required = false,
                                 default = nil)
  if valid_579507 != nil:
    section.add "quotaUser", valid_579507
  var valid_579508 = query.getOrDefault("pageToken")
  valid_579508 = validateParameter(valid_579508, JString, required = false,
                                 default = nil)
  if valid_579508 != nil:
    section.add "pageToken", valid_579508
  var valid_579509 = query.getOrDefault("searchString")
  valid_579509 = validateParameter(valid_579509, JString, required = false,
                                 default = nil)
  if valid_579509 != nil:
    section.add "searchString", valid_579509
  var valid_579510 = query.getOrDefault("sortOrder")
  valid_579510 = validateParameter(valid_579510, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_579510 != nil:
    section.add "sortOrder", valid_579510
  var valid_579511 = query.getOrDefault("subaccountId")
  valid_579511 = validateParameter(valid_579511, JString, required = false,
                                 default = nil)
  if valid_579511 != nil:
    section.add "subaccountId", valid_579511
  var valid_579512 = query.getOrDefault("onlyParent")
  valid_579512 = validateParameter(valid_579512, JBool, required = false, default = nil)
  if valid_579512 != nil:
    section.add "onlyParent", valid_579512
  var valid_579513 = query.getOrDefault("status")
  valid_579513 = validateParameter(valid_579513, JString, required = false,
                                 default = newJString("APPROVED"))
  if valid_579513 != nil:
    section.add "status", valid_579513
  var valid_579514 = query.getOrDefault("ids")
  valid_579514 = validateParameter(valid_579514, JArray, required = false,
                                 default = nil)
  if valid_579514 != nil:
    section.add "ids", valid_579514
  var valid_579515 = query.getOrDefault("includeAdvertisersWithoutGroupsOnly")
  valid_579515 = validateParameter(valid_579515, JBool, required = false, default = nil)
  if valid_579515 != nil:
    section.add "includeAdvertisersWithoutGroupsOnly", valid_579515
  var valid_579516 = query.getOrDefault("fields")
  valid_579516 = validateParameter(valid_579516, JString, required = false,
                                 default = nil)
  if valid_579516 != nil:
    section.add "fields", valid_579516
  var valid_579517 = query.getOrDefault("maxResults")
  valid_579517 = validateParameter(valid_579517, JInt, required = false,
                                 default = newJInt(1000))
  if valid_579517 != nil:
    section.add "maxResults", valid_579517
  var valid_579518 = query.getOrDefault("advertiserGroupIds")
  valid_579518 = validateParameter(valid_579518, JArray, required = false,
                                 default = nil)
  if valid_579518 != nil:
    section.add "advertiserGroupIds", valid_579518
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579519: Call_DfareportingAdvertisersList_579496; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of advertisers, possibly filtered. This method supports paging.
  ## 
  let valid = call_579519.validator(path, query, header, formData, body)
  let scheme = call_579519.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579519.url(scheme.get, call_579519.host, call_579519.base,
                         call_579519.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579519, url, valid)

proc call*(call_579520: Call_DfareportingAdvertisersList_579496; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          floodlightConfigurationIds: JsonNode = nil; sortField: string = "ID";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          pageToken: string = ""; searchString: string = "";
          sortOrder: string = "ASCENDING"; subaccountId: string = "";
          onlyParent: bool = false; status: string = "APPROVED"; ids: JsonNode = nil;
          includeAdvertisersWithoutGroupsOnly: bool = false; fields: string = "";
          maxResults: int = 1000; advertiserGroupIds: JsonNode = nil): Recallable =
  ## dfareportingAdvertisersList
  ## Retrieves a list of advertisers, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   floodlightConfigurationIds: JArray
  ##                             : Select only advertisers with these floodlight configuration IDs.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser June 2015", "advertiser April 2015", or simply "advertiser 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertiser" will match objects with name "my advertiser", "advertiser 2015", or simply "advertiser".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   subaccountId: string
  ##               : Select only advertisers with these subaccount IDs.
  ##   onlyParent: bool
  ##             : Select only advertisers which use another advertiser's floodlight configuration.
  ##   status: string
  ##         : Select only advertisers with the specified status.
  ##   ids: JArray
  ##      : Select only advertisers with these IDs.
  ##   includeAdvertisersWithoutGroupsOnly: bool
  ##                                      : Select only advertisers which do not belong to any advertiser group.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   advertiserGroupIds: JArray
  ##                     : Select only advertisers with these advertiser group IDs.
  var path_579521 = newJObject()
  var query_579522 = newJObject()
  add(query_579522, "key", newJString(key))
  add(query_579522, "prettyPrint", newJBool(prettyPrint))
  add(query_579522, "oauth_token", newJString(oauthToken))
  if floodlightConfigurationIds != nil:
    query_579522.add "floodlightConfigurationIds", floodlightConfigurationIds
  add(path_579521, "profileId", newJString(profileId))
  add(query_579522, "sortField", newJString(sortField))
  add(query_579522, "alt", newJString(alt))
  add(query_579522, "userIp", newJString(userIp))
  add(query_579522, "quotaUser", newJString(quotaUser))
  add(query_579522, "pageToken", newJString(pageToken))
  add(query_579522, "searchString", newJString(searchString))
  add(query_579522, "sortOrder", newJString(sortOrder))
  add(query_579522, "subaccountId", newJString(subaccountId))
  add(query_579522, "onlyParent", newJBool(onlyParent))
  add(query_579522, "status", newJString(status))
  if ids != nil:
    query_579522.add "ids", ids
  add(query_579522, "includeAdvertisersWithoutGroupsOnly",
      newJBool(includeAdvertisersWithoutGroupsOnly))
  add(query_579522, "fields", newJString(fields))
  add(query_579522, "maxResults", newJInt(maxResults))
  if advertiserGroupIds != nil:
    query_579522.add "advertiserGroupIds", advertiserGroupIds
  result = call_579520.call(path_579521, query_579522, nil, nil, nil)

var dfareportingAdvertisersList* = Call_DfareportingAdvertisersList_579496(
    name: "dfareportingAdvertisersList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/advertisers",
    validator: validate_DfareportingAdvertisersList_579497,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertisersList_579498,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersPatch_579557 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertisersPatch_579559(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersPatch_579558(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing advertiser. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579560 = path.getOrDefault("profileId")
  valid_579560 = validateParameter(valid_579560, JString, required = true,
                                 default = nil)
  if valid_579560 != nil:
    section.add "profileId", valid_579560
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Advertiser ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579561 = query.getOrDefault("key")
  valid_579561 = validateParameter(valid_579561, JString, required = false,
                                 default = nil)
  if valid_579561 != nil:
    section.add "key", valid_579561
  var valid_579562 = query.getOrDefault("prettyPrint")
  valid_579562 = validateParameter(valid_579562, JBool, required = false,
                                 default = newJBool(true))
  if valid_579562 != nil:
    section.add "prettyPrint", valid_579562
  var valid_579563 = query.getOrDefault("oauth_token")
  valid_579563 = validateParameter(valid_579563, JString, required = false,
                                 default = nil)
  if valid_579563 != nil:
    section.add "oauth_token", valid_579563
  var valid_579564 = query.getOrDefault("alt")
  valid_579564 = validateParameter(valid_579564, JString, required = false,
                                 default = newJString("json"))
  if valid_579564 != nil:
    section.add "alt", valid_579564
  var valid_579565 = query.getOrDefault("userIp")
  valid_579565 = validateParameter(valid_579565, JString, required = false,
                                 default = nil)
  if valid_579565 != nil:
    section.add "userIp", valid_579565
  var valid_579566 = query.getOrDefault("quotaUser")
  valid_579566 = validateParameter(valid_579566, JString, required = false,
                                 default = nil)
  if valid_579566 != nil:
    section.add "quotaUser", valid_579566
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_579567 = query.getOrDefault("id")
  valid_579567 = validateParameter(valid_579567, JString, required = true,
                                 default = nil)
  if valid_579567 != nil:
    section.add "id", valid_579567
  var valid_579568 = query.getOrDefault("fields")
  valid_579568 = validateParameter(valid_579568, JString, required = false,
                                 default = nil)
  if valid_579568 != nil:
    section.add "fields", valid_579568
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579570: Call_DfareportingAdvertisersPatch_579557; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing advertiser. This method supports patch semantics.
  ## 
  let valid = call_579570.validator(path, query, header, formData, body)
  let scheme = call_579570.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579570.url(scheme.get, call_579570.host, call_579570.base,
                         call_579570.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579570, url, valid)

proc call*(call_579571: Call_DfareportingAdvertisersPatch_579557;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingAdvertisersPatch
  ## Updates an existing advertiser. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Advertiser ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579572 = newJObject()
  var query_579573 = newJObject()
  var body_579574 = newJObject()
  add(query_579573, "key", newJString(key))
  add(query_579573, "prettyPrint", newJBool(prettyPrint))
  add(query_579573, "oauth_token", newJString(oauthToken))
  add(path_579572, "profileId", newJString(profileId))
  add(query_579573, "alt", newJString(alt))
  add(query_579573, "userIp", newJString(userIp))
  add(query_579573, "quotaUser", newJString(quotaUser))
  add(query_579573, "id", newJString(id))
  if body != nil:
    body_579574 = body
  add(query_579573, "fields", newJString(fields))
  result = call_579571.call(path_579572, query_579573, nil, nil, body_579574)

var dfareportingAdvertisersPatch* = Call_DfareportingAdvertisersPatch_579557(
    name: "dfareportingAdvertisersPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/advertisers",
    validator: validate_DfareportingAdvertisersPatch_579558,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertisersPatch_579559,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersGet_579575 = ref object of OpenApiRestCall_578364
proc url_DfareportingAdvertisersGet_579577(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersGet_579576(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one advertiser by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Advertiser ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579578 = path.getOrDefault("profileId")
  valid_579578 = validateParameter(valid_579578, JString, required = true,
                                 default = nil)
  if valid_579578 != nil:
    section.add "profileId", valid_579578
  var valid_579579 = path.getOrDefault("id")
  valid_579579 = validateParameter(valid_579579, JString, required = true,
                                 default = nil)
  if valid_579579 != nil:
    section.add "id", valid_579579
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579580 = query.getOrDefault("key")
  valid_579580 = validateParameter(valid_579580, JString, required = false,
                                 default = nil)
  if valid_579580 != nil:
    section.add "key", valid_579580
  var valid_579581 = query.getOrDefault("prettyPrint")
  valid_579581 = validateParameter(valid_579581, JBool, required = false,
                                 default = newJBool(true))
  if valid_579581 != nil:
    section.add "prettyPrint", valid_579581
  var valid_579582 = query.getOrDefault("oauth_token")
  valid_579582 = validateParameter(valid_579582, JString, required = false,
                                 default = nil)
  if valid_579582 != nil:
    section.add "oauth_token", valid_579582
  var valid_579583 = query.getOrDefault("alt")
  valid_579583 = validateParameter(valid_579583, JString, required = false,
                                 default = newJString("json"))
  if valid_579583 != nil:
    section.add "alt", valid_579583
  var valid_579584 = query.getOrDefault("userIp")
  valid_579584 = validateParameter(valid_579584, JString, required = false,
                                 default = nil)
  if valid_579584 != nil:
    section.add "userIp", valid_579584
  var valid_579585 = query.getOrDefault("quotaUser")
  valid_579585 = validateParameter(valid_579585, JString, required = false,
                                 default = nil)
  if valid_579585 != nil:
    section.add "quotaUser", valid_579585
  var valid_579586 = query.getOrDefault("fields")
  valid_579586 = validateParameter(valid_579586, JString, required = false,
                                 default = nil)
  if valid_579586 != nil:
    section.add "fields", valid_579586
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579587: Call_DfareportingAdvertisersGet_579575; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one advertiser by ID.
  ## 
  let valid = call_579587.validator(path, query, header, formData, body)
  let scheme = call_579587.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579587.url(scheme.get, call_579587.host, call_579587.base,
                         call_579587.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579587, url, valid)

proc call*(call_579588: Call_DfareportingAdvertisersGet_579575; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingAdvertisersGet
  ## Gets one advertiser by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Advertiser ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579589 = newJObject()
  var query_579590 = newJObject()
  add(query_579590, "key", newJString(key))
  add(query_579590, "prettyPrint", newJBool(prettyPrint))
  add(query_579590, "oauth_token", newJString(oauthToken))
  add(path_579589, "profileId", newJString(profileId))
  add(path_579589, "id", newJString(id))
  add(query_579590, "alt", newJString(alt))
  add(query_579590, "userIp", newJString(userIp))
  add(query_579590, "quotaUser", newJString(quotaUser))
  add(query_579590, "fields", newJString(fields))
  result = call_579588.call(path_579589, query_579590, nil, nil, nil)

var dfareportingAdvertisersGet* = Call_DfareportingAdvertisersGet_579575(
    name: "dfareportingAdvertisersGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertisers/{id}",
    validator: validate_DfareportingAdvertisersGet_579576,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertisersGet_579577,
    schemes: {Scheme.Https})
type
  Call_DfareportingBrowsersList_579591 = ref object of OpenApiRestCall_578364
proc url_DfareportingBrowsersList_579593(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/browsers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingBrowsersList_579592(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of browsers.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579594 = path.getOrDefault("profileId")
  valid_579594 = validateParameter(valid_579594, JString, required = true,
                                 default = nil)
  if valid_579594 != nil:
    section.add "profileId", valid_579594
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579595 = query.getOrDefault("key")
  valid_579595 = validateParameter(valid_579595, JString, required = false,
                                 default = nil)
  if valid_579595 != nil:
    section.add "key", valid_579595
  var valid_579596 = query.getOrDefault("prettyPrint")
  valid_579596 = validateParameter(valid_579596, JBool, required = false,
                                 default = newJBool(true))
  if valid_579596 != nil:
    section.add "prettyPrint", valid_579596
  var valid_579597 = query.getOrDefault("oauth_token")
  valid_579597 = validateParameter(valid_579597, JString, required = false,
                                 default = nil)
  if valid_579597 != nil:
    section.add "oauth_token", valid_579597
  var valid_579598 = query.getOrDefault("alt")
  valid_579598 = validateParameter(valid_579598, JString, required = false,
                                 default = newJString("json"))
  if valid_579598 != nil:
    section.add "alt", valid_579598
  var valid_579599 = query.getOrDefault("userIp")
  valid_579599 = validateParameter(valid_579599, JString, required = false,
                                 default = nil)
  if valid_579599 != nil:
    section.add "userIp", valid_579599
  var valid_579600 = query.getOrDefault("quotaUser")
  valid_579600 = validateParameter(valid_579600, JString, required = false,
                                 default = nil)
  if valid_579600 != nil:
    section.add "quotaUser", valid_579600
  var valid_579601 = query.getOrDefault("fields")
  valid_579601 = validateParameter(valid_579601, JString, required = false,
                                 default = nil)
  if valid_579601 != nil:
    section.add "fields", valid_579601
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579602: Call_DfareportingBrowsersList_579591; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of browsers.
  ## 
  let valid = call_579602.validator(path, query, header, formData, body)
  let scheme = call_579602.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579602.url(scheme.get, call_579602.host, call_579602.base,
                         call_579602.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579602, url, valid)

proc call*(call_579603: Call_DfareportingBrowsersList_579591; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingBrowsersList
  ## Retrieves a list of browsers.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579604 = newJObject()
  var query_579605 = newJObject()
  add(query_579605, "key", newJString(key))
  add(query_579605, "prettyPrint", newJBool(prettyPrint))
  add(query_579605, "oauth_token", newJString(oauthToken))
  add(path_579604, "profileId", newJString(profileId))
  add(query_579605, "alt", newJString(alt))
  add(query_579605, "userIp", newJString(userIp))
  add(query_579605, "quotaUser", newJString(quotaUser))
  add(query_579605, "fields", newJString(fields))
  result = call_579603.call(path_579604, query_579605, nil, nil, nil)

var dfareportingBrowsersList* = Call_DfareportingBrowsersList_579591(
    name: "dfareportingBrowsersList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/browsers",
    validator: validate_DfareportingBrowsersList_579592,
    base: "/dfareporting/v3.2", url: url_DfareportingBrowsersList_579593,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsUpdate_579634 = ref object of OpenApiRestCall_578364
proc url_DfareportingCampaignsUpdate_579636(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsUpdate_579635(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing campaign.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579637 = path.getOrDefault("profileId")
  valid_579637 = validateParameter(valid_579637, JString, required = true,
                                 default = nil)
  if valid_579637 != nil:
    section.add "profileId", valid_579637
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579638 = query.getOrDefault("key")
  valid_579638 = validateParameter(valid_579638, JString, required = false,
                                 default = nil)
  if valid_579638 != nil:
    section.add "key", valid_579638
  var valid_579639 = query.getOrDefault("prettyPrint")
  valid_579639 = validateParameter(valid_579639, JBool, required = false,
                                 default = newJBool(true))
  if valid_579639 != nil:
    section.add "prettyPrint", valid_579639
  var valid_579640 = query.getOrDefault("oauth_token")
  valid_579640 = validateParameter(valid_579640, JString, required = false,
                                 default = nil)
  if valid_579640 != nil:
    section.add "oauth_token", valid_579640
  var valid_579641 = query.getOrDefault("alt")
  valid_579641 = validateParameter(valid_579641, JString, required = false,
                                 default = newJString("json"))
  if valid_579641 != nil:
    section.add "alt", valid_579641
  var valid_579642 = query.getOrDefault("userIp")
  valid_579642 = validateParameter(valid_579642, JString, required = false,
                                 default = nil)
  if valid_579642 != nil:
    section.add "userIp", valid_579642
  var valid_579643 = query.getOrDefault("quotaUser")
  valid_579643 = validateParameter(valid_579643, JString, required = false,
                                 default = nil)
  if valid_579643 != nil:
    section.add "quotaUser", valid_579643
  var valid_579644 = query.getOrDefault("fields")
  valid_579644 = validateParameter(valid_579644, JString, required = false,
                                 default = nil)
  if valid_579644 != nil:
    section.add "fields", valid_579644
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579646: Call_DfareportingCampaignsUpdate_579634; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing campaign.
  ## 
  let valid = call_579646.validator(path, query, header, formData, body)
  let scheme = call_579646.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579646.url(scheme.get, call_579646.host, call_579646.base,
                         call_579646.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579646, url, valid)

proc call*(call_579647: Call_DfareportingCampaignsUpdate_579634; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCampaignsUpdate
  ## Updates an existing campaign.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579648 = newJObject()
  var query_579649 = newJObject()
  var body_579650 = newJObject()
  add(query_579649, "key", newJString(key))
  add(query_579649, "prettyPrint", newJBool(prettyPrint))
  add(query_579649, "oauth_token", newJString(oauthToken))
  add(path_579648, "profileId", newJString(profileId))
  add(query_579649, "alt", newJString(alt))
  add(query_579649, "userIp", newJString(userIp))
  add(query_579649, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579650 = body
  add(query_579649, "fields", newJString(fields))
  result = call_579647.call(path_579648, query_579649, nil, nil, body_579650)

var dfareportingCampaignsUpdate* = Call_DfareportingCampaignsUpdate_579634(
    name: "dfareportingCampaignsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns",
    validator: validate_DfareportingCampaignsUpdate_579635,
    base: "/dfareporting/v3.2", url: url_DfareportingCampaignsUpdate_579636,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsInsert_579651 = ref object of OpenApiRestCall_578364
proc url_DfareportingCampaignsInsert_579653(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsInsert_579652(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new campaign.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579654 = path.getOrDefault("profileId")
  valid_579654 = validateParameter(valid_579654, JString, required = true,
                                 default = nil)
  if valid_579654 != nil:
    section.add "profileId", valid_579654
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579655 = query.getOrDefault("key")
  valid_579655 = validateParameter(valid_579655, JString, required = false,
                                 default = nil)
  if valid_579655 != nil:
    section.add "key", valid_579655
  var valid_579656 = query.getOrDefault("prettyPrint")
  valid_579656 = validateParameter(valid_579656, JBool, required = false,
                                 default = newJBool(true))
  if valid_579656 != nil:
    section.add "prettyPrint", valid_579656
  var valid_579657 = query.getOrDefault("oauth_token")
  valid_579657 = validateParameter(valid_579657, JString, required = false,
                                 default = nil)
  if valid_579657 != nil:
    section.add "oauth_token", valid_579657
  var valid_579658 = query.getOrDefault("alt")
  valid_579658 = validateParameter(valid_579658, JString, required = false,
                                 default = newJString("json"))
  if valid_579658 != nil:
    section.add "alt", valid_579658
  var valid_579659 = query.getOrDefault("userIp")
  valid_579659 = validateParameter(valid_579659, JString, required = false,
                                 default = nil)
  if valid_579659 != nil:
    section.add "userIp", valid_579659
  var valid_579660 = query.getOrDefault("quotaUser")
  valid_579660 = validateParameter(valid_579660, JString, required = false,
                                 default = nil)
  if valid_579660 != nil:
    section.add "quotaUser", valid_579660
  var valid_579661 = query.getOrDefault("fields")
  valid_579661 = validateParameter(valid_579661, JString, required = false,
                                 default = nil)
  if valid_579661 != nil:
    section.add "fields", valid_579661
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579663: Call_DfareportingCampaignsInsert_579651; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new campaign.
  ## 
  let valid = call_579663.validator(path, query, header, formData, body)
  let scheme = call_579663.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579663.url(scheme.get, call_579663.host, call_579663.base,
                         call_579663.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579663, url, valid)

proc call*(call_579664: Call_DfareportingCampaignsInsert_579651; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCampaignsInsert
  ## Inserts a new campaign.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579665 = newJObject()
  var query_579666 = newJObject()
  var body_579667 = newJObject()
  add(query_579666, "key", newJString(key))
  add(query_579666, "prettyPrint", newJBool(prettyPrint))
  add(query_579666, "oauth_token", newJString(oauthToken))
  add(path_579665, "profileId", newJString(profileId))
  add(query_579666, "alt", newJString(alt))
  add(query_579666, "userIp", newJString(userIp))
  add(query_579666, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579667 = body
  add(query_579666, "fields", newJString(fields))
  result = call_579664.call(path_579665, query_579666, nil, nil, body_579667)

var dfareportingCampaignsInsert* = Call_DfareportingCampaignsInsert_579651(
    name: "dfareportingCampaignsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns",
    validator: validate_DfareportingCampaignsInsert_579652,
    base: "/dfareporting/v3.2", url: url_DfareportingCampaignsInsert_579653,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsList_579606 = ref object of OpenApiRestCall_578364
proc url_DfareportingCampaignsList_579608(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsList_579607(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of campaigns, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579609 = path.getOrDefault("profileId")
  valid_579609 = validateParameter(valid_579609, JString, required = true,
                                 default = nil)
  if valid_579609 != nil:
    section.add "profileId", valid_579609
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   advertiserIds: JArray
  ##                : Select only campaigns that belong to these advertisers.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived campaigns. Don't set this field to select both archived and non-archived campaigns.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   overriddenEventTagId: JString
  ##                       : Select only campaigns that have overridden this event tag ID.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for campaigns by name or ID. Wildcards (*) are allowed. For example, "campaign*2015" will return campaigns with names like "campaign June 2015", "campaign April 2015", or simply "campaign 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "campaign" will match campaigns with name "my campaign", "campaign 2015", or simply "campaign".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   subaccountId: JString
  ##               : Select only campaigns that belong to this subaccount.
  ##   atLeastOneOptimizationActivity: JBool
  ##                                 : Select only campaigns that have at least one optimization activity.
  ##   ids: JArray
  ##      : Select only campaigns with these IDs.
  ##   excludedIds: JArray
  ##              : Exclude campaigns with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   advertiserGroupIds: JArray
  ##                     : Select only campaigns whose advertisers belong to these advertiser groups.
  section = newJObject()
  var valid_579610 = query.getOrDefault("key")
  valid_579610 = validateParameter(valid_579610, JString, required = false,
                                 default = nil)
  if valid_579610 != nil:
    section.add "key", valid_579610
  var valid_579611 = query.getOrDefault("prettyPrint")
  valid_579611 = validateParameter(valid_579611, JBool, required = false,
                                 default = newJBool(true))
  if valid_579611 != nil:
    section.add "prettyPrint", valid_579611
  var valid_579612 = query.getOrDefault("oauth_token")
  valid_579612 = validateParameter(valid_579612, JString, required = false,
                                 default = nil)
  if valid_579612 != nil:
    section.add "oauth_token", valid_579612
  var valid_579613 = query.getOrDefault("sortField")
  valid_579613 = validateParameter(valid_579613, JString, required = false,
                                 default = newJString("ID"))
  if valid_579613 != nil:
    section.add "sortField", valid_579613
  var valid_579614 = query.getOrDefault("advertiserIds")
  valid_579614 = validateParameter(valid_579614, JArray, required = false,
                                 default = nil)
  if valid_579614 != nil:
    section.add "advertiserIds", valid_579614
  var valid_579615 = query.getOrDefault("alt")
  valid_579615 = validateParameter(valid_579615, JString, required = false,
                                 default = newJString("json"))
  if valid_579615 != nil:
    section.add "alt", valid_579615
  var valid_579616 = query.getOrDefault("userIp")
  valid_579616 = validateParameter(valid_579616, JString, required = false,
                                 default = nil)
  if valid_579616 != nil:
    section.add "userIp", valid_579616
  var valid_579617 = query.getOrDefault("archived")
  valid_579617 = validateParameter(valid_579617, JBool, required = false, default = nil)
  if valid_579617 != nil:
    section.add "archived", valid_579617
  var valid_579618 = query.getOrDefault("quotaUser")
  valid_579618 = validateParameter(valid_579618, JString, required = false,
                                 default = nil)
  if valid_579618 != nil:
    section.add "quotaUser", valid_579618
  var valid_579619 = query.getOrDefault("overriddenEventTagId")
  valid_579619 = validateParameter(valid_579619, JString, required = false,
                                 default = nil)
  if valid_579619 != nil:
    section.add "overriddenEventTagId", valid_579619
  var valid_579620 = query.getOrDefault("pageToken")
  valid_579620 = validateParameter(valid_579620, JString, required = false,
                                 default = nil)
  if valid_579620 != nil:
    section.add "pageToken", valid_579620
  var valid_579621 = query.getOrDefault("searchString")
  valid_579621 = validateParameter(valid_579621, JString, required = false,
                                 default = nil)
  if valid_579621 != nil:
    section.add "searchString", valid_579621
  var valid_579622 = query.getOrDefault("sortOrder")
  valid_579622 = validateParameter(valid_579622, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_579622 != nil:
    section.add "sortOrder", valid_579622
  var valid_579623 = query.getOrDefault("subaccountId")
  valid_579623 = validateParameter(valid_579623, JString, required = false,
                                 default = nil)
  if valid_579623 != nil:
    section.add "subaccountId", valid_579623
  var valid_579624 = query.getOrDefault("atLeastOneOptimizationActivity")
  valid_579624 = validateParameter(valid_579624, JBool, required = false, default = nil)
  if valid_579624 != nil:
    section.add "atLeastOneOptimizationActivity", valid_579624
  var valid_579625 = query.getOrDefault("ids")
  valid_579625 = validateParameter(valid_579625, JArray, required = false,
                                 default = nil)
  if valid_579625 != nil:
    section.add "ids", valid_579625
  var valid_579626 = query.getOrDefault("excludedIds")
  valid_579626 = validateParameter(valid_579626, JArray, required = false,
                                 default = nil)
  if valid_579626 != nil:
    section.add "excludedIds", valid_579626
  var valid_579627 = query.getOrDefault("fields")
  valid_579627 = validateParameter(valid_579627, JString, required = false,
                                 default = nil)
  if valid_579627 != nil:
    section.add "fields", valid_579627
  var valid_579628 = query.getOrDefault("maxResults")
  valid_579628 = validateParameter(valid_579628, JInt, required = false,
                                 default = newJInt(1000))
  if valid_579628 != nil:
    section.add "maxResults", valid_579628
  var valid_579629 = query.getOrDefault("advertiserGroupIds")
  valid_579629 = validateParameter(valid_579629, JArray, required = false,
                                 default = nil)
  if valid_579629 != nil:
    section.add "advertiserGroupIds", valid_579629
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579630: Call_DfareportingCampaignsList_579606; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of campaigns, possibly filtered. This method supports paging.
  ## 
  let valid = call_579630.validator(path, query, header, formData, body)
  let scheme = call_579630.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579630.url(scheme.get, call_579630.host, call_579630.base,
                         call_579630.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579630, url, valid)

proc call*(call_579631: Call_DfareportingCampaignsList_579606; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          sortField: string = "ID"; advertiserIds: JsonNode = nil; alt: string = "json";
          userIp: string = ""; archived: bool = false; quotaUser: string = "";
          overriddenEventTagId: string = ""; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          subaccountId: string = ""; atLeastOneOptimizationActivity: bool = false;
          ids: JsonNode = nil; excludedIds: JsonNode = nil; fields: string = "";
          maxResults: int = 1000; advertiserGroupIds: JsonNode = nil): Recallable =
  ## dfareportingCampaignsList
  ## Retrieves a list of campaigns, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   advertiserIds: JArray
  ##                : Select only campaigns that belong to these advertisers.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived campaigns. Don't set this field to select both archived and non-archived campaigns.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   overriddenEventTagId: string
  ##                       : Select only campaigns that have overridden this event tag ID.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for campaigns by name or ID. Wildcards (*) are allowed. For example, "campaign*2015" will return campaigns with names like "campaign June 2015", "campaign April 2015", or simply "campaign 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "campaign" will match campaigns with name "my campaign", "campaign 2015", or simply "campaign".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   subaccountId: string
  ##               : Select only campaigns that belong to this subaccount.
  ##   atLeastOneOptimizationActivity: bool
  ##                                 : Select only campaigns that have at least one optimization activity.
  ##   ids: JArray
  ##      : Select only campaigns with these IDs.
  ##   excludedIds: JArray
  ##              : Exclude campaigns with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   advertiserGroupIds: JArray
  ##                     : Select only campaigns whose advertisers belong to these advertiser groups.
  var path_579632 = newJObject()
  var query_579633 = newJObject()
  add(query_579633, "key", newJString(key))
  add(query_579633, "prettyPrint", newJBool(prettyPrint))
  add(query_579633, "oauth_token", newJString(oauthToken))
  add(path_579632, "profileId", newJString(profileId))
  add(query_579633, "sortField", newJString(sortField))
  if advertiserIds != nil:
    query_579633.add "advertiserIds", advertiserIds
  add(query_579633, "alt", newJString(alt))
  add(query_579633, "userIp", newJString(userIp))
  add(query_579633, "archived", newJBool(archived))
  add(query_579633, "quotaUser", newJString(quotaUser))
  add(query_579633, "overriddenEventTagId", newJString(overriddenEventTagId))
  add(query_579633, "pageToken", newJString(pageToken))
  add(query_579633, "searchString", newJString(searchString))
  add(query_579633, "sortOrder", newJString(sortOrder))
  add(query_579633, "subaccountId", newJString(subaccountId))
  add(query_579633, "atLeastOneOptimizationActivity",
      newJBool(atLeastOneOptimizationActivity))
  if ids != nil:
    query_579633.add "ids", ids
  if excludedIds != nil:
    query_579633.add "excludedIds", excludedIds
  add(query_579633, "fields", newJString(fields))
  add(query_579633, "maxResults", newJInt(maxResults))
  if advertiserGroupIds != nil:
    query_579633.add "advertiserGroupIds", advertiserGroupIds
  result = call_579631.call(path_579632, query_579633, nil, nil, nil)

var dfareportingCampaignsList* = Call_DfareportingCampaignsList_579606(
    name: "dfareportingCampaignsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns",
    validator: validate_DfareportingCampaignsList_579607,
    base: "/dfareporting/v3.2", url: url_DfareportingCampaignsList_579608,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsPatch_579668 = ref object of OpenApiRestCall_578364
proc url_DfareportingCampaignsPatch_579670(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsPatch_579669(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing campaign. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579671 = path.getOrDefault("profileId")
  valid_579671 = validateParameter(valid_579671, JString, required = true,
                                 default = nil)
  if valid_579671 != nil:
    section.add "profileId", valid_579671
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Campaign ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579672 = query.getOrDefault("key")
  valid_579672 = validateParameter(valid_579672, JString, required = false,
                                 default = nil)
  if valid_579672 != nil:
    section.add "key", valid_579672
  var valid_579673 = query.getOrDefault("prettyPrint")
  valid_579673 = validateParameter(valid_579673, JBool, required = false,
                                 default = newJBool(true))
  if valid_579673 != nil:
    section.add "prettyPrint", valid_579673
  var valid_579674 = query.getOrDefault("oauth_token")
  valid_579674 = validateParameter(valid_579674, JString, required = false,
                                 default = nil)
  if valid_579674 != nil:
    section.add "oauth_token", valid_579674
  var valid_579675 = query.getOrDefault("alt")
  valid_579675 = validateParameter(valid_579675, JString, required = false,
                                 default = newJString("json"))
  if valid_579675 != nil:
    section.add "alt", valid_579675
  var valid_579676 = query.getOrDefault("userIp")
  valid_579676 = validateParameter(valid_579676, JString, required = false,
                                 default = nil)
  if valid_579676 != nil:
    section.add "userIp", valid_579676
  var valid_579677 = query.getOrDefault("quotaUser")
  valid_579677 = validateParameter(valid_579677, JString, required = false,
                                 default = nil)
  if valid_579677 != nil:
    section.add "quotaUser", valid_579677
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_579678 = query.getOrDefault("id")
  valid_579678 = validateParameter(valid_579678, JString, required = true,
                                 default = nil)
  if valid_579678 != nil:
    section.add "id", valid_579678
  var valid_579679 = query.getOrDefault("fields")
  valid_579679 = validateParameter(valid_579679, JString, required = false,
                                 default = nil)
  if valid_579679 != nil:
    section.add "fields", valid_579679
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579681: Call_DfareportingCampaignsPatch_579668; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing campaign. This method supports patch semantics.
  ## 
  let valid = call_579681.validator(path, query, header, formData, body)
  let scheme = call_579681.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579681.url(scheme.get, call_579681.host, call_579681.base,
                         call_579681.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579681, url, valid)

proc call*(call_579682: Call_DfareportingCampaignsPatch_579668; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCampaignsPatch
  ## Updates an existing campaign. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Campaign ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579683 = newJObject()
  var query_579684 = newJObject()
  var body_579685 = newJObject()
  add(query_579684, "key", newJString(key))
  add(query_579684, "prettyPrint", newJBool(prettyPrint))
  add(query_579684, "oauth_token", newJString(oauthToken))
  add(path_579683, "profileId", newJString(profileId))
  add(query_579684, "alt", newJString(alt))
  add(query_579684, "userIp", newJString(userIp))
  add(query_579684, "quotaUser", newJString(quotaUser))
  add(query_579684, "id", newJString(id))
  if body != nil:
    body_579685 = body
  add(query_579684, "fields", newJString(fields))
  result = call_579682.call(path_579683, query_579684, nil, nil, body_579685)

var dfareportingCampaignsPatch* = Call_DfareportingCampaignsPatch_579668(
    name: "dfareportingCampaignsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns",
    validator: validate_DfareportingCampaignsPatch_579669,
    base: "/dfareporting/v3.2", url: url_DfareportingCampaignsPatch_579670,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignCreativeAssociationsInsert_579705 = ref object of OpenApiRestCall_578364
proc url_DfareportingCampaignCreativeAssociationsInsert_579707(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "campaignId" in path, "`campaignId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns/"),
               (kind: VariableSegment, value: "campaignId"),
               (kind: ConstantSegment, value: "/campaignCreativeAssociations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignCreativeAssociationsInsert_579706(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   campaignId: JString (required)
  ##             : Campaign ID in this association.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579708 = path.getOrDefault("profileId")
  valid_579708 = validateParameter(valid_579708, JString, required = true,
                                 default = nil)
  if valid_579708 != nil:
    section.add "profileId", valid_579708
  var valid_579709 = path.getOrDefault("campaignId")
  valid_579709 = validateParameter(valid_579709, JString, required = true,
                                 default = nil)
  if valid_579709 != nil:
    section.add "campaignId", valid_579709
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579710 = query.getOrDefault("key")
  valid_579710 = validateParameter(valid_579710, JString, required = false,
                                 default = nil)
  if valid_579710 != nil:
    section.add "key", valid_579710
  var valid_579711 = query.getOrDefault("prettyPrint")
  valid_579711 = validateParameter(valid_579711, JBool, required = false,
                                 default = newJBool(true))
  if valid_579711 != nil:
    section.add "prettyPrint", valid_579711
  var valid_579712 = query.getOrDefault("oauth_token")
  valid_579712 = validateParameter(valid_579712, JString, required = false,
                                 default = nil)
  if valid_579712 != nil:
    section.add "oauth_token", valid_579712
  var valid_579713 = query.getOrDefault("alt")
  valid_579713 = validateParameter(valid_579713, JString, required = false,
                                 default = newJString("json"))
  if valid_579713 != nil:
    section.add "alt", valid_579713
  var valid_579714 = query.getOrDefault("userIp")
  valid_579714 = validateParameter(valid_579714, JString, required = false,
                                 default = nil)
  if valid_579714 != nil:
    section.add "userIp", valid_579714
  var valid_579715 = query.getOrDefault("quotaUser")
  valid_579715 = validateParameter(valid_579715, JString, required = false,
                                 default = nil)
  if valid_579715 != nil:
    section.add "quotaUser", valid_579715
  var valid_579716 = query.getOrDefault("fields")
  valid_579716 = validateParameter(valid_579716, JString, required = false,
                                 default = nil)
  if valid_579716 != nil:
    section.add "fields", valid_579716
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579718: Call_DfareportingCampaignCreativeAssociationsInsert_579705;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already.
  ## 
  let valid = call_579718.validator(path, query, header, formData, body)
  let scheme = call_579718.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579718.url(scheme.get, call_579718.host, call_579718.base,
                         call_579718.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579718, url, valid)

proc call*(call_579719: Call_DfareportingCampaignCreativeAssociationsInsert_579705;
          profileId: string; campaignId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; body: JsonNode = nil;
          fields: string = ""): Recallable =
  ## dfareportingCampaignCreativeAssociationsInsert
  ## Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   campaignId: string (required)
  ##             : Campaign ID in this association.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579720 = newJObject()
  var query_579721 = newJObject()
  var body_579722 = newJObject()
  add(query_579721, "key", newJString(key))
  add(query_579721, "prettyPrint", newJBool(prettyPrint))
  add(query_579721, "oauth_token", newJString(oauthToken))
  add(path_579720, "profileId", newJString(profileId))
  add(query_579721, "alt", newJString(alt))
  add(query_579721, "userIp", newJString(userIp))
  add(query_579721, "quotaUser", newJString(quotaUser))
  add(path_579720, "campaignId", newJString(campaignId))
  if body != nil:
    body_579722 = body
  add(query_579721, "fields", newJString(fields))
  result = call_579719.call(path_579720, query_579721, nil, nil, body_579722)

var dfareportingCampaignCreativeAssociationsInsert* = Call_DfareportingCampaignCreativeAssociationsInsert_579705(
    name: "dfareportingCampaignCreativeAssociationsInsert",
    meth: HttpMethod.HttpPost, host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations",
    validator: validate_DfareportingCampaignCreativeAssociationsInsert_579706,
    base: "/dfareporting/v3.2",
    url: url_DfareportingCampaignCreativeAssociationsInsert_579707,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignCreativeAssociationsList_579686 = ref object of OpenApiRestCall_578364
proc url_DfareportingCampaignCreativeAssociationsList_579688(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "campaignId" in path, "`campaignId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns/"),
               (kind: VariableSegment, value: "campaignId"),
               (kind: ConstantSegment, value: "/campaignCreativeAssociations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignCreativeAssociationsList_579687(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the list of creative IDs associated with the specified campaign. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   campaignId: JString (required)
  ##             : Campaign ID in this association.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579689 = path.getOrDefault("profileId")
  valid_579689 = validateParameter(valid_579689, JString, required = true,
                                 default = nil)
  if valid_579689 != nil:
    section.add "profileId", valid_579689
  var valid_579690 = path.getOrDefault("campaignId")
  valid_579690 = validateParameter(valid_579690, JString, required = true,
                                 default = nil)
  if valid_579690 != nil:
    section.add "campaignId", valid_579690
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_579691 = query.getOrDefault("key")
  valid_579691 = validateParameter(valid_579691, JString, required = false,
                                 default = nil)
  if valid_579691 != nil:
    section.add "key", valid_579691
  var valid_579692 = query.getOrDefault("prettyPrint")
  valid_579692 = validateParameter(valid_579692, JBool, required = false,
                                 default = newJBool(true))
  if valid_579692 != nil:
    section.add "prettyPrint", valid_579692
  var valid_579693 = query.getOrDefault("oauth_token")
  valid_579693 = validateParameter(valid_579693, JString, required = false,
                                 default = nil)
  if valid_579693 != nil:
    section.add "oauth_token", valid_579693
  var valid_579694 = query.getOrDefault("alt")
  valid_579694 = validateParameter(valid_579694, JString, required = false,
                                 default = newJString("json"))
  if valid_579694 != nil:
    section.add "alt", valid_579694
  var valid_579695 = query.getOrDefault("userIp")
  valid_579695 = validateParameter(valid_579695, JString, required = false,
                                 default = nil)
  if valid_579695 != nil:
    section.add "userIp", valid_579695
  var valid_579696 = query.getOrDefault("quotaUser")
  valid_579696 = validateParameter(valid_579696, JString, required = false,
                                 default = nil)
  if valid_579696 != nil:
    section.add "quotaUser", valid_579696
  var valid_579697 = query.getOrDefault("pageToken")
  valid_579697 = validateParameter(valid_579697, JString, required = false,
                                 default = nil)
  if valid_579697 != nil:
    section.add "pageToken", valid_579697
  var valid_579698 = query.getOrDefault("sortOrder")
  valid_579698 = validateParameter(valid_579698, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_579698 != nil:
    section.add "sortOrder", valid_579698
  var valid_579699 = query.getOrDefault("fields")
  valid_579699 = validateParameter(valid_579699, JString, required = false,
                                 default = nil)
  if valid_579699 != nil:
    section.add "fields", valid_579699
  var valid_579700 = query.getOrDefault("maxResults")
  valid_579700 = validateParameter(valid_579700, JInt, required = false,
                                 default = newJInt(1000))
  if valid_579700 != nil:
    section.add "maxResults", valid_579700
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579701: Call_DfareportingCampaignCreativeAssociationsList_579686;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the list of creative IDs associated with the specified campaign. This method supports paging.
  ## 
  let valid = call_579701.validator(path, query, header, formData, body)
  let scheme = call_579701.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579701.url(scheme.get, call_579701.host, call_579701.base,
                         call_579701.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579701, url, valid)

proc call*(call_579702: Call_DfareportingCampaignCreativeAssociationsList_579686;
          profileId: string; campaignId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; pageToken: string = "";
          sortOrder: string = "ASCENDING"; fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingCampaignCreativeAssociationsList
  ## Retrieves the list of creative IDs associated with the specified campaign. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   campaignId: string (required)
  ##             : Campaign ID in this association.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_579703 = newJObject()
  var query_579704 = newJObject()
  add(query_579704, "key", newJString(key))
  add(query_579704, "prettyPrint", newJBool(prettyPrint))
  add(query_579704, "oauth_token", newJString(oauthToken))
  add(path_579703, "profileId", newJString(profileId))
  add(query_579704, "alt", newJString(alt))
  add(query_579704, "userIp", newJString(userIp))
  add(query_579704, "quotaUser", newJString(quotaUser))
  add(query_579704, "pageToken", newJString(pageToken))
  add(query_579704, "sortOrder", newJString(sortOrder))
  add(path_579703, "campaignId", newJString(campaignId))
  add(query_579704, "fields", newJString(fields))
  add(query_579704, "maxResults", newJInt(maxResults))
  result = call_579702.call(path_579703, query_579704, nil, nil, nil)

var dfareportingCampaignCreativeAssociationsList* = Call_DfareportingCampaignCreativeAssociationsList_579686(
    name: "dfareportingCampaignCreativeAssociationsList",
    meth: HttpMethod.HttpGet, host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations",
    validator: validate_DfareportingCampaignCreativeAssociationsList_579687,
    base: "/dfareporting/v3.2",
    url: url_DfareportingCampaignCreativeAssociationsList_579688,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsGet_579723 = ref object of OpenApiRestCall_578364
proc url_DfareportingCampaignsGet_579725(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsGet_579724(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one campaign by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Campaign ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579726 = path.getOrDefault("profileId")
  valid_579726 = validateParameter(valid_579726, JString, required = true,
                                 default = nil)
  if valid_579726 != nil:
    section.add "profileId", valid_579726
  var valid_579727 = path.getOrDefault("id")
  valid_579727 = validateParameter(valid_579727, JString, required = true,
                                 default = nil)
  if valid_579727 != nil:
    section.add "id", valid_579727
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579728 = query.getOrDefault("key")
  valid_579728 = validateParameter(valid_579728, JString, required = false,
                                 default = nil)
  if valid_579728 != nil:
    section.add "key", valid_579728
  var valid_579729 = query.getOrDefault("prettyPrint")
  valid_579729 = validateParameter(valid_579729, JBool, required = false,
                                 default = newJBool(true))
  if valid_579729 != nil:
    section.add "prettyPrint", valid_579729
  var valid_579730 = query.getOrDefault("oauth_token")
  valid_579730 = validateParameter(valid_579730, JString, required = false,
                                 default = nil)
  if valid_579730 != nil:
    section.add "oauth_token", valid_579730
  var valid_579731 = query.getOrDefault("alt")
  valid_579731 = validateParameter(valid_579731, JString, required = false,
                                 default = newJString("json"))
  if valid_579731 != nil:
    section.add "alt", valid_579731
  var valid_579732 = query.getOrDefault("userIp")
  valid_579732 = validateParameter(valid_579732, JString, required = false,
                                 default = nil)
  if valid_579732 != nil:
    section.add "userIp", valid_579732
  var valid_579733 = query.getOrDefault("quotaUser")
  valid_579733 = validateParameter(valid_579733, JString, required = false,
                                 default = nil)
  if valid_579733 != nil:
    section.add "quotaUser", valid_579733
  var valid_579734 = query.getOrDefault("fields")
  valid_579734 = validateParameter(valid_579734, JString, required = false,
                                 default = nil)
  if valid_579734 != nil:
    section.add "fields", valid_579734
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579735: Call_DfareportingCampaignsGet_579723; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one campaign by ID.
  ## 
  let valid = call_579735.validator(path, query, header, formData, body)
  let scheme = call_579735.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579735.url(scheme.get, call_579735.host, call_579735.base,
                         call_579735.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579735, url, valid)

proc call*(call_579736: Call_DfareportingCampaignsGet_579723; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingCampaignsGet
  ## Gets one campaign by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Campaign ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579737 = newJObject()
  var query_579738 = newJObject()
  add(query_579738, "key", newJString(key))
  add(query_579738, "prettyPrint", newJBool(prettyPrint))
  add(query_579738, "oauth_token", newJString(oauthToken))
  add(path_579737, "profileId", newJString(profileId))
  add(path_579737, "id", newJString(id))
  add(query_579738, "alt", newJString(alt))
  add(query_579738, "userIp", newJString(userIp))
  add(query_579738, "quotaUser", newJString(quotaUser))
  add(query_579738, "fields", newJString(fields))
  result = call_579736.call(path_579737, query_579738, nil, nil, nil)

var dfareportingCampaignsGet* = Call_DfareportingCampaignsGet_579723(
    name: "dfareportingCampaignsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns/{id}",
    validator: validate_DfareportingCampaignsGet_579724,
    base: "/dfareporting/v3.2", url: url_DfareportingCampaignsGet_579725,
    schemes: {Scheme.Https})
type
  Call_DfareportingChangeLogsList_579739 = ref object of OpenApiRestCall_578364
proc url_DfareportingChangeLogsList_579741(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/changeLogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingChangeLogsList_579740(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of change logs. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579742 = path.getOrDefault("profileId")
  valid_579742 = validateParameter(valid_579742, JString, required = true,
                                 default = nil)
  if valid_579742 != nil:
    section.add "profileId", valid_579742
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   objectType: JString
  ##             : Select only change logs with the specified object type.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   action: JString
  ##         : Select only change logs with the specified action.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   objectIds: JArray
  ##            : Select only change logs with these object IDs.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Select only change logs whose object ID, user name, old or new values match the search string.
  ##   userProfileIds: JArray
  ##                 : Select only change logs with these user profile IDs.
  ##   maxChangeTime: JString
  ##                : Select only change logs whose change time is before the specified maxChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
  ##   ids: JArray
  ##      : Select only change logs with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   minChangeTime: JString
  ##                : Select only change logs whose change time is before the specified minChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_579743 = query.getOrDefault("key")
  valid_579743 = validateParameter(valid_579743, JString, required = false,
                                 default = nil)
  if valid_579743 != nil:
    section.add "key", valid_579743
  var valid_579744 = query.getOrDefault("objectType")
  valid_579744 = validateParameter(valid_579744, JString, required = false,
                                 default = newJString("OBJECT_ACCOUNT"))
  if valid_579744 != nil:
    section.add "objectType", valid_579744
  var valid_579745 = query.getOrDefault("prettyPrint")
  valid_579745 = validateParameter(valid_579745, JBool, required = false,
                                 default = newJBool(true))
  if valid_579745 != nil:
    section.add "prettyPrint", valid_579745
  var valid_579746 = query.getOrDefault("oauth_token")
  valid_579746 = validateParameter(valid_579746, JString, required = false,
                                 default = nil)
  if valid_579746 != nil:
    section.add "oauth_token", valid_579746
  var valid_579747 = query.getOrDefault("action")
  valid_579747 = validateParameter(valid_579747, JString, required = false,
                                 default = newJString("ACTION_ADD"))
  if valid_579747 != nil:
    section.add "action", valid_579747
  var valid_579748 = query.getOrDefault("alt")
  valid_579748 = validateParameter(valid_579748, JString, required = false,
                                 default = newJString("json"))
  if valid_579748 != nil:
    section.add "alt", valid_579748
  var valid_579749 = query.getOrDefault("userIp")
  valid_579749 = validateParameter(valid_579749, JString, required = false,
                                 default = nil)
  if valid_579749 != nil:
    section.add "userIp", valid_579749
  var valid_579750 = query.getOrDefault("quotaUser")
  valid_579750 = validateParameter(valid_579750, JString, required = false,
                                 default = nil)
  if valid_579750 != nil:
    section.add "quotaUser", valid_579750
  var valid_579751 = query.getOrDefault("objectIds")
  valid_579751 = validateParameter(valid_579751, JArray, required = false,
                                 default = nil)
  if valid_579751 != nil:
    section.add "objectIds", valid_579751
  var valid_579752 = query.getOrDefault("pageToken")
  valid_579752 = validateParameter(valid_579752, JString, required = false,
                                 default = nil)
  if valid_579752 != nil:
    section.add "pageToken", valid_579752
  var valid_579753 = query.getOrDefault("searchString")
  valid_579753 = validateParameter(valid_579753, JString, required = false,
                                 default = nil)
  if valid_579753 != nil:
    section.add "searchString", valid_579753
  var valid_579754 = query.getOrDefault("userProfileIds")
  valid_579754 = validateParameter(valid_579754, JArray, required = false,
                                 default = nil)
  if valid_579754 != nil:
    section.add "userProfileIds", valid_579754
  var valid_579755 = query.getOrDefault("maxChangeTime")
  valid_579755 = validateParameter(valid_579755, JString, required = false,
                                 default = nil)
  if valid_579755 != nil:
    section.add "maxChangeTime", valid_579755
  var valid_579756 = query.getOrDefault("ids")
  valid_579756 = validateParameter(valid_579756, JArray, required = false,
                                 default = nil)
  if valid_579756 != nil:
    section.add "ids", valid_579756
  var valid_579757 = query.getOrDefault("fields")
  valid_579757 = validateParameter(valid_579757, JString, required = false,
                                 default = nil)
  if valid_579757 != nil:
    section.add "fields", valid_579757
  var valid_579758 = query.getOrDefault("minChangeTime")
  valid_579758 = validateParameter(valid_579758, JString, required = false,
                                 default = nil)
  if valid_579758 != nil:
    section.add "minChangeTime", valid_579758
  var valid_579759 = query.getOrDefault("maxResults")
  valid_579759 = validateParameter(valid_579759, JInt, required = false,
                                 default = newJInt(1000))
  if valid_579759 != nil:
    section.add "maxResults", valid_579759
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579760: Call_DfareportingChangeLogsList_579739; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of change logs. This method supports paging.
  ## 
  let valid = call_579760.validator(path, query, header, formData, body)
  let scheme = call_579760.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579760.url(scheme.get, call_579760.host, call_579760.base,
                         call_579760.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579760, url, valid)

proc call*(call_579761: Call_DfareportingChangeLogsList_579739; profileId: string;
          key: string = ""; objectType: string = "OBJECT_ACCOUNT";
          prettyPrint: bool = true; oauthToken: string = "";
          action: string = "ACTION_ADD"; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; objectIds: JsonNode = nil; pageToken: string = "";
          searchString: string = ""; userProfileIds: JsonNode = nil;
          maxChangeTime: string = ""; ids: JsonNode = nil; fields: string = "";
          minChangeTime: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingChangeLogsList
  ## Retrieves a list of change logs. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   objectType: string
  ##             : Select only change logs with the specified object type.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   action: string
  ##         : Select only change logs with the specified action.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   objectIds: JArray
  ##            : Select only change logs with these object IDs.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Select only change logs whose object ID, user name, old or new values match the search string.
  ##   userProfileIds: JArray
  ##                 : Select only change logs with these user profile IDs.
  ##   maxChangeTime: string
  ##                : Select only change logs whose change time is before the specified maxChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
  ##   ids: JArray
  ##      : Select only change logs with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   minChangeTime: string
  ##                : Select only change logs whose change time is before the specified minChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_579762 = newJObject()
  var query_579763 = newJObject()
  add(query_579763, "key", newJString(key))
  add(query_579763, "objectType", newJString(objectType))
  add(query_579763, "prettyPrint", newJBool(prettyPrint))
  add(query_579763, "oauth_token", newJString(oauthToken))
  add(path_579762, "profileId", newJString(profileId))
  add(query_579763, "action", newJString(action))
  add(query_579763, "alt", newJString(alt))
  add(query_579763, "userIp", newJString(userIp))
  add(query_579763, "quotaUser", newJString(quotaUser))
  if objectIds != nil:
    query_579763.add "objectIds", objectIds
  add(query_579763, "pageToken", newJString(pageToken))
  add(query_579763, "searchString", newJString(searchString))
  if userProfileIds != nil:
    query_579763.add "userProfileIds", userProfileIds
  add(query_579763, "maxChangeTime", newJString(maxChangeTime))
  if ids != nil:
    query_579763.add "ids", ids
  add(query_579763, "fields", newJString(fields))
  add(query_579763, "minChangeTime", newJString(minChangeTime))
  add(query_579763, "maxResults", newJInt(maxResults))
  result = call_579761.call(path_579762, query_579763, nil, nil, nil)

var dfareportingChangeLogsList* = Call_DfareportingChangeLogsList_579739(
    name: "dfareportingChangeLogsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/changeLogs",
    validator: validate_DfareportingChangeLogsList_579740,
    base: "/dfareporting/v3.2", url: url_DfareportingChangeLogsList_579741,
    schemes: {Scheme.Https})
type
  Call_DfareportingChangeLogsGet_579764 = ref object of OpenApiRestCall_578364
proc url_DfareportingChangeLogsGet_579766(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/changeLogs/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingChangeLogsGet_579765(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one change log by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Change log ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579767 = path.getOrDefault("profileId")
  valid_579767 = validateParameter(valid_579767, JString, required = true,
                                 default = nil)
  if valid_579767 != nil:
    section.add "profileId", valid_579767
  var valid_579768 = path.getOrDefault("id")
  valid_579768 = validateParameter(valid_579768, JString, required = true,
                                 default = nil)
  if valid_579768 != nil:
    section.add "id", valid_579768
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579769 = query.getOrDefault("key")
  valid_579769 = validateParameter(valid_579769, JString, required = false,
                                 default = nil)
  if valid_579769 != nil:
    section.add "key", valid_579769
  var valid_579770 = query.getOrDefault("prettyPrint")
  valid_579770 = validateParameter(valid_579770, JBool, required = false,
                                 default = newJBool(true))
  if valid_579770 != nil:
    section.add "prettyPrint", valid_579770
  var valid_579771 = query.getOrDefault("oauth_token")
  valid_579771 = validateParameter(valid_579771, JString, required = false,
                                 default = nil)
  if valid_579771 != nil:
    section.add "oauth_token", valid_579771
  var valid_579772 = query.getOrDefault("alt")
  valid_579772 = validateParameter(valid_579772, JString, required = false,
                                 default = newJString("json"))
  if valid_579772 != nil:
    section.add "alt", valid_579772
  var valid_579773 = query.getOrDefault("userIp")
  valid_579773 = validateParameter(valid_579773, JString, required = false,
                                 default = nil)
  if valid_579773 != nil:
    section.add "userIp", valid_579773
  var valid_579774 = query.getOrDefault("quotaUser")
  valid_579774 = validateParameter(valid_579774, JString, required = false,
                                 default = nil)
  if valid_579774 != nil:
    section.add "quotaUser", valid_579774
  var valid_579775 = query.getOrDefault("fields")
  valid_579775 = validateParameter(valid_579775, JString, required = false,
                                 default = nil)
  if valid_579775 != nil:
    section.add "fields", valid_579775
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579776: Call_DfareportingChangeLogsGet_579764; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one change log by ID.
  ## 
  let valid = call_579776.validator(path, query, header, formData, body)
  let scheme = call_579776.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579776.url(scheme.get, call_579776.host, call_579776.base,
                         call_579776.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579776, url, valid)

proc call*(call_579777: Call_DfareportingChangeLogsGet_579764; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingChangeLogsGet
  ## Gets one change log by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Change log ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579778 = newJObject()
  var query_579779 = newJObject()
  add(query_579779, "key", newJString(key))
  add(query_579779, "prettyPrint", newJBool(prettyPrint))
  add(query_579779, "oauth_token", newJString(oauthToken))
  add(path_579778, "profileId", newJString(profileId))
  add(path_579778, "id", newJString(id))
  add(query_579779, "alt", newJString(alt))
  add(query_579779, "userIp", newJString(userIp))
  add(query_579779, "quotaUser", newJString(quotaUser))
  add(query_579779, "fields", newJString(fields))
  result = call_579777.call(path_579778, query_579779, nil, nil, nil)

var dfareportingChangeLogsGet* = Call_DfareportingChangeLogsGet_579764(
    name: "dfareportingChangeLogsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/changeLogs/{id}",
    validator: validate_DfareportingChangeLogsGet_579765,
    base: "/dfareporting/v3.2", url: url_DfareportingChangeLogsGet_579766,
    schemes: {Scheme.Https})
type
  Call_DfareportingCitiesList_579780 = ref object of OpenApiRestCall_578364
proc url_DfareportingCitiesList_579782(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/cities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCitiesList_579781(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of cities, possibly filtered.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579783 = path.getOrDefault("profileId")
  valid_579783 = validateParameter(valid_579783, JString, required = true,
                                 default = nil)
  if valid_579783 != nil:
    section.add "profileId", valid_579783
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   countryDartIds: JArray
  ##                 : Select only cities from these countries.
  ##   namePrefix: JString
  ##             : Select only cities with names starting with this prefix.
  ##   regionDartIds: JArray
  ##                : Select only cities from these regions.
  ##   dartIds: JArray
  ##          : Select only cities with these DART IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579784 = query.getOrDefault("key")
  valid_579784 = validateParameter(valid_579784, JString, required = false,
                                 default = nil)
  if valid_579784 != nil:
    section.add "key", valid_579784
  var valid_579785 = query.getOrDefault("prettyPrint")
  valid_579785 = validateParameter(valid_579785, JBool, required = false,
                                 default = newJBool(true))
  if valid_579785 != nil:
    section.add "prettyPrint", valid_579785
  var valid_579786 = query.getOrDefault("oauth_token")
  valid_579786 = validateParameter(valid_579786, JString, required = false,
                                 default = nil)
  if valid_579786 != nil:
    section.add "oauth_token", valid_579786
  var valid_579787 = query.getOrDefault("alt")
  valid_579787 = validateParameter(valid_579787, JString, required = false,
                                 default = newJString("json"))
  if valid_579787 != nil:
    section.add "alt", valid_579787
  var valid_579788 = query.getOrDefault("userIp")
  valid_579788 = validateParameter(valid_579788, JString, required = false,
                                 default = nil)
  if valid_579788 != nil:
    section.add "userIp", valid_579788
  var valid_579789 = query.getOrDefault("quotaUser")
  valid_579789 = validateParameter(valid_579789, JString, required = false,
                                 default = nil)
  if valid_579789 != nil:
    section.add "quotaUser", valid_579789
  var valid_579790 = query.getOrDefault("countryDartIds")
  valid_579790 = validateParameter(valid_579790, JArray, required = false,
                                 default = nil)
  if valid_579790 != nil:
    section.add "countryDartIds", valid_579790
  var valid_579791 = query.getOrDefault("namePrefix")
  valid_579791 = validateParameter(valid_579791, JString, required = false,
                                 default = nil)
  if valid_579791 != nil:
    section.add "namePrefix", valid_579791
  var valid_579792 = query.getOrDefault("regionDartIds")
  valid_579792 = validateParameter(valid_579792, JArray, required = false,
                                 default = nil)
  if valid_579792 != nil:
    section.add "regionDartIds", valid_579792
  var valid_579793 = query.getOrDefault("dartIds")
  valid_579793 = validateParameter(valid_579793, JArray, required = false,
                                 default = nil)
  if valid_579793 != nil:
    section.add "dartIds", valid_579793
  var valid_579794 = query.getOrDefault("fields")
  valid_579794 = validateParameter(valid_579794, JString, required = false,
                                 default = nil)
  if valid_579794 != nil:
    section.add "fields", valid_579794
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579795: Call_DfareportingCitiesList_579780; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of cities, possibly filtered.
  ## 
  let valid = call_579795.validator(path, query, header, formData, body)
  let scheme = call_579795.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579795.url(scheme.get, call_579795.host, call_579795.base,
                         call_579795.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579795, url, valid)

proc call*(call_579796: Call_DfareportingCitiesList_579780; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          countryDartIds: JsonNode = nil; namePrefix: string = "";
          regionDartIds: JsonNode = nil; dartIds: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCitiesList
  ## Retrieves a list of cities, possibly filtered.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   countryDartIds: JArray
  ##                 : Select only cities from these countries.
  ##   namePrefix: string
  ##             : Select only cities with names starting with this prefix.
  ##   regionDartIds: JArray
  ##                : Select only cities from these regions.
  ##   dartIds: JArray
  ##          : Select only cities with these DART IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579797 = newJObject()
  var query_579798 = newJObject()
  add(query_579798, "key", newJString(key))
  add(query_579798, "prettyPrint", newJBool(prettyPrint))
  add(query_579798, "oauth_token", newJString(oauthToken))
  add(path_579797, "profileId", newJString(profileId))
  add(query_579798, "alt", newJString(alt))
  add(query_579798, "userIp", newJString(userIp))
  add(query_579798, "quotaUser", newJString(quotaUser))
  if countryDartIds != nil:
    query_579798.add "countryDartIds", countryDartIds
  add(query_579798, "namePrefix", newJString(namePrefix))
  if regionDartIds != nil:
    query_579798.add "regionDartIds", regionDartIds
  if dartIds != nil:
    query_579798.add "dartIds", dartIds
  add(query_579798, "fields", newJString(fields))
  result = call_579796.call(path_579797, query_579798, nil, nil, nil)

var dfareportingCitiesList* = Call_DfareportingCitiesList_579780(
    name: "dfareportingCitiesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/cities",
    validator: validate_DfareportingCitiesList_579781, base: "/dfareporting/v3.2",
    url: url_DfareportingCitiesList_579782, schemes: {Scheme.Https})
type
  Call_DfareportingConnectionTypesList_579799 = ref object of OpenApiRestCall_578364
proc url_DfareportingConnectionTypesList_579801(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/connectionTypes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingConnectionTypesList_579800(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of connection types.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579802 = path.getOrDefault("profileId")
  valid_579802 = validateParameter(valid_579802, JString, required = true,
                                 default = nil)
  if valid_579802 != nil:
    section.add "profileId", valid_579802
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579803 = query.getOrDefault("key")
  valid_579803 = validateParameter(valid_579803, JString, required = false,
                                 default = nil)
  if valid_579803 != nil:
    section.add "key", valid_579803
  var valid_579804 = query.getOrDefault("prettyPrint")
  valid_579804 = validateParameter(valid_579804, JBool, required = false,
                                 default = newJBool(true))
  if valid_579804 != nil:
    section.add "prettyPrint", valid_579804
  var valid_579805 = query.getOrDefault("oauth_token")
  valid_579805 = validateParameter(valid_579805, JString, required = false,
                                 default = nil)
  if valid_579805 != nil:
    section.add "oauth_token", valid_579805
  var valid_579806 = query.getOrDefault("alt")
  valid_579806 = validateParameter(valid_579806, JString, required = false,
                                 default = newJString("json"))
  if valid_579806 != nil:
    section.add "alt", valid_579806
  var valid_579807 = query.getOrDefault("userIp")
  valid_579807 = validateParameter(valid_579807, JString, required = false,
                                 default = nil)
  if valid_579807 != nil:
    section.add "userIp", valid_579807
  var valid_579808 = query.getOrDefault("quotaUser")
  valid_579808 = validateParameter(valid_579808, JString, required = false,
                                 default = nil)
  if valid_579808 != nil:
    section.add "quotaUser", valid_579808
  var valid_579809 = query.getOrDefault("fields")
  valid_579809 = validateParameter(valid_579809, JString, required = false,
                                 default = nil)
  if valid_579809 != nil:
    section.add "fields", valid_579809
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579810: Call_DfareportingConnectionTypesList_579799;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of connection types.
  ## 
  let valid = call_579810.validator(path, query, header, formData, body)
  let scheme = call_579810.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579810.url(scheme.get, call_579810.host, call_579810.base,
                         call_579810.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579810, url, valid)

proc call*(call_579811: Call_DfareportingConnectionTypesList_579799;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingConnectionTypesList
  ## Retrieves a list of connection types.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579812 = newJObject()
  var query_579813 = newJObject()
  add(query_579813, "key", newJString(key))
  add(query_579813, "prettyPrint", newJBool(prettyPrint))
  add(query_579813, "oauth_token", newJString(oauthToken))
  add(path_579812, "profileId", newJString(profileId))
  add(query_579813, "alt", newJString(alt))
  add(query_579813, "userIp", newJString(userIp))
  add(query_579813, "quotaUser", newJString(quotaUser))
  add(query_579813, "fields", newJString(fields))
  result = call_579811.call(path_579812, query_579813, nil, nil, nil)

var dfareportingConnectionTypesList* = Call_DfareportingConnectionTypesList_579799(
    name: "dfareportingConnectionTypesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/connectionTypes",
    validator: validate_DfareportingConnectionTypesList_579800,
    base: "/dfareporting/v3.2", url: url_DfareportingConnectionTypesList_579801,
    schemes: {Scheme.Https})
type
  Call_DfareportingConnectionTypesGet_579814 = ref object of OpenApiRestCall_578364
proc url_DfareportingConnectionTypesGet_579816(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/connectionTypes/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingConnectionTypesGet_579815(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one connection type by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Connection type ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579817 = path.getOrDefault("profileId")
  valid_579817 = validateParameter(valid_579817, JString, required = true,
                                 default = nil)
  if valid_579817 != nil:
    section.add "profileId", valid_579817
  var valid_579818 = path.getOrDefault("id")
  valid_579818 = validateParameter(valid_579818, JString, required = true,
                                 default = nil)
  if valid_579818 != nil:
    section.add "id", valid_579818
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579819 = query.getOrDefault("key")
  valid_579819 = validateParameter(valid_579819, JString, required = false,
                                 default = nil)
  if valid_579819 != nil:
    section.add "key", valid_579819
  var valid_579820 = query.getOrDefault("prettyPrint")
  valid_579820 = validateParameter(valid_579820, JBool, required = false,
                                 default = newJBool(true))
  if valid_579820 != nil:
    section.add "prettyPrint", valid_579820
  var valid_579821 = query.getOrDefault("oauth_token")
  valid_579821 = validateParameter(valid_579821, JString, required = false,
                                 default = nil)
  if valid_579821 != nil:
    section.add "oauth_token", valid_579821
  var valid_579822 = query.getOrDefault("alt")
  valid_579822 = validateParameter(valid_579822, JString, required = false,
                                 default = newJString("json"))
  if valid_579822 != nil:
    section.add "alt", valid_579822
  var valid_579823 = query.getOrDefault("userIp")
  valid_579823 = validateParameter(valid_579823, JString, required = false,
                                 default = nil)
  if valid_579823 != nil:
    section.add "userIp", valid_579823
  var valid_579824 = query.getOrDefault("quotaUser")
  valid_579824 = validateParameter(valid_579824, JString, required = false,
                                 default = nil)
  if valid_579824 != nil:
    section.add "quotaUser", valid_579824
  var valid_579825 = query.getOrDefault("fields")
  valid_579825 = validateParameter(valid_579825, JString, required = false,
                                 default = nil)
  if valid_579825 != nil:
    section.add "fields", valid_579825
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579826: Call_DfareportingConnectionTypesGet_579814; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one connection type by ID.
  ## 
  let valid = call_579826.validator(path, query, header, formData, body)
  let scheme = call_579826.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579826.url(scheme.get, call_579826.host, call_579826.base,
                         call_579826.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579826, url, valid)

proc call*(call_579827: Call_DfareportingConnectionTypesGet_579814;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingConnectionTypesGet
  ## Gets one connection type by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Connection type ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579828 = newJObject()
  var query_579829 = newJObject()
  add(query_579829, "key", newJString(key))
  add(query_579829, "prettyPrint", newJBool(prettyPrint))
  add(query_579829, "oauth_token", newJString(oauthToken))
  add(path_579828, "profileId", newJString(profileId))
  add(path_579828, "id", newJString(id))
  add(query_579829, "alt", newJString(alt))
  add(query_579829, "userIp", newJString(userIp))
  add(query_579829, "quotaUser", newJString(quotaUser))
  add(query_579829, "fields", newJString(fields))
  result = call_579827.call(path_579828, query_579829, nil, nil, nil)

var dfareportingConnectionTypesGet* = Call_DfareportingConnectionTypesGet_579814(
    name: "dfareportingConnectionTypesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/connectionTypes/{id}",
    validator: validate_DfareportingConnectionTypesGet_579815,
    base: "/dfareporting/v3.2", url: url_DfareportingConnectionTypesGet_579816,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesUpdate_579851 = ref object of OpenApiRestCall_578364
proc url_DfareportingContentCategoriesUpdate_579853(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesUpdate_579852(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing content category.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579854 = path.getOrDefault("profileId")
  valid_579854 = validateParameter(valid_579854, JString, required = true,
                                 default = nil)
  if valid_579854 != nil:
    section.add "profileId", valid_579854
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579855 = query.getOrDefault("key")
  valid_579855 = validateParameter(valid_579855, JString, required = false,
                                 default = nil)
  if valid_579855 != nil:
    section.add "key", valid_579855
  var valid_579856 = query.getOrDefault("prettyPrint")
  valid_579856 = validateParameter(valid_579856, JBool, required = false,
                                 default = newJBool(true))
  if valid_579856 != nil:
    section.add "prettyPrint", valid_579856
  var valid_579857 = query.getOrDefault("oauth_token")
  valid_579857 = validateParameter(valid_579857, JString, required = false,
                                 default = nil)
  if valid_579857 != nil:
    section.add "oauth_token", valid_579857
  var valid_579858 = query.getOrDefault("alt")
  valid_579858 = validateParameter(valid_579858, JString, required = false,
                                 default = newJString("json"))
  if valid_579858 != nil:
    section.add "alt", valid_579858
  var valid_579859 = query.getOrDefault("userIp")
  valid_579859 = validateParameter(valid_579859, JString, required = false,
                                 default = nil)
  if valid_579859 != nil:
    section.add "userIp", valid_579859
  var valid_579860 = query.getOrDefault("quotaUser")
  valid_579860 = validateParameter(valid_579860, JString, required = false,
                                 default = nil)
  if valid_579860 != nil:
    section.add "quotaUser", valid_579860
  var valid_579861 = query.getOrDefault("fields")
  valid_579861 = validateParameter(valid_579861, JString, required = false,
                                 default = nil)
  if valid_579861 != nil:
    section.add "fields", valid_579861
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579863: Call_DfareportingContentCategoriesUpdate_579851;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing content category.
  ## 
  let valid = call_579863.validator(path, query, header, formData, body)
  let scheme = call_579863.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579863.url(scheme.get, call_579863.host, call_579863.base,
                         call_579863.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579863, url, valid)

proc call*(call_579864: Call_DfareportingContentCategoriesUpdate_579851;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingContentCategoriesUpdate
  ## Updates an existing content category.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579865 = newJObject()
  var query_579866 = newJObject()
  var body_579867 = newJObject()
  add(query_579866, "key", newJString(key))
  add(query_579866, "prettyPrint", newJBool(prettyPrint))
  add(query_579866, "oauth_token", newJString(oauthToken))
  add(path_579865, "profileId", newJString(profileId))
  add(query_579866, "alt", newJString(alt))
  add(query_579866, "userIp", newJString(userIp))
  add(query_579866, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579867 = body
  add(query_579866, "fields", newJString(fields))
  result = call_579864.call(path_579865, query_579866, nil, nil, body_579867)

var dfareportingContentCategoriesUpdate* = Call_DfareportingContentCategoriesUpdate_579851(
    name: "dfareportingContentCategoriesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories",
    validator: validate_DfareportingContentCategoriesUpdate_579852,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesUpdate_579853,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesInsert_579868 = ref object of OpenApiRestCall_578364
proc url_DfareportingContentCategoriesInsert_579870(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesInsert_579869(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new content category.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579871 = path.getOrDefault("profileId")
  valid_579871 = validateParameter(valid_579871, JString, required = true,
                                 default = nil)
  if valid_579871 != nil:
    section.add "profileId", valid_579871
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579872 = query.getOrDefault("key")
  valid_579872 = validateParameter(valid_579872, JString, required = false,
                                 default = nil)
  if valid_579872 != nil:
    section.add "key", valid_579872
  var valid_579873 = query.getOrDefault("prettyPrint")
  valid_579873 = validateParameter(valid_579873, JBool, required = false,
                                 default = newJBool(true))
  if valid_579873 != nil:
    section.add "prettyPrint", valid_579873
  var valid_579874 = query.getOrDefault("oauth_token")
  valid_579874 = validateParameter(valid_579874, JString, required = false,
                                 default = nil)
  if valid_579874 != nil:
    section.add "oauth_token", valid_579874
  var valid_579875 = query.getOrDefault("alt")
  valid_579875 = validateParameter(valid_579875, JString, required = false,
                                 default = newJString("json"))
  if valid_579875 != nil:
    section.add "alt", valid_579875
  var valid_579876 = query.getOrDefault("userIp")
  valid_579876 = validateParameter(valid_579876, JString, required = false,
                                 default = nil)
  if valid_579876 != nil:
    section.add "userIp", valid_579876
  var valid_579877 = query.getOrDefault("quotaUser")
  valid_579877 = validateParameter(valid_579877, JString, required = false,
                                 default = nil)
  if valid_579877 != nil:
    section.add "quotaUser", valid_579877
  var valid_579878 = query.getOrDefault("fields")
  valid_579878 = validateParameter(valid_579878, JString, required = false,
                                 default = nil)
  if valid_579878 != nil:
    section.add "fields", valid_579878
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579880: Call_DfareportingContentCategoriesInsert_579868;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new content category.
  ## 
  let valid = call_579880.validator(path, query, header, formData, body)
  let scheme = call_579880.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579880.url(scheme.get, call_579880.host, call_579880.base,
                         call_579880.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579880, url, valid)

proc call*(call_579881: Call_DfareportingContentCategoriesInsert_579868;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingContentCategoriesInsert
  ## Inserts a new content category.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579882 = newJObject()
  var query_579883 = newJObject()
  var body_579884 = newJObject()
  add(query_579883, "key", newJString(key))
  add(query_579883, "prettyPrint", newJBool(prettyPrint))
  add(query_579883, "oauth_token", newJString(oauthToken))
  add(path_579882, "profileId", newJString(profileId))
  add(query_579883, "alt", newJString(alt))
  add(query_579883, "userIp", newJString(userIp))
  add(query_579883, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579884 = body
  add(query_579883, "fields", newJString(fields))
  result = call_579881.call(path_579882, query_579883, nil, nil, body_579884)

var dfareportingContentCategoriesInsert* = Call_DfareportingContentCategoriesInsert_579868(
    name: "dfareportingContentCategoriesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories",
    validator: validate_DfareportingContentCategoriesInsert_579869,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesInsert_579870,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesList_579830 = ref object of OpenApiRestCall_578364
proc url_DfareportingContentCategoriesList_579832(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesList_579831(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of content categories, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579833 = path.getOrDefault("profileId")
  valid_579833 = validateParameter(valid_579833, JString, required = true,
                                 default = nil)
  if valid_579833 != nil:
    section.add "profileId", valid_579833
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "contentcategory*2015" will return objects with names like "contentcategory June 2015", "contentcategory April 2015", or simply "contentcategory 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "contentcategory" will match objects with name "my contentcategory", "contentcategory 2015", or simply "contentcategory".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only content categories with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_579834 = query.getOrDefault("key")
  valid_579834 = validateParameter(valid_579834, JString, required = false,
                                 default = nil)
  if valid_579834 != nil:
    section.add "key", valid_579834
  var valid_579835 = query.getOrDefault("prettyPrint")
  valid_579835 = validateParameter(valid_579835, JBool, required = false,
                                 default = newJBool(true))
  if valid_579835 != nil:
    section.add "prettyPrint", valid_579835
  var valid_579836 = query.getOrDefault("oauth_token")
  valid_579836 = validateParameter(valid_579836, JString, required = false,
                                 default = nil)
  if valid_579836 != nil:
    section.add "oauth_token", valid_579836
  var valid_579837 = query.getOrDefault("sortField")
  valid_579837 = validateParameter(valid_579837, JString, required = false,
                                 default = newJString("ID"))
  if valid_579837 != nil:
    section.add "sortField", valid_579837
  var valid_579838 = query.getOrDefault("alt")
  valid_579838 = validateParameter(valid_579838, JString, required = false,
                                 default = newJString("json"))
  if valid_579838 != nil:
    section.add "alt", valid_579838
  var valid_579839 = query.getOrDefault("userIp")
  valid_579839 = validateParameter(valid_579839, JString, required = false,
                                 default = nil)
  if valid_579839 != nil:
    section.add "userIp", valid_579839
  var valid_579840 = query.getOrDefault("quotaUser")
  valid_579840 = validateParameter(valid_579840, JString, required = false,
                                 default = nil)
  if valid_579840 != nil:
    section.add "quotaUser", valid_579840
  var valid_579841 = query.getOrDefault("pageToken")
  valid_579841 = validateParameter(valid_579841, JString, required = false,
                                 default = nil)
  if valid_579841 != nil:
    section.add "pageToken", valid_579841
  var valid_579842 = query.getOrDefault("searchString")
  valid_579842 = validateParameter(valid_579842, JString, required = false,
                                 default = nil)
  if valid_579842 != nil:
    section.add "searchString", valid_579842
  var valid_579843 = query.getOrDefault("sortOrder")
  valid_579843 = validateParameter(valid_579843, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_579843 != nil:
    section.add "sortOrder", valid_579843
  var valid_579844 = query.getOrDefault("ids")
  valid_579844 = validateParameter(valid_579844, JArray, required = false,
                                 default = nil)
  if valid_579844 != nil:
    section.add "ids", valid_579844
  var valid_579845 = query.getOrDefault("fields")
  valid_579845 = validateParameter(valid_579845, JString, required = false,
                                 default = nil)
  if valid_579845 != nil:
    section.add "fields", valid_579845
  var valid_579846 = query.getOrDefault("maxResults")
  valid_579846 = validateParameter(valid_579846, JInt, required = false,
                                 default = newJInt(1000))
  if valid_579846 != nil:
    section.add "maxResults", valid_579846
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579847: Call_DfareportingContentCategoriesList_579830;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of content categories, possibly filtered. This method supports paging.
  ## 
  let valid = call_579847.validator(path, query, header, formData, body)
  let scheme = call_579847.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579847.url(scheme.get, call_579847.host, call_579847.base,
                         call_579847.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579847, url, valid)

proc call*(call_579848: Call_DfareportingContentCategoriesList_579830;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; sortField: string = "ID"; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          ids: JsonNode = nil; fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingContentCategoriesList
  ## Retrieves a list of content categories, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "contentcategory*2015" will return objects with names like "contentcategory June 2015", "contentcategory April 2015", or simply "contentcategory 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "contentcategory" will match objects with name "my contentcategory", "contentcategory 2015", or simply "contentcategory".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only content categories with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_579849 = newJObject()
  var query_579850 = newJObject()
  add(query_579850, "key", newJString(key))
  add(query_579850, "prettyPrint", newJBool(prettyPrint))
  add(query_579850, "oauth_token", newJString(oauthToken))
  add(path_579849, "profileId", newJString(profileId))
  add(query_579850, "sortField", newJString(sortField))
  add(query_579850, "alt", newJString(alt))
  add(query_579850, "userIp", newJString(userIp))
  add(query_579850, "quotaUser", newJString(quotaUser))
  add(query_579850, "pageToken", newJString(pageToken))
  add(query_579850, "searchString", newJString(searchString))
  add(query_579850, "sortOrder", newJString(sortOrder))
  if ids != nil:
    query_579850.add "ids", ids
  add(query_579850, "fields", newJString(fields))
  add(query_579850, "maxResults", newJInt(maxResults))
  result = call_579848.call(path_579849, query_579850, nil, nil, nil)

var dfareportingContentCategoriesList* = Call_DfareportingContentCategoriesList_579830(
    name: "dfareportingContentCategoriesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories",
    validator: validate_DfareportingContentCategoriesList_579831,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesList_579832,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesPatch_579885 = ref object of OpenApiRestCall_578364
proc url_DfareportingContentCategoriesPatch_579887(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesPatch_579886(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing content category. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579888 = path.getOrDefault("profileId")
  valid_579888 = validateParameter(valid_579888, JString, required = true,
                                 default = nil)
  if valid_579888 != nil:
    section.add "profileId", valid_579888
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Content category ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579889 = query.getOrDefault("key")
  valid_579889 = validateParameter(valid_579889, JString, required = false,
                                 default = nil)
  if valid_579889 != nil:
    section.add "key", valid_579889
  var valid_579890 = query.getOrDefault("prettyPrint")
  valid_579890 = validateParameter(valid_579890, JBool, required = false,
                                 default = newJBool(true))
  if valid_579890 != nil:
    section.add "prettyPrint", valid_579890
  var valid_579891 = query.getOrDefault("oauth_token")
  valid_579891 = validateParameter(valid_579891, JString, required = false,
                                 default = nil)
  if valid_579891 != nil:
    section.add "oauth_token", valid_579891
  var valid_579892 = query.getOrDefault("alt")
  valid_579892 = validateParameter(valid_579892, JString, required = false,
                                 default = newJString("json"))
  if valid_579892 != nil:
    section.add "alt", valid_579892
  var valid_579893 = query.getOrDefault("userIp")
  valid_579893 = validateParameter(valid_579893, JString, required = false,
                                 default = nil)
  if valid_579893 != nil:
    section.add "userIp", valid_579893
  var valid_579894 = query.getOrDefault("quotaUser")
  valid_579894 = validateParameter(valid_579894, JString, required = false,
                                 default = nil)
  if valid_579894 != nil:
    section.add "quotaUser", valid_579894
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_579895 = query.getOrDefault("id")
  valid_579895 = validateParameter(valid_579895, JString, required = true,
                                 default = nil)
  if valid_579895 != nil:
    section.add "id", valid_579895
  var valid_579896 = query.getOrDefault("fields")
  valid_579896 = validateParameter(valid_579896, JString, required = false,
                                 default = nil)
  if valid_579896 != nil:
    section.add "fields", valid_579896
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579898: Call_DfareportingContentCategoriesPatch_579885;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing content category. This method supports patch semantics.
  ## 
  let valid = call_579898.validator(path, query, header, formData, body)
  let scheme = call_579898.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579898.url(scheme.get, call_579898.host, call_579898.base,
                         call_579898.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579898, url, valid)

proc call*(call_579899: Call_DfareportingContentCategoriesPatch_579885;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingContentCategoriesPatch
  ## Updates an existing content category. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Content category ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579900 = newJObject()
  var query_579901 = newJObject()
  var body_579902 = newJObject()
  add(query_579901, "key", newJString(key))
  add(query_579901, "prettyPrint", newJBool(prettyPrint))
  add(query_579901, "oauth_token", newJString(oauthToken))
  add(path_579900, "profileId", newJString(profileId))
  add(query_579901, "alt", newJString(alt))
  add(query_579901, "userIp", newJString(userIp))
  add(query_579901, "quotaUser", newJString(quotaUser))
  add(query_579901, "id", newJString(id))
  if body != nil:
    body_579902 = body
  add(query_579901, "fields", newJString(fields))
  result = call_579899.call(path_579900, query_579901, nil, nil, body_579902)

var dfareportingContentCategoriesPatch* = Call_DfareportingContentCategoriesPatch_579885(
    name: "dfareportingContentCategoriesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories",
    validator: validate_DfareportingContentCategoriesPatch_579886,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesPatch_579887,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesGet_579903 = ref object of OpenApiRestCall_578364
proc url_DfareportingContentCategoriesGet_579905(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesGet_579904(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one content category by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Content category ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579906 = path.getOrDefault("profileId")
  valid_579906 = validateParameter(valid_579906, JString, required = true,
                                 default = nil)
  if valid_579906 != nil:
    section.add "profileId", valid_579906
  var valid_579907 = path.getOrDefault("id")
  valid_579907 = validateParameter(valid_579907, JString, required = true,
                                 default = nil)
  if valid_579907 != nil:
    section.add "id", valid_579907
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579908 = query.getOrDefault("key")
  valid_579908 = validateParameter(valid_579908, JString, required = false,
                                 default = nil)
  if valid_579908 != nil:
    section.add "key", valid_579908
  var valid_579909 = query.getOrDefault("prettyPrint")
  valid_579909 = validateParameter(valid_579909, JBool, required = false,
                                 default = newJBool(true))
  if valid_579909 != nil:
    section.add "prettyPrint", valid_579909
  var valid_579910 = query.getOrDefault("oauth_token")
  valid_579910 = validateParameter(valid_579910, JString, required = false,
                                 default = nil)
  if valid_579910 != nil:
    section.add "oauth_token", valid_579910
  var valid_579911 = query.getOrDefault("alt")
  valid_579911 = validateParameter(valid_579911, JString, required = false,
                                 default = newJString("json"))
  if valid_579911 != nil:
    section.add "alt", valid_579911
  var valid_579912 = query.getOrDefault("userIp")
  valid_579912 = validateParameter(valid_579912, JString, required = false,
                                 default = nil)
  if valid_579912 != nil:
    section.add "userIp", valid_579912
  var valid_579913 = query.getOrDefault("quotaUser")
  valid_579913 = validateParameter(valid_579913, JString, required = false,
                                 default = nil)
  if valid_579913 != nil:
    section.add "quotaUser", valid_579913
  var valid_579914 = query.getOrDefault("fields")
  valid_579914 = validateParameter(valid_579914, JString, required = false,
                                 default = nil)
  if valid_579914 != nil:
    section.add "fields", valid_579914
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579915: Call_DfareportingContentCategoriesGet_579903;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one content category by ID.
  ## 
  let valid = call_579915.validator(path, query, header, formData, body)
  let scheme = call_579915.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579915.url(scheme.get, call_579915.host, call_579915.base,
                         call_579915.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579915, url, valid)

proc call*(call_579916: Call_DfareportingContentCategoriesGet_579903;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingContentCategoriesGet
  ## Gets one content category by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Content category ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579917 = newJObject()
  var query_579918 = newJObject()
  add(query_579918, "key", newJString(key))
  add(query_579918, "prettyPrint", newJBool(prettyPrint))
  add(query_579918, "oauth_token", newJString(oauthToken))
  add(path_579917, "profileId", newJString(profileId))
  add(path_579917, "id", newJString(id))
  add(query_579918, "alt", newJString(alt))
  add(query_579918, "userIp", newJString(userIp))
  add(query_579918, "quotaUser", newJString(quotaUser))
  add(query_579918, "fields", newJString(fields))
  result = call_579916.call(path_579917, query_579918, nil, nil, nil)

var dfareportingContentCategoriesGet* = Call_DfareportingContentCategoriesGet_579903(
    name: "dfareportingContentCategoriesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories/{id}",
    validator: validate_DfareportingContentCategoriesGet_579904,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesGet_579905,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesDelete_579919 = ref object of OpenApiRestCall_578364
proc url_DfareportingContentCategoriesDelete_579921(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesDelete_579920(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing content category.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Content category ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579922 = path.getOrDefault("profileId")
  valid_579922 = validateParameter(valid_579922, JString, required = true,
                                 default = nil)
  if valid_579922 != nil:
    section.add "profileId", valid_579922
  var valid_579923 = path.getOrDefault("id")
  valid_579923 = validateParameter(valid_579923, JString, required = true,
                                 default = nil)
  if valid_579923 != nil:
    section.add "id", valid_579923
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579924 = query.getOrDefault("key")
  valid_579924 = validateParameter(valid_579924, JString, required = false,
                                 default = nil)
  if valid_579924 != nil:
    section.add "key", valid_579924
  var valid_579925 = query.getOrDefault("prettyPrint")
  valid_579925 = validateParameter(valid_579925, JBool, required = false,
                                 default = newJBool(true))
  if valid_579925 != nil:
    section.add "prettyPrint", valid_579925
  var valid_579926 = query.getOrDefault("oauth_token")
  valid_579926 = validateParameter(valid_579926, JString, required = false,
                                 default = nil)
  if valid_579926 != nil:
    section.add "oauth_token", valid_579926
  var valid_579927 = query.getOrDefault("alt")
  valid_579927 = validateParameter(valid_579927, JString, required = false,
                                 default = newJString("json"))
  if valid_579927 != nil:
    section.add "alt", valid_579927
  var valid_579928 = query.getOrDefault("userIp")
  valid_579928 = validateParameter(valid_579928, JString, required = false,
                                 default = nil)
  if valid_579928 != nil:
    section.add "userIp", valid_579928
  var valid_579929 = query.getOrDefault("quotaUser")
  valid_579929 = validateParameter(valid_579929, JString, required = false,
                                 default = nil)
  if valid_579929 != nil:
    section.add "quotaUser", valid_579929
  var valid_579930 = query.getOrDefault("fields")
  valid_579930 = validateParameter(valid_579930, JString, required = false,
                                 default = nil)
  if valid_579930 != nil:
    section.add "fields", valid_579930
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579931: Call_DfareportingContentCategoriesDelete_579919;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing content category.
  ## 
  let valid = call_579931.validator(path, query, header, formData, body)
  let scheme = call_579931.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579931.url(scheme.get, call_579931.host, call_579931.base,
                         call_579931.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579931, url, valid)

proc call*(call_579932: Call_DfareportingContentCategoriesDelete_579919;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingContentCategoriesDelete
  ## Deletes an existing content category.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Content category ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579933 = newJObject()
  var query_579934 = newJObject()
  add(query_579934, "key", newJString(key))
  add(query_579934, "prettyPrint", newJBool(prettyPrint))
  add(query_579934, "oauth_token", newJString(oauthToken))
  add(path_579933, "profileId", newJString(profileId))
  add(path_579933, "id", newJString(id))
  add(query_579934, "alt", newJString(alt))
  add(query_579934, "userIp", newJString(userIp))
  add(query_579934, "quotaUser", newJString(quotaUser))
  add(query_579934, "fields", newJString(fields))
  result = call_579932.call(path_579933, query_579934, nil, nil, nil)

var dfareportingContentCategoriesDelete* = Call_DfareportingContentCategoriesDelete_579919(
    name: "dfareportingContentCategoriesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories/{id}",
    validator: validate_DfareportingContentCategoriesDelete_579920,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesDelete_579921,
    schemes: {Scheme.Https})
type
  Call_DfareportingConversionsBatchinsert_579935 = ref object of OpenApiRestCall_578364
proc url_DfareportingConversionsBatchinsert_579937(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/conversions/batchinsert")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingConversionsBatchinsert_579936(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts conversions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579938 = path.getOrDefault("profileId")
  valid_579938 = validateParameter(valid_579938, JString, required = true,
                                 default = nil)
  if valid_579938 != nil:
    section.add "profileId", valid_579938
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579939 = query.getOrDefault("key")
  valid_579939 = validateParameter(valid_579939, JString, required = false,
                                 default = nil)
  if valid_579939 != nil:
    section.add "key", valid_579939
  var valid_579940 = query.getOrDefault("prettyPrint")
  valid_579940 = validateParameter(valid_579940, JBool, required = false,
                                 default = newJBool(true))
  if valid_579940 != nil:
    section.add "prettyPrint", valid_579940
  var valid_579941 = query.getOrDefault("oauth_token")
  valid_579941 = validateParameter(valid_579941, JString, required = false,
                                 default = nil)
  if valid_579941 != nil:
    section.add "oauth_token", valid_579941
  var valid_579942 = query.getOrDefault("alt")
  valid_579942 = validateParameter(valid_579942, JString, required = false,
                                 default = newJString("json"))
  if valid_579942 != nil:
    section.add "alt", valid_579942
  var valid_579943 = query.getOrDefault("userIp")
  valid_579943 = validateParameter(valid_579943, JString, required = false,
                                 default = nil)
  if valid_579943 != nil:
    section.add "userIp", valid_579943
  var valid_579944 = query.getOrDefault("quotaUser")
  valid_579944 = validateParameter(valid_579944, JString, required = false,
                                 default = nil)
  if valid_579944 != nil:
    section.add "quotaUser", valid_579944
  var valid_579945 = query.getOrDefault("fields")
  valid_579945 = validateParameter(valid_579945, JString, required = false,
                                 default = nil)
  if valid_579945 != nil:
    section.add "fields", valid_579945
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579947: Call_DfareportingConversionsBatchinsert_579935;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts conversions.
  ## 
  let valid = call_579947.validator(path, query, header, formData, body)
  let scheme = call_579947.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579947.url(scheme.get, call_579947.host, call_579947.base,
                         call_579947.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579947, url, valid)

proc call*(call_579948: Call_DfareportingConversionsBatchinsert_579935;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingConversionsBatchinsert
  ## Inserts conversions.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579949 = newJObject()
  var query_579950 = newJObject()
  var body_579951 = newJObject()
  add(query_579950, "key", newJString(key))
  add(query_579950, "prettyPrint", newJBool(prettyPrint))
  add(query_579950, "oauth_token", newJString(oauthToken))
  add(path_579949, "profileId", newJString(profileId))
  add(query_579950, "alt", newJString(alt))
  add(query_579950, "userIp", newJString(userIp))
  add(query_579950, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579951 = body
  add(query_579950, "fields", newJString(fields))
  result = call_579948.call(path_579949, query_579950, nil, nil, body_579951)

var dfareportingConversionsBatchinsert* = Call_DfareportingConversionsBatchinsert_579935(
    name: "dfareportingConversionsBatchinsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/conversions/batchinsert",
    validator: validate_DfareportingConversionsBatchinsert_579936,
    base: "/dfareporting/v3.2", url: url_DfareportingConversionsBatchinsert_579937,
    schemes: {Scheme.Https})
type
  Call_DfareportingConversionsBatchupdate_579952 = ref object of OpenApiRestCall_578364
proc url_DfareportingConversionsBatchupdate_579954(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/conversions/batchupdate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingConversionsBatchupdate_579953(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates existing conversions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579955 = path.getOrDefault("profileId")
  valid_579955 = validateParameter(valid_579955, JString, required = true,
                                 default = nil)
  if valid_579955 != nil:
    section.add "profileId", valid_579955
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579956 = query.getOrDefault("key")
  valid_579956 = validateParameter(valid_579956, JString, required = false,
                                 default = nil)
  if valid_579956 != nil:
    section.add "key", valid_579956
  var valid_579957 = query.getOrDefault("prettyPrint")
  valid_579957 = validateParameter(valid_579957, JBool, required = false,
                                 default = newJBool(true))
  if valid_579957 != nil:
    section.add "prettyPrint", valid_579957
  var valid_579958 = query.getOrDefault("oauth_token")
  valid_579958 = validateParameter(valid_579958, JString, required = false,
                                 default = nil)
  if valid_579958 != nil:
    section.add "oauth_token", valid_579958
  var valid_579959 = query.getOrDefault("alt")
  valid_579959 = validateParameter(valid_579959, JString, required = false,
                                 default = newJString("json"))
  if valid_579959 != nil:
    section.add "alt", valid_579959
  var valid_579960 = query.getOrDefault("userIp")
  valid_579960 = validateParameter(valid_579960, JString, required = false,
                                 default = nil)
  if valid_579960 != nil:
    section.add "userIp", valid_579960
  var valid_579961 = query.getOrDefault("quotaUser")
  valid_579961 = validateParameter(valid_579961, JString, required = false,
                                 default = nil)
  if valid_579961 != nil:
    section.add "quotaUser", valid_579961
  var valid_579962 = query.getOrDefault("fields")
  valid_579962 = validateParameter(valid_579962, JString, required = false,
                                 default = nil)
  if valid_579962 != nil:
    section.add "fields", valid_579962
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_579964: Call_DfareportingConversionsBatchupdate_579952;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates existing conversions.
  ## 
  let valid = call_579964.validator(path, query, header, formData, body)
  let scheme = call_579964.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579964.url(scheme.get, call_579964.host, call_579964.base,
                         call_579964.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579964, url, valid)

proc call*(call_579965: Call_DfareportingConversionsBatchupdate_579952;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingConversionsBatchupdate
  ## Updates existing conversions.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579966 = newJObject()
  var query_579967 = newJObject()
  var body_579968 = newJObject()
  add(query_579967, "key", newJString(key))
  add(query_579967, "prettyPrint", newJBool(prettyPrint))
  add(query_579967, "oauth_token", newJString(oauthToken))
  add(path_579966, "profileId", newJString(profileId))
  add(query_579967, "alt", newJString(alt))
  add(query_579967, "userIp", newJString(userIp))
  add(query_579967, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_579968 = body
  add(query_579967, "fields", newJString(fields))
  result = call_579965.call(path_579966, query_579967, nil, nil, body_579968)

var dfareportingConversionsBatchupdate* = Call_DfareportingConversionsBatchupdate_579952(
    name: "dfareportingConversionsBatchupdate", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/conversions/batchupdate",
    validator: validate_DfareportingConversionsBatchupdate_579953,
    base: "/dfareporting/v3.2", url: url_DfareportingConversionsBatchupdate_579954,
    schemes: {Scheme.Https})
type
  Call_DfareportingCountriesList_579969 = ref object of OpenApiRestCall_578364
proc url_DfareportingCountriesList_579971(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/countries")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCountriesList_579970(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of countries.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579972 = path.getOrDefault("profileId")
  valid_579972 = validateParameter(valid_579972, JString, required = true,
                                 default = nil)
  if valid_579972 != nil:
    section.add "profileId", valid_579972
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579973 = query.getOrDefault("key")
  valid_579973 = validateParameter(valid_579973, JString, required = false,
                                 default = nil)
  if valid_579973 != nil:
    section.add "key", valid_579973
  var valid_579974 = query.getOrDefault("prettyPrint")
  valid_579974 = validateParameter(valid_579974, JBool, required = false,
                                 default = newJBool(true))
  if valid_579974 != nil:
    section.add "prettyPrint", valid_579974
  var valid_579975 = query.getOrDefault("oauth_token")
  valid_579975 = validateParameter(valid_579975, JString, required = false,
                                 default = nil)
  if valid_579975 != nil:
    section.add "oauth_token", valid_579975
  var valid_579976 = query.getOrDefault("alt")
  valid_579976 = validateParameter(valid_579976, JString, required = false,
                                 default = newJString("json"))
  if valid_579976 != nil:
    section.add "alt", valid_579976
  var valid_579977 = query.getOrDefault("userIp")
  valid_579977 = validateParameter(valid_579977, JString, required = false,
                                 default = nil)
  if valid_579977 != nil:
    section.add "userIp", valid_579977
  var valid_579978 = query.getOrDefault("quotaUser")
  valid_579978 = validateParameter(valid_579978, JString, required = false,
                                 default = nil)
  if valid_579978 != nil:
    section.add "quotaUser", valid_579978
  var valid_579979 = query.getOrDefault("fields")
  valid_579979 = validateParameter(valid_579979, JString, required = false,
                                 default = nil)
  if valid_579979 != nil:
    section.add "fields", valid_579979
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579980: Call_DfareportingCountriesList_579969; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of countries.
  ## 
  let valid = call_579980.validator(path, query, header, formData, body)
  let scheme = call_579980.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579980.url(scheme.get, call_579980.host, call_579980.base,
                         call_579980.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579980, url, valid)

proc call*(call_579981: Call_DfareportingCountriesList_579969; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingCountriesList
  ## Retrieves a list of countries.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579982 = newJObject()
  var query_579983 = newJObject()
  add(query_579983, "key", newJString(key))
  add(query_579983, "prettyPrint", newJBool(prettyPrint))
  add(query_579983, "oauth_token", newJString(oauthToken))
  add(path_579982, "profileId", newJString(profileId))
  add(query_579983, "alt", newJString(alt))
  add(query_579983, "userIp", newJString(userIp))
  add(query_579983, "quotaUser", newJString(quotaUser))
  add(query_579983, "fields", newJString(fields))
  result = call_579981.call(path_579982, query_579983, nil, nil, nil)

var dfareportingCountriesList* = Call_DfareportingCountriesList_579969(
    name: "dfareportingCountriesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/countries",
    validator: validate_DfareportingCountriesList_579970,
    base: "/dfareporting/v3.2", url: url_DfareportingCountriesList_579971,
    schemes: {Scheme.Https})
type
  Call_DfareportingCountriesGet_579984 = ref object of OpenApiRestCall_578364
proc url_DfareportingCountriesGet_579986(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "dartId" in path, "`dartId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/countries/"),
               (kind: VariableSegment, value: "dartId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCountriesGet_579985(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one country by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   dartId: JString (required)
  ##         : Country DART ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_579987 = path.getOrDefault("profileId")
  valid_579987 = validateParameter(valid_579987, JString, required = true,
                                 default = nil)
  if valid_579987 != nil:
    section.add "profileId", valid_579987
  var valid_579988 = path.getOrDefault("dartId")
  valid_579988 = validateParameter(valid_579988, JString, required = true,
                                 default = nil)
  if valid_579988 != nil:
    section.add "dartId", valid_579988
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_579989 = query.getOrDefault("key")
  valid_579989 = validateParameter(valid_579989, JString, required = false,
                                 default = nil)
  if valid_579989 != nil:
    section.add "key", valid_579989
  var valid_579990 = query.getOrDefault("prettyPrint")
  valid_579990 = validateParameter(valid_579990, JBool, required = false,
                                 default = newJBool(true))
  if valid_579990 != nil:
    section.add "prettyPrint", valid_579990
  var valid_579991 = query.getOrDefault("oauth_token")
  valid_579991 = validateParameter(valid_579991, JString, required = false,
                                 default = nil)
  if valid_579991 != nil:
    section.add "oauth_token", valid_579991
  var valid_579992 = query.getOrDefault("alt")
  valid_579992 = validateParameter(valid_579992, JString, required = false,
                                 default = newJString("json"))
  if valid_579992 != nil:
    section.add "alt", valid_579992
  var valid_579993 = query.getOrDefault("userIp")
  valid_579993 = validateParameter(valid_579993, JString, required = false,
                                 default = nil)
  if valid_579993 != nil:
    section.add "userIp", valid_579993
  var valid_579994 = query.getOrDefault("quotaUser")
  valid_579994 = validateParameter(valid_579994, JString, required = false,
                                 default = nil)
  if valid_579994 != nil:
    section.add "quotaUser", valid_579994
  var valid_579995 = query.getOrDefault("fields")
  valid_579995 = validateParameter(valid_579995, JString, required = false,
                                 default = nil)
  if valid_579995 != nil:
    section.add "fields", valid_579995
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_579996: Call_DfareportingCountriesGet_579984; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one country by ID.
  ## 
  let valid = call_579996.validator(path, query, header, formData, body)
  let scheme = call_579996.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_579996.url(scheme.get, call_579996.host, call_579996.base,
                         call_579996.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_579996, url, valid)

proc call*(call_579997: Call_DfareportingCountriesGet_579984; profileId: string;
          dartId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingCountriesGet
  ## Gets one country by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   dartId: string (required)
  ##         : Country DART ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_579998 = newJObject()
  var query_579999 = newJObject()
  add(query_579999, "key", newJString(key))
  add(query_579999, "prettyPrint", newJBool(prettyPrint))
  add(query_579999, "oauth_token", newJString(oauthToken))
  add(path_579998, "profileId", newJString(profileId))
  add(query_579999, "alt", newJString(alt))
  add(query_579999, "userIp", newJString(userIp))
  add(query_579999, "quotaUser", newJString(quotaUser))
  add(path_579998, "dartId", newJString(dartId))
  add(query_579999, "fields", newJString(fields))
  result = call_579997.call(path_579998, query_579999, nil, nil, nil)

var dfareportingCountriesGet* = Call_DfareportingCountriesGet_579984(
    name: "dfareportingCountriesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/countries/{dartId}",
    validator: validate_DfareportingCountriesGet_579985,
    base: "/dfareporting/v3.2", url: url_DfareportingCountriesGet_579986,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeAssetsInsert_580000 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeAssetsInsert_580002(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "advertiserId" in path, "`advertiserId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeAssets/"),
               (kind: VariableSegment, value: "advertiserId"),
               (kind: ConstantSegment, value: "/creativeAssets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeAssetsInsert_580001(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative asset.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   advertiserId: JString (required)
  ##               : Advertiser ID of this creative. This is a required field.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580003 = path.getOrDefault("profileId")
  valid_580003 = validateParameter(valid_580003, JString, required = true,
                                 default = nil)
  if valid_580003 != nil:
    section.add "profileId", valid_580003
  var valid_580004 = path.getOrDefault("advertiserId")
  valid_580004 = validateParameter(valid_580004, JString, required = true,
                                 default = nil)
  if valid_580004 != nil:
    section.add "advertiserId", valid_580004
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580005 = query.getOrDefault("key")
  valid_580005 = validateParameter(valid_580005, JString, required = false,
                                 default = nil)
  if valid_580005 != nil:
    section.add "key", valid_580005
  var valid_580006 = query.getOrDefault("prettyPrint")
  valid_580006 = validateParameter(valid_580006, JBool, required = false,
                                 default = newJBool(true))
  if valid_580006 != nil:
    section.add "prettyPrint", valid_580006
  var valid_580007 = query.getOrDefault("oauth_token")
  valid_580007 = validateParameter(valid_580007, JString, required = false,
                                 default = nil)
  if valid_580007 != nil:
    section.add "oauth_token", valid_580007
  var valid_580008 = query.getOrDefault("alt")
  valid_580008 = validateParameter(valid_580008, JString, required = false,
                                 default = newJString("json"))
  if valid_580008 != nil:
    section.add "alt", valid_580008
  var valid_580009 = query.getOrDefault("userIp")
  valid_580009 = validateParameter(valid_580009, JString, required = false,
                                 default = nil)
  if valid_580009 != nil:
    section.add "userIp", valid_580009
  var valid_580010 = query.getOrDefault("quotaUser")
  valid_580010 = validateParameter(valid_580010, JString, required = false,
                                 default = nil)
  if valid_580010 != nil:
    section.add "quotaUser", valid_580010
  var valid_580011 = query.getOrDefault("fields")
  valid_580011 = validateParameter(valid_580011, JString, required = false,
                                 default = nil)
  if valid_580011 != nil:
    section.add "fields", valid_580011
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580013: Call_DfareportingCreativeAssetsInsert_580000;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new creative asset.
  ## 
  let valid = call_580013.validator(path, query, header, formData, body)
  let scheme = call_580013.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580013.url(scheme.get, call_580013.host, call_580013.base,
                         call_580013.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580013, url, valid)

proc call*(call_580014: Call_DfareportingCreativeAssetsInsert_580000;
          profileId: string; advertiserId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; body: JsonNode = nil;
          fields: string = ""): Recallable =
  ## dfareportingCreativeAssetsInsert
  ## Inserts a new creative asset.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   advertiserId: string (required)
  ##               : Advertiser ID of this creative. This is a required field.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580015 = newJObject()
  var query_580016 = newJObject()
  var body_580017 = newJObject()
  add(query_580016, "key", newJString(key))
  add(query_580016, "prettyPrint", newJBool(prettyPrint))
  add(query_580016, "oauth_token", newJString(oauthToken))
  add(path_580015, "profileId", newJString(profileId))
  add(query_580016, "alt", newJString(alt))
  add(query_580016, "userIp", newJString(userIp))
  add(query_580016, "quotaUser", newJString(quotaUser))
  add(path_580015, "advertiserId", newJString(advertiserId))
  if body != nil:
    body_580017 = body
  add(query_580016, "fields", newJString(fields))
  result = call_580014.call(path_580015, query_580016, nil, nil, body_580017)

var dfareportingCreativeAssetsInsert* = Call_DfareportingCreativeAssetsInsert_580000(
    name: "dfareportingCreativeAssetsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeAssets/{advertiserId}/creativeAssets",
    validator: validate_DfareportingCreativeAssetsInsert_580001,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeAssetsInsert_580002,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsUpdate_580040 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldsUpdate_580042(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsUpdate_580041(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative field.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580043 = path.getOrDefault("profileId")
  valid_580043 = validateParameter(valid_580043, JString, required = true,
                                 default = nil)
  if valid_580043 != nil:
    section.add "profileId", valid_580043
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580044 = query.getOrDefault("key")
  valid_580044 = validateParameter(valid_580044, JString, required = false,
                                 default = nil)
  if valid_580044 != nil:
    section.add "key", valid_580044
  var valid_580045 = query.getOrDefault("prettyPrint")
  valid_580045 = validateParameter(valid_580045, JBool, required = false,
                                 default = newJBool(true))
  if valid_580045 != nil:
    section.add "prettyPrint", valid_580045
  var valid_580046 = query.getOrDefault("oauth_token")
  valid_580046 = validateParameter(valid_580046, JString, required = false,
                                 default = nil)
  if valid_580046 != nil:
    section.add "oauth_token", valid_580046
  var valid_580047 = query.getOrDefault("alt")
  valid_580047 = validateParameter(valid_580047, JString, required = false,
                                 default = newJString("json"))
  if valid_580047 != nil:
    section.add "alt", valid_580047
  var valid_580048 = query.getOrDefault("userIp")
  valid_580048 = validateParameter(valid_580048, JString, required = false,
                                 default = nil)
  if valid_580048 != nil:
    section.add "userIp", valid_580048
  var valid_580049 = query.getOrDefault("quotaUser")
  valid_580049 = validateParameter(valid_580049, JString, required = false,
                                 default = nil)
  if valid_580049 != nil:
    section.add "quotaUser", valid_580049
  var valid_580050 = query.getOrDefault("fields")
  valid_580050 = validateParameter(valid_580050, JString, required = false,
                                 default = nil)
  if valid_580050 != nil:
    section.add "fields", valid_580050
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580052: Call_DfareportingCreativeFieldsUpdate_580040;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative field.
  ## 
  let valid = call_580052.validator(path, query, header, formData, body)
  let scheme = call_580052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580052.url(scheme.get, call_580052.host, call_580052.base,
                         call_580052.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580052, url, valid)

proc call*(call_580053: Call_DfareportingCreativeFieldsUpdate_580040;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCreativeFieldsUpdate
  ## Updates an existing creative field.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580054 = newJObject()
  var query_580055 = newJObject()
  var body_580056 = newJObject()
  add(query_580055, "key", newJString(key))
  add(query_580055, "prettyPrint", newJBool(prettyPrint))
  add(query_580055, "oauth_token", newJString(oauthToken))
  add(path_580054, "profileId", newJString(profileId))
  add(query_580055, "alt", newJString(alt))
  add(query_580055, "userIp", newJString(userIp))
  add(query_580055, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580056 = body
  add(query_580055, "fields", newJString(fields))
  result = call_580053.call(path_580054, query_580055, nil, nil, body_580056)

var dfareportingCreativeFieldsUpdate* = Call_DfareportingCreativeFieldsUpdate_580040(
    name: "dfareportingCreativeFieldsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields",
    validator: validate_DfareportingCreativeFieldsUpdate_580041,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsUpdate_580042,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsInsert_580057 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldsInsert_580059(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsInsert_580058(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative field.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580060 = path.getOrDefault("profileId")
  valid_580060 = validateParameter(valid_580060, JString, required = true,
                                 default = nil)
  if valid_580060 != nil:
    section.add "profileId", valid_580060
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580061 = query.getOrDefault("key")
  valid_580061 = validateParameter(valid_580061, JString, required = false,
                                 default = nil)
  if valid_580061 != nil:
    section.add "key", valid_580061
  var valid_580062 = query.getOrDefault("prettyPrint")
  valid_580062 = validateParameter(valid_580062, JBool, required = false,
                                 default = newJBool(true))
  if valid_580062 != nil:
    section.add "prettyPrint", valid_580062
  var valid_580063 = query.getOrDefault("oauth_token")
  valid_580063 = validateParameter(valid_580063, JString, required = false,
                                 default = nil)
  if valid_580063 != nil:
    section.add "oauth_token", valid_580063
  var valid_580064 = query.getOrDefault("alt")
  valid_580064 = validateParameter(valid_580064, JString, required = false,
                                 default = newJString("json"))
  if valid_580064 != nil:
    section.add "alt", valid_580064
  var valid_580065 = query.getOrDefault("userIp")
  valid_580065 = validateParameter(valid_580065, JString, required = false,
                                 default = nil)
  if valid_580065 != nil:
    section.add "userIp", valid_580065
  var valid_580066 = query.getOrDefault("quotaUser")
  valid_580066 = validateParameter(valid_580066, JString, required = false,
                                 default = nil)
  if valid_580066 != nil:
    section.add "quotaUser", valid_580066
  var valid_580067 = query.getOrDefault("fields")
  valid_580067 = validateParameter(valid_580067, JString, required = false,
                                 default = nil)
  if valid_580067 != nil:
    section.add "fields", valid_580067
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580069: Call_DfareportingCreativeFieldsInsert_580057;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new creative field.
  ## 
  let valid = call_580069.validator(path, query, header, formData, body)
  let scheme = call_580069.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580069.url(scheme.get, call_580069.host, call_580069.base,
                         call_580069.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580069, url, valid)

proc call*(call_580070: Call_DfareportingCreativeFieldsInsert_580057;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCreativeFieldsInsert
  ## Inserts a new creative field.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580071 = newJObject()
  var query_580072 = newJObject()
  var body_580073 = newJObject()
  add(query_580072, "key", newJString(key))
  add(query_580072, "prettyPrint", newJBool(prettyPrint))
  add(query_580072, "oauth_token", newJString(oauthToken))
  add(path_580071, "profileId", newJString(profileId))
  add(query_580072, "alt", newJString(alt))
  add(query_580072, "userIp", newJString(userIp))
  add(query_580072, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580073 = body
  add(query_580072, "fields", newJString(fields))
  result = call_580070.call(path_580071, query_580072, nil, nil, body_580073)

var dfareportingCreativeFieldsInsert* = Call_DfareportingCreativeFieldsInsert_580057(
    name: "dfareportingCreativeFieldsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields",
    validator: validate_DfareportingCreativeFieldsInsert_580058,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsInsert_580059,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsList_580018 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldsList_580020(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsList_580019(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of creative fields, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580021 = path.getOrDefault("profileId")
  valid_580021 = validateParameter(valid_580021, JString, required = true,
                                 default = nil)
  if valid_580021 != nil:
    section.add "profileId", valid_580021
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   advertiserIds: JArray
  ##                : Select only creative fields that belong to these advertisers.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for creative fields by name or ID. Wildcards (*) are allowed. For example, "creativefield*2015" will return creative fields with names like "creativefield June 2015", "creativefield April 2015", or simply "creativefield 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativefield" will match creative fields with the name "my creativefield", "creativefield 2015", or simply "creativefield".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only creative fields with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_580022 = query.getOrDefault("key")
  valid_580022 = validateParameter(valid_580022, JString, required = false,
                                 default = nil)
  if valid_580022 != nil:
    section.add "key", valid_580022
  var valid_580023 = query.getOrDefault("prettyPrint")
  valid_580023 = validateParameter(valid_580023, JBool, required = false,
                                 default = newJBool(true))
  if valid_580023 != nil:
    section.add "prettyPrint", valid_580023
  var valid_580024 = query.getOrDefault("oauth_token")
  valid_580024 = validateParameter(valid_580024, JString, required = false,
                                 default = nil)
  if valid_580024 != nil:
    section.add "oauth_token", valid_580024
  var valid_580025 = query.getOrDefault("sortField")
  valid_580025 = validateParameter(valid_580025, JString, required = false,
                                 default = newJString("ID"))
  if valid_580025 != nil:
    section.add "sortField", valid_580025
  var valid_580026 = query.getOrDefault("advertiserIds")
  valid_580026 = validateParameter(valid_580026, JArray, required = false,
                                 default = nil)
  if valid_580026 != nil:
    section.add "advertiserIds", valid_580026
  var valid_580027 = query.getOrDefault("alt")
  valid_580027 = validateParameter(valid_580027, JString, required = false,
                                 default = newJString("json"))
  if valid_580027 != nil:
    section.add "alt", valid_580027
  var valid_580028 = query.getOrDefault("userIp")
  valid_580028 = validateParameter(valid_580028, JString, required = false,
                                 default = nil)
  if valid_580028 != nil:
    section.add "userIp", valid_580028
  var valid_580029 = query.getOrDefault("quotaUser")
  valid_580029 = validateParameter(valid_580029, JString, required = false,
                                 default = nil)
  if valid_580029 != nil:
    section.add "quotaUser", valid_580029
  var valid_580030 = query.getOrDefault("pageToken")
  valid_580030 = validateParameter(valid_580030, JString, required = false,
                                 default = nil)
  if valid_580030 != nil:
    section.add "pageToken", valid_580030
  var valid_580031 = query.getOrDefault("searchString")
  valid_580031 = validateParameter(valid_580031, JString, required = false,
                                 default = nil)
  if valid_580031 != nil:
    section.add "searchString", valid_580031
  var valid_580032 = query.getOrDefault("sortOrder")
  valid_580032 = validateParameter(valid_580032, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580032 != nil:
    section.add "sortOrder", valid_580032
  var valid_580033 = query.getOrDefault("ids")
  valid_580033 = validateParameter(valid_580033, JArray, required = false,
                                 default = nil)
  if valid_580033 != nil:
    section.add "ids", valid_580033
  var valid_580034 = query.getOrDefault("fields")
  valid_580034 = validateParameter(valid_580034, JString, required = false,
                                 default = nil)
  if valid_580034 != nil:
    section.add "fields", valid_580034
  var valid_580035 = query.getOrDefault("maxResults")
  valid_580035 = validateParameter(valid_580035, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580035 != nil:
    section.add "maxResults", valid_580035
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580036: Call_DfareportingCreativeFieldsList_580018; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of creative fields, possibly filtered. This method supports paging.
  ## 
  let valid = call_580036.validator(path, query, header, formData, body)
  let scheme = call_580036.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580036.url(scheme.get, call_580036.host, call_580036.base,
                         call_580036.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580036, url, valid)

proc call*(call_580037: Call_DfareportingCreativeFieldsList_580018;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; sortField: string = "ID";
          advertiserIds: JsonNode = nil; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; pageToken: string = ""; searchString: string = "";
          sortOrder: string = "ASCENDING"; ids: JsonNode = nil; fields: string = "";
          maxResults: int = 1000): Recallable =
  ## dfareportingCreativeFieldsList
  ## Retrieves a list of creative fields, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   advertiserIds: JArray
  ##                : Select only creative fields that belong to these advertisers.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for creative fields by name or ID. Wildcards (*) are allowed. For example, "creativefield*2015" will return creative fields with names like "creativefield June 2015", "creativefield April 2015", or simply "creativefield 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativefield" will match creative fields with the name "my creativefield", "creativefield 2015", or simply "creativefield".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only creative fields with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_580038 = newJObject()
  var query_580039 = newJObject()
  add(query_580039, "key", newJString(key))
  add(query_580039, "prettyPrint", newJBool(prettyPrint))
  add(query_580039, "oauth_token", newJString(oauthToken))
  add(path_580038, "profileId", newJString(profileId))
  add(query_580039, "sortField", newJString(sortField))
  if advertiserIds != nil:
    query_580039.add "advertiserIds", advertiserIds
  add(query_580039, "alt", newJString(alt))
  add(query_580039, "userIp", newJString(userIp))
  add(query_580039, "quotaUser", newJString(quotaUser))
  add(query_580039, "pageToken", newJString(pageToken))
  add(query_580039, "searchString", newJString(searchString))
  add(query_580039, "sortOrder", newJString(sortOrder))
  if ids != nil:
    query_580039.add "ids", ids
  add(query_580039, "fields", newJString(fields))
  add(query_580039, "maxResults", newJInt(maxResults))
  result = call_580037.call(path_580038, query_580039, nil, nil, nil)

var dfareportingCreativeFieldsList* = Call_DfareportingCreativeFieldsList_580018(
    name: "dfareportingCreativeFieldsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields",
    validator: validate_DfareportingCreativeFieldsList_580019,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsList_580020,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsPatch_580074 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldsPatch_580076(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsPatch_580075(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative field. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580077 = path.getOrDefault("profileId")
  valid_580077 = validateParameter(valid_580077, JString, required = true,
                                 default = nil)
  if valid_580077 != nil:
    section.add "profileId", valid_580077
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Creative Field ID
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580078 = query.getOrDefault("key")
  valid_580078 = validateParameter(valid_580078, JString, required = false,
                                 default = nil)
  if valid_580078 != nil:
    section.add "key", valid_580078
  var valid_580079 = query.getOrDefault("prettyPrint")
  valid_580079 = validateParameter(valid_580079, JBool, required = false,
                                 default = newJBool(true))
  if valid_580079 != nil:
    section.add "prettyPrint", valid_580079
  var valid_580080 = query.getOrDefault("oauth_token")
  valid_580080 = validateParameter(valid_580080, JString, required = false,
                                 default = nil)
  if valid_580080 != nil:
    section.add "oauth_token", valid_580080
  var valid_580081 = query.getOrDefault("alt")
  valid_580081 = validateParameter(valid_580081, JString, required = false,
                                 default = newJString("json"))
  if valid_580081 != nil:
    section.add "alt", valid_580081
  var valid_580082 = query.getOrDefault("userIp")
  valid_580082 = validateParameter(valid_580082, JString, required = false,
                                 default = nil)
  if valid_580082 != nil:
    section.add "userIp", valid_580082
  var valid_580083 = query.getOrDefault("quotaUser")
  valid_580083 = validateParameter(valid_580083, JString, required = false,
                                 default = nil)
  if valid_580083 != nil:
    section.add "quotaUser", valid_580083
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580084 = query.getOrDefault("id")
  valid_580084 = validateParameter(valid_580084, JString, required = true,
                                 default = nil)
  if valid_580084 != nil:
    section.add "id", valid_580084
  var valid_580085 = query.getOrDefault("fields")
  valid_580085 = validateParameter(valid_580085, JString, required = false,
                                 default = nil)
  if valid_580085 != nil:
    section.add "fields", valid_580085
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580087: Call_DfareportingCreativeFieldsPatch_580074;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative field. This method supports patch semantics.
  ## 
  let valid = call_580087.validator(path, query, header, formData, body)
  let scheme = call_580087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580087.url(scheme.get, call_580087.host, call_580087.base,
                         call_580087.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580087, url, valid)

proc call*(call_580088: Call_DfareportingCreativeFieldsPatch_580074;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCreativeFieldsPatch
  ## Updates an existing creative field. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Creative Field ID
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580089 = newJObject()
  var query_580090 = newJObject()
  var body_580091 = newJObject()
  add(query_580090, "key", newJString(key))
  add(query_580090, "prettyPrint", newJBool(prettyPrint))
  add(query_580090, "oauth_token", newJString(oauthToken))
  add(path_580089, "profileId", newJString(profileId))
  add(query_580090, "alt", newJString(alt))
  add(query_580090, "userIp", newJString(userIp))
  add(query_580090, "quotaUser", newJString(quotaUser))
  add(query_580090, "id", newJString(id))
  if body != nil:
    body_580091 = body
  add(query_580090, "fields", newJString(fields))
  result = call_580088.call(path_580089, query_580090, nil, nil, body_580091)

var dfareportingCreativeFieldsPatch* = Call_DfareportingCreativeFieldsPatch_580074(
    name: "dfareportingCreativeFieldsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields",
    validator: validate_DfareportingCreativeFieldsPatch_580075,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsPatch_580076,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesUpdate_580114 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldValuesUpdate_580116(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesUpdate_580115(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative field value.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580117 = path.getOrDefault("profileId")
  valid_580117 = validateParameter(valid_580117, JString, required = true,
                                 default = nil)
  if valid_580117 != nil:
    section.add "profileId", valid_580117
  var valid_580118 = path.getOrDefault("creativeFieldId")
  valid_580118 = validateParameter(valid_580118, JString, required = true,
                                 default = nil)
  if valid_580118 != nil:
    section.add "creativeFieldId", valid_580118
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580119 = query.getOrDefault("key")
  valid_580119 = validateParameter(valid_580119, JString, required = false,
                                 default = nil)
  if valid_580119 != nil:
    section.add "key", valid_580119
  var valid_580120 = query.getOrDefault("prettyPrint")
  valid_580120 = validateParameter(valid_580120, JBool, required = false,
                                 default = newJBool(true))
  if valid_580120 != nil:
    section.add "prettyPrint", valid_580120
  var valid_580121 = query.getOrDefault("oauth_token")
  valid_580121 = validateParameter(valid_580121, JString, required = false,
                                 default = nil)
  if valid_580121 != nil:
    section.add "oauth_token", valid_580121
  var valid_580122 = query.getOrDefault("alt")
  valid_580122 = validateParameter(valid_580122, JString, required = false,
                                 default = newJString("json"))
  if valid_580122 != nil:
    section.add "alt", valid_580122
  var valid_580123 = query.getOrDefault("userIp")
  valid_580123 = validateParameter(valid_580123, JString, required = false,
                                 default = nil)
  if valid_580123 != nil:
    section.add "userIp", valid_580123
  var valid_580124 = query.getOrDefault("quotaUser")
  valid_580124 = validateParameter(valid_580124, JString, required = false,
                                 default = nil)
  if valid_580124 != nil:
    section.add "quotaUser", valid_580124
  var valid_580125 = query.getOrDefault("fields")
  valid_580125 = validateParameter(valid_580125, JString, required = false,
                                 default = nil)
  if valid_580125 != nil:
    section.add "fields", valid_580125
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580127: Call_DfareportingCreativeFieldValuesUpdate_580114;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative field value.
  ## 
  let valid = call_580127.validator(path, query, header, formData, body)
  let scheme = call_580127.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580127.url(scheme.get, call_580127.host, call_580127.base,
                         call_580127.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580127, url, valid)

proc call*(call_580128: Call_DfareportingCreativeFieldValuesUpdate_580114;
          profileId: string; creativeFieldId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; body: JsonNode = nil;
          fields: string = ""): Recallable =
  ## dfareportingCreativeFieldValuesUpdate
  ## Updates an existing creative field value.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580129 = newJObject()
  var query_580130 = newJObject()
  var body_580131 = newJObject()
  add(query_580130, "key", newJString(key))
  add(query_580130, "prettyPrint", newJBool(prettyPrint))
  add(query_580130, "oauth_token", newJString(oauthToken))
  add(path_580129, "profileId", newJString(profileId))
  add(query_580130, "alt", newJString(alt))
  add(query_580130, "userIp", newJString(userIp))
  add(query_580130, "quotaUser", newJString(quotaUser))
  add(path_580129, "creativeFieldId", newJString(creativeFieldId))
  if body != nil:
    body_580131 = body
  add(query_580130, "fields", newJString(fields))
  result = call_580128.call(path_580129, query_580130, nil, nil, body_580131)

var dfareportingCreativeFieldValuesUpdate* = Call_DfareportingCreativeFieldValuesUpdate_580114(
    name: "dfareportingCreativeFieldValuesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
    validator: validate_DfareportingCreativeFieldValuesUpdate_580115,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesUpdate_580116,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesInsert_580132 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldValuesInsert_580134(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesInsert_580133(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative field value.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580135 = path.getOrDefault("profileId")
  valid_580135 = validateParameter(valid_580135, JString, required = true,
                                 default = nil)
  if valid_580135 != nil:
    section.add "profileId", valid_580135
  var valid_580136 = path.getOrDefault("creativeFieldId")
  valid_580136 = validateParameter(valid_580136, JString, required = true,
                                 default = nil)
  if valid_580136 != nil:
    section.add "creativeFieldId", valid_580136
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580137 = query.getOrDefault("key")
  valid_580137 = validateParameter(valid_580137, JString, required = false,
                                 default = nil)
  if valid_580137 != nil:
    section.add "key", valid_580137
  var valid_580138 = query.getOrDefault("prettyPrint")
  valid_580138 = validateParameter(valid_580138, JBool, required = false,
                                 default = newJBool(true))
  if valid_580138 != nil:
    section.add "prettyPrint", valid_580138
  var valid_580139 = query.getOrDefault("oauth_token")
  valid_580139 = validateParameter(valid_580139, JString, required = false,
                                 default = nil)
  if valid_580139 != nil:
    section.add "oauth_token", valid_580139
  var valid_580140 = query.getOrDefault("alt")
  valid_580140 = validateParameter(valid_580140, JString, required = false,
                                 default = newJString("json"))
  if valid_580140 != nil:
    section.add "alt", valid_580140
  var valid_580141 = query.getOrDefault("userIp")
  valid_580141 = validateParameter(valid_580141, JString, required = false,
                                 default = nil)
  if valid_580141 != nil:
    section.add "userIp", valid_580141
  var valid_580142 = query.getOrDefault("quotaUser")
  valid_580142 = validateParameter(valid_580142, JString, required = false,
                                 default = nil)
  if valid_580142 != nil:
    section.add "quotaUser", valid_580142
  var valid_580143 = query.getOrDefault("fields")
  valid_580143 = validateParameter(valid_580143, JString, required = false,
                                 default = nil)
  if valid_580143 != nil:
    section.add "fields", valid_580143
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580145: Call_DfareportingCreativeFieldValuesInsert_580132;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new creative field value.
  ## 
  let valid = call_580145.validator(path, query, header, formData, body)
  let scheme = call_580145.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580145.url(scheme.get, call_580145.host, call_580145.base,
                         call_580145.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580145, url, valid)

proc call*(call_580146: Call_DfareportingCreativeFieldValuesInsert_580132;
          profileId: string; creativeFieldId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; body: JsonNode = nil;
          fields: string = ""): Recallable =
  ## dfareportingCreativeFieldValuesInsert
  ## Inserts a new creative field value.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580147 = newJObject()
  var query_580148 = newJObject()
  var body_580149 = newJObject()
  add(query_580148, "key", newJString(key))
  add(query_580148, "prettyPrint", newJBool(prettyPrint))
  add(query_580148, "oauth_token", newJString(oauthToken))
  add(path_580147, "profileId", newJString(profileId))
  add(query_580148, "alt", newJString(alt))
  add(query_580148, "userIp", newJString(userIp))
  add(query_580148, "quotaUser", newJString(quotaUser))
  add(path_580147, "creativeFieldId", newJString(creativeFieldId))
  if body != nil:
    body_580149 = body
  add(query_580148, "fields", newJString(fields))
  result = call_580146.call(path_580147, query_580148, nil, nil, body_580149)

var dfareportingCreativeFieldValuesInsert* = Call_DfareportingCreativeFieldValuesInsert_580132(
    name: "dfareportingCreativeFieldValuesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
    validator: validate_DfareportingCreativeFieldValuesInsert_580133,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesInsert_580134,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesList_580092 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldValuesList_580094(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesList_580093(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of creative field values, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580095 = path.getOrDefault("profileId")
  valid_580095 = validateParameter(valid_580095, JString, required = true,
                                 default = nil)
  if valid_580095 != nil:
    section.add "profileId", valid_580095
  var valid_580096 = path.getOrDefault("creativeFieldId")
  valid_580096 = validateParameter(valid_580096, JString, required = true,
                                 default = nil)
  if valid_580096 != nil:
    section.add "creativeFieldId", valid_580096
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for creative field values by their values. Wildcards (e.g. *) are not allowed.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only creative field values with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_580097 = query.getOrDefault("key")
  valid_580097 = validateParameter(valid_580097, JString, required = false,
                                 default = nil)
  if valid_580097 != nil:
    section.add "key", valid_580097
  var valid_580098 = query.getOrDefault("prettyPrint")
  valid_580098 = validateParameter(valid_580098, JBool, required = false,
                                 default = newJBool(true))
  if valid_580098 != nil:
    section.add "prettyPrint", valid_580098
  var valid_580099 = query.getOrDefault("oauth_token")
  valid_580099 = validateParameter(valid_580099, JString, required = false,
                                 default = nil)
  if valid_580099 != nil:
    section.add "oauth_token", valid_580099
  var valid_580100 = query.getOrDefault("sortField")
  valid_580100 = validateParameter(valid_580100, JString, required = false,
                                 default = newJString("ID"))
  if valid_580100 != nil:
    section.add "sortField", valid_580100
  var valid_580101 = query.getOrDefault("alt")
  valid_580101 = validateParameter(valid_580101, JString, required = false,
                                 default = newJString("json"))
  if valid_580101 != nil:
    section.add "alt", valid_580101
  var valid_580102 = query.getOrDefault("userIp")
  valid_580102 = validateParameter(valid_580102, JString, required = false,
                                 default = nil)
  if valid_580102 != nil:
    section.add "userIp", valid_580102
  var valid_580103 = query.getOrDefault("quotaUser")
  valid_580103 = validateParameter(valid_580103, JString, required = false,
                                 default = nil)
  if valid_580103 != nil:
    section.add "quotaUser", valid_580103
  var valid_580104 = query.getOrDefault("pageToken")
  valid_580104 = validateParameter(valid_580104, JString, required = false,
                                 default = nil)
  if valid_580104 != nil:
    section.add "pageToken", valid_580104
  var valid_580105 = query.getOrDefault("searchString")
  valid_580105 = validateParameter(valid_580105, JString, required = false,
                                 default = nil)
  if valid_580105 != nil:
    section.add "searchString", valid_580105
  var valid_580106 = query.getOrDefault("sortOrder")
  valid_580106 = validateParameter(valid_580106, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580106 != nil:
    section.add "sortOrder", valid_580106
  var valid_580107 = query.getOrDefault("ids")
  valid_580107 = validateParameter(valid_580107, JArray, required = false,
                                 default = nil)
  if valid_580107 != nil:
    section.add "ids", valid_580107
  var valid_580108 = query.getOrDefault("fields")
  valid_580108 = validateParameter(valid_580108, JString, required = false,
                                 default = nil)
  if valid_580108 != nil:
    section.add "fields", valid_580108
  var valid_580109 = query.getOrDefault("maxResults")
  valid_580109 = validateParameter(valid_580109, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580109 != nil:
    section.add "maxResults", valid_580109
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580110: Call_DfareportingCreativeFieldValuesList_580092;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of creative field values, possibly filtered. This method supports paging.
  ## 
  let valid = call_580110.validator(path, query, header, formData, body)
  let scheme = call_580110.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580110.url(scheme.get, call_580110.host, call_580110.base,
                         call_580110.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580110, url, valid)

proc call*(call_580111: Call_DfareportingCreativeFieldValuesList_580092;
          profileId: string; creativeFieldId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; sortField: string = "ID";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          pageToken: string = ""; searchString: string = "";
          sortOrder: string = "ASCENDING"; ids: JsonNode = nil; fields: string = "";
          maxResults: int = 1000): Recallable =
  ## dfareportingCreativeFieldValuesList
  ## Retrieves a list of creative field values, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for creative field values by their values. Wildcards (e.g. *) are not allowed.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only creative field values with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_580112 = newJObject()
  var query_580113 = newJObject()
  add(query_580113, "key", newJString(key))
  add(query_580113, "prettyPrint", newJBool(prettyPrint))
  add(query_580113, "oauth_token", newJString(oauthToken))
  add(path_580112, "profileId", newJString(profileId))
  add(query_580113, "sortField", newJString(sortField))
  add(query_580113, "alt", newJString(alt))
  add(query_580113, "userIp", newJString(userIp))
  add(query_580113, "quotaUser", newJString(quotaUser))
  add(path_580112, "creativeFieldId", newJString(creativeFieldId))
  add(query_580113, "pageToken", newJString(pageToken))
  add(query_580113, "searchString", newJString(searchString))
  add(query_580113, "sortOrder", newJString(sortOrder))
  if ids != nil:
    query_580113.add "ids", ids
  add(query_580113, "fields", newJString(fields))
  add(query_580113, "maxResults", newJInt(maxResults))
  result = call_580111.call(path_580112, query_580113, nil, nil, nil)

var dfareportingCreativeFieldValuesList* = Call_DfareportingCreativeFieldValuesList_580092(
    name: "dfareportingCreativeFieldValuesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
    validator: validate_DfareportingCreativeFieldValuesList_580093,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesList_580094,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesPatch_580150 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldValuesPatch_580152(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesPatch_580151(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative field value. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580153 = path.getOrDefault("profileId")
  valid_580153 = validateParameter(valid_580153, JString, required = true,
                                 default = nil)
  if valid_580153 != nil:
    section.add "profileId", valid_580153
  var valid_580154 = path.getOrDefault("creativeFieldId")
  valid_580154 = validateParameter(valid_580154, JString, required = true,
                                 default = nil)
  if valid_580154 != nil:
    section.add "creativeFieldId", valid_580154
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Creative Field Value ID
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580155 = query.getOrDefault("key")
  valid_580155 = validateParameter(valid_580155, JString, required = false,
                                 default = nil)
  if valid_580155 != nil:
    section.add "key", valid_580155
  var valid_580156 = query.getOrDefault("prettyPrint")
  valid_580156 = validateParameter(valid_580156, JBool, required = false,
                                 default = newJBool(true))
  if valid_580156 != nil:
    section.add "prettyPrint", valid_580156
  var valid_580157 = query.getOrDefault("oauth_token")
  valid_580157 = validateParameter(valid_580157, JString, required = false,
                                 default = nil)
  if valid_580157 != nil:
    section.add "oauth_token", valid_580157
  var valid_580158 = query.getOrDefault("alt")
  valid_580158 = validateParameter(valid_580158, JString, required = false,
                                 default = newJString("json"))
  if valid_580158 != nil:
    section.add "alt", valid_580158
  var valid_580159 = query.getOrDefault("userIp")
  valid_580159 = validateParameter(valid_580159, JString, required = false,
                                 default = nil)
  if valid_580159 != nil:
    section.add "userIp", valid_580159
  var valid_580160 = query.getOrDefault("quotaUser")
  valid_580160 = validateParameter(valid_580160, JString, required = false,
                                 default = nil)
  if valid_580160 != nil:
    section.add "quotaUser", valid_580160
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580161 = query.getOrDefault("id")
  valid_580161 = validateParameter(valid_580161, JString, required = true,
                                 default = nil)
  if valid_580161 != nil:
    section.add "id", valid_580161
  var valid_580162 = query.getOrDefault("fields")
  valid_580162 = validateParameter(valid_580162, JString, required = false,
                                 default = nil)
  if valid_580162 != nil:
    section.add "fields", valid_580162
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580164: Call_DfareportingCreativeFieldValuesPatch_580150;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative field value. This method supports patch semantics.
  ## 
  let valid = call_580164.validator(path, query, header, formData, body)
  let scheme = call_580164.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580164.url(scheme.get, call_580164.host, call_580164.base,
                         call_580164.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580164, url, valid)

proc call*(call_580165: Call_DfareportingCreativeFieldValuesPatch_580150;
          profileId: string; creativeFieldId: string; id: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; body: JsonNode = nil;
          fields: string = ""): Recallable =
  ## dfareportingCreativeFieldValuesPatch
  ## Updates an existing creative field value. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   id: string (required)
  ##     : Creative Field Value ID
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580166 = newJObject()
  var query_580167 = newJObject()
  var body_580168 = newJObject()
  add(query_580167, "key", newJString(key))
  add(query_580167, "prettyPrint", newJBool(prettyPrint))
  add(query_580167, "oauth_token", newJString(oauthToken))
  add(path_580166, "profileId", newJString(profileId))
  add(query_580167, "alt", newJString(alt))
  add(query_580167, "userIp", newJString(userIp))
  add(query_580167, "quotaUser", newJString(quotaUser))
  add(path_580166, "creativeFieldId", newJString(creativeFieldId))
  add(query_580167, "id", newJString(id))
  if body != nil:
    body_580168 = body
  add(query_580167, "fields", newJString(fields))
  result = call_580165.call(path_580166, query_580167, nil, nil, body_580168)

var dfareportingCreativeFieldValuesPatch* = Call_DfareportingCreativeFieldValuesPatch_580150(
    name: "dfareportingCreativeFieldValuesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
    validator: validate_DfareportingCreativeFieldValuesPatch_580151,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesPatch_580152,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesGet_580169 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldValuesGet_580171(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesGet_580170(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one creative field value by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative Field Value ID
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580172 = path.getOrDefault("profileId")
  valid_580172 = validateParameter(valid_580172, JString, required = true,
                                 default = nil)
  if valid_580172 != nil:
    section.add "profileId", valid_580172
  var valid_580173 = path.getOrDefault("id")
  valid_580173 = validateParameter(valid_580173, JString, required = true,
                                 default = nil)
  if valid_580173 != nil:
    section.add "id", valid_580173
  var valid_580174 = path.getOrDefault("creativeFieldId")
  valid_580174 = validateParameter(valid_580174, JString, required = true,
                                 default = nil)
  if valid_580174 != nil:
    section.add "creativeFieldId", valid_580174
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580175 = query.getOrDefault("key")
  valid_580175 = validateParameter(valid_580175, JString, required = false,
                                 default = nil)
  if valid_580175 != nil:
    section.add "key", valid_580175
  var valid_580176 = query.getOrDefault("prettyPrint")
  valid_580176 = validateParameter(valid_580176, JBool, required = false,
                                 default = newJBool(true))
  if valid_580176 != nil:
    section.add "prettyPrint", valid_580176
  var valid_580177 = query.getOrDefault("oauth_token")
  valid_580177 = validateParameter(valid_580177, JString, required = false,
                                 default = nil)
  if valid_580177 != nil:
    section.add "oauth_token", valid_580177
  var valid_580178 = query.getOrDefault("alt")
  valid_580178 = validateParameter(valid_580178, JString, required = false,
                                 default = newJString("json"))
  if valid_580178 != nil:
    section.add "alt", valid_580178
  var valid_580179 = query.getOrDefault("userIp")
  valid_580179 = validateParameter(valid_580179, JString, required = false,
                                 default = nil)
  if valid_580179 != nil:
    section.add "userIp", valid_580179
  var valid_580180 = query.getOrDefault("quotaUser")
  valid_580180 = validateParameter(valid_580180, JString, required = false,
                                 default = nil)
  if valid_580180 != nil:
    section.add "quotaUser", valid_580180
  var valid_580181 = query.getOrDefault("fields")
  valid_580181 = validateParameter(valid_580181, JString, required = false,
                                 default = nil)
  if valid_580181 != nil:
    section.add "fields", valid_580181
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580182: Call_DfareportingCreativeFieldValuesGet_580169;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one creative field value by ID.
  ## 
  let valid = call_580182.validator(path, query, header, formData, body)
  let scheme = call_580182.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580182.url(scheme.get, call_580182.host, call_580182.base,
                         call_580182.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580182, url, valid)

proc call*(call_580183: Call_DfareportingCreativeFieldValuesGet_580169;
          profileId: string; id: string; creativeFieldId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingCreativeFieldValuesGet
  ## Gets one creative field value by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Creative Field Value ID
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580184 = newJObject()
  var query_580185 = newJObject()
  add(query_580185, "key", newJString(key))
  add(query_580185, "prettyPrint", newJBool(prettyPrint))
  add(query_580185, "oauth_token", newJString(oauthToken))
  add(path_580184, "profileId", newJString(profileId))
  add(path_580184, "id", newJString(id))
  add(query_580185, "alt", newJString(alt))
  add(query_580185, "userIp", newJString(userIp))
  add(query_580185, "quotaUser", newJString(quotaUser))
  add(path_580184, "creativeFieldId", newJString(creativeFieldId))
  add(query_580185, "fields", newJString(fields))
  result = call_580183.call(path_580184, query_580185, nil, nil, nil)

var dfareportingCreativeFieldValuesGet* = Call_DfareportingCreativeFieldValuesGet_580169(
    name: "dfareportingCreativeFieldValuesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}",
    validator: validate_DfareportingCreativeFieldValuesGet_580170,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesGet_580171,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesDelete_580186 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldValuesDelete_580188(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesDelete_580187(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing creative field value.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative Field Value ID
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580189 = path.getOrDefault("profileId")
  valid_580189 = validateParameter(valid_580189, JString, required = true,
                                 default = nil)
  if valid_580189 != nil:
    section.add "profileId", valid_580189
  var valid_580190 = path.getOrDefault("id")
  valid_580190 = validateParameter(valid_580190, JString, required = true,
                                 default = nil)
  if valid_580190 != nil:
    section.add "id", valid_580190
  var valid_580191 = path.getOrDefault("creativeFieldId")
  valid_580191 = validateParameter(valid_580191, JString, required = true,
                                 default = nil)
  if valid_580191 != nil:
    section.add "creativeFieldId", valid_580191
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580192 = query.getOrDefault("key")
  valid_580192 = validateParameter(valid_580192, JString, required = false,
                                 default = nil)
  if valid_580192 != nil:
    section.add "key", valid_580192
  var valid_580193 = query.getOrDefault("prettyPrint")
  valid_580193 = validateParameter(valid_580193, JBool, required = false,
                                 default = newJBool(true))
  if valid_580193 != nil:
    section.add "prettyPrint", valid_580193
  var valid_580194 = query.getOrDefault("oauth_token")
  valid_580194 = validateParameter(valid_580194, JString, required = false,
                                 default = nil)
  if valid_580194 != nil:
    section.add "oauth_token", valid_580194
  var valid_580195 = query.getOrDefault("alt")
  valid_580195 = validateParameter(valid_580195, JString, required = false,
                                 default = newJString("json"))
  if valid_580195 != nil:
    section.add "alt", valid_580195
  var valid_580196 = query.getOrDefault("userIp")
  valid_580196 = validateParameter(valid_580196, JString, required = false,
                                 default = nil)
  if valid_580196 != nil:
    section.add "userIp", valid_580196
  var valid_580197 = query.getOrDefault("quotaUser")
  valid_580197 = validateParameter(valid_580197, JString, required = false,
                                 default = nil)
  if valid_580197 != nil:
    section.add "quotaUser", valid_580197
  var valid_580198 = query.getOrDefault("fields")
  valid_580198 = validateParameter(valid_580198, JString, required = false,
                                 default = nil)
  if valid_580198 != nil:
    section.add "fields", valid_580198
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580199: Call_DfareportingCreativeFieldValuesDelete_580186;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing creative field value.
  ## 
  let valid = call_580199.validator(path, query, header, formData, body)
  let scheme = call_580199.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580199.url(scheme.get, call_580199.host, call_580199.base,
                         call_580199.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580199, url, valid)

proc call*(call_580200: Call_DfareportingCreativeFieldValuesDelete_580186;
          profileId: string; id: string; creativeFieldId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingCreativeFieldValuesDelete
  ## Deletes an existing creative field value.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Creative Field Value ID
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580201 = newJObject()
  var query_580202 = newJObject()
  add(query_580202, "key", newJString(key))
  add(query_580202, "prettyPrint", newJBool(prettyPrint))
  add(query_580202, "oauth_token", newJString(oauthToken))
  add(path_580201, "profileId", newJString(profileId))
  add(path_580201, "id", newJString(id))
  add(query_580202, "alt", newJString(alt))
  add(query_580202, "userIp", newJString(userIp))
  add(query_580202, "quotaUser", newJString(quotaUser))
  add(path_580201, "creativeFieldId", newJString(creativeFieldId))
  add(query_580202, "fields", newJString(fields))
  result = call_580200.call(path_580201, query_580202, nil, nil, nil)

var dfareportingCreativeFieldValuesDelete* = Call_DfareportingCreativeFieldValuesDelete_580186(
    name: "dfareportingCreativeFieldValuesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}",
    validator: validate_DfareportingCreativeFieldValuesDelete_580187,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesDelete_580188,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsGet_580203 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldsGet_580205(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsGet_580204(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one creative field by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative Field ID
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580206 = path.getOrDefault("profileId")
  valid_580206 = validateParameter(valid_580206, JString, required = true,
                                 default = nil)
  if valid_580206 != nil:
    section.add "profileId", valid_580206
  var valid_580207 = path.getOrDefault("id")
  valid_580207 = validateParameter(valid_580207, JString, required = true,
                                 default = nil)
  if valid_580207 != nil:
    section.add "id", valid_580207
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580208 = query.getOrDefault("key")
  valid_580208 = validateParameter(valid_580208, JString, required = false,
                                 default = nil)
  if valid_580208 != nil:
    section.add "key", valid_580208
  var valid_580209 = query.getOrDefault("prettyPrint")
  valid_580209 = validateParameter(valid_580209, JBool, required = false,
                                 default = newJBool(true))
  if valid_580209 != nil:
    section.add "prettyPrint", valid_580209
  var valid_580210 = query.getOrDefault("oauth_token")
  valid_580210 = validateParameter(valid_580210, JString, required = false,
                                 default = nil)
  if valid_580210 != nil:
    section.add "oauth_token", valid_580210
  var valid_580211 = query.getOrDefault("alt")
  valid_580211 = validateParameter(valid_580211, JString, required = false,
                                 default = newJString("json"))
  if valid_580211 != nil:
    section.add "alt", valid_580211
  var valid_580212 = query.getOrDefault("userIp")
  valid_580212 = validateParameter(valid_580212, JString, required = false,
                                 default = nil)
  if valid_580212 != nil:
    section.add "userIp", valid_580212
  var valid_580213 = query.getOrDefault("quotaUser")
  valid_580213 = validateParameter(valid_580213, JString, required = false,
                                 default = nil)
  if valid_580213 != nil:
    section.add "quotaUser", valid_580213
  var valid_580214 = query.getOrDefault("fields")
  valid_580214 = validateParameter(valid_580214, JString, required = false,
                                 default = nil)
  if valid_580214 != nil:
    section.add "fields", valid_580214
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580215: Call_DfareportingCreativeFieldsGet_580203; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one creative field by ID.
  ## 
  let valid = call_580215.validator(path, query, header, formData, body)
  let scheme = call_580215.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580215.url(scheme.get, call_580215.host, call_580215.base,
                         call_580215.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580215, url, valid)

proc call*(call_580216: Call_DfareportingCreativeFieldsGet_580203;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingCreativeFieldsGet
  ## Gets one creative field by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Creative Field ID
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580217 = newJObject()
  var query_580218 = newJObject()
  add(query_580218, "key", newJString(key))
  add(query_580218, "prettyPrint", newJBool(prettyPrint))
  add(query_580218, "oauth_token", newJString(oauthToken))
  add(path_580217, "profileId", newJString(profileId))
  add(path_580217, "id", newJString(id))
  add(query_580218, "alt", newJString(alt))
  add(query_580218, "userIp", newJString(userIp))
  add(query_580218, "quotaUser", newJString(quotaUser))
  add(query_580218, "fields", newJString(fields))
  result = call_580216.call(path_580217, query_580218, nil, nil, nil)

var dfareportingCreativeFieldsGet* = Call_DfareportingCreativeFieldsGet_580203(
    name: "dfareportingCreativeFieldsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/creativeFields/{id}",
    validator: validate_DfareportingCreativeFieldsGet_580204,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsGet_580205,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsDelete_580219 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeFieldsDelete_580221(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsDelete_580220(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing creative field.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative Field ID
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580222 = path.getOrDefault("profileId")
  valid_580222 = validateParameter(valid_580222, JString, required = true,
                                 default = nil)
  if valid_580222 != nil:
    section.add "profileId", valid_580222
  var valid_580223 = path.getOrDefault("id")
  valid_580223 = validateParameter(valid_580223, JString, required = true,
                                 default = nil)
  if valid_580223 != nil:
    section.add "id", valid_580223
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580224 = query.getOrDefault("key")
  valid_580224 = validateParameter(valid_580224, JString, required = false,
                                 default = nil)
  if valid_580224 != nil:
    section.add "key", valid_580224
  var valid_580225 = query.getOrDefault("prettyPrint")
  valid_580225 = validateParameter(valid_580225, JBool, required = false,
                                 default = newJBool(true))
  if valid_580225 != nil:
    section.add "prettyPrint", valid_580225
  var valid_580226 = query.getOrDefault("oauth_token")
  valid_580226 = validateParameter(valid_580226, JString, required = false,
                                 default = nil)
  if valid_580226 != nil:
    section.add "oauth_token", valid_580226
  var valid_580227 = query.getOrDefault("alt")
  valid_580227 = validateParameter(valid_580227, JString, required = false,
                                 default = newJString("json"))
  if valid_580227 != nil:
    section.add "alt", valid_580227
  var valid_580228 = query.getOrDefault("userIp")
  valid_580228 = validateParameter(valid_580228, JString, required = false,
                                 default = nil)
  if valid_580228 != nil:
    section.add "userIp", valid_580228
  var valid_580229 = query.getOrDefault("quotaUser")
  valid_580229 = validateParameter(valid_580229, JString, required = false,
                                 default = nil)
  if valid_580229 != nil:
    section.add "quotaUser", valid_580229
  var valid_580230 = query.getOrDefault("fields")
  valid_580230 = validateParameter(valid_580230, JString, required = false,
                                 default = nil)
  if valid_580230 != nil:
    section.add "fields", valid_580230
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580231: Call_DfareportingCreativeFieldsDelete_580219;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing creative field.
  ## 
  let valid = call_580231.validator(path, query, header, formData, body)
  let scheme = call_580231.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580231.url(scheme.get, call_580231.host, call_580231.base,
                         call_580231.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580231, url, valid)

proc call*(call_580232: Call_DfareportingCreativeFieldsDelete_580219;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingCreativeFieldsDelete
  ## Deletes an existing creative field.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Creative Field ID
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580233 = newJObject()
  var query_580234 = newJObject()
  add(query_580234, "key", newJString(key))
  add(query_580234, "prettyPrint", newJBool(prettyPrint))
  add(query_580234, "oauth_token", newJString(oauthToken))
  add(path_580233, "profileId", newJString(profileId))
  add(path_580233, "id", newJString(id))
  add(query_580234, "alt", newJString(alt))
  add(query_580234, "userIp", newJString(userIp))
  add(query_580234, "quotaUser", newJString(quotaUser))
  add(query_580234, "fields", newJString(fields))
  result = call_580232.call(path_580233, query_580234, nil, nil, nil)

var dfareportingCreativeFieldsDelete* = Call_DfareportingCreativeFieldsDelete_580219(
    name: "dfareportingCreativeFieldsDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/creativeFields/{id}",
    validator: validate_DfareportingCreativeFieldsDelete_580220,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsDelete_580221,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsUpdate_580258 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeGroupsUpdate_580260(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsUpdate_580259(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580261 = path.getOrDefault("profileId")
  valid_580261 = validateParameter(valid_580261, JString, required = true,
                                 default = nil)
  if valid_580261 != nil:
    section.add "profileId", valid_580261
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580262 = query.getOrDefault("key")
  valid_580262 = validateParameter(valid_580262, JString, required = false,
                                 default = nil)
  if valid_580262 != nil:
    section.add "key", valid_580262
  var valid_580263 = query.getOrDefault("prettyPrint")
  valid_580263 = validateParameter(valid_580263, JBool, required = false,
                                 default = newJBool(true))
  if valid_580263 != nil:
    section.add "prettyPrint", valid_580263
  var valid_580264 = query.getOrDefault("oauth_token")
  valid_580264 = validateParameter(valid_580264, JString, required = false,
                                 default = nil)
  if valid_580264 != nil:
    section.add "oauth_token", valid_580264
  var valid_580265 = query.getOrDefault("alt")
  valid_580265 = validateParameter(valid_580265, JString, required = false,
                                 default = newJString("json"))
  if valid_580265 != nil:
    section.add "alt", valid_580265
  var valid_580266 = query.getOrDefault("userIp")
  valid_580266 = validateParameter(valid_580266, JString, required = false,
                                 default = nil)
  if valid_580266 != nil:
    section.add "userIp", valid_580266
  var valid_580267 = query.getOrDefault("quotaUser")
  valid_580267 = validateParameter(valid_580267, JString, required = false,
                                 default = nil)
  if valid_580267 != nil:
    section.add "quotaUser", valid_580267
  var valid_580268 = query.getOrDefault("fields")
  valid_580268 = validateParameter(valid_580268, JString, required = false,
                                 default = nil)
  if valid_580268 != nil:
    section.add "fields", valid_580268
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580270: Call_DfareportingCreativeGroupsUpdate_580258;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative group.
  ## 
  let valid = call_580270.validator(path, query, header, formData, body)
  let scheme = call_580270.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580270.url(scheme.get, call_580270.host, call_580270.base,
                         call_580270.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580270, url, valid)

proc call*(call_580271: Call_DfareportingCreativeGroupsUpdate_580258;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCreativeGroupsUpdate
  ## Updates an existing creative group.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580272 = newJObject()
  var query_580273 = newJObject()
  var body_580274 = newJObject()
  add(query_580273, "key", newJString(key))
  add(query_580273, "prettyPrint", newJBool(prettyPrint))
  add(query_580273, "oauth_token", newJString(oauthToken))
  add(path_580272, "profileId", newJString(profileId))
  add(query_580273, "alt", newJString(alt))
  add(query_580273, "userIp", newJString(userIp))
  add(query_580273, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580274 = body
  add(query_580273, "fields", newJString(fields))
  result = call_580271.call(path_580272, query_580273, nil, nil, body_580274)

var dfareportingCreativeGroupsUpdate* = Call_DfareportingCreativeGroupsUpdate_580258(
    name: "dfareportingCreativeGroupsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeGroups",
    validator: validate_DfareportingCreativeGroupsUpdate_580259,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeGroupsUpdate_580260,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsInsert_580275 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeGroupsInsert_580277(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsInsert_580276(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580278 = path.getOrDefault("profileId")
  valid_580278 = validateParameter(valid_580278, JString, required = true,
                                 default = nil)
  if valid_580278 != nil:
    section.add "profileId", valid_580278
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580279 = query.getOrDefault("key")
  valid_580279 = validateParameter(valid_580279, JString, required = false,
                                 default = nil)
  if valid_580279 != nil:
    section.add "key", valid_580279
  var valid_580280 = query.getOrDefault("prettyPrint")
  valid_580280 = validateParameter(valid_580280, JBool, required = false,
                                 default = newJBool(true))
  if valid_580280 != nil:
    section.add "prettyPrint", valid_580280
  var valid_580281 = query.getOrDefault("oauth_token")
  valid_580281 = validateParameter(valid_580281, JString, required = false,
                                 default = nil)
  if valid_580281 != nil:
    section.add "oauth_token", valid_580281
  var valid_580282 = query.getOrDefault("alt")
  valid_580282 = validateParameter(valid_580282, JString, required = false,
                                 default = newJString("json"))
  if valid_580282 != nil:
    section.add "alt", valid_580282
  var valid_580283 = query.getOrDefault("userIp")
  valid_580283 = validateParameter(valid_580283, JString, required = false,
                                 default = nil)
  if valid_580283 != nil:
    section.add "userIp", valid_580283
  var valid_580284 = query.getOrDefault("quotaUser")
  valid_580284 = validateParameter(valid_580284, JString, required = false,
                                 default = nil)
  if valid_580284 != nil:
    section.add "quotaUser", valid_580284
  var valid_580285 = query.getOrDefault("fields")
  valid_580285 = validateParameter(valid_580285, JString, required = false,
                                 default = nil)
  if valid_580285 != nil:
    section.add "fields", valid_580285
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580287: Call_DfareportingCreativeGroupsInsert_580275;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new creative group.
  ## 
  let valid = call_580287.validator(path, query, header, formData, body)
  let scheme = call_580287.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580287.url(scheme.get, call_580287.host, call_580287.base,
                         call_580287.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580287, url, valid)

proc call*(call_580288: Call_DfareportingCreativeGroupsInsert_580275;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCreativeGroupsInsert
  ## Inserts a new creative group.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580289 = newJObject()
  var query_580290 = newJObject()
  var body_580291 = newJObject()
  add(query_580290, "key", newJString(key))
  add(query_580290, "prettyPrint", newJBool(prettyPrint))
  add(query_580290, "oauth_token", newJString(oauthToken))
  add(path_580289, "profileId", newJString(profileId))
  add(query_580290, "alt", newJString(alt))
  add(query_580290, "userIp", newJString(userIp))
  add(query_580290, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580291 = body
  add(query_580290, "fields", newJString(fields))
  result = call_580288.call(path_580289, query_580290, nil, nil, body_580291)

var dfareportingCreativeGroupsInsert* = Call_DfareportingCreativeGroupsInsert_580275(
    name: "dfareportingCreativeGroupsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeGroups",
    validator: validate_DfareportingCreativeGroupsInsert_580276,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeGroupsInsert_580277,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsList_580235 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeGroupsList_580237(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsList_580236(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of creative groups, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580238 = path.getOrDefault("profileId")
  valid_580238 = validateParameter(valid_580238, JString, required = true,
                                 default = nil)
  if valid_580238 != nil:
    section.add "profileId", valid_580238
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   advertiserIds: JArray
  ##                : Select only creative groups that belong to these advertisers.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for creative groups by name or ID. Wildcards (*) are allowed. For example, "creativegroup*2015" will return creative groups with names like "creativegroup June 2015", "creativegroup April 2015", or simply "creativegroup 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativegroup" will match creative groups with the name "my creativegroup", "creativegroup 2015", or simply "creativegroup".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only creative groups with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   groupNumber: JInt
  ##              : Select only creative groups that belong to this subgroup.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_580239 = query.getOrDefault("key")
  valid_580239 = validateParameter(valid_580239, JString, required = false,
                                 default = nil)
  if valid_580239 != nil:
    section.add "key", valid_580239
  var valid_580240 = query.getOrDefault("prettyPrint")
  valid_580240 = validateParameter(valid_580240, JBool, required = false,
                                 default = newJBool(true))
  if valid_580240 != nil:
    section.add "prettyPrint", valid_580240
  var valid_580241 = query.getOrDefault("oauth_token")
  valid_580241 = validateParameter(valid_580241, JString, required = false,
                                 default = nil)
  if valid_580241 != nil:
    section.add "oauth_token", valid_580241
  var valid_580242 = query.getOrDefault("sortField")
  valid_580242 = validateParameter(valid_580242, JString, required = false,
                                 default = newJString("ID"))
  if valid_580242 != nil:
    section.add "sortField", valid_580242
  var valid_580243 = query.getOrDefault("advertiserIds")
  valid_580243 = validateParameter(valid_580243, JArray, required = false,
                                 default = nil)
  if valid_580243 != nil:
    section.add "advertiserIds", valid_580243
  var valid_580244 = query.getOrDefault("alt")
  valid_580244 = validateParameter(valid_580244, JString, required = false,
                                 default = newJString("json"))
  if valid_580244 != nil:
    section.add "alt", valid_580244
  var valid_580245 = query.getOrDefault("userIp")
  valid_580245 = validateParameter(valid_580245, JString, required = false,
                                 default = nil)
  if valid_580245 != nil:
    section.add "userIp", valid_580245
  var valid_580246 = query.getOrDefault("quotaUser")
  valid_580246 = validateParameter(valid_580246, JString, required = false,
                                 default = nil)
  if valid_580246 != nil:
    section.add "quotaUser", valid_580246
  var valid_580247 = query.getOrDefault("pageToken")
  valid_580247 = validateParameter(valid_580247, JString, required = false,
                                 default = nil)
  if valid_580247 != nil:
    section.add "pageToken", valid_580247
  var valid_580248 = query.getOrDefault("searchString")
  valid_580248 = validateParameter(valid_580248, JString, required = false,
                                 default = nil)
  if valid_580248 != nil:
    section.add "searchString", valid_580248
  var valid_580249 = query.getOrDefault("sortOrder")
  valid_580249 = validateParameter(valid_580249, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580249 != nil:
    section.add "sortOrder", valid_580249
  var valid_580250 = query.getOrDefault("ids")
  valid_580250 = validateParameter(valid_580250, JArray, required = false,
                                 default = nil)
  if valid_580250 != nil:
    section.add "ids", valid_580250
  var valid_580251 = query.getOrDefault("fields")
  valid_580251 = validateParameter(valid_580251, JString, required = false,
                                 default = nil)
  if valid_580251 != nil:
    section.add "fields", valid_580251
  var valid_580252 = query.getOrDefault("groupNumber")
  valid_580252 = validateParameter(valid_580252, JInt, required = false, default = nil)
  if valid_580252 != nil:
    section.add "groupNumber", valid_580252
  var valid_580253 = query.getOrDefault("maxResults")
  valid_580253 = validateParameter(valid_580253, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580253 != nil:
    section.add "maxResults", valid_580253
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580254: Call_DfareportingCreativeGroupsList_580235; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of creative groups, possibly filtered. This method supports paging.
  ## 
  let valid = call_580254.validator(path, query, header, formData, body)
  let scheme = call_580254.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580254.url(scheme.get, call_580254.host, call_580254.base,
                         call_580254.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580254, url, valid)

proc call*(call_580255: Call_DfareportingCreativeGroupsList_580235;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; sortField: string = "ID";
          advertiserIds: JsonNode = nil; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; pageToken: string = ""; searchString: string = "";
          sortOrder: string = "ASCENDING"; ids: JsonNode = nil; fields: string = "";
          groupNumber: int = 0; maxResults: int = 1000): Recallable =
  ## dfareportingCreativeGroupsList
  ## Retrieves a list of creative groups, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   advertiserIds: JArray
  ##                : Select only creative groups that belong to these advertisers.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for creative groups by name or ID. Wildcards (*) are allowed. For example, "creativegroup*2015" will return creative groups with names like "creativegroup June 2015", "creativegroup April 2015", or simply "creativegroup 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativegroup" will match creative groups with the name "my creativegroup", "creativegroup 2015", or simply "creativegroup".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only creative groups with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   groupNumber: int
  ##              : Select only creative groups that belong to this subgroup.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_580256 = newJObject()
  var query_580257 = newJObject()
  add(query_580257, "key", newJString(key))
  add(query_580257, "prettyPrint", newJBool(prettyPrint))
  add(query_580257, "oauth_token", newJString(oauthToken))
  add(path_580256, "profileId", newJString(profileId))
  add(query_580257, "sortField", newJString(sortField))
  if advertiserIds != nil:
    query_580257.add "advertiserIds", advertiserIds
  add(query_580257, "alt", newJString(alt))
  add(query_580257, "userIp", newJString(userIp))
  add(query_580257, "quotaUser", newJString(quotaUser))
  add(query_580257, "pageToken", newJString(pageToken))
  add(query_580257, "searchString", newJString(searchString))
  add(query_580257, "sortOrder", newJString(sortOrder))
  if ids != nil:
    query_580257.add "ids", ids
  add(query_580257, "fields", newJString(fields))
  add(query_580257, "groupNumber", newJInt(groupNumber))
  add(query_580257, "maxResults", newJInt(maxResults))
  result = call_580255.call(path_580256, query_580257, nil, nil, nil)

var dfareportingCreativeGroupsList* = Call_DfareportingCreativeGroupsList_580235(
    name: "dfareportingCreativeGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeGroups",
    validator: validate_DfareportingCreativeGroupsList_580236,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeGroupsList_580237,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsPatch_580292 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeGroupsPatch_580294(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsPatch_580293(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative group. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580295 = path.getOrDefault("profileId")
  valid_580295 = validateParameter(valid_580295, JString, required = true,
                                 default = nil)
  if valid_580295 != nil:
    section.add "profileId", valid_580295
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Creative group ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580296 = query.getOrDefault("key")
  valid_580296 = validateParameter(valid_580296, JString, required = false,
                                 default = nil)
  if valid_580296 != nil:
    section.add "key", valid_580296
  var valid_580297 = query.getOrDefault("prettyPrint")
  valid_580297 = validateParameter(valid_580297, JBool, required = false,
                                 default = newJBool(true))
  if valid_580297 != nil:
    section.add "prettyPrint", valid_580297
  var valid_580298 = query.getOrDefault("oauth_token")
  valid_580298 = validateParameter(valid_580298, JString, required = false,
                                 default = nil)
  if valid_580298 != nil:
    section.add "oauth_token", valid_580298
  var valid_580299 = query.getOrDefault("alt")
  valid_580299 = validateParameter(valid_580299, JString, required = false,
                                 default = newJString("json"))
  if valid_580299 != nil:
    section.add "alt", valid_580299
  var valid_580300 = query.getOrDefault("userIp")
  valid_580300 = validateParameter(valid_580300, JString, required = false,
                                 default = nil)
  if valid_580300 != nil:
    section.add "userIp", valid_580300
  var valid_580301 = query.getOrDefault("quotaUser")
  valid_580301 = validateParameter(valid_580301, JString, required = false,
                                 default = nil)
  if valid_580301 != nil:
    section.add "quotaUser", valid_580301
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580302 = query.getOrDefault("id")
  valid_580302 = validateParameter(valid_580302, JString, required = true,
                                 default = nil)
  if valid_580302 != nil:
    section.add "id", valid_580302
  var valid_580303 = query.getOrDefault("fields")
  valid_580303 = validateParameter(valid_580303, JString, required = false,
                                 default = nil)
  if valid_580303 != nil:
    section.add "fields", valid_580303
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580305: Call_DfareportingCreativeGroupsPatch_580292;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative group. This method supports patch semantics.
  ## 
  let valid = call_580305.validator(path, query, header, formData, body)
  let scheme = call_580305.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580305.url(scheme.get, call_580305.host, call_580305.base,
                         call_580305.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580305, url, valid)

proc call*(call_580306: Call_DfareportingCreativeGroupsPatch_580292;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCreativeGroupsPatch
  ## Updates an existing creative group. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Creative group ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580307 = newJObject()
  var query_580308 = newJObject()
  var body_580309 = newJObject()
  add(query_580308, "key", newJString(key))
  add(query_580308, "prettyPrint", newJBool(prettyPrint))
  add(query_580308, "oauth_token", newJString(oauthToken))
  add(path_580307, "profileId", newJString(profileId))
  add(query_580308, "alt", newJString(alt))
  add(query_580308, "userIp", newJString(userIp))
  add(query_580308, "quotaUser", newJString(quotaUser))
  add(query_580308, "id", newJString(id))
  if body != nil:
    body_580309 = body
  add(query_580308, "fields", newJString(fields))
  result = call_580306.call(path_580307, query_580308, nil, nil, body_580309)

var dfareportingCreativeGroupsPatch* = Call_DfareportingCreativeGroupsPatch_580292(
    name: "dfareportingCreativeGroupsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeGroups",
    validator: validate_DfareportingCreativeGroupsPatch_580293,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeGroupsPatch_580294,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsGet_580310 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativeGroupsGet_580312(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsGet_580311(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one creative group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580313 = path.getOrDefault("profileId")
  valid_580313 = validateParameter(valid_580313, JString, required = true,
                                 default = nil)
  if valid_580313 != nil:
    section.add "profileId", valid_580313
  var valid_580314 = path.getOrDefault("id")
  valid_580314 = validateParameter(valid_580314, JString, required = true,
                                 default = nil)
  if valid_580314 != nil:
    section.add "id", valid_580314
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580315 = query.getOrDefault("key")
  valid_580315 = validateParameter(valid_580315, JString, required = false,
                                 default = nil)
  if valid_580315 != nil:
    section.add "key", valid_580315
  var valid_580316 = query.getOrDefault("prettyPrint")
  valid_580316 = validateParameter(valid_580316, JBool, required = false,
                                 default = newJBool(true))
  if valid_580316 != nil:
    section.add "prettyPrint", valid_580316
  var valid_580317 = query.getOrDefault("oauth_token")
  valid_580317 = validateParameter(valid_580317, JString, required = false,
                                 default = nil)
  if valid_580317 != nil:
    section.add "oauth_token", valid_580317
  var valid_580318 = query.getOrDefault("alt")
  valid_580318 = validateParameter(valid_580318, JString, required = false,
                                 default = newJString("json"))
  if valid_580318 != nil:
    section.add "alt", valid_580318
  var valid_580319 = query.getOrDefault("userIp")
  valid_580319 = validateParameter(valid_580319, JString, required = false,
                                 default = nil)
  if valid_580319 != nil:
    section.add "userIp", valid_580319
  var valid_580320 = query.getOrDefault("quotaUser")
  valid_580320 = validateParameter(valid_580320, JString, required = false,
                                 default = nil)
  if valid_580320 != nil:
    section.add "quotaUser", valid_580320
  var valid_580321 = query.getOrDefault("fields")
  valid_580321 = validateParameter(valid_580321, JString, required = false,
                                 default = nil)
  if valid_580321 != nil:
    section.add "fields", valid_580321
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580322: Call_DfareportingCreativeGroupsGet_580310; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one creative group by ID.
  ## 
  let valid = call_580322.validator(path, query, header, formData, body)
  let scheme = call_580322.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580322.url(scheme.get, call_580322.host, call_580322.base,
                         call_580322.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580322, url, valid)

proc call*(call_580323: Call_DfareportingCreativeGroupsGet_580310;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingCreativeGroupsGet
  ## Gets one creative group by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Creative group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580324 = newJObject()
  var query_580325 = newJObject()
  add(query_580325, "key", newJString(key))
  add(query_580325, "prettyPrint", newJBool(prettyPrint))
  add(query_580325, "oauth_token", newJString(oauthToken))
  add(path_580324, "profileId", newJString(profileId))
  add(path_580324, "id", newJString(id))
  add(query_580325, "alt", newJString(alt))
  add(query_580325, "userIp", newJString(userIp))
  add(query_580325, "quotaUser", newJString(quotaUser))
  add(query_580325, "fields", newJString(fields))
  result = call_580323.call(path_580324, query_580325, nil, nil, nil)

var dfareportingCreativeGroupsGet* = Call_DfareportingCreativeGroupsGet_580310(
    name: "dfareportingCreativeGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/creativeGroups/{id}",
    validator: validate_DfareportingCreativeGroupsGet_580311,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeGroupsGet_580312,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesUpdate_580357 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativesUpdate_580359(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesUpdate_580358(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580360 = path.getOrDefault("profileId")
  valid_580360 = validateParameter(valid_580360, JString, required = true,
                                 default = nil)
  if valid_580360 != nil:
    section.add "profileId", valid_580360
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580361 = query.getOrDefault("key")
  valid_580361 = validateParameter(valid_580361, JString, required = false,
                                 default = nil)
  if valid_580361 != nil:
    section.add "key", valid_580361
  var valid_580362 = query.getOrDefault("prettyPrint")
  valid_580362 = validateParameter(valid_580362, JBool, required = false,
                                 default = newJBool(true))
  if valid_580362 != nil:
    section.add "prettyPrint", valid_580362
  var valid_580363 = query.getOrDefault("oauth_token")
  valid_580363 = validateParameter(valid_580363, JString, required = false,
                                 default = nil)
  if valid_580363 != nil:
    section.add "oauth_token", valid_580363
  var valid_580364 = query.getOrDefault("alt")
  valid_580364 = validateParameter(valid_580364, JString, required = false,
                                 default = newJString("json"))
  if valid_580364 != nil:
    section.add "alt", valid_580364
  var valid_580365 = query.getOrDefault("userIp")
  valid_580365 = validateParameter(valid_580365, JString, required = false,
                                 default = nil)
  if valid_580365 != nil:
    section.add "userIp", valid_580365
  var valid_580366 = query.getOrDefault("quotaUser")
  valid_580366 = validateParameter(valid_580366, JString, required = false,
                                 default = nil)
  if valid_580366 != nil:
    section.add "quotaUser", valid_580366
  var valid_580367 = query.getOrDefault("fields")
  valid_580367 = validateParameter(valid_580367, JString, required = false,
                                 default = nil)
  if valid_580367 != nil:
    section.add "fields", valid_580367
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580369: Call_DfareportingCreativesUpdate_580357; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing creative.
  ## 
  let valid = call_580369.validator(path, query, header, formData, body)
  let scheme = call_580369.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580369.url(scheme.get, call_580369.host, call_580369.base,
                         call_580369.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580369, url, valid)

proc call*(call_580370: Call_DfareportingCreativesUpdate_580357; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCreativesUpdate
  ## Updates an existing creative.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580371 = newJObject()
  var query_580372 = newJObject()
  var body_580373 = newJObject()
  add(query_580372, "key", newJString(key))
  add(query_580372, "prettyPrint", newJBool(prettyPrint))
  add(query_580372, "oauth_token", newJString(oauthToken))
  add(path_580371, "profileId", newJString(profileId))
  add(query_580372, "alt", newJString(alt))
  add(query_580372, "userIp", newJString(userIp))
  add(query_580372, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580373 = body
  add(query_580372, "fields", newJString(fields))
  result = call_580370.call(path_580371, query_580372, nil, nil, body_580373)

var dfareportingCreativesUpdate* = Call_DfareportingCreativesUpdate_580357(
    name: "dfareportingCreativesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives",
    validator: validate_DfareportingCreativesUpdate_580358,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativesUpdate_580359,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesInsert_580374 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativesInsert_580376(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesInsert_580375(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580377 = path.getOrDefault("profileId")
  valid_580377 = validateParameter(valid_580377, JString, required = true,
                                 default = nil)
  if valid_580377 != nil:
    section.add "profileId", valid_580377
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580378 = query.getOrDefault("key")
  valid_580378 = validateParameter(valid_580378, JString, required = false,
                                 default = nil)
  if valid_580378 != nil:
    section.add "key", valid_580378
  var valid_580379 = query.getOrDefault("prettyPrint")
  valid_580379 = validateParameter(valid_580379, JBool, required = false,
                                 default = newJBool(true))
  if valid_580379 != nil:
    section.add "prettyPrint", valid_580379
  var valid_580380 = query.getOrDefault("oauth_token")
  valid_580380 = validateParameter(valid_580380, JString, required = false,
                                 default = nil)
  if valid_580380 != nil:
    section.add "oauth_token", valid_580380
  var valid_580381 = query.getOrDefault("alt")
  valid_580381 = validateParameter(valid_580381, JString, required = false,
                                 default = newJString("json"))
  if valid_580381 != nil:
    section.add "alt", valid_580381
  var valid_580382 = query.getOrDefault("userIp")
  valid_580382 = validateParameter(valid_580382, JString, required = false,
                                 default = nil)
  if valid_580382 != nil:
    section.add "userIp", valid_580382
  var valid_580383 = query.getOrDefault("quotaUser")
  valid_580383 = validateParameter(valid_580383, JString, required = false,
                                 default = nil)
  if valid_580383 != nil:
    section.add "quotaUser", valid_580383
  var valid_580384 = query.getOrDefault("fields")
  valid_580384 = validateParameter(valid_580384, JString, required = false,
                                 default = nil)
  if valid_580384 != nil:
    section.add "fields", valid_580384
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580386: Call_DfareportingCreativesInsert_580374; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new creative.
  ## 
  let valid = call_580386.validator(path, query, header, formData, body)
  let scheme = call_580386.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580386.url(scheme.get, call_580386.host, call_580386.base,
                         call_580386.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580386, url, valid)

proc call*(call_580387: Call_DfareportingCreativesInsert_580374; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCreativesInsert
  ## Inserts a new creative.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580388 = newJObject()
  var query_580389 = newJObject()
  var body_580390 = newJObject()
  add(query_580389, "key", newJString(key))
  add(query_580389, "prettyPrint", newJBool(prettyPrint))
  add(query_580389, "oauth_token", newJString(oauthToken))
  add(path_580388, "profileId", newJString(profileId))
  add(query_580389, "alt", newJString(alt))
  add(query_580389, "userIp", newJString(userIp))
  add(query_580389, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580390 = body
  add(query_580389, "fields", newJString(fields))
  result = call_580387.call(path_580388, query_580389, nil, nil, body_580390)

var dfareportingCreativesInsert* = Call_DfareportingCreativesInsert_580374(
    name: "dfareportingCreativesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives",
    validator: validate_DfareportingCreativesInsert_580375,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativesInsert_580376,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesList_580326 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativesList_580328(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesList_580327(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of creatives, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580329 = path.getOrDefault("profileId")
  valid_580329 = validateParameter(valid_580329, JString, required = true,
                                 default = nil)
  if valid_580329 != nil:
    section.add "profileId", valid_580329
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   active: JBool
  ##         : Select only active creatives. Leave blank to select active and inactive creatives.
  ##   creativeFieldIds: JArray
  ##                   : Select only creatives with these creative field IDs.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived creatives. Leave blank to select archived and unarchived creatives.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   campaignId: JString
  ##             : Select only creatives with this campaign ID.
  ##   types: JArray
  ##        : Select only creatives with these creative types.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "creative*2015" will return objects with names like "creative June 2015", "creative April 2015", or simply "creative 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "creative" will match objects with name "my creative", "creative 2015", or simply "creative".
  ##   sizeIds: JArray
  ##          : Select only creatives with these size IDs.
  ##   companionCreativeIds: JArray
  ##                       : Select only in-stream video creatives with these companion IDs.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   renderingIds: JArray
  ##               : Select only creatives with these rendering IDs.
  ##   advertiserId: JString
  ##               : Select only creatives with this advertiser ID.
  ##   ids: JArray
  ##      : Select only creatives with these IDs.
  ##   studioCreativeId: JString
  ##                   : Select only creatives corresponding to this Studio creative ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_580330 = query.getOrDefault("key")
  valid_580330 = validateParameter(valid_580330, JString, required = false,
                                 default = nil)
  if valid_580330 != nil:
    section.add "key", valid_580330
  var valid_580331 = query.getOrDefault("prettyPrint")
  valid_580331 = validateParameter(valid_580331, JBool, required = false,
                                 default = newJBool(true))
  if valid_580331 != nil:
    section.add "prettyPrint", valid_580331
  var valid_580332 = query.getOrDefault("oauth_token")
  valid_580332 = validateParameter(valid_580332, JString, required = false,
                                 default = nil)
  if valid_580332 != nil:
    section.add "oauth_token", valid_580332
  var valid_580333 = query.getOrDefault("active")
  valid_580333 = validateParameter(valid_580333, JBool, required = false, default = nil)
  if valid_580333 != nil:
    section.add "active", valid_580333
  var valid_580334 = query.getOrDefault("creativeFieldIds")
  valid_580334 = validateParameter(valid_580334, JArray, required = false,
                                 default = nil)
  if valid_580334 != nil:
    section.add "creativeFieldIds", valid_580334
  var valid_580335 = query.getOrDefault("sortField")
  valid_580335 = validateParameter(valid_580335, JString, required = false,
                                 default = newJString("ID"))
  if valid_580335 != nil:
    section.add "sortField", valid_580335
  var valid_580336 = query.getOrDefault("alt")
  valid_580336 = validateParameter(valid_580336, JString, required = false,
                                 default = newJString("json"))
  if valid_580336 != nil:
    section.add "alt", valid_580336
  var valid_580337 = query.getOrDefault("userIp")
  valid_580337 = validateParameter(valid_580337, JString, required = false,
                                 default = nil)
  if valid_580337 != nil:
    section.add "userIp", valid_580337
  var valid_580338 = query.getOrDefault("archived")
  valid_580338 = validateParameter(valid_580338, JBool, required = false, default = nil)
  if valid_580338 != nil:
    section.add "archived", valid_580338
  var valid_580339 = query.getOrDefault("quotaUser")
  valid_580339 = validateParameter(valid_580339, JString, required = false,
                                 default = nil)
  if valid_580339 != nil:
    section.add "quotaUser", valid_580339
  var valid_580340 = query.getOrDefault("campaignId")
  valid_580340 = validateParameter(valid_580340, JString, required = false,
                                 default = nil)
  if valid_580340 != nil:
    section.add "campaignId", valid_580340
  var valid_580341 = query.getOrDefault("types")
  valid_580341 = validateParameter(valid_580341, JArray, required = false,
                                 default = nil)
  if valid_580341 != nil:
    section.add "types", valid_580341
  var valid_580342 = query.getOrDefault("pageToken")
  valid_580342 = validateParameter(valid_580342, JString, required = false,
                                 default = nil)
  if valid_580342 != nil:
    section.add "pageToken", valid_580342
  var valid_580343 = query.getOrDefault("searchString")
  valid_580343 = validateParameter(valid_580343, JString, required = false,
                                 default = nil)
  if valid_580343 != nil:
    section.add "searchString", valid_580343
  var valid_580344 = query.getOrDefault("sizeIds")
  valid_580344 = validateParameter(valid_580344, JArray, required = false,
                                 default = nil)
  if valid_580344 != nil:
    section.add "sizeIds", valid_580344
  var valid_580345 = query.getOrDefault("companionCreativeIds")
  valid_580345 = validateParameter(valid_580345, JArray, required = false,
                                 default = nil)
  if valid_580345 != nil:
    section.add "companionCreativeIds", valid_580345
  var valid_580346 = query.getOrDefault("sortOrder")
  valid_580346 = validateParameter(valid_580346, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580346 != nil:
    section.add "sortOrder", valid_580346
  var valid_580347 = query.getOrDefault("renderingIds")
  valid_580347 = validateParameter(valid_580347, JArray, required = false,
                                 default = nil)
  if valid_580347 != nil:
    section.add "renderingIds", valid_580347
  var valid_580348 = query.getOrDefault("advertiserId")
  valid_580348 = validateParameter(valid_580348, JString, required = false,
                                 default = nil)
  if valid_580348 != nil:
    section.add "advertiserId", valid_580348
  var valid_580349 = query.getOrDefault("ids")
  valid_580349 = validateParameter(valid_580349, JArray, required = false,
                                 default = nil)
  if valid_580349 != nil:
    section.add "ids", valid_580349
  var valid_580350 = query.getOrDefault("studioCreativeId")
  valid_580350 = validateParameter(valid_580350, JString, required = false,
                                 default = nil)
  if valid_580350 != nil:
    section.add "studioCreativeId", valid_580350
  var valid_580351 = query.getOrDefault("fields")
  valid_580351 = validateParameter(valid_580351, JString, required = false,
                                 default = nil)
  if valid_580351 != nil:
    section.add "fields", valid_580351
  var valid_580352 = query.getOrDefault("maxResults")
  valid_580352 = validateParameter(valid_580352, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580352 != nil:
    section.add "maxResults", valid_580352
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580353: Call_DfareportingCreativesList_580326; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of creatives, possibly filtered. This method supports paging.
  ## 
  let valid = call_580353.validator(path, query, header, formData, body)
  let scheme = call_580353.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580353.url(scheme.get, call_580353.host, call_580353.base,
                         call_580353.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580353, url, valid)

proc call*(call_580354: Call_DfareportingCreativesList_580326; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          active: bool = false; creativeFieldIds: JsonNode = nil;
          sortField: string = "ID"; alt: string = "json"; userIp: string = "";
          archived: bool = false; quotaUser: string = ""; campaignId: string = "";
          types: JsonNode = nil; pageToken: string = ""; searchString: string = "";
          sizeIds: JsonNode = nil; companionCreativeIds: JsonNode = nil;
          sortOrder: string = "ASCENDING"; renderingIds: JsonNode = nil;
          advertiserId: string = ""; ids: JsonNode = nil; studioCreativeId: string = "";
          fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingCreativesList
  ## Retrieves a list of creatives, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   active: bool
  ##         : Select only active creatives. Leave blank to select active and inactive creatives.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldIds: JArray
  ##                   : Select only creatives with these creative field IDs.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived creatives. Leave blank to select archived and unarchived creatives.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   campaignId: string
  ##             : Select only creatives with this campaign ID.
  ##   types: JArray
  ##        : Select only creatives with these creative types.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "creative*2015" will return objects with names like "creative June 2015", "creative April 2015", or simply "creative 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "creative" will match objects with name "my creative", "creative 2015", or simply "creative".
  ##   sizeIds: JArray
  ##          : Select only creatives with these size IDs.
  ##   companionCreativeIds: JArray
  ##                       : Select only in-stream video creatives with these companion IDs.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   renderingIds: JArray
  ##               : Select only creatives with these rendering IDs.
  ##   advertiserId: string
  ##               : Select only creatives with this advertiser ID.
  ##   ids: JArray
  ##      : Select only creatives with these IDs.
  ##   studioCreativeId: string
  ##                   : Select only creatives corresponding to this Studio creative ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_580355 = newJObject()
  var query_580356 = newJObject()
  add(query_580356, "key", newJString(key))
  add(query_580356, "prettyPrint", newJBool(prettyPrint))
  add(query_580356, "oauth_token", newJString(oauthToken))
  add(query_580356, "active", newJBool(active))
  add(path_580355, "profileId", newJString(profileId))
  if creativeFieldIds != nil:
    query_580356.add "creativeFieldIds", creativeFieldIds
  add(query_580356, "sortField", newJString(sortField))
  add(query_580356, "alt", newJString(alt))
  add(query_580356, "userIp", newJString(userIp))
  add(query_580356, "archived", newJBool(archived))
  add(query_580356, "quotaUser", newJString(quotaUser))
  add(query_580356, "campaignId", newJString(campaignId))
  if types != nil:
    query_580356.add "types", types
  add(query_580356, "pageToken", newJString(pageToken))
  add(query_580356, "searchString", newJString(searchString))
  if sizeIds != nil:
    query_580356.add "sizeIds", sizeIds
  if companionCreativeIds != nil:
    query_580356.add "companionCreativeIds", companionCreativeIds
  add(query_580356, "sortOrder", newJString(sortOrder))
  if renderingIds != nil:
    query_580356.add "renderingIds", renderingIds
  add(query_580356, "advertiserId", newJString(advertiserId))
  if ids != nil:
    query_580356.add "ids", ids
  add(query_580356, "studioCreativeId", newJString(studioCreativeId))
  add(query_580356, "fields", newJString(fields))
  add(query_580356, "maxResults", newJInt(maxResults))
  result = call_580354.call(path_580355, query_580356, nil, nil, nil)

var dfareportingCreativesList* = Call_DfareportingCreativesList_580326(
    name: "dfareportingCreativesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives",
    validator: validate_DfareportingCreativesList_580327,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativesList_580328,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesPatch_580391 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativesPatch_580393(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesPatch_580392(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580394 = path.getOrDefault("profileId")
  valid_580394 = validateParameter(valid_580394, JString, required = true,
                                 default = nil)
  if valid_580394 != nil:
    section.add "profileId", valid_580394
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Creative ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580395 = query.getOrDefault("key")
  valid_580395 = validateParameter(valid_580395, JString, required = false,
                                 default = nil)
  if valid_580395 != nil:
    section.add "key", valid_580395
  var valid_580396 = query.getOrDefault("prettyPrint")
  valid_580396 = validateParameter(valid_580396, JBool, required = false,
                                 default = newJBool(true))
  if valid_580396 != nil:
    section.add "prettyPrint", valid_580396
  var valid_580397 = query.getOrDefault("oauth_token")
  valid_580397 = validateParameter(valid_580397, JString, required = false,
                                 default = nil)
  if valid_580397 != nil:
    section.add "oauth_token", valid_580397
  var valid_580398 = query.getOrDefault("alt")
  valid_580398 = validateParameter(valid_580398, JString, required = false,
                                 default = newJString("json"))
  if valid_580398 != nil:
    section.add "alt", valid_580398
  var valid_580399 = query.getOrDefault("userIp")
  valid_580399 = validateParameter(valid_580399, JString, required = false,
                                 default = nil)
  if valid_580399 != nil:
    section.add "userIp", valid_580399
  var valid_580400 = query.getOrDefault("quotaUser")
  valid_580400 = validateParameter(valid_580400, JString, required = false,
                                 default = nil)
  if valid_580400 != nil:
    section.add "quotaUser", valid_580400
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580401 = query.getOrDefault("id")
  valid_580401 = validateParameter(valid_580401, JString, required = true,
                                 default = nil)
  if valid_580401 != nil:
    section.add "id", valid_580401
  var valid_580402 = query.getOrDefault("fields")
  valid_580402 = validateParameter(valid_580402, JString, required = false,
                                 default = nil)
  if valid_580402 != nil:
    section.add "fields", valid_580402
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580404: Call_DfareportingCreativesPatch_580391; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing creative. This method supports patch semantics.
  ## 
  let valid = call_580404.validator(path, query, header, formData, body)
  let scheme = call_580404.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580404.url(scheme.get, call_580404.host, call_580404.base,
                         call_580404.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580404, url, valid)

proc call*(call_580405: Call_DfareportingCreativesPatch_580391; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingCreativesPatch
  ## Updates an existing creative. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Creative ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580406 = newJObject()
  var query_580407 = newJObject()
  var body_580408 = newJObject()
  add(query_580407, "key", newJString(key))
  add(query_580407, "prettyPrint", newJBool(prettyPrint))
  add(query_580407, "oauth_token", newJString(oauthToken))
  add(path_580406, "profileId", newJString(profileId))
  add(query_580407, "alt", newJString(alt))
  add(query_580407, "userIp", newJString(userIp))
  add(query_580407, "quotaUser", newJString(quotaUser))
  add(query_580407, "id", newJString(id))
  if body != nil:
    body_580408 = body
  add(query_580407, "fields", newJString(fields))
  result = call_580405.call(path_580406, query_580407, nil, nil, body_580408)

var dfareportingCreativesPatch* = Call_DfareportingCreativesPatch_580391(
    name: "dfareportingCreativesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives",
    validator: validate_DfareportingCreativesPatch_580392,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativesPatch_580393,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesGet_580409 = ref object of OpenApiRestCall_578364
proc url_DfareportingCreativesGet_580411(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesGet_580410(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one creative by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580412 = path.getOrDefault("profileId")
  valid_580412 = validateParameter(valid_580412, JString, required = true,
                                 default = nil)
  if valid_580412 != nil:
    section.add "profileId", valid_580412
  var valid_580413 = path.getOrDefault("id")
  valid_580413 = validateParameter(valid_580413, JString, required = true,
                                 default = nil)
  if valid_580413 != nil:
    section.add "id", valid_580413
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580414 = query.getOrDefault("key")
  valid_580414 = validateParameter(valid_580414, JString, required = false,
                                 default = nil)
  if valid_580414 != nil:
    section.add "key", valid_580414
  var valid_580415 = query.getOrDefault("prettyPrint")
  valid_580415 = validateParameter(valid_580415, JBool, required = false,
                                 default = newJBool(true))
  if valid_580415 != nil:
    section.add "prettyPrint", valid_580415
  var valid_580416 = query.getOrDefault("oauth_token")
  valid_580416 = validateParameter(valid_580416, JString, required = false,
                                 default = nil)
  if valid_580416 != nil:
    section.add "oauth_token", valid_580416
  var valid_580417 = query.getOrDefault("alt")
  valid_580417 = validateParameter(valid_580417, JString, required = false,
                                 default = newJString("json"))
  if valid_580417 != nil:
    section.add "alt", valid_580417
  var valid_580418 = query.getOrDefault("userIp")
  valid_580418 = validateParameter(valid_580418, JString, required = false,
                                 default = nil)
  if valid_580418 != nil:
    section.add "userIp", valid_580418
  var valid_580419 = query.getOrDefault("quotaUser")
  valid_580419 = validateParameter(valid_580419, JString, required = false,
                                 default = nil)
  if valid_580419 != nil:
    section.add "quotaUser", valid_580419
  var valid_580420 = query.getOrDefault("fields")
  valid_580420 = validateParameter(valid_580420, JString, required = false,
                                 default = nil)
  if valid_580420 != nil:
    section.add "fields", valid_580420
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580421: Call_DfareportingCreativesGet_580409; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one creative by ID.
  ## 
  let valid = call_580421.validator(path, query, header, formData, body)
  let scheme = call_580421.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580421.url(scheme.get, call_580421.host, call_580421.base,
                         call_580421.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580421, url, valid)

proc call*(call_580422: Call_DfareportingCreativesGet_580409; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingCreativesGet
  ## Gets one creative by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Creative ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580423 = newJObject()
  var query_580424 = newJObject()
  add(query_580424, "key", newJString(key))
  add(query_580424, "prettyPrint", newJBool(prettyPrint))
  add(query_580424, "oauth_token", newJString(oauthToken))
  add(path_580423, "profileId", newJString(profileId))
  add(path_580423, "id", newJString(id))
  add(query_580424, "alt", newJString(alt))
  add(query_580424, "userIp", newJString(userIp))
  add(query_580424, "quotaUser", newJString(quotaUser))
  add(query_580424, "fields", newJString(fields))
  result = call_580422.call(path_580423, query_580424, nil, nil, nil)

var dfareportingCreativesGet* = Call_DfareportingCreativesGet_580409(
    name: "dfareportingCreativesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives/{id}",
    validator: validate_DfareportingCreativesGet_580410,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativesGet_580411,
    schemes: {Scheme.Https})
type
  Call_DfareportingDimensionValuesQuery_580425 = ref object of OpenApiRestCall_578364
proc url_DfareportingDimensionValuesQuery_580427(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/dimensionvalues/query")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDimensionValuesQuery_580426(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves list of report dimension values for a list of filters.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580428 = path.getOrDefault("profileId")
  valid_580428 = validateParameter(valid_580428, JString, required = true,
                                 default = nil)
  if valid_580428 != nil:
    section.add "profileId", valid_580428
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : The value of the nextToken from the previous result page.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_580429 = query.getOrDefault("key")
  valid_580429 = validateParameter(valid_580429, JString, required = false,
                                 default = nil)
  if valid_580429 != nil:
    section.add "key", valid_580429
  var valid_580430 = query.getOrDefault("prettyPrint")
  valid_580430 = validateParameter(valid_580430, JBool, required = false,
                                 default = newJBool(true))
  if valid_580430 != nil:
    section.add "prettyPrint", valid_580430
  var valid_580431 = query.getOrDefault("oauth_token")
  valid_580431 = validateParameter(valid_580431, JString, required = false,
                                 default = nil)
  if valid_580431 != nil:
    section.add "oauth_token", valid_580431
  var valid_580432 = query.getOrDefault("alt")
  valid_580432 = validateParameter(valid_580432, JString, required = false,
                                 default = newJString("json"))
  if valid_580432 != nil:
    section.add "alt", valid_580432
  var valid_580433 = query.getOrDefault("userIp")
  valid_580433 = validateParameter(valid_580433, JString, required = false,
                                 default = nil)
  if valid_580433 != nil:
    section.add "userIp", valid_580433
  var valid_580434 = query.getOrDefault("quotaUser")
  valid_580434 = validateParameter(valid_580434, JString, required = false,
                                 default = nil)
  if valid_580434 != nil:
    section.add "quotaUser", valid_580434
  var valid_580435 = query.getOrDefault("pageToken")
  valid_580435 = validateParameter(valid_580435, JString, required = false,
                                 default = nil)
  if valid_580435 != nil:
    section.add "pageToken", valid_580435
  var valid_580436 = query.getOrDefault("fields")
  valid_580436 = validateParameter(valid_580436, JString, required = false,
                                 default = nil)
  if valid_580436 != nil:
    section.add "fields", valid_580436
  var valid_580437 = query.getOrDefault("maxResults")
  valid_580437 = validateParameter(valid_580437, JInt, required = false,
                                 default = newJInt(100))
  if valid_580437 != nil:
    section.add "maxResults", valid_580437
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580439: Call_DfareportingDimensionValuesQuery_580425;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves list of report dimension values for a list of filters.
  ## 
  let valid = call_580439.validator(path, query, header, formData, body)
  let scheme = call_580439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580439.url(scheme.get, call_580439.host, call_580439.base,
                         call_580439.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580439, url, valid)

proc call*(call_580440: Call_DfareportingDimensionValuesQuery_580425;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; pageToken: string = ""; body: JsonNode = nil;
          fields: string = ""; maxResults: int = 100): Recallable =
  ## dfareportingDimensionValuesQuery
  ## Retrieves list of report dimension values for a list of filters.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : The value of the nextToken from the previous result page.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_580441 = newJObject()
  var query_580442 = newJObject()
  var body_580443 = newJObject()
  add(query_580442, "key", newJString(key))
  add(query_580442, "prettyPrint", newJBool(prettyPrint))
  add(query_580442, "oauth_token", newJString(oauthToken))
  add(path_580441, "profileId", newJString(profileId))
  add(query_580442, "alt", newJString(alt))
  add(query_580442, "userIp", newJString(userIp))
  add(query_580442, "quotaUser", newJString(quotaUser))
  add(query_580442, "pageToken", newJString(pageToken))
  if body != nil:
    body_580443 = body
  add(query_580442, "fields", newJString(fields))
  add(query_580442, "maxResults", newJInt(maxResults))
  result = call_580440.call(path_580441, query_580442, nil, nil, body_580443)

var dfareportingDimensionValuesQuery* = Call_DfareportingDimensionValuesQuery_580425(
    name: "dfareportingDimensionValuesQuery", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/dimensionvalues/query",
    validator: validate_DfareportingDimensionValuesQuery_580426,
    base: "/dfareporting/v3.2", url: url_DfareportingDimensionValuesQuery_580427,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySiteContactsList_580444 = ref object of OpenApiRestCall_578364
proc url_DfareportingDirectorySiteContactsList_580446(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySiteContacts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySiteContactsList_580445(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of directory site contacts, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580447 = path.getOrDefault("profileId")
  valid_580447 = validateParameter(valid_580447, JString, required = true,
                                 default = nil)
  if valid_580447 != nil:
    section.add "profileId", valid_580447
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   directorySiteIds: JArray
  ##                   : Select only directory site contacts with these directory site IDs. This is a required field.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "directory site contact*2015" will return objects with names like "directory site contact June 2015", "directory site contact April 2015", or simply "directory site contact 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "directory site contact" will match objects with name "my directory site contact", "directory site contact 2015", or simply "directory site contact".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only directory site contacts with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_580448 = query.getOrDefault("key")
  valid_580448 = validateParameter(valid_580448, JString, required = false,
                                 default = nil)
  if valid_580448 != nil:
    section.add "key", valid_580448
  var valid_580449 = query.getOrDefault("prettyPrint")
  valid_580449 = validateParameter(valid_580449, JBool, required = false,
                                 default = newJBool(true))
  if valid_580449 != nil:
    section.add "prettyPrint", valid_580449
  var valid_580450 = query.getOrDefault("oauth_token")
  valid_580450 = validateParameter(valid_580450, JString, required = false,
                                 default = nil)
  if valid_580450 != nil:
    section.add "oauth_token", valid_580450
  var valid_580451 = query.getOrDefault("sortField")
  valid_580451 = validateParameter(valid_580451, JString, required = false,
                                 default = newJString("ID"))
  if valid_580451 != nil:
    section.add "sortField", valid_580451
  var valid_580452 = query.getOrDefault("alt")
  valid_580452 = validateParameter(valid_580452, JString, required = false,
                                 default = newJString("json"))
  if valid_580452 != nil:
    section.add "alt", valid_580452
  var valid_580453 = query.getOrDefault("userIp")
  valid_580453 = validateParameter(valid_580453, JString, required = false,
                                 default = nil)
  if valid_580453 != nil:
    section.add "userIp", valid_580453
  var valid_580454 = query.getOrDefault("directorySiteIds")
  valid_580454 = validateParameter(valid_580454, JArray, required = false,
                                 default = nil)
  if valid_580454 != nil:
    section.add "directorySiteIds", valid_580454
  var valid_580455 = query.getOrDefault("quotaUser")
  valid_580455 = validateParameter(valid_580455, JString, required = false,
                                 default = nil)
  if valid_580455 != nil:
    section.add "quotaUser", valid_580455
  var valid_580456 = query.getOrDefault("pageToken")
  valid_580456 = validateParameter(valid_580456, JString, required = false,
                                 default = nil)
  if valid_580456 != nil:
    section.add "pageToken", valid_580456
  var valid_580457 = query.getOrDefault("searchString")
  valid_580457 = validateParameter(valid_580457, JString, required = false,
                                 default = nil)
  if valid_580457 != nil:
    section.add "searchString", valid_580457
  var valid_580458 = query.getOrDefault("sortOrder")
  valid_580458 = validateParameter(valid_580458, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580458 != nil:
    section.add "sortOrder", valid_580458
  var valid_580459 = query.getOrDefault("ids")
  valid_580459 = validateParameter(valid_580459, JArray, required = false,
                                 default = nil)
  if valid_580459 != nil:
    section.add "ids", valid_580459
  var valid_580460 = query.getOrDefault("fields")
  valid_580460 = validateParameter(valid_580460, JString, required = false,
                                 default = nil)
  if valid_580460 != nil:
    section.add "fields", valid_580460
  var valid_580461 = query.getOrDefault("maxResults")
  valid_580461 = validateParameter(valid_580461, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580461 != nil:
    section.add "maxResults", valid_580461
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580462: Call_DfareportingDirectorySiteContactsList_580444;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of directory site contacts, possibly filtered. This method supports paging.
  ## 
  let valid = call_580462.validator(path, query, header, formData, body)
  let scheme = call_580462.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580462.url(scheme.get, call_580462.host, call_580462.base,
                         call_580462.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580462, url, valid)

proc call*(call_580463: Call_DfareportingDirectorySiteContactsList_580444;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; sortField: string = "ID"; alt: string = "json";
          userIp: string = ""; directorySiteIds: JsonNode = nil; quotaUser: string = "";
          pageToken: string = ""; searchString: string = "";
          sortOrder: string = "ASCENDING"; ids: JsonNode = nil; fields: string = "";
          maxResults: int = 1000): Recallable =
  ## dfareportingDirectorySiteContactsList
  ## Retrieves a list of directory site contacts, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   directorySiteIds: JArray
  ##                   : Select only directory site contacts with these directory site IDs. This is a required field.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "directory site contact*2015" will return objects with names like "directory site contact June 2015", "directory site contact April 2015", or simply "directory site contact 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "directory site contact" will match objects with name "my directory site contact", "directory site contact 2015", or simply "directory site contact".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only directory site contacts with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_580464 = newJObject()
  var query_580465 = newJObject()
  add(query_580465, "key", newJString(key))
  add(query_580465, "prettyPrint", newJBool(prettyPrint))
  add(query_580465, "oauth_token", newJString(oauthToken))
  add(path_580464, "profileId", newJString(profileId))
  add(query_580465, "sortField", newJString(sortField))
  add(query_580465, "alt", newJString(alt))
  add(query_580465, "userIp", newJString(userIp))
  if directorySiteIds != nil:
    query_580465.add "directorySiteIds", directorySiteIds
  add(query_580465, "quotaUser", newJString(quotaUser))
  add(query_580465, "pageToken", newJString(pageToken))
  add(query_580465, "searchString", newJString(searchString))
  add(query_580465, "sortOrder", newJString(sortOrder))
  if ids != nil:
    query_580465.add "ids", ids
  add(query_580465, "fields", newJString(fields))
  add(query_580465, "maxResults", newJInt(maxResults))
  result = call_580463.call(path_580464, query_580465, nil, nil, nil)

var dfareportingDirectorySiteContactsList* = Call_DfareportingDirectorySiteContactsList_580444(
    name: "dfareportingDirectorySiteContactsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/directorySiteContacts",
    validator: validate_DfareportingDirectorySiteContactsList_580445,
    base: "/dfareporting/v3.2", url: url_DfareportingDirectorySiteContactsList_580446,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySiteContactsGet_580466 = ref object of OpenApiRestCall_578364
proc url_DfareportingDirectorySiteContactsGet_580468(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySiteContacts/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySiteContactsGet_580467(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one directory site contact by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Directory site contact ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580469 = path.getOrDefault("profileId")
  valid_580469 = validateParameter(valid_580469, JString, required = true,
                                 default = nil)
  if valid_580469 != nil:
    section.add "profileId", valid_580469
  var valid_580470 = path.getOrDefault("id")
  valid_580470 = validateParameter(valid_580470, JString, required = true,
                                 default = nil)
  if valid_580470 != nil:
    section.add "id", valid_580470
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580471 = query.getOrDefault("key")
  valid_580471 = validateParameter(valid_580471, JString, required = false,
                                 default = nil)
  if valid_580471 != nil:
    section.add "key", valid_580471
  var valid_580472 = query.getOrDefault("prettyPrint")
  valid_580472 = validateParameter(valid_580472, JBool, required = false,
                                 default = newJBool(true))
  if valid_580472 != nil:
    section.add "prettyPrint", valid_580472
  var valid_580473 = query.getOrDefault("oauth_token")
  valid_580473 = validateParameter(valid_580473, JString, required = false,
                                 default = nil)
  if valid_580473 != nil:
    section.add "oauth_token", valid_580473
  var valid_580474 = query.getOrDefault("alt")
  valid_580474 = validateParameter(valid_580474, JString, required = false,
                                 default = newJString("json"))
  if valid_580474 != nil:
    section.add "alt", valid_580474
  var valid_580475 = query.getOrDefault("userIp")
  valid_580475 = validateParameter(valid_580475, JString, required = false,
                                 default = nil)
  if valid_580475 != nil:
    section.add "userIp", valid_580475
  var valid_580476 = query.getOrDefault("quotaUser")
  valid_580476 = validateParameter(valid_580476, JString, required = false,
                                 default = nil)
  if valid_580476 != nil:
    section.add "quotaUser", valid_580476
  var valid_580477 = query.getOrDefault("fields")
  valid_580477 = validateParameter(valid_580477, JString, required = false,
                                 default = nil)
  if valid_580477 != nil:
    section.add "fields", valid_580477
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580478: Call_DfareportingDirectorySiteContactsGet_580466;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one directory site contact by ID.
  ## 
  let valid = call_580478.validator(path, query, header, formData, body)
  let scheme = call_580478.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580478.url(scheme.get, call_580478.host, call_580478.base,
                         call_580478.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580478, url, valid)

proc call*(call_580479: Call_DfareportingDirectorySiteContactsGet_580466;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingDirectorySiteContactsGet
  ## Gets one directory site contact by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Directory site contact ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580480 = newJObject()
  var query_580481 = newJObject()
  add(query_580481, "key", newJString(key))
  add(query_580481, "prettyPrint", newJBool(prettyPrint))
  add(query_580481, "oauth_token", newJString(oauthToken))
  add(path_580480, "profileId", newJString(profileId))
  add(path_580480, "id", newJString(id))
  add(query_580481, "alt", newJString(alt))
  add(query_580481, "userIp", newJString(userIp))
  add(query_580481, "quotaUser", newJString(quotaUser))
  add(query_580481, "fields", newJString(fields))
  result = call_580479.call(path_580480, query_580481, nil, nil, nil)

var dfareportingDirectorySiteContactsGet* = Call_DfareportingDirectorySiteContactsGet_580466(
    name: "dfareportingDirectorySiteContactsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/directorySiteContacts/{id}",
    validator: validate_DfareportingDirectorySiteContactsGet_580467,
    base: "/dfareporting/v3.2", url: url_DfareportingDirectorySiteContactsGet_580468,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySitesInsert_580510 = ref object of OpenApiRestCall_578364
proc url_DfareportingDirectorySitesInsert_580512(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySitesInsert_580511(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new directory site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580513 = path.getOrDefault("profileId")
  valid_580513 = validateParameter(valid_580513, JString, required = true,
                                 default = nil)
  if valid_580513 != nil:
    section.add "profileId", valid_580513
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580514 = query.getOrDefault("key")
  valid_580514 = validateParameter(valid_580514, JString, required = false,
                                 default = nil)
  if valid_580514 != nil:
    section.add "key", valid_580514
  var valid_580515 = query.getOrDefault("prettyPrint")
  valid_580515 = validateParameter(valid_580515, JBool, required = false,
                                 default = newJBool(true))
  if valid_580515 != nil:
    section.add "prettyPrint", valid_580515
  var valid_580516 = query.getOrDefault("oauth_token")
  valid_580516 = validateParameter(valid_580516, JString, required = false,
                                 default = nil)
  if valid_580516 != nil:
    section.add "oauth_token", valid_580516
  var valid_580517 = query.getOrDefault("alt")
  valid_580517 = validateParameter(valid_580517, JString, required = false,
                                 default = newJString("json"))
  if valid_580517 != nil:
    section.add "alt", valid_580517
  var valid_580518 = query.getOrDefault("userIp")
  valid_580518 = validateParameter(valid_580518, JString, required = false,
                                 default = nil)
  if valid_580518 != nil:
    section.add "userIp", valid_580518
  var valid_580519 = query.getOrDefault("quotaUser")
  valid_580519 = validateParameter(valid_580519, JString, required = false,
                                 default = nil)
  if valid_580519 != nil:
    section.add "quotaUser", valid_580519
  var valid_580520 = query.getOrDefault("fields")
  valid_580520 = validateParameter(valid_580520, JString, required = false,
                                 default = nil)
  if valid_580520 != nil:
    section.add "fields", valid_580520
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580522: Call_DfareportingDirectorySitesInsert_580510;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new directory site.
  ## 
  let valid = call_580522.validator(path, query, header, formData, body)
  let scheme = call_580522.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580522.url(scheme.get, call_580522.host, call_580522.base,
                         call_580522.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580522, url, valid)

proc call*(call_580523: Call_DfareportingDirectorySitesInsert_580510;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingDirectorySitesInsert
  ## Inserts a new directory site.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580524 = newJObject()
  var query_580525 = newJObject()
  var body_580526 = newJObject()
  add(query_580525, "key", newJString(key))
  add(query_580525, "prettyPrint", newJBool(prettyPrint))
  add(query_580525, "oauth_token", newJString(oauthToken))
  add(path_580524, "profileId", newJString(profileId))
  add(query_580525, "alt", newJString(alt))
  add(query_580525, "userIp", newJString(userIp))
  add(query_580525, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580526 = body
  add(query_580525, "fields", newJString(fields))
  result = call_580523.call(path_580524, query_580525, nil, nil, body_580526)

var dfareportingDirectorySitesInsert* = Call_DfareportingDirectorySitesInsert_580510(
    name: "dfareportingDirectorySitesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/directorySites",
    validator: validate_DfareportingDirectorySitesInsert_580511,
    base: "/dfareporting/v3.2", url: url_DfareportingDirectorySitesInsert_580512,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySitesList_580482 = ref object of OpenApiRestCall_578364
proc url_DfareportingDirectorySitesList_580484(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySitesList_580483(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of directory sites, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580485 = path.getOrDefault("profileId")
  valid_580485 = validateParameter(valid_580485, JString, required = true,
                                 default = nil)
  if valid_580485 != nil:
    section.add "profileId", valid_580485
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   acceptsPublisherPaidPlacements: JBool
  ##                                 : Select only directory sites that accept publisher paid placements. This field can be left blank.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   active: JBool
  ##         : Select only active directory sites. Leave blank to retrieve both active and inactive directory sites.
  ##   countryId: JString
  ##            : Select only directory sites with this country ID.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   acceptsInterstitialPlacements: JBool
  ##                                : This search filter is no longer supported and will have no effect on the results returned.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name, ID or URL. Wildcards (*) are allowed. For example, "directory site*2015" will return objects with names like "directory site June 2015", "directory site April 2015", or simply "directory site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "directory site" will match objects with name "my directory site", "directory site 2015" or simply, "directory site".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   dfpNetworkCode: JString
  ##                 : Select only directory sites with this Ad Manager network code.
  ##   acceptsInStreamVideoPlacements: JBool
  ##                                 : This search filter is no longer supported and will have no effect on the results returned.
  ##   ids: JArray
  ##      : Select only directory sites with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   parentId: JString
  ##           : Select only directory sites with this parent ID.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_580486 = query.getOrDefault("key")
  valid_580486 = validateParameter(valid_580486, JString, required = false,
                                 default = nil)
  if valid_580486 != nil:
    section.add "key", valid_580486
  var valid_580487 = query.getOrDefault("acceptsPublisherPaidPlacements")
  valid_580487 = validateParameter(valid_580487, JBool, required = false, default = nil)
  if valid_580487 != nil:
    section.add "acceptsPublisherPaidPlacements", valid_580487
  var valid_580488 = query.getOrDefault("prettyPrint")
  valid_580488 = validateParameter(valid_580488, JBool, required = false,
                                 default = newJBool(true))
  if valid_580488 != nil:
    section.add "prettyPrint", valid_580488
  var valid_580489 = query.getOrDefault("oauth_token")
  valid_580489 = validateParameter(valid_580489, JString, required = false,
                                 default = nil)
  if valid_580489 != nil:
    section.add "oauth_token", valid_580489
  var valid_580490 = query.getOrDefault("active")
  valid_580490 = validateParameter(valid_580490, JBool, required = false, default = nil)
  if valid_580490 != nil:
    section.add "active", valid_580490
  var valid_580491 = query.getOrDefault("countryId")
  valid_580491 = validateParameter(valid_580491, JString, required = false,
                                 default = nil)
  if valid_580491 != nil:
    section.add "countryId", valid_580491
  var valid_580492 = query.getOrDefault("sortField")
  valid_580492 = validateParameter(valid_580492, JString, required = false,
                                 default = newJString("ID"))
  if valid_580492 != nil:
    section.add "sortField", valid_580492
  var valid_580493 = query.getOrDefault("alt")
  valid_580493 = validateParameter(valid_580493, JString, required = false,
                                 default = newJString("json"))
  if valid_580493 != nil:
    section.add "alt", valid_580493
  var valid_580494 = query.getOrDefault("userIp")
  valid_580494 = validateParameter(valid_580494, JString, required = false,
                                 default = nil)
  if valid_580494 != nil:
    section.add "userIp", valid_580494
  var valid_580495 = query.getOrDefault("acceptsInterstitialPlacements")
  valid_580495 = validateParameter(valid_580495, JBool, required = false, default = nil)
  if valid_580495 != nil:
    section.add "acceptsInterstitialPlacements", valid_580495
  var valid_580496 = query.getOrDefault("quotaUser")
  valid_580496 = validateParameter(valid_580496, JString, required = false,
                                 default = nil)
  if valid_580496 != nil:
    section.add "quotaUser", valid_580496
  var valid_580497 = query.getOrDefault("pageToken")
  valid_580497 = validateParameter(valid_580497, JString, required = false,
                                 default = nil)
  if valid_580497 != nil:
    section.add "pageToken", valid_580497
  var valid_580498 = query.getOrDefault("searchString")
  valid_580498 = validateParameter(valid_580498, JString, required = false,
                                 default = nil)
  if valid_580498 != nil:
    section.add "searchString", valid_580498
  var valid_580499 = query.getOrDefault("sortOrder")
  valid_580499 = validateParameter(valid_580499, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580499 != nil:
    section.add "sortOrder", valid_580499
  var valid_580500 = query.getOrDefault("dfpNetworkCode")
  valid_580500 = validateParameter(valid_580500, JString, required = false,
                                 default = nil)
  if valid_580500 != nil:
    section.add "dfpNetworkCode", valid_580500
  var valid_580501 = query.getOrDefault("acceptsInStreamVideoPlacements")
  valid_580501 = validateParameter(valid_580501, JBool, required = false, default = nil)
  if valid_580501 != nil:
    section.add "acceptsInStreamVideoPlacements", valid_580501
  var valid_580502 = query.getOrDefault("ids")
  valid_580502 = validateParameter(valid_580502, JArray, required = false,
                                 default = nil)
  if valid_580502 != nil:
    section.add "ids", valid_580502
  var valid_580503 = query.getOrDefault("fields")
  valid_580503 = validateParameter(valid_580503, JString, required = false,
                                 default = nil)
  if valid_580503 != nil:
    section.add "fields", valid_580503
  var valid_580504 = query.getOrDefault("parentId")
  valid_580504 = validateParameter(valid_580504, JString, required = false,
                                 default = nil)
  if valid_580504 != nil:
    section.add "parentId", valid_580504
  var valid_580505 = query.getOrDefault("maxResults")
  valid_580505 = validateParameter(valid_580505, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580505 != nil:
    section.add "maxResults", valid_580505
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580506: Call_DfareportingDirectorySitesList_580482; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of directory sites, possibly filtered. This method supports paging.
  ## 
  let valid = call_580506.validator(path, query, header, formData, body)
  let scheme = call_580506.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580506.url(scheme.get, call_580506.host, call_580506.base,
                         call_580506.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580506, url, valid)

proc call*(call_580507: Call_DfareportingDirectorySitesList_580482;
          profileId: string; key: string = "";
          acceptsPublisherPaidPlacements: bool = false; prettyPrint: bool = true;
          oauthToken: string = ""; active: bool = false; countryId: string = "";
          sortField: string = "ID"; alt: string = "json"; userIp: string = "";
          acceptsInterstitialPlacements: bool = false; quotaUser: string = "";
          pageToken: string = ""; searchString: string = "";
          sortOrder: string = "ASCENDING"; dfpNetworkCode: string = "";
          acceptsInStreamVideoPlacements: bool = false; ids: JsonNode = nil;
          fields: string = ""; parentId: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingDirectorySitesList
  ## Retrieves a list of directory sites, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   acceptsPublisherPaidPlacements: bool
  ##                                 : Select only directory sites that accept publisher paid placements. This field can be left blank.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   active: bool
  ##         : Select only active directory sites. Leave blank to retrieve both active and inactive directory sites.
  ##   countryId: string
  ##            : Select only directory sites with this country ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   acceptsInterstitialPlacements: bool
  ##                                : This search filter is no longer supported and will have no effect on the results returned.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name, ID or URL. Wildcards (*) are allowed. For example, "directory site*2015" will return objects with names like "directory site June 2015", "directory site April 2015", or simply "directory site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "directory site" will match objects with name "my directory site", "directory site 2015" or simply, "directory site".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   dfpNetworkCode: string
  ##                 : Select only directory sites with this Ad Manager network code.
  ##   acceptsInStreamVideoPlacements: bool
  ##                                 : This search filter is no longer supported and will have no effect on the results returned.
  ##   ids: JArray
  ##      : Select only directory sites with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   parentId: string
  ##           : Select only directory sites with this parent ID.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_580508 = newJObject()
  var query_580509 = newJObject()
  add(query_580509, "key", newJString(key))
  add(query_580509, "acceptsPublisherPaidPlacements",
      newJBool(acceptsPublisherPaidPlacements))
  add(query_580509, "prettyPrint", newJBool(prettyPrint))
  add(query_580509, "oauth_token", newJString(oauthToken))
  add(query_580509, "active", newJBool(active))
  add(query_580509, "countryId", newJString(countryId))
  add(path_580508, "profileId", newJString(profileId))
  add(query_580509, "sortField", newJString(sortField))
  add(query_580509, "alt", newJString(alt))
  add(query_580509, "userIp", newJString(userIp))
  add(query_580509, "acceptsInterstitialPlacements",
      newJBool(acceptsInterstitialPlacements))
  add(query_580509, "quotaUser", newJString(quotaUser))
  add(query_580509, "pageToken", newJString(pageToken))
  add(query_580509, "searchString", newJString(searchString))
  add(query_580509, "sortOrder", newJString(sortOrder))
  add(query_580509, "dfpNetworkCode", newJString(dfpNetworkCode))
  add(query_580509, "acceptsInStreamVideoPlacements",
      newJBool(acceptsInStreamVideoPlacements))
  if ids != nil:
    query_580509.add "ids", ids
  add(query_580509, "fields", newJString(fields))
  add(query_580509, "parentId", newJString(parentId))
  add(query_580509, "maxResults", newJInt(maxResults))
  result = call_580507.call(path_580508, query_580509, nil, nil, nil)

var dfareportingDirectorySitesList* = Call_DfareportingDirectorySitesList_580482(
    name: "dfareportingDirectorySitesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/directorySites",
    validator: validate_DfareportingDirectorySitesList_580483,
    base: "/dfareporting/v3.2", url: url_DfareportingDirectorySitesList_580484,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySitesGet_580527 = ref object of OpenApiRestCall_578364
proc url_DfareportingDirectorySitesGet_580529(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySites/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySitesGet_580528(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one directory site by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Directory site ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580530 = path.getOrDefault("profileId")
  valid_580530 = validateParameter(valid_580530, JString, required = true,
                                 default = nil)
  if valid_580530 != nil:
    section.add "profileId", valid_580530
  var valid_580531 = path.getOrDefault("id")
  valid_580531 = validateParameter(valid_580531, JString, required = true,
                                 default = nil)
  if valid_580531 != nil:
    section.add "id", valid_580531
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580532 = query.getOrDefault("key")
  valid_580532 = validateParameter(valid_580532, JString, required = false,
                                 default = nil)
  if valid_580532 != nil:
    section.add "key", valid_580532
  var valid_580533 = query.getOrDefault("prettyPrint")
  valid_580533 = validateParameter(valid_580533, JBool, required = false,
                                 default = newJBool(true))
  if valid_580533 != nil:
    section.add "prettyPrint", valid_580533
  var valid_580534 = query.getOrDefault("oauth_token")
  valid_580534 = validateParameter(valid_580534, JString, required = false,
                                 default = nil)
  if valid_580534 != nil:
    section.add "oauth_token", valid_580534
  var valid_580535 = query.getOrDefault("alt")
  valid_580535 = validateParameter(valid_580535, JString, required = false,
                                 default = newJString("json"))
  if valid_580535 != nil:
    section.add "alt", valid_580535
  var valid_580536 = query.getOrDefault("userIp")
  valid_580536 = validateParameter(valid_580536, JString, required = false,
                                 default = nil)
  if valid_580536 != nil:
    section.add "userIp", valid_580536
  var valid_580537 = query.getOrDefault("quotaUser")
  valid_580537 = validateParameter(valid_580537, JString, required = false,
                                 default = nil)
  if valid_580537 != nil:
    section.add "quotaUser", valid_580537
  var valid_580538 = query.getOrDefault("fields")
  valid_580538 = validateParameter(valid_580538, JString, required = false,
                                 default = nil)
  if valid_580538 != nil:
    section.add "fields", valid_580538
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580539: Call_DfareportingDirectorySitesGet_580527; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one directory site by ID.
  ## 
  let valid = call_580539.validator(path, query, header, formData, body)
  let scheme = call_580539.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580539.url(scheme.get, call_580539.host, call_580539.base,
                         call_580539.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580539, url, valid)

proc call*(call_580540: Call_DfareportingDirectorySitesGet_580527;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingDirectorySitesGet
  ## Gets one directory site by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Directory site ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580541 = newJObject()
  var query_580542 = newJObject()
  add(query_580542, "key", newJString(key))
  add(query_580542, "prettyPrint", newJBool(prettyPrint))
  add(query_580542, "oauth_token", newJString(oauthToken))
  add(path_580541, "profileId", newJString(profileId))
  add(path_580541, "id", newJString(id))
  add(query_580542, "alt", newJString(alt))
  add(query_580542, "userIp", newJString(userIp))
  add(query_580542, "quotaUser", newJString(quotaUser))
  add(query_580542, "fields", newJString(fields))
  result = call_580540.call(path_580541, query_580542, nil, nil, nil)

var dfareportingDirectorySitesGet* = Call_DfareportingDirectorySitesGet_580527(
    name: "dfareportingDirectorySitesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/directorySites/{id}",
    validator: validate_DfareportingDirectorySitesGet_580528,
    base: "/dfareporting/v3.2", url: url_DfareportingDirectorySitesGet_580529,
    schemes: {Scheme.Https})
type
  Call_DfareportingDynamicTargetingKeysInsert_580562 = ref object of OpenApiRestCall_578364
proc url_DfareportingDynamicTargetingKeysInsert_580564(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/dynamicTargetingKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDynamicTargetingKeysInsert_580563(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580565 = path.getOrDefault("profileId")
  valid_580565 = validateParameter(valid_580565, JString, required = true,
                                 default = nil)
  if valid_580565 != nil:
    section.add "profileId", valid_580565
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580566 = query.getOrDefault("key")
  valid_580566 = validateParameter(valid_580566, JString, required = false,
                                 default = nil)
  if valid_580566 != nil:
    section.add "key", valid_580566
  var valid_580567 = query.getOrDefault("prettyPrint")
  valid_580567 = validateParameter(valid_580567, JBool, required = false,
                                 default = newJBool(true))
  if valid_580567 != nil:
    section.add "prettyPrint", valid_580567
  var valid_580568 = query.getOrDefault("oauth_token")
  valid_580568 = validateParameter(valid_580568, JString, required = false,
                                 default = nil)
  if valid_580568 != nil:
    section.add "oauth_token", valid_580568
  var valid_580569 = query.getOrDefault("alt")
  valid_580569 = validateParameter(valid_580569, JString, required = false,
                                 default = newJString("json"))
  if valid_580569 != nil:
    section.add "alt", valid_580569
  var valid_580570 = query.getOrDefault("userIp")
  valid_580570 = validateParameter(valid_580570, JString, required = false,
                                 default = nil)
  if valid_580570 != nil:
    section.add "userIp", valid_580570
  var valid_580571 = query.getOrDefault("quotaUser")
  valid_580571 = validateParameter(valid_580571, JString, required = false,
                                 default = nil)
  if valid_580571 != nil:
    section.add "quotaUser", valid_580571
  var valid_580572 = query.getOrDefault("fields")
  valid_580572 = validateParameter(valid_580572, JString, required = false,
                                 default = nil)
  if valid_580572 != nil:
    section.add "fields", valid_580572
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580574: Call_DfareportingDynamicTargetingKeysInsert_580562;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.
  ## 
  let valid = call_580574.validator(path, query, header, formData, body)
  let scheme = call_580574.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580574.url(scheme.get, call_580574.host, call_580574.base,
                         call_580574.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580574, url, valid)

proc call*(call_580575: Call_DfareportingDynamicTargetingKeysInsert_580562;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingDynamicTargetingKeysInsert
  ## Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580576 = newJObject()
  var query_580577 = newJObject()
  var body_580578 = newJObject()
  add(query_580577, "key", newJString(key))
  add(query_580577, "prettyPrint", newJBool(prettyPrint))
  add(query_580577, "oauth_token", newJString(oauthToken))
  add(path_580576, "profileId", newJString(profileId))
  add(query_580577, "alt", newJString(alt))
  add(query_580577, "userIp", newJString(userIp))
  add(query_580577, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580578 = body
  add(query_580577, "fields", newJString(fields))
  result = call_580575.call(path_580576, query_580577, nil, nil, body_580578)

var dfareportingDynamicTargetingKeysInsert* = Call_DfareportingDynamicTargetingKeysInsert_580562(
    name: "dfareportingDynamicTargetingKeysInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/dynamicTargetingKeys",
    validator: validate_DfareportingDynamicTargetingKeysInsert_580563,
    base: "/dfareporting/v3.2", url: url_DfareportingDynamicTargetingKeysInsert_580564,
    schemes: {Scheme.Https})
type
  Call_DfareportingDynamicTargetingKeysList_580543 = ref object of OpenApiRestCall_578364
proc url_DfareportingDynamicTargetingKeysList_580545(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/dynamicTargetingKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDynamicTargetingKeysList_580544(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of dynamic targeting keys.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580546 = path.getOrDefault("profileId")
  valid_580546 = validateParameter(valid_580546, JString, required = true,
                                 default = nil)
  if valid_580546 != nil:
    section.add "profileId", valid_580546
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   names: JArray
  ##        : Select only dynamic targeting keys exactly matching these names.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   objectType: JString
  ##             : Select only dynamic targeting keys with this object type.
  ##   objectId: JString
  ##           : Select only dynamic targeting keys with this object ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   advertiserId: JString
  ##               : Select only dynamic targeting keys whose object has this advertiser ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580547 = query.getOrDefault("key")
  valid_580547 = validateParameter(valid_580547, JString, required = false,
                                 default = nil)
  if valid_580547 != nil:
    section.add "key", valid_580547
  var valid_580548 = query.getOrDefault("names")
  valid_580548 = validateParameter(valid_580548, JArray, required = false,
                                 default = nil)
  if valid_580548 != nil:
    section.add "names", valid_580548
  var valid_580549 = query.getOrDefault("prettyPrint")
  valid_580549 = validateParameter(valid_580549, JBool, required = false,
                                 default = newJBool(true))
  if valid_580549 != nil:
    section.add "prettyPrint", valid_580549
  var valid_580550 = query.getOrDefault("oauth_token")
  valid_580550 = validateParameter(valid_580550, JString, required = false,
                                 default = nil)
  if valid_580550 != nil:
    section.add "oauth_token", valid_580550
  var valid_580551 = query.getOrDefault("objectType")
  valid_580551 = validateParameter(valid_580551, JString, required = false,
                                 default = newJString("OBJECT_AD"))
  if valid_580551 != nil:
    section.add "objectType", valid_580551
  var valid_580552 = query.getOrDefault("objectId")
  valid_580552 = validateParameter(valid_580552, JString, required = false,
                                 default = nil)
  if valid_580552 != nil:
    section.add "objectId", valid_580552
  var valid_580553 = query.getOrDefault("alt")
  valid_580553 = validateParameter(valid_580553, JString, required = false,
                                 default = newJString("json"))
  if valid_580553 != nil:
    section.add "alt", valid_580553
  var valid_580554 = query.getOrDefault("userIp")
  valid_580554 = validateParameter(valid_580554, JString, required = false,
                                 default = nil)
  if valid_580554 != nil:
    section.add "userIp", valid_580554
  var valid_580555 = query.getOrDefault("quotaUser")
  valid_580555 = validateParameter(valid_580555, JString, required = false,
                                 default = nil)
  if valid_580555 != nil:
    section.add "quotaUser", valid_580555
  var valid_580556 = query.getOrDefault("advertiserId")
  valid_580556 = validateParameter(valid_580556, JString, required = false,
                                 default = nil)
  if valid_580556 != nil:
    section.add "advertiserId", valid_580556
  var valid_580557 = query.getOrDefault("fields")
  valid_580557 = validateParameter(valid_580557, JString, required = false,
                                 default = nil)
  if valid_580557 != nil:
    section.add "fields", valid_580557
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580558: Call_DfareportingDynamicTargetingKeysList_580543;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of dynamic targeting keys.
  ## 
  let valid = call_580558.validator(path, query, header, formData, body)
  let scheme = call_580558.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580558.url(scheme.get, call_580558.host, call_580558.base,
                         call_580558.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580558, url, valid)

proc call*(call_580559: Call_DfareportingDynamicTargetingKeysList_580543;
          profileId: string; key: string = ""; names: JsonNode = nil;
          prettyPrint: bool = true; oauthToken: string = "";
          objectType: string = "OBJECT_AD"; objectId: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; advertiserId: string = "";
          fields: string = ""): Recallable =
  ## dfareportingDynamicTargetingKeysList
  ## Retrieves a list of dynamic targeting keys.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   names: JArray
  ##        : Select only dynamic targeting keys exactly matching these names.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   objectType: string
  ##             : Select only dynamic targeting keys with this object type.
  ##   objectId: string
  ##           : Select only dynamic targeting keys with this object ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   advertiserId: string
  ##               : Select only dynamic targeting keys whose object has this advertiser ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580560 = newJObject()
  var query_580561 = newJObject()
  add(query_580561, "key", newJString(key))
  if names != nil:
    query_580561.add "names", names
  add(query_580561, "prettyPrint", newJBool(prettyPrint))
  add(query_580561, "oauth_token", newJString(oauthToken))
  add(query_580561, "objectType", newJString(objectType))
  add(query_580561, "objectId", newJString(objectId))
  add(path_580560, "profileId", newJString(profileId))
  add(query_580561, "alt", newJString(alt))
  add(query_580561, "userIp", newJString(userIp))
  add(query_580561, "quotaUser", newJString(quotaUser))
  add(query_580561, "advertiserId", newJString(advertiserId))
  add(query_580561, "fields", newJString(fields))
  result = call_580559.call(path_580560, query_580561, nil, nil, nil)

var dfareportingDynamicTargetingKeysList* = Call_DfareportingDynamicTargetingKeysList_580543(
    name: "dfareportingDynamicTargetingKeysList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/dynamicTargetingKeys",
    validator: validate_DfareportingDynamicTargetingKeysList_580544,
    base: "/dfareporting/v3.2", url: url_DfareportingDynamicTargetingKeysList_580545,
    schemes: {Scheme.Https})
type
  Call_DfareportingDynamicTargetingKeysDelete_580579 = ref object of OpenApiRestCall_578364
proc url_DfareportingDynamicTargetingKeysDelete_580581(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "objectId" in path, "`objectId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/dynamicTargetingKeys/"),
               (kind: VariableSegment, value: "objectId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDynamicTargetingKeysDelete_580580(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing dynamic targeting key.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   objectId: JString (required)
  ##           : ID of the object of this dynamic targeting key. This is a required field.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580582 = path.getOrDefault("profileId")
  valid_580582 = validateParameter(valid_580582, JString, required = true,
                                 default = nil)
  if valid_580582 != nil:
    section.add "profileId", valid_580582
  var valid_580583 = path.getOrDefault("objectId")
  valid_580583 = validateParameter(valid_580583, JString, required = true,
                                 default = nil)
  if valid_580583 != nil:
    section.add "objectId", valid_580583
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   objectType: JString (required)
  ##             : Type of the object of this dynamic targeting key. This is a required field.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   name: JString (required)
  ##       : Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long and cannot contain commas. All characters are converted to lowercase.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580584 = query.getOrDefault("key")
  valid_580584 = validateParameter(valid_580584, JString, required = false,
                                 default = nil)
  if valid_580584 != nil:
    section.add "key", valid_580584
  assert query != nil,
        "query argument is necessary due to required `objectType` field"
  var valid_580585 = query.getOrDefault("objectType")
  valid_580585 = validateParameter(valid_580585, JString, required = true,
                                 default = newJString("OBJECT_AD"))
  if valid_580585 != nil:
    section.add "objectType", valid_580585
  var valid_580586 = query.getOrDefault("prettyPrint")
  valid_580586 = validateParameter(valid_580586, JBool, required = false,
                                 default = newJBool(true))
  if valid_580586 != nil:
    section.add "prettyPrint", valid_580586
  var valid_580587 = query.getOrDefault("oauth_token")
  valid_580587 = validateParameter(valid_580587, JString, required = false,
                                 default = nil)
  if valid_580587 != nil:
    section.add "oauth_token", valid_580587
  var valid_580588 = query.getOrDefault("name")
  valid_580588 = validateParameter(valid_580588, JString, required = true,
                                 default = nil)
  if valid_580588 != nil:
    section.add "name", valid_580588
  var valid_580589 = query.getOrDefault("alt")
  valid_580589 = validateParameter(valid_580589, JString, required = false,
                                 default = newJString("json"))
  if valid_580589 != nil:
    section.add "alt", valid_580589
  var valid_580590 = query.getOrDefault("userIp")
  valid_580590 = validateParameter(valid_580590, JString, required = false,
                                 default = nil)
  if valid_580590 != nil:
    section.add "userIp", valid_580590
  var valid_580591 = query.getOrDefault("quotaUser")
  valid_580591 = validateParameter(valid_580591, JString, required = false,
                                 default = nil)
  if valid_580591 != nil:
    section.add "quotaUser", valid_580591
  var valid_580592 = query.getOrDefault("fields")
  valid_580592 = validateParameter(valid_580592, JString, required = false,
                                 default = nil)
  if valid_580592 != nil:
    section.add "fields", valid_580592
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580593: Call_DfareportingDynamicTargetingKeysDelete_580579;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing dynamic targeting key.
  ## 
  let valid = call_580593.validator(path, query, header, formData, body)
  let scheme = call_580593.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580593.url(scheme.get, call_580593.host, call_580593.base,
                         call_580593.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580593, url, valid)

proc call*(call_580594: Call_DfareportingDynamicTargetingKeysDelete_580579;
          name: string; profileId: string; objectId: string; key: string = "";
          objectType: string = "OBJECT_AD"; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingDynamicTargetingKeysDelete
  ## Deletes an existing dynamic targeting key.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   objectType: string (required)
  ##             : Type of the object of this dynamic targeting key. This is a required field.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   name: string (required)
  ##       : Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long and cannot contain commas. All characters are converted to lowercase.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   objectId: string (required)
  ##           : ID of the object of this dynamic targeting key. This is a required field.
  var path_580595 = newJObject()
  var query_580596 = newJObject()
  add(query_580596, "key", newJString(key))
  add(query_580596, "objectType", newJString(objectType))
  add(query_580596, "prettyPrint", newJBool(prettyPrint))
  add(query_580596, "oauth_token", newJString(oauthToken))
  add(query_580596, "name", newJString(name))
  add(path_580595, "profileId", newJString(profileId))
  add(query_580596, "alt", newJString(alt))
  add(query_580596, "userIp", newJString(userIp))
  add(query_580596, "quotaUser", newJString(quotaUser))
  add(query_580596, "fields", newJString(fields))
  add(path_580595, "objectId", newJString(objectId))
  result = call_580594.call(path_580595, query_580596, nil, nil, nil)

var dfareportingDynamicTargetingKeysDelete* = Call_DfareportingDynamicTargetingKeysDelete_580579(
    name: "dfareportingDynamicTargetingKeysDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/dynamicTargetingKeys/{objectId}",
    validator: validate_DfareportingDynamicTargetingKeysDelete_580580,
    base: "/dfareporting/v3.2", url: url_DfareportingDynamicTargetingKeysDelete_580581,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsUpdate_580622 = ref object of OpenApiRestCall_578364
proc url_DfareportingEventTagsUpdate_580624(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsUpdate_580623(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing event tag.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580625 = path.getOrDefault("profileId")
  valid_580625 = validateParameter(valid_580625, JString, required = true,
                                 default = nil)
  if valid_580625 != nil:
    section.add "profileId", valid_580625
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580626 = query.getOrDefault("key")
  valid_580626 = validateParameter(valid_580626, JString, required = false,
                                 default = nil)
  if valid_580626 != nil:
    section.add "key", valid_580626
  var valid_580627 = query.getOrDefault("prettyPrint")
  valid_580627 = validateParameter(valid_580627, JBool, required = false,
                                 default = newJBool(true))
  if valid_580627 != nil:
    section.add "prettyPrint", valid_580627
  var valid_580628 = query.getOrDefault("oauth_token")
  valid_580628 = validateParameter(valid_580628, JString, required = false,
                                 default = nil)
  if valid_580628 != nil:
    section.add "oauth_token", valid_580628
  var valid_580629 = query.getOrDefault("alt")
  valid_580629 = validateParameter(valid_580629, JString, required = false,
                                 default = newJString("json"))
  if valid_580629 != nil:
    section.add "alt", valid_580629
  var valid_580630 = query.getOrDefault("userIp")
  valid_580630 = validateParameter(valid_580630, JString, required = false,
                                 default = nil)
  if valid_580630 != nil:
    section.add "userIp", valid_580630
  var valid_580631 = query.getOrDefault("quotaUser")
  valid_580631 = validateParameter(valid_580631, JString, required = false,
                                 default = nil)
  if valid_580631 != nil:
    section.add "quotaUser", valid_580631
  var valid_580632 = query.getOrDefault("fields")
  valid_580632 = validateParameter(valid_580632, JString, required = false,
                                 default = nil)
  if valid_580632 != nil:
    section.add "fields", valid_580632
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580634: Call_DfareportingEventTagsUpdate_580622; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing event tag.
  ## 
  let valid = call_580634.validator(path, query, header, formData, body)
  let scheme = call_580634.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580634.url(scheme.get, call_580634.host, call_580634.base,
                         call_580634.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580634, url, valid)

proc call*(call_580635: Call_DfareportingEventTagsUpdate_580622; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingEventTagsUpdate
  ## Updates an existing event tag.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580636 = newJObject()
  var query_580637 = newJObject()
  var body_580638 = newJObject()
  add(query_580637, "key", newJString(key))
  add(query_580637, "prettyPrint", newJBool(prettyPrint))
  add(query_580637, "oauth_token", newJString(oauthToken))
  add(path_580636, "profileId", newJString(profileId))
  add(query_580637, "alt", newJString(alt))
  add(query_580637, "userIp", newJString(userIp))
  add(query_580637, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580638 = body
  add(query_580637, "fields", newJString(fields))
  result = call_580635.call(path_580636, query_580637, nil, nil, body_580638)

var dfareportingEventTagsUpdate* = Call_DfareportingEventTagsUpdate_580622(
    name: "dfareportingEventTagsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags",
    validator: validate_DfareportingEventTagsUpdate_580623,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsUpdate_580624,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsInsert_580639 = ref object of OpenApiRestCall_578364
proc url_DfareportingEventTagsInsert_580641(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsInsert_580640(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new event tag.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580642 = path.getOrDefault("profileId")
  valid_580642 = validateParameter(valid_580642, JString, required = true,
                                 default = nil)
  if valid_580642 != nil:
    section.add "profileId", valid_580642
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580643 = query.getOrDefault("key")
  valid_580643 = validateParameter(valid_580643, JString, required = false,
                                 default = nil)
  if valid_580643 != nil:
    section.add "key", valid_580643
  var valid_580644 = query.getOrDefault("prettyPrint")
  valid_580644 = validateParameter(valid_580644, JBool, required = false,
                                 default = newJBool(true))
  if valid_580644 != nil:
    section.add "prettyPrint", valid_580644
  var valid_580645 = query.getOrDefault("oauth_token")
  valid_580645 = validateParameter(valid_580645, JString, required = false,
                                 default = nil)
  if valid_580645 != nil:
    section.add "oauth_token", valid_580645
  var valid_580646 = query.getOrDefault("alt")
  valid_580646 = validateParameter(valid_580646, JString, required = false,
                                 default = newJString("json"))
  if valid_580646 != nil:
    section.add "alt", valid_580646
  var valid_580647 = query.getOrDefault("userIp")
  valid_580647 = validateParameter(valid_580647, JString, required = false,
                                 default = nil)
  if valid_580647 != nil:
    section.add "userIp", valid_580647
  var valid_580648 = query.getOrDefault("quotaUser")
  valid_580648 = validateParameter(valid_580648, JString, required = false,
                                 default = nil)
  if valid_580648 != nil:
    section.add "quotaUser", valid_580648
  var valid_580649 = query.getOrDefault("fields")
  valid_580649 = validateParameter(valid_580649, JString, required = false,
                                 default = nil)
  if valid_580649 != nil:
    section.add "fields", valid_580649
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580651: Call_DfareportingEventTagsInsert_580639; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new event tag.
  ## 
  let valid = call_580651.validator(path, query, header, formData, body)
  let scheme = call_580651.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580651.url(scheme.get, call_580651.host, call_580651.base,
                         call_580651.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580651, url, valid)

proc call*(call_580652: Call_DfareportingEventTagsInsert_580639; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingEventTagsInsert
  ## Inserts a new event tag.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580653 = newJObject()
  var query_580654 = newJObject()
  var body_580655 = newJObject()
  add(query_580654, "key", newJString(key))
  add(query_580654, "prettyPrint", newJBool(prettyPrint))
  add(query_580654, "oauth_token", newJString(oauthToken))
  add(path_580653, "profileId", newJString(profileId))
  add(query_580654, "alt", newJString(alt))
  add(query_580654, "userIp", newJString(userIp))
  add(query_580654, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580655 = body
  add(query_580654, "fields", newJString(fields))
  result = call_580652.call(path_580653, query_580654, nil, nil, body_580655)

var dfareportingEventTagsInsert* = Call_DfareportingEventTagsInsert_580639(
    name: "dfareportingEventTagsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags",
    validator: validate_DfareportingEventTagsInsert_580640,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsInsert_580641,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsList_580597 = ref object of OpenApiRestCall_578364
proc url_DfareportingEventTagsList_580599(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsList_580598(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of event tags, possibly filtered.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580600 = path.getOrDefault("profileId")
  valid_580600 = validateParameter(valid_580600, JString, required = true,
                                 default = nil)
  if valid_580600 != nil:
    section.add "profileId", valid_580600
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   adId: JString
  ##       : Select only event tags that belong to this ad.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   definitionsOnly: JBool
  ##                  : Examine only the specified campaign or advertiser's event tags for matching selector criteria. When set to false, the parent advertiser and parent campaign of the specified ad or campaign is examined as well. In addition, when set to false, the status field is examined as well, along with the enabledByDefault field. This parameter can not be set to true when adId is specified as ads do not define their own even tags.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   campaignId: JString
  ##             : Select only event tags that belong to this campaign.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "eventtag*2015" will return objects with names like "eventtag June 2015", "eventtag April 2015", or simply "eventtag 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "eventtag" will match objects with name "my eventtag", "eventtag 2015", or simply "eventtag".
  ##   eventTagTypes: JArray
  ##                : Select only event tags with the specified event tag types. Event tag types can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   advertiserId: JString
  ##               : Select only event tags that belong to this advertiser.
  ##   enabled: JBool
  ##          : Select only enabled event tags. What is considered enabled or disabled depends on the definitionsOnly parameter. When definitionsOnly is set to true, only the specified advertiser or campaign's event tags' enabledByDefault field is examined. When definitionsOnly is set to false, the specified ad or specified campaign's parent advertiser's or parent campaign's event tags' enabledByDefault and status fields are examined as well.
  ##   ids: JArray
  ##      : Select only event tags with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580601 = query.getOrDefault("key")
  valid_580601 = validateParameter(valid_580601, JString, required = false,
                                 default = nil)
  if valid_580601 != nil:
    section.add "key", valid_580601
  var valid_580602 = query.getOrDefault("prettyPrint")
  valid_580602 = validateParameter(valid_580602, JBool, required = false,
                                 default = newJBool(true))
  if valid_580602 != nil:
    section.add "prettyPrint", valid_580602
  var valid_580603 = query.getOrDefault("oauth_token")
  valid_580603 = validateParameter(valid_580603, JString, required = false,
                                 default = nil)
  if valid_580603 != nil:
    section.add "oauth_token", valid_580603
  var valid_580604 = query.getOrDefault("adId")
  valid_580604 = validateParameter(valid_580604, JString, required = false,
                                 default = nil)
  if valid_580604 != nil:
    section.add "adId", valid_580604
  var valid_580605 = query.getOrDefault("sortField")
  valid_580605 = validateParameter(valid_580605, JString, required = false,
                                 default = newJString("ID"))
  if valid_580605 != nil:
    section.add "sortField", valid_580605
  var valid_580606 = query.getOrDefault("alt")
  valid_580606 = validateParameter(valid_580606, JString, required = false,
                                 default = newJString("json"))
  if valid_580606 != nil:
    section.add "alt", valid_580606
  var valid_580607 = query.getOrDefault("userIp")
  valid_580607 = validateParameter(valid_580607, JString, required = false,
                                 default = nil)
  if valid_580607 != nil:
    section.add "userIp", valid_580607
  var valid_580608 = query.getOrDefault("definitionsOnly")
  valid_580608 = validateParameter(valid_580608, JBool, required = false, default = nil)
  if valid_580608 != nil:
    section.add "definitionsOnly", valid_580608
  var valid_580609 = query.getOrDefault("quotaUser")
  valid_580609 = validateParameter(valid_580609, JString, required = false,
                                 default = nil)
  if valid_580609 != nil:
    section.add "quotaUser", valid_580609
  var valid_580610 = query.getOrDefault("campaignId")
  valid_580610 = validateParameter(valid_580610, JString, required = false,
                                 default = nil)
  if valid_580610 != nil:
    section.add "campaignId", valid_580610
  var valid_580611 = query.getOrDefault("searchString")
  valid_580611 = validateParameter(valid_580611, JString, required = false,
                                 default = nil)
  if valid_580611 != nil:
    section.add "searchString", valid_580611
  var valid_580612 = query.getOrDefault("eventTagTypes")
  valid_580612 = validateParameter(valid_580612, JArray, required = false,
                                 default = nil)
  if valid_580612 != nil:
    section.add "eventTagTypes", valid_580612
  var valid_580613 = query.getOrDefault("sortOrder")
  valid_580613 = validateParameter(valid_580613, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580613 != nil:
    section.add "sortOrder", valid_580613
  var valid_580614 = query.getOrDefault("advertiserId")
  valid_580614 = validateParameter(valid_580614, JString, required = false,
                                 default = nil)
  if valid_580614 != nil:
    section.add "advertiserId", valid_580614
  var valid_580615 = query.getOrDefault("enabled")
  valid_580615 = validateParameter(valid_580615, JBool, required = false, default = nil)
  if valid_580615 != nil:
    section.add "enabled", valid_580615
  var valid_580616 = query.getOrDefault("ids")
  valid_580616 = validateParameter(valid_580616, JArray, required = false,
                                 default = nil)
  if valid_580616 != nil:
    section.add "ids", valid_580616
  var valid_580617 = query.getOrDefault("fields")
  valid_580617 = validateParameter(valid_580617, JString, required = false,
                                 default = nil)
  if valid_580617 != nil:
    section.add "fields", valid_580617
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580618: Call_DfareportingEventTagsList_580597; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of event tags, possibly filtered.
  ## 
  let valid = call_580618.validator(path, query, header, formData, body)
  let scheme = call_580618.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580618.url(scheme.get, call_580618.host, call_580618.base,
                         call_580618.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580618, url, valid)

proc call*(call_580619: Call_DfareportingEventTagsList_580597; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          adId: string = ""; sortField: string = "ID"; alt: string = "json";
          userIp: string = ""; definitionsOnly: bool = false; quotaUser: string = "";
          campaignId: string = ""; searchString: string = "";
          eventTagTypes: JsonNode = nil; sortOrder: string = "ASCENDING";
          advertiserId: string = ""; enabled: bool = false; ids: JsonNode = nil;
          fields: string = ""): Recallable =
  ## dfareportingEventTagsList
  ## Retrieves a list of event tags, possibly filtered.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   adId: string
  ##       : Select only event tags that belong to this ad.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   definitionsOnly: bool
  ##                  : Examine only the specified campaign or advertiser's event tags for matching selector criteria. When set to false, the parent advertiser and parent campaign of the specified ad or campaign is examined as well. In addition, when set to false, the status field is examined as well, along with the enabledByDefault field. This parameter can not be set to true when adId is specified as ads do not define their own even tags.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   campaignId: string
  ##             : Select only event tags that belong to this campaign.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "eventtag*2015" will return objects with names like "eventtag June 2015", "eventtag April 2015", or simply "eventtag 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "eventtag" will match objects with name "my eventtag", "eventtag 2015", or simply "eventtag".
  ##   eventTagTypes: JArray
  ##                : Select only event tags with the specified event tag types. Event tag types can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   advertiserId: string
  ##               : Select only event tags that belong to this advertiser.
  ##   enabled: bool
  ##          : Select only enabled event tags. What is considered enabled or disabled depends on the definitionsOnly parameter. When definitionsOnly is set to true, only the specified advertiser or campaign's event tags' enabledByDefault field is examined. When definitionsOnly is set to false, the specified ad or specified campaign's parent advertiser's or parent campaign's event tags' enabledByDefault and status fields are examined as well.
  ##   ids: JArray
  ##      : Select only event tags with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580620 = newJObject()
  var query_580621 = newJObject()
  add(query_580621, "key", newJString(key))
  add(query_580621, "prettyPrint", newJBool(prettyPrint))
  add(query_580621, "oauth_token", newJString(oauthToken))
  add(path_580620, "profileId", newJString(profileId))
  add(query_580621, "adId", newJString(adId))
  add(query_580621, "sortField", newJString(sortField))
  add(query_580621, "alt", newJString(alt))
  add(query_580621, "userIp", newJString(userIp))
  add(query_580621, "definitionsOnly", newJBool(definitionsOnly))
  add(query_580621, "quotaUser", newJString(quotaUser))
  add(query_580621, "campaignId", newJString(campaignId))
  add(query_580621, "searchString", newJString(searchString))
  if eventTagTypes != nil:
    query_580621.add "eventTagTypes", eventTagTypes
  add(query_580621, "sortOrder", newJString(sortOrder))
  add(query_580621, "advertiserId", newJString(advertiserId))
  add(query_580621, "enabled", newJBool(enabled))
  if ids != nil:
    query_580621.add "ids", ids
  add(query_580621, "fields", newJString(fields))
  result = call_580619.call(path_580620, query_580621, nil, nil, nil)

var dfareportingEventTagsList* = Call_DfareportingEventTagsList_580597(
    name: "dfareportingEventTagsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags",
    validator: validate_DfareportingEventTagsList_580598,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsList_580599,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsPatch_580656 = ref object of OpenApiRestCall_578364
proc url_DfareportingEventTagsPatch_580658(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsPatch_580657(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing event tag. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580659 = path.getOrDefault("profileId")
  valid_580659 = validateParameter(valid_580659, JString, required = true,
                                 default = nil)
  if valid_580659 != nil:
    section.add "profileId", valid_580659
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Event tag ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580660 = query.getOrDefault("key")
  valid_580660 = validateParameter(valid_580660, JString, required = false,
                                 default = nil)
  if valid_580660 != nil:
    section.add "key", valid_580660
  var valid_580661 = query.getOrDefault("prettyPrint")
  valid_580661 = validateParameter(valid_580661, JBool, required = false,
                                 default = newJBool(true))
  if valid_580661 != nil:
    section.add "prettyPrint", valid_580661
  var valid_580662 = query.getOrDefault("oauth_token")
  valid_580662 = validateParameter(valid_580662, JString, required = false,
                                 default = nil)
  if valid_580662 != nil:
    section.add "oauth_token", valid_580662
  var valid_580663 = query.getOrDefault("alt")
  valid_580663 = validateParameter(valid_580663, JString, required = false,
                                 default = newJString("json"))
  if valid_580663 != nil:
    section.add "alt", valid_580663
  var valid_580664 = query.getOrDefault("userIp")
  valid_580664 = validateParameter(valid_580664, JString, required = false,
                                 default = nil)
  if valid_580664 != nil:
    section.add "userIp", valid_580664
  var valid_580665 = query.getOrDefault("quotaUser")
  valid_580665 = validateParameter(valid_580665, JString, required = false,
                                 default = nil)
  if valid_580665 != nil:
    section.add "quotaUser", valid_580665
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580666 = query.getOrDefault("id")
  valid_580666 = validateParameter(valid_580666, JString, required = true,
                                 default = nil)
  if valid_580666 != nil:
    section.add "id", valid_580666
  var valid_580667 = query.getOrDefault("fields")
  valid_580667 = validateParameter(valid_580667, JString, required = false,
                                 default = nil)
  if valid_580667 != nil:
    section.add "fields", valid_580667
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580669: Call_DfareportingEventTagsPatch_580656; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing event tag. This method supports patch semantics.
  ## 
  let valid = call_580669.validator(path, query, header, formData, body)
  let scheme = call_580669.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580669.url(scheme.get, call_580669.host, call_580669.base,
                         call_580669.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580669, url, valid)

proc call*(call_580670: Call_DfareportingEventTagsPatch_580656; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingEventTagsPatch
  ## Updates an existing event tag. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Event tag ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580671 = newJObject()
  var query_580672 = newJObject()
  var body_580673 = newJObject()
  add(query_580672, "key", newJString(key))
  add(query_580672, "prettyPrint", newJBool(prettyPrint))
  add(query_580672, "oauth_token", newJString(oauthToken))
  add(path_580671, "profileId", newJString(profileId))
  add(query_580672, "alt", newJString(alt))
  add(query_580672, "userIp", newJString(userIp))
  add(query_580672, "quotaUser", newJString(quotaUser))
  add(query_580672, "id", newJString(id))
  if body != nil:
    body_580673 = body
  add(query_580672, "fields", newJString(fields))
  result = call_580670.call(path_580671, query_580672, nil, nil, body_580673)

var dfareportingEventTagsPatch* = Call_DfareportingEventTagsPatch_580656(
    name: "dfareportingEventTagsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags",
    validator: validate_DfareportingEventTagsPatch_580657,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsPatch_580658,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsGet_580674 = ref object of OpenApiRestCall_578364
proc url_DfareportingEventTagsGet_580676(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsGet_580675(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one event tag by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Event tag ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580677 = path.getOrDefault("profileId")
  valid_580677 = validateParameter(valid_580677, JString, required = true,
                                 default = nil)
  if valid_580677 != nil:
    section.add "profileId", valid_580677
  var valid_580678 = path.getOrDefault("id")
  valid_580678 = validateParameter(valid_580678, JString, required = true,
                                 default = nil)
  if valid_580678 != nil:
    section.add "id", valid_580678
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580679 = query.getOrDefault("key")
  valid_580679 = validateParameter(valid_580679, JString, required = false,
                                 default = nil)
  if valid_580679 != nil:
    section.add "key", valid_580679
  var valid_580680 = query.getOrDefault("prettyPrint")
  valid_580680 = validateParameter(valid_580680, JBool, required = false,
                                 default = newJBool(true))
  if valid_580680 != nil:
    section.add "prettyPrint", valid_580680
  var valid_580681 = query.getOrDefault("oauth_token")
  valid_580681 = validateParameter(valid_580681, JString, required = false,
                                 default = nil)
  if valid_580681 != nil:
    section.add "oauth_token", valid_580681
  var valid_580682 = query.getOrDefault("alt")
  valid_580682 = validateParameter(valid_580682, JString, required = false,
                                 default = newJString("json"))
  if valid_580682 != nil:
    section.add "alt", valid_580682
  var valid_580683 = query.getOrDefault("userIp")
  valid_580683 = validateParameter(valid_580683, JString, required = false,
                                 default = nil)
  if valid_580683 != nil:
    section.add "userIp", valid_580683
  var valid_580684 = query.getOrDefault("quotaUser")
  valid_580684 = validateParameter(valid_580684, JString, required = false,
                                 default = nil)
  if valid_580684 != nil:
    section.add "quotaUser", valid_580684
  var valid_580685 = query.getOrDefault("fields")
  valid_580685 = validateParameter(valid_580685, JString, required = false,
                                 default = nil)
  if valid_580685 != nil:
    section.add "fields", valid_580685
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580686: Call_DfareportingEventTagsGet_580674; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one event tag by ID.
  ## 
  let valid = call_580686.validator(path, query, header, formData, body)
  let scheme = call_580686.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580686.url(scheme.get, call_580686.host, call_580686.base,
                         call_580686.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580686, url, valid)

proc call*(call_580687: Call_DfareportingEventTagsGet_580674; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingEventTagsGet
  ## Gets one event tag by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Event tag ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580688 = newJObject()
  var query_580689 = newJObject()
  add(query_580689, "key", newJString(key))
  add(query_580689, "prettyPrint", newJBool(prettyPrint))
  add(query_580689, "oauth_token", newJString(oauthToken))
  add(path_580688, "profileId", newJString(profileId))
  add(path_580688, "id", newJString(id))
  add(query_580689, "alt", newJString(alt))
  add(query_580689, "userIp", newJString(userIp))
  add(query_580689, "quotaUser", newJString(quotaUser))
  add(query_580689, "fields", newJString(fields))
  result = call_580687.call(path_580688, query_580689, nil, nil, nil)

var dfareportingEventTagsGet* = Call_DfareportingEventTagsGet_580674(
    name: "dfareportingEventTagsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags/{id}",
    validator: validate_DfareportingEventTagsGet_580675,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsGet_580676,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsDelete_580690 = ref object of OpenApiRestCall_578364
proc url_DfareportingEventTagsDelete_580692(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsDelete_580691(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing event tag.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Event tag ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580693 = path.getOrDefault("profileId")
  valid_580693 = validateParameter(valid_580693, JString, required = true,
                                 default = nil)
  if valid_580693 != nil:
    section.add "profileId", valid_580693
  var valid_580694 = path.getOrDefault("id")
  valid_580694 = validateParameter(valid_580694, JString, required = true,
                                 default = nil)
  if valid_580694 != nil:
    section.add "id", valid_580694
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580695 = query.getOrDefault("key")
  valid_580695 = validateParameter(valid_580695, JString, required = false,
                                 default = nil)
  if valid_580695 != nil:
    section.add "key", valid_580695
  var valid_580696 = query.getOrDefault("prettyPrint")
  valid_580696 = validateParameter(valid_580696, JBool, required = false,
                                 default = newJBool(true))
  if valid_580696 != nil:
    section.add "prettyPrint", valid_580696
  var valid_580697 = query.getOrDefault("oauth_token")
  valid_580697 = validateParameter(valid_580697, JString, required = false,
                                 default = nil)
  if valid_580697 != nil:
    section.add "oauth_token", valid_580697
  var valid_580698 = query.getOrDefault("alt")
  valid_580698 = validateParameter(valid_580698, JString, required = false,
                                 default = newJString("json"))
  if valid_580698 != nil:
    section.add "alt", valid_580698
  var valid_580699 = query.getOrDefault("userIp")
  valid_580699 = validateParameter(valid_580699, JString, required = false,
                                 default = nil)
  if valid_580699 != nil:
    section.add "userIp", valid_580699
  var valid_580700 = query.getOrDefault("quotaUser")
  valid_580700 = validateParameter(valid_580700, JString, required = false,
                                 default = nil)
  if valid_580700 != nil:
    section.add "quotaUser", valid_580700
  var valid_580701 = query.getOrDefault("fields")
  valid_580701 = validateParameter(valid_580701, JString, required = false,
                                 default = nil)
  if valid_580701 != nil:
    section.add "fields", valid_580701
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580702: Call_DfareportingEventTagsDelete_580690; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing event tag.
  ## 
  let valid = call_580702.validator(path, query, header, formData, body)
  let scheme = call_580702.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580702.url(scheme.get, call_580702.host, call_580702.base,
                         call_580702.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580702, url, valid)

proc call*(call_580703: Call_DfareportingEventTagsDelete_580690; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingEventTagsDelete
  ## Deletes an existing event tag.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Event tag ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580704 = newJObject()
  var query_580705 = newJObject()
  add(query_580705, "key", newJString(key))
  add(query_580705, "prettyPrint", newJBool(prettyPrint))
  add(query_580705, "oauth_token", newJString(oauthToken))
  add(path_580704, "profileId", newJString(profileId))
  add(path_580704, "id", newJString(id))
  add(query_580705, "alt", newJString(alt))
  add(query_580705, "userIp", newJString(userIp))
  add(query_580705, "quotaUser", newJString(quotaUser))
  add(query_580705, "fields", newJString(fields))
  result = call_580703.call(path_580704, query_580705, nil, nil, nil)

var dfareportingEventTagsDelete* = Call_DfareportingEventTagsDelete_580690(
    name: "dfareportingEventTagsDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags/{id}",
    validator: validate_DfareportingEventTagsDelete_580691,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsDelete_580692,
    schemes: {Scheme.Https})
type
  Call_DfareportingFilesList_580706 = ref object of OpenApiRestCall_578364
proc url_DfareportingFilesList_580708(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/files")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFilesList_580707(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists files for a user profile.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580709 = path.getOrDefault("profileId")
  valid_580709 = validateParameter(valid_580709, JString, required = true,
                                 default = nil)
  if valid_580709 != nil:
    section.add "profileId", valid_580709
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   scope: JString
  ##        : The scope that defines which results are returned.
  ##   sortField: JString
  ##            : The field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : The value of the nextToken from the previous result page.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_580710 = query.getOrDefault("key")
  valid_580710 = validateParameter(valid_580710, JString, required = false,
                                 default = nil)
  if valid_580710 != nil:
    section.add "key", valid_580710
  var valid_580711 = query.getOrDefault("prettyPrint")
  valid_580711 = validateParameter(valid_580711, JBool, required = false,
                                 default = newJBool(true))
  if valid_580711 != nil:
    section.add "prettyPrint", valid_580711
  var valid_580712 = query.getOrDefault("oauth_token")
  valid_580712 = validateParameter(valid_580712, JString, required = false,
                                 default = nil)
  if valid_580712 != nil:
    section.add "oauth_token", valid_580712
  var valid_580713 = query.getOrDefault("scope")
  valid_580713 = validateParameter(valid_580713, JString, required = false,
                                 default = newJString("MINE"))
  if valid_580713 != nil:
    section.add "scope", valid_580713
  var valid_580714 = query.getOrDefault("sortField")
  valid_580714 = validateParameter(valid_580714, JString, required = false,
                                 default = newJString("LAST_MODIFIED_TIME"))
  if valid_580714 != nil:
    section.add "sortField", valid_580714
  var valid_580715 = query.getOrDefault("alt")
  valid_580715 = validateParameter(valid_580715, JString, required = false,
                                 default = newJString("json"))
  if valid_580715 != nil:
    section.add "alt", valid_580715
  var valid_580716 = query.getOrDefault("userIp")
  valid_580716 = validateParameter(valid_580716, JString, required = false,
                                 default = nil)
  if valid_580716 != nil:
    section.add "userIp", valid_580716
  var valid_580717 = query.getOrDefault("quotaUser")
  valid_580717 = validateParameter(valid_580717, JString, required = false,
                                 default = nil)
  if valid_580717 != nil:
    section.add "quotaUser", valid_580717
  var valid_580718 = query.getOrDefault("pageToken")
  valid_580718 = validateParameter(valid_580718, JString, required = false,
                                 default = nil)
  if valid_580718 != nil:
    section.add "pageToken", valid_580718
  var valid_580719 = query.getOrDefault("sortOrder")
  valid_580719 = validateParameter(valid_580719, JString, required = false,
                                 default = newJString("DESCENDING"))
  if valid_580719 != nil:
    section.add "sortOrder", valid_580719
  var valid_580720 = query.getOrDefault("fields")
  valid_580720 = validateParameter(valid_580720, JString, required = false,
                                 default = nil)
  if valid_580720 != nil:
    section.add "fields", valid_580720
  var valid_580721 = query.getOrDefault("maxResults")
  valid_580721 = validateParameter(valid_580721, JInt, required = false,
                                 default = newJInt(10))
  if valid_580721 != nil:
    section.add "maxResults", valid_580721
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580722: Call_DfareportingFilesList_580706; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists files for a user profile.
  ## 
  let valid = call_580722.validator(path, query, header, formData, body)
  let scheme = call_580722.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580722.url(scheme.get, call_580722.host, call_580722.base,
                         call_580722.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580722, url, valid)

proc call*(call_580723: Call_DfareportingFilesList_580706; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          scope: string = "MINE"; sortField: string = "LAST_MODIFIED_TIME";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          pageToken: string = ""; sortOrder: string = "DESCENDING"; fields: string = "";
          maxResults: int = 10): Recallable =
  ## dfareportingFilesList
  ## Lists files for a user profile.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   scope: string
  ##        : The scope that defines which results are returned.
  ##   profileId: string (required)
  ##            : The DFA profile ID.
  ##   sortField: string
  ##            : The field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : The value of the nextToken from the previous result page.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_580724 = newJObject()
  var query_580725 = newJObject()
  add(query_580725, "key", newJString(key))
  add(query_580725, "prettyPrint", newJBool(prettyPrint))
  add(query_580725, "oauth_token", newJString(oauthToken))
  add(query_580725, "scope", newJString(scope))
  add(path_580724, "profileId", newJString(profileId))
  add(query_580725, "sortField", newJString(sortField))
  add(query_580725, "alt", newJString(alt))
  add(query_580725, "userIp", newJString(userIp))
  add(query_580725, "quotaUser", newJString(quotaUser))
  add(query_580725, "pageToken", newJString(pageToken))
  add(query_580725, "sortOrder", newJString(sortOrder))
  add(query_580725, "fields", newJString(fields))
  add(query_580725, "maxResults", newJInt(maxResults))
  result = call_580723.call(path_580724, query_580725, nil, nil, nil)

var dfareportingFilesList* = Call_DfareportingFilesList_580706(
    name: "dfareportingFilesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/files",
    validator: validate_DfareportingFilesList_580707, base: "/dfareporting/v3.2",
    url: url_DfareportingFilesList_580708, schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesUpdate_580754 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivitiesUpdate_580756(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesUpdate_580755(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight activity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580757 = path.getOrDefault("profileId")
  valid_580757 = validateParameter(valid_580757, JString, required = true,
                                 default = nil)
  if valid_580757 != nil:
    section.add "profileId", valid_580757
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580758 = query.getOrDefault("key")
  valid_580758 = validateParameter(valid_580758, JString, required = false,
                                 default = nil)
  if valid_580758 != nil:
    section.add "key", valid_580758
  var valid_580759 = query.getOrDefault("prettyPrint")
  valid_580759 = validateParameter(valid_580759, JBool, required = false,
                                 default = newJBool(true))
  if valid_580759 != nil:
    section.add "prettyPrint", valid_580759
  var valid_580760 = query.getOrDefault("oauth_token")
  valid_580760 = validateParameter(valid_580760, JString, required = false,
                                 default = nil)
  if valid_580760 != nil:
    section.add "oauth_token", valid_580760
  var valid_580761 = query.getOrDefault("alt")
  valid_580761 = validateParameter(valid_580761, JString, required = false,
                                 default = newJString("json"))
  if valid_580761 != nil:
    section.add "alt", valid_580761
  var valid_580762 = query.getOrDefault("userIp")
  valid_580762 = validateParameter(valid_580762, JString, required = false,
                                 default = nil)
  if valid_580762 != nil:
    section.add "userIp", valid_580762
  var valid_580763 = query.getOrDefault("quotaUser")
  valid_580763 = validateParameter(valid_580763, JString, required = false,
                                 default = nil)
  if valid_580763 != nil:
    section.add "quotaUser", valid_580763
  var valid_580764 = query.getOrDefault("fields")
  valid_580764 = validateParameter(valid_580764, JString, required = false,
                                 default = nil)
  if valid_580764 != nil:
    section.add "fields", valid_580764
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580766: Call_DfareportingFloodlightActivitiesUpdate_580754;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight activity.
  ## 
  let valid = call_580766.validator(path, query, header, formData, body)
  let scheme = call_580766.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580766.url(scheme.get, call_580766.host, call_580766.base,
                         call_580766.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580766, url, valid)

proc call*(call_580767: Call_DfareportingFloodlightActivitiesUpdate_580754;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingFloodlightActivitiesUpdate
  ## Updates an existing floodlight activity.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580768 = newJObject()
  var query_580769 = newJObject()
  var body_580770 = newJObject()
  add(query_580769, "key", newJString(key))
  add(query_580769, "prettyPrint", newJBool(prettyPrint))
  add(query_580769, "oauth_token", newJString(oauthToken))
  add(path_580768, "profileId", newJString(profileId))
  add(query_580769, "alt", newJString(alt))
  add(query_580769, "userIp", newJString(userIp))
  add(query_580769, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580770 = body
  add(query_580769, "fields", newJString(fields))
  result = call_580767.call(path_580768, query_580769, nil, nil, body_580770)

var dfareportingFloodlightActivitiesUpdate* = Call_DfareportingFloodlightActivitiesUpdate_580754(
    name: "dfareportingFloodlightActivitiesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities",
    validator: validate_DfareportingFloodlightActivitiesUpdate_580755,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesUpdate_580756,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesInsert_580771 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivitiesInsert_580773(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesInsert_580772(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new floodlight activity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580774 = path.getOrDefault("profileId")
  valid_580774 = validateParameter(valid_580774, JString, required = true,
                                 default = nil)
  if valid_580774 != nil:
    section.add "profileId", valid_580774
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580775 = query.getOrDefault("key")
  valid_580775 = validateParameter(valid_580775, JString, required = false,
                                 default = nil)
  if valid_580775 != nil:
    section.add "key", valid_580775
  var valid_580776 = query.getOrDefault("prettyPrint")
  valid_580776 = validateParameter(valid_580776, JBool, required = false,
                                 default = newJBool(true))
  if valid_580776 != nil:
    section.add "prettyPrint", valid_580776
  var valid_580777 = query.getOrDefault("oauth_token")
  valid_580777 = validateParameter(valid_580777, JString, required = false,
                                 default = nil)
  if valid_580777 != nil:
    section.add "oauth_token", valid_580777
  var valid_580778 = query.getOrDefault("alt")
  valid_580778 = validateParameter(valid_580778, JString, required = false,
                                 default = newJString("json"))
  if valid_580778 != nil:
    section.add "alt", valid_580778
  var valid_580779 = query.getOrDefault("userIp")
  valid_580779 = validateParameter(valid_580779, JString, required = false,
                                 default = nil)
  if valid_580779 != nil:
    section.add "userIp", valid_580779
  var valid_580780 = query.getOrDefault("quotaUser")
  valid_580780 = validateParameter(valid_580780, JString, required = false,
                                 default = nil)
  if valid_580780 != nil:
    section.add "quotaUser", valid_580780
  var valid_580781 = query.getOrDefault("fields")
  valid_580781 = validateParameter(valid_580781, JString, required = false,
                                 default = nil)
  if valid_580781 != nil:
    section.add "fields", valid_580781
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580783: Call_DfareportingFloodlightActivitiesInsert_580771;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new floodlight activity.
  ## 
  let valid = call_580783.validator(path, query, header, formData, body)
  let scheme = call_580783.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580783.url(scheme.get, call_580783.host, call_580783.base,
                         call_580783.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580783, url, valid)

proc call*(call_580784: Call_DfareportingFloodlightActivitiesInsert_580771;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingFloodlightActivitiesInsert
  ## Inserts a new floodlight activity.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580785 = newJObject()
  var query_580786 = newJObject()
  var body_580787 = newJObject()
  add(query_580786, "key", newJString(key))
  add(query_580786, "prettyPrint", newJBool(prettyPrint))
  add(query_580786, "oauth_token", newJString(oauthToken))
  add(path_580785, "profileId", newJString(profileId))
  add(query_580786, "alt", newJString(alt))
  add(query_580786, "userIp", newJString(userIp))
  add(query_580786, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580787 = body
  add(query_580786, "fields", newJString(fields))
  result = call_580784.call(path_580785, query_580786, nil, nil, body_580787)

var dfareportingFloodlightActivitiesInsert* = Call_DfareportingFloodlightActivitiesInsert_580771(
    name: "dfareportingFloodlightActivitiesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities",
    validator: validate_DfareportingFloodlightActivitiesInsert_580772,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesInsert_580773,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesList_580726 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivitiesList_580728(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesList_580727(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of floodlight activities, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580729 = path.getOrDefault("profileId")
  valid_580729 = validateParameter(valid_580729, JString, required = true,
                                 default = nil)
  if valid_580729 != nil:
    section.add "profileId", valid_580729
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   floodlightActivityGroupName: JString
  ##                              : Select only floodlight activities with the specified floodlight activity group name.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   floodlightActivityGroupType: JString
  ##                              : Select only floodlight activities with the specified floodlight activity group type.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   floodlightActivityGroupIds: JArray
  ##                             : Select only floodlight activities with the specified floodlight activity group IDs.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivity*2015" will return objects with names like "floodlightactivity June 2015", "floodlightactivity April 2015", or simply "floodlightactivity 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivity" will match objects with name "my floodlightactivity activity", "floodlightactivity 2015", or simply "floodlightactivity".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   floodlightConfigurationId: JString
  ##                            : Select only floodlight activities for the specified floodlight configuration ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   advertiserId: JString
  ##               : Select only floodlight activities for the specified advertiser ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   tagString: JString
  ##            : Select only floodlight activities with the specified tag string.
  ##   floodlightActivityGroupTagString: JString
  ##                                   : Select only floodlight activities with the specified floodlight activity group tag string.
  ##   ids: JArray
  ##      : Select only floodlight activities with the specified IDs. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_580730 = query.getOrDefault("key")
  valid_580730 = validateParameter(valid_580730, JString, required = false,
                                 default = nil)
  if valid_580730 != nil:
    section.add "key", valid_580730
  var valid_580731 = query.getOrDefault("prettyPrint")
  valid_580731 = validateParameter(valid_580731, JBool, required = false,
                                 default = newJBool(true))
  if valid_580731 != nil:
    section.add "prettyPrint", valid_580731
  var valid_580732 = query.getOrDefault("oauth_token")
  valid_580732 = validateParameter(valid_580732, JString, required = false,
                                 default = nil)
  if valid_580732 != nil:
    section.add "oauth_token", valid_580732
  var valid_580733 = query.getOrDefault("floodlightActivityGroupName")
  valid_580733 = validateParameter(valid_580733, JString, required = false,
                                 default = nil)
  if valid_580733 != nil:
    section.add "floodlightActivityGroupName", valid_580733
  var valid_580734 = query.getOrDefault("sortField")
  valid_580734 = validateParameter(valid_580734, JString, required = false,
                                 default = newJString("ID"))
  if valid_580734 != nil:
    section.add "sortField", valid_580734
  var valid_580735 = query.getOrDefault("floodlightActivityGroupType")
  valid_580735 = validateParameter(valid_580735, JString, required = false,
                                 default = newJString("COUNTER"))
  if valid_580735 != nil:
    section.add "floodlightActivityGroupType", valid_580735
  var valid_580736 = query.getOrDefault("alt")
  valid_580736 = validateParameter(valid_580736, JString, required = false,
                                 default = newJString("json"))
  if valid_580736 != nil:
    section.add "alt", valid_580736
  var valid_580737 = query.getOrDefault("userIp")
  valid_580737 = validateParameter(valid_580737, JString, required = false,
                                 default = nil)
  if valid_580737 != nil:
    section.add "userIp", valid_580737
  var valid_580738 = query.getOrDefault("quotaUser")
  valid_580738 = validateParameter(valid_580738, JString, required = false,
                                 default = nil)
  if valid_580738 != nil:
    section.add "quotaUser", valid_580738
  var valid_580739 = query.getOrDefault("floodlightActivityGroupIds")
  valid_580739 = validateParameter(valid_580739, JArray, required = false,
                                 default = nil)
  if valid_580739 != nil:
    section.add "floodlightActivityGroupIds", valid_580739
  var valid_580740 = query.getOrDefault("pageToken")
  valid_580740 = validateParameter(valid_580740, JString, required = false,
                                 default = nil)
  if valid_580740 != nil:
    section.add "pageToken", valid_580740
  var valid_580741 = query.getOrDefault("searchString")
  valid_580741 = validateParameter(valid_580741, JString, required = false,
                                 default = nil)
  if valid_580741 != nil:
    section.add "searchString", valid_580741
  var valid_580742 = query.getOrDefault("sortOrder")
  valid_580742 = validateParameter(valid_580742, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580742 != nil:
    section.add "sortOrder", valid_580742
  var valid_580743 = query.getOrDefault("floodlightConfigurationId")
  valid_580743 = validateParameter(valid_580743, JString, required = false,
                                 default = nil)
  if valid_580743 != nil:
    section.add "floodlightConfigurationId", valid_580743
  var valid_580744 = query.getOrDefault("advertiserId")
  valid_580744 = validateParameter(valid_580744, JString, required = false,
                                 default = nil)
  if valid_580744 != nil:
    section.add "advertiserId", valid_580744
  var valid_580745 = query.getOrDefault("tagString")
  valid_580745 = validateParameter(valid_580745, JString, required = false,
                                 default = nil)
  if valid_580745 != nil:
    section.add "tagString", valid_580745
  var valid_580746 = query.getOrDefault("floodlightActivityGroupTagString")
  valid_580746 = validateParameter(valid_580746, JString, required = false,
                                 default = nil)
  if valid_580746 != nil:
    section.add "floodlightActivityGroupTagString", valid_580746
  var valid_580747 = query.getOrDefault("ids")
  valid_580747 = validateParameter(valid_580747, JArray, required = false,
                                 default = nil)
  if valid_580747 != nil:
    section.add "ids", valid_580747
  var valid_580748 = query.getOrDefault("fields")
  valid_580748 = validateParameter(valid_580748, JString, required = false,
                                 default = nil)
  if valid_580748 != nil:
    section.add "fields", valid_580748
  var valid_580749 = query.getOrDefault("maxResults")
  valid_580749 = validateParameter(valid_580749, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580749 != nil:
    section.add "maxResults", valid_580749
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580750: Call_DfareportingFloodlightActivitiesList_580726;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of floodlight activities, possibly filtered. This method supports paging.
  ## 
  let valid = call_580750.validator(path, query, header, formData, body)
  let scheme = call_580750.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580750.url(scheme.get, call_580750.host, call_580750.base,
                         call_580750.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580750, url, valid)

proc call*(call_580751: Call_DfareportingFloodlightActivitiesList_580726;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; floodlightActivityGroupName: string = "";
          sortField: string = "ID"; floodlightActivityGroupType: string = "COUNTER";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          floodlightActivityGroupIds: JsonNode = nil; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          floodlightConfigurationId: string = ""; advertiserId: string = "";
          tagString: string = ""; floodlightActivityGroupTagString: string = "";
          ids: JsonNode = nil; fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingFloodlightActivitiesList
  ## Retrieves a list of floodlight activities, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   floodlightActivityGroupName: string
  ##                              : Select only floodlight activities with the specified floodlight activity group name.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   floodlightActivityGroupType: string
  ##                              : Select only floodlight activities with the specified floodlight activity group type.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   floodlightActivityGroupIds: JArray
  ##                             : Select only floodlight activities with the specified floodlight activity group IDs.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivity*2015" will return objects with names like "floodlightactivity June 2015", "floodlightactivity April 2015", or simply "floodlightactivity 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivity" will match objects with name "my floodlightactivity activity", "floodlightactivity 2015", or simply "floodlightactivity".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   floodlightConfigurationId: string
  ##                            : Select only floodlight activities for the specified floodlight configuration ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   advertiserId: string
  ##               : Select only floodlight activities for the specified advertiser ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   tagString: string
  ##            : Select only floodlight activities with the specified tag string.
  ##   floodlightActivityGroupTagString: string
  ##                                   : Select only floodlight activities with the specified floodlight activity group tag string.
  ##   ids: JArray
  ##      : Select only floodlight activities with the specified IDs. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_580752 = newJObject()
  var query_580753 = newJObject()
  add(query_580753, "key", newJString(key))
  add(query_580753, "prettyPrint", newJBool(prettyPrint))
  add(query_580753, "oauth_token", newJString(oauthToken))
  add(query_580753, "floodlightActivityGroupName",
      newJString(floodlightActivityGroupName))
  add(path_580752, "profileId", newJString(profileId))
  add(query_580753, "sortField", newJString(sortField))
  add(query_580753, "floodlightActivityGroupType",
      newJString(floodlightActivityGroupType))
  add(query_580753, "alt", newJString(alt))
  add(query_580753, "userIp", newJString(userIp))
  add(query_580753, "quotaUser", newJString(quotaUser))
  if floodlightActivityGroupIds != nil:
    query_580753.add "floodlightActivityGroupIds", floodlightActivityGroupIds
  add(query_580753, "pageToken", newJString(pageToken))
  add(query_580753, "searchString", newJString(searchString))
  add(query_580753, "sortOrder", newJString(sortOrder))
  add(query_580753, "floodlightConfigurationId",
      newJString(floodlightConfigurationId))
  add(query_580753, "advertiserId", newJString(advertiserId))
  add(query_580753, "tagString", newJString(tagString))
  add(query_580753, "floodlightActivityGroupTagString",
      newJString(floodlightActivityGroupTagString))
  if ids != nil:
    query_580753.add "ids", ids
  add(query_580753, "fields", newJString(fields))
  add(query_580753, "maxResults", newJInt(maxResults))
  result = call_580751.call(path_580752, query_580753, nil, nil, nil)

var dfareportingFloodlightActivitiesList* = Call_DfareportingFloodlightActivitiesList_580726(
    name: "dfareportingFloodlightActivitiesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities",
    validator: validate_DfareportingFloodlightActivitiesList_580727,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesList_580728,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesPatch_580788 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivitiesPatch_580790(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesPatch_580789(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight activity. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580791 = path.getOrDefault("profileId")
  valid_580791 = validateParameter(valid_580791, JString, required = true,
                                 default = nil)
  if valid_580791 != nil:
    section.add "profileId", valid_580791
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Floodlight activity ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580792 = query.getOrDefault("key")
  valid_580792 = validateParameter(valid_580792, JString, required = false,
                                 default = nil)
  if valid_580792 != nil:
    section.add "key", valid_580792
  var valid_580793 = query.getOrDefault("prettyPrint")
  valid_580793 = validateParameter(valid_580793, JBool, required = false,
                                 default = newJBool(true))
  if valid_580793 != nil:
    section.add "prettyPrint", valid_580793
  var valid_580794 = query.getOrDefault("oauth_token")
  valid_580794 = validateParameter(valid_580794, JString, required = false,
                                 default = nil)
  if valid_580794 != nil:
    section.add "oauth_token", valid_580794
  var valid_580795 = query.getOrDefault("alt")
  valid_580795 = validateParameter(valid_580795, JString, required = false,
                                 default = newJString("json"))
  if valid_580795 != nil:
    section.add "alt", valid_580795
  var valid_580796 = query.getOrDefault("userIp")
  valid_580796 = validateParameter(valid_580796, JString, required = false,
                                 default = nil)
  if valid_580796 != nil:
    section.add "userIp", valid_580796
  var valid_580797 = query.getOrDefault("quotaUser")
  valid_580797 = validateParameter(valid_580797, JString, required = false,
                                 default = nil)
  if valid_580797 != nil:
    section.add "quotaUser", valid_580797
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580798 = query.getOrDefault("id")
  valid_580798 = validateParameter(valid_580798, JString, required = true,
                                 default = nil)
  if valid_580798 != nil:
    section.add "id", valid_580798
  var valid_580799 = query.getOrDefault("fields")
  valid_580799 = validateParameter(valid_580799, JString, required = false,
                                 default = nil)
  if valid_580799 != nil:
    section.add "fields", valid_580799
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580801: Call_DfareportingFloodlightActivitiesPatch_580788;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight activity. This method supports patch semantics.
  ## 
  let valid = call_580801.validator(path, query, header, formData, body)
  let scheme = call_580801.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580801.url(scheme.get, call_580801.host, call_580801.base,
                         call_580801.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580801, url, valid)

proc call*(call_580802: Call_DfareportingFloodlightActivitiesPatch_580788;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingFloodlightActivitiesPatch
  ## Updates an existing floodlight activity. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Floodlight activity ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580803 = newJObject()
  var query_580804 = newJObject()
  var body_580805 = newJObject()
  add(query_580804, "key", newJString(key))
  add(query_580804, "prettyPrint", newJBool(prettyPrint))
  add(query_580804, "oauth_token", newJString(oauthToken))
  add(path_580803, "profileId", newJString(profileId))
  add(query_580804, "alt", newJString(alt))
  add(query_580804, "userIp", newJString(userIp))
  add(query_580804, "quotaUser", newJString(quotaUser))
  add(query_580804, "id", newJString(id))
  if body != nil:
    body_580805 = body
  add(query_580804, "fields", newJString(fields))
  result = call_580802.call(path_580803, query_580804, nil, nil, body_580805)

var dfareportingFloodlightActivitiesPatch* = Call_DfareportingFloodlightActivitiesPatch_580788(
    name: "dfareportingFloodlightActivitiesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities",
    validator: validate_DfareportingFloodlightActivitiesPatch_580789,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesPatch_580790,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesGeneratetag_580806 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivitiesGeneratetag_580808(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"), (kind: ConstantSegment,
        value: "/floodlightActivities/generatetag")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesGeneratetag_580807(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates a tag for a floodlight activity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580809 = path.getOrDefault("profileId")
  valid_580809 = validateParameter(valid_580809, JString, required = true,
                                 default = nil)
  if valid_580809 != nil:
    section.add "profileId", valid_580809
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   floodlightActivityId: JString
  ##                       : Floodlight activity ID for which we want to generate a tag.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580810 = query.getOrDefault("key")
  valid_580810 = validateParameter(valid_580810, JString, required = false,
                                 default = nil)
  if valid_580810 != nil:
    section.add "key", valid_580810
  var valid_580811 = query.getOrDefault("prettyPrint")
  valid_580811 = validateParameter(valid_580811, JBool, required = false,
                                 default = newJBool(true))
  if valid_580811 != nil:
    section.add "prettyPrint", valid_580811
  var valid_580812 = query.getOrDefault("oauth_token")
  valid_580812 = validateParameter(valid_580812, JString, required = false,
                                 default = nil)
  if valid_580812 != nil:
    section.add "oauth_token", valid_580812
  var valid_580813 = query.getOrDefault("floodlightActivityId")
  valid_580813 = validateParameter(valid_580813, JString, required = false,
                                 default = nil)
  if valid_580813 != nil:
    section.add "floodlightActivityId", valid_580813
  var valid_580814 = query.getOrDefault("alt")
  valid_580814 = validateParameter(valid_580814, JString, required = false,
                                 default = newJString("json"))
  if valid_580814 != nil:
    section.add "alt", valid_580814
  var valid_580815 = query.getOrDefault("userIp")
  valid_580815 = validateParameter(valid_580815, JString, required = false,
                                 default = nil)
  if valid_580815 != nil:
    section.add "userIp", valid_580815
  var valid_580816 = query.getOrDefault("quotaUser")
  valid_580816 = validateParameter(valid_580816, JString, required = false,
                                 default = nil)
  if valid_580816 != nil:
    section.add "quotaUser", valid_580816
  var valid_580817 = query.getOrDefault("fields")
  valid_580817 = validateParameter(valid_580817, JString, required = false,
                                 default = nil)
  if valid_580817 != nil:
    section.add "fields", valid_580817
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580818: Call_DfareportingFloodlightActivitiesGeneratetag_580806;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates a tag for a floodlight activity.
  ## 
  let valid = call_580818.validator(path, query, header, formData, body)
  let scheme = call_580818.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580818.url(scheme.get, call_580818.host, call_580818.base,
                         call_580818.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580818, url, valid)

proc call*(call_580819: Call_DfareportingFloodlightActivitiesGeneratetag_580806;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; floodlightActivityId: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingFloodlightActivitiesGeneratetag
  ## Generates a tag for a floodlight activity.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   floodlightActivityId: string
  ##                       : Floodlight activity ID for which we want to generate a tag.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580820 = newJObject()
  var query_580821 = newJObject()
  add(query_580821, "key", newJString(key))
  add(query_580821, "prettyPrint", newJBool(prettyPrint))
  add(query_580821, "oauth_token", newJString(oauthToken))
  add(query_580821, "floodlightActivityId", newJString(floodlightActivityId))
  add(path_580820, "profileId", newJString(profileId))
  add(query_580821, "alt", newJString(alt))
  add(query_580821, "userIp", newJString(userIp))
  add(query_580821, "quotaUser", newJString(quotaUser))
  add(query_580821, "fields", newJString(fields))
  result = call_580819.call(path_580820, query_580821, nil, nil, nil)

var dfareportingFloodlightActivitiesGeneratetag* = Call_DfareportingFloodlightActivitiesGeneratetag_580806(
    name: "dfareportingFloodlightActivitiesGeneratetag",
    meth: HttpMethod.HttpPost, host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities/generatetag",
    validator: validate_DfareportingFloodlightActivitiesGeneratetag_580807,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightActivitiesGeneratetag_580808,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesGet_580822 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivitiesGet_580824(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesGet_580823(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one floodlight activity by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Floodlight activity ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580825 = path.getOrDefault("profileId")
  valid_580825 = validateParameter(valid_580825, JString, required = true,
                                 default = nil)
  if valid_580825 != nil:
    section.add "profileId", valid_580825
  var valid_580826 = path.getOrDefault("id")
  valid_580826 = validateParameter(valid_580826, JString, required = true,
                                 default = nil)
  if valid_580826 != nil:
    section.add "id", valid_580826
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580827 = query.getOrDefault("key")
  valid_580827 = validateParameter(valid_580827, JString, required = false,
                                 default = nil)
  if valid_580827 != nil:
    section.add "key", valid_580827
  var valid_580828 = query.getOrDefault("prettyPrint")
  valid_580828 = validateParameter(valid_580828, JBool, required = false,
                                 default = newJBool(true))
  if valid_580828 != nil:
    section.add "prettyPrint", valid_580828
  var valid_580829 = query.getOrDefault("oauth_token")
  valid_580829 = validateParameter(valid_580829, JString, required = false,
                                 default = nil)
  if valid_580829 != nil:
    section.add "oauth_token", valid_580829
  var valid_580830 = query.getOrDefault("alt")
  valid_580830 = validateParameter(valid_580830, JString, required = false,
                                 default = newJString("json"))
  if valid_580830 != nil:
    section.add "alt", valid_580830
  var valid_580831 = query.getOrDefault("userIp")
  valid_580831 = validateParameter(valid_580831, JString, required = false,
                                 default = nil)
  if valid_580831 != nil:
    section.add "userIp", valid_580831
  var valid_580832 = query.getOrDefault("quotaUser")
  valid_580832 = validateParameter(valid_580832, JString, required = false,
                                 default = nil)
  if valid_580832 != nil:
    section.add "quotaUser", valid_580832
  var valid_580833 = query.getOrDefault("fields")
  valid_580833 = validateParameter(valid_580833, JString, required = false,
                                 default = nil)
  if valid_580833 != nil:
    section.add "fields", valid_580833
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580834: Call_DfareportingFloodlightActivitiesGet_580822;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one floodlight activity by ID.
  ## 
  let valid = call_580834.validator(path, query, header, formData, body)
  let scheme = call_580834.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580834.url(scheme.get, call_580834.host, call_580834.base,
                         call_580834.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580834, url, valid)

proc call*(call_580835: Call_DfareportingFloodlightActivitiesGet_580822;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingFloodlightActivitiesGet
  ## Gets one floodlight activity by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Floodlight activity ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580836 = newJObject()
  var query_580837 = newJObject()
  add(query_580837, "key", newJString(key))
  add(query_580837, "prettyPrint", newJBool(prettyPrint))
  add(query_580837, "oauth_token", newJString(oauthToken))
  add(path_580836, "profileId", newJString(profileId))
  add(path_580836, "id", newJString(id))
  add(query_580837, "alt", newJString(alt))
  add(query_580837, "userIp", newJString(userIp))
  add(query_580837, "quotaUser", newJString(quotaUser))
  add(query_580837, "fields", newJString(fields))
  result = call_580835.call(path_580836, query_580837, nil, nil, nil)

var dfareportingFloodlightActivitiesGet* = Call_DfareportingFloodlightActivitiesGet_580822(
    name: "dfareportingFloodlightActivitiesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities/{id}",
    validator: validate_DfareportingFloodlightActivitiesGet_580823,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesGet_580824,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesDelete_580838 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivitiesDelete_580840(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesDelete_580839(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing floodlight activity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Floodlight activity ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580841 = path.getOrDefault("profileId")
  valid_580841 = validateParameter(valid_580841, JString, required = true,
                                 default = nil)
  if valid_580841 != nil:
    section.add "profileId", valid_580841
  var valid_580842 = path.getOrDefault("id")
  valid_580842 = validateParameter(valid_580842, JString, required = true,
                                 default = nil)
  if valid_580842 != nil:
    section.add "id", valid_580842
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580843 = query.getOrDefault("key")
  valid_580843 = validateParameter(valid_580843, JString, required = false,
                                 default = nil)
  if valid_580843 != nil:
    section.add "key", valid_580843
  var valid_580844 = query.getOrDefault("prettyPrint")
  valid_580844 = validateParameter(valid_580844, JBool, required = false,
                                 default = newJBool(true))
  if valid_580844 != nil:
    section.add "prettyPrint", valid_580844
  var valid_580845 = query.getOrDefault("oauth_token")
  valid_580845 = validateParameter(valid_580845, JString, required = false,
                                 default = nil)
  if valid_580845 != nil:
    section.add "oauth_token", valid_580845
  var valid_580846 = query.getOrDefault("alt")
  valid_580846 = validateParameter(valid_580846, JString, required = false,
                                 default = newJString("json"))
  if valid_580846 != nil:
    section.add "alt", valid_580846
  var valid_580847 = query.getOrDefault("userIp")
  valid_580847 = validateParameter(valid_580847, JString, required = false,
                                 default = nil)
  if valid_580847 != nil:
    section.add "userIp", valid_580847
  var valid_580848 = query.getOrDefault("quotaUser")
  valid_580848 = validateParameter(valid_580848, JString, required = false,
                                 default = nil)
  if valid_580848 != nil:
    section.add "quotaUser", valid_580848
  var valid_580849 = query.getOrDefault("fields")
  valid_580849 = validateParameter(valid_580849, JString, required = false,
                                 default = nil)
  if valid_580849 != nil:
    section.add "fields", valid_580849
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580850: Call_DfareportingFloodlightActivitiesDelete_580838;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing floodlight activity.
  ## 
  let valid = call_580850.validator(path, query, header, formData, body)
  let scheme = call_580850.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580850.url(scheme.get, call_580850.host, call_580850.base,
                         call_580850.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580850, url, valid)

proc call*(call_580851: Call_DfareportingFloodlightActivitiesDelete_580838;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingFloodlightActivitiesDelete
  ## Deletes an existing floodlight activity.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Floodlight activity ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580852 = newJObject()
  var query_580853 = newJObject()
  add(query_580853, "key", newJString(key))
  add(query_580853, "prettyPrint", newJBool(prettyPrint))
  add(query_580853, "oauth_token", newJString(oauthToken))
  add(path_580852, "profileId", newJString(profileId))
  add(path_580852, "id", newJString(id))
  add(query_580853, "alt", newJString(alt))
  add(query_580853, "userIp", newJString(userIp))
  add(query_580853, "quotaUser", newJString(quotaUser))
  add(query_580853, "fields", newJString(fields))
  result = call_580851.call(path_580852, query_580853, nil, nil, nil)

var dfareportingFloodlightActivitiesDelete* = Call_DfareportingFloodlightActivitiesDelete_580838(
    name: "dfareportingFloodlightActivitiesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities/{id}",
    validator: validate_DfareportingFloodlightActivitiesDelete_580839,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesDelete_580840,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsUpdate_580878 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivityGroupsUpdate_580880(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsUpdate_580879(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight activity group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580881 = path.getOrDefault("profileId")
  valid_580881 = validateParameter(valid_580881, JString, required = true,
                                 default = nil)
  if valid_580881 != nil:
    section.add "profileId", valid_580881
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580882 = query.getOrDefault("key")
  valid_580882 = validateParameter(valid_580882, JString, required = false,
                                 default = nil)
  if valid_580882 != nil:
    section.add "key", valid_580882
  var valid_580883 = query.getOrDefault("prettyPrint")
  valid_580883 = validateParameter(valid_580883, JBool, required = false,
                                 default = newJBool(true))
  if valid_580883 != nil:
    section.add "prettyPrint", valid_580883
  var valid_580884 = query.getOrDefault("oauth_token")
  valid_580884 = validateParameter(valid_580884, JString, required = false,
                                 default = nil)
  if valid_580884 != nil:
    section.add "oauth_token", valid_580884
  var valid_580885 = query.getOrDefault("alt")
  valid_580885 = validateParameter(valid_580885, JString, required = false,
                                 default = newJString("json"))
  if valid_580885 != nil:
    section.add "alt", valid_580885
  var valid_580886 = query.getOrDefault("userIp")
  valid_580886 = validateParameter(valid_580886, JString, required = false,
                                 default = nil)
  if valid_580886 != nil:
    section.add "userIp", valid_580886
  var valid_580887 = query.getOrDefault("quotaUser")
  valid_580887 = validateParameter(valid_580887, JString, required = false,
                                 default = nil)
  if valid_580887 != nil:
    section.add "quotaUser", valid_580887
  var valid_580888 = query.getOrDefault("fields")
  valid_580888 = validateParameter(valid_580888, JString, required = false,
                                 default = nil)
  if valid_580888 != nil:
    section.add "fields", valid_580888
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580890: Call_DfareportingFloodlightActivityGroupsUpdate_580878;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight activity group.
  ## 
  let valid = call_580890.validator(path, query, header, formData, body)
  let scheme = call_580890.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580890.url(scheme.get, call_580890.host, call_580890.base,
                         call_580890.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580890, url, valid)

proc call*(call_580891: Call_DfareportingFloodlightActivityGroupsUpdate_580878;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingFloodlightActivityGroupsUpdate
  ## Updates an existing floodlight activity group.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580892 = newJObject()
  var query_580893 = newJObject()
  var body_580894 = newJObject()
  add(query_580893, "key", newJString(key))
  add(query_580893, "prettyPrint", newJBool(prettyPrint))
  add(query_580893, "oauth_token", newJString(oauthToken))
  add(path_580892, "profileId", newJString(profileId))
  add(query_580893, "alt", newJString(alt))
  add(query_580893, "userIp", newJString(userIp))
  add(query_580893, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580894 = body
  add(query_580893, "fields", newJString(fields))
  result = call_580891.call(path_580892, query_580893, nil, nil, body_580894)

var dfareportingFloodlightActivityGroupsUpdate* = Call_DfareportingFloodlightActivityGroupsUpdate_580878(
    name: "dfareportingFloodlightActivityGroupsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups",
    validator: validate_DfareportingFloodlightActivityGroupsUpdate_580879,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightActivityGroupsUpdate_580880,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsInsert_580895 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivityGroupsInsert_580897(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsInsert_580896(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new floodlight activity group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580898 = path.getOrDefault("profileId")
  valid_580898 = validateParameter(valid_580898, JString, required = true,
                                 default = nil)
  if valid_580898 != nil:
    section.add "profileId", valid_580898
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580899 = query.getOrDefault("key")
  valid_580899 = validateParameter(valid_580899, JString, required = false,
                                 default = nil)
  if valid_580899 != nil:
    section.add "key", valid_580899
  var valid_580900 = query.getOrDefault("prettyPrint")
  valid_580900 = validateParameter(valid_580900, JBool, required = false,
                                 default = newJBool(true))
  if valid_580900 != nil:
    section.add "prettyPrint", valid_580900
  var valid_580901 = query.getOrDefault("oauth_token")
  valid_580901 = validateParameter(valid_580901, JString, required = false,
                                 default = nil)
  if valid_580901 != nil:
    section.add "oauth_token", valid_580901
  var valid_580902 = query.getOrDefault("alt")
  valid_580902 = validateParameter(valid_580902, JString, required = false,
                                 default = newJString("json"))
  if valid_580902 != nil:
    section.add "alt", valid_580902
  var valid_580903 = query.getOrDefault("userIp")
  valid_580903 = validateParameter(valid_580903, JString, required = false,
                                 default = nil)
  if valid_580903 != nil:
    section.add "userIp", valid_580903
  var valid_580904 = query.getOrDefault("quotaUser")
  valid_580904 = validateParameter(valid_580904, JString, required = false,
                                 default = nil)
  if valid_580904 != nil:
    section.add "quotaUser", valid_580904
  var valid_580905 = query.getOrDefault("fields")
  valid_580905 = validateParameter(valid_580905, JString, required = false,
                                 default = nil)
  if valid_580905 != nil:
    section.add "fields", valid_580905
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580907: Call_DfareportingFloodlightActivityGroupsInsert_580895;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new floodlight activity group.
  ## 
  let valid = call_580907.validator(path, query, header, formData, body)
  let scheme = call_580907.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580907.url(scheme.get, call_580907.host, call_580907.base,
                         call_580907.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580907, url, valid)

proc call*(call_580908: Call_DfareportingFloodlightActivityGroupsInsert_580895;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingFloodlightActivityGroupsInsert
  ## Inserts a new floodlight activity group.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580909 = newJObject()
  var query_580910 = newJObject()
  var body_580911 = newJObject()
  add(query_580910, "key", newJString(key))
  add(query_580910, "prettyPrint", newJBool(prettyPrint))
  add(query_580910, "oauth_token", newJString(oauthToken))
  add(path_580909, "profileId", newJString(profileId))
  add(query_580910, "alt", newJString(alt))
  add(query_580910, "userIp", newJString(userIp))
  add(query_580910, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580911 = body
  add(query_580910, "fields", newJString(fields))
  result = call_580908.call(path_580909, query_580910, nil, nil, body_580911)

var dfareportingFloodlightActivityGroupsInsert* = Call_DfareportingFloodlightActivityGroupsInsert_580895(
    name: "dfareportingFloodlightActivityGroupsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups",
    validator: validate_DfareportingFloodlightActivityGroupsInsert_580896,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightActivityGroupsInsert_580897,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsList_580854 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivityGroupsList_580856(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsList_580855(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580857 = path.getOrDefault("profileId")
  valid_580857 = validateParameter(valid_580857, JString, required = true,
                                 default = nil)
  if valid_580857 != nil:
    section.add "profileId", valid_580857
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   type: JString
  ##       : Select only floodlight activity groups with the specified floodlight activity group type.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivitygroup*2015" will return objects with names like "floodlightactivitygroup June 2015", "floodlightactivitygroup April 2015", or simply "floodlightactivitygroup 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivitygroup" will match objects with name "my floodlightactivitygroup activity", "floodlightactivitygroup 2015", or simply "floodlightactivitygroup".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   floodlightConfigurationId: JString
  ##                            : Select only floodlight activity groups with the specified floodlight configuration ID. Must specify either advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   advertiserId: JString
  ##               : Select only floodlight activity groups with the specified advertiser ID. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
  ##   ids: JArray
  ##      : Select only floodlight activity groups with the specified IDs. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_580858 = query.getOrDefault("key")
  valid_580858 = validateParameter(valid_580858, JString, required = false,
                                 default = nil)
  if valid_580858 != nil:
    section.add "key", valid_580858
  var valid_580859 = query.getOrDefault("prettyPrint")
  valid_580859 = validateParameter(valid_580859, JBool, required = false,
                                 default = newJBool(true))
  if valid_580859 != nil:
    section.add "prettyPrint", valid_580859
  var valid_580860 = query.getOrDefault("oauth_token")
  valid_580860 = validateParameter(valid_580860, JString, required = false,
                                 default = nil)
  if valid_580860 != nil:
    section.add "oauth_token", valid_580860
  var valid_580861 = query.getOrDefault("sortField")
  valid_580861 = validateParameter(valid_580861, JString, required = false,
                                 default = newJString("ID"))
  if valid_580861 != nil:
    section.add "sortField", valid_580861
  var valid_580862 = query.getOrDefault("alt")
  valid_580862 = validateParameter(valid_580862, JString, required = false,
                                 default = newJString("json"))
  if valid_580862 != nil:
    section.add "alt", valid_580862
  var valid_580863 = query.getOrDefault("userIp")
  valid_580863 = validateParameter(valid_580863, JString, required = false,
                                 default = nil)
  if valid_580863 != nil:
    section.add "userIp", valid_580863
  var valid_580864 = query.getOrDefault("quotaUser")
  valid_580864 = validateParameter(valid_580864, JString, required = false,
                                 default = nil)
  if valid_580864 != nil:
    section.add "quotaUser", valid_580864
  var valid_580865 = query.getOrDefault("type")
  valid_580865 = validateParameter(valid_580865, JString, required = false,
                                 default = newJString("COUNTER"))
  if valid_580865 != nil:
    section.add "type", valid_580865
  var valid_580866 = query.getOrDefault("pageToken")
  valid_580866 = validateParameter(valid_580866, JString, required = false,
                                 default = nil)
  if valid_580866 != nil:
    section.add "pageToken", valid_580866
  var valid_580867 = query.getOrDefault("searchString")
  valid_580867 = validateParameter(valid_580867, JString, required = false,
                                 default = nil)
  if valid_580867 != nil:
    section.add "searchString", valid_580867
  var valid_580868 = query.getOrDefault("sortOrder")
  valid_580868 = validateParameter(valid_580868, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_580868 != nil:
    section.add "sortOrder", valid_580868
  var valid_580869 = query.getOrDefault("floodlightConfigurationId")
  valid_580869 = validateParameter(valid_580869, JString, required = false,
                                 default = nil)
  if valid_580869 != nil:
    section.add "floodlightConfigurationId", valid_580869
  var valid_580870 = query.getOrDefault("advertiserId")
  valid_580870 = validateParameter(valid_580870, JString, required = false,
                                 default = nil)
  if valid_580870 != nil:
    section.add "advertiserId", valid_580870
  var valid_580871 = query.getOrDefault("ids")
  valid_580871 = validateParameter(valid_580871, JArray, required = false,
                                 default = nil)
  if valid_580871 != nil:
    section.add "ids", valid_580871
  var valid_580872 = query.getOrDefault("fields")
  valid_580872 = validateParameter(valid_580872, JString, required = false,
                                 default = nil)
  if valid_580872 != nil:
    section.add "fields", valid_580872
  var valid_580873 = query.getOrDefault("maxResults")
  valid_580873 = validateParameter(valid_580873, JInt, required = false,
                                 default = newJInt(1000))
  if valid_580873 != nil:
    section.add "maxResults", valid_580873
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580874: Call_DfareportingFloodlightActivityGroupsList_580854;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging.
  ## 
  let valid = call_580874.validator(path, query, header, formData, body)
  let scheme = call_580874.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580874.url(scheme.get, call_580874.host, call_580874.base,
                         call_580874.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580874, url, valid)

proc call*(call_580875: Call_DfareportingFloodlightActivityGroupsList_580854;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; sortField: string = "ID"; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; `type`: string = "COUNTER";
          pageToken: string = ""; searchString: string = "";
          sortOrder: string = "ASCENDING"; floodlightConfigurationId: string = "";
          advertiserId: string = ""; ids: JsonNode = nil; fields: string = "";
          maxResults: int = 1000): Recallable =
  ## dfareportingFloodlightActivityGroupsList
  ## Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   type: string
  ##       : Select only floodlight activity groups with the specified floodlight activity group type.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivitygroup*2015" will return objects with names like "floodlightactivitygroup June 2015", "floodlightactivitygroup April 2015", or simply "floodlightactivitygroup 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivitygroup" will match objects with name "my floodlightactivitygroup activity", "floodlightactivitygroup 2015", or simply "floodlightactivitygroup".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   floodlightConfigurationId: string
  ##                            : Select only floodlight activity groups with the specified floodlight configuration ID. Must specify either advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   advertiserId: string
  ##               : Select only floodlight activity groups with the specified advertiser ID. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
  ##   ids: JArray
  ##      : Select only floodlight activity groups with the specified IDs. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_580876 = newJObject()
  var query_580877 = newJObject()
  add(query_580877, "key", newJString(key))
  add(query_580877, "prettyPrint", newJBool(prettyPrint))
  add(query_580877, "oauth_token", newJString(oauthToken))
  add(path_580876, "profileId", newJString(profileId))
  add(query_580877, "sortField", newJString(sortField))
  add(query_580877, "alt", newJString(alt))
  add(query_580877, "userIp", newJString(userIp))
  add(query_580877, "quotaUser", newJString(quotaUser))
  add(query_580877, "type", newJString(`type`))
  add(query_580877, "pageToken", newJString(pageToken))
  add(query_580877, "searchString", newJString(searchString))
  add(query_580877, "sortOrder", newJString(sortOrder))
  add(query_580877, "floodlightConfigurationId",
      newJString(floodlightConfigurationId))
  add(query_580877, "advertiserId", newJString(advertiserId))
  if ids != nil:
    query_580877.add "ids", ids
  add(query_580877, "fields", newJString(fields))
  add(query_580877, "maxResults", newJInt(maxResults))
  result = call_580875.call(path_580876, query_580877, nil, nil, nil)

var dfareportingFloodlightActivityGroupsList* = Call_DfareportingFloodlightActivityGroupsList_580854(
    name: "dfareportingFloodlightActivityGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups",
    validator: validate_DfareportingFloodlightActivityGroupsList_580855,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivityGroupsList_580856,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsPatch_580912 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivityGroupsPatch_580914(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsPatch_580913(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight activity group. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580915 = path.getOrDefault("profileId")
  valid_580915 = validateParameter(valid_580915, JString, required = true,
                                 default = nil)
  if valid_580915 != nil:
    section.add "profileId", valid_580915
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Floodlight activity Group ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580916 = query.getOrDefault("key")
  valid_580916 = validateParameter(valid_580916, JString, required = false,
                                 default = nil)
  if valid_580916 != nil:
    section.add "key", valid_580916
  var valid_580917 = query.getOrDefault("prettyPrint")
  valid_580917 = validateParameter(valid_580917, JBool, required = false,
                                 default = newJBool(true))
  if valid_580917 != nil:
    section.add "prettyPrint", valid_580917
  var valid_580918 = query.getOrDefault("oauth_token")
  valid_580918 = validateParameter(valid_580918, JString, required = false,
                                 default = nil)
  if valid_580918 != nil:
    section.add "oauth_token", valid_580918
  var valid_580919 = query.getOrDefault("alt")
  valid_580919 = validateParameter(valid_580919, JString, required = false,
                                 default = newJString("json"))
  if valid_580919 != nil:
    section.add "alt", valid_580919
  var valid_580920 = query.getOrDefault("userIp")
  valid_580920 = validateParameter(valid_580920, JString, required = false,
                                 default = nil)
  if valid_580920 != nil:
    section.add "userIp", valid_580920
  var valid_580921 = query.getOrDefault("quotaUser")
  valid_580921 = validateParameter(valid_580921, JString, required = false,
                                 default = nil)
  if valid_580921 != nil:
    section.add "quotaUser", valid_580921
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580922 = query.getOrDefault("id")
  valid_580922 = validateParameter(valid_580922, JString, required = true,
                                 default = nil)
  if valid_580922 != nil:
    section.add "id", valid_580922
  var valid_580923 = query.getOrDefault("fields")
  valid_580923 = validateParameter(valid_580923, JString, required = false,
                                 default = nil)
  if valid_580923 != nil:
    section.add "fields", valid_580923
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580925: Call_DfareportingFloodlightActivityGroupsPatch_580912;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight activity group. This method supports patch semantics.
  ## 
  let valid = call_580925.validator(path, query, header, formData, body)
  let scheme = call_580925.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580925.url(scheme.get, call_580925.host, call_580925.base,
                         call_580925.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580925, url, valid)

proc call*(call_580926: Call_DfareportingFloodlightActivityGroupsPatch_580912;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingFloodlightActivityGroupsPatch
  ## Updates an existing floodlight activity group. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Floodlight activity Group ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580927 = newJObject()
  var query_580928 = newJObject()
  var body_580929 = newJObject()
  add(query_580928, "key", newJString(key))
  add(query_580928, "prettyPrint", newJBool(prettyPrint))
  add(query_580928, "oauth_token", newJString(oauthToken))
  add(path_580927, "profileId", newJString(profileId))
  add(query_580928, "alt", newJString(alt))
  add(query_580928, "userIp", newJString(userIp))
  add(query_580928, "quotaUser", newJString(quotaUser))
  add(query_580928, "id", newJString(id))
  if body != nil:
    body_580929 = body
  add(query_580928, "fields", newJString(fields))
  result = call_580926.call(path_580927, query_580928, nil, nil, body_580929)

var dfareportingFloodlightActivityGroupsPatch* = Call_DfareportingFloodlightActivityGroupsPatch_580912(
    name: "dfareportingFloodlightActivityGroupsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups",
    validator: validate_DfareportingFloodlightActivityGroupsPatch_580913,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightActivityGroupsPatch_580914,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsGet_580930 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightActivityGroupsGet_580932(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsGet_580931(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one floodlight activity group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Floodlight activity Group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580933 = path.getOrDefault("profileId")
  valid_580933 = validateParameter(valid_580933, JString, required = true,
                                 default = nil)
  if valid_580933 != nil:
    section.add "profileId", valid_580933
  var valid_580934 = path.getOrDefault("id")
  valid_580934 = validateParameter(valid_580934, JString, required = true,
                                 default = nil)
  if valid_580934 != nil:
    section.add "id", valid_580934
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580935 = query.getOrDefault("key")
  valid_580935 = validateParameter(valid_580935, JString, required = false,
                                 default = nil)
  if valid_580935 != nil:
    section.add "key", valid_580935
  var valid_580936 = query.getOrDefault("prettyPrint")
  valid_580936 = validateParameter(valid_580936, JBool, required = false,
                                 default = newJBool(true))
  if valid_580936 != nil:
    section.add "prettyPrint", valid_580936
  var valid_580937 = query.getOrDefault("oauth_token")
  valid_580937 = validateParameter(valid_580937, JString, required = false,
                                 default = nil)
  if valid_580937 != nil:
    section.add "oauth_token", valid_580937
  var valid_580938 = query.getOrDefault("alt")
  valid_580938 = validateParameter(valid_580938, JString, required = false,
                                 default = newJString("json"))
  if valid_580938 != nil:
    section.add "alt", valid_580938
  var valid_580939 = query.getOrDefault("userIp")
  valid_580939 = validateParameter(valid_580939, JString, required = false,
                                 default = nil)
  if valid_580939 != nil:
    section.add "userIp", valid_580939
  var valid_580940 = query.getOrDefault("quotaUser")
  valid_580940 = validateParameter(valid_580940, JString, required = false,
                                 default = nil)
  if valid_580940 != nil:
    section.add "quotaUser", valid_580940
  var valid_580941 = query.getOrDefault("fields")
  valid_580941 = validateParameter(valid_580941, JString, required = false,
                                 default = nil)
  if valid_580941 != nil:
    section.add "fields", valid_580941
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580942: Call_DfareportingFloodlightActivityGroupsGet_580930;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one floodlight activity group by ID.
  ## 
  let valid = call_580942.validator(path, query, header, formData, body)
  let scheme = call_580942.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580942.url(scheme.get, call_580942.host, call_580942.base,
                         call_580942.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580942, url, valid)

proc call*(call_580943: Call_DfareportingFloodlightActivityGroupsGet_580930;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingFloodlightActivityGroupsGet
  ## Gets one floodlight activity group by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Floodlight activity Group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580944 = newJObject()
  var query_580945 = newJObject()
  add(query_580945, "key", newJString(key))
  add(query_580945, "prettyPrint", newJBool(prettyPrint))
  add(query_580945, "oauth_token", newJString(oauthToken))
  add(path_580944, "profileId", newJString(profileId))
  add(path_580944, "id", newJString(id))
  add(query_580945, "alt", newJString(alt))
  add(query_580945, "userIp", newJString(userIp))
  add(query_580945, "quotaUser", newJString(quotaUser))
  add(query_580945, "fields", newJString(fields))
  result = call_580943.call(path_580944, query_580945, nil, nil, nil)

var dfareportingFloodlightActivityGroupsGet* = Call_DfareportingFloodlightActivityGroupsGet_580930(
    name: "dfareportingFloodlightActivityGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups/{id}",
    validator: validate_DfareportingFloodlightActivityGroupsGet_580931,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivityGroupsGet_580932,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightConfigurationsUpdate_580962 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightConfigurationsUpdate_580964(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightConfigurations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightConfigurationsUpdate_580963(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight configuration.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580965 = path.getOrDefault("profileId")
  valid_580965 = validateParameter(valid_580965, JString, required = true,
                                 default = nil)
  if valid_580965 != nil:
    section.add "profileId", valid_580965
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580966 = query.getOrDefault("key")
  valid_580966 = validateParameter(valid_580966, JString, required = false,
                                 default = nil)
  if valid_580966 != nil:
    section.add "key", valid_580966
  var valid_580967 = query.getOrDefault("prettyPrint")
  valid_580967 = validateParameter(valid_580967, JBool, required = false,
                                 default = newJBool(true))
  if valid_580967 != nil:
    section.add "prettyPrint", valid_580967
  var valid_580968 = query.getOrDefault("oauth_token")
  valid_580968 = validateParameter(valid_580968, JString, required = false,
                                 default = nil)
  if valid_580968 != nil:
    section.add "oauth_token", valid_580968
  var valid_580969 = query.getOrDefault("alt")
  valid_580969 = validateParameter(valid_580969, JString, required = false,
                                 default = newJString("json"))
  if valid_580969 != nil:
    section.add "alt", valid_580969
  var valid_580970 = query.getOrDefault("userIp")
  valid_580970 = validateParameter(valid_580970, JString, required = false,
                                 default = nil)
  if valid_580970 != nil:
    section.add "userIp", valid_580970
  var valid_580971 = query.getOrDefault("quotaUser")
  valid_580971 = validateParameter(valid_580971, JString, required = false,
                                 default = nil)
  if valid_580971 != nil:
    section.add "quotaUser", valid_580971
  var valid_580972 = query.getOrDefault("fields")
  valid_580972 = validateParameter(valid_580972, JString, required = false,
                                 default = nil)
  if valid_580972 != nil:
    section.add "fields", valid_580972
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580974: Call_DfareportingFloodlightConfigurationsUpdate_580962;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight configuration.
  ## 
  let valid = call_580974.validator(path, query, header, formData, body)
  let scheme = call_580974.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580974.url(scheme.get, call_580974.host, call_580974.base,
                         call_580974.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580974, url, valid)

proc call*(call_580975: Call_DfareportingFloodlightConfigurationsUpdate_580962;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingFloodlightConfigurationsUpdate
  ## Updates an existing floodlight configuration.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580976 = newJObject()
  var query_580977 = newJObject()
  var body_580978 = newJObject()
  add(query_580977, "key", newJString(key))
  add(query_580977, "prettyPrint", newJBool(prettyPrint))
  add(query_580977, "oauth_token", newJString(oauthToken))
  add(path_580976, "profileId", newJString(profileId))
  add(query_580977, "alt", newJString(alt))
  add(query_580977, "userIp", newJString(userIp))
  add(query_580977, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_580978 = body
  add(query_580977, "fields", newJString(fields))
  result = call_580975.call(path_580976, query_580977, nil, nil, body_580978)

var dfareportingFloodlightConfigurationsUpdate* = Call_DfareportingFloodlightConfigurationsUpdate_580962(
    name: "dfareportingFloodlightConfigurationsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightConfigurations",
    validator: validate_DfareportingFloodlightConfigurationsUpdate_580963,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightConfigurationsUpdate_580964,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightConfigurationsList_580946 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightConfigurationsList_580948(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightConfigurations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightConfigurationsList_580947(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of floodlight configurations, possibly filtered.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580949 = path.getOrDefault("profileId")
  valid_580949 = validateParameter(valid_580949, JString, required = true,
                                 default = nil)
  if valid_580949 != nil:
    section.add "profileId", valid_580949
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   ids: JArray
  ##      : Set of IDs of floodlight configurations to retrieve. Required field; otherwise an empty list will be returned.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580950 = query.getOrDefault("key")
  valid_580950 = validateParameter(valid_580950, JString, required = false,
                                 default = nil)
  if valid_580950 != nil:
    section.add "key", valid_580950
  var valid_580951 = query.getOrDefault("prettyPrint")
  valid_580951 = validateParameter(valid_580951, JBool, required = false,
                                 default = newJBool(true))
  if valid_580951 != nil:
    section.add "prettyPrint", valid_580951
  var valid_580952 = query.getOrDefault("oauth_token")
  valid_580952 = validateParameter(valid_580952, JString, required = false,
                                 default = nil)
  if valid_580952 != nil:
    section.add "oauth_token", valid_580952
  var valid_580953 = query.getOrDefault("alt")
  valid_580953 = validateParameter(valid_580953, JString, required = false,
                                 default = newJString("json"))
  if valid_580953 != nil:
    section.add "alt", valid_580953
  var valid_580954 = query.getOrDefault("userIp")
  valid_580954 = validateParameter(valid_580954, JString, required = false,
                                 default = nil)
  if valid_580954 != nil:
    section.add "userIp", valid_580954
  var valid_580955 = query.getOrDefault("quotaUser")
  valid_580955 = validateParameter(valid_580955, JString, required = false,
                                 default = nil)
  if valid_580955 != nil:
    section.add "quotaUser", valid_580955
  var valid_580956 = query.getOrDefault("ids")
  valid_580956 = validateParameter(valid_580956, JArray, required = false,
                                 default = nil)
  if valid_580956 != nil:
    section.add "ids", valid_580956
  var valid_580957 = query.getOrDefault("fields")
  valid_580957 = validateParameter(valid_580957, JString, required = false,
                                 default = nil)
  if valid_580957 != nil:
    section.add "fields", valid_580957
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_580958: Call_DfareportingFloodlightConfigurationsList_580946;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of floodlight configurations, possibly filtered.
  ## 
  let valid = call_580958.validator(path, query, header, formData, body)
  let scheme = call_580958.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580958.url(scheme.get, call_580958.host, call_580958.base,
                         call_580958.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580958, url, valid)

proc call*(call_580959: Call_DfareportingFloodlightConfigurationsList_580946;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; ids: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingFloodlightConfigurationsList
  ## Retrieves a list of floodlight configurations, possibly filtered.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   ids: JArray
  ##      : Set of IDs of floodlight configurations to retrieve. Required field; otherwise an empty list will be returned.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580960 = newJObject()
  var query_580961 = newJObject()
  add(query_580961, "key", newJString(key))
  add(query_580961, "prettyPrint", newJBool(prettyPrint))
  add(query_580961, "oauth_token", newJString(oauthToken))
  add(path_580960, "profileId", newJString(profileId))
  add(query_580961, "alt", newJString(alt))
  add(query_580961, "userIp", newJString(userIp))
  add(query_580961, "quotaUser", newJString(quotaUser))
  if ids != nil:
    query_580961.add "ids", ids
  add(query_580961, "fields", newJString(fields))
  result = call_580959.call(path_580960, query_580961, nil, nil, nil)

var dfareportingFloodlightConfigurationsList* = Call_DfareportingFloodlightConfigurationsList_580946(
    name: "dfareportingFloodlightConfigurationsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightConfigurations",
    validator: validate_DfareportingFloodlightConfigurationsList_580947,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightConfigurationsList_580948,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightConfigurationsPatch_580979 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightConfigurationsPatch_580981(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightConfigurations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightConfigurationsPatch_580980(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight configuration. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_580982 = path.getOrDefault("profileId")
  valid_580982 = validateParameter(valid_580982, JString, required = true,
                                 default = nil)
  if valid_580982 != nil:
    section.add "profileId", valid_580982
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Floodlight configuration ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_580983 = query.getOrDefault("key")
  valid_580983 = validateParameter(valid_580983, JString, required = false,
                                 default = nil)
  if valid_580983 != nil:
    section.add "key", valid_580983
  var valid_580984 = query.getOrDefault("prettyPrint")
  valid_580984 = validateParameter(valid_580984, JBool, required = false,
                                 default = newJBool(true))
  if valid_580984 != nil:
    section.add "prettyPrint", valid_580984
  var valid_580985 = query.getOrDefault("oauth_token")
  valid_580985 = validateParameter(valid_580985, JString, required = false,
                                 default = nil)
  if valid_580985 != nil:
    section.add "oauth_token", valid_580985
  var valid_580986 = query.getOrDefault("alt")
  valid_580986 = validateParameter(valid_580986, JString, required = false,
                                 default = newJString("json"))
  if valid_580986 != nil:
    section.add "alt", valid_580986
  var valid_580987 = query.getOrDefault("userIp")
  valid_580987 = validateParameter(valid_580987, JString, required = false,
                                 default = nil)
  if valid_580987 != nil:
    section.add "userIp", valid_580987
  var valid_580988 = query.getOrDefault("quotaUser")
  valid_580988 = validateParameter(valid_580988, JString, required = false,
                                 default = nil)
  if valid_580988 != nil:
    section.add "quotaUser", valid_580988
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_580989 = query.getOrDefault("id")
  valid_580989 = validateParameter(valid_580989, JString, required = true,
                                 default = nil)
  if valid_580989 != nil:
    section.add "id", valid_580989
  var valid_580990 = query.getOrDefault("fields")
  valid_580990 = validateParameter(valid_580990, JString, required = false,
                                 default = nil)
  if valid_580990 != nil:
    section.add "fields", valid_580990
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_580992: Call_DfareportingFloodlightConfigurationsPatch_580979;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight configuration. This method supports patch semantics.
  ## 
  let valid = call_580992.validator(path, query, header, formData, body)
  let scheme = call_580992.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_580992.url(scheme.get, call_580992.host, call_580992.base,
                         call_580992.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_580992, url, valid)

proc call*(call_580993: Call_DfareportingFloodlightConfigurationsPatch_580979;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingFloodlightConfigurationsPatch
  ## Updates an existing floodlight configuration. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Floodlight configuration ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_580994 = newJObject()
  var query_580995 = newJObject()
  var body_580996 = newJObject()
  add(query_580995, "key", newJString(key))
  add(query_580995, "prettyPrint", newJBool(prettyPrint))
  add(query_580995, "oauth_token", newJString(oauthToken))
  add(path_580994, "profileId", newJString(profileId))
  add(query_580995, "alt", newJString(alt))
  add(query_580995, "userIp", newJString(userIp))
  add(query_580995, "quotaUser", newJString(quotaUser))
  add(query_580995, "id", newJString(id))
  if body != nil:
    body_580996 = body
  add(query_580995, "fields", newJString(fields))
  result = call_580993.call(path_580994, query_580995, nil, nil, body_580996)

var dfareportingFloodlightConfigurationsPatch* = Call_DfareportingFloodlightConfigurationsPatch_580979(
    name: "dfareportingFloodlightConfigurationsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightConfigurations",
    validator: validate_DfareportingFloodlightConfigurationsPatch_580980,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightConfigurationsPatch_580981,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightConfigurationsGet_580997 = ref object of OpenApiRestCall_578364
proc url_DfareportingFloodlightConfigurationsGet_580999(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightConfigurations/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightConfigurationsGet_580998(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one floodlight configuration by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Floodlight configuration ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581000 = path.getOrDefault("profileId")
  valid_581000 = validateParameter(valid_581000, JString, required = true,
                                 default = nil)
  if valid_581000 != nil:
    section.add "profileId", valid_581000
  var valid_581001 = path.getOrDefault("id")
  valid_581001 = validateParameter(valid_581001, JString, required = true,
                                 default = nil)
  if valid_581001 != nil:
    section.add "id", valid_581001
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581002 = query.getOrDefault("key")
  valid_581002 = validateParameter(valid_581002, JString, required = false,
                                 default = nil)
  if valid_581002 != nil:
    section.add "key", valid_581002
  var valid_581003 = query.getOrDefault("prettyPrint")
  valid_581003 = validateParameter(valid_581003, JBool, required = false,
                                 default = newJBool(true))
  if valid_581003 != nil:
    section.add "prettyPrint", valid_581003
  var valid_581004 = query.getOrDefault("oauth_token")
  valid_581004 = validateParameter(valid_581004, JString, required = false,
                                 default = nil)
  if valid_581004 != nil:
    section.add "oauth_token", valid_581004
  var valid_581005 = query.getOrDefault("alt")
  valid_581005 = validateParameter(valid_581005, JString, required = false,
                                 default = newJString("json"))
  if valid_581005 != nil:
    section.add "alt", valid_581005
  var valid_581006 = query.getOrDefault("userIp")
  valid_581006 = validateParameter(valid_581006, JString, required = false,
                                 default = nil)
  if valid_581006 != nil:
    section.add "userIp", valid_581006
  var valid_581007 = query.getOrDefault("quotaUser")
  valid_581007 = validateParameter(valid_581007, JString, required = false,
                                 default = nil)
  if valid_581007 != nil:
    section.add "quotaUser", valid_581007
  var valid_581008 = query.getOrDefault("fields")
  valid_581008 = validateParameter(valid_581008, JString, required = false,
                                 default = nil)
  if valid_581008 != nil:
    section.add "fields", valid_581008
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581009: Call_DfareportingFloodlightConfigurationsGet_580997;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one floodlight configuration by ID.
  ## 
  let valid = call_581009.validator(path, query, header, formData, body)
  let scheme = call_581009.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581009.url(scheme.get, call_581009.host, call_581009.base,
                         call_581009.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581009, url, valid)

proc call*(call_581010: Call_DfareportingFloodlightConfigurationsGet_580997;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingFloodlightConfigurationsGet
  ## Gets one floodlight configuration by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Floodlight configuration ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581011 = newJObject()
  var query_581012 = newJObject()
  add(query_581012, "key", newJString(key))
  add(query_581012, "prettyPrint", newJBool(prettyPrint))
  add(query_581012, "oauth_token", newJString(oauthToken))
  add(path_581011, "profileId", newJString(profileId))
  add(path_581011, "id", newJString(id))
  add(query_581012, "alt", newJString(alt))
  add(query_581012, "userIp", newJString(userIp))
  add(query_581012, "quotaUser", newJString(quotaUser))
  add(query_581012, "fields", newJString(fields))
  result = call_581010.call(path_581011, query_581012, nil, nil, nil)

var dfareportingFloodlightConfigurationsGet* = Call_DfareportingFloodlightConfigurationsGet_580997(
    name: "dfareportingFloodlightConfigurationsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightConfigurations/{id}",
    validator: validate_DfareportingFloodlightConfigurationsGet_580998,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightConfigurationsGet_580999,
    schemes: {Scheme.Https})
type
  Call_DfareportingLanguagesList_581013 = ref object of OpenApiRestCall_578364
proc url_DfareportingLanguagesList_581015(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/languages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingLanguagesList_581014(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of languages.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581016 = path.getOrDefault("profileId")
  valid_581016 = validateParameter(valid_581016, JString, required = true,
                                 default = nil)
  if valid_581016 != nil:
    section.add "profileId", valid_581016
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581017 = query.getOrDefault("key")
  valid_581017 = validateParameter(valid_581017, JString, required = false,
                                 default = nil)
  if valid_581017 != nil:
    section.add "key", valid_581017
  var valid_581018 = query.getOrDefault("prettyPrint")
  valid_581018 = validateParameter(valid_581018, JBool, required = false,
                                 default = newJBool(true))
  if valid_581018 != nil:
    section.add "prettyPrint", valid_581018
  var valid_581019 = query.getOrDefault("oauth_token")
  valid_581019 = validateParameter(valid_581019, JString, required = false,
                                 default = nil)
  if valid_581019 != nil:
    section.add "oauth_token", valid_581019
  var valid_581020 = query.getOrDefault("alt")
  valid_581020 = validateParameter(valid_581020, JString, required = false,
                                 default = newJString("json"))
  if valid_581020 != nil:
    section.add "alt", valid_581020
  var valid_581021 = query.getOrDefault("userIp")
  valid_581021 = validateParameter(valid_581021, JString, required = false,
                                 default = nil)
  if valid_581021 != nil:
    section.add "userIp", valid_581021
  var valid_581022 = query.getOrDefault("quotaUser")
  valid_581022 = validateParameter(valid_581022, JString, required = false,
                                 default = nil)
  if valid_581022 != nil:
    section.add "quotaUser", valid_581022
  var valid_581023 = query.getOrDefault("fields")
  valid_581023 = validateParameter(valid_581023, JString, required = false,
                                 default = nil)
  if valid_581023 != nil:
    section.add "fields", valid_581023
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581024: Call_DfareportingLanguagesList_581013; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of languages.
  ## 
  let valid = call_581024.validator(path, query, header, formData, body)
  let scheme = call_581024.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581024.url(scheme.get, call_581024.host, call_581024.base,
                         call_581024.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581024, url, valid)

proc call*(call_581025: Call_DfareportingLanguagesList_581013; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingLanguagesList
  ## Retrieves a list of languages.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581026 = newJObject()
  var query_581027 = newJObject()
  add(query_581027, "key", newJString(key))
  add(query_581027, "prettyPrint", newJBool(prettyPrint))
  add(query_581027, "oauth_token", newJString(oauthToken))
  add(path_581026, "profileId", newJString(profileId))
  add(query_581027, "alt", newJString(alt))
  add(query_581027, "userIp", newJString(userIp))
  add(query_581027, "quotaUser", newJString(quotaUser))
  add(query_581027, "fields", newJString(fields))
  result = call_581025.call(path_581026, query_581027, nil, nil, nil)

var dfareportingLanguagesList* = Call_DfareportingLanguagesList_581013(
    name: "dfareportingLanguagesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/languages",
    validator: validate_DfareportingLanguagesList_581014,
    base: "/dfareporting/v3.2", url: url_DfareportingLanguagesList_581015,
    schemes: {Scheme.Https})
type
  Call_DfareportingMetrosList_581028 = ref object of OpenApiRestCall_578364
proc url_DfareportingMetrosList_581030(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/metros")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMetrosList_581029(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of metros.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581031 = path.getOrDefault("profileId")
  valid_581031 = validateParameter(valid_581031, JString, required = true,
                                 default = nil)
  if valid_581031 != nil:
    section.add "profileId", valid_581031
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581032 = query.getOrDefault("key")
  valid_581032 = validateParameter(valid_581032, JString, required = false,
                                 default = nil)
  if valid_581032 != nil:
    section.add "key", valid_581032
  var valid_581033 = query.getOrDefault("prettyPrint")
  valid_581033 = validateParameter(valid_581033, JBool, required = false,
                                 default = newJBool(true))
  if valid_581033 != nil:
    section.add "prettyPrint", valid_581033
  var valid_581034 = query.getOrDefault("oauth_token")
  valid_581034 = validateParameter(valid_581034, JString, required = false,
                                 default = nil)
  if valid_581034 != nil:
    section.add "oauth_token", valid_581034
  var valid_581035 = query.getOrDefault("alt")
  valid_581035 = validateParameter(valid_581035, JString, required = false,
                                 default = newJString("json"))
  if valid_581035 != nil:
    section.add "alt", valid_581035
  var valid_581036 = query.getOrDefault("userIp")
  valid_581036 = validateParameter(valid_581036, JString, required = false,
                                 default = nil)
  if valid_581036 != nil:
    section.add "userIp", valid_581036
  var valid_581037 = query.getOrDefault("quotaUser")
  valid_581037 = validateParameter(valid_581037, JString, required = false,
                                 default = nil)
  if valid_581037 != nil:
    section.add "quotaUser", valid_581037
  var valid_581038 = query.getOrDefault("fields")
  valid_581038 = validateParameter(valid_581038, JString, required = false,
                                 default = nil)
  if valid_581038 != nil:
    section.add "fields", valid_581038
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581039: Call_DfareportingMetrosList_581028; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of metros.
  ## 
  let valid = call_581039.validator(path, query, header, formData, body)
  let scheme = call_581039.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581039.url(scheme.get, call_581039.host, call_581039.base,
                         call_581039.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581039, url, valid)

proc call*(call_581040: Call_DfareportingMetrosList_581028; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingMetrosList
  ## Retrieves a list of metros.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581041 = newJObject()
  var query_581042 = newJObject()
  add(query_581042, "key", newJString(key))
  add(query_581042, "prettyPrint", newJBool(prettyPrint))
  add(query_581042, "oauth_token", newJString(oauthToken))
  add(path_581041, "profileId", newJString(profileId))
  add(query_581042, "alt", newJString(alt))
  add(query_581042, "userIp", newJString(userIp))
  add(query_581042, "quotaUser", newJString(quotaUser))
  add(query_581042, "fields", newJString(fields))
  result = call_581040.call(path_581041, query_581042, nil, nil, nil)

var dfareportingMetrosList* = Call_DfareportingMetrosList_581028(
    name: "dfareportingMetrosList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/metros",
    validator: validate_DfareportingMetrosList_581029, base: "/dfareporting/v3.2",
    url: url_DfareportingMetrosList_581030, schemes: {Scheme.Https})
type
  Call_DfareportingMobileAppsList_581043 = ref object of OpenApiRestCall_578364
proc url_DfareportingMobileAppsList_581045(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/mobileApps")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMobileAppsList_581044(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves list of available mobile apps.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581046 = path.getOrDefault("profileId")
  valid_581046 = validateParameter(valid_581046, JString, required = true,
                                 default = nil)
  if valid_581046 != nil:
    section.add "profileId", valid_581046
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   directories: JArray
  ##              : Select only apps from these directories.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "app*2015" will return objects with names like "app Jan 2018", "app Jan 2018", or simply "app 2018". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "app" will match objects with name "my app", "app 2018", or simply "app".
  ##   ids: JArray
  ##      : Select only apps with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_581047 = query.getOrDefault("key")
  valid_581047 = validateParameter(valid_581047, JString, required = false,
                                 default = nil)
  if valid_581047 != nil:
    section.add "key", valid_581047
  var valid_581048 = query.getOrDefault("prettyPrint")
  valid_581048 = validateParameter(valid_581048, JBool, required = false,
                                 default = newJBool(true))
  if valid_581048 != nil:
    section.add "prettyPrint", valid_581048
  var valid_581049 = query.getOrDefault("oauth_token")
  valid_581049 = validateParameter(valid_581049, JString, required = false,
                                 default = nil)
  if valid_581049 != nil:
    section.add "oauth_token", valid_581049
  var valid_581050 = query.getOrDefault("alt")
  valid_581050 = validateParameter(valid_581050, JString, required = false,
                                 default = newJString("json"))
  if valid_581050 != nil:
    section.add "alt", valid_581050
  var valid_581051 = query.getOrDefault("userIp")
  valid_581051 = validateParameter(valid_581051, JString, required = false,
                                 default = nil)
  if valid_581051 != nil:
    section.add "userIp", valid_581051
  var valid_581052 = query.getOrDefault("quotaUser")
  valid_581052 = validateParameter(valid_581052, JString, required = false,
                                 default = nil)
  if valid_581052 != nil:
    section.add "quotaUser", valid_581052
  var valid_581053 = query.getOrDefault("directories")
  valid_581053 = validateParameter(valid_581053, JArray, required = false,
                                 default = nil)
  if valid_581053 != nil:
    section.add "directories", valid_581053
  var valid_581054 = query.getOrDefault("pageToken")
  valid_581054 = validateParameter(valid_581054, JString, required = false,
                                 default = nil)
  if valid_581054 != nil:
    section.add "pageToken", valid_581054
  var valid_581055 = query.getOrDefault("searchString")
  valid_581055 = validateParameter(valid_581055, JString, required = false,
                                 default = nil)
  if valid_581055 != nil:
    section.add "searchString", valid_581055
  var valid_581056 = query.getOrDefault("ids")
  valid_581056 = validateParameter(valid_581056, JArray, required = false,
                                 default = nil)
  if valid_581056 != nil:
    section.add "ids", valid_581056
  var valid_581057 = query.getOrDefault("fields")
  valid_581057 = validateParameter(valid_581057, JString, required = false,
                                 default = nil)
  if valid_581057 != nil:
    section.add "fields", valid_581057
  var valid_581058 = query.getOrDefault("maxResults")
  valid_581058 = validateParameter(valid_581058, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581058 != nil:
    section.add "maxResults", valid_581058
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581059: Call_DfareportingMobileAppsList_581043; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves list of available mobile apps.
  ## 
  let valid = call_581059.validator(path, query, header, formData, body)
  let scheme = call_581059.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581059.url(scheme.get, call_581059.host, call_581059.base,
                         call_581059.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581059, url, valid)

proc call*(call_581060: Call_DfareportingMobileAppsList_581043; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          directories: JsonNode = nil; pageToken: string = "";
          searchString: string = ""; ids: JsonNode = nil; fields: string = "";
          maxResults: int = 1000): Recallable =
  ## dfareportingMobileAppsList
  ## Retrieves list of available mobile apps.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   directories: JArray
  ##              : Select only apps from these directories.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "app*2015" will return objects with names like "app Jan 2018", "app Jan 2018", or simply "app 2018". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "app" will match objects with name "my app", "app 2018", or simply "app".
  ##   ids: JArray
  ##      : Select only apps with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_581061 = newJObject()
  var query_581062 = newJObject()
  add(query_581062, "key", newJString(key))
  add(query_581062, "prettyPrint", newJBool(prettyPrint))
  add(query_581062, "oauth_token", newJString(oauthToken))
  add(path_581061, "profileId", newJString(profileId))
  add(query_581062, "alt", newJString(alt))
  add(query_581062, "userIp", newJString(userIp))
  add(query_581062, "quotaUser", newJString(quotaUser))
  if directories != nil:
    query_581062.add "directories", directories
  add(query_581062, "pageToken", newJString(pageToken))
  add(query_581062, "searchString", newJString(searchString))
  if ids != nil:
    query_581062.add "ids", ids
  add(query_581062, "fields", newJString(fields))
  add(query_581062, "maxResults", newJInt(maxResults))
  result = call_581060.call(path_581061, query_581062, nil, nil, nil)

var dfareportingMobileAppsList* = Call_DfareportingMobileAppsList_581043(
    name: "dfareportingMobileAppsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/mobileApps",
    validator: validate_DfareportingMobileAppsList_581044,
    base: "/dfareporting/v3.2", url: url_DfareportingMobileAppsList_581045,
    schemes: {Scheme.Https})
type
  Call_DfareportingMobileAppsGet_581063 = ref object of OpenApiRestCall_578364
proc url_DfareportingMobileAppsGet_581065(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/mobileApps/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMobileAppsGet_581064(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one mobile app by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Mobile app ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581066 = path.getOrDefault("profileId")
  valid_581066 = validateParameter(valid_581066, JString, required = true,
                                 default = nil)
  if valid_581066 != nil:
    section.add "profileId", valid_581066
  var valid_581067 = path.getOrDefault("id")
  valid_581067 = validateParameter(valid_581067, JString, required = true,
                                 default = nil)
  if valid_581067 != nil:
    section.add "id", valid_581067
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581068 = query.getOrDefault("key")
  valid_581068 = validateParameter(valid_581068, JString, required = false,
                                 default = nil)
  if valid_581068 != nil:
    section.add "key", valid_581068
  var valid_581069 = query.getOrDefault("prettyPrint")
  valid_581069 = validateParameter(valid_581069, JBool, required = false,
                                 default = newJBool(true))
  if valid_581069 != nil:
    section.add "prettyPrint", valid_581069
  var valid_581070 = query.getOrDefault("oauth_token")
  valid_581070 = validateParameter(valid_581070, JString, required = false,
                                 default = nil)
  if valid_581070 != nil:
    section.add "oauth_token", valid_581070
  var valid_581071 = query.getOrDefault("alt")
  valid_581071 = validateParameter(valid_581071, JString, required = false,
                                 default = newJString("json"))
  if valid_581071 != nil:
    section.add "alt", valid_581071
  var valid_581072 = query.getOrDefault("userIp")
  valid_581072 = validateParameter(valid_581072, JString, required = false,
                                 default = nil)
  if valid_581072 != nil:
    section.add "userIp", valid_581072
  var valid_581073 = query.getOrDefault("quotaUser")
  valid_581073 = validateParameter(valid_581073, JString, required = false,
                                 default = nil)
  if valid_581073 != nil:
    section.add "quotaUser", valid_581073
  var valid_581074 = query.getOrDefault("fields")
  valid_581074 = validateParameter(valid_581074, JString, required = false,
                                 default = nil)
  if valid_581074 != nil:
    section.add "fields", valid_581074
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581075: Call_DfareportingMobileAppsGet_581063; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one mobile app by ID.
  ## 
  let valid = call_581075.validator(path, query, header, formData, body)
  let scheme = call_581075.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581075.url(scheme.get, call_581075.host, call_581075.base,
                         call_581075.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581075, url, valid)

proc call*(call_581076: Call_DfareportingMobileAppsGet_581063; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingMobileAppsGet
  ## Gets one mobile app by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Mobile app ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581077 = newJObject()
  var query_581078 = newJObject()
  add(query_581078, "key", newJString(key))
  add(query_581078, "prettyPrint", newJBool(prettyPrint))
  add(query_581078, "oauth_token", newJString(oauthToken))
  add(path_581077, "profileId", newJString(profileId))
  add(path_581077, "id", newJString(id))
  add(query_581078, "alt", newJString(alt))
  add(query_581078, "userIp", newJString(userIp))
  add(query_581078, "quotaUser", newJString(quotaUser))
  add(query_581078, "fields", newJString(fields))
  result = call_581076.call(path_581077, query_581078, nil, nil, nil)

var dfareportingMobileAppsGet* = Call_DfareportingMobileAppsGet_581063(
    name: "dfareportingMobileAppsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/mobileApps/{id}",
    validator: validate_DfareportingMobileAppsGet_581064,
    base: "/dfareporting/v3.2", url: url_DfareportingMobileAppsGet_581065,
    schemes: {Scheme.Https})
type
  Call_DfareportingMobileCarriersList_581079 = ref object of OpenApiRestCall_578364
proc url_DfareportingMobileCarriersList_581081(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/mobileCarriers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMobileCarriersList_581080(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of mobile carriers.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581082 = path.getOrDefault("profileId")
  valid_581082 = validateParameter(valid_581082, JString, required = true,
                                 default = nil)
  if valid_581082 != nil:
    section.add "profileId", valid_581082
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581083 = query.getOrDefault("key")
  valid_581083 = validateParameter(valid_581083, JString, required = false,
                                 default = nil)
  if valid_581083 != nil:
    section.add "key", valid_581083
  var valid_581084 = query.getOrDefault("prettyPrint")
  valid_581084 = validateParameter(valid_581084, JBool, required = false,
                                 default = newJBool(true))
  if valid_581084 != nil:
    section.add "prettyPrint", valid_581084
  var valid_581085 = query.getOrDefault("oauth_token")
  valid_581085 = validateParameter(valid_581085, JString, required = false,
                                 default = nil)
  if valid_581085 != nil:
    section.add "oauth_token", valid_581085
  var valid_581086 = query.getOrDefault("alt")
  valid_581086 = validateParameter(valid_581086, JString, required = false,
                                 default = newJString("json"))
  if valid_581086 != nil:
    section.add "alt", valid_581086
  var valid_581087 = query.getOrDefault("userIp")
  valid_581087 = validateParameter(valid_581087, JString, required = false,
                                 default = nil)
  if valid_581087 != nil:
    section.add "userIp", valid_581087
  var valid_581088 = query.getOrDefault("quotaUser")
  valid_581088 = validateParameter(valid_581088, JString, required = false,
                                 default = nil)
  if valid_581088 != nil:
    section.add "quotaUser", valid_581088
  var valid_581089 = query.getOrDefault("fields")
  valid_581089 = validateParameter(valid_581089, JString, required = false,
                                 default = nil)
  if valid_581089 != nil:
    section.add "fields", valid_581089
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581090: Call_DfareportingMobileCarriersList_581079; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of mobile carriers.
  ## 
  let valid = call_581090.validator(path, query, header, formData, body)
  let scheme = call_581090.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581090.url(scheme.get, call_581090.host, call_581090.base,
                         call_581090.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581090, url, valid)

proc call*(call_581091: Call_DfareportingMobileCarriersList_581079;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingMobileCarriersList
  ## Retrieves a list of mobile carriers.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581092 = newJObject()
  var query_581093 = newJObject()
  add(query_581093, "key", newJString(key))
  add(query_581093, "prettyPrint", newJBool(prettyPrint))
  add(query_581093, "oauth_token", newJString(oauthToken))
  add(path_581092, "profileId", newJString(profileId))
  add(query_581093, "alt", newJString(alt))
  add(query_581093, "userIp", newJString(userIp))
  add(query_581093, "quotaUser", newJString(quotaUser))
  add(query_581093, "fields", newJString(fields))
  result = call_581091.call(path_581092, query_581093, nil, nil, nil)

var dfareportingMobileCarriersList* = Call_DfareportingMobileCarriersList_581079(
    name: "dfareportingMobileCarriersList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/mobileCarriers",
    validator: validate_DfareportingMobileCarriersList_581080,
    base: "/dfareporting/v3.2", url: url_DfareportingMobileCarriersList_581081,
    schemes: {Scheme.Https})
type
  Call_DfareportingMobileCarriersGet_581094 = ref object of OpenApiRestCall_578364
proc url_DfareportingMobileCarriersGet_581096(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/mobileCarriers/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMobileCarriersGet_581095(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one mobile carrier by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Mobile carrier ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581097 = path.getOrDefault("profileId")
  valid_581097 = validateParameter(valid_581097, JString, required = true,
                                 default = nil)
  if valid_581097 != nil:
    section.add "profileId", valid_581097
  var valid_581098 = path.getOrDefault("id")
  valid_581098 = validateParameter(valid_581098, JString, required = true,
                                 default = nil)
  if valid_581098 != nil:
    section.add "id", valid_581098
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581099 = query.getOrDefault("key")
  valid_581099 = validateParameter(valid_581099, JString, required = false,
                                 default = nil)
  if valid_581099 != nil:
    section.add "key", valid_581099
  var valid_581100 = query.getOrDefault("prettyPrint")
  valid_581100 = validateParameter(valid_581100, JBool, required = false,
                                 default = newJBool(true))
  if valid_581100 != nil:
    section.add "prettyPrint", valid_581100
  var valid_581101 = query.getOrDefault("oauth_token")
  valid_581101 = validateParameter(valid_581101, JString, required = false,
                                 default = nil)
  if valid_581101 != nil:
    section.add "oauth_token", valid_581101
  var valid_581102 = query.getOrDefault("alt")
  valid_581102 = validateParameter(valid_581102, JString, required = false,
                                 default = newJString("json"))
  if valid_581102 != nil:
    section.add "alt", valid_581102
  var valid_581103 = query.getOrDefault("userIp")
  valid_581103 = validateParameter(valid_581103, JString, required = false,
                                 default = nil)
  if valid_581103 != nil:
    section.add "userIp", valid_581103
  var valid_581104 = query.getOrDefault("quotaUser")
  valid_581104 = validateParameter(valid_581104, JString, required = false,
                                 default = nil)
  if valid_581104 != nil:
    section.add "quotaUser", valid_581104
  var valid_581105 = query.getOrDefault("fields")
  valid_581105 = validateParameter(valid_581105, JString, required = false,
                                 default = nil)
  if valid_581105 != nil:
    section.add "fields", valid_581105
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581106: Call_DfareportingMobileCarriersGet_581094; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one mobile carrier by ID.
  ## 
  let valid = call_581106.validator(path, query, header, formData, body)
  let scheme = call_581106.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581106.url(scheme.get, call_581106.host, call_581106.base,
                         call_581106.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581106, url, valid)

proc call*(call_581107: Call_DfareportingMobileCarriersGet_581094;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingMobileCarriersGet
  ## Gets one mobile carrier by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Mobile carrier ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581108 = newJObject()
  var query_581109 = newJObject()
  add(query_581109, "key", newJString(key))
  add(query_581109, "prettyPrint", newJBool(prettyPrint))
  add(query_581109, "oauth_token", newJString(oauthToken))
  add(path_581108, "profileId", newJString(profileId))
  add(path_581108, "id", newJString(id))
  add(query_581109, "alt", newJString(alt))
  add(query_581109, "userIp", newJString(userIp))
  add(query_581109, "quotaUser", newJString(quotaUser))
  add(query_581109, "fields", newJString(fields))
  result = call_581107.call(path_581108, query_581109, nil, nil, nil)

var dfareportingMobileCarriersGet* = Call_DfareportingMobileCarriersGet_581094(
    name: "dfareportingMobileCarriersGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/mobileCarriers/{id}",
    validator: validate_DfareportingMobileCarriersGet_581095,
    base: "/dfareporting/v3.2", url: url_DfareportingMobileCarriersGet_581096,
    schemes: {Scheme.Https})
type
  Call_DfareportingOperatingSystemVersionsList_581110 = ref object of OpenApiRestCall_578364
proc url_DfareportingOperatingSystemVersionsList_581112(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/operatingSystemVersions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOperatingSystemVersionsList_581111(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of operating system versions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581113 = path.getOrDefault("profileId")
  valid_581113 = validateParameter(valid_581113, JString, required = true,
                                 default = nil)
  if valid_581113 != nil:
    section.add "profileId", valid_581113
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581114 = query.getOrDefault("key")
  valid_581114 = validateParameter(valid_581114, JString, required = false,
                                 default = nil)
  if valid_581114 != nil:
    section.add "key", valid_581114
  var valid_581115 = query.getOrDefault("prettyPrint")
  valid_581115 = validateParameter(valid_581115, JBool, required = false,
                                 default = newJBool(true))
  if valid_581115 != nil:
    section.add "prettyPrint", valid_581115
  var valid_581116 = query.getOrDefault("oauth_token")
  valid_581116 = validateParameter(valid_581116, JString, required = false,
                                 default = nil)
  if valid_581116 != nil:
    section.add "oauth_token", valid_581116
  var valid_581117 = query.getOrDefault("alt")
  valid_581117 = validateParameter(valid_581117, JString, required = false,
                                 default = newJString("json"))
  if valid_581117 != nil:
    section.add "alt", valid_581117
  var valid_581118 = query.getOrDefault("userIp")
  valid_581118 = validateParameter(valid_581118, JString, required = false,
                                 default = nil)
  if valid_581118 != nil:
    section.add "userIp", valid_581118
  var valid_581119 = query.getOrDefault("quotaUser")
  valid_581119 = validateParameter(valid_581119, JString, required = false,
                                 default = nil)
  if valid_581119 != nil:
    section.add "quotaUser", valid_581119
  var valid_581120 = query.getOrDefault("fields")
  valid_581120 = validateParameter(valid_581120, JString, required = false,
                                 default = nil)
  if valid_581120 != nil:
    section.add "fields", valid_581120
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581121: Call_DfareportingOperatingSystemVersionsList_581110;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of operating system versions.
  ## 
  let valid = call_581121.validator(path, query, header, formData, body)
  let scheme = call_581121.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581121.url(scheme.get, call_581121.host, call_581121.base,
                         call_581121.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581121, url, valid)

proc call*(call_581122: Call_DfareportingOperatingSystemVersionsList_581110;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingOperatingSystemVersionsList
  ## Retrieves a list of operating system versions.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581123 = newJObject()
  var query_581124 = newJObject()
  add(query_581124, "key", newJString(key))
  add(query_581124, "prettyPrint", newJBool(prettyPrint))
  add(query_581124, "oauth_token", newJString(oauthToken))
  add(path_581123, "profileId", newJString(profileId))
  add(query_581124, "alt", newJString(alt))
  add(query_581124, "userIp", newJString(userIp))
  add(query_581124, "quotaUser", newJString(quotaUser))
  add(query_581124, "fields", newJString(fields))
  result = call_581122.call(path_581123, query_581124, nil, nil, nil)

var dfareportingOperatingSystemVersionsList* = Call_DfareportingOperatingSystemVersionsList_581110(
    name: "dfareportingOperatingSystemVersionsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/operatingSystemVersions",
    validator: validate_DfareportingOperatingSystemVersionsList_581111,
    base: "/dfareporting/v3.2", url: url_DfareportingOperatingSystemVersionsList_581112,
    schemes: {Scheme.Https})
type
  Call_DfareportingOperatingSystemVersionsGet_581125 = ref object of OpenApiRestCall_578364
proc url_DfareportingOperatingSystemVersionsGet_581127(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/operatingSystemVersions/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOperatingSystemVersionsGet_581126(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one operating system version by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Operating system version ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581128 = path.getOrDefault("profileId")
  valid_581128 = validateParameter(valid_581128, JString, required = true,
                                 default = nil)
  if valid_581128 != nil:
    section.add "profileId", valid_581128
  var valid_581129 = path.getOrDefault("id")
  valid_581129 = validateParameter(valid_581129, JString, required = true,
                                 default = nil)
  if valid_581129 != nil:
    section.add "id", valid_581129
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581130 = query.getOrDefault("key")
  valid_581130 = validateParameter(valid_581130, JString, required = false,
                                 default = nil)
  if valid_581130 != nil:
    section.add "key", valid_581130
  var valid_581131 = query.getOrDefault("prettyPrint")
  valid_581131 = validateParameter(valid_581131, JBool, required = false,
                                 default = newJBool(true))
  if valid_581131 != nil:
    section.add "prettyPrint", valid_581131
  var valid_581132 = query.getOrDefault("oauth_token")
  valid_581132 = validateParameter(valid_581132, JString, required = false,
                                 default = nil)
  if valid_581132 != nil:
    section.add "oauth_token", valid_581132
  var valid_581133 = query.getOrDefault("alt")
  valid_581133 = validateParameter(valid_581133, JString, required = false,
                                 default = newJString("json"))
  if valid_581133 != nil:
    section.add "alt", valid_581133
  var valid_581134 = query.getOrDefault("userIp")
  valid_581134 = validateParameter(valid_581134, JString, required = false,
                                 default = nil)
  if valid_581134 != nil:
    section.add "userIp", valid_581134
  var valid_581135 = query.getOrDefault("quotaUser")
  valid_581135 = validateParameter(valid_581135, JString, required = false,
                                 default = nil)
  if valid_581135 != nil:
    section.add "quotaUser", valid_581135
  var valid_581136 = query.getOrDefault("fields")
  valid_581136 = validateParameter(valid_581136, JString, required = false,
                                 default = nil)
  if valid_581136 != nil:
    section.add "fields", valid_581136
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581137: Call_DfareportingOperatingSystemVersionsGet_581125;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one operating system version by ID.
  ## 
  let valid = call_581137.validator(path, query, header, formData, body)
  let scheme = call_581137.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581137.url(scheme.get, call_581137.host, call_581137.base,
                         call_581137.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581137, url, valid)

proc call*(call_581138: Call_DfareportingOperatingSystemVersionsGet_581125;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingOperatingSystemVersionsGet
  ## Gets one operating system version by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Operating system version ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581139 = newJObject()
  var query_581140 = newJObject()
  add(query_581140, "key", newJString(key))
  add(query_581140, "prettyPrint", newJBool(prettyPrint))
  add(query_581140, "oauth_token", newJString(oauthToken))
  add(path_581139, "profileId", newJString(profileId))
  add(path_581139, "id", newJString(id))
  add(query_581140, "alt", newJString(alt))
  add(query_581140, "userIp", newJString(userIp))
  add(query_581140, "quotaUser", newJString(quotaUser))
  add(query_581140, "fields", newJString(fields))
  result = call_581138.call(path_581139, query_581140, nil, nil, nil)

var dfareportingOperatingSystemVersionsGet* = Call_DfareportingOperatingSystemVersionsGet_581125(
    name: "dfareportingOperatingSystemVersionsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/operatingSystemVersions/{id}",
    validator: validate_DfareportingOperatingSystemVersionsGet_581126,
    base: "/dfareporting/v3.2", url: url_DfareportingOperatingSystemVersionsGet_581127,
    schemes: {Scheme.Https})
type
  Call_DfareportingOperatingSystemsList_581141 = ref object of OpenApiRestCall_578364
proc url_DfareportingOperatingSystemsList_581143(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/operatingSystems")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOperatingSystemsList_581142(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of operating systems.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581144 = path.getOrDefault("profileId")
  valid_581144 = validateParameter(valid_581144, JString, required = true,
                                 default = nil)
  if valid_581144 != nil:
    section.add "profileId", valid_581144
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581145 = query.getOrDefault("key")
  valid_581145 = validateParameter(valid_581145, JString, required = false,
                                 default = nil)
  if valid_581145 != nil:
    section.add "key", valid_581145
  var valid_581146 = query.getOrDefault("prettyPrint")
  valid_581146 = validateParameter(valid_581146, JBool, required = false,
                                 default = newJBool(true))
  if valid_581146 != nil:
    section.add "prettyPrint", valid_581146
  var valid_581147 = query.getOrDefault("oauth_token")
  valid_581147 = validateParameter(valid_581147, JString, required = false,
                                 default = nil)
  if valid_581147 != nil:
    section.add "oauth_token", valid_581147
  var valid_581148 = query.getOrDefault("alt")
  valid_581148 = validateParameter(valid_581148, JString, required = false,
                                 default = newJString("json"))
  if valid_581148 != nil:
    section.add "alt", valid_581148
  var valid_581149 = query.getOrDefault("userIp")
  valid_581149 = validateParameter(valid_581149, JString, required = false,
                                 default = nil)
  if valid_581149 != nil:
    section.add "userIp", valid_581149
  var valid_581150 = query.getOrDefault("quotaUser")
  valid_581150 = validateParameter(valid_581150, JString, required = false,
                                 default = nil)
  if valid_581150 != nil:
    section.add "quotaUser", valid_581150
  var valid_581151 = query.getOrDefault("fields")
  valid_581151 = validateParameter(valid_581151, JString, required = false,
                                 default = nil)
  if valid_581151 != nil:
    section.add "fields", valid_581151
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581152: Call_DfareportingOperatingSystemsList_581141;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of operating systems.
  ## 
  let valid = call_581152.validator(path, query, header, formData, body)
  let scheme = call_581152.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581152.url(scheme.get, call_581152.host, call_581152.base,
                         call_581152.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581152, url, valid)

proc call*(call_581153: Call_DfareportingOperatingSystemsList_581141;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingOperatingSystemsList
  ## Retrieves a list of operating systems.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581154 = newJObject()
  var query_581155 = newJObject()
  add(query_581155, "key", newJString(key))
  add(query_581155, "prettyPrint", newJBool(prettyPrint))
  add(query_581155, "oauth_token", newJString(oauthToken))
  add(path_581154, "profileId", newJString(profileId))
  add(query_581155, "alt", newJString(alt))
  add(query_581155, "userIp", newJString(userIp))
  add(query_581155, "quotaUser", newJString(quotaUser))
  add(query_581155, "fields", newJString(fields))
  result = call_581153.call(path_581154, query_581155, nil, nil, nil)

var dfareportingOperatingSystemsList* = Call_DfareportingOperatingSystemsList_581141(
    name: "dfareportingOperatingSystemsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/operatingSystems",
    validator: validate_DfareportingOperatingSystemsList_581142,
    base: "/dfareporting/v3.2", url: url_DfareportingOperatingSystemsList_581143,
    schemes: {Scheme.Https})
type
  Call_DfareportingOperatingSystemsGet_581156 = ref object of OpenApiRestCall_578364
proc url_DfareportingOperatingSystemsGet_581158(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "dartId" in path, "`dartId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/operatingSystems/"),
               (kind: VariableSegment, value: "dartId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOperatingSystemsGet_581157(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one operating system by DART ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   dartId: JString (required)
  ##         : Operating system DART ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581159 = path.getOrDefault("profileId")
  valid_581159 = validateParameter(valid_581159, JString, required = true,
                                 default = nil)
  if valid_581159 != nil:
    section.add "profileId", valid_581159
  var valid_581160 = path.getOrDefault("dartId")
  valid_581160 = validateParameter(valid_581160, JString, required = true,
                                 default = nil)
  if valid_581160 != nil:
    section.add "dartId", valid_581160
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581161 = query.getOrDefault("key")
  valid_581161 = validateParameter(valid_581161, JString, required = false,
                                 default = nil)
  if valid_581161 != nil:
    section.add "key", valid_581161
  var valid_581162 = query.getOrDefault("prettyPrint")
  valid_581162 = validateParameter(valid_581162, JBool, required = false,
                                 default = newJBool(true))
  if valid_581162 != nil:
    section.add "prettyPrint", valid_581162
  var valid_581163 = query.getOrDefault("oauth_token")
  valid_581163 = validateParameter(valid_581163, JString, required = false,
                                 default = nil)
  if valid_581163 != nil:
    section.add "oauth_token", valid_581163
  var valid_581164 = query.getOrDefault("alt")
  valid_581164 = validateParameter(valid_581164, JString, required = false,
                                 default = newJString("json"))
  if valid_581164 != nil:
    section.add "alt", valid_581164
  var valid_581165 = query.getOrDefault("userIp")
  valid_581165 = validateParameter(valid_581165, JString, required = false,
                                 default = nil)
  if valid_581165 != nil:
    section.add "userIp", valid_581165
  var valid_581166 = query.getOrDefault("quotaUser")
  valid_581166 = validateParameter(valid_581166, JString, required = false,
                                 default = nil)
  if valid_581166 != nil:
    section.add "quotaUser", valid_581166
  var valid_581167 = query.getOrDefault("fields")
  valid_581167 = validateParameter(valid_581167, JString, required = false,
                                 default = nil)
  if valid_581167 != nil:
    section.add "fields", valid_581167
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581168: Call_DfareportingOperatingSystemsGet_581156;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one operating system by DART ID.
  ## 
  let valid = call_581168.validator(path, query, header, formData, body)
  let scheme = call_581168.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581168.url(scheme.get, call_581168.host, call_581168.base,
                         call_581168.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581168, url, valid)

proc call*(call_581169: Call_DfareportingOperatingSystemsGet_581156;
          profileId: string; dartId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingOperatingSystemsGet
  ## Gets one operating system by DART ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   dartId: string (required)
  ##         : Operating system DART ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581170 = newJObject()
  var query_581171 = newJObject()
  add(query_581171, "key", newJString(key))
  add(query_581171, "prettyPrint", newJBool(prettyPrint))
  add(query_581171, "oauth_token", newJString(oauthToken))
  add(path_581170, "profileId", newJString(profileId))
  add(query_581171, "alt", newJString(alt))
  add(query_581171, "userIp", newJString(userIp))
  add(query_581171, "quotaUser", newJString(quotaUser))
  add(path_581170, "dartId", newJString(dartId))
  add(query_581171, "fields", newJString(fields))
  result = call_581169.call(path_581170, query_581171, nil, nil, nil)

var dfareportingOperatingSystemsGet* = Call_DfareportingOperatingSystemsGet_581156(
    name: "dfareportingOperatingSystemsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/operatingSystems/{dartId}",
    validator: validate_DfareportingOperatingSystemsGet_581157,
    base: "/dfareporting/v3.2", url: url_DfareportingOperatingSystemsGet_581158,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsUpdate_581206 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementGroupsUpdate_581208(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsUpdate_581207(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581209 = path.getOrDefault("profileId")
  valid_581209 = validateParameter(valid_581209, JString, required = true,
                                 default = nil)
  if valid_581209 != nil:
    section.add "profileId", valid_581209
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581210 = query.getOrDefault("key")
  valid_581210 = validateParameter(valid_581210, JString, required = false,
                                 default = nil)
  if valid_581210 != nil:
    section.add "key", valid_581210
  var valid_581211 = query.getOrDefault("prettyPrint")
  valid_581211 = validateParameter(valid_581211, JBool, required = false,
                                 default = newJBool(true))
  if valid_581211 != nil:
    section.add "prettyPrint", valid_581211
  var valid_581212 = query.getOrDefault("oauth_token")
  valid_581212 = validateParameter(valid_581212, JString, required = false,
                                 default = nil)
  if valid_581212 != nil:
    section.add "oauth_token", valid_581212
  var valid_581213 = query.getOrDefault("alt")
  valid_581213 = validateParameter(valid_581213, JString, required = false,
                                 default = newJString("json"))
  if valid_581213 != nil:
    section.add "alt", valid_581213
  var valid_581214 = query.getOrDefault("userIp")
  valid_581214 = validateParameter(valid_581214, JString, required = false,
                                 default = nil)
  if valid_581214 != nil:
    section.add "userIp", valid_581214
  var valid_581215 = query.getOrDefault("quotaUser")
  valid_581215 = validateParameter(valid_581215, JString, required = false,
                                 default = nil)
  if valid_581215 != nil:
    section.add "quotaUser", valid_581215
  var valid_581216 = query.getOrDefault("fields")
  valid_581216 = validateParameter(valid_581216, JString, required = false,
                                 default = nil)
  if valid_581216 != nil:
    section.add "fields", valid_581216
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581218: Call_DfareportingPlacementGroupsUpdate_581206;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing placement group.
  ## 
  let valid = call_581218.validator(path, query, header, formData, body)
  let scheme = call_581218.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581218.url(scheme.get, call_581218.host, call_581218.base,
                         call_581218.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581218, url, valid)

proc call*(call_581219: Call_DfareportingPlacementGroupsUpdate_581206;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingPlacementGroupsUpdate
  ## Updates an existing placement group.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581220 = newJObject()
  var query_581221 = newJObject()
  var body_581222 = newJObject()
  add(query_581221, "key", newJString(key))
  add(query_581221, "prettyPrint", newJBool(prettyPrint))
  add(query_581221, "oauth_token", newJString(oauthToken))
  add(path_581220, "profileId", newJString(profileId))
  add(query_581221, "alt", newJString(alt))
  add(query_581221, "userIp", newJString(userIp))
  add(query_581221, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581222 = body
  add(query_581221, "fields", newJString(fields))
  result = call_581219.call(path_581220, query_581221, nil, nil, body_581222)

var dfareportingPlacementGroupsUpdate* = Call_DfareportingPlacementGroupsUpdate_581206(
    name: "dfareportingPlacementGroupsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups",
    validator: validate_DfareportingPlacementGroupsUpdate_581207,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementGroupsUpdate_581208,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsInsert_581223 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementGroupsInsert_581225(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsInsert_581224(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new placement group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581226 = path.getOrDefault("profileId")
  valid_581226 = validateParameter(valid_581226, JString, required = true,
                                 default = nil)
  if valid_581226 != nil:
    section.add "profileId", valid_581226
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581227 = query.getOrDefault("key")
  valid_581227 = validateParameter(valid_581227, JString, required = false,
                                 default = nil)
  if valid_581227 != nil:
    section.add "key", valid_581227
  var valid_581228 = query.getOrDefault("prettyPrint")
  valid_581228 = validateParameter(valid_581228, JBool, required = false,
                                 default = newJBool(true))
  if valid_581228 != nil:
    section.add "prettyPrint", valid_581228
  var valid_581229 = query.getOrDefault("oauth_token")
  valid_581229 = validateParameter(valid_581229, JString, required = false,
                                 default = nil)
  if valid_581229 != nil:
    section.add "oauth_token", valid_581229
  var valid_581230 = query.getOrDefault("alt")
  valid_581230 = validateParameter(valid_581230, JString, required = false,
                                 default = newJString("json"))
  if valid_581230 != nil:
    section.add "alt", valid_581230
  var valid_581231 = query.getOrDefault("userIp")
  valid_581231 = validateParameter(valid_581231, JString, required = false,
                                 default = nil)
  if valid_581231 != nil:
    section.add "userIp", valid_581231
  var valid_581232 = query.getOrDefault("quotaUser")
  valid_581232 = validateParameter(valid_581232, JString, required = false,
                                 default = nil)
  if valid_581232 != nil:
    section.add "quotaUser", valid_581232
  var valid_581233 = query.getOrDefault("fields")
  valid_581233 = validateParameter(valid_581233, JString, required = false,
                                 default = nil)
  if valid_581233 != nil:
    section.add "fields", valid_581233
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581235: Call_DfareportingPlacementGroupsInsert_581223;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new placement group.
  ## 
  let valid = call_581235.validator(path, query, header, formData, body)
  let scheme = call_581235.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581235.url(scheme.get, call_581235.host, call_581235.base,
                         call_581235.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581235, url, valid)

proc call*(call_581236: Call_DfareportingPlacementGroupsInsert_581223;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingPlacementGroupsInsert
  ## Inserts a new placement group.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581237 = newJObject()
  var query_581238 = newJObject()
  var body_581239 = newJObject()
  add(query_581238, "key", newJString(key))
  add(query_581238, "prettyPrint", newJBool(prettyPrint))
  add(query_581238, "oauth_token", newJString(oauthToken))
  add(path_581237, "profileId", newJString(profileId))
  add(query_581238, "alt", newJString(alt))
  add(query_581238, "userIp", newJString(userIp))
  add(query_581238, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581239 = body
  add(query_581238, "fields", newJString(fields))
  result = call_581236.call(path_581237, query_581238, nil, nil, body_581239)

var dfareportingPlacementGroupsInsert* = Call_DfareportingPlacementGroupsInsert_581223(
    name: "dfareportingPlacementGroupsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups",
    validator: validate_DfareportingPlacementGroupsInsert_581224,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementGroupsInsert_581225,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsList_581172 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementGroupsList_581174(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsList_581173(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of placement groups, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581175 = path.getOrDefault("profileId")
  valid_581175 = validateParameter(valid_581175, JString, required = true,
                                 default = nil)
  if valid_581175 != nil:
    section.add "profileId", valid_581175
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   maxStartDate: JString
  ##               : Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   placementStrategyIds: JArray
  ##                       : Select only placement groups that are associated with these placement strategies.
  ##   pricingTypes: JArray
  ##               : Select only placement groups with these pricing types.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   contentCategoryIds: JArray
  ##                     : Select only placement groups that are associated with these content categories.
  ##   advertiserIds: JArray
  ##                : Select only placement groups that belong to these advertisers.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived placements. Don't set this field to select both archived and non-archived placements.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   directorySiteIds: JArray
  ##                   : Select only placement groups that are associated with these directory sites.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   minStartDate: JString
  ##               : Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   searchString: JString
  ##               : Allows searching for placement groups by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placement groups with names like "placement group June 2015", "placement group May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementgroup" will match placement groups with name "my placementgroup", "placementgroup 2015", or simply "placementgroup".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   siteIds: JArray
  ##          : Select only placement groups that are associated with these sites.
  ##   maxEndDate: JString
  ##             : Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   campaignIds: JArray
  ##              : Select only placement groups that belong to these campaigns.
  ##   placementGroupType: JString
  ##                     : Select only placement groups belonging with this group type. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting.
  ##   ids: JArray
  ##      : Select only placement groups with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   minEndDate: JString
  ##             : Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
  section = newJObject()
  var valid_581176 = query.getOrDefault("key")
  valid_581176 = validateParameter(valid_581176, JString, required = false,
                                 default = nil)
  if valid_581176 != nil:
    section.add "key", valid_581176
  var valid_581177 = query.getOrDefault("maxStartDate")
  valid_581177 = validateParameter(valid_581177, JString, required = false,
                                 default = nil)
  if valid_581177 != nil:
    section.add "maxStartDate", valid_581177
  var valid_581178 = query.getOrDefault("prettyPrint")
  valid_581178 = validateParameter(valid_581178, JBool, required = false,
                                 default = newJBool(true))
  if valid_581178 != nil:
    section.add "prettyPrint", valid_581178
  var valid_581179 = query.getOrDefault("oauth_token")
  valid_581179 = validateParameter(valid_581179, JString, required = false,
                                 default = nil)
  if valid_581179 != nil:
    section.add "oauth_token", valid_581179
  var valid_581180 = query.getOrDefault("placementStrategyIds")
  valid_581180 = validateParameter(valid_581180, JArray, required = false,
                                 default = nil)
  if valid_581180 != nil:
    section.add "placementStrategyIds", valid_581180
  var valid_581181 = query.getOrDefault("pricingTypes")
  valid_581181 = validateParameter(valid_581181, JArray, required = false,
                                 default = nil)
  if valid_581181 != nil:
    section.add "pricingTypes", valid_581181
  var valid_581182 = query.getOrDefault("sortField")
  valid_581182 = validateParameter(valid_581182, JString, required = false,
                                 default = newJString("ID"))
  if valid_581182 != nil:
    section.add "sortField", valid_581182
  var valid_581183 = query.getOrDefault("contentCategoryIds")
  valid_581183 = validateParameter(valid_581183, JArray, required = false,
                                 default = nil)
  if valid_581183 != nil:
    section.add "contentCategoryIds", valid_581183
  var valid_581184 = query.getOrDefault("advertiserIds")
  valid_581184 = validateParameter(valid_581184, JArray, required = false,
                                 default = nil)
  if valid_581184 != nil:
    section.add "advertiserIds", valid_581184
  var valid_581185 = query.getOrDefault("alt")
  valid_581185 = validateParameter(valid_581185, JString, required = false,
                                 default = newJString("json"))
  if valid_581185 != nil:
    section.add "alt", valid_581185
  var valid_581186 = query.getOrDefault("userIp")
  valid_581186 = validateParameter(valid_581186, JString, required = false,
                                 default = nil)
  if valid_581186 != nil:
    section.add "userIp", valid_581186
  var valid_581187 = query.getOrDefault("archived")
  valid_581187 = validateParameter(valid_581187, JBool, required = false, default = nil)
  if valid_581187 != nil:
    section.add "archived", valid_581187
  var valid_581188 = query.getOrDefault("quotaUser")
  valid_581188 = validateParameter(valid_581188, JString, required = false,
                                 default = nil)
  if valid_581188 != nil:
    section.add "quotaUser", valid_581188
  var valid_581189 = query.getOrDefault("directorySiteIds")
  valid_581189 = validateParameter(valid_581189, JArray, required = false,
                                 default = nil)
  if valid_581189 != nil:
    section.add "directorySiteIds", valid_581189
  var valid_581190 = query.getOrDefault("pageToken")
  valid_581190 = validateParameter(valid_581190, JString, required = false,
                                 default = nil)
  if valid_581190 != nil:
    section.add "pageToken", valid_581190
  var valid_581191 = query.getOrDefault("minStartDate")
  valid_581191 = validateParameter(valid_581191, JString, required = false,
                                 default = nil)
  if valid_581191 != nil:
    section.add "minStartDate", valid_581191
  var valid_581192 = query.getOrDefault("searchString")
  valid_581192 = validateParameter(valid_581192, JString, required = false,
                                 default = nil)
  if valid_581192 != nil:
    section.add "searchString", valid_581192
  var valid_581193 = query.getOrDefault("sortOrder")
  valid_581193 = validateParameter(valid_581193, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581193 != nil:
    section.add "sortOrder", valid_581193
  var valid_581194 = query.getOrDefault("siteIds")
  valid_581194 = validateParameter(valid_581194, JArray, required = false,
                                 default = nil)
  if valid_581194 != nil:
    section.add "siteIds", valid_581194
  var valid_581195 = query.getOrDefault("maxEndDate")
  valid_581195 = validateParameter(valid_581195, JString, required = false,
                                 default = nil)
  if valid_581195 != nil:
    section.add "maxEndDate", valid_581195
  var valid_581196 = query.getOrDefault("campaignIds")
  valid_581196 = validateParameter(valid_581196, JArray, required = false,
                                 default = nil)
  if valid_581196 != nil:
    section.add "campaignIds", valid_581196
  var valid_581197 = query.getOrDefault("placementGroupType")
  valid_581197 = validateParameter(valid_581197, JString, required = false,
                                 default = newJString("PLACEMENT_PACKAGE"))
  if valid_581197 != nil:
    section.add "placementGroupType", valid_581197
  var valid_581198 = query.getOrDefault("ids")
  valid_581198 = validateParameter(valid_581198, JArray, required = false,
                                 default = nil)
  if valid_581198 != nil:
    section.add "ids", valid_581198
  var valid_581199 = query.getOrDefault("fields")
  valid_581199 = validateParameter(valid_581199, JString, required = false,
                                 default = nil)
  if valid_581199 != nil:
    section.add "fields", valid_581199
  var valid_581200 = query.getOrDefault("maxResults")
  valid_581200 = validateParameter(valid_581200, JInt, required = false,
                                 default = newJInt(800))
  if valid_581200 != nil:
    section.add "maxResults", valid_581200
  var valid_581201 = query.getOrDefault("minEndDate")
  valid_581201 = validateParameter(valid_581201, JString, required = false,
                                 default = nil)
  if valid_581201 != nil:
    section.add "minEndDate", valid_581201
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581202: Call_DfareportingPlacementGroupsList_581172;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of placement groups, possibly filtered. This method supports paging.
  ## 
  let valid = call_581202.validator(path, query, header, formData, body)
  let scheme = call_581202.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581202.url(scheme.get, call_581202.host, call_581202.base,
                         call_581202.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581202, url, valid)

proc call*(call_581203: Call_DfareportingPlacementGroupsList_581172;
          profileId: string; key: string = ""; maxStartDate: string = "";
          prettyPrint: bool = true; oauthToken: string = "";
          placementStrategyIds: JsonNode = nil; pricingTypes: JsonNode = nil;
          sortField: string = "ID"; contentCategoryIds: JsonNode = nil;
          advertiserIds: JsonNode = nil; alt: string = "json"; userIp: string = "";
          archived: bool = false; quotaUser: string = "";
          directorySiteIds: JsonNode = nil; pageToken: string = "";
          minStartDate: string = ""; searchString: string = "";
          sortOrder: string = "ASCENDING"; siteIds: JsonNode = nil;
          maxEndDate: string = ""; campaignIds: JsonNode = nil;
          placementGroupType: string = "PLACEMENT_PACKAGE"; ids: JsonNode = nil;
          fields: string = ""; maxResults: int = 800; minEndDate: string = ""): Recallable =
  ## dfareportingPlacementGroupsList
  ## Retrieves a list of placement groups, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   maxStartDate: string
  ##               : Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   placementStrategyIds: JArray
  ##                       : Select only placement groups that are associated with these placement strategies.
  ##   pricingTypes: JArray
  ##               : Select only placement groups with these pricing types.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   contentCategoryIds: JArray
  ##                     : Select only placement groups that are associated with these content categories.
  ##   advertiserIds: JArray
  ##                : Select only placement groups that belong to these advertisers.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived placements. Don't set this field to select both archived and non-archived placements.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   directorySiteIds: JArray
  ##                   : Select only placement groups that are associated with these directory sites.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   minStartDate: string
  ##               : Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   searchString: string
  ##               : Allows searching for placement groups by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placement groups with names like "placement group June 2015", "placement group May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementgroup" will match placement groups with name "my placementgroup", "placementgroup 2015", or simply "placementgroup".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   siteIds: JArray
  ##          : Select only placement groups that are associated with these sites.
  ##   maxEndDate: string
  ##             : Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   campaignIds: JArray
  ##              : Select only placement groups that belong to these campaigns.
  ##   placementGroupType: string
  ##                     : Select only placement groups belonging with this group type. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting.
  ##   ids: JArray
  ##      : Select only placement groups with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   minEndDate: string
  ##             : Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
  var path_581204 = newJObject()
  var query_581205 = newJObject()
  add(query_581205, "key", newJString(key))
  add(query_581205, "maxStartDate", newJString(maxStartDate))
  add(query_581205, "prettyPrint", newJBool(prettyPrint))
  add(query_581205, "oauth_token", newJString(oauthToken))
  if placementStrategyIds != nil:
    query_581205.add "placementStrategyIds", placementStrategyIds
  if pricingTypes != nil:
    query_581205.add "pricingTypes", pricingTypes
  add(path_581204, "profileId", newJString(profileId))
  add(query_581205, "sortField", newJString(sortField))
  if contentCategoryIds != nil:
    query_581205.add "contentCategoryIds", contentCategoryIds
  if advertiserIds != nil:
    query_581205.add "advertiserIds", advertiserIds
  add(query_581205, "alt", newJString(alt))
  add(query_581205, "userIp", newJString(userIp))
  add(query_581205, "archived", newJBool(archived))
  add(query_581205, "quotaUser", newJString(quotaUser))
  if directorySiteIds != nil:
    query_581205.add "directorySiteIds", directorySiteIds
  add(query_581205, "pageToken", newJString(pageToken))
  add(query_581205, "minStartDate", newJString(minStartDate))
  add(query_581205, "searchString", newJString(searchString))
  add(query_581205, "sortOrder", newJString(sortOrder))
  if siteIds != nil:
    query_581205.add "siteIds", siteIds
  add(query_581205, "maxEndDate", newJString(maxEndDate))
  if campaignIds != nil:
    query_581205.add "campaignIds", campaignIds
  add(query_581205, "placementGroupType", newJString(placementGroupType))
  if ids != nil:
    query_581205.add "ids", ids
  add(query_581205, "fields", newJString(fields))
  add(query_581205, "maxResults", newJInt(maxResults))
  add(query_581205, "minEndDate", newJString(minEndDate))
  result = call_581203.call(path_581204, query_581205, nil, nil, nil)

var dfareportingPlacementGroupsList* = Call_DfareportingPlacementGroupsList_581172(
    name: "dfareportingPlacementGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups",
    validator: validate_DfareportingPlacementGroupsList_581173,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementGroupsList_581174,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsPatch_581240 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementGroupsPatch_581242(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsPatch_581241(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement group. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581243 = path.getOrDefault("profileId")
  valid_581243 = validateParameter(valid_581243, JString, required = true,
                                 default = nil)
  if valid_581243 != nil:
    section.add "profileId", valid_581243
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Placement group ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581244 = query.getOrDefault("key")
  valid_581244 = validateParameter(valid_581244, JString, required = false,
                                 default = nil)
  if valid_581244 != nil:
    section.add "key", valid_581244
  var valid_581245 = query.getOrDefault("prettyPrint")
  valid_581245 = validateParameter(valid_581245, JBool, required = false,
                                 default = newJBool(true))
  if valid_581245 != nil:
    section.add "prettyPrint", valid_581245
  var valid_581246 = query.getOrDefault("oauth_token")
  valid_581246 = validateParameter(valid_581246, JString, required = false,
                                 default = nil)
  if valid_581246 != nil:
    section.add "oauth_token", valid_581246
  var valid_581247 = query.getOrDefault("alt")
  valid_581247 = validateParameter(valid_581247, JString, required = false,
                                 default = newJString("json"))
  if valid_581247 != nil:
    section.add "alt", valid_581247
  var valid_581248 = query.getOrDefault("userIp")
  valid_581248 = validateParameter(valid_581248, JString, required = false,
                                 default = nil)
  if valid_581248 != nil:
    section.add "userIp", valid_581248
  var valid_581249 = query.getOrDefault("quotaUser")
  valid_581249 = validateParameter(valid_581249, JString, required = false,
                                 default = nil)
  if valid_581249 != nil:
    section.add "quotaUser", valid_581249
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_581250 = query.getOrDefault("id")
  valid_581250 = validateParameter(valid_581250, JString, required = true,
                                 default = nil)
  if valid_581250 != nil:
    section.add "id", valid_581250
  var valid_581251 = query.getOrDefault("fields")
  valid_581251 = validateParameter(valid_581251, JString, required = false,
                                 default = nil)
  if valid_581251 != nil:
    section.add "fields", valid_581251
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581253: Call_DfareportingPlacementGroupsPatch_581240;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing placement group. This method supports patch semantics.
  ## 
  let valid = call_581253.validator(path, query, header, formData, body)
  let scheme = call_581253.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581253.url(scheme.get, call_581253.host, call_581253.base,
                         call_581253.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581253, url, valid)

proc call*(call_581254: Call_DfareportingPlacementGroupsPatch_581240;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingPlacementGroupsPatch
  ## Updates an existing placement group. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Placement group ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581255 = newJObject()
  var query_581256 = newJObject()
  var body_581257 = newJObject()
  add(query_581256, "key", newJString(key))
  add(query_581256, "prettyPrint", newJBool(prettyPrint))
  add(query_581256, "oauth_token", newJString(oauthToken))
  add(path_581255, "profileId", newJString(profileId))
  add(query_581256, "alt", newJString(alt))
  add(query_581256, "userIp", newJString(userIp))
  add(query_581256, "quotaUser", newJString(quotaUser))
  add(query_581256, "id", newJString(id))
  if body != nil:
    body_581257 = body
  add(query_581256, "fields", newJString(fields))
  result = call_581254.call(path_581255, query_581256, nil, nil, body_581257)

var dfareportingPlacementGroupsPatch* = Call_DfareportingPlacementGroupsPatch_581240(
    name: "dfareportingPlacementGroupsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups",
    validator: validate_DfareportingPlacementGroupsPatch_581241,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementGroupsPatch_581242,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsGet_581258 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementGroupsGet_581260(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsGet_581259(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one placement group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Placement group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581261 = path.getOrDefault("profileId")
  valid_581261 = validateParameter(valid_581261, JString, required = true,
                                 default = nil)
  if valid_581261 != nil:
    section.add "profileId", valid_581261
  var valid_581262 = path.getOrDefault("id")
  valid_581262 = validateParameter(valid_581262, JString, required = true,
                                 default = nil)
  if valid_581262 != nil:
    section.add "id", valid_581262
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581263 = query.getOrDefault("key")
  valid_581263 = validateParameter(valid_581263, JString, required = false,
                                 default = nil)
  if valid_581263 != nil:
    section.add "key", valid_581263
  var valid_581264 = query.getOrDefault("prettyPrint")
  valid_581264 = validateParameter(valid_581264, JBool, required = false,
                                 default = newJBool(true))
  if valid_581264 != nil:
    section.add "prettyPrint", valid_581264
  var valid_581265 = query.getOrDefault("oauth_token")
  valid_581265 = validateParameter(valid_581265, JString, required = false,
                                 default = nil)
  if valid_581265 != nil:
    section.add "oauth_token", valid_581265
  var valid_581266 = query.getOrDefault("alt")
  valid_581266 = validateParameter(valid_581266, JString, required = false,
                                 default = newJString("json"))
  if valid_581266 != nil:
    section.add "alt", valid_581266
  var valid_581267 = query.getOrDefault("userIp")
  valid_581267 = validateParameter(valid_581267, JString, required = false,
                                 default = nil)
  if valid_581267 != nil:
    section.add "userIp", valid_581267
  var valid_581268 = query.getOrDefault("quotaUser")
  valid_581268 = validateParameter(valid_581268, JString, required = false,
                                 default = nil)
  if valid_581268 != nil:
    section.add "quotaUser", valid_581268
  var valid_581269 = query.getOrDefault("fields")
  valid_581269 = validateParameter(valid_581269, JString, required = false,
                                 default = nil)
  if valid_581269 != nil:
    section.add "fields", valid_581269
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581270: Call_DfareportingPlacementGroupsGet_581258; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one placement group by ID.
  ## 
  let valid = call_581270.validator(path, query, header, formData, body)
  let scheme = call_581270.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581270.url(scheme.get, call_581270.host, call_581270.base,
                         call_581270.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581270, url, valid)

proc call*(call_581271: Call_DfareportingPlacementGroupsGet_581258;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingPlacementGroupsGet
  ## Gets one placement group by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Placement group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581272 = newJObject()
  var query_581273 = newJObject()
  add(query_581273, "key", newJString(key))
  add(query_581273, "prettyPrint", newJBool(prettyPrint))
  add(query_581273, "oauth_token", newJString(oauthToken))
  add(path_581272, "profileId", newJString(profileId))
  add(path_581272, "id", newJString(id))
  add(query_581273, "alt", newJString(alt))
  add(query_581273, "userIp", newJString(userIp))
  add(query_581273, "quotaUser", newJString(quotaUser))
  add(query_581273, "fields", newJString(fields))
  result = call_581271.call(path_581272, query_581273, nil, nil, nil)

var dfareportingPlacementGroupsGet* = Call_DfareportingPlacementGroupsGet_581258(
    name: "dfareportingPlacementGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups/{id}",
    validator: validate_DfareportingPlacementGroupsGet_581259,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementGroupsGet_581260,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesUpdate_581295 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementStrategiesUpdate_581297(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesUpdate_581296(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement strategy.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581298 = path.getOrDefault("profileId")
  valid_581298 = validateParameter(valid_581298, JString, required = true,
                                 default = nil)
  if valid_581298 != nil:
    section.add "profileId", valid_581298
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581299 = query.getOrDefault("key")
  valid_581299 = validateParameter(valid_581299, JString, required = false,
                                 default = nil)
  if valid_581299 != nil:
    section.add "key", valid_581299
  var valid_581300 = query.getOrDefault("prettyPrint")
  valid_581300 = validateParameter(valid_581300, JBool, required = false,
                                 default = newJBool(true))
  if valid_581300 != nil:
    section.add "prettyPrint", valid_581300
  var valid_581301 = query.getOrDefault("oauth_token")
  valid_581301 = validateParameter(valid_581301, JString, required = false,
                                 default = nil)
  if valid_581301 != nil:
    section.add "oauth_token", valid_581301
  var valid_581302 = query.getOrDefault("alt")
  valid_581302 = validateParameter(valid_581302, JString, required = false,
                                 default = newJString("json"))
  if valid_581302 != nil:
    section.add "alt", valid_581302
  var valid_581303 = query.getOrDefault("userIp")
  valid_581303 = validateParameter(valid_581303, JString, required = false,
                                 default = nil)
  if valid_581303 != nil:
    section.add "userIp", valid_581303
  var valid_581304 = query.getOrDefault("quotaUser")
  valid_581304 = validateParameter(valid_581304, JString, required = false,
                                 default = nil)
  if valid_581304 != nil:
    section.add "quotaUser", valid_581304
  var valid_581305 = query.getOrDefault("fields")
  valid_581305 = validateParameter(valid_581305, JString, required = false,
                                 default = nil)
  if valid_581305 != nil:
    section.add "fields", valid_581305
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581307: Call_DfareportingPlacementStrategiesUpdate_581295;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing placement strategy.
  ## 
  let valid = call_581307.validator(path, query, header, formData, body)
  let scheme = call_581307.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581307.url(scheme.get, call_581307.host, call_581307.base,
                         call_581307.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581307, url, valid)

proc call*(call_581308: Call_DfareportingPlacementStrategiesUpdate_581295;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingPlacementStrategiesUpdate
  ## Updates an existing placement strategy.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581309 = newJObject()
  var query_581310 = newJObject()
  var body_581311 = newJObject()
  add(query_581310, "key", newJString(key))
  add(query_581310, "prettyPrint", newJBool(prettyPrint))
  add(query_581310, "oauth_token", newJString(oauthToken))
  add(path_581309, "profileId", newJString(profileId))
  add(query_581310, "alt", newJString(alt))
  add(query_581310, "userIp", newJString(userIp))
  add(query_581310, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581311 = body
  add(query_581310, "fields", newJString(fields))
  result = call_581308.call(path_581309, query_581310, nil, nil, body_581311)

var dfareportingPlacementStrategiesUpdate* = Call_DfareportingPlacementStrategiesUpdate_581295(
    name: "dfareportingPlacementStrategiesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies",
    validator: validate_DfareportingPlacementStrategiesUpdate_581296,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesUpdate_581297,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesInsert_581312 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementStrategiesInsert_581314(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesInsert_581313(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new placement strategy.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581315 = path.getOrDefault("profileId")
  valid_581315 = validateParameter(valid_581315, JString, required = true,
                                 default = nil)
  if valid_581315 != nil:
    section.add "profileId", valid_581315
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581316 = query.getOrDefault("key")
  valid_581316 = validateParameter(valid_581316, JString, required = false,
                                 default = nil)
  if valid_581316 != nil:
    section.add "key", valid_581316
  var valid_581317 = query.getOrDefault("prettyPrint")
  valid_581317 = validateParameter(valid_581317, JBool, required = false,
                                 default = newJBool(true))
  if valid_581317 != nil:
    section.add "prettyPrint", valid_581317
  var valid_581318 = query.getOrDefault("oauth_token")
  valid_581318 = validateParameter(valid_581318, JString, required = false,
                                 default = nil)
  if valid_581318 != nil:
    section.add "oauth_token", valid_581318
  var valid_581319 = query.getOrDefault("alt")
  valid_581319 = validateParameter(valid_581319, JString, required = false,
                                 default = newJString("json"))
  if valid_581319 != nil:
    section.add "alt", valid_581319
  var valid_581320 = query.getOrDefault("userIp")
  valid_581320 = validateParameter(valid_581320, JString, required = false,
                                 default = nil)
  if valid_581320 != nil:
    section.add "userIp", valid_581320
  var valid_581321 = query.getOrDefault("quotaUser")
  valid_581321 = validateParameter(valid_581321, JString, required = false,
                                 default = nil)
  if valid_581321 != nil:
    section.add "quotaUser", valid_581321
  var valid_581322 = query.getOrDefault("fields")
  valid_581322 = validateParameter(valid_581322, JString, required = false,
                                 default = nil)
  if valid_581322 != nil:
    section.add "fields", valid_581322
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581324: Call_DfareportingPlacementStrategiesInsert_581312;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new placement strategy.
  ## 
  let valid = call_581324.validator(path, query, header, formData, body)
  let scheme = call_581324.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581324.url(scheme.get, call_581324.host, call_581324.base,
                         call_581324.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581324, url, valid)

proc call*(call_581325: Call_DfareportingPlacementStrategiesInsert_581312;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingPlacementStrategiesInsert
  ## Inserts a new placement strategy.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581326 = newJObject()
  var query_581327 = newJObject()
  var body_581328 = newJObject()
  add(query_581327, "key", newJString(key))
  add(query_581327, "prettyPrint", newJBool(prettyPrint))
  add(query_581327, "oauth_token", newJString(oauthToken))
  add(path_581326, "profileId", newJString(profileId))
  add(query_581327, "alt", newJString(alt))
  add(query_581327, "userIp", newJString(userIp))
  add(query_581327, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581328 = body
  add(query_581327, "fields", newJString(fields))
  result = call_581325.call(path_581326, query_581327, nil, nil, body_581328)

var dfareportingPlacementStrategiesInsert* = Call_DfareportingPlacementStrategiesInsert_581312(
    name: "dfareportingPlacementStrategiesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies",
    validator: validate_DfareportingPlacementStrategiesInsert_581313,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesInsert_581314,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesList_581274 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementStrategiesList_581276(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesList_581275(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of placement strategies, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581277 = path.getOrDefault("profileId")
  valid_581277 = validateParameter(valid_581277, JString, required = true,
                                 default = nil)
  if valid_581277 != nil:
    section.add "profileId", valid_581277
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "placementstrategy*2015" will return objects with names like "placementstrategy June 2015", "placementstrategy April 2015", or simply "placementstrategy 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementstrategy" will match objects with name "my placementstrategy", "placementstrategy 2015", or simply "placementstrategy".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only placement strategies with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_581278 = query.getOrDefault("key")
  valid_581278 = validateParameter(valid_581278, JString, required = false,
                                 default = nil)
  if valid_581278 != nil:
    section.add "key", valid_581278
  var valid_581279 = query.getOrDefault("prettyPrint")
  valid_581279 = validateParameter(valid_581279, JBool, required = false,
                                 default = newJBool(true))
  if valid_581279 != nil:
    section.add "prettyPrint", valid_581279
  var valid_581280 = query.getOrDefault("oauth_token")
  valid_581280 = validateParameter(valid_581280, JString, required = false,
                                 default = nil)
  if valid_581280 != nil:
    section.add "oauth_token", valid_581280
  var valid_581281 = query.getOrDefault("sortField")
  valid_581281 = validateParameter(valid_581281, JString, required = false,
                                 default = newJString("ID"))
  if valid_581281 != nil:
    section.add "sortField", valid_581281
  var valid_581282 = query.getOrDefault("alt")
  valid_581282 = validateParameter(valid_581282, JString, required = false,
                                 default = newJString("json"))
  if valid_581282 != nil:
    section.add "alt", valid_581282
  var valid_581283 = query.getOrDefault("userIp")
  valid_581283 = validateParameter(valid_581283, JString, required = false,
                                 default = nil)
  if valid_581283 != nil:
    section.add "userIp", valid_581283
  var valid_581284 = query.getOrDefault("quotaUser")
  valid_581284 = validateParameter(valid_581284, JString, required = false,
                                 default = nil)
  if valid_581284 != nil:
    section.add "quotaUser", valid_581284
  var valid_581285 = query.getOrDefault("pageToken")
  valid_581285 = validateParameter(valid_581285, JString, required = false,
                                 default = nil)
  if valid_581285 != nil:
    section.add "pageToken", valid_581285
  var valid_581286 = query.getOrDefault("searchString")
  valid_581286 = validateParameter(valid_581286, JString, required = false,
                                 default = nil)
  if valid_581286 != nil:
    section.add "searchString", valid_581286
  var valid_581287 = query.getOrDefault("sortOrder")
  valid_581287 = validateParameter(valid_581287, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581287 != nil:
    section.add "sortOrder", valid_581287
  var valid_581288 = query.getOrDefault("ids")
  valid_581288 = validateParameter(valid_581288, JArray, required = false,
                                 default = nil)
  if valid_581288 != nil:
    section.add "ids", valid_581288
  var valid_581289 = query.getOrDefault("fields")
  valid_581289 = validateParameter(valid_581289, JString, required = false,
                                 default = nil)
  if valid_581289 != nil:
    section.add "fields", valid_581289
  var valid_581290 = query.getOrDefault("maxResults")
  valid_581290 = validateParameter(valid_581290, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581290 != nil:
    section.add "maxResults", valid_581290
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581291: Call_DfareportingPlacementStrategiesList_581274;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of placement strategies, possibly filtered. This method supports paging.
  ## 
  let valid = call_581291.validator(path, query, header, formData, body)
  let scheme = call_581291.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581291.url(scheme.get, call_581291.host, call_581291.base,
                         call_581291.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581291, url, valid)

proc call*(call_581292: Call_DfareportingPlacementStrategiesList_581274;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; sortField: string = "ID"; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          ids: JsonNode = nil; fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingPlacementStrategiesList
  ## Retrieves a list of placement strategies, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "placementstrategy*2015" will return objects with names like "placementstrategy June 2015", "placementstrategy April 2015", or simply "placementstrategy 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementstrategy" will match objects with name "my placementstrategy", "placementstrategy 2015", or simply "placementstrategy".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only placement strategies with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_581293 = newJObject()
  var query_581294 = newJObject()
  add(query_581294, "key", newJString(key))
  add(query_581294, "prettyPrint", newJBool(prettyPrint))
  add(query_581294, "oauth_token", newJString(oauthToken))
  add(path_581293, "profileId", newJString(profileId))
  add(query_581294, "sortField", newJString(sortField))
  add(query_581294, "alt", newJString(alt))
  add(query_581294, "userIp", newJString(userIp))
  add(query_581294, "quotaUser", newJString(quotaUser))
  add(query_581294, "pageToken", newJString(pageToken))
  add(query_581294, "searchString", newJString(searchString))
  add(query_581294, "sortOrder", newJString(sortOrder))
  if ids != nil:
    query_581294.add "ids", ids
  add(query_581294, "fields", newJString(fields))
  add(query_581294, "maxResults", newJInt(maxResults))
  result = call_581292.call(path_581293, query_581294, nil, nil, nil)

var dfareportingPlacementStrategiesList* = Call_DfareportingPlacementStrategiesList_581274(
    name: "dfareportingPlacementStrategiesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies",
    validator: validate_DfareportingPlacementStrategiesList_581275,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesList_581276,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesPatch_581329 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementStrategiesPatch_581331(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesPatch_581330(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement strategy. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581332 = path.getOrDefault("profileId")
  valid_581332 = validateParameter(valid_581332, JString, required = true,
                                 default = nil)
  if valid_581332 != nil:
    section.add "profileId", valid_581332
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Placement strategy ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581333 = query.getOrDefault("key")
  valid_581333 = validateParameter(valid_581333, JString, required = false,
                                 default = nil)
  if valid_581333 != nil:
    section.add "key", valid_581333
  var valid_581334 = query.getOrDefault("prettyPrint")
  valid_581334 = validateParameter(valid_581334, JBool, required = false,
                                 default = newJBool(true))
  if valid_581334 != nil:
    section.add "prettyPrint", valid_581334
  var valid_581335 = query.getOrDefault("oauth_token")
  valid_581335 = validateParameter(valid_581335, JString, required = false,
                                 default = nil)
  if valid_581335 != nil:
    section.add "oauth_token", valid_581335
  var valid_581336 = query.getOrDefault("alt")
  valid_581336 = validateParameter(valid_581336, JString, required = false,
                                 default = newJString("json"))
  if valid_581336 != nil:
    section.add "alt", valid_581336
  var valid_581337 = query.getOrDefault("userIp")
  valid_581337 = validateParameter(valid_581337, JString, required = false,
                                 default = nil)
  if valid_581337 != nil:
    section.add "userIp", valid_581337
  var valid_581338 = query.getOrDefault("quotaUser")
  valid_581338 = validateParameter(valid_581338, JString, required = false,
                                 default = nil)
  if valid_581338 != nil:
    section.add "quotaUser", valid_581338
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_581339 = query.getOrDefault("id")
  valid_581339 = validateParameter(valid_581339, JString, required = true,
                                 default = nil)
  if valid_581339 != nil:
    section.add "id", valid_581339
  var valid_581340 = query.getOrDefault("fields")
  valid_581340 = validateParameter(valid_581340, JString, required = false,
                                 default = nil)
  if valid_581340 != nil:
    section.add "fields", valid_581340
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581342: Call_DfareportingPlacementStrategiesPatch_581329;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing placement strategy. This method supports patch semantics.
  ## 
  let valid = call_581342.validator(path, query, header, formData, body)
  let scheme = call_581342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581342.url(scheme.get, call_581342.host, call_581342.base,
                         call_581342.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581342, url, valid)

proc call*(call_581343: Call_DfareportingPlacementStrategiesPatch_581329;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingPlacementStrategiesPatch
  ## Updates an existing placement strategy. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Placement strategy ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581344 = newJObject()
  var query_581345 = newJObject()
  var body_581346 = newJObject()
  add(query_581345, "key", newJString(key))
  add(query_581345, "prettyPrint", newJBool(prettyPrint))
  add(query_581345, "oauth_token", newJString(oauthToken))
  add(path_581344, "profileId", newJString(profileId))
  add(query_581345, "alt", newJString(alt))
  add(query_581345, "userIp", newJString(userIp))
  add(query_581345, "quotaUser", newJString(quotaUser))
  add(query_581345, "id", newJString(id))
  if body != nil:
    body_581346 = body
  add(query_581345, "fields", newJString(fields))
  result = call_581343.call(path_581344, query_581345, nil, nil, body_581346)

var dfareportingPlacementStrategiesPatch* = Call_DfareportingPlacementStrategiesPatch_581329(
    name: "dfareportingPlacementStrategiesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies",
    validator: validate_DfareportingPlacementStrategiesPatch_581330,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesPatch_581331,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesGet_581347 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementStrategiesGet_581349(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesGet_581348(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one placement strategy by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Placement strategy ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581350 = path.getOrDefault("profileId")
  valid_581350 = validateParameter(valid_581350, JString, required = true,
                                 default = nil)
  if valid_581350 != nil:
    section.add "profileId", valid_581350
  var valid_581351 = path.getOrDefault("id")
  valid_581351 = validateParameter(valid_581351, JString, required = true,
                                 default = nil)
  if valid_581351 != nil:
    section.add "id", valid_581351
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581352 = query.getOrDefault("key")
  valid_581352 = validateParameter(valid_581352, JString, required = false,
                                 default = nil)
  if valid_581352 != nil:
    section.add "key", valid_581352
  var valid_581353 = query.getOrDefault("prettyPrint")
  valid_581353 = validateParameter(valid_581353, JBool, required = false,
                                 default = newJBool(true))
  if valid_581353 != nil:
    section.add "prettyPrint", valid_581353
  var valid_581354 = query.getOrDefault("oauth_token")
  valid_581354 = validateParameter(valid_581354, JString, required = false,
                                 default = nil)
  if valid_581354 != nil:
    section.add "oauth_token", valid_581354
  var valid_581355 = query.getOrDefault("alt")
  valid_581355 = validateParameter(valid_581355, JString, required = false,
                                 default = newJString("json"))
  if valid_581355 != nil:
    section.add "alt", valid_581355
  var valid_581356 = query.getOrDefault("userIp")
  valid_581356 = validateParameter(valid_581356, JString, required = false,
                                 default = nil)
  if valid_581356 != nil:
    section.add "userIp", valid_581356
  var valid_581357 = query.getOrDefault("quotaUser")
  valid_581357 = validateParameter(valid_581357, JString, required = false,
                                 default = nil)
  if valid_581357 != nil:
    section.add "quotaUser", valid_581357
  var valid_581358 = query.getOrDefault("fields")
  valid_581358 = validateParameter(valid_581358, JString, required = false,
                                 default = nil)
  if valid_581358 != nil:
    section.add "fields", valid_581358
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581359: Call_DfareportingPlacementStrategiesGet_581347;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one placement strategy by ID.
  ## 
  let valid = call_581359.validator(path, query, header, formData, body)
  let scheme = call_581359.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581359.url(scheme.get, call_581359.host, call_581359.base,
                         call_581359.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581359, url, valid)

proc call*(call_581360: Call_DfareportingPlacementStrategiesGet_581347;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingPlacementStrategiesGet
  ## Gets one placement strategy by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Placement strategy ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581361 = newJObject()
  var query_581362 = newJObject()
  add(query_581362, "key", newJString(key))
  add(query_581362, "prettyPrint", newJBool(prettyPrint))
  add(query_581362, "oauth_token", newJString(oauthToken))
  add(path_581361, "profileId", newJString(profileId))
  add(path_581361, "id", newJString(id))
  add(query_581362, "alt", newJString(alt))
  add(query_581362, "userIp", newJString(userIp))
  add(query_581362, "quotaUser", newJString(quotaUser))
  add(query_581362, "fields", newJString(fields))
  result = call_581360.call(path_581361, query_581362, nil, nil, nil)

var dfareportingPlacementStrategiesGet* = Call_DfareportingPlacementStrategiesGet_581347(
    name: "dfareportingPlacementStrategiesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies/{id}",
    validator: validate_DfareportingPlacementStrategiesGet_581348,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesGet_581349,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesDelete_581363 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementStrategiesDelete_581365(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesDelete_581364(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing placement strategy.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Placement strategy ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581366 = path.getOrDefault("profileId")
  valid_581366 = validateParameter(valid_581366, JString, required = true,
                                 default = nil)
  if valid_581366 != nil:
    section.add "profileId", valid_581366
  var valid_581367 = path.getOrDefault("id")
  valid_581367 = validateParameter(valid_581367, JString, required = true,
                                 default = nil)
  if valid_581367 != nil:
    section.add "id", valid_581367
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581368 = query.getOrDefault("key")
  valid_581368 = validateParameter(valid_581368, JString, required = false,
                                 default = nil)
  if valid_581368 != nil:
    section.add "key", valid_581368
  var valid_581369 = query.getOrDefault("prettyPrint")
  valid_581369 = validateParameter(valid_581369, JBool, required = false,
                                 default = newJBool(true))
  if valid_581369 != nil:
    section.add "prettyPrint", valid_581369
  var valid_581370 = query.getOrDefault("oauth_token")
  valid_581370 = validateParameter(valid_581370, JString, required = false,
                                 default = nil)
  if valid_581370 != nil:
    section.add "oauth_token", valid_581370
  var valid_581371 = query.getOrDefault("alt")
  valid_581371 = validateParameter(valid_581371, JString, required = false,
                                 default = newJString("json"))
  if valid_581371 != nil:
    section.add "alt", valid_581371
  var valid_581372 = query.getOrDefault("userIp")
  valid_581372 = validateParameter(valid_581372, JString, required = false,
                                 default = nil)
  if valid_581372 != nil:
    section.add "userIp", valid_581372
  var valid_581373 = query.getOrDefault("quotaUser")
  valid_581373 = validateParameter(valid_581373, JString, required = false,
                                 default = nil)
  if valid_581373 != nil:
    section.add "quotaUser", valid_581373
  var valid_581374 = query.getOrDefault("fields")
  valid_581374 = validateParameter(valid_581374, JString, required = false,
                                 default = nil)
  if valid_581374 != nil:
    section.add "fields", valid_581374
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581375: Call_DfareportingPlacementStrategiesDelete_581363;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing placement strategy.
  ## 
  let valid = call_581375.validator(path, query, header, formData, body)
  let scheme = call_581375.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581375.url(scheme.get, call_581375.host, call_581375.base,
                         call_581375.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581375, url, valid)

proc call*(call_581376: Call_DfareportingPlacementStrategiesDelete_581363;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingPlacementStrategiesDelete
  ## Deletes an existing placement strategy.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Placement strategy ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581377 = newJObject()
  var query_581378 = newJObject()
  add(query_581378, "key", newJString(key))
  add(query_581378, "prettyPrint", newJBool(prettyPrint))
  add(query_581378, "oauth_token", newJString(oauthToken))
  add(path_581377, "profileId", newJString(profileId))
  add(path_581377, "id", newJString(id))
  add(query_581378, "alt", newJString(alt))
  add(query_581378, "userIp", newJString(userIp))
  add(query_581378, "quotaUser", newJString(quotaUser))
  add(query_581378, "fields", newJString(fields))
  result = call_581376.call(path_581377, query_581378, nil, nil, nil)

var dfareportingPlacementStrategiesDelete* = Call_DfareportingPlacementStrategiesDelete_581363(
    name: "dfareportingPlacementStrategiesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies/{id}",
    validator: validate_DfareportingPlacementStrategiesDelete_581364,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesDelete_581365,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsUpdate_581416 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementsUpdate_581418(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsUpdate_581417(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581419 = path.getOrDefault("profileId")
  valid_581419 = validateParameter(valid_581419, JString, required = true,
                                 default = nil)
  if valid_581419 != nil:
    section.add "profileId", valid_581419
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581420 = query.getOrDefault("key")
  valid_581420 = validateParameter(valid_581420, JString, required = false,
                                 default = nil)
  if valid_581420 != nil:
    section.add "key", valid_581420
  var valid_581421 = query.getOrDefault("prettyPrint")
  valid_581421 = validateParameter(valid_581421, JBool, required = false,
                                 default = newJBool(true))
  if valid_581421 != nil:
    section.add "prettyPrint", valid_581421
  var valid_581422 = query.getOrDefault("oauth_token")
  valid_581422 = validateParameter(valid_581422, JString, required = false,
                                 default = nil)
  if valid_581422 != nil:
    section.add "oauth_token", valid_581422
  var valid_581423 = query.getOrDefault("alt")
  valid_581423 = validateParameter(valid_581423, JString, required = false,
                                 default = newJString("json"))
  if valid_581423 != nil:
    section.add "alt", valid_581423
  var valid_581424 = query.getOrDefault("userIp")
  valid_581424 = validateParameter(valid_581424, JString, required = false,
                                 default = nil)
  if valid_581424 != nil:
    section.add "userIp", valid_581424
  var valid_581425 = query.getOrDefault("quotaUser")
  valid_581425 = validateParameter(valid_581425, JString, required = false,
                                 default = nil)
  if valid_581425 != nil:
    section.add "quotaUser", valid_581425
  var valid_581426 = query.getOrDefault("fields")
  valid_581426 = validateParameter(valid_581426, JString, required = false,
                                 default = nil)
  if valid_581426 != nil:
    section.add "fields", valid_581426
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581428: Call_DfareportingPlacementsUpdate_581416; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing placement.
  ## 
  let valid = call_581428.validator(path, query, header, formData, body)
  let scheme = call_581428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581428.url(scheme.get, call_581428.host, call_581428.base,
                         call_581428.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581428, url, valid)

proc call*(call_581429: Call_DfareportingPlacementsUpdate_581416;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingPlacementsUpdate
  ## Updates an existing placement.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581430 = newJObject()
  var query_581431 = newJObject()
  var body_581432 = newJObject()
  add(query_581431, "key", newJString(key))
  add(query_581431, "prettyPrint", newJBool(prettyPrint))
  add(query_581431, "oauth_token", newJString(oauthToken))
  add(path_581430, "profileId", newJString(profileId))
  add(query_581431, "alt", newJString(alt))
  add(query_581431, "userIp", newJString(userIp))
  add(query_581431, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581432 = body
  add(query_581431, "fields", newJString(fields))
  result = call_581429.call(path_581430, query_581431, nil, nil, body_581432)

var dfareportingPlacementsUpdate* = Call_DfareportingPlacementsUpdate_581416(
    name: "dfareportingPlacementsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/placements",
    validator: validate_DfareportingPlacementsUpdate_581417,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsUpdate_581418,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsInsert_581433 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementsInsert_581435(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsInsert_581434(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new placement.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581436 = path.getOrDefault("profileId")
  valid_581436 = validateParameter(valid_581436, JString, required = true,
                                 default = nil)
  if valid_581436 != nil:
    section.add "profileId", valid_581436
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581437 = query.getOrDefault("key")
  valid_581437 = validateParameter(valid_581437, JString, required = false,
                                 default = nil)
  if valid_581437 != nil:
    section.add "key", valid_581437
  var valid_581438 = query.getOrDefault("prettyPrint")
  valid_581438 = validateParameter(valid_581438, JBool, required = false,
                                 default = newJBool(true))
  if valid_581438 != nil:
    section.add "prettyPrint", valid_581438
  var valid_581439 = query.getOrDefault("oauth_token")
  valid_581439 = validateParameter(valid_581439, JString, required = false,
                                 default = nil)
  if valid_581439 != nil:
    section.add "oauth_token", valid_581439
  var valid_581440 = query.getOrDefault("alt")
  valid_581440 = validateParameter(valid_581440, JString, required = false,
                                 default = newJString("json"))
  if valid_581440 != nil:
    section.add "alt", valid_581440
  var valid_581441 = query.getOrDefault("userIp")
  valid_581441 = validateParameter(valid_581441, JString, required = false,
                                 default = nil)
  if valid_581441 != nil:
    section.add "userIp", valid_581441
  var valid_581442 = query.getOrDefault("quotaUser")
  valid_581442 = validateParameter(valid_581442, JString, required = false,
                                 default = nil)
  if valid_581442 != nil:
    section.add "quotaUser", valid_581442
  var valid_581443 = query.getOrDefault("fields")
  valid_581443 = validateParameter(valid_581443, JString, required = false,
                                 default = nil)
  if valid_581443 != nil:
    section.add "fields", valid_581443
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581445: Call_DfareportingPlacementsInsert_581433; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new placement.
  ## 
  let valid = call_581445.validator(path, query, header, formData, body)
  let scheme = call_581445.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581445.url(scheme.get, call_581445.host, call_581445.base,
                         call_581445.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581445, url, valid)

proc call*(call_581446: Call_DfareportingPlacementsInsert_581433;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingPlacementsInsert
  ## Inserts a new placement.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581447 = newJObject()
  var query_581448 = newJObject()
  var body_581449 = newJObject()
  add(query_581448, "key", newJString(key))
  add(query_581448, "prettyPrint", newJBool(prettyPrint))
  add(query_581448, "oauth_token", newJString(oauthToken))
  add(path_581447, "profileId", newJString(profileId))
  add(query_581448, "alt", newJString(alt))
  add(query_581448, "userIp", newJString(userIp))
  add(query_581448, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581449 = body
  add(query_581448, "fields", newJString(fields))
  result = call_581446.call(path_581447, query_581448, nil, nil, body_581449)

var dfareportingPlacementsInsert* = Call_DfareportingPlacementsInsert_581433(
    name: "dfareportingPlacementsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/placements",
    validator: validate_DfareportingPlacementsInsert_581434,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsInsert_581435,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsList_581379 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementsList_581381(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsList_581380(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of placements, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581382 = path.getOrDefault("profileId")
  valid_581382 = validateParameter(valid_581382, JString, required = true,
                                 default = nil)
  if valid_581382 != nil:
    section.add "profileId", valid_581382
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   maxStartDate: JString
  ##               : Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   placementStrategyIds: JArray
  ##                       : Select only placements that are associated with these placement strategies.
  ##   pricingTypes: JArray
  ##               : Select only placements with these pricing types.
  ##   paymentSource: JString
  ##                : Select only placements with this payment source.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   contentCategoryIds: JArray
  ##                     : Select only placements that are associated with these content categories.
  ##   advertiserIds: JArray
  ##                : Select only placements that belong to these advertisers.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived placements. Don't set this field to select both archived and non-archived placements.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   directorySiteIds: JArray
  ##                   : Select only placements that are associated with these directory sites.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   minStartDate: JString
  ##               : Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   searchString: JString
  ##               : Allows searching for placements by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placements with names like "placement June 2015", "placement May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placement" will match placements with name "my placement", "placement 2015", or simply "placement".
  ##   sizeIds: JArray
  ##          : Select only placements that are associated with these sizes.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   siteIds: JArray
  ##          : Select only placements that are associated with these sites.
  ##   maxEndDate: JString
  ##             : Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   compatibilities: JArray
  ##                  : Select only placements that are associated with these compatibilities. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.
  ##   campaignIds: JArray
  ##              : Select only placements that belong to these campaigns.
  ##   ids: JArray
  ##      : Select only placements with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   groupIds: JArray
  ##           : Select only placements that belong to these placement groups.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   minEndDate: JString
  ##             : Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
  section = newJObject()
  var valid_581383 = query.getOrDefault("key")
  valid_581383 = validateParameter(valid_581383, JString, required = false,
                                 default = nil)
  if valid_581383 != nil:
    section.add "key", valid_581383
  var valid_581384 = query.getOrDefault("maxStartDate")
  valid_581384 = validateParameter(valid_581384, JString, required = false,
                                 default = nil)
  if valid_581384 != nil:
    section.add "maxStartDate", valid_581384
  var valid_581385 = query.getOrDefault("prettyPrint")
  valid_581385 = validateParameter(valid_581385, JBool, required = false,
                                 default = newJBool(true))
  if valid_581385 != nil:
    section.add "prettyPrint", valid_581385
  var valid_581386 = query.getOrDefault("oauth_token")
  valid_581386 = validateParameter(valid_581386, JString, required = false,
                                 default = nil)
  if valid_581386 != nil:
    section.add "oauth_token", valid_581386
  var valid_581387 = query.getOrDefault("placementStrategyIds")
  valid_581387 = validateParameter(valid_581387, JArray, required = false,
                                 default = nil)
  if valid_581387 != nil:
    section.add "placementStrategyIds", valid_581387
  var valid_581388 = query.getOrDefault("pricingTypes")
  valid_581388 = validateParameter(valid_581388, JArray, required = false,
                                 default = nil)
  if valid_581388 != nil:
    section.add "pricingTypes", valid_581388
  var valid_581389 = query.getOrDefault("paymentSource")
  valid_581389 = validateParameter(valid_581389, JString, required = false,
                                 default = newJString("PLACEMENT_AGENCY_PAID"))
  if valid_581389 != nil:
    section.add "paymentSource", valid_581389
  var valid_581390 = query.getOrDefault("sortField")
  valid_581390 = validateParameter(valid_581390, JString, required = false,
                                 default = newJString("ID"))
  if valid_581390 != nil:
    section.add "sortField", valid_581390
  var valid_581391 = query.getOrDefault("contentCategoryIds")
  valid_581391 = validateParameter(valid_581391, JArray, required = false,
                                 default = nil)
  if valid_581391 != nil:
    section.add "contentCategoryIds", valid_581391
  var valid_581392 = query.getOrDefault("advertiserIds")
  valid_581392 = validateParameter(valid_581392, JArray, required = false,
                                 default = nil)
  if valid_581392 != nil:
    section.add "advertiserIds", valid_581392
  var valid_581393 = query.getOrDefault("alt")
  valid_581393 = validateParameter(valid_581393, JString, required = false,
                                 default = newJString("json"))
  if valid_581393 != nil:
    section.add "alt", valid_581393
  var valid_581394 = query.getOrDefault("userIp")
  valid_581394 = validateParameter(valid_581394, JString, required = false,
                                 default = nil)
  if valid_581394 != nil:
    section.add "userIp", valid_581394
  var valid_581395 = query.getOrDefault("archived")
  valid_581395 = validateParameter(valid_581395, JBool, required = false, default = nil)
  if valid_581395 != nil:
    section.add "archived", valid_581395
  var valid_581396 = query.getOrDefault("quotaUser")
  valid_581396 = validateParameter(valid_581396, JString, required = false,
                                 default = nil)
  if valid_581396 != nil:
    section.add "quotaUser", valid_581396
  var valid_581397 = query.getOrDefault("directorySiteIds")
  valid_581397 = validateParameter(valid_581397, JArray, required = false,
                                 default = nil)
  if valid_581397 != nil:
    section.add "directorySiteIds", valid_581397
  var valid_581398 = query.getOrDefault("pageToken")
  valid_581398 = validateParameter(valid_581398, JString, required = false,
                                 default = nil)
  if valid_581398 != nil:
    section.add "pageToken", valid_581398
  var valid_581399 = query.getOrDefault("minStartDate")
  valid_581399 = validateParameter(valid_581399, JString, required = false,
                                 default = nil)
  if valid_581399 != nil:
    section.add "minStartDate", valid_581399
  var valid_581400 = query.getOrDefault("searchString")
  valid_581400 = validateParameter(valid_581400, JString, required = false,
                                 default = nil)
  if valid_581400 != nil:
    section.add "searchString", valid_581400
  var valid_581401 = query.getOrDefault("sizeIds")
  valid_581401 = validateParameter(valid_581401, JArray, required = false,
                                 default = nil)
  if valid_581401 != nil:
    section.add "sizeIds", valid_581401
  var valid_581402 = query.getOrDefault("sortOrder")
  valid_581402 = validateParameter(valid_581402, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581402 != nil:
    section.add "sortOrder", valid_581402
  var valid_581403 = query.getOrDefault("siteIds")
  valid_581403 = validateParameter(valid_581403, JArray, required = false,
                                 default = nil)
  if valid_581403 != nil:
    section.add "siteIds", valid_581403
  var valid_581404 = query.getOrDefault("maxEndDate")
  valid_581404 = validateParameter(valid_581404, JString, required = false,
                                 default = nil)
  if valid_581404 != nil:
    section.add "maxEndDate", valid_581404
  var valid_581405 = query.getOrDefault("compatibilities")
  valid_581405 = validateParameter(valid_581405, JArray, required = false,
                                 default = nil)
  if valid_581405 != nil:
    section.add "compatibilities", valid_581405
  var valid_581406 = query.getOrDefault("campaignIds")
  valid_581406 = validateParameter(valid_581406, JArray, required = false,
                                 default = nil)
  if valid_581406 != nil:
    section.add "campaignIds", valid_581406
  var valid_581407 = query.getOrDefault("ids")
  valid_581407 = validateParameter(valid_581407, JArray, required = false,
                                 default = nil)
  if valid_581407 != nil:
    section.add "ids", valid_581407
  var valid_581408 = query.getOrDefault("fields")
  valid_581408 = validateParameter(valid_581408, JString, required = false,
                                 default = nil)
  if valid_581408 != nil:
    section.add "fields", valid_581408
  var valid_581409 = query.getOrDefault("groupIds")
  valid_581409 = validateParameter(valid_581409, JArray, required = false,
                                 default = nil)
  if valid_581409 != nil:
    section.add "groupIds", valid_581409
  var valid_581410 = query.getOrDefault("maxResults")
  valid_581410 = validateParameter(valid_581410, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581410 != nil:
    section.add "maxResults", valid_581410
  var valid_581411 = query.getOrDefault("minEndDate")
  valid_581411 = validateParameter(valid_581411, JString, required = false,
                                 default = nil)
  if valid_581411 != nil:
    section.add "minEndDate", valid_581411
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581412: Call_DfareportingPlacementsList_581379; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of placements, possibly filtered. This method supports paging.
  ## 
  let valid = call_581412.validator(path, query, header, formData, body)
  let scheme = call_581412.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581412.url(scheme.get, call_581412.host, call_581412.base,
                         call_581412.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581412, url, valid)

proc call*(call_581413: Call_DfareportingPlacementsList_581379; profileId: string;
          key: string = ""; maxStartDate: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; placementStrategyIds: JsonNode = nil;
          pricingTypes: JsonNode = nil;
          paymentSource: string = "PLACEMENT_AGENCY_PAID"; sortField: string = "ID";
          contentCategoryIds: JsonNode = nil; advertiserIds: JsonNode = nil;
          alt: string = "json"; userIp: string = ""; archived: bool = false;
          quotaUser: string = ""; directorySiteIds: JsonNode = nil;
          pageToken: string = ""; minStartDate: string = ""; searchString: string = "";
          sizeIds: JsonNode = nil; sortOrder: string = "ASCENDING";
          siteIds: JsonNode = nil; maxEndDate: string = "";
          compatibilities: JsonNode = nil; campaignIds: JsonNode = nil;
          ids: JsonNode = nil; fields: string = ""; groupIds: JsonNode = nil;
          maxResults: int = 1000; minEndDate: string = ""): Recallable =
  ## dfareportingPlacementsList
  ## Retrieves a list of placements, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   maxStartDate: string
  ##               : Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   placementStrategyIds: JArray
  ##                       : Select only placements that are associated with these placement strategies.
  ##   pricingTypes: JArray
  ##               : Select only placements with these pricing types.
  ##   paymentSource: string
  ##                : Select only placements with this payment source.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   contentCategoryIds: JArray
  ##                     : Select only placements that are associated with these content categories.
  ##   advertiserIds: JArray
  ##                : Select only placements that belong to these advertisers.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived placements. Don't set this field to select both archived and non-archived placements.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   directorySiteIds: JArray
  ##                   : Select only placements that are associated with these directory sites.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   minStartDate: string
  ##               : Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   searchString: string
  ##               : Allows searching for placements by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placements with names like "placement June 2015", "placement May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placement" will match placements with name "my placement", "placement 2015", or simply "placement".
  ##   sizeIds: JArray
  ##          : Select only placements that are associated with these sizes.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   siteIds: JArray
  ##          : Select only placements that are associated with these sites.
  ##   maxEndDate: string
  ##             : Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   compatibilities: JArray
  ##                  : Select only placements that are associated with these compatibilities. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.
  ##   campaignIds: JArray
  ##              : Select only placements that belong to these campaigns.
  ##   ids: JArray
  ##      : Select only placements with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   groupIds: JArray
  ##           : Select only placements that belong to these placement groups.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   minEndDate: string
  ##             : Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
  var path_581414 = newJObject()
  var query_581415 = newJObject()
  add(query_581415, "key", newJString(key))
  add(query_581415, "maxStartDate", newJString(maxStartDate))
  add(query_581415, "prettyPrint", newJBool(prettyPrint))
  add(query_581415, "oauth_token", newJString(oauthToken))
  if placementStrategyIds != nil:
    query_581415.add "placementStrategyIds", placementStrategyIds
  if pricingTypes != nil:
    query_581415.add "pricingTypes", pricingTypes
  add(query_581415, "paymentSource", newJString(paymentSource))
  add(path_581414, "profileId", newJString(profileId))
  add(query_581415, "sortField", newJString(sortField))
  if contentCategoryIds != nil:
    query_581415.add "contentCategoryIds", contentCategoryIds
  if advertiserIds != nil:
    query_581415.add "advertiserIds", advertiserIds
  add(query_581415, "alt", newJString(alt))
  add(query_581415, "userIp", newJString(userIp))
  add(query_581415, "archived", newJBool(archived))
  add(query_581415, "quotaUser", newJString(quotaUser))
  if directorySiteIds != nil:
    query_581415.add "directorySiteIds", directorySiteIds
  add(query_581415, "pageToken", newJString(pageToken))
  add(query_581415, "minStartDate", newJString(minStartDate))
  add(query_581415, "searchString", newJString(searchString))
  if sizeIds != nil:
    query_581415.add "sizeIds", sizeIds
  add(query_581415, "sortOrder", newJString(sortOrder))
  if siteIds != nil:
    query_581415.add "siteIds", siteIds
  add(query_581415, "maxEndDate", newJString(maxEndDate))
  if compatibilities != nil:
    query_581415.add "compatibilities", compatibilities
  if campaignIds != nil:
    query_581415.add "campaignIds", campaignIds
  if ids != nil:
    query_581415.add "ids", ids
  add(query_581415, "fields", newJString(fields))
  if groupIds != nil:
    query_581415.add "groupIds", groupIds
  add(query_581415, "maxResults", newJInt(maxResults))
  add(query_581415, "minEndDate", newJString(minEndDate))
  result = call_581413.call(path_581414, query_581415, nil, nil, nil)

var dfareportingPlacementsList* = Call_DfareportingPlacementsList_581379(
    name: "dfareportingPlacementsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/placements",
    validator: validate_DfareportingPlacementsList_581380,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsList_581381,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsPatch_581450 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementsPatch_581452(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsPatch_581451(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581453 = path.getOrDefault("profileId")
  valid_581453 = validateParameter(valid_581453, JString, required = true,
                                 default = nil)
  if valid_581453 != nil:
    section.add "profileId", valid_581453
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Placement ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581454 = query.getOrDefault("key")
  valid_581454 = validateParameter(valid_581454, JString, required = false,
                                 default = nil)
  if valid_581454 != nil:
    section.add "key", valid_581454
  var valid_581455 = query.getOrDefault("prettyPrint")
  valid_581455 = validateParameter(valid_581455, JBool, required = false,
                                 default = newJBool(true))
  if valid_581455 != nil:
    section.add "prettyPrint", valid_581455
  var valid_581456 = query.getOrDefault("oauth_token")
  valid_581456 = validateParameter(valid_581456, JString, required = false,
                                 default = nil)
  if valid_581456 != nil:
    section.add "oauth_token", valid_581456
  var valid_581457 = query.getOrDefault("alt")
  valid_581457 = validateParameter(valid_581457, JString, required = false,
                                 default = newJString("json"))
  if valid_581457 != nil:
    section.add "alt", valid_581457
  var valid_581458 = query.getOrDefault("userIp")
  valid_581458 = validateParameter(valid_581458, JString, required = false,
                                 default = nil)
  if valid_581458 != nil:
    section.add "userIp", valid_581458
  var valid_581459 = query.getOrDefault("quotaUser")
  valid_581459 = validateParameter(valid_581459, JString, required = false,
                                 default = nil)
  if valid_581459 != nil:
    section.add "quotaUser", valid_581459
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_581460 = query.getOrDefault("id")
  valid_581460 = validateParameter(valid_581460, JString, required = true,
                                 default = nil)
  if valid_581460 != nil:
    section.add "id", valid_581460
  var valid_581461 = query.getOrDefault("fields")
  valid_581461 = validateParameter(valid_581461, JString, required = false,
                                 default = nil)
  if valid_581461 != nil:
    section.add "fields", valid_581461
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581463: Call_DfareportingPlacementsPatch_581450; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing placement. This method supports patch semantics.
  ## 
  let valid = call_581463.validator(path, query, header, formData, body)
  let scheme = call_581463.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581463.url(scheme.get, call_581463.host, call_581463.base,
                         call_581463.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581463, url, valid)

proc call*(call_581464: Call_DfareportingPlacementsPatch_581450; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingPlacementsPatch
  ## Updates an existing placement. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Placement ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581465 = newJObject()
  var query_581466 = newJObject()
  var body_581467 = newJObject()
  add(query_581466, "key", newJString(key))
  add(query_581466, "prettyPrint", newJBool(prettyPrint))
  add(query_581466, "oauth_token", newJString(oauthToken))
  add(path_581465, "profileId", newJString(profileId))
  add(query_581466, "alt", newJString(alt))
  add(query_581466, "userIp", newJString(userIp))
  add(query_581466, "quotaUser", newJString(quotaUser))
  add(query_581466, "id", newJString(id))
  if body != nil:
    body_581467 = body
  add(query_581466, "fields", newJString(fields))
  result = call_581464.call(path_581465, query_581466, nil, nil, body_581467)

var dfareportingPlacementsPatch* = Call_DfareportingPlacementsPatch_581450(
    name: "dfareportingPlacementsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/placements",
    validator: validate_DfareportingPlacementsPatch_581451,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsPatch_581452,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsGeneratetags_581468 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementsGeneratetags_581470(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements/generatetags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsGeneratetags_581469(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates tags for a placement.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581471 = path.getOrDefault("profileId")
  valid_581471 = validateParameter(valid_581471, JString, required = true,
                                 default = nil)
  if valid_581471 != nil:
    section.add "profileId", valid_581471
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   campaignId: JString
  ##             : Generate placements belonging to this campaign. This is a required field.
  ##   placementIds: JArray
  ##               : Generate tags for these placements.
  ##   tagFormats: JArray
  ##             : Tag formats to generate for these placements.
  ## 
  ## Note: PLACEMENT_TAG_STANDARD can only be generated for 1x1 placements.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581472 = query.getOrDefault("key")
  valid_581472 = validateParameter(valid_581472, JString, required = false,
                                 default = nil)
  if valid_581472 != nil:
    section.add "key", valid_581472
  var valid_581473 = query.getOrDefault("prettyPrint")
  valid_581473 = validateParameter(valid_581473, JBool, required = false,
                                 default = newJBool(true))
  if valid_581473 != nil:
    section.add "prettyPrint", valid_581473
  var valid_581474 = query.getOrDefault("oauth_token")
  valid_581474 = validateParameter(valid_581474, JString, required = false,
                                 default = nil)
  if valid_581474 != nil:
    section.add "oauth_token", valid_581474
  var valid_581475 = query.getOrDefault("alt")
  valid_581475 = validateParameter(valid_581475, JString, required = false,
                                 default = newJString("json"))
  if valid_581475 != nil:
    section.add "alt", valid_581475
  var valid_581476 = query.getOrDefault("userIp")
  valid_581476 = validateParameter(valid_581476, JString, required = false,
                                 default = nil)
  if valid_581476 != nil:
    section.add "userIp", valid_581476
  var valid_581477 = query.getOrDefault("quotaUser")
  valid_581477 = validateParameter(valid_581477, JString, required = false,
                                 default = nil)
  if valid_581477 != nil:
    section.add "quotaUser", valid_581477
  var valid_581478 = query.getOrDefault("campaignId")
  valid_581478 = validateParameter(valid_581478, JString, required = false,
                                 default = nil)
  if valid_581478 != nil:
    section.add "campaignId", valid_581478
  var valid_581479 = query.getOrDefault("placementIds")
  valid_581479 = validateParameter(valid_581479, JArray, required = false,
                                 default = nil)
  if valid_581479 != nil:
    section.add "placementIds", valid_581479
  var valid_581480 = query.getOrDefault("tagFormats")
  valid_581480 = validateParameter(valid_581480, JArray, required = false,
                                 default = nil)
  if valid_581480 != nil:
    section.add "tagFormats", valid_581480
  var valid_581481 = query.getOrDefault("fields")
  valid_581481 = validateParameter(valid_581481, JString, required = false,
                                 default = nil)
  if valid_581481 != nil:
    section.add "fields", valid_581481
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581482: Call_DfareportingPlacementsGeneratetags_581468;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates tags for a placement.
  ## 
  let valid = call_581482.validator(path, query, header, formData, body)
  let scheme = call_581482.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581482.url(scheme.get, call_581482.host, call_581482.base,
                         call_581482.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581482, url, valid)

proc call*(call_581483: Call_DfareportingPlacementsGeneratetags_581468;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; campaignId: string = ""; placementIds: JsonNode = nil;
          tagFormats: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingPlacementsGeneratetags
  ## Generates tags for a placement.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   campaignId: string
  ##             : Generate placements belonging to this campaign. This is a required field.
  ##   placementIds: JArray
  ##               : Generate tags for these placements.
  ##   tagFormats: JArray
  ##             : Tag formats to generate for these placements.
  ## 
  ## Note: PLACEMENT_TAG_STANDARD can only be generated for 1x1 placements.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581484 = newJObject()
  var query_581485 = newJObject()
  add(query_581485, "key", newJString(key))
  add(query_581485, "prettyPrint", newJBool(prettyPrint))
  add(query_581485, "oauth_token", newJString(oauthToken))
  add(path_581484, "profileId", newJString(profileId))
  add(query_581485, "alt", newJString(alt))
  add(query_581485, "userIp", newJString(userIp))
  add(query_581485, "quotaUser", newJString(quotaUser))
  add(query_581485, "campaignId", newJString(campaignId))
  if placementIds != nil:
    query_581485.add "placementIds", placementIds
  if tagFormats != nil:
    query_581485.add "tagFormats", tagFormats
  add(query_581485, "fields", newJString(fields))
  result = call_581483.call(path_581484, query_581485, nil, nil, nil)

var dfareportingPlacementsGeneratetags* = Call_DfareportingPlacementsGeneratetags_581468(
    name: "dfareportingPlacementsGeneratetags", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placements/generatetags",
    validator: validate_DfareportingPlacementsGeneratetags_581469,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsGeneratetags_581470,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsGet_581486 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlacementsGet_581488(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsGet_581487(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one placement by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Placement ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581489 = path.getOrDefault("profileId")
  valid_581489 = validateParameter(valid_581489, JString, required = true,
                                 default = nil)
  if valid_581489 != nil:
    section.add "profileId", valid_581489
  var valid_581490 = path.getOrDefault("id")
  valid_581490 = validateParameter(valid_581490, JString, required = true,
                                 default = nil)
  if valid_581490 != nil:
    section.add "id", valid_581490
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581491 = query.getOrDefault("key")
  valid_581491 = validateParameter(valid_581491, JString, required = false,
                                 default = nil)
  if valid_581491 != nil:
    section.add "key", valid_581491
  var valid_581492 = query.getOrDefault("prettyPrint")
  valid_581492 = validateParameter(valid_581492, JBool, required = false,
                                 default = newJBool(true))
  if valid_581492 != nil:
    section.add "prettyPrint", valid_581492
  var valid_581493 = query.getOrDefault("oauth_token")
  valid_581493 = validateParameter(valid_581493, JString, required = false,
                                 default = nil)
  if valid_581493 != nil:
    section.add "oauth_token", valid_581493
  var valid_581494 = query.getOrDefault("alt")
  valid_581494 = validateParameter(valid_581494, JString, required = false,
                                 default = newJString("json"))
  if valid_581494 != nil:
    section.add "alt", valid_581494
  var valid_581495 = query.getOrDefault("userIp")
  valid_581495 = validateParameter(valid_581495, JString, required = false,
                                 default = nil)
  if valid_581495 != nil:
    section.add "userIp", valid_581495
  var valid_581496 = query.getOrDefault("quotaUser")
  valid_581496 = validateParameter(valid_581496, JString, required = false,
                                 default = nil)
  if valid_581496 != nil:
    section.add "quotaUser", valid_581496
  var valid_581497 = query.getOrDefault("fields")
  valid_581497 = validateParameter(valid_581497, JString, required = false,
                                 default = nil)
  if valid_581497 != nil:
    section.add "fields", valid_581497
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581498: Call_DfareportingPlacementsGet_581486; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one placement by ID.
  ## 
  let valid = call_581498.validator(path, query, header, formData, body)
  let scheme = call_581498.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581498.url(scheme.get, call_581498.host, call_581498.base,
                         call_581498.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581498, url, valid)

proc call*(call_581499: Call_DfareportingPlacementsGet_581486; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingPlacementsGet
  ## Gets one placement by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Placement ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581500 = newJObject()
  var query_581501 = newJObject()
  add(query_581501, "key", newJString(key))
  add(query_581501, "prettyPrint", newJBool(prettyPrint))
  add(query_581501, "oauth_token", newJString(oauthToken))
  add(path_581500, "profileId", newJString(profileId))
  add(path_581500, "id", newJString(id))
  add(query_581501, "alt", newJString(alt))
  add(query_581501, "userIp", newJString(userIp))
  add(query_581501, "quotaUser", newJString(quotaUser))
  add(query_581501, "fields", newJString(fields))
  result = call_581499.call(path_581500, query_581501, nil, nil, nil)

var dfareportingPlacementsGet* = Call_DfareportingPlacementsGet_581486(
    name: "dfareportingPlacementsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placements/{id}",
    validator: validate_DfareportingPlacementsGet_581487,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsGet_581488,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlatformTypesList_581502 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlatformTypesList_581504(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/platformTypes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlatformTypesList_581503(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of platform types.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581505 = path.getOrDefault("profileId")
  valid_581505 = validateParameter(valid_581505, JString, required = true,
                                 default = nil)
  if valid_581505 != nil:
    section.add "profileId", valid_581505
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581506 = query.getOrDefault("key")
  valid_581506 = validateParameter(valid_581506, JString, required = false,
                                 default = nil)
  if valid_581506 != nil:
    section.add "key", valid_581506
  var valid_581507 = query.getOrDefault("prettyPrint")
  valid_581507 = validateParameter(valid_581507, JBool, required = false,
                                 default = newJBool(true))
  if valid_581507 != nil:
    section.add "prettyPrint", valid_581507
  var valid_581508 = query.getOrDefault("oauth_token")
  valid_581508 = validateParameter(valid_581508, JString, required = false,
                                 default = nil)
  if valid_581508 != nil:
    section.add "oauth_token", valid_581508
  var valid_581509 = query.getOrDefault("alt")
  valid_581509 = validateParameter(valid_581509, JString, required = false,
                                 default = newJString("json"))
  if valid_581509 != nil:
    section.add "alt", valid_581509
  var valid_581510 = query.getOrDefault("userIp")
  valid_581510 = validateParameter(valid_581510, JString, required = false,
                                 default = nil)
  if valid_581510 != nil:
    section.add "userIp", valid_581510
  var valid_581511 = query.getOrDefault("quotaUser")
  valid_581511 = validateParameter(valid_581511, JString, required = false,
                                 default = nil)
  if valid_581511 != nil:
    section.add "quotaUser", valid_581511
  var valid_581512 = query.getOrDefault("fields")
  valid_581512 = validateParameter(valid_581512, JString, required = false,
                                 default = nil)
  if valid_581512 != nil:
    section.add "fields", valid_581512
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581513: Call_DfareportingPlatformTypesList_581502; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of platform types.
  ## 
  let valid = call_581513.validator(path, query, header, formData, body)
  let scheme = call_581513.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581513.url(scheme.get, call_581513.host, call_581513.base,
                         call_581513.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581513, url, valid)

proc call*(call_581514: Call_DfareportingPlatformTypesList_581502;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingPlatformTypesList
  ## Retrieves a list of platform types.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581515 = newJObject()
  var query_581516 = newJObject()
  add(query_581516, "key", newJString(key))
  add(query_581516, "prettyPrint", newJBool(prettyPrint))
  add(query_581516, "oauth_token", newJString(oauthToken))
  add(path_581515, "profileId", newJString(profileId))
  add(query_581516, "alt", newJString(alt))
  add(query_581516, "userIp", newJString(userIp))
  add(query_581516, "quotaUser", newJString(quotaUser))
  add(query_581516, "fields", newJString(fields))
  result = call_581514.call(path_581515, query_581516, nil, nil, nil)

var dfareportingPlatformTypesList* = Call_DfareportingPlatformTypesList_581502(
    name: "dfareportingPlatformTypesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/platformTypes",
    validator: validate_DfareportingPlatformTypesList_581503,
    base: "/dfareporting/v3.2", url: url_DfareportingPlatformTypesList_581504,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlatformTypesGet_581517 = ref object of OpenApiRestCall_578364
proc url_DfareportingPlatformTypesGet_581519(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/platformTypes/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlatformTypesGet_581518(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one platform type by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Platform type ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581520 = path.getOrDefault("profileId")
  valid_581520 = validateParameter(valid_581520, JString, required = true,
                                 default = nil)
  if valid_581520 != nil:
    section.add "profileId", valid_581520
  var valid_581521 = path.getOrDefault("id")
  valid_581521 = validateParameter(valid_581521, JString, required = true,
                                 default = nil)
  if valid_581521 != nil:
    section.add "id", valid_581521
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581522 = query.getOrDefault("key")
  valid_581522 = validateParameter(valid_581522, JString, required = false,
                                 default = nil)
  if valid_581522 != nil:
    section.add "key", valid_581522
  var valid_581523 = query.getOrDefault("prettyPrint")
  valid_581523 = validateParameter(valid_581523, JBool, required = false,
                                 default = newJBool(true))
  if valid_581523 != nil:
    section.add "prettyPrint", valid_581523
  var valid_581524 = query.getOrDefault("oauth_token")
  valid_581524 = validateParameter(valid_581524, JString, required = false,
                                 default = nil)
  if valid_581524 != nil:
    section.add "oauth_token", valid_581524
  var valid_581525 = query.getOrDefault("alt")
  valid_581525 = validateParameter(valid_581525, JString, required = false,
                                 default = newJString("json"))
  if valid_581525 != nil:
    section.add "alt", valid_581525
  var valid_581526 = query.getOrDefault("userIp")
  valid_581526 = validateParameter(valid_581526, JString, required = false,
                                 default = nil)
  if valid_581526 != nil:
    section.add "userIp", valid_581526
  var valid_581527 = query.getOrDefault("quotaUser")
  valid_581527 = validateParameter(valid_581527, JString, required = false,
                                 default = nil)
  if valid_581527 != nil:
    section.add "quotaUser", valid_581527
  var valid_581528 = query.getOrDefault("fields")
  valid_581528 = validateParameter(valid_581528, JString, required = false,
                                 default = nil)
  if valid_581528 != nil:
    section.add "fields", valid_581528
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581529: Call_DfareportingPlatformTypesGet_581517; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one platform type by ID.
  ## 
  let valid = call_581529.validator(path, query, header, formData, body)
  let scheme = call_581529.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581529.url(scheme.get, call_581529.host, call_581529.base,
                         call_581529.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581529, url, valid)

proc call*(call_581530: Call_DfareportingPlatformTypesGet_581517;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingPlatformTypesGet
  ## Gets one platform type by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Platform type ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581531 = newJObject()
  var query_581532 = newJObject()
  add(query_581532, "key", newJString(key))
  add(query_581532, "prettyPrint", newJBool(prettyPrint))
  add(query_581532, "oauth_token", newJString(oauthToken))
  add(path_581531, "profileId", newJString(profileId))
  add(path_581531, "id", newJString(id))
  add(query_581532, "alt", newJString(alt))
  add(query_581532, "userIp", newJString(userIp))
  add(query_581532, "quotaUser", newJString(quotaUser))
  add(query_581532, "fields", newJString(fields))
  result = call_581530.call(path_581531, query_581532, nil, nil, nil)

var dfareportingPlatformTypesGet* = Call_DfareportingPlatformTypesGet_581517(
    name: "dfareportingPlatformTypesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/platformTypes/{id}",
    validator: validate_DfareportingPlatformTypesGet_581518,
    base: "/dfareporting/v3.2", url: url_DfareportingPlatformTypesGet_581519,
    schemes: {Scheme.Https})
type
  Call_DfareportingPostalCodesList_581533 = ref object of OpenApiRestCall_578364
proc url_DfareportingPostalCodesList_581535(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/postalCodes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPostalCodesList_581534(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of postal codes.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581536 = path.getOrDefault("profileId")
  valid_581536 = validateParameter(valid_581536, JString, required = true,
                                 default = nil)
  if valid_581536 != nil:
    section.add "profileId", valid_581536
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581537 = query.getOrDefault("key")
  valid_581537 = validateParameter(valid_581537, JString, required = false,
                                 default = nil)
  if valid_581537 != nil:
    section.add "key", valid_581537
  var valid_581538 = query.getOrDefault("prettyPrint")
  valid_581538 = validateParameter(valid_581538, JBool, required = false,
                                 default = newJBool(true))
  if valid_581538 != nil:
    section.add "prettyPrint", valid_581538
  var valid_581539 = query.getOrDefault("oauth_token")
  valid_581539 = validateParameter(valid_581539, JString, required = false,
                                 default = nil)
  if valid_581539 != nil:
    section.add "oauth_token", valid_581539
  var valid_581540 = query.getOrDefault("alt")
  valid_581540 = validateParameter(valid_581540, JString, required = false,
                                 default = newJString("json"))
  if valid_581540 != nil:
    section.add "alt", valid_581540
  var valid_581541 = query.getOrDefault("userIp")
  valid_581541 = validateParameter(valid_581541, JString, required = false,
                                 default = nil)
  if valid_581541 != nil:
    section.add "userIp", valid_581541
  var valid_581542 = query.getOrDefault("quotaUser")
  valid_581542 = validateParameter(valid_581542, JString, required = false,
                                 default = nil)
  if valid_581542 != nil:
    section.add "quotaUser", valid_581542
  var valid_581543 = query.getOrDefault("fields")
  valid_581543 = validateParameter(valid_581543, JString, required = false,
                                 default = nil)
  if valid_581543 != nil:
    section.add "fields", valid_581543
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581544: Call_DfareportingPostalCodesList_581533; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of postal codes.
  ## 
  let valid = call_581544.validator(path, query, header, formData, body)
  let scheme = call_581544.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581544.url(scheme.get, call_581544.host, call_581544.base,
                         call_581544.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581544, url, valid)

proc call*(call_581545: Call_DfareportingPostalCodesList_581533; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingPostalCodesList
  ## Retrieves a list of postal codes.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581546 = newJObject()
  var query_581547 = newJObject()
  add(query_581547, "key", newJString(key))
  add(query_581547, "prettyPrint", newJBool(prettyPrint))
  add(query_581547, "oauth_token", newJString(oauthToken))
  add(path_581546, "profileId", newJString(profileId))
  add(query_581547, "alt", newJString(alt))
  add(query_581547, "userIp", newJString(userIp))
  add(query_581547, "quotaUser", newJString(quotaUser))
  add(query_581547, "fields", newJString(fields))
  result = call_581545.call(path_581546, query_581547, nil, nil, nil)

var dfareportingPostalCodesList* = Call_DfareportingPostalCodesList_581533(
    name: "dfareportingPostalCodesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/postalCodes",
    validator: validate_DfareportingPostalCodesList_581534,
    base: "/dfareporting/v3.2", url: url_DfareportingPostalCodesList_581535,
    schemes: {Scheme.Https})
type
  Call_DfareportingPostalCodesGet_581548 = ref object of OpenApiRestCall_578364
proc url_DfareportingPostalCodesGet_581550(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "code" in path, "`code` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/postalCodes/"),
               (kind: VariableSegment, value: "code")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPostalCodesGet_581549(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one postal code by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   code: JString (required)
  ##       : Postal code ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581551 = path.getOrDefault("profileId")
  valid_581551 = validateParameter(valid_581551, JString, required = true,
                                 default = nil)
  if valid_581551 != nil:
    section.add "profileId", valid_581551
  var valid_581552 = path.getOrDefault("code")
  valid_581552 = validateParameter(valid_581552, JString, required = true,
                                 default = nil)
  if valid_581552 != nil:
    section.add "code", valid_581552
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581553 = query.getOrDefault("key")
  valid_581553 = validateParameter(valid_581553, JString, required = false,
                                 default = nil)
  if valid_581553 != nil:
    section.add "key", valid_581553
  var valid_581554 = query.getOrDefault("prettyPrint")
  valid_581554 = validateParameter(valid_581554, JBool, required = false,
                                 default = newJBool(true))
  if valid_581554 != nil:
    section.add "prettyPrint", valid_581554
  var valid_581555 = query.getOrDefault("oauth_token")
  valid_581555 = validateParameter(valid_581555, JString, required = false,
                                 default = nil)
  if valid_581555 != nil:
    section.add "oauth_token", valid_581555
  var valid_581556 = query.getOrDefault("alt")
  valid_581556 = validateParameter(valid_581556, JString, required = false,
                                 default = newJString("json"))
  if valid_581556 != nil:
    section.add "alt", valid_581556
  var valid_581557 = query.getOrDefault("userIp")
  valid_581557 = validateParameter(valid_581557, JString, required = false,
                                 default = nil)
  if valid_581557 != nil:
    section.add "userIp", valid_581557
  var valid_581558 = query.getOrDefault("quotaUser")
  valid_581558 = validateParameter(valid_581558, JString, required = false,
                                 default = nil)
  if valid_581558 != nil:
    section.add "quotaUser", valid_581558
  var valid_581559 = query.getOrDefault("fields")
  valid_581559 = validateParameter(valid_581559, JString, required = false,
                                 default = nil)
  if valid_581559 != nil:
    section.add "fields", valid_581559
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581560: Call_DfareportingPostalCodesGet_581548; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one postal code by ID.
  ## 
  let valid = call_581560.validator(path, query, header, formData, body)
  let scheme = call_581560.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581560.url(scheme.get, call_581560.host, call_581560.base,
                         call_581560.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581560, url, valid)

proc call*(call_581561: Call_DfareportingPostalCodesGet_581548; profileId: string;
          code: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingPostalCodesGet
  ## Gets one postal code by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   code: string (required)
  ##       : Postal code ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581562 = newJObject()
  var query_581563 = newJObject()
  add(query_581563, "key", newJString(key))
  add(query_581563, "prettyPrint", newJBool(prettyPrint))
  add(query_581563, "oauth_token", newJString(oauthToken))
  add(path_581562, "profileId", newJString(profileId))
  add(query_581563, "alt", newJString(alt))
  add(query_581563, "userIp", newJString(userIp))
  add(query_581563, "quotaUser", newJString(quotaUser))
  add(path_581562, "code", newJString(code))
  add(query_581563, "fields", newJString(fields))
  result = call_581561.call(path_581562, query_581563, nil, nil, nil)

var dfareportingPostalCodesGet* = Call_DfareportingPostalCodesGet_581548(
    name: "dfareportingPostalCodesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/postalCodes/{code}",
    validator: validate_DfareportingPostalCodesGet_581549,
    base: "/dfareporting/v3.2", url: url_DfareportingPostalCodesGet_581550,
    schemes: {Scheme.Https})
type
  Call_DfareportingProjectsList_581564 = ref object of OpenApiRestCall_578364
proc url_DfareportingProjectsList_581566(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingProjectsList_581565(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of projects, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581567 = path.getOrDefault("profileId")
  valid_581567 = validateParameter(valid_581567, JString, required = true,
                                 default = nil)
  if valid_581567 != nil:
    section.add "profileId", valid_581567
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   advertiserIds: JArray
  ##                : Select only projects with these advertiser IDs.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for projects by name or ID. Wildcards (*) are allowed. For example, "project*2015" will return projects with names like "project June 2015", "project April 2015", or simply "project 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "project" will match projects with name "my project", "project 2015", or simply "project".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only projects with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_581568 = query.getOrDefault("key")
  valid_581568 = validateParameter(valid_581568, JString, required = false,
                                 default = nil)
  if valid_581568 != nil:
    section.add "key", valid_581568
  var valid_581569 = query.getOrDefault("prettyPrint")
  valid_581569 = validateParameter(valid_581569, JBool, required = false,
                                 default = newJBool(true))
  if valid_581569 != nil:
    section.add "prettyPrint", valid_581569
  var valid_581570 = query.getOrDefault("oauth_token")
  valid_581570 = validateParameter(valid_581570, JString, required = false,
                                 default = nil)
  if valid_581570 != nil:
    section.add "oauth_token", valid_581570
  var valid_581571 = query.getOrDefault("sortField")
  valid_581571 = validateParameter(valid_581571, JString, required = false,
                                 default = newJString("ID"))
  if valid_581571 != nil:
    section.add "sortField", valid_581571
  var valid_581572 = query.getOrDefault("advertiserIds")
  valid_581572 = validateParameter(valid_581572, JArray, required = false,
                                 default = nil)
  if valid_581572 != nil:
    section.add "advertiserIds", valid_581572
  var valid_581573 = query.getOrDefault("alt")
  valid_581573 = validateParameter(valid_581573, JString, required = false,
                                 default = newJString("json"))
  if valid_581573 != nil:
    section.add "alt", valid_581573
  var valid_581574 = query.getOrDefault("userIp")
  valid_581574 = validateParameter(valid_581574, JString, required = false,
                                 default = nil)
  if valid_581574 != nil:
    section.add "userIp", valid_581574
  var valid_581575 = query.getOrDefault("quotaUser")
  valid_581575 = validateParameter(valid_581575, JString, required = false,
                                 default = nil)
  if valid_581575 != nil:
    section.add "quotaUser", valid_581575
  var valid_581576 = query.getOrDefault("pageToken")
  valid_581576 = validateParameter(valid_581576, JString, required = false,
                                 default = nil)
  if valid_581576 != nil:
    section.add "pageToken", valid_581576
  var valid_581577 = query.getOrDefault("searchString")
  valid_581577 = validateParameter(valid_581577, JString, required = false,
                                 default = nil)
  if valid_581577 != nil:
    section.add "searchString", valid_581577
  var valid_581578 = query.getOrDefault("sortOrder")
  valid_581578 = validateParameter(valid_581578, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581578 != nil:
    section.add "sortOrder", valid_581578
  var valid_581579 = query.getOrDefault("ids")
  valid_581579 = validateParameter(valid_581579, JArray, required = false,
                                 default = nil)
  if valid_581579 != nil:
    section.add "ids", valid_581579
  var valid_581580 = query.getOrDefault("fields")
  valid_581580 = validateParameter(valid_581580, JString, required = false,
                                 default = nil)
  if valid_581580 != nil:
    section.add "fields", valid_581580
  var valid_581581 = query.getOrDefault("maxResults")
  valid_581581 = validateParameter(valid_581581, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581581 != nil:
    section.add "maxResults", valid_581581
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581582: Call_DfareportingProjectsList_581564; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of projects, possibly filtered. This method supports paging.
  ## 
  let valid = call_581582.validator(path, query, header, formData, body)
  let scheme = call_581582.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581582.url(scheme.get, call_581582.host, call_581582.base,
                         call_581582.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581582, url, valid)

proc call*(call_581583: Call_DfareportingProjectsList_581564; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          sortField: string = "ID"; advertiserIds: JsonNode = nil; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          ids: JsonNode = nil; fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingProjectsList
  ## Retrieves a list of projects, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   advertiserIds: JArray
  ##                : Select only projects with these advertiser IDs.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for projects by name or ID. Wildcards (*) are allowed. For example, "project*2015" will return projects with names like "project June 2015", "project April 2015", or simply "project 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "project" will match projects with name "my project", "project 2015", or simply "project".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only projects with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_581584 = newJObject()
  var query_581585 = newJObject()
  add(query_581585, "key", newJString(key))
  add(query_581585, "prettyPrint", newJBool(prettyPrint))
  add(query_581585, "oauth_token", newJString(oauthToken))
  add(path_581584, "profileId", newJString(profileId))
  add(query_581585, "sortField", newJString(sortField))
  if advertiserIds != nil:
    query_581585.add "advertiserIds", advertiserIds
  add(query_581585, "alt", newJString(alt))
  add(query_581585, "userIp", newJString(userIp))
  add(query_581585, "quotaUser", newJString(quotaUser))
  add(query_581585, "pageToken", newJString(pageToken))
  add(query_581585, "searchString", newJString(searchString))
  add(query_581585, "sortOrder", newJString(sortOrder))
  if ids != nil:
    query_581585.add "ids", ids
  add(query_581585, "fields", newJString(fields))
  add(query_581585, "maxResults", newJInt(maxResults))
  result = call_581583.call(path_581584, query_581585, nil, nil, nil)

var dfareportingProjectsList* = Call_DfareportingProjectsList_581564(
    name: "dfareportingProjectsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/projects",
    validator: validate_DfareportingProjectsList_581565,
    base: "/dfareporting/v3.2", url: url_DfareportingProjectsList_581566,
    schemes: {Scheme.Https})
type
  Call_DfareportingProjectsGet_581586 = ref object of OpenApiRestCall_578364
proc url_DfareportingProjectsGet_581588(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingProjectsGet_581587(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one project by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Project ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581589 = path.getOrDefault("profileId")
  valid_581589 = validateParameter(valid_581589, JString, required = true,
                                 default = nil)
  if valid_581589 != nil:
    section.add "profileId", valid_581589
  var valid_581590 = path.getOrDefault("id")
  valid_581590 = validateParameter(valid_581590, JString, required = true,
                                 default = nil)
  if valid_581590 != nil:
    section.add "id", valid_581590
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581591 = query.getOrDefault("key")
  valid_581591 = validateParameter(valid_581591, JString, required = false,
                                 default = nil)
  if valid_581591 != nil:
    section.add "key", valid_581591
  var valid_581592 = query.getOrDefault("prettyPrint")
  valid_581592 = validateParameter(valid_581592, JBool, required = false,
                                 default = newJBool(true))
  if valid_581592 != nil:
    section.add "prettyPrint", valid_581592
  var valid_581593 = query.getOrDefault("oauth_token")
  valid_581593 = validateParameter(valid_581593, JString, required = false,
                                 default = nil)
  if valid_581593 != nil:
    section.add "oauth_token", valid_581593
  var valid_581594 = query.getOrDefault("alt")
  valid_581594 = validateParameter(valid_581594, JString, required = false,
                                 default = newJString("json"))
  if valid_581594 != nil:
    section.add "alt", valid_581594
  var valid_581595 = query.getOrDefault("userIp")
  valid_581595 = validateParameter(valid_581595, JString, required = false,
                                 default = nil)
  if valid_581595 != nil:
    section.add "userIp", valid_581595
  var valid_581596 = query.getOrDefault("quotaUser")
  valid_581596 = validateParameter(valid_581596, JString, required = false,
                                 default = nil)
  if valid_581596 != nil:
    section.add "quotaUser", valid_581596
  var valid_581597 = query.getOrDefault("fields")
  valid_581597 = validateParameter(valid_581597, JString, required = false,
                                 default = nil)
  if valid_581597 != nil:
    section.add "fields", valid_581597
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581598: Call_DfareportingProjectsGet_581586; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one project by ID.
  ## 
  let valid = call_581598.validator(path, query, header, formData, body)
  let scheme = call_581598.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581598.url(scheme.get, call_581598.host, call_581598.base,
                         call_581598.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581598, url, valid)

proc call*(call_581599: Call_DfareportingProjectsGet_581586; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingProjectsGet
  ## Gets one project by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Project ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581600 = newJObject()
  var query_581601 = newJObject()
  add(query_581601, "key", newJString(key))
  add(query_581601, "prettyPrint", newJBool(prettyPrint))
  add(query_581601, "oauth_token", newJString(oauthToken))
  add(path_581600, "profileId", newJString(profileId))
  add(path_581600, "id", newJString(id))
  add(query_581601, "alt", newJString(alt))
  add(query_581601, "userIp", newJString(userIp))
  add(query_581601, "quotaUser", newJString(quotaUser))
  add(query_581601, "fields", newJString(fields))
  result = call_581599.call(path_581600, query_581601, nil, nil, nil)

var dfareportingProjectsGet* = Call_DfareportingProjectsGet_581586(
    name: "dfareportingProjectsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/projects/{id}",
    validator: validate_DfareportingProjectsGet_581587,
    base: "/dfareporting/v3.2", url: url_DfareportingProjectsGet_581588,
    schemes: {Scheme.Https})
type
  Call_DfareportingInventoryItemsList_581602 = ref object of OpenApiRestCall_578364
proc url_DfareportingInventoryItemsList_581604(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/inventoryItems")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingInventoryItemsList_581603(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of inventory items, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   projectId: JString (required)
  ##            : Project ID for order documents.
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `projectId` field"
  var valid_581605 = path.getOrDefault("projectId")
  valid_581605 = validateParameter(valid_581605, JString, required = true,
                                 default = nil)
  if valid_581605 != nil:
    section.add "projectId", valid_581605
  var valid_581606 = path.getOrDefault("profileId")
  valid_581606 = validateParameter(valid_581606, JString, required = true,
                                 default = nil)
  if valid_581606 != nil:
    section.add "profileId", valid_581606
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   inPlan: JBool
  ##         : Select only inventory items that are in plan.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   orderId: JArray
  ##          : Select only inventory items that belong to specified orders.
  ##   type: JString
  ##       : Select only inventory items with this type.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   siteId: JArray
  ##         : Select only inventory items that are associated with these sites.
  ##   ids: JArray
  ##      : Select only inventory items with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_581607 = query.getOrDefault("key")
  valid_581607 = validateParameter(valid_581607, JString, required = false,
                                 default = nil)
  if valid_581607 != nil:
    section.add "key", valid_581607
  var valid_581608 = query.getOrDefault("prettyPrint")
  valid_581608 = validateParameter(valid_581608, JBool, required = false,
                                 default = newJBool(true))
  if valid_581608 != nil:
    section.add "prettyPrint", valid_581608
  var valid_581609 = query.getOrDefault("oauth_token")
  valid_581609 = validateParameter(valid_581609, JString, required = false,
                                 default = nil)
  if valid_581609 != nil:
    section.add "oauth_token", valid_581609
  var valid_581610 = query.getOrDefault("sortField")
  valid_581610 = validateParameter(valid_581610, JString, required = false,
                                 default = newJString("ID"))
  if valid_581610 != nil:
    section.add "sortField", valid_581610
  var valid_581611 = query.getOrDefault("alt")
  valid_581611 = validateParameter(valid_581611, JString, required = false,
                                 default = newJString("json"))
  if valid_581611 != nil:
    section.add "alt", valid_581611
  var valid_581612 = query.getOrDefault("userIp")
  valid_581612 = validateParameter(valid_581612, JString, required = false,
                                 default = nil)
  if valid_581612 != nil:
    section.add "userIp", valid_581612
  var valid_581613 = query.getOrDefault("inPlan")
  valid_581613 = validateParameter(valid_581613, JBool, required = false, default = nil)
  if valid_581613 != nil:
    section.add "inPlan", valid_581613
  var valid_581614 = query.getOrDefault("quotaUser")
  valid_581614 = validateParameter(valid_581614, JString, required = false,
                                 default = nil)
  if valid_581614 != nil:
    section.add "quotaUser", valid_581614
  var valid_581615 = query.getOrDefault("orderId")
  valid_581615 = validateParameter(valid_581615, JArray, required = false,
                                 default = nil)
  if valid_581615 != nil:
    section.add "orderId", valid_581615
  var valid_581616 = query.getOrDefault("type")
  valid_581616 = validateParameter(valid_581616, JString, required = false, default = newJString(
      "PLANNING_PLACEMENT_TYPE_CREDIT"))
  if valid_581616 != nil:
    section.add "type", valid_581616
  var valid_581617 = query.getOrDefault("pageToken")
  valid_581617 = validateParameter(valid_581617, JString, required = false,
                                 default = nil)
  if valid_581617 != nil:
    section.add "pageToken", valid_581617
  var valid_581618 = query.getOrDefault("sortOrder")
  valid_581618 = validateParameter(valid_581618, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581618 != nil:
    section.add "sortOrder", valid_581618
  var valid_581619 = query.getOrDefault("siteId")
  valid_581619 = validateParameter(valid_581619, JArray, required = false,
                                 default = nil)
  if valid_581619 != nil:
    section.add "siteId", valid_581619
  var valid_581620 = query.getOrDefault("ids")
  valid_581620 = validateParameter(valid_581620, JArray, required = false,
                                 default = nil)
  if valid_581620 != nil:
    section.add "ids", valid_581620
  var valid_581621 = query.getOrDefault("fields")
  valid_581621 = validateParameter(valid_581621, JString, required = false,
                                 default = nil)
  if valid_581621 != nil:
    section.add "fields", valid_581621
  var valid_581622 = query.getOrDefault("maxResults")
  valid_581622 = validateParameter(valid_581622, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581622 != nil:
    section.add "maxResults", valid_581622
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581623: Call_DfareportingInventoryItemsList_581602; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of inventory items, possibly filtered. This method supports paging.
  ## 
  let valid = call_581623.validator(path, query, header, formData, body)
  let scheme = call_581623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581623.url(scheme.get, call_581623.host, call_581623.base,
                         call_581623.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581623, url, valid)

proc call*(call_581624: Call_DfareportingInventoryItemsList_581602;
          projectId: string; profileId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; sortField: string = "ID";
          alt: string = "json"; userIp: string = ""; inPlan: bool = false;
          quotaUser: string = ""; orderId: JsonNode = nil;
          `type`: string = "PLANNING_PLACEMENT_TYPE_CREDIT"; pageToken: string = "";
          sortOrder: string = "ASCENDING"; siteId: JsonNode = nil; ids: JsonNode = nil;
          fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingInventoryItemsList
  ## Retrieves a list of inventory items, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   projectId: string (required)
  ##            : Project ID for order documents.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   inPlan: bool
  ##         : Select only inventory items that are in plan.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   orderId: JArray
  ##          : Select only inventory items that belong to specified orders.
  ##   type: string
  ##       : Select only inventory items with this type.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   siteId: JArray
  ##         : Select only inventory items that are associated with these sites.
  ##   ids: JArray
  ##      : Select only inventory items with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_581625 = newJObject()
  var query_581626 = newJObject()
  add(query_581626, "key", newJString(key))
  add(query_581626, "prettyPrint", newJBool(prettyPrint))
  add(query_581626, "oauth_token", newJString(oauthToken))
  add(path_581625, "projectId", newJString(projectId))
  add(path_581625, "profileId", newJString(profileId))
  add(query_581626, "sortField", newJString(sortField))
  add(query_581626, "alt", newJString(alt))
  add(query_581626, "userIp", newJString(userIp))
  add(query_581626, "inPlan", newJBool(inPlan))
  add(query_581626, "quotaUser", newJString(quotaUser))
  if orderId != nil:
    query_581626.add "orderId", orderId
  add(query_581626, "type", newJString(`type`))
  add(query_581626, "pageToken", newJString(pageToken))
  add(query_581626, "sortOrder", newJString(sortOrder))
  if siteId != nil:
    query_581626.add "siteId", siteId
  if ids != nil:
    query_581626.add "ids", ids
  add(query_581626, "fields", newJString(fields))
  add(query_581626, "maxResults", newJInt(maxResults))
  result = call_581624.call(path_581625, query_581626, nil, nil, nil)

var dfareportingInventoryItemsList* = Call_DfareportingInventoryItemsList_581602(
    name: "dfareportingInventoryItemsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/projects/{projectId}/inventoryItems",
    validator: validate_DfareportingInventoryItemsList_581603,
    base: "/dfareporting/v3.2", url: url_DfareportingInventoryItemsList_581604,
    schemes: {Scheme.Https})
type
  Call_DfareportingInventoryItemsGet_581627 = ref object of OpenApiRestCall_578364
proc url_DfareportingInventoryItemsGet_581629(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/inventoryItems/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingInventoryItemsGet_581628(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one inventory item by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   projectId: JString (required)
  ##            : Project ID for order documents.
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Inventory item ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `projectId` field"
  var valid_581630 = path.getOrDefault("projectId")
  valid_581630 = validateParameter(valid_581630, JString, required = true,
                                 default = nil)
  if valid_581630 != nil:
    section.add "projectId", valid_581630
  var valid_581631 = path.getOrDefault("profileId")
  valid_581631 = validateParameter(valid_581631, JString, required = true,
                                 default = nil)
  if valid_581631 != nil:
    section.add "profileId", valid_581631
  var valid_581632 = path.getOrDefault("id")
  valid_581632 = validateParameter(valid_581632, JString, required = true,
                                 default = nil)
  if valid_581632 != nil:
    section.add "id", valid_581632
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581633 = query.getOrDefault("key")
  valid_581633 = validateParameter(valid_581633, JString, required = false,
                                 default = nil)
  if valid_581633 != nil:
    section.add "key", valid_581633
  var valid_581634 = query.getOrDefault("prettyPrint")
  valid_581634 = validateParameter(valid_581634, JBool, required = false,
                                 default = newJBool(true))
  if valid_581634 != nil:
    section.add "prettyPrint", valid_581634
  var valid_581635 = query.getOrDefault("oauth_token")
  valid_581635 = validateParameter(valid_581635, JString, required = false,
                                 default = nil)
  if valid_581635 != nil:
    section.add "oauth_token", valid_581635
  var valid_581636 = query.getOrDefault("alt")
  valid_581636 = validateParameter(valid_581636, JString, required = false,
                                 default = newJString("json"))
  if valid_581636 != nil:
    section.add "alt", valid_581636
  var valid_581637 = query.getOrDefault("userIp")
  valid_581637 = validateParameter(valid_581637, JString, required = false,
                                 default = nil)
  if valid_581637 != nil:
    section.add "userIp", valid_581637
  var valid_581638 = query.getOrDefault("quotaUser")
  valid_581638 = validateParameter(valid_581638, JString, required = false,
                                 default = nil)
  if valid_581638 != nil:
    section.add "quotaUser", valid_581638
  var valid_581639 = query.getOrDefault("fields")
  valid_581639 = validateParameter(valid_581639, JString, required = false,
                                 default = nil)
  if valid_581639 != nil:
    section.add "fields", valid_581639
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581640: Call_DfareportingInventoryItemsGet_581627; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one inventory item by ID.
  ## 
  let valid = call_581640.validator(path, query, header, formData, body)
  let scheme = call_581640.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581640.url(scheme.get, call_581640.host, call_581640.base,
                         call_581640.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581640, url, valid)

proc call*(call_581641: Call_DfareportingInventoryItemsGet_581627;
          projectId: string; profileId: string; id: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingInventoryItemsGet
  ## Gets one inventory item by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   projectId: string (required)
  ##            : Project ID for order documents.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Inventory item ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581642 = newJObject()
  var query_581643 = newJObject()
  add(query_581643, "key", newJString(key))
  add(query_581643, "prettyPrint", newJBool(prettyPrint))
  add(query_581643, "oauth_token", newJString(oauthToken))
  add(path_581642, "projectId", newJString(projectId))
  add(path_581642, "profileId", newJString(profileId))
  add(path_581642, "id", newJString(id))
  add(query_581643, "alt", newJString(alt))
  add(query_581643, "userIp", newJString(userIp))
  add(query_581643, "quotaUser", newJString(quotaUser))
  add(query_581643, "fields", newJString(fields))
  result = call_581641.call(path_581642, query_581643, nil, nil, nil)

var dfareportingInventoryItemsGet* = Call_DfareportingInventoryItemsGet_581627(
    name: "dfareportingInventoryItemsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/projects/{projectId}/inventoryItems/{id}",
    validator: validate_DfareportingInventoryItemsGet_581628,
    base: "/dfareporting/v3.2", url: url_DfareportingInventoryItemsGet_581629,
    schemes: {Scheme.Https})
type
  Call_DfareportingOrderDocumentsList_581644 = ref object of OpenApiRestCall_578364
proc url_DfareportingOrderDocumentsList_581646(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/orderDocuments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOrderDocumentsList_581645(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of order documents, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   projectId: JString (required)
  ##            : Project ID for order documents.
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `projectId` field"
  var valid_581647 = path.getOrDefault("projectId")
  valid_581647 = validateParameter(valid_581647, JString, required = true,
                                 default = nil)
  if valid_581647 != nil:
    section.add "projectId", valid_581647
  var valid_581648 = path.getOrDefault("profileId")
  valid_581648 = validateParameter(valid_581648, JString, required = true,
                                 default = nil)
  if valid_581648 != nil:
    section.add "profileId", valid_581648
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   approved: JBool
  ##           : Select only order documents that have been approved by at least one user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   orderId: JArray
  ##          : Select only order documents for specified orders.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for order documents by name or ID. Wildcards (*) are allowed. For example, "orderdocument*2015" will return order documents with names like "orderdocument June 2015", "orderdocument April 2015", or simply "orderdocument 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "orderdocument" will match order documents with name "my orderdocument", "orderdocument 2015", or simply "orderdocument".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   siteId: JArray
  ##         : Select only order documents that are associated with these sites.
  ##   ids: JArray
  ##      : Select only order documents with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_581649 = query.getOrDefault("key")
  valid_581649 = validateParameter(valid_581649, JString, required = false,
                                 default = nil)
  if valid_581649 != nil:
    section.add "key", valid_581649
  var valid_581650 = query.getOrDefault("prettyPrint")
  valid_581650 = validateParameter(valid_581650, JBool, required = false,
                                 default = newJBool(true))
  if valid_581650 != nil:
    section.add "prettyPrint", valid_581650
  var valid_581651 = query.getOrDefault("oauth_token")
  valid_581651 = validateParameter(valid_581651, JString, required = false,
                                 default = nil)
  if valid_581651 != nil:
    section.add "oauth_token", valid_581651
  var valid_581652 = query.getOrDefault("approved")
  valid_581652 = validateParameter(valid_581652, JBool, required = false, default = nil)
  if valid_581652 != nil:
    section.add "approved", valid_581652
  var valid_581653 = query.getOrDefault("sortField")
  valid_581653 = validateParameter(valid_581653, JString, required = false,
                                 default = newJString("ID"))
  if valid_581653 != nil:
    section.add "sortField", valid_581653
  var valid_581654 = query.getOrDefault("alt")
  valid_581654 = validateParameter(valid_581654, JString, required = false,
                                 default = newJString("json"))
  if valid_581654 != nil:
    section.add "alt", valid_581654
  var valid_581655 = query.getOrDefault("userIp")
  valid_581655 = validateParameter(valid_581655, JString, required = false,
                                 default = nil)
  if valid_581655 != nil:
    section.add "userIp", valid_581655
  var valid_581656 = query.getOrDefault("quotaUser")
  valid_581656 = validateParameter(valid_581656, JString, required = false,
                                 default = nil)
  if valid_581656 != nil:
    section.add "quotaUser", valid_581656
  var valid_581657 = query.getOrDefault("orderId")
  valid_581657 = validateParameter(valid_581657, JArray, required = false,
                                 default = nil)
  if valid_581657 != nil:
    section.add "orderId", valid_581657
  var valid_581658 = query.getOrDefault("pageToken")
  valid_581658 = validateParameter(valid_581658, JString, required = false,
                                 default = nil)
  if valid_581658 != nil:
    section.add "pageToken", valid_581658
  var valid_581659 = query.getOrDefault("searchString")
  valid_581659 = validateParameter(valid_581659, JString, required = false,
                                 default = nil)
  if valid_581659 != nil:
    section.add "searchString", valid_581659
  var valid_581660 = query.getOrDefault("sortOrder")
  valid_581660 = validateParameter(valid_581660, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581660 != nil:
    section.add "sortOrder", valid_581660
  var valid_581661 = query.getOrDefault("siteId")
  valid_581661 = validateParameter(valid_581661, JArray, required = false,
                                 default = nil)
  if valid_581661 != nil:
    section.add "siteId", valid_581661
  var valid_581662 = query.getOrDefault("ids")
  valid_581662 = validateParameter(valid_581662, JArray, required = false,
                                 default = nil)
  if valid_581662 != nil:
    section.add "ids", valid_581662
  var valid_581663 = query.getOrDefault("fields")
  valid_581663 = validateParameter(valid_581663, JString, required = false,
                                 default = nil)
  if valid_581663 != nil:
    section.add "fields", valid_581663
  var valid_581664 = query.getOrDefault("maxResults")
  valid_581664 = validateParameter(valid_581664, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581664 != nil:
    section.add "maxResults", valid_581664
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581665: Call_DfareportingOrderDocumentsList_581644; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of order documents, possibly filtered. This method supports paging.
  ## 
  let valid = call_581665.validator(path, query, header, formData, body)
  let scheme = call_581665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581665.url(scheme.get, call_581665.host, call_581665.base,
                         call_581665.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581665, url, valid)

proc call*(call_581666: Call_DfareportingOrderDocumentsList_581644;
          projectId: string; profileId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; approved: bool = false;
          sortField: string = "ID"; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; orderId: JsonNode = nil; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          siteId: JsonNode = nil; ids: JsonNode = nil; fields: string = "";
          maxResults: int = 1000): Recallable =
  ## dfareportingOrderDocumentsList
  ## Retrieves a list of order documents, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   projectId: string (required)
  ##            : Project ID for order documents.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   approved: bool
  ##           : Select only order documents that have been approved by at least one user.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   orderId: JArray
  ##          : Select only order documents for specified orders.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for order documents by name or ID. Wildcards (*) are allowed. For example, "orderdocument*2015" will return order documents with names like "orderdocument June 2015", "orderdocument April 2015", or simply "orderdocument 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "orderdocument" will match order documents with name "my orderdocument", "orderdocument 2015", or simply "orderdocument".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   siteId: JArray
  ##         : Select only order documents that are associated with these sites.
  ##   ids: JArray
  ##      : Select only order documents with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_581667 = newJObject()
  var query_581668 = newJObject()
  add(query_581668, "key", newJString(key))
  add(query_581668, "prettyPrint", newJBool(prettyPrint))
  add(query_581668, "oauth_token", newJString(oauthToken))
  add(path_581667, "projectId", newJString(projectId))
  add(path_581667, "profileId", newJString(profileId))
  add(query_581668, "approved", newJBool(approved))
  add(query_581668, "sortField", newJString(sortField))
  add(query_581668, "alt", newJString(alt))
  add(query_581668, "userIp", newJString(userIp))
  add(query_581668, "quotaUser", newJString(quotaUser))
  if orderId != nil:
    query_581668.add "orderId", orderId
  add(query_581668, "pageToken", newJString(pageToken))
  add(query_581668, "searchString", newJString(searchString))
  add(query_581668, "sortOrder", newJString(sortOrder))
  if siteId != nil:
    query_581668.add "siteId", siteId
  if ids != nil:
    query_581668.add "ids", ids
  add(query_581668, "fields", newJString(fields))
  add(query_581668, "maxResults", newJInt(maxResults))
  result = call_581666.call(path_581667, query_581668, nil, nil, nil)

var dfareportingOrderDocumentsList* = Call_DfareportingOrderDocumentsList_581644(
    name: "dfareportingOrderDocumentsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/projects/{projectId}/orderDocuments",
    validator: validate_DfareportingOrderDocumentsList_581645,
    base: "/dfareporting/v3.2", url: url_DfareportingOrderDocumentsList_581646,
    schemes: {Scheme.Https})
type
  Call_DfareportingOrderDocumentsGet_581669 = ref object of OpenApiRestCall_578364
proc url_DfareportingOrderDocumentsGet_581671(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/orderDocuments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOrderDocumentsGet_581670(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one order document by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   projectId: JString (required)
  ##            : Project ID for order documents.
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Order document ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `projectId` field"
  var valid_581672 = path.getOrDefault("projectId")
  valid_581672 = validateParameter(valid_581672, JString, required = true,
                                 default = nil)
  if valid_581672 != nil:
    section.add "projectId", valid_581672
  var valid_581673 = path.getOrDefault("profileId")
  valid_581673 = validateParameter(valid_581673, JString, required = true,
                                 default = nil)
  if valid_581673 != nil:
    section.add "profileId", valid_581673
  var valid_581674 = path.getOrDefault("id")
  valid_581674 = validateParameter(valid_581674, JString, required = true,
                                 default = nil)
  if valid_581674 != nil:
    section.add "id", valid_581674
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581675 = query.getOrDefault("key")
  valid_581675 = validateParameter(valid_581675, JString, required = false,
                                 default = nil)
  if valid_581675 != nil:
    section.add "key", valid_581675
  var valid_581676 = query.getOrDefault("prettyPrint")
  valid_581676 = validateParameter(valid_581676, JBool, required = false,
                                 default = newJBool(true))
  if valid_581676 != nil:
    section.add "prettyPrint", valid_581676
  var valid_581677 = query.getOrDefault("oauth_token")
  valid_581677 = validateParameter(valid_581677, JString, required = false,
                                 default = nil)
  if valid_581677 != nil:
    section.add "oauth_token", valid_581677
  var valid_581678 = query.getOrDefault("alt")
  valid_581678 = validateParameter(valid_581678, JString, required = false,
                                 default = newJString("json"))
  if valid_581678 != nil:
    section.add "alt", valid_581678
  var valid_581679 = query.getOrDefault("userIp")
  valid_581679 = validateParameter(valid_581679, JString, required = false,
                                 default = nil)
  if valid_581679 != nil:
    section.add "userIp", valid_581679
  var valid_581680 = query.getOrDefault("quotaUser")
  valid_581680 = validateParameter(valid_581680, JString, required = false,
                                 default = nil)
  if valid_581680 != nil:
    section.add "quotaUser", valid_581680
  var valid_581681 = query.getOrDefault("fields")
  valid_581681 = validateParameter(valid_581681, JString, required = false,
                                 default = nil)
  if valid_581681 != nil:
    section.add "fields", valid_581681
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581682: Call_DfareportingOrderDocumentsGet_581669; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one order document by ID.
  ## 
  let valid = call_581682.validator(path, query, header, formData, body)
  let scheme = call_581682.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581682.url(scheme.get, call_581682.host, call_581682.base,
                         call_581682.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581682, url, valid)

proc call*(call_581683: Call_DfareportingOrderDocumentsGet_581669;
          projectId: string; profileId: string; id: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingOrderDocumentsGet
  ## Gets one order document by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   projectId: string (required)
  ##            : Project ID for order documents.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Order document ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581684 = newJObject()
  var query_581685 = newJObject()
  add(query_581685, "key", newJString(key))
  add(query_581685, "prettyPrint", newJBool(prettyPrint))
  add(query_581685, "oauth_token", newJString(oauthToken))
  add(path_581684, "projectId", newJString(projectId))
  add(path_581684, "profileId", newJString(profileId))
  add(path_581684, "id", newJString(id))
  add(query_581685, "alt", newJString(alt))
  add(query_581685, "userIp", newJString(userIp))
  add(query_581685, "quotaUser", newJString(quotaUser))
  add(query_581685, "fields", newJString(fields))
  result = call_581683.call(path_581684, query_581685, nil, nil, nil)

var dfareportingOrderDocumentsGet* = Call_DfareportingOrderDocumentsGet_581669(
    name: "dfareportingOrderDocumentsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/projects/{projectId}/orderDocuments/{id}",
    validator: validate_DfareportingOrderDocumentsGet_581670,
    base: "/dfareporting/v3.2", url: url_DfareportingOrderDocumentsGet_581671,
    schemes: {Scheme.Https})
type
  Call_DfareportingOrdersList_581686 = ref object of OpenApiRestCall_578364
proc url_DfareportingOrdersList_581688(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/orders")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOrdersList_581687(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of orders, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   projectId: JString (required)
  ##            : Project ID for orders.
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `projectId` field"
  var valid_581689 = path.getOrDefault("projectId")
  valid_581689 = validateParameter(valid_581689, JString, required = true,
                                 default = nil)
  if valid_581689 != nil:
    section.add "projectId", valid_581689
  var valid_581690 = path.getOrDefault("profileId")
  valid_581690 = validateParameter(valid_581690, JString, required = true,
                                 default = nil)
  if valid_581690 != nil:
    section.add "profileId", valid_581690
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for orders by name or ID. Wildcards (*) are allowed. For example, "order*2015" will return orders with names like "order June 2015", "order April 2015", or simply "order 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "order" will match orders with name "my order", "order 2015", or simply "order".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   siteId: JArray
  ##         : Select only orders that are associated with these site IDs.
  ##   ids: JArray
  ##      : Select only orders with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_581691 = query.getOrDefault("key")
  valid_581691 = validateParameter(valid_581691, JString, required = false,
                                 default = nil)
  if valid_581691 != nil:
    section.add "key", valid_581691
  var valid_581692 = query.getOrDefault("prettyPrint")
  valid_581692 = validateParameter(valid_581692, JBool, required = false,
                                 default = newJBool(true))
  if valid_581692 != nil:
    section.add "prettyPrint", valid_581692
  var valid_581693 = query.getOrDefault("oauth_token")
  valid_581693 = validateParameter(valid_581693, JString, required = false,
                                 default = nil)
  if valid_581693 != nil:
    section.add "oauth_token", valid_581693
  var valid_581694 = query.getOrDefault("sortField")
  valid_581694 = validateParameter(valid_581694, JString, required = false,
                                 default = newJString("ID"))
  if valid_581694 != nil:
    section.add "sortField", valid_581694
  var valid_581695 = query.getOrDefault("alt")
  valid_581695 = validateParameter(valid_581695, JString, required = false,
                                 default = newJString("json"))
  if valid_581695 != nil:
    section.add "alt", valid_581695
  var valid_581696 = query.getOrDefault("userIp")
  valid_581696 = validateParameter(valid_581696, JString, required = false,
                                 default = nil)
  if valid_581696 != nil:
    section.add "userIp", valid_581696
  var valid_581697 = query.getOrDefault("quotaUser")
  valid_581697 = validateParameter(valid_581697, JString, required = false,
                                 default = nil)
  if valid_581697 != nil:
    section.add "quotaUser", valid_581697
  var valid_581698 = query.getOrDefault("pageToken")
  valid_581698 = validateParameter(valid_581698, JString, required = false,
                                 default = nil)
  if valid_581698 != nil:
    section.add "pageToken", valid_581698
  var valid_581699 = query.getOrDefault("searchString")
  valid_581699 = validateParameter(valid_581699, JString, required = false,
                                 default = nil)
  if valid_581699 != nil:
    section.add "searchString", valid_581699
  var valid_581700 = query.getOrDefault("sortOrder")
  valid_581700 = validateParameter(valid_581700, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581700 != nil:
    section.add "sortOrder", valid_581700
  var valid_581701 = query.getOrDefault("siteId")
  valid_581701 = validateParameter(valid_581701, JArray, required = false,
                                 default = nil)
  if valid_581701 != nil:
    section.add "siteId", valid_581701
  var valid_581702 = query.getOrDefault("ids")
  valid_581702 = validateParameter(valid_581702, JArray, required = false,
                                 default = nil)
  if valid_581702 != nil:
    section.add "ids", valid_581702
  var valid_581703 = query.getOrDefault("fields")
  valid_581703 = validateParameter(valid_581703, JString, required = false,
                                 default = nil)
  if valid_581703 != nil:
    section.add "fields", valid_581703
  var valid_581704 = query.getOrDefault("maxResults")
  valid_581704 = validateParameter(valid_581704, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581704 != nil:
    section.add "maxResults", valid_581704
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581705: Call_DfareportingOrdersList_581686; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of orders, possibly filtered. This method supports paging.
  ## 
  let valid = call_581705.validator(path, query, header, formData, body)
  let scheme = call_581705.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581705.url(scheme.get, call_581705.host, call_581705.base,
                         call_581705.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581705, url, valid)

proc call*(call_581706: Call_DfareportingOrdersList_581686; projectId: string;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; sortField: string = "ID"; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          siteId: JsonNode = nil; ids: JsonNode = nil; fields: string = "";
          maxResults: int = 1000): Recallable =
  ## dfareportingOrdersList
  ## Retrieves a list of orders, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   projectId: string (required)
  ##            : Project ID for orders.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for orders by name or ID. Wildcards (*) are allowed. For example, "order*2015" will return orders with names like "order June 2015", "order April 2015", or simply "order 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "order" will match orders with name "my order", "order 2015", or simply "order".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   siteId: JArray
  ##         : Select only orders that are associated with these site IDs.
  ##   ids: JArray
  ##      : Select only orders with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_581707 = newJObject()
  var query_581708 = newJObject()
  add(query_581708, "key", newJString(key))
  add(query_581708, "prettyPrint", newJBool(prettyPrint))
  add(query_581708, "oauth_token", newJString(oauthToken))
  add(path_581707, "projectId", newJString(projectId))
  add(path_581707, "profileId", newJString(profileId))
  add(query_581708, "sortField", newJString(sortField))
  add(query_581708, "alt", newJString(alt))
  add(query_581708, "userIp", newJString(userIp))
  add(query_581708, "quotaUser", newJString(quotaUser))
  add(query_581708, "pageToken", newJString(pageToken))
  add(query_581708, "searchString", newJString(searchString))
  add(query_581708, "sortOrder", newJString(sortOrder))
  if siteId != nil:
    query_581708.add "siteId", siteId
  if ids != nil:
    query_581708.add "ids", ids
  add(query_581708, "fields", newJString(fields))
  add(query_581708, "maxResults", newJInt(maxResults))
  result = call_581706.call(path_581707, query_581708, nil, nil, nil)

var dfareportingOrdersList* = Call_DfareportingOrdersList_581686(
    name: "dfareportingOrdersList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/projects/{projectId}/orders",
    validator: validate_DfareportingOrdersList_581687, base: "/dfareporting/v3.2",
    url: url_DfareportingOrdersList_581688, schemes: {Scheme.Https})
type
  Call_DfareportingOrdersGet_581709 = ref object of OpenApiRestCall_578364
proc url_DfareportingOrdersGet_581711(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/orders/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOrdersGet_581710(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one order by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   projectId: JString (required)
  ##            : Project ID for orders.
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Order ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `projectId` field"
  var valid_581712 = path.getOrDefault("projectId")
  valid_581712 = validateParameter(valid_581712, JString, required = true,
                                 default = nil)
  if valid_581712 != nil:
    section.add "projectId", valid_581712
  var valid_581713 = path.getOrDefault("profileId")
  valid_581713 = validateParameter(valid_581713, JString, required = true,
                                 default = nil)
  if valid_581713 != nil:
    section.add "profileId", valid_581713
  var valid_581714 = path.getOrDefault("id")
  valid_581714 = validateParameter(valid_581714, JString, required = true,
                                 default = nil)
  if valid_581714 != nil:
    section.add "id", valid_581714
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581715 = query.getOrDefault("key")
  valid_581715 = validateParameter(valid_581715, JString, required = false,
                                 default = nil)
  if valid_581715 != nil:
    section.add "key", valid_581715
  var valid_581716 = query.getOrDefault("prettyPrint")
  valid_581716 = validateParameter(valid_581716, JBool, required = false,
                                 default = newJBool(true))
  if valid_581716 != nil:
    section.add "prettyPrint", valid_581716
  var valid_581717 = query.getOrDefault("oauth_token")
  valid_581717 = validateParameter(valid_581717, JString, required = false,
                                 default = nil)
  if valid_581717 != nil:
    section.add "oauth_token", valid_581717
  var valid_581718 = query.getOrDefault("alt")
  valid_581718 = validateParameter(valid_581718, JString, required = false,
                                 default = newJString("json"))
  if valid_581718 != nil:
    section.add "alt", valid_581718
  var valid_581719 = query.getOrDefault("userIp")
  valid_581719 = validateParameter(valid_581719, JString, required = false,
                                 default = nil)
  if valid_581719 != nil:
    section.add "userIp", valid_581719
  var valid_581720 = query.getOrDefault("quotaUser")
  valid_581720 = validateParameter(valid_581720, JString, required = false,
                                 default = nil)
  if valid_581720 != nil:
    section.add "quotaUser", valid_581720
  var valid_581721 = query.getOrDefault("fields")
  valid_581721 = validateParameter(valid_581721, JString, required = false,
                                 default = nil)
  if valid_581721 != nil:
    section.add "fields", valid_581721
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581722: Call_DfareportingOrdersGet_581709; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one order by ID.
  ## 
  let valid = call_581722.validator(path, query, header, formData, body)
  let scheme = call_581722.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581722.url(scheme.get, call_581722.host, call_581722.base,
                         call_581722.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581722, url, valid)

proc call*(call_581723: Call_DfareportingOrdersGet_581709; projectId: string;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingOrdersGet
  ## Gets one order by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   projectId: string (required)
  ##            : Project ID for orders.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Order ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581724 = newJObject()
  var query_581725 = newJObject()
  add(query_581725, "key", newJString(key))
  add(query_581725, "prettyPrint", newJBool(prettyPrint))
  add(query_581725, "oauth_token", newJString(oauthToken))
  add(path_581724, "projectId", newJString(projectId))
  add(path_581724, "profileId", newJString(profileId))
  add(path_581724, "id", newJString(id))
  add(query_581725, "alt", newJString(alt))
  add(query_581725, "userIp", newJString(userIp))
  add(query_581725, "quotaUser", newJString(quotaUser))
  add(query_581725, "fields", newJString(fields))
  result = call_581723.call(path_581724, query_581725, nil, nil, nil)

var dfareportingOrdersGet* = Call_DfareportingOrdersGet_581709(
    name: "dfareportingOrdersGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/projects/{projectId}/orders/{id}",
    validator: validate_DfareportingOrdersGet_581710, base: "/dfareporting/v3.2",
    url: url_DfareportingOrdersGet_581711, schemes: {Scheme.Https})
type
  Call_DfareportingRegionsList_581726 = ref object of OpenApiRestCall_578364
proc url_DfareportingRegionsList_581728(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/regions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRegionsList_581727(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of regions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581729 = path.getOrDefault("profileId")
  valid_581729 = validateParameter(valid_581729, JString, required = true,
                                 default = nil)
  if valid_581729 != nil:
    section.add "profileId", valid_581729
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581730 = query.getOrDefault("key")
  valid_581730 = validateParameter(valid_581730, JString, required = false,
                                 default = nil)
  if valid_581730 != nil:
    section.add "key", valid_581730
  var valid_581731 = query.getOrDefault("prettyPrint")
  valid_581731 = validateParameter(valid_581731, JBool, required = false,
                                 default = newJBool(true))
  if valid_581731 != nil:
    section.add "prettyPrint", valid_581731
  var valid_581732 = query.getOrDefault("oauth_token")
  valid_581732 = validateParameter(valid_581732, JString, required = false,
                                 default = nil)
  if valid_581732 != nil:
    section.add "oauth_token", valid_581732
  var valid_581733 = query.getOrDefault("alt")
  valid_581733 = validateParameter(valid_581733, JString, required = false,
                                 default = newJString("json"))
  if valid_581733 != nil:
    section.add "alt", valid_581733
  var valid_581734 = query.getOrDefault("userIp")
  valid_581734 = validateParameter(valid_581734, JString, required = false,
                                 default = nil)
  if valid_581734 != nil:
    section.add "userIp", valid_581734
  var valid_581735 = query.getOrDefault("quotaUser")
  valid_581735 = validateParameter(valid_581735, JString, required = false,
                                 default = nil)
  if valid_581735 != nil:
    section.add "quotaUser", valid_581735
  var valid_581736 = query.getOrDefault("fields")
  valid_581736 = validateParameter(valid_581736, JString, required = false,
                                 default = nil)
  if valid_581736 != nil:
    section.add "fields", valid_581736
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581737: Call_DfareportingRegionsList_581726; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of regions.
  ## 
  let valid = call_581737.validator(path, query, header, formData, body)
  let scheme = call_581737.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581737.url(scheme.get, call_581737.host, call_581737.base,
                         call_581737.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581737, url, valid)

proc call*(call_581738: Call_DfareportingRegionsList_581726; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingRegionsList
  ## Retrieves a list of regions.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581739 = newJObject()
  var query_581740 = newJObject()
  add(query_581740, "key", newJString(key))
  add(query_581740, "prettyPrint", newJBool(prettyPrint))
  add(query_581740, "oauth_token", newJString(oauthToken))
  add(path_581739, "profileId", newJString(profileId))
  add(query_581740, "alt", newJString(alt))
  add(query_581740, "userIp", newJString(userIp))
  add(query_581740, "quotaUser", newJString(quotaUser))
  add(query_581740, "fields", newJString(fields))
  result = call_581738.call(path_581739, query_581740, nil, nil, nil)

var dfareportingRegionsList* = Call_DfareportingRegionsList_581726(
    name: "dfareportingRegionsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/regions",
    validator: validate_DfareportingRegionsList_581727,
    base: "/dfareporting/v3.2", url: url_DfareportingRegionsList_581728,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListSharesUpdate_581741 = ref object of OpenApiRestCall_578364
proc url_DfareportingRemarketingListSharesUpdate_581743(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingListShares")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListSharesUpdate_581742(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing remarketing list share.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581744 = path.getOrDefault("profileId")
  valid_581744 = validateParameter(valid_581744, JString, required = true,
                                 default = nil)
  if valid_581744 != nil:
    section.add "profileId", valid_581744
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581745 = query.getOrDefault("key")
  valid_581745 = validateParameter(valid_581745, JString, required = false,
                                 default = nil)
  if valid_581745 != nil:
    section.add "key", valid_581745
  var valid_581746 = query.getOrDefault("prettyPrint")
  valid_581746 = validateParameter(valid_581746, JBool, required = false,
                                 default = newJBool(true))
  if valid_581746 != nil:
    section.add "prettyPrint", valid_581746
  var valid_581747 = query.getOrDefault("oauth_token")
  valid_581747 = validateParameter(valid_581747, JString, required = false,
                                 default = nil)
  if valid_581747 != nil:
    section.add "oauth_token", valid_581747
  var valid_581748 = query.getOrDefault("alt")
  valid_581748 = validateParameter(valid_581748, JString, required = false,
                                 default = newJString("json"))
  if valid_581748 != nil:
    section.add "alt", valid_581748
  var valid_581749 = query.getOrDefault("userIp")
  valid_581749 = validateParameter(valid_581749, JString, required = false,
                                 default = nil)
  if valid_581749 != nil:
    section.add "userIp", valid_581749
  var valid_581750 = query.getOrDefault("quotaUser")
  valid_581750 = validateParameter(valid_581750, JString, required = false,
                                 default = nil)
  if valid_581750 != nil:
    section.add "quotaUser", valid_581750
  var valid_581751 = query.getOrDefault("fields")
  valid_581751 = validateParameter(valid_581751, JString, required = false,
                                 default = nil)
  if valid_581751 != nil:
    section.add "fields", valid_581751
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581753: Call_DfareportingRemarketingListSharesUpdate_581741;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing remarketing list share.
  ## 
  let valid = call_581753.validator(path, query, header, formData, body)
  let scheme = call_581753.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581753.url(scheme.get, call_581753.host, call_581753.base,
                         call_581753.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581753, url, valid)

proc call*(call_581754: Call_DfareportingRemarketingListSharesUpdate_581741;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingRemarketingListSharesUpdate
  ## Updates an existing remarketing list share.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581755 = newJObject()
  var query_581756 = newJObject()
  var body_581757 = newJObject()
  add(query_581756, "key", newJString(key))
  add(query_581756, "prettyPrint", newJBool(prettyPrint))
  add(query_581756, "oauth_token", newJString(oauthToken))
  add(path_581755, "profileId", newJString(profileId))
  add(query_581756, "alt", newJString(alt))
  add(query_581756, "userIp", newJString(userIp))
  add(query_581756, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581757 = body
  add(query_581756, "fields", newJString(fields))
  result = call_581754.call(path_581755, query_581756, nil, nil, body_581757)

var dfareportingRemarketingListSharesUpdate* = Call_DfareportingRemarketingListSharesUpdate_581741(
    name: "dfareportingRemarketingListSharesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingListShares",
    validator: validate_DfareportingRemarketingListSharesUpdate_581742,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListSharesUpdate_581743,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListSharesPatch_581758 = ref object of OpenApiRestCall_578364
proc url_DfareportingRemarketingListSharesPatch_581760(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingListShares")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListSharesPatch_581759(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing remarketing list share. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581761 = path.getOrDefault("profileId")
  valid_581761 = validateParameter(valid_581761, JString, required = true,
                                 default = nil)
  if valid_581761 != nil:
    section.add "profileId", valid_581761
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   remarketingListId: JString (required)
  ##                    : Remarketing list ID.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581762 = query.getOrDefault("key")
  valid_581762 = validateParameter(valid_581762, JString, required = false,
                                 default = nil)
  if valid_581762 != nil:
    section.add "key", valid_581762
  assert query != nil,
        "query argument is necessary due to required `remarketingListId` field"
  var valid_581763 = query.getOrDefault("remarketingListId")
  valid_581763 = validateParameter(valid_581763, JString, required = true,
                                 default = nil)
  if valid_581763 != nil:
    section.add "remarketingListId", valid_581763
  var valid_581764 = query.getOrDefault("prettyPrint")
  valid_581764 = validateParameter(valid_581764, JBool, required = false,
                                 default = newJBool(true))
  if valid_581764 != nil:
    section.add "prettyPrint", valid_581764
  var valid_581765 = query.getOrDefault("oauth_token")
  valid_581765 = validateParameter(valid_581765, JString, required = false,
                                 default = nil)
  if valid_581765 != nil:
    section.add "oauth_token", valid_581765
  var valid_581766 = query.getOrDefault("alt")
  valid_581766 = validateParameter(valid_581766, JString, required = false,
                                 default = newJString("json"))
  if valid_581766 != nil:
    section.add "alt", valid_581766
  var valid_581767 = query.getOrDefault("userIp")
  valid_581767 = validateParameter(valid_581767, JString, required = false,
                                 default = nil)
  if valid_581767 != nil:
    section.add "userIp", valid_581767
  var valid_581768 = query.getOrDefault("quotaUser")
  valid_581768 = validateParameter(valid_581768, JString, required = false,
                                 default = nil)
  if valid_581768 != nil:
    section.add "quotaUser", valid_581768
  var valid_581769 = query.getOrDefault("fields")
  valid_581769 = validateParameter(valid_581769, JString, required = false,
                                 default = nil)
  if valid_581769 != nil:
    section.add "fields", valid_581769
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581771: Call_DfareportingRemarketingListSharesPatch_581758;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing remarketing list share. This method supports patch semantics.
  ## 
  let valid = call_581771.validator(path, query, header, formData, body)
  let scheme = call_581771.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581771.url(scheme.get, call_581771.host, call_581771.base,
                         call_581771.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581771, url, valid)

proc call*(call_581772: Call_DfareportingRemarketingListSharesPatch_581758;
          remarketingListId: string; profileId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; body: JsonNode = nil;
          fields: string = ""): Recallable =
  ## dfareportingRemarketingListSharesPatch
  ## Updates an existing remarketing list share. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   remarketingListId: string (required)
  ##                    : Remarketing list ID.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581773 = newJObject()
  var query_581774 = newJObject()
  var body_581775 = newJObject()
  add(query_581774, "key", newJString(key))
  add(query_581774, "remarketingListId", newJString(remarketingListId))
  add(query_581774, "prettyPrint", newJBool(prettyPrint))
  add(query_581774, "oauth_token", newJString(oauthToken))
  add(path_581773, "profileId", newJString(profileId))
  add(query_581774, "alt", newJString(alt))
  add(query_581774, "userIp", newJString(userIp))
  add(query_581774, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581775 = body
  add(query_581774, "fields", newJString(fields))
  result = call_581772.call(path_581773, query_581774, nil, nil, body_581775)

var dfareportingRemarketingListSharesPatch* = Call_DfareportingRemarketingListSharesPatch_581758(
    name: "dfareportingRemarketingListSharesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingListShares",
    validator: validate_DfareportingRemarketingListSharesPatch_581759,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListSharesPatch_581760,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListSharesGet_581776 = ref object of OpenApiRestCall_578364
proc url_DfareportingRemarketingListSharesGet_581778(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "remarketingListId" in path,
        "`remarketingListId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingListShares/"),
               (kind: VariableSegment, value: "remarketingListId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListSharesGet_581777(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one remarketing list share by remarketing list ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   remarketingListId: JString (required)
  ##                    : Remarketing list ID.
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `remarketingListId` field"
  var valid_581779 = path.getOrDefault("remarketingListId")
  valid_581779 = validateParameter(valid_581779, JString, required = true,
                                 default = nil)
  if valid_581779 != nil:
    section.add "remarketingListId", valid_581779
  var valid_581780 = path.getOrDefault("profileId")
  valid_581780 = validateParameter(valid_581780, JString, required = true,
                                 default = nil)
  if valid_581780 != nil:
    section.add "profileId", valid_581780
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581781 = query.getOrDefault("key")
  valid_581781 = validateParameter(valid_581781, JString, required = false,
                                 default = nil)
  if valid_581781 != nil:
    section.add "key", valid_581781
  var valid_581782 = query.getOrDefault("prettyPrint")
  valid_581782 = validateParameter(valid_581782, JBool, required = false,
                                 default = newJBool(true))
  if valid_581782 != nil:
    section.add "prettyPrint", valid_581782
  var valid_581783 = query.getOrDefault("oauth_token")
  valid_581783 = validateParameter(valid_581783, JString, required = false,
                                 default = nil)
  if valid_581783 != nil:
    section.add "oauth_token", valid_581783
  var valid_581784 = query.getOrDefault("alt")
  valid_581784 = validateParameter(valid_581784, JString, required = false,
                                 default = newJString("json"))
  if valid_581784 != nil:
    section.add "alt", valid_581784
  var valid_581785 = query.getOrDefault("userIp")
  valid_581785 = validateParameter(valid_581785, JString, required = false,
                                 default = nil)
  if valid_581785 != nil:
    section.add "userIp", valid_581785
  var valid_581786 = query.getOrDefault("quotaUser")
  valid_581786 = validateParameter(valid_581786, JString, required = false,
                                 default = nil)
  if valid_581786 != nil:
    section.add "quotaUser", valid_581786
  var valid_581787 = query.getOrDefault("fields")
  valid_581787 = validateParameter(valid_581787, JString, required = false,
                                 default = nil)
  if valid_581787 != nil:
    section.add "fields", valid_581787
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581788: Call_DfareportingRemarketingListSharesGet_581776;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one remarketing list share by remarketing list ID.
  ## 
  let valid = call_581788.validator(path, query, header, formData, body)
  let scheme = call_581788.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581788.url(scheme.get, call_581788.host, call_581788.base,
                         call_581788.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581788, url, valid)

proc call*(call_581789: Call_DfareportingRemarketingListSharesGet_581776;
          remarketingListId: string; profileId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingRemarketingListSharesGet
  ## Gets one remarketing list share by remarketing list ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   remarketingListId: string (required)
  ##                    : Remarketing list ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581790 = newJObject()
  var query_581791 = newJObject()
  add(query_581791, "key", newJString(key))
  add(query_581791, "prettyPrint", newJBool(prettyPrint))
  add(query_581791, "oauth_token", newJString(oauthToken))
  add(path_581790, "remarketingListId", newJString(remarketingListId))
  add(path_581790, "profileId", newJString(profileId))
  add(query_581791, "alt", newJString(alt))
  add(query_581791, "userIp", newJString(userIp))
  add(query_581791, "quotaUser", newJString(quotaUser))
  add(query_581791, "fields", newJString(fields))
  result = call_581789.call(path_581790, query_581791, nil, nil, nil)

var dfareportingRemarketingListSharesGet* = Call_DfareportingRemarketingListSharesGet_581776(
    name: "dfareportingRemarketingListSharesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/remarketingListShares/{remarketingListId}",
    validator: validate_DfareportingRemarketingListSharesGet_581777,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListSharesGet_581778,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsUpdate_581815 = ref object of OpenApiRestCall_578364
proc url_DfareportingRemarketingListsUpdate_581817(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsUpdate_581816(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing remarketing list.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581818 = path.getOrDefault("profileId")
  valid_581818 = validateParameter(valid_581818, JString, required = true,
                                 default = nil)
  if valid_581818 != nil:
    section.add "profileId", valid_581818
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581819 = query.getOrDefault("key")
  valid_581819 = validateParameter(valid_581819, JString, required = false,
                                 default = nil)
  if valid_581819 != nil:
    section.add "key", valid_581819
  var valid_581820 = query.getOrDefault("prettyPrint")
  valid_581820 = validateParameter(valid_581820, JBool, required = false,
                                 default = newJBool(true))
  if valid_581820 != nil:
    section.add "prettyPrint", valid_581820
  var valid_581821 = query.getOrDefault("oauth_token")
  valid_581821 = validateParameter(valid_581821, JString, required = false,
                                 default = nil)
  if valid_581821 != nil:
    section.add "oauth_token", valid_581821
  var valid_581822 = query.getOrDefault("alt")
  valid_581822 = validateParameter(valid_581822, JString, required = false,
                                 default = newJString("json"))
  if valid_581822 != nil:
    section.add "alt", valid_581822
  var valid_581823 = query.getOrDefault("userIp")
  valid_581823 = validateParameter(valid_581823, JString, required = false,
                                 default = nil)
  if valid_581823 != nil:
    section.add "userIp", valid_581823
  var valid_581824 = query.getOrDefault("quotaUser")
  valid_581824 = validateParameter(valid_581824, JString, required = false,
                                 default = nil)
  if valid_581824 != nil:
    section.add "quotaUser", valid_581824
  var valid_581825 = query.getOrDefault("fields")
  valid_581825 = validateParameter(valid_581825, JString, required = false,
                                 default = nil)
  if valid_581825 != nil:
    section.add "fields", valid_581825
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581827: Call_DfareportingRemarketingListsUpdate_581815;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing remarketing list.
  ## 
  let valid = call_581827.validator(path, query, header, formData, body)
  let scheme = call_581827.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581827.url(scheme.get, call_581827.host, call_581827.base,
                         call_581827.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581827, url, valid)

proc call*(call_581828: Call_DfareportingRemarketingListsUpdate_581815;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingRemarketingListsUpdate
  ## Updates an existing remarketing list.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581829 = newJObject()
  var query_581830 = newJObject()
  var body_581831 = newJObject()
  add(query_581830, "key", newJString(key))
  add(query_581830, "prettyPrint", newJBool(prettyPrint))
  add(query_581830, "oauth_token", newJString(oauthToken))
  add(path_581829, "profileId", newJString(profileId))
  add(query_581830, "alt", newJString(alt))
  add(query_581830, "userIp", newJString(userIp))
  add(query_581830, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581831 = body
  add(query_581830, "fields", newJString(fields))
  result = call_581828.call(path_581829, query_581830, nil, nil, body_581831)

var dfareportingRemarketingListsUpdate* = Call_DfareportingRemarketingListsUpdate_581815(
    name: "dfareportingRemarketingListsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists",
    validator: validate_DfareportingRemarketingListsUpdate_581816,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListsUpdate_581817,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsInsert_581832 = ref object of OpenApiRestCall_578364
proc url_DfareportingRemarketingListsInsert_581834(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsInsert_581833(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new remarketing list.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581835 = path.getOrDefault("profileId")
  valid_581835 = validateParameter(valid_581835, JString, required = true,
                                 default = nil)
  if valid_581835 != nil:
    section.add "profileId", valid_581835
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581836 = query.getOrDefault("key")
  valid_581836 = validateParameter(valid_581836, JString, required = false,
                                 default = nil)
  if valid_581836 != nil:
    section.add "key", valid_581836
  var valid_581837 = query.getOrDefault("prettyPrint")
  valid_581837 = validateParameter(valid_581837, JBool, required = false,
                                 default = newJBool(true))
  if valid_581837 != nil:
    section.add "prettyPrint", valid_581837
  var valid_581838 = query.getOrDefault("oauth_token")
  valid_581838 = validateParameter(valid_581838, JString, required = false,
                                 default = nil)
  if valid_581838 != nil:
    section.add "oauth_token", valid_581838
  var valid_581839 = query.getOrDefault("alt")
  valid_581839 = validateParameter(valid_581839, JString, required = false,
                                 default = newJString("json"))
  if valid_581839 != nil:
    section.add "alt", valid_581839
  var valid_581840 = query.getOrDefault("userIp")
  valid_581840 = validateParameter(valid_581840, JString, required = false,
                                 default = nil)
  if valid_581840 != nil:
    section.add "userIp", valid_581840
  var valid_581841 = query.getOrDefault("quotaUser")
  valid_581841 = validateParameter(valid_581841, JString, required = false,
                                 default = nil)
  if valid_581841 != nil:
    section.add "quotaUser", valid_581841
  var valid_581842 = query.getOrDefault("fields")
  valid_581842 = validateParameter(valid_581842, JString, required = false,
                                 default = nil)
  if valid_581842 != nil:
    section.add "fields", valid_581842
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581844: Call_DfareportingRemarketingListsInsert_581832;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new remarketing list.
  ## 
  let valid = call_581844.validator(path, query, header, formData, body)
  let scheme = call_581844.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581844.url(scheme.get, call_581844.host, call_581844.base,
                         call_581844.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581844, url, valid)

proc call*(call_581845: Call_DfareportingRemarketingListsInsert_581832;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingRemarketingListsInsert
  ## Inserts a new remarketing list.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581846 = newJObject()
  var query_581847 = newJObject()
  var body_581848 = newJObject()
  add(query_581847, "key", newJString(key))
  add(query_581847, "prettyPrint", newJBool(prettyPrint))
  add(query_581847, "oauth_token", newJString(oauthToken))
  add(path_581846, "profileId", newJString(profileId))
  add(query_581847, "alt", newJString(alt))
  add(query_581847, "userIp", newJString(userIp))
  add(query_581847, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581848 = body
  add(query_581847, "fields", newJString(fields))
  result = call_581845.call(path_581846, query_581847, nil, nil, body_581848)

var dfareportingRemarketingListsInsert* = Call_DfareportingRemarketingListsInsert_581832(
    name: "dfareportingRemarketingListsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists",
    validator: validate_DfareportingRemarketingListsInsert_581833,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListsInsert_581834,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsList_581792 = ref object of OpenApiRestCall_578364
proc url_DfareportingRemarketingListsList_581794(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsList_581793(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of remarketing lists, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581795 = path.getOrDefault("profileId")
  valid_581795 = validateParameter(valid_581795, JString, required = true,
                                 default = nil)
  if valid_581795 != nil:
    section.add "profileId", valid_581795
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   name: JString
  ##       : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
  ##   floodlightActivityId: JString
  ##                       : Select only remarketing lists that have this floodlight activity ID.
  ##   active: JBool
  ##         : Select only active or only inactive remarketing lists.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   advertiserId: JString (required)
  ##               : Select only remarketing lists owned by this advertiser.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_581796 = query.getOrDefault("key")
  valid_581796 = validateParameter(valid_581796, JString, required = false,
                                 default = nil)
  if valid_581796 != nil:
    section.add "key", valid_581796
  var valid_581797 = query.getOrDefault("prettyPrint")
  valid_581797 = validateParameter(valid_581797, JBool, required = false,
                                 default = newJBool(true))
  if valid_581797 != nil:
    section.add "prettyPrint", valid_581797
  var valid_581798 = query.getOrDefault("oauth_token")
  valid_581798 = validateParameter(valid_581798, JString, required = false,
                                 default = nil)
  if valid_581798 != nil:
    section.add "oauth_token", valid_581798
  var valid_581799 = query.getOrDefault("name")
  valid_581799 = validateParameter(valid_581799, JString, required = false,
                                 default = nil)
  if valid_581799 != nil:
    section.add "name", valid_581799
  var valid_581800 = query.getOrDefault("floodlightActivityId")
  valid_581800 = validateParameter(valid_581800, JString, required = false,
                                 default = nil)
  if valid_581800 != nil:
    section.add "floodlightActivityId", valid_581800
  var valid_581801 = query.getOrDefault("active")
  valid_581801 = validateParameter(valid_581801, JBool, required = false, default = nil)
  if valid_581801 != nil:
    section.add "active", valid_581801
  var valid_581802 = query.getOrDefault("sortField")
  valid_581802 = validateParameter(valid_581802, JString, required = false,
                                 default = newJString("ID"))
  if valid_581802 != nil:
    section.add "sortField", valid_581802
  var valid_581803 = query.getOrDefault("alt")
  valid_581803 = validateParameter(valid_581803, JString, required = false,
                                 default = newJString("json"))
  if valid_581803 != nil:
    section.add "alt", valid_581803
  var valid_581804 = query.getOrDefault("userIp")
  valid_581804 = validateParameter(valid_581804, JString, required = false,
                                 default = nil)
  if valid_581804 != nil:
    section.add "userIp", valid_581804
  var valid_581805 = query.getOrDefault("quotaUser")
  valid_581805 = validateParameter(valid_581805, JString, required = false,
                                 default = nil)
  if valid_581805 != nil:
    section.add "quotaUser", valid_581805
  var valid_581806 = query.getOrDefault("pageToken")
  valid_581806 = validateParameter(valid_581806, JString, required = false,
                                 default = nil)
  if valid_581806 != nil:
    section.add "pageToken", valid_581806
  var valid_581807 = query.getOrDefault("sortOrder")
  valid_581807 = validateParameter(valid_581807, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_581807 != nil:
    section.add "sortOrder", valid_581807
  assert query != nil,
        "query argument is necessary due to required `advertiserId` field"
  var valid_581808 = query.getOrDefault("advertiserId")
  valid_581808 = validateParameter(valid_581808, JString, required = true,
                                 default = nil)
  if valid_581808 != nil:
    section.add "advertiserId", valid_581808
  var valid_581809 = query.getOrDefault("fields")
  valid_581809 = validateParameter(valid_581809, JString, required = false,
                                 default = nil)
  if valid_581809 != nil:
    section.add "fields", valid_581809
  var valid_581810 = query.getOrDefault("maxResults")
  valid_581810 = validateParameter(valid_581810, JInt, required = false,
                                 default = newJInt(1000))
  if valid_581810 != nil:
    section.add "maxResults", valid_581810
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581811: Call_DfareportingRemarketingListsList_581792;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of remarketing lists, possibly filtered. This method supports paging.
  ## 
  let valid = call_581811.validator(path, query, header, formData, body)
  let scheme = call_581811.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581811.url(scheme.get, call_581811.host, call_581811.base,
                         call_581811.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581811, url, valid)

proc call*(call_581812: Call_DfareportingRemarketingListsList_581792;
          profileId: string; advertiserId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; name: string = "";
          floodlightActivityId: string = ""; active: bool = false;
          sortField: string = "ID"; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; pageToken: string = "";
          sortOrder: string = "ASCENDING"; fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingRemarketingListsList
  ## Retrieves a list of remarketing lists, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   name: string
  ##       : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
  ##   floodlightActivityId: string
  ##                       : Select only remarketing lists that have this floodlight activity ID.
  ##   active: bool
  ##         : Select only active or only inactive remarketing lists.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   advertiserId: string (required)
  ##               : Select only remarketing lists owned by this advertiser.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_581813 = newJObject()
  var query_581814 = newJObject()
  add(query_581814, "key", newJString(key))
  add(query_581814, "prettyPrint", newJBool(prettyPrint))
  add(query_581814, "oauth_token", newJString(oauthToken))
  add(query_581814, "name", newJString(name))
  add(query_581814, "floodlightActivityId", newJString(floodlightActivityId))
  add(query_581814, "active", newJBool(active))
  add(path_581813, "profileId", newJString(profileId))
  add(query_581814, "sortField", newJString(sortField))
  add(query_581814, "alt", newJString(alt))
  add(query_581814, "userIp", newJString(userIp))
  add(query_581814, "quotaUser", newJString(quotaUser))
  add(query_581814, "pageToken", newJString(pageToken))
  add(query_581814, "sortOrder", newJString(sortOrder))
  add(query_581814, "advertiserId", newJString(advertiserId))
  add(query_581814, "fields", newJString(fields))
  add(query_581814, "maxResults", newJInt(maxResults))
  result = call_581812.call(path_581813, query_581814, nil, nil, nil)

var dfareportingRemarketingListsList* = Call_DfareportingRemarketingListsList_581792(
    name: "dfareportingRemarketingListsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists",
    validator: validate_DfareportingRemarketingListsList_581793,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListsList_581794,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsPatch_581849 = ref object of OpenApiRestCall_578364
proc url_DfareportingRemarketingListsPatch_581851(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsPatch_581850(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing remarketing list. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581852 = path.getOrDefault("profileId")
  valid_581852 = validateParameter(valid_581852, JString, required = true,
                                 default = nil)
  if valid_581852 != nil:
    section.add "profileId", valid_581852
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Remarketing list ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581853 = query.getOrDefault("key")
  valid_581853 = validateParameter(valid_581853, JString, required = false,
                                 default = nil)
  if valid_581853 != nil:
    section.add "key", valid_581853
  var valid_581854 = query.getOrDefault("prettyPrint")
  valid_581854 = validateParameter(valid_581854, JBool, required = false,
                                 default = newJBool(true))
  if valid_581854 != nil:
    section.add "prettyPrint", valid_581854
  var valid_581855 = query.getOrDefault("oauth_token")
  valid_581855 = validateParameter(valid_581855, JString, required = false,
                                 default = nil)
  if valid_581855 != nil:
    section.add "oauth_token", valid_581855
  var valid_581856 = query.getOrDefault("alt")
  valid_581856 = validateParameter(valid_581856, JString, required = false,
                                 default = newJString("json"))
  if valid_581856 != nil:
    section.add "alt", valid_581856
  var valid_581857 = query.getOrDefault("userIp")
  valid_581857 = validateParameter(valid_581857, JString, required = false,
                                 default = nil)
  if valid_581857 != nil:
    section.add "userIp", valid_581857
  var valid_581858 = query.getOrDefault("quotaUser")
  valid_581858 = validateParameter(valid_581858, JString, required = false,
                                 default = nil)
  if valid_581858 != nil:
    section.add "quotaUser", valid_581858
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_581859 = query.getOrDefault("id")
  valid_581859 = validateParameter(valid_581859, JString, required = true,
                                 default = nil)
  if valid_581859 != nil:
    section.add "id", valid_581859
  var valid_581860 = query.getOrDefault("fields")
  valid_581860 = validateParameter(valid_581860, JString, required = false,
                                 default = nil)
  if valid_581860 != nil:
    section.add "fields", valid_581860
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581862: Call_DfareportingRemarketingListsPatch_581849;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing remarketing list. This method supports patch semantics.
  ## 
  let valid = call_581862.validator(path, query, header, formData, body)
  let scheme = call_581862.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581862.url(scheme.get, call_581862.host, call_581862.base,
                         call_581862.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581862, url, valid)

proc call*(call_581863: Call_DfareportingRemarketingListsPatch_581849;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingRemarketingListsPatch
  ## Updates an existing remarketing list. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Remarketing list ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581864 = newJObject()
  var query_581865 = newJObject()
  var body_581866 = newJObject()
  add(query_581865, "key", newJString(key))
  add(query_581865, "prettyPrint", newJBool(prettyPrint))
  add(query_581865, "oauth_token", newJString(oauthToken))
  add(path_581864, "profileId", newJString(profileId))
  add(query_581865, "alt", newJString(alt))
  add(query_581865, "userIp", newJString(userIp))
  add(query_581865, "quotaUser", newJString(quotaUser))
  add(query_581865, "id", newJString(id))
  if body != nil:
    body_581866 = body
  add(query_581865, "fields", newJString(fields))
  result = call_581863.call(path_581864, query_581865, nil, nil, body_581866)

var dfareportingRemarketingListsPatch* = Call_DfareportingRemarketingListsPatch_581849(
    name: "dfareportingRemarketingListsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists",
    validator: validate_DfareportingRemarketingListsPatch_581850,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListsPatch_581851,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsGet_581867 = ref object of OpenApiRestCall_578364
proc url_DfareportingRemarketingListsGet_581869(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsGet_581868(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one remarketing list by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Remarketing list ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581870 = path.getOrDefault("profileId")
  valid_581870 = validateParameter(valid_581870, JString, required = true,
                                 default = nil)
  if valid_581870 != nil:
    section.add "profileId", valid_581870
  var valid_581871 = path.getOrDefault("id")
  valid_581871 = validateParameter(valid_581871, JString, required = true,
                                 default = nil)
  if valid_581871 != nil:
    section.add "id", valid_581871
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581872 = query.getOrDefault("key")
  valid_581872 = validateParameter(valid_581872, JString, required = false,
                                 default = nil)
  if valid_581872 != nil:
    section.add "key", valid_581872
  var valid_581873 = query.getOrDefault("prettyPrint")
  valid_581873 = validateParameter(valid_581873, JBool, required = false,
                                 default = newJBool(true))
  if valid_581873 != nil:
    section.add "prettyPrint", valid_581873
  var valid_581874 = query.getOrDefault("oauth_token")
  valid_581874 = validateParameter(valid_581874, JString, required = false,
                                 default = nil)
  if valid_581874 != nil:
    section.add "oauth_token", valid_581874
  var valid_581875 = query.getOrDefault("alt")
  valid_581875 = validateParameter(valid_581875, JString, required = false,
                                 default = newJString("json"))
  if valid_581875 != nil:
    section.add "alt", valid_581875
  var valid_581876 = query.getOrDefault("userIp")
  valid_581876 = validateParameter(valid_581876, JString, required = false,
                                 default = nil)
  if valid_581876 != nil:
    section.add "userIp", valid_581876
  var valid_581877 = query.getOrDefault("quotaUser")
  valid_581877 = validateParameter(valid_581877, JString, required = false,
                                 default = nil)
  if valid_581877 != nil:
    section.add "quotaUser", valid_581877
  var valid_581878 = query.getOrDefault("fields")
  valid_581878 = validateParameter(valid_581878, JString, required = false,
                                 default = nil)
  if valid_581878 != nil:
    section.add "fields", valid_581878
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581879: Call_DfareportingRemarketingListsGet_581867;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one remarketing list by ID.
  ## 
  let valid = call_581879.validator(path, query, header, formData, body)
  let scheme = call_581879.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581879.url(scheme.get, call_581879.host, call_581879.base,
                         call_581879.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581879, url, valid)

proc call*(call_581880: Call_DfareportingRemarketingListsGet_581867;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingRemarketingListsGet
  ## Gets one remarketing list by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Remarketing list ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581881 = newJObject()
  var query_581882 = newJObject()
  add(query_581882, "key", newJString(key))
  add(query_581882, "prettyPrint", newJBool(prettyPrint))
  add(query_581882, "oauth_token", newJString(oauthToken))
  add(path_581881, "profileId", newJString(profileId))
  add(path_581881, "id", newJString(id))
  add(query_581882, "alt", newJString(alt))
  add(query_581882, "userIp", newJString(userIp))
  add(query_581882, "quotaUser", newJString(quotaUser))
  add(query_581882, "fields", newJString(fields))
  result = call_581880.call(path_581881, query_581882, nil, nil, nil)

var dfareportingRemarketingListsGet* = Call_DfareportingRemarketingListsGet_581867(
    name: "dfareportingRemarketingListsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists/{id}",
    validator: validate_DfareportingRemarketingListsGet_581868,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListsGet_581869,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsInsert_581903 = ref object of OpenApiRestCall_578364
proc url_DfareportingReportsInsert_581905(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsInsert_581904(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a report.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581906 = path.getOrDefault("profileId")
  valid_581906 = validateParameter(valid_581906, JString, required = true,
                                 default = nil)
  if valid_581906 != nil:
    section.add "profileId", valid_581906
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581907 = query.getOrDefault("key")
  valid_581907 = validateParameter(valid_581907, JString, required = false,
                                 default = nil)
  if valid_581907 != nil:
    section.add "key", valid_581907
  var valid_581908 = query.getOrDefault("prettyPrint")
  valid_581908 = validateParameter(valid_581908, JBool, required = false,
                                 default = newJBool(true))
  if valid_581908 != nil:
    section.add "prettyPrint", valid_581908
  var valid_581909 = query.getOrDefault("oauth_token")
  valid_581909 = validateParameter(valid_581909, JString, required = false,
                                 default = nil)
  if valid_581909 != nil:
    section.add "oauth_token", valid_581909
  var valid_581910 = query.getOrDefault("alt")
  valid_581910 = validateParameter(valid_581910, JString, required = false,
                                 default = newJString("json"))
  if valid_581910 != nil:
    section.add "alt", valid_581910
  var valid_581911 = query.getOrDefault("userIp")
  valid_581911 = validateParameter(valid_581911, JString, required = false,
                                 default = nil)
  if valid_581911 != nil:
    section.add "userIp", valid_581911
  var valid_581912 = query.getOrDefault("quotaUser")
  valid_581912 = validateParameter(valid_581912, JString, required = false,
                                 default = nil)
  if valid_581912 != nil:
    section.add "quotaUser", valid_581912
  var valid_581913 = query.getOrDefault("fields")
  valid_581913 = validateParameter(valid_581913, JString, required = false,
                                 default = nil)
  if valid_581913 != nil:
    section.add "fields", valid_581913
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581915: Call_DfareportingReportsInsert_581903; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a report.
  ## 
  let valid = call_581915.validator(path, query, header, formData, body)
  let scheme = call_581915.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581915.url(scheme.get, call_581915.host, call_581915.base,
                         call_581915.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581915, url, valid)

proc call*(call_581916: Call_DfareportingReportsInsert_581903; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingReportsInsert
  ## Creates a report.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581917 = newJObject()
  var query_581918 = newJObject()
  var body_581919 = newJObject()
  add(query_581918, "key", newJString(key))
  add(query_581918, "prettyPrint", newJBool(prettyPrint))
  add(query_581918, "oauth_token", newJString(oauthToken))
  add(path_581917, "profileId", newJString(profileId))
  add(query_581918, "alt", newJString(alt))
  add(query_581918, "userIp", newJString(userIp))
  add(query_581918, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581919 = body
  add(query_581918, "fields", newJString(fields))
  result = call_581916.call(path_581917, query_581918, nil, nil, body_581919)

var dfareportingReportsInsert* = Call_DfareportingReportsInsert_581903(
    name: "dfareportingReportsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/reports",
    validator: validate_DfareportingReportsInsert_581904,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsInsert_581905,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsList_581883 = ref object of OpenApiRestCall_578364
proc url_DfareportingReportsList_581885(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsList_581884(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves list of reports.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581886 = path.getOrDefault("profileId")
  valid_581886 = validateParameter(valid_581886, JString, required = true,
                                 default = nil)
  if valid_581886 != nil:
    section.add "profileId", valid_581886
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   scope: JString
  ##        : The scope that defines which results are returned.
  ##   sortField: JString
  ##            : The field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : The value of the nextToken from the previous result page.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_581887 = query.getOrDefault("key")
  valid_581887 = validateParameter(valid_581887, JString, required = false,
                                 default = nil)
  if valid_581887 != nil:
    section.add "key", valid_581887
  var valid_581888 = query.getOrDefault("prettyPrint")
  valid_581888 = validateParameter(valid_581888, JBool, required = false,
                                 default = newJBool(true))
  if valid_581888 != nil:
    section.add "prettyPrint", valid_581888
  var valid_581889 = query.getOrDefault("oauth_token")
  valid_581889 = validateParameter(valid_581889, JString, required = false,
                                 default = nil)
  if valid_581889 != nil:
    section.add "oauth_token", valid_581889
  var valid_581890 = query.getOrDefault("scope")
  valid_581890 = validateParameter(valid_581890, JString, required = false,
                                 default = newJString("MINE"))
  if valid_581890 != nil:
    section.add "scope", valid_581890
  var valid_581891 = query.getOrDefault("sortField")
  valid_581891 = validateParameter(valid_581891, JString, required = false,
                                 default = newJString("LAST_MODIFIED_TIME"))
  if valid_581891 != nil:
    section.add "sortField", valid_581891
  var valid_581892 = query.getOrDefault("alt")
  valid_581892 = validateParameter(valid_581892, JString, required = false,
                                 default = newJString("json"))
  if valid_581892 != nil:
    section.add "alt", valid_581892
  var valid_581893 = query.getOrDefault("userIp")
  valid_581893 = validateParameter(valid_581893, JString, required = false,
                                 default = nil)
  if valid_581893 != nil:
    section.add "userIp", valid_581893
  var valid_581894 = query.getOrDefault("quotaUser")
  valid_581894 = validateParameter(valid_581894, JString, required = false,
                                 default = nil)
  if valid_581894 != nil:
    section.add "quotaUser", valid_581894
  var valid_581895 = query.getOrDefault("pageToken")
  valid_581895 = validateParameter(valid_581895, JString, required = false,
                                 default = nil)
  if valid_581895 != nil:
    section.add "pageToken", valid_581895
  var valid_581896 = query.getOrDefault("sortOrder")
  valid_581896 = validateParameter(valid_581896, JString, required = false,
                                 default = newJString("DESCENDING"))
  if valid_581896 != nil:
    section.add "sortOrder", valid_581896
  var valid_581897 = query.getOrDefault("fields")
  valid_581897 = validateParameter(valid_581897, JString, required = false,
                                 default = nil)
  if valid_581897 != nil:
    section.add "fields", valid_581897
  var valid_581898 = query.getOrDefault("maxResults")
  valid_581898 = validateParameter(valid_581898, JInt, required = false,
                                 default = newJInt(10))
  if valid_581898 != nil:
    section.add "maxResults", valid_581898
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581899: Call_DfareportingReportsList_581883; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves list of reports.
  ## 
  let valid = call_581899.validator(path, query, header, formData, body)
  let scheme = call_581899.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581899.url(scheme.get, call_581899.host, call_581899.base,
                         call_581899.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581899, url, valid)

proc call*(call_581900: Call_DfareportingReportsList_581883; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          scope: string = "MINE"; sortField: string = "LAST_MODIFIED_TIME";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          pageToken: string = ""; sortOrder: string = "DESCENDING"; fields: string = "";
          maxResults: int = 10): Recallable =
  ## dfareportingReportsList
  ## Retrieves list of reports.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   scope: string
  ##        : The scope that defines which results are returned.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   sortField: string
  ##            : The field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : The value of the nextToken from the previous result page.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_581901 = newJObject()
  var query_581902 = newJObject()
  add(query_581902, "key", newJString(key))
  add(query_581902, "prettyPrint", newJBool(prettyPrint))
  add(query_581902, "oauth_token", newJString(oauthToken))
  add(query_581902, "scope", newJString(scope))
  add(path_581901, "profileId", newJString(profileId))
  add(query_581902, "sortField", newJString(sortField))
  add(query_581902, "alt", newJString(alt))
  add(query_581902, "userIp", newJString(userIp))
  add(query_581902, "quotaUser", newJString(quotaUser))
  add(query_581902, "pageToken", newJString(pageToken))
  add(query_581902, "sortOrder", newJString(sortOrder))
  add(query_581902, "fields", newJString(fields))
  add(query_581902, "maxResults", newJInt(maxResults))
  result = call_581900.call(path_581901, query_581902, nil, nil, nil)

var dfareportingReportsList* = Call_DfareportingReportsList_581883(
    name: "dfareportingReportsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/reports",
    validator: validate_DfareportingReportsList_581884,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsList_581885,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsCompatibleFieldsQuery_581920 = ref object of OpenApiRestCall_578364
proc url_DfareportingReportsCompatibleFieldsQuery_581922(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"), (kind: ConstantSegment,
        value: "/reports/compatiblefields/query")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsCompatibleFieldsQuery_581921(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581923 = path.getOrDefault("profileId")
  valid_581923 = validateParameter(valid_581923, JString, required = true,
                                 default = nil)
  if valid_581923 != nil:
    section.add "profileId", valid_581923
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581924 = query.getOrDefault("key")
  valid_581924 = validateParameter(valid_581924, JString, required = false,
                                 default = nil)
  if valid_581924 != nil:
    section.add "key", valid_581924
  var valid_581925 = query.getOrDefault("prettyPrint")
  valid_581925 = validateParameter(valid_581925, JBool, required = false,
                                 default = newJBool(true))
  if valid_581925 != nil:
    section.add "prettyPrint", valid_581925
  var valid_581926 = query.getOrDefault("oauth_token")
  valid_581926 = validateParameter(valid_581926, JString, required = false,
                                 default = nil)
  if valid_581926 != nil:
    section.add "oauth_token", valid_581926
  var valid_581927 = query.getOrDefault("alt")
  valid_581927 = validateParameter(valid_581927, JString, required = false,
                                 default = newJString("json"))
  if valid_581927 != nil:
    section.add "alt", valid_581927
  var valid_581928 = query.getOrDefault("userIp")
  valid_581928 = validateParameter(valid_581928, JString, required = false,
                                 default = nil)
  if valid_581928 != nil:
    section.add "userIp", valid_581928
  var valid_581929 = query.getOrDefault("quotaUser")
  valid_581929 = validateParameter(valid_581929, JString, required = false,
                                 default = nil)
  if valid_581929 != nil:
    section.add "quotaUser", valid_581929
  var valid_581930 = query.getOrDefault("fields")
  valid_581930 = validateParameter(valid_581930, JString, required = false,
                                 default = nil)
  if valid_581930 != nil:
    section.add "fields", valid_581930
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581932: Call_DfareportingReportsCompatibleFieldsQuery_581920;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.
  ## 
  let valid = call_581932.validator(path, query, header, formData, body)
  let scheme = call_581932.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581932.url(scheme.get, call_581932.host, call_581932.base,
                         call_581932.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581932, url, valid)

proc call*(call_581933: Call_DfareportingReportsCompatibleFieldsQuery_581920;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingReportsCompatibleFieldsQuery
  ## Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581934 = newJObject()
  var query_581935 = newJObject()
  var body_581936 = newJObject()
  add(query_581935, "key", newJString(key))
  add(query_581935, "prettyPrint", newJBool(prettyPrint))
  add(query_581935, "oauth_token", newJString(oauthToken))
  add(path_581934, "profileId", newJString(profileId))
  add(query_581935, "alt", newJString(alt))
  add(query_581935, "userIp", newJString(userIp))
  add(query_581935, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_581936 = body
  add(query_581935, "fields", newJString(fields))
  result = call_581933.call(path_581934, query_581935, nil, nil, body_581936)

var dfareportingReportsCompatibleFieldsQuery* = Call_DfareportingReportsCompatibleFieldsQuery_581920(
    name: "dfareportingReportsCompatibleFieldsQuery", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/compatiblefields/query",
    validator: validate_DfareportingReportsCompatibleFieldsQuery_581921,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsCompatibleFieldsQuery_581922,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsUpdate_581953 = ref object of OpenApiRestCall_578364
proc url_DfareportingReportsUpdate_581955(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsUpdate_581954(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a report.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581956 = path.getOrDefault("profileId")
  valid_581956 = validateParameter(valid_581956, JString, required = true,
                                 default = nil)
  if valid_581956 != nil:
    section.add "profileId", valid_581956
  var valid_581957 = path.getOrDefault("reportId")
  valid_581957 = validateParameter(valid_581957, JString, required = true,
                                 default = nil)
  if valid_581957 != nil:
    section.add "reportId", valid_581957
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581958 = query.getOrDefault("key")
  valid_581958 = validateParameter(valid_581958, JString, required = false,
                                 default = nil)
  if valid_581958 != nil:
    section.add "key", valid_581958
  var valid_581959 = query.getOrDefault("prettyPrint")
  valid_581959 = validateParameter(valid_581959, JBool, required = false,
                                 default = newJBool(true))
  if valid_581959 != nil:
    section.add "prettyPrint", valid_581959
  var valid_581960 = query.getOrDefault("oauth_token")
  valid_581960 = validateParameter(valid_581960, JString, required = false,
                                 default = nil)
  if valid_581960 != nil:
    section.add "oauth_token", valid_581960
  var valid_581961 = query.getOrDefault("alt")
  valid_581961 = validateParameter(valid_581961, JString, required = false,
                                 default = newJString("json"))
  if valid_581961 != nil:
    section.add "alt", valid_581961
  var valid_581962 = query.getOrDefault("userIp")
  valid_581962 = validateParameter(valid_581962, JString, required = false,
                                 default = nil)
  if valid_581962 != nil:
    section.add "userIp", valid_581962
  var valid_581963 = query.getOrDefault("quotaUser")
  valid_581963 = validateParameter(valid_581963, JString, required = false,
                                 default = nil)
  if valid_581963 != nil:
    section.add "quotaUser", valid_581963
  var valid_581964 = query.getOrDefault("fields")
  valid_581964 = validateParameter(valid_581964, JString, required = false,
                                 default = nil)
  if valid_581964 != nil:
    section.add "fields", valid_581964
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_581966: Call_DfareportingReportsUpdate_581953; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a report.
  ## 
  let valid = call_581966.validator(path, query, header, formData, body)
  let scheme = call_581966.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581966.url(scheme.get, call_581966.host, call_581966.base,
                         call_581966.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581966, url, valid)

proc call*(call_581967: Call_DfareportingReportsUpdate_581953; profileId: string;
          reportId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingReportsUpdate
  ## Updates a report.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581968 = newJObject()
  var query_581969 = newJObject()
  var body_581970 = newJObject()
  add(query_581969, "key", newJString(key))
  add(query_581969, "prettyPrint", newJBool(prettyPrint))
  add(query_581969, "oauth_token", newJString(oauthToken))
  add(path_581968, "profileId", newJString(profileId))
  add(query_581969, "alt", newJString(alt))
  add(query_581969, "userIp", newJString(userIp))
  add(query_581969, "quotaUser", newJString(quotaUser))
  add(path_581968, "reportId", newJString(reportId))
  if body != nil:
    body_581970 = body
  add(query_581969, "fields", newJString(fields))
  result = call_581967.call(path_581968, query_581969, nil, nil, body_581970)

var dfareportingReportsUpdate* = Call_DfareportingReportsUpdate_581953(
    name: "dfareportingReportsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}",
    validator: validate_DfareportingReportsUpdate_581954,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsUpdate_581955,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsGet_581937 = ref object of OpenApiRestCall_578364
proc url_DfareportingReportsGet_581939(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsGet_581938(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a report by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581940 = path.getOrDefault("profileId")
  valid_581940 = validateParameter(valid_581940, JString, required = true,
                                 default = nil)
  if valid_581940 != nil:
    section.add "profileId", valid_581940
  var valid_581941 = path.getOrDefault("reportId")
  valid_581941 = validateParameter(valid_581941, JString, required = true,
                                 default = nil)
  if valid_581941 != nil:
    section.add "reportId", valid_581941
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581942 = query.getOrDefault("key")
  valid_581942 = validateParameter(valid_581942, JString, required = false,
                                 default = nil)
  if valid_581942 != nil:
    section.add "key", valid_581942
  var valid_581943 = query.getOrDefault("prettyPrint")
  valid_581943 = validateParameter(valid_581943, JBool, required = false,
                                 default = newJBool(true))
  if valid_581943 != nil:
    section.add "prettyPrint", valid_581943
  var valid_581944 = query.getOrDefault("oauth_token")
  valid_581944 = validateParameter(valid_581944, JString, required = false,
                                 default = nil)
  if valid_581944 != nil:
    section.add "oauth_token", valid_581944
  var valid_581945 = query.getOrDefault("alt")
  valid_581945 = validateParameter(valid_581945, JString, required = false,
                                 default = newJString("json"))
  if valid_581945 != nil:
    section.add "alt", valid_581945
  var valid_581946 = query.getOrDefault("userIp")
  valid_581946 = validateParameter(valid_581946, JString, required = false,
                                 default = nil)
  if valid_581946 != nil:
    section.add "userIp", valid_581946
  var valid_581947 = query.getOrDefault("quotaUser")
  valid_581947 = validateParameter(valid_581947, JString, required = false,
                                 default = nil)
  if valid_581947 != nil:
    section.add "quotaUser", valid_581947
  var valid_581948 = query.getOrDefault("fields")
  valid_581948 = validateParameter(valid_581948, JString, required = false,
                                 default = nil)
  if valid_581948 != nil:
    section.add "fields", valid_581948
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581949: Call_DfareportingReportsGet_581937; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a report by its ID.
  ## 
  let valid = call_581949.validator(path, query, header, formData, body)
  let scheme = call_581949.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581949.url(scheme.get, call_581949.host, call_581949.base,
                         call_581949.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581949, url, valid)

proc call*(call_581950: Call_DfareportingReportsGet_581937; profileId: string;
          reportId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingReportsGet
  ## Retrieves a report by its ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581951 = newJObject()
  var query_581952 = newJObject()
  add(query_581952, "key", newJString(key))
  add(query_581952, "prettyPrint", newJBool(prettyPrint))
  add(query_581952, "oauth_token", newJString(oauthToken))
  add(path_581951, "profileId", newJString(profileId))
  add(query_581952, "alt", newJString(alt))
  add(query_581952, "userIp", newJString(userIp))
  add(query_581952, "quotaUser", newJString(quotaUser))
  add(path_581951, "reportId", newJString(reportId))
  add(query_581952, "fields", newJString(fields))
  result = call_581950.call(path_581951, query_581952, nil, nil, nil)

var dfareportingReportsGet* = Call_DfareportingReportsGet_581937(
    name: "dfareportingReportsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}",
    validator: validate_DfareportingReportsGet_581938, base: "/dfareporting/v3.2",
    url: url_DfareportingReportsGet_581939, schemes: {Scheme.Https})
type
  Call_DfareportingReportsPatch_581987 = ref object of OpenApiRestCall_578364
proc url_DfareportingReportsPatch_581989(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsPatch_581988(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a report. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581990 = path.getOrDefault("profileId")
  valid_581990 = validateParameter(valid_581990, JString, required = true,
                                 default = nil)
  if valid_581990 != nil:
    section.add "profileId", valid_581990
  var valid_581991 = path.getOrDefault("reportId")
  valid_581991 = validateParameter(valid_581991, JString, required = true,
                                 default = nil)
  if valid_581991 != nil:
    section.add "reportId", valid_581991
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581992 = query.getOrDefault("key")
  valid_581992 = validateParameter(valid_581992, JString, required = false,
                                 default = nil)
  if valid_581992 != nil:
    section.add "key", valid_581992
  var valid_581993 = query.getOrDefault("prettyPrint")
  valid_581993 = validateParameter(valid_581993, JBool, required = false,
                                 default = newJBool(true))
  if valid_581993 != nil:
    section.add "prettyPrint", valid_581993
  var valid_581994 = query.getOrDefault("oauth_token")
  valid_581994 = validateParameter(valid_581994, JString, required = false,
                                 default = nil)
  if valid_581994 != nil:
    section.add "oauth_token", valid_581994
  var valid_581995 = query.getOrDefault("alt")
  valid_581995 = validateParameter(valid_581995, JString, required = false,
                                 default = newJString("json"))
  if valid_581995 != nil:
    section.add "alt", valid_581995
  var valid_581996 = query.getOrDefault("userIp")
  valid_581996 = validateParameter(valid_581996, JString, required = false,
                                 default = nil)
  if valid_581996 != nil:
    section.add "userIp", valid_581996
  var valid_581997 = query.getOrDefault("quotaUser")
  valid_581997 = validateParameter(valid_581997, JString, required = false,
                                 default = nil)
  if valid_581997 != nil:
    section.add "quotaUser", valid_581997
  var valid_581998 = query.getOrDefault("fields")
  valid_581998 = validateParameter(valid_581998, JString, required = false,
                                 default = nil)
  if valid_581998 != nil:
    section.add "fields", valid_581998
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582000: Call_DfareportingReportsPatch_581987; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a report. This method supports patch semantics.
  ## 
  let valid = call_582000.validator(path, query, header, formData, body)
  let scheme = call_582000.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582000.url(scheme.get, call_582000.host, call_582000.base,
                         call_582000.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582000, url, valid)

proc call*(call_582001: Call_DfareportingReportsPatch_581987; profileId: string;
          reportId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingReportsPatch
  ## Updates a report. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582002 = newJObject()
  var query_582003 = newJObject()
  var body_582004 = newJObject()
  add(query_582003, "key", newJString(key))
  add(query_582003, "prettyPrint", newJBool(prettyPrint))
  add(query_582003, "oauth_token", newJString(oauthToken))
  add(path_582002, "profileId", newJString(profileId))
  add(query_582003, "alt", newJString(alt))
  add(query_582003, "userIp", newJString(userIp))
  add(query_582003, "quotaUser", newJString(quotaUser))
  add(path_582002, "reportId", newJString(reportId))
  if body != nil:
    body_582004 = body
  add(query_582003, "fields", newJString(fields))
  result = call_582001.call(path_582002, query_582003, nil, nil, body_582004)

var dfareportingReportsPatch* = Call_DfareportingReportsPatch_581987(
    name: "dfareportingReportsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}",
    validator: validate_DfareportingReportsPatch_581988,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsPatch_581989,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsDelete_581971 = ref object of OpenApiRestCall_578364
proc url_DfareportingReportsDelete_581973(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsDelete_581972(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a report by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_581974 = path.getOrDefault("profileId")
  valid_581974 = validateParameter(valid_581974, JString, required = true,
                                 default = nil)
  if valid_581974 != nil:
    section.add "profileId", valid_581974
  var valid_581975 = path.getOrDefault("reportId")
  valid_581975 = validateParameter(valid_581975, JString, required = true,
                                 default = nil)
  if valid_581975 != nil:
    section.add "reportId", valid_581975
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_581976 = query.getOrDefault("key")
  valid_581976 = validateParameter(valid_581976, JString, required = false,
                                 default = nil)
  if valid_581976 != nil:
    section.add "key", valid_581976
  var valid_581977 = query.getOrDefault("prettyPrint")
  valid_581977 = validateParameter(valid_581977, JBool, required = false,
                                 default = newJBool(true))
  if valid_581977 != nil:
    section.add "prettyPrint", valid_581977
  var valid_581978 = query.getOrDefault("oauth_token")
  valid_581978 = validateParameter(valid_581978, JString, required = false,
                                 default = nil)
  if valid_581978 != nil:
    section.add "oauth_token", valid_581978
  var valid_581979 = query.getOrDefault("alt")
  valid_581979 = validateParameter(valid_581979, JString, required = false,
                                 default = newJString("json"))
  if valid_581979 != nil:
    section.add "alt", valid_581979
  var valid_581980 = query.getOrDefault("userIp")
  valid_581980 = validateParameter(valid_581980, JString, required = false,
                                 default = nil)
  if valid_581980 != nil:
    section.add "userIp", valid_581980
  var valid_581981 = query.getOrDefault("quotaUser")
  valid_581981 = validateParameter(valid_581981, JString, required = false,
                                 default = nil)
  if valid_581981 != nil:
    section.add "quotaUser", valid_581981
  var valid_581982 = query.getOrDefault("fields")
  valid_581982 = validateParameter(valid_581982, JString, required = false,
                                 default = nil)
  if valid_581982 != nil:
    section.add "fields", valid_581982
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_581983: Call_DfareportingReportsDelete_581971; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a report by its ID.
  ## 
  let valid = call_581983.validator(path, query, header, formData, body)
  let scheme = call_581983.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_581983.url(scheme.get, call_581983.host, call_581983.base,
                         call_581983.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_581983, url, valid)

proc call*(call_581984: Call_DfareportingReportsDelete_581971; profileId: string;
          reportId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingReportsDelete
  ## Deletes a report by its ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_581985 = newJObject()
  var query_581986 = newJObject()
  add(query_581986, "key", newJString(key))
  add(query_581986, "prettyPrint", newJBool(prettyPrint))
  add(query_581986, "oauth_token", newJString(oauthToken))
  add(path_581985, "profileId", newJString(profileId))
  add(query_581986, "alt", newJString(alt))
  add(query_581986, "userIp", newJString(userIp))
  add(query_581986, "quotaUser", newJString(quotaUser))
  add(path_581985, "reportId", newJString(reportId))
  add(query_581986, "fields", newJString(fields))
  result = call_581984.call(path_581985, query_581986, nil, nil, nil)

var dfareportingReportsDelete* = Call_DfareportingReportsDelete_581971(
    name: "dfareportingReportsDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}",
    validator: validate_DfareportingReportsDelete_581972,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsDelete_581973,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsFilesList_582005 = ref object of OpenApiRestCall_578364
proc url_DfareportingReportsFilesList_582007(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId"),
               (kind: ConstantSegment, value: "/files")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsFilesList_582006(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists files for a report.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the parent report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582008 = path.getOrDefault("profileId")
  valid_582008 = validateParameter(valid_582008, JString, required = true,
                                 default = nil)
  if valid_582008 != nil:
    section.add "profileId", valid_582008
  var valid_582009 = path.getOrDefault("reportId")
  valid_582009 = validateParameter(valid_582009, JString, required = true,
                                 default = nil)
  if valid_582009 != nil:
    section.add "reportId", valid_582009
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : The field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : The value of the nextToken from the previous result page.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_582010 = query.getOrDefault("key")
  valid_582010 = validateParameter(valid_582010, JString, required = false,
                                 default = nil)
  if valid_582010 != nil:
    section.add "key", valid_582010
  var valid_582011 = query.getOrDefault("prettyPrint")
  valid_582011 = validateParameter(valid_582011, JBool, required = false,
                                 default = newJBool(true))
  if valid_582011 != nil:
    section.add "prettyPrint", valid_582011
  var valid_582012 = query.getOrDefault("oauth_token")
  valid_582012 = validateParameter(valid_582012, JString, required = false,
                                 default = nil)
  if valid_582012 != nil:
    section.add "oauth_token", valid_582012
  var valid_582013 = query.getOrDefault("sortField")
  valid_582013 = validateParameter(valid_582013, JString, required = false,
                                 default = newJString("LAST_MODIFIED_TIME"))
  if valid_582013 != nil:
    section.add "sortField", valid_582013
  var valid_582014 = query.getOrDefault("alt")
  valid_582014 = validateParameter(valid_582014, JString, required = false,
                                 default = newJString("json"))
  if valid_582014 != nil:
    section.add "alt", valid_582014
  var valid_582015 = query.getOrDefault("userIp")
  valid_582015 = validateParameter(valid_582015, JString, required = false,
                                 default = nil)
  if valid_582015 != nil:
    section.add "userIp", valid_582015
  var valid_582016 = query.getOrDefault("quotaUser")
  valid_582016 = validateParameter(valid_582016, JString, required = false,
                                 default = nil)
  if valid_582016 != nil:
    section.add "quotaUser", valid_582016
  var valid_582017 = query.getOrDefault("pageToken")
  valid_582017 = validateParameter(valid_582017, JString, required = false,
                                 default = nil)
  if valid_582017 != nil:
    section.add "pageToken", valid_582017
  var valid_582018 = query.getOrDefault("sortOrder")
  valid_582018 = validateParameter(valid_582018, JString, required = false,
                                 default = newJString("DESCENDING"))
  if valid_582018 != nil:
    section.add "sortOrder", valid_582018
  var valid_582019 = query.getOrDefault("fields")
  valid_582019 = validateParameter(valid_582019, JString, required = false,
                                 default = nil)
  if valid_582019 != nil:
    section.add "fields", valid_582019
  var valid_582020 = query.getOrDefault("maxResults")
  valid_582020 = validateParameter(valid_582020, JInt, required = false,
                                 default = newJInt(10))
  if valid_582020 != nil:
    section.add "maxResults", valid_582020
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582021: Call_DfareportingReportsFilesList_582005; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists files for a report.
  ## 
  let valid = call_582021.validator(path, query, header, formData, body)
  let scheme = call_582021.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582021.url(scheme.get, call_582021.host, call_582021.base,
                         call_582021.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582021, url, valid)

proc call*(call_582022: Call_DfareportingReportsFilesList_582005;
          profileId: string; reportId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = "";
          sortField: string = "LAST_MODIFIED_TIME"; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; pageToken: string = "";
          sortOrder: string = "DESCENDING"; fields: string = ""; maxResults: int = 10): Recallable =
  ## dfareportingReportsFilesList
  ## Lists files for a report.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : The DFA profile ID.
  ##   sortField: string
  ##            : The field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : The value of the nextToken from the previous result page.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   reportId: string (required)
  ##           : The ID of the parent report.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_582023 = newJObject()
  var query_582024 = newJObject()
  add(query_582024, "key", newJString(key))
  add(query_582024, "prettyPrint", newJBool(prettyPrint))
  add(query_582024, "oauth_token", newJString(oauthToken))
  add(path_582023, "profileId", newJString(profileId))
  add(query_582024, "sortField", newJString(sortField))
  add(query_582024, "alt", newJString(alt))
  add(query_582024, "userIp", newJString(userIp))
  add(query_582024, "quotaUser", newJString(quotaUser))
  add(query_582024, "pageToken", newJString(pageToken))
  add(query_582024, "sortOrder", newJString(sortOrder))
  add(path_582023, "reportId", newJString(reportId))
  add(query_582024, "fields", newJString(fields))
  add(query_582024, "maxResults", newJInt(maxResults))
  result = call_582022.call(path_582023, query_582024, nil, nil, nil)

var dfareportingReportsFilesList* = Call_DfareportingReportsFilesList_582005(
    name: "dfareportingReportsFilesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}/files",
    validator: validate_DfareportingReportsFilesList_582006,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsFilesList_582007,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsFilesGet_582025 = ref object of OpenApiRestCall_578364
proc url_DfareportingReportsFilesGet_582027(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  assert "fileId" in path, "`fileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId"),
               (kind: ConstantSegment, value: "/files/"),
               (kind: VariableSegment, value: "fileId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsFilesGet_582026(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a report file. This method supports media download.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA profile ID.
  ##   fileId: JString (required)
  ##         : The ID of the report file.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582028 = path.getOrDefault("profileId")
  valid_582028 = validateParameter(valid_582028, JString, required = true,
                                 default = nil)
  if valid_582028 != nil:
    section.add "profileId", valid_582028
  var valid_582029 = path.getOrDefault("fileId")
  valid_582029 = validateParameter(valid_582029, JString, required = true,
                                 default = nil)
  if valid_582029 != nil:
    section.add "fileId", valid_582029
  var valid_582030 = path.getOrDefault("reportId")
  valid_582030 = validateParameter(valid_582030, JString, required = true,
                                 default = nil)
  if valid_582030 != nil:
    section.add "reportId", valid_582030
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582031 = query.getOrDefault("key")
  valid_582031 = validateParameter(valid_582031, JString, required = false,
                                 default = nil)
  if valid_582031 != nil:
    section.add "key", valid_582031
  var valid_582032 = query.getOrDefault("prettyPrint")
  valid_582032 = validateParameter(valid_582032, JBool, required = false,
                                 default = newJBool(true))
  if valid_582032 != nil:
    section.add "prettyPrint", valid_582032
  var valid_582033 = query.getOrDefault("oauth_token")
  valid_582033 = validateParameter(valid_582033, JString, required = false,
                                 default = nil)
  if valid_582033 != nil:
    section.add "oauth_token", valid_582033
  var valid_582034 = query.getOrDefault("alt")
  valid_582034 = validateParameter(valid_582034, JString, required = false,
                                 default = newJString("json"))
  if valid_582034 != nil:
    section.add "alt", valid_582034
  var valid_582035 = query.getOrDefault("userIp")
  valid_582035 = validateParameter(valid_582035, JString, required = false,
                                 default = nil)
  if valid_582035 != nil:
    section.add "userIp", valid_582035
  var valid_582036 = query.getOrDefault("quotaUser")
  valid_582036 = validateParameter(valid_582036, JString, required = false,
                                 default = nil)
  if valid_582036 != nil:
    section.add "quotaUser", valid_582036
  var valid_582037 = query.getOrDefault("fields")
  valid_582037 = validateParameter(valid_582037, JString, required = false,
                                 default = nil)
  if valid_582037 != nil:
    section.add "fields", valid_582037
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582038: Call_DfareportingReportsFilesGet_582025; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a report file. This method supports media download.
  ## 
  let valid = call_582038.validator(path, query, header, formData, body)
  let scheme = call_582038.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582038.url(scheme.get, call_582038.host, call_582038.base,
                         call_582038.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582038, url, valid)

proc call*(call_582039: Call_DfareportingReportsFilesGet_582025; profileId: string;
          fileId: string; reportId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingReportsFilesGet
  ## Retrieves a report file. This method supports media download.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : The DFA profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fileId: string (required)
  ##         : The ID of the report file.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582040 = newJObject()
  var query_582041 = newJObject()
  add(query_582041, "key", newJString(key))
  add(query_582041, "prettyPrint", newJBool(prettyPrint))
  add(query_582041, "oauth_token", newJString(oauthToken))
  add(path_582040, "profileId", newJString(profileId))
  add(query_582041, "alt", newJString(alt))
  add(query_582041, "userIp", newJString(userIp))
  add(query_582041, "quotaUser", newJString(quotaUser))
  add(path_582040, "fileId", newJString(fileId))
  add(path_582040, "reportId", newJString(reportId))
  add(query_582041, "fields", newJString(fields))
  result = call_582039.call(path_582040, query_582041, nil, nil, nil)

var dfareportingReportsFilesGet* = Call_DfareportingReportsFilesGet_582025(
    name: "dfareportingReportsFilesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}/files/{fileId}",
    validator: validate_DfareportingReportsFilesGet_582026,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsFilesGet_582027,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsRun_582042 = ref object of OpenApiRestCall_578364
proc url_DfareportingReportsRun_582044(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId"),
               (kind: ConstantSegment, value: "/run")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsRun_582043(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Runs a report.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582045 = path.getOrDefault("profileId")
  valid_582045 = validateParameter(valid_582045, JString, required = true,
                                 default = nil)
  if valid_582045 != nil:
    section.add "profileId", valid_582045
  var valid_582046 = path.getOrDefault("reportId")
  valid_582046 = validateParameter(valid_582046, JString, required = true,
                                 default = nil)
  if valid_582046 != nil:
    section.add "reportId", valid_582046
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   synchronous: JBool
  ##              : If set and true, tries to run the report synchronously.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582047 = query.getOrDefault("key")
  valid_582047 = validateParameter(valid_582047, JString, required = false,
                                 default = nil)
  if valid_582047 != nil:
    section.add "key", valid_582047
  var valid_582048 = query.getOrDefault("prettyPrint")
  valid_582048 = validateParameter(valid_582048, JBool, required = false,
                                 default = newJBool(true))
  if valid_582048 != nil:
    section.add "prettyPrint", valid_582048
  var valid_582049 = query.getOrDefault("oauth_token")
  valid_582049 = validateParameter(valid_582049, JString, required = false,
                                 default = nil)
  if valid_582049 != nil:
    section.add "oauth_token", valid_582049
  var valid_582050 = query.getOrDefault("synchronous")
  valid_582050 = validateParameter(valid_582050, JBool, required = false,
                                 default = newJBool(false))
  if valid_582050 != nil:
    section.add "synchronous", valid_582050
  var valid_582051 = query.getOrDefault("alt")
  valid_582051 = validateParameter(valid_582051, JString, required = false,
                                 default = newJString("json"))
  if valid_582051 != nil:
    section.add "alt", valid_582051
  var valid_582052 = query.getOrDefault("userIp")
  valid_582052 = validateParameter(valid_582052, JString, required = false,
                                 default = nil)
  if valid_582052 != nil:
    section.add "userIp", valid_582052
  var valid_582053 = query.getOrDefault("quotaUser")
  valid_582053 = validateParameter(valid_582053, JString, required = false,
                                 default = nil)
  if valid_582053 != nil:
    section.add "quotaUser", valid_582053
  var valid_582054 = query.getOrDefault("fields")
  valid_582054 = validateParameter(valid_582054, JString, required = false,
                                 default = nil)
  if valid_582054 != nil:
    section.add "fields", valid_582054
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582055: Call_DfareportingReportsRun_582042; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Runs a report.
  ## 
  let valid = call_582055.validator(path, query, header, formData, body)
  let scheme = call_582055.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582055.url(scheme.get, call_582055.host, call_582055.base,
                         call_582055.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582055, url, valid)

proc call*(call_582056: Call_DfareportingReportsRun_582042; profileId: string;
          reportId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; synchronous: bool = false; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingReportsRun
  ## Runs a report.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   synchronous: bool
  ##              : If set and true, tries to run the report synchronously.
  ##   profileId: string (required)
  ##            : The DFA profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582057 = newJObject()
  var query_582058 = newJObject()
  add(query_582058, "key", newJString(key))
  add(query_582058, "prettyPrint", newJBool(prettyPrint))
  add(query_582058, "oauth_token", newJString(oauthToken))
  add(query_582058, "synchronous", newJBool(synchronous))
  add(path_582057, "profileId", newJString(profileId))
  add(query_582058, "alt", newJString(alt))
  add(query_582058, "userIp", newJString(userIp))
  add(query_582058, "quotaUser", newJString(quotaUser))
  add(path_582057, "reportId", newJString(reportId))
  add(query_582058, "fields", newJString(fields))
  result = call_582056.call(path_582057, query_582058, nil, nil, nil)

var dfareportingReportsRun* = Call_DfareportingReportsRun_582042(
    name: "dfareportingReportsRun", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}/run",
    validator: validate_DfareportingReportsRun_582043, base: "/dfareporting/v3.2",
    url: url_DfareportingReportsRun_582044, schemes: {Scheme.Https})
type
  Call_DfareportingSitesUpdate_582089 = ref object of OpenApiRestCall_578364
proc url_DfareportingSitesUpdate_582091(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesUpdate_582090(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582092 = path.getOrDefault("profileId")
  valid_582092 = validateParameter(valid_582092, JString, required = true,
                                 default = nil)
  if valid_582092 != nil:
    section.add "profileId", valid_582092
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582093 = query.getOrDefault("key")
  valid_582093 = validateParameter(valid_582093, JString, required = false,
                                 default = nil)
  if valid_582093 != nil:
    section.add "key", valid_582093
  var valid_582094 = query.getOrDefault("prettyPrint")
  valid_582094 = validateParameter(valid_582094, JBool, required = false,
                                 default = newJBool(true))
  if valid_582094 != nil:
    section.add "prettyPrint", valid_582094
  var valid_582095 = query.getOrDefault("oauth_token")
  valid_582095 = validateParameter(valid_582095, JString, required = false,
                                 default = nil)
  if valid_582095 != nil:
    section.add "oauth_token", valid_582095
  var valid_582096 = query.getOrDefault("alt")
  valid_582096 = validateParameter(valid_582096, JString, required = false,
                                 default = newJString("json"))
  if valid_582096 != nil:
    section.add "alt", valid_582096
  var valid_582097 = query.getOrDefault("userIp")
  valid_582097 = validateParameter(valid_582097, JString, required = false,
                                 default = nil)
  if valid_582097 != nil:
    section.add "userIp", valid_582097
  var valid_582098 = query.getOrDefault("quotaUser")
  valid_582098 = validateParameter(valid_582098, JString, required = false,
                                 default = nil)
  if valid_582098 != nil:
    section.add "quotaUser", valid_582098
  var valid_582099 = query.getOrDefault("fields")
  valid_582099 = validateParameter(valid_582099, JString, required = false,
                                 default = nil)
  if valid_582099 != nil:
    section.add "fields", valid_582099
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582101: Call_DfareportingSitesUpdate_582089; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing site.
  ## 
  let valid = call_582101.validator(path, query, header, formData, body)
  let scheme = call_582101.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582101.url(scheme.get, call_582101.host, call_582101.base,
                         call_582101.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582101, url, valid)

proc call*(call_582102: Call_DfareportingSitesUpdate_582089; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingSitesUpdate
  ## Updates an existing site.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582103 = newJObject()
  var query_582104 = newJObject()
  var body_582105 = newJObject()
  add(query_582104, "key", newJString(key))
  add(query_582104, "prettyPrint", newJBool(prettyPrint))
  add(query_582104, "oauth_token", newJString(oauthToken))
  add(path_582103, "profileId", newJString(profileId))
  add(query_582104, "alt", newJString(alt))
  add(query_582104, "userIp", newJString(userIp))
  add(query_582104, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_582105 = body
  add(query_582104, "fields", newJString(fields))
  result = call_582102.call(path_582103, query_582104, nil, nil, body_582105)

var dfareportingSitesUpdate* = Call_DfareportingSitesUpdate_582089(
    name: "dfareportingSitesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites",
    validator: validate_DfareportingSitesUpdate_582090,
    base: "/dfareporting/v3.2", url: url_DfareportingSitesUpdate_582091,
    schemes: {Scheme.Https})
type
  Call_DfareportingSitesInsert_582106 = ref object of OpenApiRestCall_578364
proc url_DfareportingSitesInsert_582108(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesInsert_582107(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582109 = path.getOrDefault("profileId")
  valid_582109 = validateParameter(valid_582109, JString, required = true,
                                 default = nil)
  if valid_582109 != nil:
    section.add "profileId", valid_582109
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582110 = query.getOrDefault("key")
  valid_582110 = validateParameter(valid_582110, JString, required = false,
                                 default = nil)
  if valid_582110 != nil:
    section.add "key", valid_582110
  var valid_582111 = query.getOrDefault("prettyPrint")
  valid_582111 = validateParameter(valid_582111, JBool, required = false,
                                 default = newJBool(true))
  if valid_582111 != nil:
    section.add "prettyPrint", valid_582111
  var valid_582112 = query.getOrDefault("oauth_token")
  valid_582112 = validateParameter(valid_582112, JString, required = false,
                                 default = nil)
  if valid_582112 != nil:
    section.add "oauth_token", valid_582112
  var valid_582113 = query.getOrDefault("alt")
  valid_582113 = validateParameter(valid_582113, JString, required = false,
                                 default = newJString("json"))
  if valid_582113 != nil:
    section.add "alt", valid_582113
  var valid_582114 = query.getOrDefault("userIp")
  valid_582114 = validateParameter(valid_582114, JString, required = false,
                                 default = nil)
  if valid_582114 != nil:
    section.add "userIp", valid_582114
  var valid_582115 = query.getOrDefault("quotaUser")
  valid_582115 = validateParameter(valid_582115, JString, required = false,
                                 default = nil)
  if valid_582115 != nil:
    section.add "quotaUser", valid_582115
  var valid_582116 = query.getOrDefault("fields")
  valid_582116 = validateParameter(valid_582116, JString, required = false,
                                 default = nil)
  if valid_582116 != nil:
    section.add "fields", valid_582116
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582118: Call_DfareportingSitesInsert_582106; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new site.
  ## 
  let valid = call_582118.validator(path, query, header, formData, body)
  let scheme = call_582118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582118.url(scheme.get, call_582118.host, call_582118.base,
                         call_582118.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582118, url, valid)

proc call*(call_582119: Call_DfareportingSitesInsert_582106; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingSitesInsert
  ## Inserts a new site.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582120 = newJObject()
  var query_582121 = newJObject()
  var body_582122 = newJObject()
  add(query_582121, "key", newJString(key))
  add(query_582121, "prettyPrint", newJBool(prettyPrint))
  add(query_582121, "oauth_token", newJString(oauthToken))
  add(path_582120, "profileId", newJString(profileId))
  add(query_582121, "alt", newJString(alt))
  add(query_582121, "userIp", newJString(userIp))
  add(query_582121, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_582122 = body
  add(query_582121, "fields", newJString(fields))
  result = call_582119.call(path_582120, query_582121, nil, nil, body_582122)

var dfareportingSitesInsert* = Call_DfareportingSitesInsert_582106(
    name: "dfareportingSitesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites",
    validator: validate_DfareportingSitesInsert_582107,
    base: "/dfareporting/v3.2", url: url_DfareportingSitesInsert_582108,
    schemes: {Scheme.Https})
type
  Call_DfareportingSitesList_582059 = ref object of OpenApiRestCall_578364
proc url_DfareportingSitesList_582061(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesList_582060(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of sites, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582062 = path.getOrDefault("profileId")
  valid_582062 = validateParameter(valid_582062, JString, required = true,
                                 default = nil)
  if valid_582062 != nil:
    section.add "profileId", valid_582062
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   acceptsPublisherPaidPlacements: JBool
  ##                                 : Select only sites that accept publisher paid placements.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   approved: JBool
  ##           : Select only approved sites.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   acceptsInterstitialPlacements: JBool
  ##                                : This search filter is no longer supported and will have no effect on the results returned.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   directorySiteIds: JArray
  ##                   : Select only sites with these directory site IDs.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name, ID or keyName. Wildcards (*) are allowed. For example, "site*2015" will return objects with names like "site June 2015", "site April 2015", or simply "site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "site" will match objects with name "my site", "site 2015", or simply "site".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   subaccountId: JString
  ##               : Select only sites with this subaccount ID.
  ##   acceptsInStreamVideoPlacements: JBool
  ##                                 : This search filter is no longer supported and will have no effect on the results returned.
  ##   campaignIds: JArray
  ##              : Select only sites with these campaign IDs.
  ##   unmappedSite: JBool
  ##               : Select only sites that have not been mapped to a directory site.
  ##   adWordsSite: JBool
  ##              : Select only AdWords sites.
  ##   ids: JArray
  ##      : Select only sites with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_582063 = query.getOrDefault("key")
  valid_582063 = validateParameter(valid_582063, JString, required = false,
                                 default = nil)
  if valid_582063 != nil:
    section.add "key", valid_582063
  var valid_582064 = query.getOrDefault("acceptsPublisherPaidPlacements")
  valid_582064 = validateParameter(valid_582064, JBool, required = false, default = nil)
  if valid_582064 != nil:
    section.add "acceptsPublisherPaidPlacements", valid_582064
  var valid_582065 = query.getOrDefault("prettyPrint")
  valid_582065 = validateParameter(valid_582065, JBool, required = false,
                                 default = newJBool(true))
  if valid_582065 != nil:
    section.add "prettyPrint", valid_582065
  var valid_582066 = query.getOrDefault("oauth_token")
  valid_582066 = validateParameter(valid_582066, JString, required = false,
                                 default = nil)
  if valid_582066 != nil:
    section.add "oauth_token", valid_582066
  var valid_582067 = query.getOrDefault("approved")
  valid_582067 = validateParameter(valid_582067, JBool, required = false, default = nil)
  if valid_582067 != nil:
    section.add "approved", valid_582067
  var valid_582068 = query.getOrDefault("sortField")
  valid_582068 = validateParameter(valid_582068, JString, required = false,
                                 default = newJString("ID"))
  if valid_582068 != nil:
    section.add "sortField", valid_582068
  var valid_582069 = query.getOrDefault("alt")
  valid_582069 = validateParameter(valid_582069, JString, required = false,
                                 default = newJString("json"))
  if valid_582069 != nil:
    section.add "alt", valid_582069
  var valid_582070 = query.getOrDefault("userIp")
  valid_582070 = validateParameter(valid_582070, JString, required = false,
                                 default = nil)
  if valid_582070 != nil:
    section.add "userIp", valid_582070
  var valid_582071 = query.getOrDefault("acceptsInterstitialPlacements")
  valid_582071 = validateParameter(valid_582071, JBool, required = false, default = nil)
  if valid_582071 != nil:
    section.add "acceptsInterstitialPlacements", valid_582071
  var valid_582072 = query.getOrDefault("quotaUser")
  valid_582072 = validateParameter(valid_582072, JString, required = false,
                                 default = nil)
  if valid_582072 != nil:
    section.add "quotaUser", valid_582072
  var valid_582073 = query.getOrDefault("directorySiteIds")
  valid_582073 = validateParameter(valid_582073, JArray, required = false,
                                 default = nil)
  if valid_582073 != nil:
    section.add "directorySiteIds", valid_582073
  var valid_582074 = query.getOrDefault("pageToken")
  valid_582074 = validateParameter(valid_582074, JString, required = false,
                                 default = nil)
  if valid_582074 != nil:
    section.add "pageToken", valid_582074
  var valid_582075 = query.getOrDefault("searchString")
  valid_582075 = validateParameter(valid_582075, JString, required = false,
                                 default = nil)
  if valid_582075 != nil:
    section.add "searchString", valid_582075
  var valid_582076 = query.getOrDefault("sortOrder")
  valid_582076 = validateParameter(valid_582076, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_582076 != nil:
    section.add "sortOrder", valid_582076
  var valid_582077 = query.getOrDefault("subaccountId")
  valid_582077 = validateParameter(valid_582077, JString, required = false,
                                 default = nil)
  if valid_582077 != nil:
    section.add "subaccountId", valid_582077
  var valid_582078 = query.getOrDefault("acceptsInStreamVideoPlacements")
  valid_582078 = validateParameter(valid_582078, JBool, required = false, default = nil)
  if valid_582078 != nil:
    section.add "acceptsInStreamVideoPlacements", valid_582078
  var valid_582079 = query.getOrDefault("campaignIds")
  valid_582079 = validateParameter(valid_582079, JArray, required = false,
                                 default = nil)
  if valid_582079 != nil:
    section.add "campaignIds", valid_582079
  var valid_582080 = query.getOrDefault("unmappedSite")
  valid_582080 = validateParameter(valid_582080, JBool, required = false, default = nil)
  if valid_582080 != nil:
    section.add "unmappedSite", valid_582080
  var valid_582081 = query.getOrDefault("adWordsSite")
  valid_582081 = validateParameter(valid_582081, JBool, required = false, default = nil)
  if valid_582081 != nil:
    section.add "adWordsSite", valid_582081
  var valid_582082 = query.getOrDefault("ids")
  valid_582082 = validateParameter(valid_582082, JArray, required = false,
                                 default = nil)
  if valid_582082 != nil:
    section.add "ids", valid_582082
  var valid_582083 = query.getOrDefault("fields")
  valid_582083 = validateParameter(valid_582083, JString, required = false,
                                 default = nil)
  if valid_582083 != nil:
    section.add "fields", valid_582083
  var valid_582084 = query.getOrDefault("maxResults")
  valid_582084 = validateParameter(valid_582084, JInt, required = false,
                                 default = newJInt(1000))
  if valid_582084 != nil:
    section.add "maxResults", valid_582084
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582085: Call_DfareportingSitesList_582059; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of sites, possibly filtered. This method supports paging.
  ## 
  let valid = call_582085.validator(path, query, header, formData, body)
  let scheme = call_582085.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582085.url(scheme.get, call_582085.host, call_582085.base,
                         call_582085.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582085, url, valid)

proc call*(call_582086: Call_DfareportingSitesList_582059; profileId: string;
          key: string = ""; acceptsPublisherPaidPlacements: bool = false;
          prettyPrint: bool = true; oauthToken: string = ""; approved: bool = false;
          sortField: string = "ID"; alt: string = "json"; userIp: string = "";
          acceptsInterstitialPlacements: bool = false; quotaUser: string = "";
          directorySiteIds: JsonNode = nil; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          subaccountId: string = ""; acceptsInStreamVideoPlacements: bool = false;
          campaignIds: JsonNode = nil; unmappedSite: bool = false;
          adWordsSite: bool = false; ids: JsonNode = nil; fields: string = "";
          maxResults: int = 1000): Recallable =
  ## dfareportingSitesList
  ## Retrieves a list of sites, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   acceptsPublisherPaidPlacements: bool
  ##                                 : Select only sites that accept publisher paid placements.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   approved: bool
  ##           : Select only approved sites.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   acceptsInterstitialPlacements: bool
  ##                                : This search filter is no longer supported and will have no effect on the results returned.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   directorySiteIds: JArray
  ##                   : Select only sites with these directory site IDs.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name, ID or keyName. Wildcards (*) are allowed. For example, "site*2015" will return objects with names like "site June 2015", "site April 2015", or simply "site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "site" will match objects with name "my site", "site 2015", or simply "site".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   subaccountId: string
  ##               : Select only sites with this subaccount ID.
  ##   acceptsInStreamVideoPlacements: bool
  ##                                 : This search filter is no longer supported and will have no effect on the results returned.
  ##   campaignIds: JArray
  ##              : Select only sites with these campaign IDs.
  ##   unmappedSite: bool
  ##               : Select only sites that have not been mapped to a directory site.
  ##   adWordsSite: bool
  ##              : Select only AdWords sites.
  ##   ids: JArray
  ##      : Select only sites with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_582087 = newJObject()
  var query_582088 = newJObject()
  add(query_582088, "key", newJString(key))
  add(query_582088, "acceptsPublisherPaidPlacements",
      newJBool(acceptsPublisherPaidPlacements))
  add(query_582088, "prettyPrint", newJBool(prettyPrint))
  add(query_582088, "oauth_token", newJString(oauthToken))
  add(path_582087, "profileId", newJString(profileId))
  add(query_582088, "approved", newJBool(approved))
  add(query_582088, "sortField", newJString(sortField))
  add(query_582088, "alt", newJString(alt))
  add(query_582088, "userIp", newJString(userIp))
  add(query_582088, "acceptsInterstitialPlacements",
      newJBool(acceptsInterstitialPlacements))
  add(query_582088, "quotaUser", newJString(quotaUser))
  if directorySiteIds != nil:
    query_582088.add "directorySiteIds", directorySiteIds
  add(query_582088, "pageToken", newJString(pageToken))
  add(query_582088, "searchString", newJString(searchString))
  add(query_582088, "sortOrder", newJString(sortOrder))
  add(query_582088, "subaccountId", newJString(subaccountId))
  add(query_582088, "acceptsInStreamVideoPlacements",
      newJBool(acceptsInStreamVideoPlacements))
  if campaignIds != nil:
    query_582088.add "campaignIds", campaignIds
  add(query_582088, "unmappedSite", newJBool(unmappedSite))
  add(query_582088, "adWordsSite", newJBool(adWordsSite))
  if ids != nil:
    query_582088.add "ids", ids
  add(query_582088, "fields", newJString(fields))
  add(query_582088, "maxResults", newJInt(maxResults))
  result = call_582086.call(path_582087, query_582088, nil, nil, nil)

var dfareportingSitesList* = Call_DfareportingSitesList_582059(
    name: "dfareportingSitesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites",
    validator: validate_DfareportingSitesList_582060, base: "/dfareporting/v3.2",
    url: url_DfareportingSitesList_582061, schemes: {Scheme.Https})
type
  Call_DfareportingSitesPatch_582123 = ref object of OpenApiRestCall_578364
proc url_DfareportingSitesPatch_582125(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesPatch_582124(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing site. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582126 = path.getOrDefault("profileId")
  valid_582126 = validateParameter(valid_582126, JString, required = true,
                                 default = nil)
  if valid_582126 != nil:
    section.add "profileId", valid_582126
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Site ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582127 = query.getOrDefault("key")
  valid_582127 = validateParameter(valid_582127, JString, required = false,
                                 default = nil)
  if valid_582127 != nil:
    section.add "key", valid_582127
  var valid_582128 = query.getOrDefault("prettyPrint")
  valid_582128 = validateParameter(valid_582128, JBool, required = false,
                                 default = newJBool(true))
  if valid_582128 != nil:
    section.add "prettyPrint", valid_582128
  var valid_582129 = query.getOrDefault("oauth_token")
  valid_582129 = validateParameter(valid_582129, JString, required = false,
                                 default = nil)
  if valid_582129 != nil:
    section.add "oauth_token", valid_582129
  var valid_582130 = query.getOrDefault("alt")
  valid_582130 = validateParameter(valid_582130, JString, required = false,
                                 default = newJString("json"))
  if valid_582130 != nil:
    section.add "alt", valid_582130
  var valid_582131 = query.getOrDefault("userIp")
  valid_582131 = validateParameter(valid_582131, JString, required = false,
                                 default = nil)
  if valid_582131 != nil:
    section.add "userIp", valid_582131
  var valid_582132 = query.getOrDefault("quotaUser")
  valid_582132 = validateParameter(valid_582132, JString, required = false,
                                 default = nil)
  if valid_582132 != nil:
    section.add "quotaUser", valid_582132
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_582133 = query.getOrDefault("id")
  valid_582133 = validateParameter(valid_582133, JString, required = true,
                                 default = nil)
  if valid_582133 != nil:
    section.add "id", valid_582133
  var valid_582134 = query.getOrDefault("fields")
  valid_582134 = validateParameter(valid_582134, JString, required = false,
                                 default = nil)
  if valid_582134 != nil:
    section.add "fields", valid_582134
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582136: Call_DfareportingSitesPatch_582123; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing site. This method supports patch semantics.
  ## 
  let valid = call_582136.validator(path, query, header, formData, body)
  let scheme = call_582136.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582136.url(scheme.get, call_582136.host, call_582136.base,
                         call_582136.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582136, url, valid)

proc call*(call_582137: Call_DfareportingSitesPatch_582123; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingSitesPatch
  ## Updates an existing site. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Site ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582138 = newJObject()
  var query_582139 = newJObject()
  var body_582140 = newJObject()
  add(query_582139, "key", newJString(key))
  add(query_582139, "prettyPrint", newJBool(prettyPrint))
  add(query_582139, "oauth_token", newJString(oauthToken))
  add(path_582138, "profileId", newJString(profileId))
  add(query_582139, "alt", newJString(alt))
  add(query_582139, "userIp", newJString(userIp))
  add(query_582139, "quotaUser", newJString(quotaUser))
  add(query_582139, "id", newJString(id))
  if body != nil:
    body_582140 = body
  add(query_582139, "fields", newJString(fields))
  result = call_582137.call(path_582138, query_582139, nil, nil, body_582140)

var dfareportingSitesPatch* = Call_DfareportingSitesPatch_582123(
    name: "dfareportingSitesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites",
    validator: validate_DfareportingSitesPatch_582124, base: "/dfareporting/v3.2",
    url: url_DfareportingSitesPatch_582125, schemes: {Scheme.Https})
type
  Call_DfareportingSitesGet_582141 = ref object of OpenApiRestCall_578364
proc url_DfareportingSitesGet_582143(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesGet_582142(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one site by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Site ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582144 = path.getOrDefault("profileId")
  valid_582144 = validateParameter(valid_582144, JString, required = true,
                                 default = nil)
  if valid_582144 != nil:
    section.add "profileId", valid_582144
  var valid_582145 = path.getOrDefault("id")
  valid_582145 = validateParameter(valid_582145, JString, required = true,
                                 default = nil)
  if valid_582145 != nil:
    section.add "id", valid_582145
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582146 = query.getOrDefault("key")
  valid_582146 = validateParameter(valid_582146, JString, required = false,
                                 default = nil)
  if valid_582146 != nil:
    section.add "key", valid_582146
  var valid_582147 = query.getOrDefault("prettyPrint")
  valid_582147 = validateParameter(valid_582147, JBool, required = false,
                                 default = newJBool(true))
  if valid_582147 != nil:
    section.add "prettyPrint", valid_582147
  var valid_582148 = query.getOrDefault("oauth_token")
  valid_582148 = validateParameter(valid_582148, JString, required = false,
                                 default = nil)
  if valid_582148 != nil:
    section.add "oauth_token", valid_582148
  var valid_582149 = query.getOrDefault("alt")
  valid_582149 = validateParameter(valid_582149, JString, required = false,
                                 default = newJString("json"))
  if valid_582149 != nil:
    section.add "alt", valid_582149
  var valid_582150 = query.getOrDefault("userIp")
  valid_582150 = validateParameter(valid_582150, JString, required = false,
                                 default = nil)
  if valid_582150 != nil:
    section.add "userIp", valid_582150
  var valid_582151 = query.getOrDefault("quotaUser")
  valid_582151 = validateParameter(valid_582151, JString, required = false,
                                 default = nil)
  if valid_582151 != nil:
    section.add "quotaUser", valid_582151
  var valid_582152 = query.getOrDefault("fields")
  valid_582152 = validateParameter(valid_582152, JString, required = false,
                                 default = nil)
  if valid_582152 != nil:
    section.add "fields", valid_582152
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582153: Call_DfareportingSitesGet_582141; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one site by ID.
  ## 
  let valid = call_582153.validator(path, query, header, formData, body)
  let scheme = call_582153.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582153.url(scheme.get, call_582153.host, call_582153.base,
                         call_582153.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582153, url, valid)

proc call*(call_582154: Call_DfareportingSitesGet_582141; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingSitesGet
  ## Gets one site by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Site ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582155 = newJObject()
  var query_582156 = newJObject()
  add(query_582156, "key", newJString(key))
  add(query_582156, "prettyPrint", newJBool(prettyPrint))
  add(query_582156, "oauth_token", newJString(oauthToken))
  add(path_582155, "profileId", newJString(profileId))
  add(path_582155, "id", newJString(id))
  add(query_582156, "alt", newJString(alt))
  add(query_582156, "userIp", newJString(userIp))
  add(query_582156, "quotaUser", newJString(quotaUser))
  add(query_582156, "fields", newJString(fields))
  result = call_582154.call(path_582155, query_582156, nil, nil, nil)

var dfareportingSitesGet* = Call_DfareportingSitesGet_582141(
    name: "dfareportingSitesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites/{id}",
    validator: validate_DfareportingSitesGet_582142, base: "/dfareporting/v3.2",
    url: url_DfareportingSitesGet_582143, schemes: {Scheme.Https})
type
  Call_DfareportingSizesInsert_582176 = ref object of OpenApiRestCall_578364
proc url_DfareportingSizesInsert_582178(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sizes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSizesInsert_582177(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new size.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582179 = path.getOrDefault("profileId")
  valid_582179 = validateParameter(valid_582179, JString, required = true,
                                 default = nil)
  if valid_582179 != nil:
    section.add "profileId", valid_582179
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582180 = query.getOrDefault("key")
  valid_582180 = validateParameter(valid_582180, JString, required = false,
                                 default = nil)
  if valid_582180 != nil:
    section.add "key", valid_582180
  var valid_582181 = query.getOrDefault("prettyPrint")
  valid_582181 = validateParameter(valid_582181, JBool, required = false,
                                 default = newJBool(true))
  if valid_582181 != nil:
    section.add "prettyPrint", valid_582181
  var valid_582182 = query.getOrDefault("oauth_token")
  valid_582182 = validateParameter(valid_582182, JString, required = false,
                                 default = nil)
  if valid_582182 != nil:
    section.add "oauth_token", valid_582182
  var valid_582183 = query.getOrDefault("alt")
  valid_582183 = validateParameter(valid_582183, JString, required = false,
                                 default = newJString("json"))
  if valid_582183 != nil:
    section.add "alt", valid_582183
  var valid_582184 = query.getOrDefault("userIp")
  valid_582184 = validateParameter(valid_582184, JString, required = false,
                                 default = nil)
  if valid_582184 != nil:
    section.add "userIp", valid_582184
  var valid_582185 = query.getOrDefault("quotaUser")
  valid_582185 = validateParameter(valid_582185, JString, required = false,
                                 default = nil)
  if valid_582185 != nil:
    section.add "quotaUser", valid_582185
  var valid_582186 = query.getOrDefault("fields")
  valid_582186 = validateParameter(valid_582186, JString, required = false,
                                 default = nil)
  if valid_582186 != nil:
    section.add "fields", valid_582186
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582188: Call_DfareportingSizesInsert_582176; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new size.
  ## 
  let valid = call_582188.validator(path, query, header, formData, body)
  let scheme = call_582188.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582188.url(scheme.get, call_582188.host, call_582188.base,
                         call_582188.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582188, url, valid)

proc call*(call_582189: Call_DfareportingSizesInsert_582176; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingSizesInsert
  ## Inserts a new size.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582190 = newJObject()
  var query_582191 = newJObject()
  var body_582192 = newJObject()
  add(query_582191, "key", newJString(key))
  add(query_582191, "prettyPrint", newJBool(prettyPrint))
  add(query_582191, "oauth_token", newJString(oauthToken))
  add(path_582190, "profileId", newJString(profileId))
  add(query_582191, "alt", newJString(alt))
  add(query_582191, "userIp", newJString(userIp))
  add(query_582191, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_582192 = body
  add(query_582191, "fields", newJString(fields))
  result = call_582189.call(path_582190, query_582191, nil, nil, body_582192)

var dfareportingSizesInsert* = Call_DfareportingSizesInsert_582176(
    name: "dfareportingSizesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sizes",
    validator: validate_DfareportingSizesInsert_582177,
    base: "/dfareporting/v3.2", url: url_DfareportingSizesInsert_582178,
    schemes: {Scheme.Https})
type
  Call_DfareportingSizesList_582157 = ref object of OpenApiRestCall_578364
proc url_DfareportingSizesList_582159(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sizes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSizesList_582158(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of sizes, possibly filtered. Retrieved sizes are globally unique and may include values not currently in use by your account. Due to this, the list of sizes returned by this method may differ from the list seen in the Trafficking UI.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582160 = path.getOrDefault("profileId")
  valid_582160 = validateParameter(valid_582160, JString, required = true,
                                 default = nil)
  if valid_582160 != nil:
    section.add "profileId", valid_582160
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   height: JInt
  ##         : Select only sizes with this height.
  ##   iabStandard: JBool
  ##              : Select only IAB standard sizes.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   width: JInt
  ##        : Select only sizes with this width.
  ##   ids: JArray
  ##      : Select only sizes with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582161 = query.getOrDefault("key")
  valid_582161 = validateParameter(valid_582161, JString, required = false,
                                 default = nil)
  if valid_582161 != nil:
    section.add "key", valid_582161
  var valid_582162 = query.getOrDefault("prettyPrint")
  valid_582162 = validateParameter(valid_582162, JBool, required = false,
                                 default = newJBool(true))
  if valid_582162 != nil:
    section.add "prettyPrint", valid_582162
  var valid_582163 = query.getOrDefault("oauth_token")
  valid_582163 = validateParameter(valid_582163, JString, required = false,
                                 default = nil)
  if valid_582163 != nil:
    section.add "oauth_token", valid_582163
  var valid_582164 = query.getOrDefault("height")
  valid_582164 = validateParameter(valid_582164, JInt, required = false, default = nil)
  if valid_582164 != nil:
    section.add "height", valid_582164
  var valid_582165 = query.getOrDefault("iabStandard")
  valid_582165 = validateParameter(valid_582165, JBool, required = false, default = nil)
  if valid_582165 != nil:
    section.add "iabStandard", valid_582165
  var valid_582166 = query.getOrDefault("alt")
  valid_582166 = validateParameter(valid_582166, JString, required = false,
                                 default = newJString("json"))
  if valid_582166 != nil:
    section.add "alt", valid_582166
  var valid_582167 = query.getOrDefault("userIp")
  valid_582167 = validateParameter(valid_582167, JString, required = false,
                                 default = nil)
  if valid_582167 != nil:
    section.add "userIp", valid_582167
  var valid_582168 = query.getOrDefault("quotaUser")
  valid_582168 = validateParameter(valid_582168, JString, required = false,
                                 default = nil)
  if valid_582168 != nil:
    section.add "quotaUser", valid_582168
  var valid_582169 = query.getOrDefault("width")
  valid_582169 = validateParameter(valid_582169, JInt, required = false, default = nil)
  if valid_582169 != nil:
    section.add "width", valid_582169
  var valid_582170 = query.getOrDefault("ids")
  valid_582170 = validateParameter(valid_582170, JArray, required = false,
                                 default = nil)
  if valid_582170 != nil:
    section.add "ids", valid_582170
  var valid_582171 = query.getOrDefault("fields")
  valid_582171 = validateParameter(valid_582171, JString, required = false,
                                 default = nil)
  if valid_582171 != nil:
    section.add "fields", valid_582171
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582172: Call_DfareportingSizesList_582157; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of sizes, possibly filtered. Retrieved sizes are globally unique and may include values not currently in use by your account. Due to this, the list of sizes returned by this method may differ from the list seen in the Trafficking UI.
  ## 
  let valid = call_582172.validator(path, query, header, formData, body)
  let scheme = call_582172.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582172.url(scheme.get, call_582172.host, call_582172.base,
                         call_582172.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582172, url, valid)

proc call*(call_582173: Call_DfareportingSizesList_582157; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          height: int = 0; iabStandard: bool = false; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; width: int = 0; ids: JsonNode = nil;
          fields: string = ""): Recallable =
  ## dfareportingSizesList
  ## Retrieves a list of sizes, possibly filtered. Retrieved sizes are globally unique and may include values not currently in use by your account. Due to this, the list of sizes returned by this method may differ from the list seen in the Trafficking UI.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   height: int
  ##         : Select only sizes with this height.
  ##   iabStandard: bool
  ##              : Select only IAB standard sizes.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   width: int
  ##        : Select only sizes with this width.
  ##   ids: JArray
  ##      : Select only sizes with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582174 = newJObject()
  var query_582175 = newJObject()
  add(query_582175, "key", newJString(key))
  add(query_582175, "prettyPrint", newJBool(prettyPrint))
  add(query_582175, "oauth_token", newJString(oauthToken))
  add(query_582175, "height", newJInt(height))
  add(query_582175, "iabStandard", newJBool(iabStandard))
  add(path_582174, "profileId", newJString(profileId))
  add(query_582175, "alt", newJString(alt))
  add(query_582175, "userIp", newJString(userIp))
  add(query_582175, "quotaUser", newJString(quotaUser))
  add(query_582175, "width", newJInt(width))
  if ids != nil:
    query_582175.add "ids", ids
  add(query_582175, "fields", newJString(fields))
  result = call_582173.call(path_582174, query_582175, nil, nil, nil)

var dfareportingSizesList* = Call_DfareportingSizesList_582157(
    name: "dfareportingSizesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sizes",
    validator: validate_DfareportingSizesList_582158, base: "/dfareporting/v3.2",
    url: url_DfareportingSizesList_582159, schemes: {Scheme.Https})
type
  Call_DfareportingSizesGet_582193 = ref object of OpenApiRestCall_578364
proc url_DfareportingSizesGet_582195(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sizes/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSizesGet_582194(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one size by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Size ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582196 = path.getOrDefault("profileId")
  valid_582196 = validateParameter(valid_582196, JString, required = true,
                                 default = nil)
  if valid_582196 != nil:
    section.add "profileId", valid_582196
  var valid_582197 = path.getOrDefault("id")
  valid_582197 = validateParameter(valid_582197, JString, required = true,
                                 default = nil)
  if valid_582197 != nil:
    section.add "id", valid_582197
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582198 = query.getOrDefault("key")
  valid_582198 = validateParameter(valid_582198, JString, required = false,
                                 default = nil)
  if valid_582198 != nil:
    section.add "key", valid_582198
  var valid_582199 = query.getOrDefault("prettyPrint")
  valid_582199 = validateParameter(valid_582199, JBool, required = false,
                                 default = newJBool(true))
  if valid_582199 != nil:
    section.add "prettyPrint", valid_582199
  var valid_582200 = query.getOrDefault("oauth_token")
  valid_582200 = validateParameter(valid_582200, JString, required = false,
                                 default = nil)
  if valid_582200 != nil:
    section.add "oauth_token", valid_582200
  var valid_582201 = query.getOrDefault("alt")
  valid_582201 = validateParameter(valid_582201, JString, required = false,
                                 default = newJString("json"))
  if valid_582201 != nil:
    section.add "alt", valid_582201
  var valid_582202 = query.getOrDefault("userIp")
  valid_582202 = validateParameter(valid_582202, JString, required = false,
                                 default = nil)
  if valid_582202 != nil:
    section.add "userIp", valid_582202
  var valid_582203 = query.getOrDefault("quotaUser")
  valid_582203 = validateParameter(valid_582203, JString, required = false,
                                 default = nil)
  if valid_582203 != nil:
    section.add "quotaUser", valid_582203
  var valid_582204 = query.getOrDefault("fields")
  valid_582204 = validateParameter(valid_582204, JString, required = false,
                                 default = nil)
  if valid_582204 != nil:
    section.add "fields", valid_582204
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582205: Call_DfareportingSizesGet_582193; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one size by ID.
  ## 
  let valid = call_582205.validator(path, query, header, formData, body)
  let scheme = call_582205.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582205.url(scheme.get, call_582205.host, call_582205.base,
                         call_582205.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582205, url, valid)

proc call*(call_582206: Call_DfareportingSizesGet_582193; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingSizesGet
  ## Gets one size by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Size ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582207 = newJObject()
  var query_582208 = newJObject()
  add(query_582208, "key", newJString(key))
  add(query_582208, "prettyPrint", newJBool(prettyPrint))
  add(query_582208, "oauth_token", newJString(oauthToken))
  add(path_582207, "profileId", newJString(profileId))
  add(path_582207, "id", newJString(id))
  add(query_582208, "alt", newJString(alt))
  add(query_582208, "userIp", newJString(userIp))
  add(query_582208, "quotaUser", newJString(quotaUser))
  add(query_582208, "fields", newJString(fields))
  result = call_582206.call(path_582207, query_582208, nil, nil, nil)

var dfareportingSizesGet* = Call_DfareportingSizesGet_582193(
    name: "dfareportingSizesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sizes/{id}",
    validator: validate_DfareportingSizesGet_582194, base: "/dfareporting/v3.2",
    url: url_DfareportingSizesGet_582195, schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsUpdate_582230 = ref object of OpenApiRestCall_578364
proc url_DfareportingSubaccountsUpdate_582232(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsUpdate_582231(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing subaccount.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582233 = path.getOrDefault("profileId")
  valid_582233 = validateParameter(valid_582233, JString, required = true,
                                 default = nil)
  if valid_582233 != nil:
    section.add "profileId", valid_582233
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582234 = query.getOrDefault("key")
  valid_582234 = validateParameter(valid_582234, JString, required = false,
                                 default = nil)
  if valid_582234 != nil:
    section.add "key", valid_582234
  var valid_582235 = query.getOrDefault("prettyPrint")
  valid_582235 = validateParameter(valid_582235, JBool, required = false,
                                 default = newJBool(true))
  if valid_582235 != nil:
    section.add "prettyPrint", valid_582235
  var valid_582236 = query.getOrDefault("oauth_token")
  valid_582236 = validateParameter(valid_582236, JString, required = false,
                                 default = nil)
  if valid_582236 != nil:
    section.add "oauth_token", valid_582236
  var valid_582237 = query.getOrDefault("alt")
  valid_582237 = validateParameter(valid_582237, JString, required = false,
                                 default = newJString("json"))
  if valid_582237 != nil:
    section.add "alt", valid_582237
  var valid_582238 = query.getOrDefault("userIp")
  valid_582238 = validateParameter(valid_582238, JString, required = false,
                                 default = nil)
  if valid_582238 != nil:
    section.add "userIp", valid_582238
  var valid_582239 = query.getOrDefault("quotaUser")
  valid_582239 = validateParameter(valid_582239, JString, required = false,
                                 default = nil)
  if valid_582239 != nil:
    section.add "quotaUser", valid_582239
  var valid_582240 = query.getOrDefault("fields")
  valid_582240 = validateParameter(valid_582240, JString, required = false,
                                 default = nil)
  if valid_582240 != nil:
    section.add "fields", valid_582240
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582242: Call_DfareportingSubaccountsUpdate_582230; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing subaccount.
  ## 
  let valid = call_582242.validator(path, query, header, formData, body)
  let scheme = call_582242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582242.url(scheme.get, call_582242.host, call_582242.base,
                         call_582242.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582242, url, valid)

proc call*(call_582243: Call_DfareportingSubaccountsUpdate_582230;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingSubaccountsUpdate
  ## Updates an existing subaccount.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582244 = newJObject()
  var query_582245 = newJObject()
  var body_582246 = newJObject()
  add(query_582245, "key", newJString(key))
  add(query_582245, "prettyPrint", newJBool(prettyPrint))
  add(query_582245, "oauth_token", newJString(oauthToken))
  add(path_582244, "profileId", newJString(profileId))
  add(query_582245, "alt", newJString(alt))
  add(query_582245, "userIp", newJString(userIp))
  add(query_582245, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_582246 = body
  add(query_582245, "fields", newJString(fields))
  result = call_582243.call(path_582244, query_582245, nil, nil, body_582246)

var dfareportingSubaccountsUpdate* = Call_DfareportingSubaccountsUpdate_582230(
    name: "dfareportingSubaccountsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/subaccounts",
    validator: validate_DfareportingSubaccountsUpdate_582231,
    base: "/dfareporting/v3.2", url: url_DfareportingSubaccountsUpdate_582232,
    schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsInsert_582247 = ref object of OpenApiRestCall_578364
proc url_DfareportingSubaccountsInsert_582249(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsInsert_582248(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new subaccount.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582250 = path.getOrDefault("profileId")
  valid_582250 = validateParameter(valid_582250, JString, required = true,
                                 default = nil)
  if valid_582250 != nil:
    section.add "profileId", valid_582250
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582251 = query.getOrDefault("key")
  valid_582251 = validateParameter(valid_582251, JString, required = false,
                                 default = nil)
  if valid_582251 != nil:
    section.add "key", valid_582251
  var valid_582252 = query.getOrDefault("prettyPrint")
  valid_582252 = validateParameter(valid_582252, JBool, required = false,
                                 default = newJBool(true))
  if valid_582252 != nil:
    section.add "prettyPrint", valid_582252
  var valid_582253 = query.getOrDefault("oauth_token")
  valid_582253 = validateParameter(valid_582253, JString, required = false,
                                 default = nil)
  if valid_582253 != nil:
    section.add "oauth_token", valid_582253
  var valid_582254 = query.getOrDefault("alt")
  valid_582254 = validateParameter(valid_582254, JString, required = false,
                                 default = newJString("json"))
  if valid_582254 != nil:
    section.add "alt", valid_582254
  var valid_582255 = query.getOrDefault("userIp")
  valid_582255 = validateParameter(valid_582255, JString, required = false,
                                 default = nil)
  if valid_582255 != nil:
    section.add "userIp", valid_582255
  var valid_582256 = query.getOrDefault("quotaUser")
  valid_582256 = validateParameter(valid_582256, JString, required = false,
                                 default = nil)
  if valid_582256 != nil:
    section.add "quotaUser", valid_582256
  var valid_582257 = query.getOrDefault("fields")
  valid_582257 = validateParameter(valid_582257, JString, required = false,
                                 default = nil)
  if valid_582257 != nil:
    section.add "fields", valid_582257
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582259: Call_DfareportingSubaccountsInsert_582247; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new subaccount.
  ## 
  let valid = call_582259.validator(path, query, header, formData, body)
  let scheme = call_582259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582259.url(scheme.get, call_582259.host, call_582259.base,
                         call_582259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582259, url, valid)

proc call*(call_582260: Call_DfareportingSubaccountsInsert_582247;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingSubaccountsInsert
  ## Inserts a new subaccount.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582261 = newJObject()
  var query_582262 = newJObject()
  var body_582263 = newJObject()
  add(query_582262, "key", newJString(key))
  add(query_582262, "prettyPrint", newJBool(prettyPrint))
  add(query_582262, "oauth_token", newJString(oauthToken))
  add(path_582261, "profileId", newJString(profileId))
  add(query_582262, "alt", newJString(alt))
  add(query_582262, "userIp", newJString(userIp))
  add(query_582262, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_582263 = body
  add(query_582262, "fields", newJString(fields))
  result = call_582260.call(path_582261, query_582262, nil, nil, body_582263)

var dfareportingSubaccountsInsert* = Call_DfareportingSubaccountsInsert_582247(
    name: "dfareportingSubaccountsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/subaccounts",
    validator: validate_DfareportingSubaccountsInsert_582248,
    base: "/dfareporting/v3.2", url: url_DfareportingSubaccountsInsert_582249,
    schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsList_582209 = ref object of OpenApiRestCall_578364
proc url_DfareportingSubaccountsList_582211(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsList_582210(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of subaccounts, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582212 = path.getOrDefault("profileId")
  valid_582212 = validateParameter(valid_582212, JString, required = true,
                                 default = nil)
  if valid_582212 != nil:
    section.add "profileId", valid_582212
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "subaccount*2015" will return objects with names like "subaccount June 2015", "subaccount April 2015", or simply "subaccount 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "subaccount" will match objects with name "my subaccount", "subaccount 2015", or simply "subaccount".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only subaccounts with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_582213 = query.getOrDefault("key")
  valid_582213 = validateParameter(valid_582213, JString, required = false,
                                 default = nil)
  if valid_582213 != nil:
    section.add "key", valid_582213
  var valid_582214 = query.getOrDefault("prettyPrint")
  valid_582214 = validateParameter(valid_582214, JBool, required = false,
                                 default = newJBool(true))
  if valid_582214 != nil:
    section.add "prettyPrint", valid_582214
  var valid_582215 = query.getOrDefault("oauth_token")
  valid_582215 = validateParameter(valid_582215, JString, required = false,
                                 default = nil)
  if valid_582215 != nil:
    section.add "oauth_token", valid_582215
  var valid_582216 = query.getOrDefault("sortField")
  valid_582216 = validateParameter(valid_582216, JString, required = false,
                                 default = newJString("ID"))
  if valid_582216 != nil:
    section.add "sortField", valid_582216
  var valid_582217 = query.getOrDefault("alt")
  valid_582217 = validateParameter(valid_582217, JString, required = false,
                                 default = newJString("json"))
  if valid_582217 != nil:
    section.add "alt", valid_582217
  var valid_582218 = query.getOrDefault("userIp")
  valid_582218 = validateParameter(valid_582218, JString, required = false,
                                 default = nil)
  if valid_582218 != nil:
    section.add "userIp", valid_582218
  var valid_582219 = query.getOrDefault("quotaUser")
  valid_582219 = validateParameter(valid_582219, JString, required = false,
                                 default = nil)
  if valid_582219 != nil:
    section.add "quotaUser", valid_582219
  var valid_582220 = query.getOrDefault("pageToken")
  valid_582220 = validateParameter(valid_582220, JString, required = false,
                                 default = nil)
  if valid_582220 != nil:
    section.add "pageToken", valid_582220
  var valid_582221 = query.getOrDefault("searchString")
  valid_582221 = validateParameter(valid_582221, JString, required = false,
                                 default = nil)
  if valid_582221 != nil:
    section.add "searchString", valid_582221
  var valid_582222 = query.getOrDefault("sortOrder")
  valid_582222 = validateParameter(valid_582222, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_582222 != nil:
    section.add "sortOrder", valid_582222
  var valid_582223 = query.getOrDefault("ids")
  valid_582223 = validateParameter(valid_582223, JArray, required = false,
                                 default = nil)
  if valid_582223 != nil:
    section.add "ids", valid_582223
  var valid_582224 = query.getOrDefault("fields")
  valid_582224 = validateParameter(valid_582224, JString, required = false,
                                 default = nil)
  if valid_582224 != nil:
    section.add "fields", valid_582224
  var valid_582225 = query.getOrDefault("maxResults")
  valid_582225 = validateParameter(valid_582225, JInt, required = false,
                                 default = newJInt(1000))
  if valid_582225 != nil:
    section.add "maxResults", valid_582225
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582226: Call_DfareportingSubaccountsList_582209; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a list of subaccounts, possibly filtered. This method supports paging.
  ## 
  let valid = call_582226.validator(path, query, header, formData, body)
  let scheme = call_582226.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582226.url(scheme.get, call_582226.host, call_582226.base,
                         call_582226.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582226, url, valid)

proc call*(call_582227: Call_DfareportingSubaccountsList_582209; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          sortField: string = "ID"; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; pageToken: string = ""; searchString: string = "";
          sortOrder: string = "ASCENDING"; ids: JsonNode = nil; fields: string = "";
          maxResults: int = 1000): Recallable =
  ## dfareportingSubaccountsList
  ## Gets a list of subaccounts, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "subaccount*2015" will return objects with names like "subaccount June 2015", "subaccount April 2015", or simply "subaccount 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "subaccount" will match objects with name "my subaccount", "subaccount 2015", or simply "subaccount".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   ids: JArray
  ##      : Select only subaccounts with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_582228 = newJObject()
  var query_582229 = newJObject()
  add(query_582229, "key", newJString(key))
  add(query_582229, "prettyPrint", newJBool(prettyPrint))
  add(query_582229, "oauth_token", newJString(oauthToken))
  add(path_582228, "profileId", newJString(profileId))
  add(query_582229, "sortField", newJString(sortField))
  add(query_582229, "alt", newJString(alt))
  add(query_582229, "userIp", newJString(userIp))
  add(query_582229, "quotaUser", newJString(quotaUser))
  add(query_582229, "pageToken", newJString(pageToken))
  add(query_582229, "searchString", newJString(searchString))
  add(query_582229, "sortOrder", newJString(sortOrder))
  if ids != nil:
    query_582229.add "ids", ids
  add(query_582229, "fields", newJString(fields))
  add(query_582229, "maxResults", newJInt(maxResults))
  result = call_582227.call(path_582228, query_582229, nil, nil, nil)

var dfareportingSubaccountsList* = Call_DfareportingSubaccountsList_582209(
    name: "dfareportingSubaccountsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/subaccounts",
    validator: validate_DfareportingSubaccountsList_582210,
    base: "/dfareporting/v3.2", url: url_DfareportingSubaccountsList_582211,
    schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsPatch_582264 = ref object of OpenApiRestCall_578364
proc url_DfareportingSubaccountsPatch_582266(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsPatch_582265(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing subaccount. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582267 = path.getOrDefault("profileId")
  valid_582267 = validateParameter(valid_582267, JString, required = true,
                                 default = nil)
  if valid_582267 != nil:
    section.add "profileId", valid_582267
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Subaccount ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582268 = query.getOrDefault("key")
  valid_582268 = validateParameter(valid_582268, JString, required = false,
                                 default = nil)
  if valid_582268 != nil:
    section.add "key", valid_582268
  var valid_582269 = query.getOrDefault("prettyPrint")
  valid_582269 = validateParameter(valid_582269, JBool, required = false,
                                 default = newJBool(true))
  if valid_582269 != nil:
    section.add "prettyPrint", valid_582269
  var valid_582270 = query.getOrDefault("oauth_token")
  valid_582270 = validateParameter(valid_582270, JString, required = false,
                                 default = nil)
  if valid_582270 != nil:
    section.add "oauth_token", valid_582270
  var valid_582271 = query.getOrDefault("alt")
  valid_582271 = validateParameter(valid_582271, JString, required = false,
                                 default = newJString("json"))
  if valid_582271 != nil:
    section.add "alt", valid_582271
  var valid_582272 = query.getOrDefault("userIp")
  valid_582272 = validateParameter(valid_582272, JString, required = false,
                                 default = nil)
  if valid_582272 != nil:
    section.add "userIp", valid_582272
  var valid_582273 = query.getOrDefault("quotaUser")
  valid_582273 = validateParameter(valid_582273, JString, required = false,
                                 default = nil)
  if valid_582273 != nil:
    section.add "quotaUser", valid_582273
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_582274 = query.getOrDefault("id")
  valid_582274 = validateParameter(valid_582274, JString, required = true,
                                 default = nil)
  if valid_582274 != nil:
    section.add "id", valid_582274
  var valid_582275 = query.getOrDefault("fields")
  valid_582275 = validateParameter(valid_582275, JString, required = false,
                                 default = nil)
  if valid_582275 != nil:
    section.add "fields", valid_582275
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582277: Call_DfareportingSubaccountsPatch_582264; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing subaccount. This method supports patch semantics.
  ## 
  let valid = call_582277.validator(path, query, header, formData, body)
  let scheme = call_582277.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582277.url(scheme.get, call_582277.host, call_582277.base,
                         call_582277.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582277, url, valid)

proc call*(call_582278: Call_DfareportingSubaccountsPatch_582264;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingSubaccountsPatch
  ## Updates an existing subaccount. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Subaccount ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582279 = newJObject()
  var query_582280 = newJObject()
  var body_582281 = newJObject()
  add(query_582280, "key", newJString(key))
  add(query_582280, "prettyPrint", newJBool(prettyPrint))
  add(query_582280, "oauth_token", newJString(oauthToken))
  add(path_582279, "profileId", newJString(profileId))
  add(query_582280, "alt", newJString(alt))
  add(query_582280, "userIp", newJString(userIp))
  add(query_582280, "quotaUser", newJString(quotaUser))
  add(query_582280, "id", newJString(id))
  if body != nil:
    body_582281 = body
  add(query_582280, "fields", newJString(fields))
  result = call_582278.call(path_582279, query_582280, nil, nil, body_582281)

var dfareportingSubaccountsPatch* = Call_DfareportingSubaccountsPatch_582264(
    name: "dfareportingSubaccountsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/subaccounts",
    validator: validate_DfareportingSubaccountsPatch_582265,
    base: "/dfareporting/v3.2", url: url_DfareportingSubaccountsPatch_582266,
    schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsGet_582282 = ref object of OpenApiRestCall_578364
proc url_DfareportingSubaccountsGet_582284(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsGet_582283(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one subaccount by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Subaccount ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582285 = path.getOrDefault("profileId")
  valid_582285 = validateParameter(valid_582285, JString, required = true,
                                 default = nil)
  if valid_582285 != nil:
    section.add "profileId", valid_582285
  var valid_582286 = path.getOrDefault("id")
  valid_582286 = validateParameter(valid_582286, JString, required = true,
                                 default = nil)
  if valid_582286 != nil:
    section.add "id", valid_582286
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582287 = query.getOrDefault("key")
  valid_582287 = validateParameter(valid_582287, JString, required = false,
                                 default = nil)
  if valid_582287 != nil:
    section.add "key", valid_582287
  var valid_582288 = query.getOrDefault("prettyPrint")
  valid_582288 = validateParameter(valid_582288, JBool, required = false,
                                 default = newJBool(true))
  if valid_582288 != nil:
    section.add "prettyPrint", valid_582288
  var valid_582289 = query.getOrDefault("oauth_token")
  valid_582289 = validateParameter(valid_582289, JString, required = false,
                                 default = nil)
  if valid_582289 != nil:
    section.add "oauth_token", valid_582289
  var valid_582290 = query.getOrDefault("alt")
  valid_582290 = validateParameter(valid_582290, JString, required = false,
                                 default = newJString("json"))
  if valid_582290 != nil:
    section.add "alt", valid_582290
  var valid_582291 = query.getOrDefault("userIp")
  valid_582291 = validateParameter(valid_582291, JString, required = false,
                                 default = nil)
  if valid_582291 != nil:
    section.add "userIp", valid_582291
  var valid_582292 = query.getOrDefault("quotaUser")
  valid_582292 = validateParameter(valid_582292, JString, required = false,
                                 default = nil)
  if valid_582292 != nil:
    section.add "quotaUser", valid_582292
  var valid_582293 = query.getOrDefault("fields")
  valid_582293 = validateParameter(valid_582293, JString, required = false,
                                 default = nil)
  if valid_582293 != nil:
    section.add "fields", valid_582293
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582294: Call_DfareportingSubaccountsGet_582282; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one subaccount by ID.
  ## 
  let valid = call_582294.validator(path, query, header, formData, body)
  let scheme = call_582294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582294.url(scheme.get, call_582294.host, call_582294.base,
                         call_582294.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582294, url, valid)

proc call*(call_582295: Call_DfareportingSubaccountsGet_582282; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingSubaccountsGet
  ## Gets one subaccount by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Subaccount ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582296 = newJObject()
  var query_582297 = newJObject()
  add(query_582297, "key", newJString(key))
  add(query_582297, "prettyPrint", newJBool(prettyPrint))
  add(query_582297, "oauth_token", newJString(oauthToken))
  add(path_582296, "profileId", newJString(profileId))
  add(path_582296, "id", newJString(id))
  add(query_582297, "alt", newJString(alt))
  add(query_582297, "userIp", newJString(userIp))
  add(query_582297, "quotaUser", newJString(quotaUser))
  add(query_582297, "fields", newJString(fields))
  result = call_582295.call(path_582296, query_582297, nil, nil, nil)

var dfareportingSubaccountsGet* = Call_DfareportingSubaccountsGet_582282(
    name: "dfareportingSubaccountsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/subaccounts/{id}",
    validator: validate_DfareportingSubaccountsGet_582283,
    base: "/dfareporting/v3.2", url: url_DfareportingSubaccountsGet_582284,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetableRemarketingListsList_582298 = ref object of OpenApiRestCall_578364
proc url_DfareportingTargetableRemarketingListsList_582300(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetableRemarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetableRemarketingListsList_582299(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582301 = path.getOrDefault("profileId")
  valid_582301 = validateParameter(valid_582301, JString, required = true,
                                 default = nil)
  if valid_582301 != nil:
    section.add "profileId", valid_582301
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   name: JString
  ##       : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
  ##   active: JBool
  ##         : Select only active or only inactive targetable remarketing lists.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   advertiserId: JString (required)
  ##               : Select only targetable remarketing lists targetable by these advertisers.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_582302 = query.getOrDefault("key")
  valid_582302 = validateParameter(valid_582302, JString, required = false,
                                 default = nil)
  if valid_582302 != nil:
    section.add "key", valid_582302
  var valid_582303 = query.getOrDefault("prettyPrint")
  valid_582303 = validateParameter(valid_582303, JBool, required = false,
                                 default = newJBool(true))
  if valid_582303 != nil:
    section.add "prettyPrint", valid_582303
  var valid_582304 = query.getOrDefault("oauth_token")
  valid_582304 = validateParameter(valid_582304, JString, required = false,
                                 default = nil)
  if valid_582304 != nil:
    section.add "oauth_token", valid_582304
  var valid_582305 = query.getOrDefault("name")
  valid_582305 = validateParameter(valid_582305, JString, required = false,
                                 default = nil)
  if valid_582305 != nil:
    section.add "name", valid_582305
  var valid_582306 = query.getOrDefault("active")
  valid_582306 = validateParameter(valid_582306, JBool, required = false, default = nil)
  if valid_582306 != nil:
    section.add "active", valid_582306
  var valid_582307 = query.getOrDefault("sortField")
  valid_582307 = validateParameter(valid_582307, JString, required = false,
                                 default = newJString("ID"))
  if valid_582307 != nil:
    section.add "sortField", valid_582307
  var valid_582308 = query.getOrDefault("alt")
  valid_582308 = validateParameter(valid_582308, JString, required = false,
                                 default = newJString("json"))
  if valid_582308 != nil:
    section.add "alt", valid_582308
  var valid_582309 = query.getOrDefault("userIp")
  valid_582309 = validateParameter(valid_582309, JString, required = false,
                                 default = nil)
  if valid_582309 != nil:
    section.add "userIp", valid_582309
  var valid_582310 = query.getOrDefault("quotaUser")
  valid_582310 = validateParameter(valid_582310, JString, required = false,
                                 default = nil)
  if valid_582310 != nil:
    section.add "quotaUser", valid_582310
  var valid_582311 = query.getOrDefault("pageToken")
  valid_582311 = validateParameter(valid_582311, JString, required = false,
                                 default = nil)
  if valid_582311 != nil:
    section.add "pageToken", valid_582311
  var valid_582312 = query.getOrDefault("sortOrder")
  valid_582312 = validateParameter(valid_582312, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_582312 != nil:
    section.add "sortOrder", valid_582312
  assert query != nil,
        "query argument is necessary due to required `advertiserId` field"
  var valid_582313 = query.getOrDefault("advertiserId")
  valid_582313 = validateParameter(valid_582313, JString, required = true,
                                 default = nil)
  if valid_582313 != nil:
    section.add "advertiserId", valid_582313
  var valid_582314 = query.getOrDefault("fields")
  valid_582314 = validateParameter(valid_582314, JString, required = false,
                                 default = nil)
  if valid_582314 != nil:
    section.add "fields", valid_582314
  var valid_582315 = query.getOrDefault("maxResults")
  valid_582315 = validateParameter(valid_582315, JInt, required = false,
                                 default = newJInt(1000))
  if valid_582315 != nil:
    section.add "maxResults", valid_582315
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582316: Call_DfareportingTargetableRemarketingListsList_582298;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging.
  ## 
  let valid = call_582316.validator(path, query, header, formData, body)
  let scheme = call_582316.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582316.url(scheme.get, call_582316.host, call_582316.base,
                         call_582316.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582316, url, valid)

proc call*(call_582317: Call_DfareportingTargetableRemarketingListsList_582298;
          profileId: string; advertiserId: string; key: string = "";
          prettyPrint: bool = true; oauthToken: string = ""; name: string = "";
          active: bool = false; sortField: string = "ID"; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; pageToken: string = "";
          sortOrder: string = "ASCENDING"; fields: string = ""; maxResults: int = 1000): Recallable =
  ## dfareportingTargetableRemarketingListsList
  ## Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   name: string
  ##       : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
  ##   active: bool
  ##         : Select only active or only inactive targetable remarketing lists.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   advertiserId: string (required)
  ##               : Select only targetable remarketing lists targetable by these advertisers.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_582318 = newJObject()
  var query_582319 = newJObject()
  add(query_582319, "key", newJString(key))
  add(query_582319, "prettyPrint", newJBool(prettyPrint))
  add(query_582319, "oauth_token", newJString(oauthToken))
  add(query_582319, "name", newJString(name))
  add(query_582319, "active", newJBool(active))
  add(path_582318, "profileId", newJString(profileId))
  add(query_582319, "sortField", newJString(sortField))
  add(query_582319, "alt", newJString(alt))
  add(query_582319, "userIp", newJString(userIp))
  add(query_582319, "quotaUser", newJString(quotaUser))
  add(query_582319, "pageToken", newJString(pageToken))
  add(query_582319, "sortOrder", newJString(sortOrder))
  add(query_582319, "advertiserId", newJString(advertiserId))
  add(query_582319, "fields", newJString(fields))
  add(query_582319, "maxResults", newJInt(maxResults))
  result = call_582317.call(path_582318, query_582319, nil, nil, nil)

var dfareportingTargetableRemarketingListsList* = Call_DfareportingTargetableRemarketingListsList_582298(
    name: "dfareportingTargetableRemarketingListsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetableRemarketingLists",
    validator: validate_DfareportingTargetableRemarketingListsList_582299,
    base: "/dfareporting/v3.2",
    url: url_DfareportingTargetableRemarketingListsList_582300,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetableRemarketingListsGet_582320 = ref object of OpenApiRestCall_578364
proc url_DfareportingTargetableRemarketingListsGet_582322(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetableRemarketingLists/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetableRemarketingListsGet_582321(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one remarketing list by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Remarketing list ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582323 = path.getOrDefault("profileId")
  valid_582323 = validateParameter(valid_582323, JString, required = true,
                                 default = nil)
  if valid_582323 != nil:
    section.add "profileId", valid_582323
  var valid_582324 = path.getOrDefault("id")
  valid_582324 = validateParameter(valid_582324, JString, required = true,
                                 default = nil)
  if valid_582324 != nil:
    section.add "id", valid_582324
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582325 = query.getOrDefault("key")
  valid_582325 = validateParameter(valid_582325, JString, required = false,
                                 default = nil)
  if valid_582325 != nil:
    section.add "key", valid_582325
  var valid_582326 = query.getOrDefault("prettyPrint")
  valid_582326 = validateParameter(valid_582326, JBool, required = false,
                                 default = newJBool(true))
  if valid_582326 != nil:
    section.add "prettyPrint", valid_582326
  var valid_582327 = query.getOrDefault("oauth_token")
  valid_582327 = validateParameter(valid_582327, JString, required = false,
                                 default = nil)
  if valid_582327 != nil:
    section.add "oauth_token", valid_582327
  var valid_582328 = query.getOrDefault("alt")
  valid_582328 = validateParameter(valid_582328, JString, required = false,
                                 default = newJString("json"))
  if valid_582328 != nil:
    section.add "alt", valid_582328
  var valid_582329 = query.getOrDefault("userIp")
  valid_582329 = validateParameter(valid_582329, JString, required = false,
                                 default = nil)
  if valid_582329 != nil:
    section.add "userIp", valid_582329
  var valid_582330 = query.getOrDefault("quotaUser")
  valid_582330 = validateParameter(valid_582330, JString, required = false,
                                 default = nil)
  if valid_582330 != nil:
    section.add "quotaUser", valid_582330
  var valid_582331 = query.getOrDefault("fields")
  valid_582331 = validateParameter(valid_582331, JString, required = false,
                                 default = nil)
  if valid_582331 != nil:
    section.add "fields", valid_582331
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582332: Call_DfareportingTargetableRemarketingListsGet_582320;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one remarketing list by ID.
  ## 
  let valid = call_582332.validator(path, query, header, formData, body)
  let scheme = call_582332.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582332.url(scheme.get, call_582332.host, call_582332.base,
                         call_582332.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582332, url, valid)

proc call*(call_582333: Call_DfareportingTargetableRemarketingListsGet_582320;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingTargetableRemarketingListsGet
  ## Gets one remarketing list by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Remarketing list ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582334 = newJObject()
  var query_582335 = newJObject()
  add(query_582335, "key", newJString(key))
  add(query_582335, "prettyPrint", newJBool(prettyPrint))
  add(query_582335, "oauth_token", newJString(oauthToken))
  add(path_582334, "profileId", newJString(profileId))
  add(path_582334, "id", newJString(id))
  add(query_582335, "alt", newJString(alt))
  add(query_582335, "userIp", newJString(userIp))
  add(query_582335, "quotaUser", newJString(quotaUser))
  add(query_582335, "fields", newJString(fields))
  result = call_582333.call(path_582334, query_582335, nil, nil, nil)

var dfareportingTargetableRemarketingListsGet* = Call_DfareportingTargetableRemarketingListsGet_582320(
    name: "dfareportingTargetableRemarketingListsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetableRemarketingLists/{id}",
    validator: validate_DfareportingTargetableRemarketingListsGet_582321,
    base: "/dfareporting/v3.2",
    url: url_DfareportingTargetableRemarketingListsGet_582322,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesUpdate_582358 = ref object of OpenApiRestCall_578364
proc url_DfareportingTargetingTemplatesUpdate_582360(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesUpdate_582359(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing targeting template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582361 = path.getOrDefault("profileId")
  valid_582361 = validateParameter(valid_582361, JString, required = true,
                                 default = nil)
  if valid_582361 != nil:
    section.add "profileId", valid_582361
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582362 = query.getOrDefault("key")
  valid_582362 = validateParameter(valid_582362, JString, required = false,
                                 default = nil)
  if valid_582362 != nil:
    section.add "key", valid_582362
  var valid_582363 = query.getOrDefault("prettyPrint")
  valid_582363 = validateParameter(valid_582363, JBool, required = false,
                                 default = newJBool(true))
  if valid_582363 != nil:
    section.add "prettyPrint", valid_582363
  var valid_582364 = query.getOrDefault("oauth_token")
  valid_582364 = validateParameter(valid_582364, JString, required = false,
                                 default = nil)
  if valid_582364 != nil:
    section.add "oauth_token", valid_582364
  var valid_582365 = query.getOrDefault("alt")
  valid_582365 = validateParameter(valid_582365, JString, required = false,
                                 default = newJString("json"))
  if valid_582365 != nil:
    section.add "alt", valid_582365
  var valid_582366 = query.getOrDefault("userIp")
  valid_582366 = validateParameter(valid_582366, JString, required = false,
                                 default = nil)
  if valid_582366 != nil:
    section.add "userIp", valid_582366
  var valid_582367 = query.getOrDefault("quotaUser")
  valid_582367 = validateParameter(valid_582367, JString, required = false,
                                 default = nil)
  if valid_582367 != nil:
    section.add "quotaUser", valid_582367
  var valid_582368 = query.getOrDefault("fields")
  valid_582368 = validateParameter(valid_582368, JString, required = false,
                                 default = nil)
  if valid_582368 != nil:
    section.add "fields", valid_582368
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582370: Call_DfareportingTargetingTemplatesUpdate_582358;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing targeting template.
  ## 
  let valid = call_582370.validator(path, query, header, formData, body)
  let scheme = call_582370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582370.url(scheme.get, call_582370.host, call_582370.base,
                         call_582370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582370, url, valid)

proc call*(call_582371: Call_DfareportingTargetingTemplatesUpdate_582358;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingTargetingTemplatesUpdate
  ## Updates an existing targeting template.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582372 = newJObject()
  var query_582373 = newJObject()
  var body_582374 = newJObject()
  add(query_582373, "key", newJString(key))
  add(query_582373, "prettyPrint", newJBool(prettyPrint))
  add(query_582373, "oauth_token", newJString(oauthToken))
  add(path_582372, "profileId", newJString(profileId))
  add(query_582373, "alt", newJString(alt))
  add(query_582373, "userIp", newJString(userIp))
  add(query_582373, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_582374 = body
  add(query_582373, "fields", newJString(fields))
  result = call_582371.call(path_582372, query_582373, nil, nil, body_582374)

var dfareportingTargetingTemplatesUpdate* = Call_DfareportingTargetingTemplatesUpdate_582358(
    name: "dfareportingTargetingTemplatesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates",
    validator: validate_DfareportingTargetingTemplatesUpdate_582359,
    base: "/dfareporting/v3.2", url: url_DfareportingTargetingTemplatesUpdate_582360,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesInsert_582375 = ref object of OpenApiRestCall_578364
proc url_DfareportingTargetingTemplatesInsert_582377(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesInsert_582376(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new targeting template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582378 = path.getOrDefault("profileId")
  valid_582378 = validateParameter(valid_582378, JString, required = true,
                                 default = nil)
  if valid_582378 != nil:
    section.add "profileId", valid_582378
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582379 = query.getOrDefault("key")
  valid_582379 = validateParameter(valid_582379, JString, required = false,
                                 default = nil)
  if valid_582379 != nil:
    section.add "key", valid_582379
  var valid_582380 = query.getOrDefault("prettyPrint")
  valid_582380 = validateParameter(valid_582380, JBool, required = false,
                                 default = newJBool(true))
  if valid_582380 != nil:
    section.add "prettyPrint", valid_582380
  var valid_582381 = query.getOrDefault("oauth_token")
  valid_582381 = validateParameter(valid_582381, JString, required = false,
                                 default = nil)
  if valid_582381 != nil:
    section.add "oauth_token", valid_582381
  var valid_582382 = query.getOrDefault("alt")
  valid_582382 = validateParameter(valid_582382, JString, required = false,
                                 default = newJString("json"))
  if valid_582382 != nil:
    section.add "alt", valid_582382
  var valid_582383 = query.getOrDefault("userIp")
  valid_582383 = validateParameter(valid_582383, JString, required = false,
                                 default = nil)
  if valid_582383 != nil:
    section.add "userIp", valid_582383
  var valid_582384 = query.getOrDefault("quotaUser")
  valid_582384 = validateParameter(valid_582384, JString, required = false,
                                 default = nil)
  if valid_582384 != nil:
    section.add "quotaUser", valid_582384
  var valid_582385 = query.getOrDefault("fields")
  valid_582385 = validateParameter(valid_582385, JString, required = false,
                                 default = nil)
  if valid_582385 != nil:
    section.add "fields", valid_582385
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582387: Call_DfareportingTargetingTemplatesInsert_582375;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new targeting template.
  ## 
  let valid = call_582387.validator(path, query, header, formData, body)
  let scheme = call_582387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582387.url(scheme.get, call_582387.host, call_582387.base,
                         call_582387.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582387, url, valid)

proc call*(call_582388: Call_DfareportingTargetingTemplatesInsert_582375;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingTargetingTemplatesInsert
  ## Inserts a new targeting template.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582389 = newJObject()
  var query_582390 = newJObject()
  var body_582391 = newJObject()
  add(query_582390, "key", newJString(key))
  add(query_582390, "prettyPrint", newJBool(prettyPrint))
  add(query_582390, "oauth_token", newJString(oauthToken))
  add(path_582389, "profileId", newJString(profileId))
  add(query_582390, "alt", newJString(alt))
  add(query_582390, "userIp", newJString(userIp))
  add(query_582390, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_582391 = body
  add(query_582390, "fields", newJString(fields))
  result = call_582388.call(path_582389, query_582390, nil, nil, body_582391)

var dfareportingTargetingTemplatesInsert* = Call_DfareportingTargetingTemplatesInsert_582375(
    name: "dfareportingTargetingTemplatesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates",
    validator: validate_DfareportingTargetingTemplatesInsert_582376,
    base: "/dfareporting/v3.2", url: url_DfareportingTargetingTemplatesInsert_582377,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesList_582336 = ref object of OpenApiRestCall_578364
proc url_DfareportingTargetingTemplatesList_582338(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesList_582337(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of targeting templates, optionally filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582339 = path.getOrDefault("profileId")
  valid_582339 = validateParameter(valid_582339, JString, required = true,
                                 default = nil)
  if valid_582339 != nil:
    section.add "profileId", valid_582339
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "template*2015" will return objects with names like "template June 2015", "template April 2015", or simply "template 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "template" will match objects with name "my template", "template 2015", or simply "template".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   advertiserId: JString
  ##               : Select only targeting templates with this advertiser ID.
  ##   ids: JArray
  ##      : Select only targeting templates with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_582340 = query.getOrDefault("key")
  valid_582340 = validateParameter(valid_582340, JString, required = false,
                                 default = nil)
  if valid_582340 != nil:
    section.add "key", valid_582340
  var valid_582341 = query.getOrDefault("prettyPrint")
  valid_582341 = validateParameter(valid_582341, JBool, required = false,
                                 default = newJBool(true))
  if valid_582341 != nil:
    section.add "prettyPrint", valid_582341
  var valid_582342 = query.getOrDefault("oauth_token")
  valid_582342 = validateParameter(valid_582342, JString, required = false,
                                 default = nil)
  if valid_582342 != nil:
    section.add "oauth_token", valid_582342
  var valid_582343 = query.getOrDefault("sortField")
  valid_582343 = validateParameter(valid_582343, JString, required = false,
                                 default = newJString("ID"))
  if valid_582343 != nil:
    section.add "sortField", valid_582343
  var valid_582344 = query.getOrDefault("alt")
  valid_582344 = validateParameter(valid_582344, JString, required = false,
                                 default = newJString("json"))
  if valid_582344 != nil:
    section.add "alt", valid_582344
  var valid_582345 = query.getOrDefault("userIp")
  valid_582345 = validateParameter(valid_582345, JString, required = false,
                                 default = nil)
  if valid_582345 != nil:
    section.add "userIp", valid_582345
  var valid_582346 = query.getOrDefault("quotaUser")
  valid_582346 = validateParameter(valid_582346, JString, required = false,
                                 default = nil)
  if valid_582346 != nil:
    section.add "quotaUser", valid_582346
  var valid_582347 = query.getOrDefault("pageToken")
  valid_582347 = validateParameter(valid_582347, JString, required = false,
                                 default = nil)
  if valid_582347 != nil:
    section.add "pageToken", valid_582347
  var valid_582348 = query.getOrDefault("searchString")
  valid_582348 = validateParameter(valid_582348, JString, required = false,
                                 default = nil)
  if valid_582348 != nil:
    section.add "searchString", valid_582348
  var valid_582349 = query.getOrDefault("sortOrder")
  valid_582349 = validateParameter(valid_582349, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_582349 != nil:
    section.add "sortOrder", valid_582349
  var valid_582350 = query.getOrDefault("advertiserId")
  valid_582350 = validateParameter(valid_582350, JString, required = false,
                                 default = nil)
  if valid_582350 != nil:
    section.add "advertiserId", valid_582350
  var valid_582351 = query.getOrDefault("ids")
  valid_582351 = validateParameter(valid_582351, JArray, required = false,
                                 default = nil)
  if valid_582351 != nil:
    section.add "ids", valid_582351
  var valid_582352 = query.getOrDefault("fields")
  valid_582352 = validateParameter(valid_582352, JString, required = false,
                                 default = nil)
  if valid_582352 != nil:
    section.add "fields", valid_582352
  var valid_582353 = query.getOrDefault("maxResults")
  valid_582353 = validateParameter(valid_582353, JInt, required = false,
                                 default = newJInt(1000))
  if valid_582353 != nil:
    section.add "maxResults", valid_582353
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582354: Call_DfareportingTargetingTemplatesList_582336;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of targeting templates, optionally filtered. This method supports paging.
  ## 
  let valid = call_582354.validator(path, query, header, formData, body)
  let scheme = call_582354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582354.url(scheme.get, call_582354.host, call_582354.base,
                         call_582354.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582354, url, valid)

proc call*(call_582355: Call_DfareportingTargetingTemplatesList_582336;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; sortField: string = "ID"; alt: string = "json";
          userIp: string = ""; quotaUser: string = ""; pageToken: string = "";
          searchString: string = ""; sortOrder: string = "ASCENDING";
          advertiserId: string = ""; ids: JsonNode = nil; fields: string = "";
          maxResults: int = 1000): Recallable =
  ## dfareportingTargetingTemplatesList
  ## Retrieves a list of targeting templates, optionally filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "template*2015" will return objects with names like "template June 2015", "template April 2015", or simply "template 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "template" will match objects with name "my template", "template 2015", or simply "template".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   advertiserId: string
  ##               : Select only targeting templates with this advertiser ID.
  ##   ids: JArray
  ##      : Select only targeting templates with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_582356 = newJObject()
  var query_582357 = newJObject()
  add(query_582357, "key", newJString(key))
  add(query_582357, "prettyPrint", newJBool(prettyPrint))
  add(query_582357, "oauth_token", newJString(oauthToken))
  add(path_582356, "profileId", newJString(profileId))
  add(query_582357, "sortField", newJString(sortField))
  add(query_582357, "alt", newJString(alt))
  add(query_582357, "userIp", newJString(userIp))
  add(query_582357, "quotaUser", newJString(quotaUser))
  add(query_582357, "pageToken", newJString(pageToken))
  add(query_582357, "searchString", newJString(searchString))
  add(query_582357, "sortOrder", newJString(sortOrder))
  add(query_582357, "advertiserId", newJString(advertiserId))
  if ids != nil:
    query_582357.add "ids", ids
  add(query_582357, "fields", newJString(fields))
  add(query_582357, "maxResults", newJInt(maxResults))
  result = call_582355.call(path_582356, query_582357, nil, nil, nil)

var dfareportingTargetingTemplatesList* = Call_DfareportingTargetingTemplatesList_582336(
    name: "dfareportingTargetingTemplatesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates",
    validator: validate_DfareportingTargetingTemplatesList_582337,
    base: "/dfareporting/v3.2", url: url_DfareportingTargetingTemplatesList_582338,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesPatch_582392 = ref object of OpenApiRestCall_578364
proc url_DfareportingTargetingTemplatesPatch_582394(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesPatch_582393(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing targeting template. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582395 = path.getOrDefault("profileId")
  valid_582395 = validateParameter(valid_582395, JString, required = true,
                                 default = nil)
  if valid_582395 != nil:
    section.add "profileId", valid_582395
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Targeting template ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582396 = query.getOrDefault("key")
  valid_582396 = validateParameter(valid_582396, JString, required = false,
                                 default = nil)
  if valid_582396 != nil:
    section.add "key", valid_582396
  var valid_582397 = query.getOrDefault("prettyPrint")
  valid_582397 = validateParameter(valid_582397, JBool, required = false,
                                 default = newJBool(true))
  if valid_582397 != nil:
    section.add "prettyPrint", valid_582397
  var valid_582398 = query.getOrDefault("oauth_token")
  valid_582398 = validateParameter(valid_582398, JString, required = false,
                                 default = nil)
  if valid_582398 != nil:
    section.add "oauth_token", valid_582398
  var valid_582399 = query.getOrDefault("alt")
  valid_582399 = validateParameter(valid_582399, JString, required = false,
                                 default = newJString("json"))
  if valid_582399 != nil:
    section.add "alt", valid_582399
  var valid_582400 = query.getOrDefault("userIp")
  valid_582400 = validateParameter(valid_582400, JString, required = false,
                                 default = nil)
  if valid_582400 != nil:
    section.add "userIp", valid_582400
  var valid_582401 = query.getOrDefault("quotaUser")
  valid_582401 = validateParameter(valid_582401, JString, required = false,
                                 default = nil)
  if valid_582401 != nil:
    section.add "quotaUser", valid_582401
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_582402 = query.getOrDefault("id")
  valid_582402 = validateParameter(valid_582402, JString, required = true,
                                 default = nil)
  if valid_582402 != nil:
    section.add "id", valid_582402
  var valid_582403 = query.getOrDefault("fields")
  valid_582403 = validateParameter(valid_582403, JString, required = false,
                                 default = nil)
  if valid_582403 != nil:
    section.add "fields", valid_582403
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582405: Call_DfareportingTargetingTemplatesPatch_582392;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing targeting template. This method supports patch semantics.
  ## 
  let valid = call_582405.validator(path, query, header, formData, body)
  let scheme = call_582405.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582405.url(scheme.get, call_582405.host, call_582405.base,
                         call_582405.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582405, url, valid)

proc call*(call_582406: Call_DfareportingTargetingTemplatesPatch_582392;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingTargetingTemplatesPatch
  ## Updates an existing targeting template. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Targeting template ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582407 = newJObject()
  var query_582408 = newJObject()
  var body_582409 = newJObject()
  add(query_582408, "key", newJString(key))
  add(query_582408, "prettyPrint", newJBool(prettyPrint))
  add(query_582408, "oauth_token", newJString(oauthToken))
  add(path_582407, "profileId", newJString(profileId))
  add(query_582408, "alt", newJString(alt))
  add(query_582408, "userIp", newJString(userIp))
  add(query_582408, "quotaUser", newJString(quotaUser))
  add(query_582408, "id", newJString(id))
  if body != nil:
    body_582409 = body
  add(query_582408, "fields", newJString(fields))
  result = call_582406.call(path_582407, query_582408, nil, nil, body_582409)

var dfareportingTargetingTemplatesPatch* = Call_DfareportingTargetingTemplatesPatch_582392(
    name: "dfareportingTargetingTemplatesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates",
    validator: validate_DfareportingTargetingTemplatesPatch_582393,
    base: "/dfareporting/v3.2", url: url_DfareportingTargetingTemplatesPatch_582394,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesGet_582410 = ref object of OpenApiRestCall_578364
proc url_DfareportingTargetingTemplatesGet_582412(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesGet_582411(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one targeting template by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Targeting template ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582413 = path.getOrDefault("profileId")
  valid_582413 = validateParameter(valid_582413, JString, required = true,
                                 default = nil)
  if valid_582413 != nil:
    section.add "profileId", valid_582413
  var valid_582414 = path.getOrDefault("id")
  valid_582414 = validateParameter(valid_582414, JString, required = true,
                                 default = nil)
  if valid_582414 != nil:
    section.add "id", valid_582414
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582415 = query.getOrDefault("key")
  valid_582415 = validateParameter(valid_582415, JString, required = false,
                                 default = nil)
  if valid_582415 != nil:
    section.add "key", valid_582415
  var valid_582416 = query.getOrDefault("prettyPrint")
  valid_582416 = validateParameter(valid_582416, JBool, required = false,
                                 default = newJBool(true))
  if valid_582416 != nil:
    section.add "prettyPrint", valid_582416
  var valid_582417 = query.getOrDefault("oauth_token")
  valid_582417 = validateParameter(valid_582417, JString, required = false,
                                 default = nil)
  if valid_582417 != nil:
    section.add "oauth_token", valid_582417
  var valid_582418 = query.getOrDefault("alt")
  valid_582418 = validateParameter(valid_582418, JString, required = false,
                                 default = newJString("json"))
  if valid_582418 != nil:
    section.add "alt", valid_582418
  var valid_582419 = query.getOrDefault("userIp")
  valid_582419 = validateParameter(valid_582419, JString, required = false,
                                 default = nil)
  if valid_582419 != nil:
    section.add "userIp", valid_582419
  var valid_582420 = query.getOrDefault("quotaUser")
  valid_582420 = validateParameter(valid_582420, JString, required = false,
                                 default = nil)
  if valid_582420 != nil:
    section.add "quotaUser", valid_582420
  var valid_582421 = query.getOrDefault("fields")
  valid_582421 = validateParameter(valid_582421, JString, required = false,
                                 default = nil)
  if valid_582421 != nil:
    section.add "fields", valid_582421
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582422: Call_DfareportingTargetingTemplatesGet_582410;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one targeting template by ID.
  ## 
  let valid = call_582422.validator(path, query, header, formData, body)
  let scheme = call_582422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582422.url(scheme.get, call_582422.host, call_582422.base,
                         call_582422.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582422, url, valid)

proc call*(call_582423: Call_DfareportingTargetingTemplatesGet_582410;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingTargetingTemplatesGet
  ## Gets one targeting template by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : Targeting template ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582424 = newJObject()
  var query_582425 = newJObject()
  add(query_582425, "key", newJString(key))
  add(query_582425, "prettyPrint", newJBool(prettyPrint))
  add(query_582425, "oauth_token", newJString(oauthToken))
  add(path_582424, "profileId", newJString(profileId))
  add(path_582424, "id", newJString(id))
  add(query_582425, "alt", newJString(alt))
  add(query_582425, "userIp", newJString(userIp))
  add(query_582425, "quotaUser", newJString(quotaUser))
  add(query_582425, "fields", newJString(fields))
  result = call_582423.call(path_582424, query_582425, nil, nil, nil)

var dfareportingTargetingTemplatesGet* = Call_DfareportingTargetingTemplatesGet_582410(
    name: "dfareportingTargetingTemplatesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates/{id}",
    validator: validate_DfareportingTargetingTemplatesGet_582411,
    base: "/dfareporting/v3.2", url: url_DfareportingTargetingTemplatesGet_582412,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolePermissionGroupsList_582426 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserRolePermissionGroupsList_582428(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRolePermissionGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolePermissionGroupsList_582427(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of all supported user role permission groups.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582429 = path.getOrDefault("profileId")
  valid_582429 = validateParameter(valid_582429, JString, required = true,
                                 default = nil)
  if valid_582429 != nil:
    section.add "profileId", valid_582429
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582430 = query.getOrDefault("key")
  valid_582430 = validateParameter(valid_582430, JString, required = false,
                                 default = nil)
  if valid_582430 != nil:
    section.add "key", valid_582430
  var valid_582431 = query.getOrDefault("prettyPrint")
  valid_582431 = validateParameter(valid_582431, JBool, required = false,
                                 default = newJBool(true))
  if valid_582431 != nil:
    section.add "prettyPrint", valid_582431
  var valid_582432 = query.getOrDefault("oauth_token")
  valid_582432 = validateParameter(valid_582432, JString, required = false,
                                 default = nil)
  if valid_582432 != nil:
    section.add "oauth_token", valid_582432
  var valid_582433 = query.getOrDefault("alt")
  valid_582433 = validateParameter(valid_582433, JString, required = false,
                                 default = newJString("json"))
  if valid_582433 != nil:
    section.add "alt", valid_582433
  var valid_582434 = query.getOrDefault("userIp")
  valid_582434 = validateParameter(valid_582434, JString, required = false,
                                 default = nil)
  if valid_582434 != nil:
    section.add "userIp", valid_582434
  var valid_582435 = query.getOrDefault("quotaUser")
  valid_582435 = validateParameter(valid_582435, JString, required = false,
                                 default = nil)
  if valid_582435 != nil:
    section.add "quotaUser", valid_582435
  var valid_582436 = query.getOrDefault("fields")
  valid_582436 = validateParameter(valid_582436, JString, required = false,
                                 default = nil)
  if valid_582436 != nil:
    section.add "fields", valid_582436
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582437: Call_DfareportingUserRolePermissionGroupsList_582426;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of all supported user role permission groups.
  ## 
  let valid = call_582437.validator(path, query, header, formData, body)
  let scheme = call_582437.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582437.url(scheme.get, call_582437.host, call_582437.base,
                         call_582437.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582437, url, valid)

proc call*(call_582438: Call_DfareportingUserRolePermissionGroupsList_582426;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingUserRolePermissionGroupsList
  ## Gets a list of all supported user role permission groups.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582439 = newJObject()
  var query_582440 = newJObject()
  add(query_582440, "key", newJString(key))
  add(query_582440, "prettyPrint", newJBool(prettyPrint))
  add(query_582440, "oauth_token", newJString(oauthToken))
  add(path_582439, "profileId", newJString(profileId))
  add(query_582440, "alt", newJString(alt))
  add(query_582440, "userIp", newJString(userIp))
  add(query_582440, "quotaUser", newJString(quotaUser))
  add(query_582440, "fields", newJString(fields))
  result = call_582438.call(path_582439, query_582440, nil, nil, nil)

var dfareportingUserRolePermissionGroupsList* = Call_DfareportingUserRolePermissionGroupsList_582426(
    name: "dfareportingUserRolePermissionGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/userRolePermissionGroups",
    validator: validate_DfareportingUserRolePermissionGroupsList_582427,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolePermissionGroupsList_582428,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolePermissionGroupsGet_582441 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserRolePermissionGroupsGet_582443(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRolePermissionGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolePermissionGroupsGet_582442(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one user role permission group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User role permission group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582444 = path.getOrDefault("profileId")
  valid_582444 = validateParameter(valid_582444, JString, required = true,
                                 default = nil)
  if valid_582444 != nil:
    section.add "profileId", valid_582444
  var valid_582445 = path.getOrDefault("id")
  valid_582445 = validateParameter(valid_582445, JString, required = true,
                                 default = nil)
  if valid_582445 != nil:
    section.add "id", valid_582445
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582446 = query.getOrDefault("key")
  valid_582446 = validateParameter(valid_582446, JString, required = false,
                                 default = nil)
  if valid_582446 != nil:
    section.add "key", valid_582446
  var valid_582447 = query.getOrDefault("prettyPrint")
  valid_582447 = validateParameter(valid_582447, JBool, required = false,
                                 default = newJBool(true))
  if valid_582447 != nil:
    section.add "prettyPrint", valid_582447
  var valid_582448 = query.getOrDefault("oauth_token")
  valid_582448 = validateParameter(valid_582448, JString, required = false,
                                 default = nil)
  if valid_582448 != nil:
    section.add "oauth_token", valid_582448
  var valid_582449 = query.getOrDefault("alt")
  valid_582449 = validateParameter(valid_582449, JString, required = false,
                                 default = newJString("json"))
  if valid_582449 != nil:
    section.add "alt", valid_582449
  var valid_582450 = query.getOrDefault("userIp")
  valid_582450 = validateParameter(valid_582450, JString, required = false,
                                 default = nil)
  if valid_582450 != nil:
    section.add "userIp", valid_582450
  var valid_582451 = query.getOrDefault("quotaUser")
  valid_582451 = validateParameter(valid_582451, JString, required = false,
                                 default = nil)
  if valid_582451 != nil:
    section.add "quotaUser", valid_582451
  var valid_582452 = query.getOrDefault("fields")
  valid_582452 = validateParameter(valid_582452, JString, required = false,
                                 default = nil)
  if valid_582452 != nil:
    section.add "fields", valid_582452
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582453: Call_DfareportingUserRolePermissionGroupsGet_582441;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one user role permission group by ID.
  ## 
  let valid = call_582453.validator(path, query, header, formData, body)
  let scheme = call_582453.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582453.url(scheme.get, call_582453.host, call_582453.base,
                         call_582453.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582453, url, valid)

proc call*(call_582454: Call_DfareportingUserRolePermissionGroupsGet_582441;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingUserRolePermissionGroupsGet
  ## Gets one user role permission group by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : User role permission group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582455 = newJObject()
  var query_582456 = newJObject()
  add(query_582456, "key", newJString(key))
  add(query_582456, "prettyPrint", newJBool(prettyPrint))
  add(query_582456, "oauth_token", newJString(oauthToken))
  add(path_582455, "profileId", newJString(profileId))
  add(path_582455, "id", newJString(id))
  add(query_582456, "alt", newJString(alt))
  add(query_582456, "userIp", newJString(userIp))
  add(query_582456, "quotaUser", newJString(quotaUser))
  add(query_582456, "fields", newJString(fields))
  result = call_582454.call(path_582455, query_582456, nil, nil, nil)

var dfareportingUserRolePermissionGroupsGet* = Call_DfareportingUserRolePermissionGroupsGet_582441(
    name: "dfareportingUserRolePermissionGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/userRolePermissionGroups/{id}",
    validator: validate_DfareportingUserRolePermissionGroupsGet_582442,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolePermissionGroupsGet_582443,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolePermissionsList_582457 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserRolePermissionsList_582459(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRolePermissions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolePermissionsList_582458(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of user role permissions, possibly filtered.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582460 = path.getOrDefault("profileId")
  valid_582460 = validateParameter(valid_582460, JString, required = true,
                                 default = nil)
  if valid_582460 != nil:
    section.add "profileId", valid_582460
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   ids: JArray
  ##      : Select only user role permissions with these IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582461 = query.getOrDefault("key")
  valid_582461 = validateParameter(valid_582461, JString, required = false,
                                 default = nil)
  if valid_582461 != nil:
    section.add "key", valid_582461
  var valid_582462 = query.getOrDefault("prettyPrint")
  valid_582462 = validateParameter(valid_582462, JBool, required = false,
                                 default = newJBool(true))
  if valid_582462 != nil:
    section.add "prettyPrint", valid_582462
  var valid_582463 = query.getOrDefault("oauth_token")
  valid_582463 = validateParameter(valid_582463, JString, required = false,
                                 default = nil)
  if valid_582463 != nil:
    section.add "oauth_token", valid_582463
  var valid_582464 = query.getOrDefault("alt")
  valid_582464 = validateParameter(valid_582464, JString, required = false,
                                 default = newJString("json"))
  if valid_582464 != nil:
    section.add "alt", valid_582464
  var valid_582465 = query.getOrDefault("userIp")
  valid_582465 = validateParameter(valid_582465, JString, required = false,
                                 default = nil)
  if valid_582465 != nil:
    section.add "userIp", valid_582465
  var valid_582466 = query.getOrDefault("quotaUser")
  valid_582466 = validateParameter(valid_582466, JString, required = false,
                                 default = nil)
  if valid_582466 != nil:
    section.add "quotaUser", valid_582466
  var valid_582467 = query.getOrDefault("ids")
  valid_582467 = validateParameter(valid_582467, JArray, required = false,
                                 default = nil)
  if valid_582467 != nil:
    section.add "ids", valid_582467
  var valid_582468 = query.getOrDefault("fields")
  valid_582468 = validateParameter(valid_582468, JString, required = false,
                                 default = nil)
  if valid_582468 != nil:
    section.add "fields", valid_582468
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582469: Call_DfareportingUserRolePermissionsList_582457;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of user role permissions, possibly filtered.
  ## 
  let valid = call_582469.validator(path, query, header, formData, body)
  let scheme = call_582469.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582469.url(scheme.get, call_582469.host, call_582469.base,
                         call_582469.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582469, url, valid)

proc call*(call_582470: Call_DfareportingUserRolePermissionsList_582457;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; ids: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingUserRolePermissionsList
  ## Gets a list of user role permissions, possibly filtered.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   ids: JArray
  ##      : Select only user role permissions with these IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582471 = newJObject()
  var query_582472 = newJObject()
  add(query_582472, "key", newJString(key))
  add(query_582472, "prettyPrint", newJBool(prettyPrint))
  add(query_582472, "oauth_token", newJString(oauthToken))
  add(path_582471, "profileId", newJString(profileId))
  add(query_582472, "alt", newJString(alt))
  add(query_582472, "userIp", newJString(userIp))
  add(query_582472, "quotaUser", newJString(quotaUser))
  if ids != nil:
    query_582472.add "ids", ids
  add(query_582472, "fields", newJString(fields))
  result = call_582470.call(path_582471, query_582472, nil, nil, nil)

var dfareportingUserRolePermissionsList* = Call_DfareportingUserRolePermissionsList_582457(
    name: "dfareportingUserRolePermissionsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/userRolePermissions",
    validator: validate_DfareportingUserRolePermissionsList_582458,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolePermissionsList_582459,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolePermissionsGet_582473 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserRolePermissionsGet_582475(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRolePermissions/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolePermissionsGet_582474(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one user role permission by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User role permission ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582476 = path.getOrDefault("profileId")
  valid_582476 = validateParameter(valid_582476, JString, required = true,
                                 default = nil)
  if valid_582476 != nil:
    section.add "profileId", valid_582476
  var valid_582477 = path.getOrDefault("id")
  valid_582477 = validateParameter(valid_582477, JString, required = true,
                                 default = nil)
  if valid_582477 != nil:
    section.add "id", valid_582477
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582478 = query.getOrDefault("key")
  valid_582478 = validateParameter(valid_582478, JString, required = false,
                                 default = nil)
  if valid_582478 != nil:
    section.add "key", valid_582478
  var valid_582479 = query.getOrDefault("prettyPrint")
  valid_582479 = validateParameter(valid_582479, JBool, required = false,
                                 default = newJBool(true))
  if valid_582479 != nil:
    section.add "prettyPrint", valid_582479
  var valid_582480 = query.getOrDefault("oauth_token")
  valid_582480 = validateParameter(valid_582480, JString, required = false,
                                 default = nil)
  if valid_582480 != nil:
    section.add "oauth_token", valid_582480
  var valid_582481 = query.getOrDefault("alt")
  valid_582481 = validateParameter(valid_582481, JString, required = false,
                                 default = newJString("json"))
  if valid_582481 != nil:
    section.add "alt", valid_582481
  var valid_582482 = query.getOrDefault("userIp")
  valid_582482 = validateParameter(valid_582482, JString, required = false,
                                 default = nil)
  if valid_582482 != nil:
    section.add "userIp", valid_582482
  var valid_582483 = query.getOrDefault("quotaUser")
  valid_582483 = validateParameter(valid_582483, JString, required = false,
                                 default = nil)
  if valid_582483 != nil:
    section.add "quotaUser", valid_582483
  var valid_582484 = query.getOrDefault("fields")
  valid_582484 = validateParameter(valid_582484, JString, required = false,
                                 default = nil)
  if valid_582484 != nil:
    section.add "fields", valid_582484
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582485: Call_DfareportingUserRolePermissionsGet_582473;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one user role permission by ID.
  ## 
  let valid = call_582485.validator(path, query, header, formData, body)
  let scheme = call_582485.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582485.url(scheme.get, call_582485.host, call_582485.base,
                         call_582485.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582485, url, valid)

proc call*(call_582486: Call_DfareportingUserRolePermissionsGet_582473;
          profileId: string; id: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingUserRolePermissionsGet
  ## Gets one user role permission by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : User role permission ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582487 = newJObject()
  var query_582488 = newJObject()
  add(query_582488, "key", newJString(key))
  add(query_582488, "prettyPrint", newJBool(prettyPrint))
  add(query_582488, "oauth_token", newJString(oauthToken))
  add(path_582487, "profileId", newJString(profileId))
  add(path_582487, "id", newJString(id))
  add(query_582488, "alt", newJString(alt))
  add(query_582488, "userIp", newJString(userIp))
  add(query_582488, "quotaUser", newJString(quotaUser))
  add(query_582488, "fields", newJString(fields))
  result = call_582486.call(path_582487, query_582488, nil, nil, nil)

var dfareportingUserRolePermissionsGet* = Call_DfareportingUserRolePermissionsGet_582473(
    name: "dfareportingUserRolePermissionsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/userRolePermissions/{id}",
    validator: validate_DfareportingUserRolePermissionsGet_582474,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolePermissionsGet_582475,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesUpdate_582512 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserRolesUpdate_582514(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesUpdate_582513(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing user role.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582515 = path.getOrDefault("profileId")
  valid_582515 = validateParameter(valid_582515, JString, required = true,
                                 default = nil)
  if valid_582515 != nil:
    section.add "profileId", valid_582515
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582516 = query.getOrDefault("key")
  valid_582516 = validateParameter(valid_582516, JString, required = false,
                                 default = nil)
  if valid_582516 != nil:
    section.add "key", valid_582516
  var valid_582517 = query.getOrDefault("prettyPrint")
  valid_582517 = validateParameter(valid_582517, JBool, required = false,
                                 default = newJBool(true))
  if valid_582517 != nil:
    section.add "prettyPrint", valid_582517
  var valid_582518 = query.getOrDefault("oauth_token")
  valid_582518 = validateParameter(valid_582518, JString, required = false,
                                 default = nil)
  if valid_582518 != nil:
    section.add "oauth_token", valid_582518
  var valid_582519 = query.getOrDefault("alt")
  valid_582519 = validateParameter(valid_582519, JString, required = false,
                                 default = newJString("json"))
  if valid_582519 != nil:
    section.add "alt", valid_582519
  var valid_582520 = query.getOrDefault("userIp")
  valid_582520 = validateParameter(valid_582520, JString, required = false,
                                 default = nil)
  if valid_582520 != nil:
    section.add "userIp", valid_582520
  var valid_582521 = query.getOrDefault("quotaUser")
  valid_582521 = validateParameter(valid_582521, JString, required = false,
                                 default = nil)
  if valid_582521 != nil:
    section.add "quotaUser", valid_582521
  var valid_582522 = query.getOrDefault("fields")
  valid_582522 = validateParameter(valid_582522, JString, required = false,
                                 default = nil)
  if valid_582522 != nil:
    section.add "fields", valid_582522
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582524: Call_DfareportingUserRolesUpdate_582512; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing user role.
  ## 
  let valid = call_582524.validator(path, query, header, formData, body)
  let scheme = call_582524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582524.url(scheme.get, call_582524.host, call_582524.base,
                         call_582524.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582524, url, valid)

proc call*(call_582525: Call_DfareportingUserRolesUpdate_582512; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingUserRolesUpdate
  ## Updates an existing user role.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582526 = newJObject()
  var query_582527 = newJObject()
  var body_582528 = newJObject()
  add(query_582527, "key", newJString(key))
  add(query_582527, "prettyPrint", newJBool(prettyPrint))
  add(query_582527, "oauth_token", newJString(oauthToken))
  add(path_582526, "profileId", newJString(profileId))
  add(query_582527, "alt", newJString(alt))
  add(query_582527, "userIp", newJString(userIp))
  add(query_582527, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_582528 = body
  add(query_582527, "fields", newJString(fields))
  result = call_582525.call(path_582526, query_582527, nil, nil, body_582528)

var dfareportingUserRolesUpdate* = Call_DfareportingUserRolesUpdate_582512(
    name: "dfareportingUserRolesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles",
    validator: validate_DfareportingUserRolesUpdate_582513,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesUpdate_582514,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesInsert_582529 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserRolesInsert_582531(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesInsert_582530(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new user role.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582532 = path.getOrDefault("profileId")
  valid_582532 = validateParameter(valid_582532, JString, required = true,
                                 default = nil)
  if valid_582532 != nil:
    section.add "profileId", valid_582532
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582533 = query.getOrDefault("key")
  valid_582533 = validateParameter(valid_582533, JString, required = false,
                                 default = nil)
  if valid_582533 != nil:
    section.add "key", valid_582533
  var valid_582534 = query.getOrDefault("prettyPrint")
  valid_582534 = validateParameter(valid_582534, JBool, required = false,
                                 default = newJBool(true))
  if valid_582534 != nil:
    section.add "prettyPrint", valid_582534
  var valid_582535 = query.getOrDefault("oauth_token")
  valid_582535 = validateParameter(valid_582535, JString, required = false,
                                 default = nil)
  if valid_582535 != nil:
    section.add "oauth_token", valid_582535
  var valid_582536 = query.getOrDefault("alt")
  valid_582536 = validateParameter(valid_582536, JString, required = false,
                                 default = newJString("json"))
  if valid_582536 != nil:
    section.add "alt", valid_582536
  var valid_582537 = query.getOrDefault("userIp")
  valid_582537 = validateParameter(valid_582537, JString, required = false,
                                 default = nil)
  if valid_582537 != nil:
    section.add "userIp", valid_582537
  var valid_582538 = query.getOrDefault("quotaUser")
  valid_582538 = validateParameter(valid_582538, JString, required = false,
                                 default = nil)
  if valid_582538 != nil:
    section.add "quotaUser", valid_582538
  var valid_582539 = query.getOrDefault("fields")
  valid_582539 = validateParameter(valid_582539, JString, required = false,
                                 default = nil)
  if valid_582539 != nil:
    section.add "fields", valid_582539
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582541: Call_DfareportingUserRolesInsert_582529; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new user role.
  ## 
  let valid = call_582541.validator(path, query, header, formData, body)
  let scheme = call_582541.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582541.url(scheme.get, call_582541.host, call_582541.base,
                         call_582541.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582541, url, valid)

proc call*(call_582542: Call_DfareportingUserRolesInsert_582529; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingUserRolesInsert
  ## Inserts a new user role.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582543 = newJObject()
  var query_582544 = newJObject()
  var body_582545 = newJObject()
  add(query_582544, "key", newJString(key))
  add(query_582544, "prettyPrint", newJBool(prettyPrint))
  add(query_582544, "oauth_token", newJString(oauthToken))
  add(path_582543, "profileId", newJString(profileId))
  add(query_582544, "alt", newJString(alt))
  add(query_582544, "userIp", newJString(userIp))
  add(query_582544, "quotaUser", newJString(quotaUser))
  if body != nil:
    body_582545 = body
  add(query_582544, "fields", newJString(fields))
  result = call_582542.call(path_582543, query_582544, nil, nil, body_582545)

var dfareportingUserRolesInsert* = Call_DfareportingUserRolesInsert_582529(
    name: "dfareportingUserRolesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles",
    validator: validate_DfareportingUserRolesInsert_582530,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesInsert_582531,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesList_582489 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserRolesList_582491(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesList_582490(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of user roles, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582492 = path.getOrDefault("profileId")
  valid_582492 = validateParameter(valid_582492, JString, required = true,
                                 default = nil)
  if valid_582492 != nil:
    section.add "profileId", valid_582492
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "userrole*2015" will return objects with names like "userrole June 2015", "userrole April 2015", or simply "userrole 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "userrole" will match objects with name "my userrole", "userrole 2015", or simply "userrole".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   subaccountId: JString
  ##               : Select only user roles that belong to this subaccount.
  ##   ids: JArray
  ##      : Select only user roles with the specified IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   accountUserRoleOnly: JBool
  ##                      : Select only account level user roles not associated with any specific subaccount.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  section = newJObject()
  var valid_582493 = query.getOrDefault("key")
  valid_582493 = validateParameter(valid_582493, JString, required = false,
                                 default = nil)
  if valid_582493 != nil:
    section.add "key", valid_582493
  var valid_582494 = query.getOrDefault("prettyPrint")
  valid_582494 = validateParameter(valid_582494, JBool, required = false,
                                 default = newJBool(true))
  if valid_582494 != nil:
    section.add "prettyPrint", valid_582494
  var valid_582495 = query.getOrDefault("oauth_token")
  valid_582495 = validateParameter(valid_582495, JString, required = false,
                                 default = nil)
  if valid_582495 != nil:
    section.add "oauth_token", valid_582495
  var valid_582496 = query.getOrDefault("sortField")
  valid_582496 = validateParameter(valid_582496, JString, required = false,
                                 default = newJString("ID"))
  if valid_582496 != nil:
    section.add "sortField", valid_582496
  var valid_582497 = query.getOrDefault("alt")
  valid_582497 = validateParameter(valid_582497, JString, required = false,
                                 default = newJString("json"))
  if valid_582497 != nil:
    section.add "alt", valid_582497
  var valid_582498 = query.getOrDefault("userIp")
  valid_582498 = validateParameter(valid_582498, JString, required = false,
                                 default = nil)
  if valid_582498 != nil:
    section.add "userIp", valid_582498
  var valid_582499 = query.getOrDefault("quotaUser")
  valid_582499 = validateParameter(valid_582499, JString, required = false,
                                 default = nil)
  if valid_582499 != nil:
    section.add "quotaUser", valid_582499
  var valid_582500 = query.getOrDefault("pageToken")
  valid_582500 = validateParameter(valid_582500, JString, required = false,
                                 default = nil)
  if valid_582500 != nil:
    section.add "pageToken", valid_582500
  var valid_582501 = query.getOrDefault("searchString")
  valid_582501 = validateParameter(valid_582501, JString, required = false,
                                 default = nil)
  if valid_582501 != nil:
    section.add "searchString", valid_582501
  var valid_582502 = query.getOrDefault("sortOrder")
  valid_582502 = validateParameter(valid_582502, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_582502 != nil:
    section.add "sortOrder", valid_582502
  var valid_582503 = query.getOrDefault("subaccountId")
  valid_582503 = validateParameter(valid_582503, JString, required = false,
                                 default = nil)
  if valid_582503 != nil:
    section.add "subaccountId", valid_582503
  var valid_582504 = query.getOrDefault("ids")
  valid_582504 = validateParameter(valid_582504, JArray, required = false,
                                 default = nil)
  if valid_582504 != nil:
    section.add "ids", valid_582504
  var valid_582505 = query.getOrDefault("fields")
  valid_582505 = validateParameter(valid_582505, JString, required = false,
                                 default = nil)
  if valid_582505 != nil:
    section.add "fields", valid_582505
  var valid_582506 = query.getOrDefault("accountUserRoleOnly")
  valid_582506 = validateParameter(valid_582506, JBool, required = false, default = nil)
  if valid_582506 != nil:
    section.add "accountUserRoleOnly", valid_582506
  var valid_582507 = query.getOrDefault("maxResults")
  valid_582507 = validateParameter(valid_582507, JInt, required = false,
                                 default = newJInt(1000))
  if valid_582507 != nil:
    section.add "maxResults", valid_582507
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582508: Call_DfareportingUserRolesList_582489; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of user roles, possibly filtered. This method supports paging.
  ## 
  let valid = call_582508.validator(path, query, header, formData, body)
  let scheme = call_582508.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582508.url(scheme.get, call_582508.host, call_582508.base,
                         call_582508.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582508, url, valid)

proc call*(call_582509: Call_DfareportingUserRolesList_582489; profileId: string;
          key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          sortField: string = "ID"; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; pageToken: string = ""; searchString: string = "";
          sortOrder: string = "ASCENDING"; subaccountId: string = "";
          ids: JsonNode = nil; fields: string = ""; accountUserRoleOnly: bool = false;
          maxResults: int = 1000): Recallable =
  ## dfareportingUserRolesList
  ## Retrieves a list of user roles, possibly filtered. This method supports paging.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "userrole*2015" will return objects with names like "userrole June 2015", "userrole April 2015", or simply "userrole 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "userrole" will match objects with name "my userrole", "userrole 2015", or simply "userrole".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   subaccountId: string
  ##               : Select only user roles that belong to this subaccount.
  ##   ids: JArray
  ##      : Select only user roles with the specified IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   accountUserRoleOnly: bool
  ##                      : Select only account level user roles not associated with any specific subaccount.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  var path_582510 = newJObject()
  var query_582511 = newJObject()
  add(query_582511, "key", newJString(key))
  add(query_582511, "prettyPrint", newJBool(prettyPrint))
  add(query_582511, "oauth_token", newJString(oauthToken))
  add(path_582510, "profileId", newJString(profileId))
  add(query_582511, "sortField", newJString(sortField))
  add(query_582511, "alt", newJString(alt))
  add(query_582511, "userIp", newJString(userIp))
  add(query_582511, "quotaUser", newJString(quotaUser))
  add(query_582511, "pageToken", newJString(pageToken))
  add(query_582511, "searchString", newJString(searchString))
  add(query_582511, "sortOrder", newJString(sortOrder))
  add(query_582511, "subaccountId", newJString(subaccountId))
  if ids != nil:
    query_582511.add "ids", ids
  add(query_582511, "fields", newJString(fields))
  add(query_582511, "accountUserRoleOnly", newJBool(accountUserRoleOnly))
  add(query_582511, "maxResults", newJInt(maxResults))
  result = call_582509.call(path_582510, query_582511, nil, nil, nil)

var dfareportingUserRolesList* = Call_DfareportingUserRolesList_582489(
    name: "dfareportingUserRolesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles",
    validator: validate_DfareportingUserRolesList_582490,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesList_582491,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesPatch_582546 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserRolesPatch_582548(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesPatch_582547(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing user role. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582549 = path.getOrDefault("profileId")
  valid_582549 = validateParameter(valid_582549, JString, required = true,
                                 default = nil)
  if valid_582549 != nil:
    section.add "profileId", valid_582549
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : User role ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582550 = query.getOrDefault("key")
  valid_582550 = validateParameter(valid_582550, JString, required = false,
                                 default = nil)
  if valid_582550 != nil:
    section.add "key", valid_582550
  var valid_582551 = query.getOrDefault("prettyPrint")
  valid_582551 = validateParameter(valid_582551, JBool, required = false,
                                 default = newJBool(true))
  if valid_582551 != nil:
    section.add "prettyPrint", valid_582551
  var valid_582552 = query.getOrDefault("oauth_token")
  valid_582552 = validateParameter(valid_582552, JString, required = false,
                                 default = nil)
  if valid_582552 != nil:
    section.add "oauth_token", valid_582552
  var valid_582553 = query.getOrDefault("alt")
  valid_582553 = validateParameter(valid_582553, JString, required = false,
                                 default = newJString("json"))
  if valid_582553 != nil:
    section.add "alt", valid_582553
  var valid_582554 = query.getOrDefault("userIp")
  valid_582554 = validateParameter(valid_582554, JString, required = false,
                                 default = nil)
  if valid_582554 != nil:
    section.add "userIp", valid_582554
  var valid_582555 = query.getOrDefault("quotaUser")
  valid_582555 = validateParameter(valid_582555, JString, required = false,
                                 default = nil)
  if valid_582555 != nil:
    section.add "quotaUser", valid_582555
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_582556 = query.getOrDefault("id")
  valid_582556 = validateParameter(valid_582556, JString, required = true,
                                 default = nil)
  if valid_582556 != nil:
    section.add "id", valid_582556
  var valid_582557 = query.getOrDefault("fields")
  valid_582557 = validateParameter(valid_582557, JString, required = false,
                                 default = nil)
  if valid_582557 != nil:
    section.add "fields", valid_582557
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_582559: Call_DfareportingUserRolesPatch_582546; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing user role. This method supports patch semantics.
  ## 
  let valid = call_582559.validator(path, query, header, formData, body)
  let scheme = call_582559.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582559.url(scheme.get, call_582559.host, call_582559.base,
                         call_582559.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582559, url, valid)

proc call*(call_582560: Call_DfareportingUserRolesPatch_582546; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          body: JsonNode = nil; fields: string = ""): Recallable =
  ## dfareportingUserRolesPatch
  ## Updates an existing user role. This method supports patch semantics.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : User role ID.
  ##   body: JObject
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582561 = newJObject()
  var query_582562 = newJObject()
  var body_582563 = newJObject()
  add(query_582562, "key", newJString(key))
  add(query_582562, "prettyPrint", newJBool(prettyPrint))
  add(query_582562, "oauth_token", newJString(oauthToken))
  add(path_582561, "profileId", newJString(profileId))
  add(query_582562, "alt", newJString(alt))
  add(query_582562, "userIp", newJString(userIp))
  add(query_582562, "quotaUser", newJString(quotaUser))
  add(query_582562, "id", newJString(id))
  if body != nil:
    body_582563 = body
  add(query_582562, "fields", newJString(fields))
  result = call_582560.call(path_582561, query_582562, nil, nil, body_582563)

var dfareportingUserRolesPatch* = Call_DfareportingUserRolesPatch_582546(
    name: "dfareportingUserRolesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles",
    validator: validate_DfareportingUserRolesPatch_582547,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesPatch_582548,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesGet_582564 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserRolesGet_582566(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesGet_582565(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one user role by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User role ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582567 = path.getOrDefault("profileId")
  valid_582567 = validateParameter(valid_582567, JString, required = true,
                                 default = nil)
  if valid_582567 != nil:
    section.add "profileId", valid_582567
  var valid_582568 = path.getOrDefault("id")
  valid_582568 = validateParameter(valid_582568, JString, required = true,
                                 default = nil)
  if valid_582568 != nil:
    section.add "id", valid_582568
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582569 = query.getOrDefault("key")
  valid_582569 = validateParameter(valid_582569, JString, required = false,
                                 default = nil)
  if valid_582569 != nil:
    section.add "key", valid_582569
  var valid_582570 = query.getOrDefault("prettyPrint")
  valid_582570 = validateParameter(valid_582570, JBool, required = false,
                                 default = newJBool(true))
  if valid_582570 != nil:
    section.add "prettyPrint", valid_582570
  var valid_582571 = query.getOrDefault("oauth_token")
  valid_582571 = validateParameter(valid_582571, JString, required = false,
                                 default = nil)
  if valid_582571 != nil:
    section.add "oauth_token", valid_582571
  var valid_582572 = query.getOrDefault("alt")
  valid_582572 = validateParameter(valid_582572, JString, required = false,
                                 default = newJString("json"))
  if valid_582572 != nil:
    section.add "alt", valid_582572
  var valid_582573 = query.getOrDefault("userIp")
  valid_582573 = validateParameter(valid_582573, JString, required = false,
                                 default = nil)
  if valid_582573 != nil:
    section.add "userIp", valid_582573
  var valid_582574 = query.getOrDefault("quotaUser")
  valid_582574 = validateParameter(valid_582574, JString, required = false,
                                 default = nil)
  if valid_582574 != nil:
    section.add "quotaUser", valid_582574
  var valid_582575 = query.getOrDefault("fields")
  valid_582575 = validateParameter(valid_582575, JString, required = false,
                                 default = nil)
  if valid_582575 != nil:
    section.add "fields", valid_582575
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582576: Call_DfareportingUserRolesGet_582564; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one user role by ID.
  ## 
  let valid = call_582576.validator(path, query, header, formData, body)
  let scheme = call_582576.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582576.url(scheme.get, call_582576.host, call_582576.base,
                         call_582576.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582576, url, valid)

proc call*(call_582577: Call_DfareportingUserRolesGet_582564; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingUserRolesGet
  ## Gets one user role by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : User role ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582578 = newJObject()
  var query_582579 = newJObject()
  add(query_582579, "key", newJString(key))
  add(query_582579, "prettyPrint", newJBool(prettyPrint))
  add(query_582579, "oauth_token", newJString(oauthToken))
  add(path_582578, "profileId", newJString(profileId))
  add(path_582578, "id", newJString(id))
  add(query_582579, "alt", newJString(alt))
  add(query_582579, "userIp", newJString(userIp))
  add(query_582579, "quotaUser", newJString(quotaUser))
  add(query_582579, "fields", newJString(fields))
  result = call_582577.call(path_582578, query_582579, nil, nil, nil)

var dfareportingUserRolesGet* = Call_DfareportingUserRolesGet_582564(
    name: "dfareportingUserRolesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles/{id}",
    validator: validate_DfareportingUserRolesGet_582565,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesGet_582566,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesDelete_582580 = ref object of OpenApiRestCall_578364
proc url_DfareportingUserRolesDelete_582582(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesDelete_582581(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing user role.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User role ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582583 = path.getOrDefault("profileId")
  valid_582583 = validateParameter(valid_582583, JString, required = true,
                                 default = nil)
  if valid_582583 != nil:
    section.add "profileId", valid_582583
  var valid_582584 = path.getOrDefault("id")
  valid_582584 = validateParameter(valid_582584, JString, required = true,
                                 default = nil)
  if valid_582584 != nil:
    section.add "id", valid_582584
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582585 = query.getOrDefault("key")
  valid_582585 = validateParameter(valid_582585, JString, required = false,
                                 default = nil)
  if valid_582585 != nil:
    section.add "key", valid_582585
  var valid_582586 = query.getOrDefault("prettyPrint")
  valid_582586 = validateParameter(valid_582586, JBool, required = false,
                                 default = newJBool(true))
  if valid_582586 != nil:
    section.add "prettyPrint", valid_582586
  var valid_582587 = query.getOrDefault("oauth_token")
  valid_582587 = validateParameter(valid_582587, JString, required = false,
                                 default = nil)
  if valid_582587 != nil:
    section.add "oauth_token", valid_582587
  var valid_582588 = query.getOrDefault("alt")
  valid_582588 = validateParameter(valid_582588, JString, required = false,
                                 default = newJString("json"))
  if valid_582588 != nil:
    section.add "alt", valid_582588
  var valid_582589 = query.getOrDefault("userIp")
  valid_582589 = validateParameter(valid_582589, JString, required = false,
                                 default = nil)
  if valid_582589 != nil:
    section.add "userIp", valid_582589
  var valid_582590 = query.getOrDefault("quotaUser")
  valid_582590 = validateParameter(valid_582590, JString, required = false,
                                 default = nil)
  if valid_582590 != nil:
    section.add "quotaUser", valid_582590
  var valid_582591 = query.getOrDefault("fields")
  valid_582591 = validateParameter(valid_582591, JString, required = false,
                                 default = nil)
  if valid_582591 != nil:
    section.add "fields", valid_582591
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582592: Call_DfareportingUserRolesDelete_582580; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing user role.
  ## 
  let valid = call_582592.validator(path, query, header, formData, body)
  let scheme = call_582592.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582592.url(scheme.get, call_582592.host, call_582592.base,
                         call_582592.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582592, url, valid)

proc call*(call_582593: Call_DfareportingUserRolesDelete_582580; profileId: string;
          id: string; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingUserRolesDelete
  ## Deletes an existing user role.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: string (required)
  ##     : User role ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582594 = newJObject()
  var query_582595 = newJObject()
  add(query_582595, "key", newJString(key))
  add(query_582595, "prettyPrint", newJBool(prettyPrint))
  add(query_582595, "oauth_token", newJString(oauthToken))
  add(path_582594, "profileId", newJString(profileId))
  add(path_582594, "id", newJString(id))
  add(query_582595, "alt", newJString(alt))
  add(query_582595, "userIp", newJString(userIp))
  add(query_582595, "quotaUser", newJString(quotaUser))
  add(query_582595, "fields", newJString(fields))
  result = call_582593.call(path_582594, query_582595, nil, nil, nil)

var dfareportingUserRolesDelete* = Call_DfareportingUserRolesDelete_582580(
    name: "dfareportingUserRolesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles/{id}",
    validator: validate_DfareportingUserRolesDelete_582581,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesDelete_582582,
    schemes: {Scheme.Https})
type
  Call_DfareportingVideoFormatsList_582596 = ref object of OpenApiRestCall_578364
proc url_DfareportingVideoFormatsList_582598(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/videoFormats")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingVideoFormatsList_582597(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available video formats.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582599 = path.getOrDefault("profileId")
  valid_582599 = validateParameter(valid_582599, JString, required = true,
                                 default = nil)
  if valid_582599 != nil:
    section.add "profileId", valid_582599
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582600 = query.getOrDefault("key")
  valid_582600 = validateParameter(valid_582600, JString, required = false,
                                 default = nil)
  if valid_582600 != nil:
    section.add "key", valid_582600
  var valid_582601 = query.getOrDefault("prettyPrint")
  valid_582601 = validateParameter(valid_582601, JBool, required = false,
                                 default = newJBool(true))
  if valid_582601 != nil:
    section.add "prettyPrint", valid_582601
  var valid_582602 = query.getOrDefault("oauth_token")
  valid_582602 = validateParameter(valid_582602, JString, required = false,
                                 default = nil)
  if valid_582602 != nil:
    section.add "oauth_token", valid_582602
  var valid_582603 = query.getOrDefault("alt")
  valid_582603 = validateParameter(valid_582603, JString, required = false,
                                 default = newJString("json"))
  if valid_582603 != nil:
    section.add "alt", valid_582603
  var valid_582604 = query.getOrDefault("userIp")
  valid_582604 = validateParameter(valid_582604, JString, required = false,
                                 default = nil)
  if valid_582604 != nil:
    section.add "userIp", valid_582604
  var valid_582605 = query.getOrDefault("quotaUser")
  valid_582605 = validateParameter(valid_582605, JString, required = false,
                                 default = nil)
  if valid_582605 != nil:
    section.add "quotaUser", valid_582605
  var valid_582606 = query.getOrDefault("fields")
  valid_582606 = validateParameter(valid_582606, JString, required = false,
                                 default = nil)
  if valid_582606 != nil:
    section.add "fields", valid_582606
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582607: Call_DfareportingVideoFormatsList_582596; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists available video formats.
  ## 
  let valid = call_582607.validator(path, query, header, formData, body)
  let scheme = call_582607.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582607.url(scheme.get, call_582607.host, call_582607.base,
                         call_582607.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582607, url, valid)

proc call*(call_582608: Call_DfareportingVideoFormatsList_582596;
          profileId: string; key: string = ""; prettyPrint: bool = true;
          oauthToken: string = ""; alt: string = "json"; userIp: string = "";
          quotaUser: string = ""; fields: string = ""): Recallable =
  ## dfareportingVideoFormatsList
  ## Lists available video formats.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582609 = newJObject()
  var query_582610 = newJObject()
  add(query_582610, "key", newJString(key))
  add(query_582610, "prettyPrint", newJBool(prettyPrint))
  add(query_582610, "oauth_token", newJString(oauthToken))
  add(path_582609, "profileId", newJString(profileId))
  add(query_582610, "alt", newJString(alt))
  add(query_582610, "userIp", newJString(userIp))
  add(query_582610, "quotaUser", newJString(quotaUser))
  add(query_582610, "fields", newJString(fields))
  result = call_582608.call(path_582609, query_582610, nil, nil, nil)

var dfareportingVideoFormatsList* = Call_DfareportingVideoFormatsList_582596(
    name: "dfareportingVideoFormatsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/videoFormats",
    validator: validate_DfareportingVideoFormatsList_582597,
    base: "/dfareporting/v3.2", url: url_DfareportingVideoFormatsList_582598,
    schemes: {Scheme.Https})
type
  Call_DfareportingVideoFormatsGet_582611 = ref object of OpenApiRestCall_578364
proc url_DfareportingVideoFormatsGet_582613(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/videoFormats/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingVideoFormatsGet_582612(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one video format by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JInt (required)
  ##     : Video format ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_582614 = path.getOrDefault("profileId")
  valid_582614 = validateParameter(valid_582614, JString, required = true,
                                 default = nil)
  if valid_582614 != nil:
    section.add "profileId", valid_582614
  var valid_582615 = path.getOrDefault("id")
  valid_582615 = validateParameter(valid_582615, JInt, required = true, default = nil)
  if valid_582615 != nil:
    section.add "id", valid_582615
  result.add "path", section
  ## parameters in `query` object:
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   alt: JString
  ##      : Data format for the response.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  section = newJObject()
  var valid_582616 = query.getOrDefault("key")
  valid_582616 = validateParameter(valid_582616, JString, required = false,
                                 default = nil)
  if valid_582616 != nil:
    section.add "key", valid_582616
  var valid_582617 = query.getOrDefault("prettyPrint")
  valid_582617 = validateParameter(valid_582617, JBool, required = false,
                                 default = newJBool(true))
  if valid_582617 != nil:
    section.add "prettyPrint", valid_582617
  var valid_582618 = query.getOrDefault("oauth_token")
  valid_582618 = validateParameter(valid_582618, JString, required = false,
                                 default = nil)
  if valid_582618 != nil:
    section.add "oauth_token", valid_582618
  var valid_582619 = query.getOrDefault("alt")
  valid_582619 = validateParameter(valid_582619, JString, required = false,
                                 default = newJString("json"))
  if valid_582619 != nil:
    section.add "alt", valid_582619
  var valid_582620 = query.getOrDefault("userIp")
  valid_582620 = validateParameter(valid_582620, JString, required = false,
                                 default = nil)
  if valid_582620 != nil:
    section.add "userIp", valid_582620
  var valid_582621 = query.getOrDefault("quotaUser")
  valid_582621 = validateParameter(valid_582621, JString, required = false,
                                 default = nil)
  if valid_582621 != nil:
    section.add "quotaUser", valid_582621
  var valid_582622 = query.getOrDefault("fields")
  valid_582622 = validateParameter(valid_582622, JString, required = false,
                                 default = nil)
  if valid_582622 != nil:
    section.add "fields", valid_582622
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_582623: Call_DfareportingVideoFormatsGet_582611; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one video format by ID.
  ## 
  let valid = call_582623.validator(path, query, header, formData, body)
  let scheme = call_582623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_582623.url(scheme.get, call_582623.host, call_582623.base,
                         call_582623.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_582623, url, valid)

proc call*(call_582624: Call_DfareportingVideoFormatsGet_582611; profileId: string;
          id: int; key: string = ""; prettyPrint: bool = true; oauthToken: string = "";
          alt: string = "json"; userIp: string = ""; quotaUser: string = "";
          fields: string = ""): Recallable =
  ## dfareportingVideoFormatsGet
  ## Gets one video format by ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   id: int (required)
  ##     : Video format ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  var path_582625 = newJObject()
  var query_582626 = newJObject()
  add(query_582626, "key", newJString(key))
  add(query_582626, "prettyPrint", newJBool(prettyPrint))
  add(query_582626, "oauth_token", newJString(oauthToken))
  add(path_582625, "profileId", newJString(profileId))
  add(path_582625, "id", newJInt(id))
  add(query_582626, "alt", newJString(alt))
  add(query_582626, "userIp", newJString(userIp))
  add(query_582626, "quotaUser", newJString(quotaUser))
  add(query_582626, "fields", newJString(fields))
  result = call_582624.call(path_582625, query_582626, nil, nil, nil)

var dfareportingVideoFormatsGet* = Call_DfareportingVideoFormatsGet_582611(
    name: "dfareportingVideoFormatsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/videoFormats/{id}",
    validator: validate_DfareportingVideoFormatsGet_582612,
    base: "/dfareporting/v3.2", url: url_DfareportingVideoFormatsGet_582613,
    schemes: {Scheme.Https})
export
  rest

type
  GoogleAuth = ref object
    endpoint*: Uri
    token: string
    expiry*: float64
    issued*: float64
    email: string
    key: string
    scope*: seq[string]
    form: string
    digest: Hash

const
  endpoint = "https://www.googleapis.com/oauth2/v4/token".parseUri
var auth = GoogleAuth(endpoint: endpoint)
proc hash(auth: GoogleAuth): Hash =
  ## yield differing values for effectively different auth payloads
  result = hash($auth.endpoint)
  result = result !& hash(auth.email)
  result = result !& hash(auth.key)
  result = result !& hash(auth.scope.join(" "))
  result = !$result

proc newAuthenticator*(path: string): GoogleAuth =
  let
    input = readFile(path)
    js = parseJson(input)
  auth.email = js["client_email"].getStr
  auth.key = js["private_key"].getStr
  result = auth

proc store(auth: var GoogleAuth; token: string; expiry: int; form: string) =
  auth.token = token
  auth.issued = epochTime()
  auth.expiry = auth.issued + expiry.float64
  auth.form = form
  auth.digest = auth.hash

proc authenticate*(fresh: float64 = 3600.0; lifetime: int = 3600): Future[bool] {.async.} =
  ## get or refresh an authentication token; provide `fresh`
  ## to ensure that the token won't expire in the next N seconds.
  ## provide `lifetime` to indicate how long the token should last.
  let clock = epochTime()
  if auth.expiry > clock + fresh:
    if auth.hash == auth.digest:
      return true
  let
    expiry = clock.int + lifetime
    header = JOSEHeader(alg: RS256, typ: "JWT")
    claims = %*{"iss": auth.email, "scope": auth.scope.join(" "),
              "aud": "https://www.googleapis.com/oauth2/v4/token", "exp": expiry,
              "iat": clock.int}
  var tok = JWT(header: header, claims: toClaims(claims))
  tok.sign(auth.key)
  let post = encodeQuery({"grant_type": "urn:ietf:params:oauth:grant-type:jwt-bearer",
                       "assertion": $tok}, usePlus = false, omitEq = false)
  var client = newAsyncHttpClient()
  client.headers = newHttpHeaders({"Content-Type": "application/x-www-form-urlencoded",
                                 "Content-Length": $post.len})
  let response = await client.request($auth.endpoint, HttpPost, body = post)
  if not response.code.is2xx:
    return false
  let body = await response.body
  client.close
  try:
    let js = parseJson(body)
    auth.store(js["access_token"].getStr, js["expires_in"].getInt,
               js["token_type"].getStr)
  except KeyError:
    return false
  except JsonParsingError:
    return false
  return true

proc composeQueryString(query: JsonNode): string =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs, usePlus = false, omitEq = false)

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  var headers = massageHeaders(input.getOrDefault("header"))
  let body = input.getOrDefault("body").getStr
  if auth.scope.len == 0:
    raise newException(ValueError, "specify authentication scopes")
  if not waitfor authenticate(fresh = 10.0):
    raise newException(IOError, "unable to refresh authentication token")
  headers.add ("Authorization", auth.form & " " & auth.token)
  headers.add ("Content-Type", "application/json")
  headers.add ("Content-Length", $body.len)
  result = newRecallable(call, url, headers, body = body)
