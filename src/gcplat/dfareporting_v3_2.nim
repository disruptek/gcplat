
import
  json, options, hashes, uri, rest, os, uri, strutils, times, httpcore, httpclient,
  asyncdispatch, jwt

## auto-generated via openapi macro
## title: DCM/DFA Reporting And Trafficking
## version: v3.2
## termsOfService: https://developers.google.com/terms/
## license:
##     name: Creative Commons Attribution 3.0
##     url: http://creativecommons.org/licenses/by/3.0/
## 
## Manages your DoubleClick Campaign Manager ad campaigns and reports.
## 
## https://developers.google.com/doubleclick-advertisers/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_588466 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_588466](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_588466): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  gcpServiceName = "dfareporting"
proc composeQueryString(query: JsonNode): string
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_DfareportingFilesGet_588735 = ref object of OpenApiRestCall_588466
proc url_DfareportingFilesGet_588737(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "reportId" in path, "`reportId` is a required path parameter"
  assert "fileId" in path, "`fileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId"),
               (kind: ConstantSegment, value: "/files/"),
               (kind: VariableSegment, value: "fileId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFilesGet_588736(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a report file by its report ID and file ID. This method supports media download.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   fileId: JString (required)
  ##         : The ID of the report file.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `fileId` field"
  var valid_588863 = path.getOrDefault("fileId")
  valid_588863 = validateParameter(valid_588863, JString, required = true,
                                 default = nil)
  if valid_588863 != nil:
    section.add "fileId", valid_588863
  var valid_588864 = path.getOrDefault("reportId")
  valid_588864 = validateParameter(valid_588864, JString, required = true,
                                 default = nil)
  if valid_588864 != nil:
    section.add "reportId", valid_588864
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_588865 = query.getOrDefault("fields")
  valid_588865 = validateParameter(valid_588865, JString, required = false,
                                 default = nil)
  if valid_588865 != nil:
    section.add "fields", valid_588865
  var valid_588866 = query.getOrDefault("quotaUser")
  valid_588866 = validateParameter(valid_588866, JString, required = false,
                                 default = nil)
  if valid_588866 != nil:
    section.add "quotaUser", valid_588866
  var valid_588880 = query.getOrDefault("alt")
  valid_588880 = validateParameter(valid_588880, JString, required = false,
                                 default = newJString("json"))
  if valid_588880 != nil:
    section.add "alt", valid_588880
  var valid_588881 = query.getOrDefault("oauth_token")
  valid_588881 = validateParameter(valid_588881, JString, required = false,
                                 default = nil)
  if valid_588881 != nil:
    section.add "oauth_token", valid_588881
  var valid_588882 = query.getOrDefault("userIp")
  valid_588882 = validateParameter(valid_588882, JString, required = false,
                                 default = nil)
  if valid_588882 != nil:
    section.add "userIp", valid_588882
  var valid_588883 = query.getOrDefault("key")
  valid_588883 = validateParameter(valid_588883, JString, required = false,
                                 default = nil)
  if valid_588883 != nil:
    section.add "key", valid_588883
  var valid_588884 = query.getOrDefault("prettyPrint")
  valid_588884 = validateParameter(valid_588884, JBool, required = false,
                                 default = newJBool(true))
  if valid_588884 != nil:
    section.add "prettyPrint", valid_588884
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_588907: Call_DfareportingFilesGet_588735; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a report file by its report ID and file ID. This method supports media download.
  ## 
  let valid = call_588907.validator(path, query, header, formData, body)
  let scheme = call_588907.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_588907.url(scheme.get, call_588907.host, call_588907.base,
                         call_588907.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_588907, url, valid)

proc call*(call_588978: Call_DfareportingFilesGet_588735; fileId: string;
          reportId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingFilesGet
  ## Retrieves a report file by its report ID and file ID. This method supports media download.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fileId: string (required)
  ##         : The ID of the report file.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_588979 = newJObject()
  var query_588981 = newJObject()
  add(query_588981, "fields", newJString(fields))
  add(query_588981, "quotaUser", newJString(quotaUser))
  add(path_588979, "fileId", newJString(fileId))
  add(query_588981, "alt", newJString(alt))
  add(query_588981, "oauth_token", newJString(oauthToken))
  add(query_588981, "userIp", newJString(userIp))
  add(query_588981, "key", newJString(key))
  add(path_588979, "reportId", newJString(reportId))
  add(query_588981, "prettyPrint", newJBool(prettyPrint))
  result = call_588978.call(path_588979, query_588981, nil, nil, nil)

var dfareportingFilesGet* = Call_DfareportingFilesGet_588735(
    name: "dfareportingFilesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/reports/{reportId}/files/{fileId}",
    validator: validate_DfareportingFilesGet_588736, base: "/dfareporting/v3.2",
    url: url_DfareportingFilesGet_588737, schemes: {Scheme.Https})
type
  Call_DfareportingUserProfilesList_589020 = ref object of OpenApiRestCall_588466
proc url_DfareportingUserProfilesList_589022(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  result.path = base & route

proc validate_DfareportingUserProfilesList_589021(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves list of user profiles for a user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589023 = query.getOrDefault("fields")
  valid_589023 = validateParameter(valid_589023, JString, required = false,
                                 default = nil)
  if valid_589023 != nil:
    section.add "fields", valid_589023
  var valid_589024 = query.getOrDefault("quotaUser")
  valid_589024 = validateParameter(valid_589024, JString, required = false,
                                 default = nil)
  if valid_589024 != nil:
    section.add "quotaUser", valid_589024
  var valid_589025 = query.getOrDefault("alt")
  valid_589025 = validateParameter(valid_589025, JString, required = false,
                                 default = newJString("json"))
  if valid_589025 != nil:
    section.add "alt", valid_589025
  var valid_589026 = query.getOrDefault("oauth_token")
  valid_589026 = validateParameter(valid_589026, JString, required = false,
                                 default = nil)
  if valid_589026 != nil:
    section.add "oauth_token", valid_589026
  var valid_589027 = query.getOrDefault("userIp")
  valid_589027 = validateParameter(valid_589027, JString, required = false,
                                 default = nil)
  if valid_589027 != nil:
    section.add "userIp", valid_589027
  var valid_589028 = query.getOrDefault("key")
  valid_589028 = validateParameter(valid_589028, JString, required = false,
                                 default = nil)
  if valid_589028 != nil:
    section.add "key", valid_589028
  var valid_589029 = query.getOrDefault("prettyPrint")
  valid_589029 = validateParameter(valid_589029, JBool, required = false,
                                 default = newJBool(true))
  if valid_589029 != nil:
    section.add "prettyPrint", valid_589029
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589030: Call_DfareportingUserProfilesList_589020; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves list of user profiles for a user.
  ## 
  let valid = call_589030.validator(path, query, header, formData, body)
  let scheme = call_589030.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589030.url(scheme.get, call_589030.host, call_589030.base,
                         call_589030.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589030, url, valid)

proc call*(call_589031: Call_DfareportingUserProfilesList_589020;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingUserProfilesList
  ## Retrieves list of user profiles for a user.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var query_589032 = newJObject()
  add(query_589032, "fields", newJString(fields))
  add(query_589032, "quotaUser", newJString(quotaUser))
  add(query_589032, "alt", newJString(alt))
  add(query_589032, "oauth_token", newJString(oauthToken))
  add(query_589032, "userIp", newJString(userIp))
  add(query_589032, "key", newJString(key))
  add(query_589032, "prettyPrint", newJBool(prettyPrint))
  result = call_589031.call(nil, query_589032, nil, nil, nil)

var dfareportingUserProfilesList* = Call_DfareportingUserProfilesList_589020(
    name: "dfareportingUserProfilesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles",
    validator: validate_DfareportingUserProfilesList_589021,
    base: "/dfareporting/v3.2", url: url_DfareportingUserProfilesList_589022,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserProfilesGet_589033 = ref object of OpenApiRestCall_588466
proc url_DfareportingUserProfilesGet_589035(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserProfilesGet_589034(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one user profile by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589036 = path.getOrDefault("profileId")
  valid_589036 = validateParameter(valid_589036, JString, required = true,
                                 default = nil)
  if valid_589036 != nil:
    section.add "profileId", valid_589036
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589037 = query.getOrDefault("fields")
  valid_589037 = validateParameter(valid_589037, JString, required = false,
                                 default = nil)
  if valid_589037 != nil:
    section.add "fields", valid_589037
  var valid_589038 = query.getOrDefault("quotaUser")
  valid_589038 = validateParameter(valid_589038, JString, required = false,
                                 default = nil)
  if valid_589038 != nil:
    section.add "quotaUser", valid_589038
  var valid_589039 = query.getOrDefault("alt")
  valid_589039 = validateParameter(valid_589039, JString, required = false,
                                 default = newJString("json"))
  if valid_589039 != nil:
    section.add "alt", valid_589039
  var valid_589040 = query.getOrDefault("oauth_token")
  valid_589040 = validateParameter(valid_589040, JString, required = false,
                                 default = nil)
  if valid_589040 != nil:
    section.add "oauth_token", valid_589040
  var valid_589041 = query.getOrDefault("userIp")
  valid_589041 = validateParameter(valid_589041, JString, required = false,
                                 default = nil)
  if valid_589041 != nil:
    section.add "userIp", valid_589041
  var valid_589042 = query.getOrDefault("key")
  valid_589042 = validateParameter(valid_589042, JString, required = false,
                                 default = nil)
  if valid_589042 != nil:
    section.add "key", valid_589042
  var valid_589043 = query.getOrDefault("prettyPrint")
  valid_589043 = validateParameter(valid_589043, JBool, required = false,
                                 default = newJBool(true))
  if valid_589043 != nil:
    section.add "prettyPrint", valid_589043
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589044: Call_DfareportingUserProfilesGet_589033; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one user profile by ID.
  ## 
  let valid = call_589044.validator(path, query, header, formData, body)
  let scheme = call_589044.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589044.url(scheme.get, call_589044.host, call_589044.base,
                         call_589044.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589044, url, valid)

proc call*(call_589045: Call_DfareportingUserProfilesGet_589033; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingUserProfilesGet
  ## Gets one user profile by ID.
  ##   profileId: string (required)
  ##            : The user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589046 = newJObject()
  var query_589047 = newJObject()
  add(path_589046, "profileId", newJString(profileId))
  add(query_589047, "fields", newJString(fields))
  add(query_589047, "quotaUser", newJString(quotaUser))
  add(query_589047, "alt", newJString(alt))
  add(query_589047, "oauth_token", newJString(oauthToken))
  add(query_589047, "userIp", newJString(userIp))
  add(query_589047, "key", newJString(key))
  add(query_589047, "prettyPrint", newJBool(prettyPrint))
  result = call_589045.call(path_589046, query_589047, nil, nil, nil)

var dfareportingUserProfilesGet* = Call_DfareportingUserProfilesGet_589033(
    name: "dfareportingUserProfilesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}",
    validator: validate_DfareportingUserProfilesGet_589034,
    base: "/dfareporting/v3.2", url: url_DfareportingUserProfilesGet_589035,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountActiveAdSummariesGet_589048 = ref object of OpenApiRestCall_588466
proc url_DfareportingAccountActiveAdSummariesGet_589050(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "summaryAccountId" in path,
        "`summaryAccountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountActiveAdSummaries/"),
               (kind: VariableSegment, value: "summaryAccountId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountActiveAdSummariesGet_589049(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the account's active ad summary by account ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   summaryAccountId: JString (required)
  ##                   : Account ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589051 = path.getOrDefault("profileId")
  valid_589051 = validateParameter(valid_589051, JString, required = true,
                                 default = nil)
  if valid_589051 != nil:
    section.add "profileId", valid_589051
  var valid_589052 = path.getOrDefault("summaryAccountId")
  valid_589052 = validateParameter(valid_589052, JString, required = true,
                                 default = nil)
  if valid_589052 != nil:
    section.add "summaryAccountId", valid_589052
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589053 = query.getOrDefault("fields")
  valid_589053 = validateParameter(valid_589053, JString, required = false,
                                 default = nil)
  if valid_589053 != nil:
    section.add "fields", valid_589053
  var valid_589054 = query.getOrDefault("quotaUser")
  valid_589054 = validateParameter(valid_589054, JString, required = false,
                                 default = nil)
  if valid_589054 != nil:
    section.add "quotaUser", valid_589054
  var valid_589055 = query.getOrDefault("alt")
  valid_589055 = validateParameter(valid_589055, JString, required = false,
                                 default = newJString("json"))
  if valid_589055 != nil:
    section.add "alt", valid_589055
  var valid_589056 = query.getOrDefault("oauth_token")
  valid_589056 = validateParameter(valid_589056, JString, required = false,
                                 default = nil)
  if valid_589056 != nil:
    section.add "oauth_token", valid_589056
  var valid_589057 = query.getOrDefault("userIp")
  valid_589057 = validateParameter(valid_589057, JString, required = false,
                                 default = nil)
  if valid_589057 != nil:
    section.add "userIp", valid_589057
  var valid_589058 = query.getOrDefault("key")
  valid_589058 = validateParameter(valid_589058, JString, required = false,
                                 default = nil)
  if valid_589058 != nil:
    section.add "key", valid_589058
  var valid_589059 = query.getOrDefault("prettyPrint")
  valid_589059 = validateParameter(valid_589059, JBool, required = false,
                                 default = newJBool(true))
  if valid_589059 != nil:
    section.add "prettyPrint", valid_589059
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589060: Call_DfareportingAccountActiveAdSummariesGet_589048;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the account's active ad summary by account ID.
  ## 
  let valid = call_589060.validator(path, query, header, formData, body)
  let scheme = call_589060.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589060.url(scheme.get, call_589060.host, call_589060.base,
                         call_589060.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589060, url, valid)

proc call*(call_589061: Call_DfareportingAccountActiveAdSummariesGet_589048;
          profileId: string; summaryAccountId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountActiveAdSummariesGet
  ## Gets the account's active ad summary by account ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   summaryAccountId: string (required)
  ##                   : Account ID.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589062 = newJObject()
  var query_589063 = newJObject()
  add(path_589062, "profileId", newJString(profileId))
  add(query_589063, "fields", newJString(fields))
  add(query_589063, "quotaUser", newJString(quotaUser))
  add(query_589063, "alt", newJString(alt))
  add(query_589063, "oauth_token", newJString(oauthToken))
  add(query_589063, "userIp", newJString(userIp))
  add(query_589063, "key", newJString(key))
  add(path_589062, "summaryAccountId", newJString(summaryAccountId))
  add(query_589063, "prettyPrint", newJBool(prettyPrint))
  result = call_589061.call(path_589062, query_589063, nil, nil, nil)

var dfareportingAccountActiveAdSummariesGet* = Call_DfareportingAccountActiveAdSummariesGet_589048(
    name: "dfareportingAccountActiveAdSummariesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accountActiveAdSummaries/{summaryAccountId}",
    validator: validate_DfareportingAccountActiveAdSummariesGet_589049,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountActiveAdSummariesGet_589050,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountPermissionGroupsList_589064 = ref object of OpenApiRestCall_588466
proc url_DfareportingAccountPermissionGroupsList_589066(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountPermissionGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountPermissionGroupsList_589065(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the list of account permission groups.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589067 = path.getOrDefault("profileId")
  valid_589067 = validateParameter(valid_589067, JString, required = true,
                                 default = nil)
  if valid_589067 != nil:
    section.add "profileId", valid_589067
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589068 = query.getOrDefault("fields")
  valid_589068 = validateParameter(valid_589068, JString, required = false,
                                 default = nil)
  if valid_589068 != nil:
    section.add "fields", valid_589068
  var valid_589069 = query.getOrDefault("quotaUser")
  valid_589069 = validateParameter(valid_589069, JString, required = false,
                                 default = nil)
  if valid_589069 != nil:
    section.add "quotaUser", valid_589069
  var valid_589070 = query.getOrDefault("alt")
  valid_589070 = validateParameter(valid_589070, JString, required = false,
                                 default = newJString("json"))
  if valid_589070 != nil:
    section.add "alt", valid_589070
  var valid_589071 = query.getOrDefault("oauth_token")
  valid_589071 = validateParameter(valid_589071, JString, required = false,
                                 default = nil)
  if valid_589071 != nil:
    section.add "oauth_token", valid_589071
  var valid_589072 = query.getOrDefault("userIp")
  valid_589072 = validateParameter(valid_589072, JString, required = false,
                                 default = nil)
  if valid_589072 != nil:
    section.add "userIp", valid_589072
  var valid_589073 = query.getOrDefault("key")
  valid_589073 = validateParameter(valid_589073, JString, required = false,
                                 default = nil)
  if valid_589073 != nil:
    section.add "key", valid_589073
  var valid_589074 = query.getOrDefault("prettyPrint")
  valid_589074 = validateParameter(valid_589074, JBool, required = false,
                                 default = newJBool(true))
  if valid_589074 != nil:
    section.add "prettyPrint", valid_589074
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589075: Call_DfareportingAccountPermissionGroupsList_589064;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the list of account permission groups.
  ## 
  let valid = call_589075.validator(path, query, header, formData, body)
  let scheme = call_589075.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589075.url(scheme.get, call_589075.host, call_589075.base,
                         call_589075.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589075, url, valid)

proc call*(call_589076: Call_DfareportingAccountPermissionGroupsList_589064;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountPermissionGroupsList
  ## Retrieves the list of account permission groups.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589077 = newJObject()
  var query_589078 = newJObject()
  add(path_589077, "profileId", newJString(profileId))
  add(query_589078, "fields", newJString(fields))
  add(query_589078, "quotaUser", newJString(quotaUser))
  add(query_589078, "alt", newJString(alt))
  add(query_589078, "oauth_token", newJString(oauthToken))
  add(query_589078, "userIp", newJString(userIp))
  add(query_589078, "key", newJString(key))
  add(query_589078, "prettyPrint", newJBool(prettyPrint))
  result = call_589076.call(path_589077, query_589078, nil, nil, nil)

var dfareportingAccountPermissionGroupsList* = Call_DfareportingAccountPermissionGroupsList_589064(
    name: "dfareportingAccountPermissionGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountPermissionGroups",
    validator: validate_DfareportingAccountPermissionGroupsList_589065,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountPermissionGroupsList_589066,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountPermissionGroupsGet_589079 = ref object of OpenApiRestCall_588466
proc url_DfareportingAccountPermissionGroupsGet_589081(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountPermissionGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountPermissionGroupsGet_589080(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one account permission group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Account permission group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589082 = path.getOrDefault("profileId")
  valid_589082 = validateParameter(valid_589082, JString, required = true,
                                 default = nil)
  if valid_589082 != nil:
    section.add "profileId", valid_589082
  var valid_589083 = path.getOrDefault("id")
  valid_589083 = validateParameter(valid_589083, JString, required = true,
                                 default = nil)
  if valid_589083 != nil:
    section.add "id", valid_589083
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589084 = query.getOrDefault("fields")
  valid_589084 = validateParameter(valid_589084, JString, required = false,
                                 default = nil)
  if valid_589084 != nil:
    section.add "fields", valid_589084
  var valid_589085 = query.getOrDefault("quotaUser")
  valid_589085 = validateParameter(valid_589085, JString, required = false,
                                 default = nil)
  if valid_589085 != nil:
    section.add "quotaUser", valid_589085
  var valid_589086 = query.getOrDefault("alt")
  valid_589086 = validateParameter(valid_589086, JString, required = false,
                                 default = newJString("json"))
  if valid_589086 != nil:
    section.add "alt", valid_589086
  var valid_589087 = query.getOrDefault("oauth_token")
  valid_589087 = validateParameter(valid_589087, JString, required = false,
                                 default = nil)
  if valid_589087 != nil:
    section.add "oauth_token", valid_589087
  var valid_589088 = query.getOrDefault("userIp")
  valid_589088 = validateParameter(valid_589088, JString, required = false,
                                 default = nil)
  if valid_589088 != nil:
    section.add "userIp", valid_589088
  var valid_589089 = query.getOrDefault("key")
  valid_589089 = validateParameter(valid_589089, JString, required = false,
                                 default = nil)
  if valid_589089 != nil:
    section.add "key", valid_589089
  var valid_589090 = query.getOrDefault("prettyPrint")
  valid_589090 = validateParameter(valid_589090, JBool, required = false,
                                 default = newJBool(true))
  if valid_589090 != nil:
    section.add "prettyPrint", valid_589090
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589091: Call_DfareportingAccountPermissionGroupsGet_589079;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one account permission group by ID.
  ## 
  let valid = call_589091.validator(path, query, header, formData, body)
  let scheme = call_589091.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589091.url(scheme.get, call_589091.host, call_589091.base,
                         call_589091.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589091, url, valid)

proc call*(call_589092: Call_DfareportingAccountPermissionGroupsGet_589079;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountPermissionGroupsGet
  ## Gets one account permission group by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Account permission group ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589093 = newJObject()
  var query_589094 = newJObject()
  add(path_589093, "profileId", newJString(profileId))
  add(query_589094, "fields", newJString(fields))
  add(query_589094, "quotaUser", newJString(quotaUser))
  add(query_589094, "alt", newJString(alt))
  add(query_589094, "oauth_token", newJString(oauthToken))
  add(query_589094, "userIp", newJString(userIp))
  add(path_589093, "id", newJString(id))
  add(query_589094, "key", newJString(key))
  add(query_589094, "prettyPrint", newJBool(prettyPrint))
  result = call_589092.call(path_589093, query_589094, nil, nil, nil)

var dfareportingAccountPermissionGroupsGet* = Call_DfareportingAccountPermissionGroupsGet_589079(
    name: "dfareportingAccountPermissionGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountPermissionGroups/{id}",
    validator: validate_DfareportingAccountPermissionGroupsGet_589080,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountPermissionGroupsGet_589081,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountPermissionsList_589095 = ref object of OpenApiRestCall_588466
proc url_DfareportingAccountPermissionsList_589097(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountPermissions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountPermissionsList_589096(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the list of account permissions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589098 = path.getOrDefault("profileId")
  valid_589098 = validateParameter(valid_589098, JString, required = true,
                                 default = nil)
  if valid_589098 != nil:
    section.add "profileId", valid_589098
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589099 = query.getOrDefault("fields")
  valid_589099 = validateParameter(valid_589099, JString, required = false,
                                 default = nil)
  if valid_589099 != nil:
    section.add "fields", valid_589099
  var valid_589100 = query.getOrDefault("quotaUser")
  valid_589100 = validateParameter(valid_589100, JString, required = false,
                                 default = nil)
  if valid_589100 != nil:
    section.add "quotaUser", valid_589100
  var valid_589101 = query.getOrDefault("alt")
  valid_589101 = validateParameter(valid_589101, JString, required = false,
                                 default = newJString("json"))
  if valid_589101 != nil:
    section.add "alt", valid_589101
  var valid_589102 = query.getOrDefault("oauth_token")
  valid_589102 = validateParameter(valid_589102, JString, required = false,
                                 default = nil)
  if valid_589102 != nil:
    section.add "oauth_token", valid_589102
  var valid_589103 = query.getOrDefault("userIp")
  valid_589103 = validateParameter(valid_589103, JString, required = false,
                                 default = nil)
  if valid_589103 != nil:
    section.add "userIp", valid_589103
  var valid_589104 = query.getOrDefault("key")
  valid_589104 = validateParameter(valid_589104, JString, required = false,
                                 default = nil)
  if valid_589104 != nil:
    section.add "key", valid_589104
  var valid_589105 = query.getOrDefault("prettyPrint")
  valid_589105 = validateParameter(valid_589105, JBool, required = false,
                                 default = newJBool(true))
  if valid_589105 != nil:
    section.add "prettyPrint", valid_589105
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589106: Call_DfareportingAccountPermissionsList_589095;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the list of account permissions.
  ## 
  let valid = call_589106.validator(path, query, header, formData, body)
  let scheme = call_589106.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589106.url(scheme.get, call_589106.host, call_589106.base,
                         call_589106.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589106, url, valid)

proc call*(call_589107: Call_DfareportingAccountPermissionsList_589095;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountPermissionsList
  ## Retrieves the list of account permissions.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589108 = newJObject()
  var query_589109 = newJObject()
  add(path_589108, "profileId", newJString(profileId))
  add(query_589109, "fields", newJString(fields))
  add(query_589109, "quotaUser", newJString(quotaUser))
  add(query_589109, "alt", newJString(alt))
  add(query_589109, "oauth_token", newJString(oauthToken))
  add(query_589109, "userIp", newJString(userIp))
  add(query_589109, "key", newJString(key))
  add(query_589109, "prettyPrint", newJBool(prettyPrint))
  result = call_589107.call(path_589108, query_589109, nil, nil, nil)

var dfareportingAccountPermissionsList* = Call_DfareportingAccountPermissionsList_589095(
    name: "dfareportingAccountPermissionsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountPermissions",
    validator: validate_DfareportingAccountPermissionsList_589096,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountPermissionsList_589097,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountPermissionsGet_589110 = ref object of OpenApiRestCall_588466
proc url_DfareportingAccountPermissionsGet_589112(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountPermissions/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountPermissionsGet_589111(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one account permission by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Account permission ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589113 = path.getOrDefault("profileId")
  valid_589113 = validateParameter(valid_589113, JString, required = true,
                                 default = nil)
  if valid_589113 != nil:
    section.add "profileId", valid_589113
  var valid_589114 = path.getOrDefault("id")
  valid_589114 = validateParameter(valid_589114, JString, required = true,
                                 default = nil)
  if valid_589114 != nil:
    section.add "id", valid_589114
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589115 = query.getOrDefault("fields")
  valid_589115 = validateParameter(valid_589115, JString, required = false,
                                 default = nil)
  if valid_589115 != nil:
    section.add "fields", valid_589115
  var valid_589116 = query.getOrDefault("quotaUser")
  valid_589116 = validateParameter(valid_589116, JString, required = false,
                                 default = nil)
  if valid_589116 != nil:
    section.add "quotaUser", valid_589116
  var valid_589117 = query.getOrDefault("alt")
  valid_589117 = validateParameter(valid_589117, JString, required = false,
                                 default = newJString("json"))
  if valid_589117 != nil:
    section.add "alt", valid_589117
  var valid_589118 = query.getOrDefault("oauth_token")
  valid_589118 = validateParameter(valid_589118, JString, required = false,
                                 default = nil)
  if valid_589118 != nil:
    section.add "oauth_token", valid_589118
  var valid_589119 = query.getOrDefault("userIp")
  valid_589119 = validateParameter(valid_589119, JString, required = false,
                                 default = nil)
  if valid_589119 != nil:
    section.add "userIp", valid_589119
  var valid_589120 = query.getOrDefault("key")
  valid_589120 = validateParameter(valid_589120, JString, required = false,
                                 default = nil)
  if valid_589120 != nil:
    section.add "key", valid_589120
  var valid_589121 = query.getOrDefault("prettyPrint")
  valid_589121 = validateParameter(valid_589121, JBool, required = false,
                                 default = newJBool(true))
  if valid_589121 != nil:
    section.add "prettyPrint", valid_589121
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589122: Call_DfareportingAccountPermissionsGet_589110;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one account permission by ID.
  ## 
  let valid = call_589122.validator(path, query, header, formData, body)
  let scheme = call_589122.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589122.url(scheme.get, call_589122.host, call_589122.base,
                         call_589122.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589122, url, valid)

proc call*(call_589123: Call_DfareportingAccountPermissionsGet_589110;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountPermissionsGet
  ## Gets one account permission by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Account permission ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589124 = newJObject()
  var query_589125 = newJObject()
  add(path_589124, "profileId", newJString(profileId))
  add(query_589125, "fields", newJString(fields))
  add(query_589125, "quotaUser", newJString(quotaUser))
  add(query_589125, "alt", newJString(alt))
  add(query_589125, "oauth_token", newJString(oauthToken))
  add(query_589125, "userIp", newJString(userIp))
  add(path_589124, "id", newJString(id))
  add(query_589125, "key", newJString(key))
  add(query_589125, "prettyPrint", newJBool(prettyPrint))
  result = call_589123.call(path_589124, query_589125, nil, nil, nil)

var dfareportingAccountPermissionsGet* = Call_DfareportingAccountPermissionsGet_589110(
    name: "dfareportingAccountPermissionsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountPermissions/{id}",
    validator: validate_DfareportingAccountPermissionsGet_589111,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountPermissionsGet_589112,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesUpdate_589151 = ref object of OpenApiRestCall_588466
proc url_DfareportingAccountUserProfilesUpdate_589153(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesUpdate_589152(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing account user profile.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589154 = path.getOrDefault("profileId")
  valid_589154 = validateParameter(valid_589154, JString, required = true,
                                 default = nil)
  if valid_589154 != nil:
    section.add "profileId", valid_589154
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589155 = query.getOrDefault("fields")
  valid_589155 = validateParameter(valid_589155, JString, required = false,
                                 default = nil)
  if valid_589155 != nil:
    section.add "fields", valid_589155
  var valid_589156 = query.getOrDefault("quotaUser")
  valid_589156 = validateParameter(valid_589156, JString, required = false,
                                 default = nil)
  if valid_589156 != nil:
    section.add "quotaUser", valid_589156
  var valid_589157 = query.getOrDefault("alt")
  valid_589157 = validateParameter(valid_589157, JString, required = false,
                                 default = newJString("json"))
  if valid_589157 != nil:
    section.add "alt", valid_589157
  var valid_589158 = query.getOrDefault("oauth_token")
  valid_589158 = validateParameter(valid_589158, JString, required = false,
                                 default = nil)
  if valid_589158 != nil:
    section.add "oauth_token", valid_589158
  var valid_589159 = query.getOrDefault("userIp")
  valid_589159 = validateParameter(valid_589159, JString, required = false,
                                 default = nil)
  if valid_589159 != nil:
    section.add "userIp", valid_589159
  var valid_589160 = query.getOrDefault("key")
  valid_589160 = validateParameter(valid_589160, JString, required = false,
                                 default = nil)
  if valid_589160 != nil:
    section.add "key", valid_589160
  var valid_589161 = query.getOrDefault("prettyPrint")
  valid_589161 = validateParameter(valid_589161, JBool, required = false,
                                 default = newJBool(true))
  if valid_589161 != nil:
    section.add "prettyPrint", valid_589161
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589163: Call_DfareportingAccountUserProfilesUpdate_589151;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing account user profile.
  ## 
  let valid = call_589163.validator(path, query, header, formData, body)
  let scheme = call_589163.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589163.url(scheme.get, call_589163.host, call_589163.base,
                         call_589163.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589163, url, valid)

proc call*(call_589164: Call_DfareportingAccountUserProfilesUpdate_589151;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountUserProfilesUpdate
  ## Updates an existing account user profile.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589165 = newJObject()
  var query_589166 = newJObject()
  var body_589167 = newJObject()
  add(path_589165, "profileId", newJString(profileId))
  add(query_589166, "fields", newJString(fields))
  add(query_589166, "quotaUser", newJString(quotaUser))
  add(query_589166, "alt", newJString(alt))
  add(query_589166, "oauth_token", newJString(oauthToken))
  add(query_589166, "userIp", newJString(userIp))
  add(query_589166, "key", newJString(key))
  if body != nil:
    body_589167 = body
  add(query_589166, "prettyPrint", newJBool(prettyPrint))
  result = call_589164.call(path_589165, query_589166, nil, nil, body_589167)

var dfareportingAccountUserProfilesUpdate* = Call_DfareportingAccountUserProfilesUpdate_589151(
    name: "dfareportingAccountUserProfilesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles",
    validator: validate_DfareportingAccountUserProfilesUpdate_589152,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountUserProfilesUpdate_589153,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesInsert_589168 = ref object of OpenApiRestCall_588466
proc url_DfareportingAccountUserProfilesInsert_589170(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesInsert_589169(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new account user profile.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589171 = path.getOrDefault("profileId")
  valid_589171 = validateParameter(valid_589171, JString, required = true,
                                 default = nil)
  if valid_589171 != nil:
    section.add "profileId", valid_589171
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589172 = query.getOrDefault("fields")
  valid_589172 = validateParameter(valid_589172, JString, required = false,
                                 default = nil)
  if valid_589172 != nil:
    section.add "fields", valid_589172
  var valid_589173 = query.getOrDefault("quotaUser")
  valid_589173 = validateParameter(valid_589173, JString, required = false,
                                 default = nil)
  if valid_589173 != nil:
    section.add "quotaUser", valid_589173
  var valid_589174 = query.getOrDefault("alt")
  valid_589174 = validateParameter(valid_589174, JString, required = false,
                                 default = newJString("json"))
  if valid_589174 != nil:
    section.add "alt", valid_589174
  var valid_589175 = query.getOrDefault("oauth_token")
  valid_589175 = validateParameter(valid_589175, JString, required = false,
                                 default = nil)
  if valid_589175 != nil:
    section.add "oauth_token", valid_589175
  var valid_589176 = query.getOrDefault("userIp")
  valid_589176 = validateParameter(valid_589176, JString, required = false,
                                 default = nil)
  if valid_589176 != nil:
    section.add "userIp", valid_589176
  var valid_589177 = query.getOrDefault("key")
  valid_589177 = validateParameter(valid_589177, JString, required = false,
                                 default = nil)
  if valid_589177 != nil:
    section.add "key", valid_589177
  var valid_589178 = query.getOrDefault("prettyPrint")
  valid_589178 = validateParameter(valid_589178, JBool, required = false,
                                 default = newJBool(true))
  if valid_589178 != nil:
    section.add "prettyPrint", valid_589178
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589180: Call_DfareportingAccountUserProfilesInsert_589168;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new account user profile.
  ## 
  let valid = call_589180.validator(path, query, header, formData, body)
  let scheme = call_589180.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589180.url(scheme.get, call_589180.host, call_589180.base,
                         call_589180.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589180, url, valid)

proc call*(call_589181: Call_DfareportingAccountUserProfilesInsert_589168;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountUserProfilesInsert
  ## Inserts a new account user profile.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589182 = newJObject()
  var query_589183 = newJObject()
  var body_589184 = newJObject()
  add(path_589182, "profileId", newJString(profileId))
  add(query_589183, "fields", newJString(fields))
  add(query_589183, "quotaUser", newJString(quotaUser))
  add(query_589183, "alt", newJString(alt))
  add(query_589183, "oauth_token", newJString(oauthToken))
  add(query_589183, "userIp", newJString(userIp))
  add(query_589183, "key", newJString(key))
  if body != nil:
    body_589184 = body
  add(query_589183, "prettyPrint", newJBool(prettyPrint))
  result = call_589181.call(path_589182, query_589183, nil, nil, body_589184)

var dfareportingAccountUserProfilesInsert* = Call_DfareportingAccountUserProfilesInsert_589168(
    name: "dfareportingAccountUserProfilesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles",
    validator: validate_DfareportingAccountUserProfilesInsert_589169,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountUserProfilesInsert_589170,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesList_589126 = ref object of OpenApiRestCall_588466
proc url_DfareportingAccountUserProfilesList_589128(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesList_589127(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of account user profiles, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589129 = path.getOrDefault("profileId")
  valid_589129 = validateParameter(valid_589129, JString, required = true,
                                 default = nil)
  if valid_589129 != nil:
    section.add "profileId", valid_589129
  result.add "path", section
  ## parameters in `query` object:
  ##   subaccountId: JString
  ##               : Select only user profiles with the specified subaccount ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "user profile*2015" will return objects with names like "user profile June 2015", "user profile April 2015", or simply "user profile 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "user profile" will match objects with name "my user profile", "user profile 2015", or simply "user profile".
  ##   active: JBool
  ##         : Select only active user profiles.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only user profiles with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   userRoleId: JString
  ##             : Select only user profiles with the specified user role ID.
  section = newJObject()
  var valid_589130 = query.getOrDefault("subaccountId")
  valid_589130 = validateParameter(valid_589130, JString, required = false,
                                 default = nil)
  if valid_589130 != nil:
    section.add "subaccountId", valid_589130
  var valid_589131 = query.getOrDefault("fields")
  valid_589131 = validateParameter(valid_589131, JString, required = false,
                                 default = nil)
  if valid_589131 != nil:
    section.add "fields", valid_589131
  var valid_589132 = query.getOrDefault("pageToken")
  valid_589132 = validateParameter(valid_589132, JString, required = false,
                                 default = nil)
  if valid_589132 != nil:
    section.add "pageToken", valid_589132
  var valid_589133 = query.getOrDefault("quotaUser")
  valid_589133 = validateParameter(valid_589133, JString, required = false,
                                 default = nil)
  if valid_589133 != nil:
    section.add "quotaUser", valid_589133
  var valid_589134 = query.getOrDefault("sortField")
  valid_589134 = validateParameter(valid_589134, JString, required = false,
                                 default = newJString("ID"))
  if valid_589134 != nil:
    section.add "sortField", valid_589134
  var valid_589135 = query.getOrDefault("alt")
  valid_589135 = validateParameter(valid_589135, JString, required = false,
                                 default = newJString("json"))
  if valid_589135 != nil:
    section.add "alt", valid_589135
  var valid_589136 = query.getOrDefault("searchString")
  valid_589136 = validateParameter(valid_589136, JString, required = false,
                                 default = nil)
  if valid_589136 != nil:
    section.add "searchString", valid_589136
  var valid_589137 = query.getOrDefault("active")
  valid_589137 = validateParameter(valid_589137, JBool, required = false, default = nil)
  if valid_589137 != nil:
    section.add "active", valid_589137
  var valid_589138 = query.getOrDefault("oauth_token")
  valid_589138 = validateParameter(valid_589138, JString, required = false,
                                 default = nil)
  if valid_589138 != nil:
    section.add "oauth_token", valid_589138
  var valid_589139 = query.getOrDefault("userIp")
  valid_589139 = validateParameter(valid_589139, JString, required = false,
                                 default = nil)
  if valid_589139 != nil:
    section.add "userIp", valid_589139
  var valid_589141 = query.getOrDefault("maxResults")
  valid_589141 = validateParameter(valid_589141, JInt, required = false,
                                 default = newJInt(1000))
  if valid_589141 != nil:
    section.add "maxResults", valid_589141
  var valid_589142 = query.getOrDefault("ids")
  valid_589142 = validateParameter(valid_589142, JArray, required = false,
                                 default = nil)
  if valid_589142 != nil:
    section.add "ids", valid_589142
  var valid_589143 = query.getOrDefault("key")
  valid_589143 = validateParameter(valid_589143, JString, required = false,
                                 default = nil)
  if valid_589143 != nil:
    section.add "key", valid_589143
  var valid_589144 = query.getOrDefault("sortOrder")
  valid_589144 = validateParameter(valid_589144, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_589144 != nil:
    section.add "sortOrder", valid_589144
  var valid_589145 = query.getOrDefault("prettyPrint")
  valid_589145 = validateParameter(valid_589145, JBool, required = false,
                                 default = newJBool(true))
  if valid_589145 != nil:
    section.add "prettyPrint", valid_589145
  var valid_589146 = query.getOrDefault("userRoleId")
  valid_589146 = validateParameter(valid_589146, JString, required = false,
                                 default = nil)
  if valid_589146 != nil:
    section.add "userRoleId", valid_589146
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589147: Call_DfareportingAccountUserProfilesList_589126;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of account user profiles, possibly filtered. This method supports paging.
  ## 
  let valid = call_589147.validator(path, query, header, formData, body)
  let scheme = call_589147.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589147.url(scheme.get, call_589147.host, call_589147.base,
                         call_589147.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589147, url, valid)

proc call*(call_589148: Call_DfareportingAccountUserProfilesList_589126;
          profileId: string; subaccountId: string = ""; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; sortField: string = "ID";
          alt: string = "json"; searchString: string = ""; active: bool = false;
          oauthToken: string = ""; userIp: string = ""; maxResults: int = 1000;
          ids: JsonNode = nil; key: string = ""; sortOrder: string = "ASCENDING";
          prettyPrint: bool = true; userRoleId: string = ""): Recallable =
  ## dfareportingAccountUserProfilesList
  ## Retrieves a list of account user profiles, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   subaccountId: string
  ##               : Select only user profiles with the specified subaccount ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "user profile*2015" will return objects with names like "user profile June 2015", "user profile April 2015", or simply "user profile 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "user profile" will match objects with name "my user profile", "user profile 2015", or simply "user profile".
  ##   active: bool
  ##         : Select only active user profiles.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only user profiles with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   userRoleId: string
  ##             : Select only user profiles with the specified user role ID.
  var path_589149 = newJObject()
  var query_589150 = newJObject()
  add(path_589149, "profileId", newJString(profileId))
  add(query_589150, "subaccountId", newJString(subaccountId))
  add(query_589150, "fields", newJString(fields))
  add(query_589150, "pageToken", newJString(pageToken))
  add(query_589150, "quotaUser", newJString(quotaUser))
  add(query_589150, "sortField", newJString(sortField))
  add(query_589150, "alt", newJString(alt))
  add(query_589150, "searchString", newJString(searchString))
  add(query_589150, "active", newJBool(active))
  add(query_589150, "oauth_token", newJString(oauthToken))
  add(query_589150, "userIp", newJString(userIp))
  add(query_589150, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_589150.add "ids", ids
  add(query_589150, "key", newJString(key))
  add(query_589150, "sortOrder", newJString(sortOrder))
  add(query_589150, "prettyPrint", newJBool(prettyPrint))
  add(query_589150, "userRoleId", newJString(userRoleId))
  result = call_589148.call(path_589149, query_589150, nil, nil, nil)

var dfareportingAccountUserProfilesList* = Call_DfareportingAccountUserProfilesList_589126(
    name: "dfareportingAccountUserProfilesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles",
    validator: validate_DfareportingAccountUserProfilesList_589127,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountUserProfilesList_589128,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesPatch_589185 = ref object of OpenApiRestCall_588466
proc url_DfareportingAccountUserProfilesPatch_589187(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesPatch_589186(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing account user profile. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589188 = path.getOrDefault("profileId")
  valid_589188 = validateParameter(valid_589188, JString, required = true,
                                 default = nil)
  if valid_589188 != nil:
    section.add "profileId", valid_589188
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : User profile ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589189 = query.getOrDefault("fields")
  valid_589189 = validateParameter(valid_589189, JString, required = false,
                                 default = nil)
  if valid_589189 != nil:
    section.add "fields", valid_589189
  var valid_589190 = query.getOrDefault("quotaUser")
  valid_589190 = validateParameter(valid_589190, JString, required = false,
                                 default = nil)
  if valid_589190 != nil:
    section.add "quotaUser", valid_589190
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_589191 = query.getOrDefault("id")
  valid_589191 = validateParameter(valid_589191, JString, required = true,
                                 default = nil)
  if valid_589191 != nil:
    section.add "id", valid_589191
  var valid_589192 = query.getOrDefault("alt")
  valid_589192 = validateParameter(valid_589192, JString, required = false,
                                 default = newJString("json"))
  if valid_589192 != nil:
    section.add "alt", valid_589192
  var valid_589193 = query.getOrDefault("oauth_token")
  valid_589193 = validateParameter(valid_589193, JString, required = false,
                                 default = nil)
  if valid_589193 != nil:
    section.add "oauth_token", valid_589193
  var valid_589194 = query.getOrDefault("userIp")
  valid_589194 = validateParameter(valid_589194, JString, required = false,
                                 default = nil)
  if valid_589194 != nil:
    section.add "userIp", valid_589194
  var valid_589195 = query.getOrDefault("key")
  valid_589195 = validateParameter(valid_589195, JString, required = false,
                                 default = nil)
  if valid_589195 != nil:
    section.add "key", valid_589195
  var valid_589196 = query.getOrDefault("prettyPrint")
  valid_589196 = validateParameter(valid_589196, JBool, required = false,
                                 default = newJBool(true))
  if valid_589196 != nil:
    section.add "prettyPrint", valid_589196
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589198: Call_DfareportingAccountUserProfilesPatch_589185;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing account user profile. This method supports patch semantics.
  ## 
  let valid = call_589198.validator(path, query, header, formData, body)
  let scheme = call_589198.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589198.url(scheme.get, call_589198.host, call_589198.base,
                         call_589198.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589198, url, valid)

proc call*(call_589199: Call_DfareportingAccountUserProfilesPatch_589185;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountUserProfilesPatch
  ## Updates an existing account user profile. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : User profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589200 = newJObject()
  var query_589201 = newJObject()
  var body_589202 = newJObject()
  add(path_589200, "profileId", newJString(profileId))
  add(query_589201, "fields", newJString(fields))
  add(query_589201, "quotaUser", newJString(quotaUser))
  add(query_589201, "id", newJString(id))
  add(query_589201, "alt", newJString(alt))
  add(query_589201, "oauth_token", newJString(oauthToken))
  add(query_589201, "userIp", newJString(userIp))
  add(query_589201, "key", newJString(key))
  if body != nil:
    body_589202 = body
  add(query_589201, "prettyPrint", newJBool(prettyPrint))
  result = call_589199.call(path_589200, query_589201, nil, nil, body_589202)

var dfareportingAccountUserProfilesPatch* = Call_DfareportingAccountUserProfilesPatch_589185(
    name: "dfareportingAccountUserProfilesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles",
    validator: validate_DfareportingAccountUserProfilesPatch_589186,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountUserProfilesPatch_589187,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesGet_589203 = ref object of OpenApiRestCall_588466
proc url_DfareportingAccountUserProfilesGet_589205(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesGet_589204(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one account user profile by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589206 = path.getOrDefault("profileId")
  valid_589206 = validateParameter(valid_589206, JString, required = true,
                                 default = nil)
  if valid_589206 != nil:
    section.add "profileId", valid_589206
  var valid_589207 = path.getOrDefault("id")
  valid_589207 = validateParameter(valid_589207, JString, required = true,
                                 default = nil)
  if valid_589207 != nil:
    section.add "id", valid_589207
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589208 = query.getOrDefault("fields")
  valid_589208 = validateParameter(valid_589208, JString, required = false,
                                 default = nil)
  if valid_589208 != nil:
    section.add "fields", valid_589208
  var valid_589209 = query.getOrDefault("quotaUser")
  valid_589209 = validateParameter(valid_589209, JString, required = false,
                                 default = nil)
  if valid_589209 != nil:
    section.add "quotaUser", valid_589209
  var valid_589210 = query.getOrDefault("alt")
  valid_589210 = validateParameter(valid_589210, JString, required = false,
                                 default = newJString("json"))
  if valid_589210 != nil:
    section.add "alt", valid_589210
  var valid_589211 = query.getOrDefault("oauth_token")
  valid_589211 = validateParameter(valid_589211, JString, required = false,
                                 default = nil)
  if valid_589211 != nil:
    section.add "oauth_token", valid_589211
  var valid_589212 = query.getOrDefault("userIp")
  valid_589212 = validateParameter(valid_589212, JString, required = false,
                                 default = nil)
  if valid_589212 != nil:
    section.add "userIp", valid_589212
  var valid_589213 = query.getOrDefault("key")
  valid_589213 = validateParameter(valid_589213, JString, required = false,
                                 default = nil)
  if valid_589213 != nil:
    section.add "key", valid_589213
  var valid_589214 = query.getOrDefault("prettyPrint")
  valid_589214 = validateParameter(valid_589214, JBool, required = false,
                                 default = newJBool(true))
  if valid_589214 != nil:
    section.add "prettyPrint", valid_589214
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589215: Call_DfareportingAccountUserProfilesGet_589203;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one account user profile by ID.
  ## 
  let valid = call_589215.validator(path, query, header, formData, body)
  let scheme = call_589215.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589215.url(scheme.get, call_589215.host, call_589215.base,
                         call_589215.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589215, url, valid)

proc call*(call_589216: Call_DfareportingAccountUserProfilesGet_589203;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountUserProfilesGet
  ## Gets one account user profile by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : User profile ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589217 = newJObject()
  var query_589218 = newJObject()
  add(path_589217, "profileId", newJString(profileId))
  add(query_589218, "fields", newJString(fields))
  add(query_589218, "quotaUser", newJString(quotaUser))
  add(query_589218, "alt", newJString(alt))
  add(query_589218, "oauth_token", newJString(oauthToken))
  add(query_589218, "userIp", newJString(userIp))
  add(path_589217, "id", newJString(id))
  add(query_589218, "key", newJString(key))
  add(query_589218, "prettyPrint", newJBool(prettyPrint))
  result = call_589216.call(path_589217, query_589218, nil, nil, nil)

var dfareportingAccountUserProfilesGet* = Call_DfareportingAccountUserProfilesGet_589203(
    name: "dfareportingAccountUserProfilesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles/{id}",
    validator: validate_DfareportingAccountUserProfilesGet_589204,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountUserProfilesGet_589205,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountsUpdate_589241 = ref object of OpenApiRestCall_588466
proc url_DfareportingAccountsUpdate_589243(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountsUpdate_589242(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing account.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589244 = path.getOrDefault("profileId")
  valid_589244 = validateParameter(valid_589244, JString, required = true,
                                 default = nil)
  if valid_589244 != nil:
    section.add "profileId", valid_589244
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589245 = query.getOrDefault("fields")
  valid_589245 = validateParameter(valid_589245, JString, required = false,
                                 default = nil)
  if valid_589245 != nil:
    section.add "fields", valid_589245
  var valid_589246 = query.getOrDefault("quotaUser")
  valid_589246 = validateParameter(valid_589246, JString, required = false,
                                 default = nil)
  if valid_589246 != nil:
    section.add "quotaUser", valid_589246
  var valid_589247 = query.getOrDefault("alt")
  valid_589247 = validateParameter(valid_589247, JString, required = false,
                                 default = newJString("json"))
  if valid_589247 != nil:
    section.add "alt", valid_589247
  var valid_589248 = query.getOrDefault("oauth_token")
  valid_589248 = validateParameter(valid_589248, JString, required = false,
                                 default = nil)
  if valid_589248 != nil:
    section.add "oauth_token", valid_589248
  var valid_589249 = query.getOrDefault("userIp")
  valid_589249 = validateParameter(valid_589249, JString, required = false,
                                 default = nil)
  if valid_589249 != nil:
    section.add "userIp", valid_589249
  var valid_589250 = query.getOrDefault("key")
  valid_589250 = validateParameter(valid_589250, JString, required = false,
                                 default = nil)
  if valid_589250 != nil:
    section.add "key", valid_589250
  var valid_589251 = query.getOrDefault("prettyPrint")
  valid_589251 = validateParameter(valid_589251, JBool, required = false,
                                 default = newJBool(true))
  if valid_589251 != nil:
    section.add "prettyPrint", valid_589251
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589253: Call_DfareportingAccountsUpdate_589241; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing account.
  ## 
  let valid = call_589253.validator(path, query, header, formData, body)
  let scheme = call_589253.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589253.url(scheme.get, call_589253.host, call_589253.base,
                         call_589253.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589253, url, valid)

proc call*(call_589254: Call_DfareportingAccountsUpdate_589241; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountsUpdate
  ## Updates an existing account.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589255 = newJObject()
  var query_589256 = newJObject()
  var body_589257 = newJObject()
  add(path_589255, "profileId", newJString(profileId))
  add(query_589256, "fields", newJString(fields))
  add(query_589256, "quotaUser", newJString(quotaUser))
  add(query_589256, "alt", newJString(alt))
  add(query_589256, "oauth_token", newJString(oauthToken))
  add(query_589256, "userIp", newJString(userIp))
  add(query_589256, "key", newJString(key))
  if body != nil:
    body_589257 = body
  add(query_589256, "prettyPrint", newJBool(prettyPrint))
  result = call_589254.call(path_589255, query_589256, nil, nil, body_589257)

var dfareportingAccountsUpdate* = Call_DfareportingAccountsUpdate_589241(
    name: "dfareportingAccountsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accounts",
    validator: validate_DfareportingAccountsUpdate_589242,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountsUpdate_589243,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountsList_589219 = ref object of OpenApiRestCall_588466
proc url_DfareportingAccountsList_589221(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountsList_589220(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the list of accounts, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589222 = path.getOrDefault("profileId")
  valid_589222 = validateParameter(valid_589222, JString, required = true,
                                 default = nil)
  if valid_589222 != nil:
    section.add "profileId", valid_589222
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "account*2015" will return objects with names like "account June 2015", "account April 2015", or simply "account 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "account" will match objects with name "my account", "account 2015", or simply "account".
  ##   active: JBool
  ##         : Select only active accounts. Don't set this field to select both active and non-active accounts.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only accounts with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589223 = query.getOrDefault("fields")
  valid_589223 = validateParameter(valid_589223, JString, required = false,
                                 default = nil)
  if valid_589223 != nil:
    section.add "fields", valid_589223
  var valid_589224 = query.getOrDefault("pageToken")
  valid_589224 = validateParameter(valid_589224, JString, required = false,
                                 default = nil)
  if valid_589224 != nil:
    section.add "pageToken", valid_589224
  var valid_589225 = query.getOrDefault("quotaUser")
  valid_589225 = validateParameter(valid_589225, JString, required = false,
                                 default = nil)
  if valid_589225 != nil:
    section.add "quotaUser", valid_589225
  var valid_589226 = query.getOrDefault("sortField")
  valid_589226 = validateParameter(valid_589226, JString, required = false,
                                 default = newJString("ID"))
  if valid_589226 != nil:
    section.add "sortField", valid_589226
  var valid_589227 = query.getOrDefault("alt")
  valid_589227 = validateParameter(valid_589227, JString, required = false,
                                 default = newJString("json"))
  if valid_589227 != nil:
    section.add "alt", valid_589227
  var valid_589228 = query.getOrDefault("searchString")
  valid_589228 = validateParameter(valid_589228, JString, required = false,
                                 default = nil)
  if valid_589228 != nil:
    section.add "searchString", valid_589228
  var valid_589229 = query.getOrDefault("active")
  valid_589229 = validateParameter(valid_589229, JBool, required = false, default = nil)
  if valid_589229 != nil:
    section.add "active", valid_589229
  var valid_589230 = query.getOrDefault("oauth_token")
  valid_589230 = validateParameter(valid_589230, JString, required = false,
                                 default = nil)
  if valid_589230 != nil:
    section.add "oauth_token", valid_589230
  var valid_589231 = query.getOrDefault("userIp")
  valid_589231 = validateParameter(valid_589231, JString, required = false,
                                 default = nil)
  if valid_589231 != nil:
    section.add "userIp", valid_589231
  var valid_589232 = query.getOrDefault("maxResults")
  valid_589232 = validateParameter(valid_589232, JInt, required = false,
                                 default = newJInt(1000))
  if valid_589232 != nil:
    section.add "maxResults", valid_589232
  var valid_589233 = query.getOrDefault("ids")
  valid_589233 = validateParameter(valid_589233, JArray, required = false,
                                 default = nil)
  if valid_589233 != nil:
    section.add "ids", valid_589233
  var valid_589234 = query.getOrDefault("key")
  valid_589234 = validateParameter(valid_589234, JString, required = false,
                                 default = nil)
  if valid_589234 != nil:
    section.add "key", valid_589234
  var valid_589235 = query.getOrDefault("sortOrder")
  valid_589235 = validateParameter(valid_589235, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_589235 != nil:
    section.add "sortOrder", valid_589235
  var valid_589236 = query.getOrDefault("prettyPrint")
  valid_589236 = validateParameter(valid_589236, JBool, required = false,
                                 default = newJBool(true))
  if valid_589236 != nil:
    section.add "prettyPrint", valid_589236
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589237: Call_DfareportingAccountsList_589219; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the list of accounts, possibly filtered. This method supports paging.
  ## 
  let valid = call_589237.validator(path, query, header, formData, body)
  let scheme = call_589237.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589237.url(scheme.get, call_589237.host, call_589237.base,
                         call_589237.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589237, url, valid)

proc call*(call_589238: Call_DfareportingAccountsList_589219; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "ID"; alt: string = "json"; searchString: string = "";
          active: bool = false; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountsList
  ## Retrieves the list of accounts, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "account*2015" will return objects with names like "account June 2015", "account April 2015", or simply "account 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "account" will match objects with name "my account", "account 2015", or simply "account".
  ##   active: bool
  ##         : Select only active accounts. Don't set this field to select both active and non-active accounts.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only accounts with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589239 = newJObject()
  var query_589240 = newJObject()
  add(path_589239, "profileId", newJString(profileId))
  add(query_589240, "fields", newJString(fields))
  add(query_589240, "pageToken", newJString(pageToken))
  add(query_589240, "quotaUser", newJString(quotaUser))
  add(query_589240, "sortField", newJString(sortField))
  add(query_589240, "alt", newJString(alt))
  add(query_589240, "searchString", newJString(searchString))
  add(query_589240, "active", newJBool(active))
  add(query_589240, "oauth_token", newJString(oauthToken))
  add(query_589240, "userIp", newJString(userIp))
  add(query_589240, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_589240.add "ids", ids
  add(query_589240, "key", newJString(key))
  add(query_589240, "sortOrder", newJString(sortOrder))
  add(query_589240, "prettyPrint", newJBool(prettyPrint))
  result = call_589238.call(path_589239, query_589240, nil, nil, nil)

var dfareportingAccountsList* = Call_DfareportingAccountsList_589219(
    name: "dfareportingAccountsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accounts",
    validator: validate_DfareportingAccountsList_589220,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountsList_589221,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountsPatch_589258 = ref object of OpenApiRestCall_588466
proc url_DfareportingAccountsPatch_589260(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountsPatch_589259(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing account. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589261 = path.getOrDefault("profileId")
  valid_589261 = validateParameter(valid_589261, JString, required = true,
                                 default = nil)
  if valid_589261 != nil:
    section.add "profileId", valid_589261
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Account ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589262 = query.getOrDefault("fields")
  valid_589262 = validateParameter(valid_589262, JString, required = false,
                                 default = nil)
  if valid_589262 != nil:
    section.add "fields", valid_589262
  var valid_589263 = query.getOrDefault("quotaUser")
  valid_589263 = validateParameter(valid_589263, JString, required = false,
                                 default = nil)
  if valid_589263 != nil:
    section.add "quotaUser", valid_589263
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_589264 = query.getOrDefault("id")
  valid_589264 = validateParameter(valid_589264, JString, required = true,
                                 default = nil)
  if valid_589264 != nil:
    section.add "id", valid_589264
  var valid_589265 = query.getOrDefault("alt")
  valid_589265 = validateParameter(valid_589265, JString, required = false,
                                 default = newJString("json"))
  if valid_589265 != nil:
    section.add "alt", valid_589265
  var valid_589266 = query.getOrDefault("oauth_token")
  valid_589266 = validateParameter(valid_589266, JString, required = false,
                                 default = nil)
  if valid_589266 != nil:
    section.add "oauth_token", valid_589266
  var valid_589267 = query.getOrDefault("userIp")
  valid_589267 = validateParameter(valid_589267, JString, required = false,
                                 default = nil)
  if valid_589267 != nil:
    section.add "userIp", valid_589267
  var valid_589268 = query.getOrDefault("key")
  valid_589268 = validateParameter(valid_589268, JString, required = false,
                                 default = nil)
  if valid_589268 != nil:
    section.add "key", valid_589268
  var valid_589269 = query.getOrDefault("prettyPrint")
  valid_589269 = validateParameter(valid_589269, JBool, required = false,
                                 default = newJBool(true))
  if valid_589269 != nil:
    section.add "prettyPrint", valid_589269
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589271: Call_DfareportingAccountsPatch_589258; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing account. This method supports patch semantics.
  ## 
  let valid = call_589271.validator(path, query, header, formData, body)
  let scheme = call_589271.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589271.url(scheme.get, call_589271.host, call_589271.base,
                         call_589271.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589271, url, valid)

proc call*(call_589272: Call_DfareportingAccountsPatch_589258; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountsPatch
  ## Updates an existing account. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Account ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589273 = newJObject()
  var query_589274 = newJObject()
  var body_589275 = newJObject()
  add(path_589273, "profileId", newJString(profileId))
  add(query_589274, "fields", newJString(fields))
  add(query_589274, "quotaUser", newJString(quotaUser))
  add(query_589274, "id", newJString(id))
  add(query_589274, "alt", newJString(alt))
  add(query_589274, "oauth_token", newJString(oauthToken))
  add(query_589274, "userIp", newJString(userIp))
  add(query_589274, "key", newJString(key))
  if body != nil:
    body_589275 = body
  add(query_589274, "prettyPrint", newJBool(prettyPrint))
  result = call_589272.call(path_589273, query_589274, nil, nil, body_589275)

var dfareportingAccountsPatch* = Call_DfareportingAccountsPatch_589258(
    name: "dfareportingAccountsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accounts",
    validator: validate_DfareportingAccountsPatch_589259,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountsPatch_589260,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountsGet_589276 = ref object of OpenApiRestCall_588466
proc url_DfareportingAccountsGet_589278(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accounts/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountsGet_589277(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one account by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Account ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589279 = path.getOrDefault("profileId")
  valid_589279 = validateParameter(valid_589279, JString, required = true,
                                 default = nil)
  if valid_589279 != nil:
    section.add "profileId", valid_589279
  var valid_589280 = path.getOrDefault("id")
  valid_589280 = validateParameter(valid_589280, JString, required = true,
                                 default = nil)
  if valid_589280 != nil:
    section.add "id", valid_589280
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589281 = query.getOrDefault("fields")
  valid_589281 = validateParameter(valid_589281, JString, required = false,
                                 default = nil)
  if valid_589281 != nil:
    section.add "fields", valid_589281
  var valid_589282 = query.getOrDefault("quotaUser")
  valid_589282 = validateParameter(valid_589282, JString, required = false,
                                 default = nil)
  if valid_589282 != nil:
    section.add "quotaUser", valid_589282
  var valid_589283 = query.getOrDefault("alt")
  valid_589283 = validateParameter(valid_589283, JString, required = false,
                                 default = newJString("json"))
  if valid_589283 != nil:
    section.add "alt", valid_589283
  var valid_589284 = query.getOrDefault("oauth_token")
  valid_589284 = validateParameter(valid_589284, JString, required = false,
                                 default = nil)
  if valid_589284 != nil:
    section.add "oauth_token", valid_589284
  var valid_589285 = query.getOrDefault("userIp")
  valid_589285 = validateParameter(valid_589285, JString, required = false,
                                 default = nil)
  if valid_589285 != nil:
    section.add "userIp", valid_589285
  var valid_589286 = query.getOrDefault("key")
  valid_589286 = validateParameter(valid_589286, JString, required = false,
                                 default = nil)
  if valid_589286 != nil:
    section.add "key", valid_589286
  var valid_589287 = query.getOrDefault("prettyPrint")
  valid_589287 = validateParameter(valid_589287, JBool, required = false,
                                 default = newJBool(true))
  if valid_589287 != nil:
    section.add "prettyPrint", valid_589287
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589288: Call_DfareportingAccountsGet_589276; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one account by ID.
  ## 
  let valid = call_589288.validator(path, query, header, formData, body)
  let scheme = call_589288.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589288.url(scheme.get, call_589288.host, call_589288.base,
                         call_589288.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589288, url, valid)

proc call*(call_589289: Call_DfareportingAccountsGet_589276; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingAccountsGet
  ## Gets one account by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Account ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589290 = newJObject()
  var query_589291 = newJObject()
  add(path_589290, "profileId", newJString(profileId))
  add(query_589291, "fields", newJString(fields))
  add(query_589291, "quotaUser", newJString(quotaUser))
  add(query_589291, "alt", newJString(alt))
  add(query_589291, "oauth_token", newJString(oauthToken))
  add(query_589291, "userIp", newJString(userIp))
  add(path_589290, "id", newJString(id))
  add(query_589291, "key", newJString(key))
  add(query_589291, "prettyPrint", newJBool(prettyPrint))
  result = call_589289.call(path_589290, query_589291, nil, nil, nil)

var dfareportingAccountsGet* = Call_DfareportingAccountsGet_589276(
    name: "dfareportingAccountsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accounts/{id}",
    validator: validate_DfareportingAccountsGet_589277,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountsGet_589278,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdsUpdate_589330 = ref object of OpenApiRestCall_588466
proc url_DfareportingAdsUpdate_589332(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsUpdate_589331(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing ad.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589333 = path.getOrDefault("profileId")
  valid_589333 = validateParameter(valid_589333, JString, required = true,
                                 default = nil)
  if valid_589333 != nil:
    section.add "profileId", valid_589333
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589334 = query.getOrDefault("fields")
  valid_589334 = validateParameter(valid_589334, JString, required = false,
                                 default = nil)
  if valid_589334 != nil:
    section.add "fields", valid_589334
  var valid_589335 = query.getOrDefault("quotaUser")
  valid_589335 = validateParameter(valid_589335, JString, required = false,
                                 default = nil)
  if valid_589335 != nil:
    section.add "quotaUser", valid_589335
  var valid_589336 = query.getOrDefault("alt")
  valid_589336 = validateParameter(valid_589336, JString, required = false,
                                 default = newJString("json"))
  if valid_589336 != nil:
    section.add "alt", valid_589336
  var valid_589337 = query.getOrDefault("oauth_token")
  valid_589337 = validateParameter(valid_589337, JString, required = false,
                                 default = nil)
  if valid_589337 != nil:
    section.add "oauth_token", valid_589337
  var valid_589338 = query.getOrDefault("userIp")
  valid_589338 = validateParameter(valid_589338, JString, required = false,
                                 default = nil)
  if valid_589338 != nil:
    section.add "userIp", valid_589338
  var valid_589339 = query.getOrDefault("key")
  valid_589339 = validateParameter(valid_589339, JString, required = false,
                                 default = nil)
  if valid_589339 != nil:
    section.add "key", valid_589339
  var valid_589340 = query.getOrDefault("prettyPrint")
  valid_589340 = validateParameter(valid_589340, JBool, required = false,
                                 default = newJBool(true))
  if valid_589340 != nil:
    section.add "prettyPrint", valid_589340
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589342: Call_DfareportingAdsUpdate_589330; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing ad.
  ## 
  let valid = call_589342.validator(path, query, header, formData, body)
  let scheme = call_589342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589342.url(scheme.get, call_589342.host, call_589342.base,
                         call_589342.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589342, url, valid)

proc call*(call_589343: Call_DfareportingAdsUpdate_589330; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdsUpdate
  ## Updates an existing ad.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589344 = newJObject()
  var query_589345 = newJObject()
  var body_589346 = newJObject()
  add(path_589344, "profileId", newJString(profileId))
  add(query_589345, "fields", newJString(fields))
  add(query_589345, "quotaUser", newJString(quotaUser))
  add(query_589345, "alt", newJString(alt))
  add(query_589345, "oauth_token", newJString(oauthToken))
  add(query_589345, "userIp", newJString(userIp))
  add(query_589345, "key", newJString(key))
  if body != nil:
    body_589346 = body
  add(query_589345, "prettyPrint", newJBool(prettyPrint))
  result = call_589343.call(path_589344, query_589345, nil, nil, body_589346)

var dfareportingAdsUpdate* = Call_DfareportingAdsUpdate_589330(
    name: "dfareportingAdsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads",
    validator: validate_DfareportingAdsUpdate_589331, base: "/dfareporting/v3.2",
    url: url_DfareportingAdsUpdate_589332, schemes: {Scheme.Https})
type
  Call_DfareportingAdsInsert_589347 = ref object of OpenApiRestCall_588466
proc url_DfareportingAdsInsert_589349(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsInsert_589348(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new ad.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589350 = path.getOrDefault("profileId")
  valid_589350 = validateParameter(valid_589350, JString, required = true,
                                 default = nil)
  if valid_589350 != nil:
    section.add "profileId", valid_589350
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589351 = query.getOrDefault("fields")
  valid_589351 = validateParameter(valid_589351, JString, required = false,
                                 default = nil)
  if valid_589351 != nil:
    section.add "fields", valid_589351
  var valid_589352 = query.getOrDefault("quotaUser")
  valid_589352 = validateParameter(valid_589352, JString, required = false,
                                 default = nil)
  if valid_589352 != nil:
    section.add "quotaUser", valid_589352
  var valid_589353 = query.getOrDefault("alt")
  valid_589353 = validateParameter(valid_589353, JString, required = false,
                                 default = newJString("json"))
  if valid_589353 != nil:
    section.add "alt", valid_589353
  var valid_589354 = query.getOrDefault("oauth_token")
  valid_589354 = validateParameter(valid_589354, JString, required = false,
                                 default = nil)
  if valid_589354 != nil:
    section.add "oauth_token", valid_589354
  var valid_589355 = query.getOrDefault("userIp")
  valid_589355 = validateParameter(valid_589355, JString, required = false,
                                 default = nil)
  if valid_589355 != nil:
    section.add "userIp", valid_589355
  var valid_589356 = query.getOrDefault("key")
  valid_589356 = validateParameter(valid_589356, JString, required = false,
                                 default = nil)
  if valid_589356 != nil:
    section.add "key", valid_589356
  var valid_589357 = query.getOrDefault("prettyPrint")
  valid_589357 = validateParameter(valid_589357, JBool, required = false,
                                 default = newJBool(true))
  if valid_589357 != nil:
    section.add "prettyPrint", valid_589357
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589359: Call_DfareportingAdsInsert_589347; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new ad.
  ## 
  let valid = call_589359.validator(path, query, header, formData, body)
  let scheme = call_589359.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589359.url(scheme.get, call_589359.host, call_589359.base,
                         call_589359.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589359, url, valid)

proc call*(call_589360: Call_DfareportingAdsInsert_589347; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdsInsert
  ## Inserts a new ad.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589361 = newJObject()
  var query_589362 = newJObject()
  var body_589363 = newJObject()
  add(path_589361, "profileId", newJString(profileId))
  add(query_589362, "fields", newJString(fields))
  add(query_589362, "quotaUser", newJString(quotaUser))
  add(query_589362, "alt", newJString(alt))
  add(query_589362, "oauth_token", newJString(oauthToken))
  add(query_589362, "userIp", newJString(userIp))
  add(query_589362, "key", newJString(key))
  if body != nil:
    body_589363 = body
  add(query_589362, "prettyPrint", newJBool(prettyPrint))
  result = call_589360.call(path_589361, query_589362, nil, nil, body_589363)

var dfareportingAdsInsert* = Call_DfareportingAdsInsert_589347(
    name: "dfareportingAdsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads",
    validator: validate_DfareportingAdsInsert_589348, base: "/dfareporting/v3.2",
    url: url_DfareportingAdsInsert_589349, schemes: {Scheme.Https})
type
  Call_DfareportingAdsList_589292 = ref object of OpenApiRestCall_588466
proc url_DfareportingAdsList_589294(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsList_589293(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Retrieves a list of ads, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589295 = path.getOrDefault("profileId")
  valid_589295 = validateParameter(valid_589295, JString, required = true,
                                 default = nil)
  if valid_589295 != nil:
    section.add "profileId", valid_589295
  result.add "path", section
  ## parameters in `query` object:
  ##   overriddenEventTagId: JString
  ##                       : Select only ads with this event tag override ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   creativeIds: JArray
  ##              : Select only ads with these creative IDs assigned.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   sslCompliant: JBool
  ##               : Select only ads that are SSL-compliant.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "ad*2015" will return objects with names like "ad June 2015", "ad April 2015", or simply "ad 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "ad" will match objects with name "my ad", "ad 2015", or simply "ad".
  ##   advertiserId: JString
  ##               : Select only ads with this advertiser ID.
  ##   dynamicClickTracker: JBool
  ##                      : Select only dynamic click trackers. Applicable when type is AD_SERVING_CLICK_TRACKER. If true, select dynamic click trackers. If false, select static click trackers. Leave unset to select both.
  ##   sizeIds: JArray
  ##          : Select only ads with these size IDs.
  ##   type: JArray
  ##       : Select only ads with these types.
  ##   active: JBool
  ##         : Select only active ads.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   campaignIds: JArray
  ##              : Select only ads with these campaign IDs.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   creativeOptimizationConfigurationIds: JArray
  ##                                       : Select only ads with these creative optimization configuration IDs.
  ##   archived: JBool
  ##           : Select only archived ads.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only ads with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   compatibility: JString
  ##                : Select default ads with the specified compatibility. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering an in-stream video ads developed with the VAST standard.
  ##   landingPageIds: JArray
  ##                 : Select only ads with these landing page IDs.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   remarketingListIds: JArray
  ##                     : Select only ads whose list targeting expression use these remarketing list IDs.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   sslRequired: JBool
  ##              : Select only ads that require SSL.
  ##   audienceSegmentIds: JArray
  ##                     : Select only ads with these audience segment IDs.
  ##   placementIds: JArray
  ##               : Select only ads with these placement IDs assigned.
  section = newJObject()
  var valid_589296 = query.getOrDefault("overriddenEventTagId")
  valid_589296 = validateParameter(valid_589296, JString, required = false,
                                 default = nil)
  if valid_589296 != nil:
    section.add "overriddenEventTagId", valid_589296
  var valid_589297 = query.getOrDefault("fields")
  valid_589297 = validateParameter(valid_589297, JString, required = false,
                                 default = nil)
  if valid_589297 != nil:
    section.add "fields", valid_589297
  var valid_589298 = query.getOrDefault("creativeIds")
  valid_589298 = validateParameter(valid_589298, JArray, required = false,
                                 default = nil)
  if valid_589298 != nil:
    section.add "creativeIds", valid_589298
  var valid_589299 = query.getOrDefault("quotaUser")
  valid_589299 = validateParameter(valid_589299, JString, required = false,
                                 default = nil)
  if valid_589299 != nil:
    section.add "quotaUser", valid_589299
  var valid_589300 = query.getOrDefault("pageToken")
  valid_589300 = validateParameter(valid_589300, JString, required = false,
                                 default = nil)
  if valid_589300 != nil:
    section.add "pageToken", valid_589300
  var valid_589301 = query.getOrDefault("sortField")
  valid_589301 = validateParameter(valid_589301, JString, required = false,
                                 default = newJString("ID"))
  if valid_589301 != nil:
    section.add "sortField", valid_589301
  var valid_589302 = query.getOrDefault("alt")
  valid_589302 = validateParameter(valid_589302, JString, required = false,
                                 default = newJString("json"))
  if valid_589302 != nil:
    section.add "alt", valid_589302
  var valid_589303 = query.getOrDefault("sslCompliant")
  valid_589303 = validateParameter(valid_589303, JBool, required = false, default = nil)
  if valid_589303 != nil:
    section.add "sslCompliant", valid_589303
  var valid_589304 = query.getOrDefault("searchString")
  valid_589304 = validateParameter(valid_589304, JString, required = false,
                                 default = nil)
  if valid_589304 != nil:
    section.add "searchString", valid_589304
  var valid_589305 = query.getOrDefault("advertiserId")
  valid_589305 = validateParameter(valid_589305, JString, required = false,
                                 default = nil)
  if valid_589305 != nil:
    section.add "advertiserId", valid_589305
  var valid_589306 = query.getOrDefault("dynamicClickTracker")
  valid_589306 = validateParameter(valid_589306, JBool, required = false, default = nil)
  if valid_589306 != nil:
    section.add "dynamicClickTracker", valid_589306
  var valid_589307 = query.getOrDefault("sizeIds")
  valid_589307 = validateParameter(valid_589307, JArray, required = false,
                                 default = nil)
  if valid_589307 != nil:
    section.add "sizeIds", valid_589307
  var valid_589308 = query.getOrDefault("type")
  valid_589308 = validateParameter(valid_589308, JArray, required = false,
                                 default = nil)
  if valid_589308 != nil:
    section.add "type", valid_589308
  var valid_589309 = query.getOrDefault("active")
  valid_589309 = validateParameter(valid_589309, JBool, required = false, default = nil)
  if valid_589309 != nil:
    section.add "active", valid_589309
  var valid_589310 = query.getOrDefault("oauth_token")
  valid_589310 = validateParameter(valid_589310, JString, required = false,
                                 default = nil)
  if valid_589310 != nil:
    section.add "oauth_token", valid_589310
  var valid_589311 = query.getOrDefault("campaignIds")
  valid_589311 = validateParameter(valid_589311, JArray, required = false,
                                 default = nil)
  if valid_589311 != nil:
    section.add "campaignIds", valid_589311
  var valid_589312 = query.getOrDefault("userIp")
  valid_589312 = validateParameter(valid_589312, JString, required = false,
                                 default = nil)
  if valid_589312 != nil:
    section.add "userIp", valid_589312
  var valid_589313 = query.getOrDefault("creativeOptimizationConfigurationIds")
  valid_589313 = validateParameter(valid_589313, JArray, required = false,
                                 default = nil)
  if valid_589313 != nil:
    section.add "creativeOptimizationConfigurationIds", valid_589313
  var valid_589314 = query.getOrDefault("archived")
  valid_589314 = validateParameter(valid_589314, JBool, required = false, default = nil)
  if valid_589314 != nil:
    section.add "archived", valid_589314
  var valid_589315 = query.getOrDefault("maxResults")
  valid_589315 = validateParameter(valid_589315, JInt, required = false,
                                 default = newJInt(1000))
  if valid_589315 != nil:
    section.add "maxResults", valid_589315
  var valid_589316 = query.getOrDefault("ids")
  valid_589316 = validateParameter(valid_589316, JArray, required = false,
                                 default = nil)
  if valid_589316 != nil:
    section.add "ids", valid_589316
  var valid_589317 = query.getOrDefault("key")
  valid_589317 = validateParameter(valid_589317, JString, required = false,
                                 default = nil)
  if valid_589317 != nil:
    section.add "key", valid_589317
  var valid_589318 = query.getOrDefault("compatibility")
  valid_589318 = validateParameter(valid_589318, JString, required = false,
                                 default = newJString("APP"))
  if valid_589318 != nil:
    section.add "compatibility", valid_589318
  var valid_589319 = query.getOrDefault("landingPageIds")
  valid_589319 = validateParameter(valid_589319, JArray, required = false,
                                 default = nil)
  if valid_589319 != nil:
    section.add "landingPageIds", valid_589319
  var valid_589320 = query.getOrDefault("sortOrder")
  valid_589320 = validateParameter(valid_589320, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_589320 != nil:
    section.add "sortOrder", valid_589320
  var valid_589321 = query.getOrDefault("remarketingListIds")
  valid_589321 = validateParameter(valid_589321, JArray, required = false,
                                 default = nil)
  if valid_589321 != nil:
    section.add "remarketingListIds", valid_589321
  var valid_589322 = query.getOrDefault("prettyPrint")
  valid_589322 = validateParameter(valid_589322, JBool, required = false,
                                 default = newJBool(true))
  if valid_589322 != nil:
    section.add "prettyPrint", valid_589322
  var valid_589323 = query.getOrDefault("sslRequired")
  valid_589323 = validateParameter(valid_589323, JBool, required = false, default = nil)
  if valid_589323 != nil:
    section.add "sslRequired", valid_589323
  var valid_589324 = query.getOrDefault("audienceSegmentIds")
  valid_589324 = validateParameter(valid_589324, JArray, required = false,
                                 default = nil)
  if valid_589324 != nil:
    section.add "audienceSegmentIds", valid_589324
  var valid_589325 = query.getOrDefault("placementIds")
  valid_589325 = validateParameter(valid_589325, JArray, required = false,
                                 default = nil)
  if valid_589325 != nil:
    section.add "placementIds", valid_589325
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589326: Call_DfareportingAdsList_589292; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of ads, possibly filtered. This method supports paging.
  ## 
  let valid = call_589326.validator(path, query, header, formData, body)
  let scheme = call_589326.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589326.url(scheme.get, call_589326.host, call_589326.base,
                         call_589326.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589326, url, valid)

proc call*(call_589327: Call_DfareportingAdsList_589292; profileId: string;
          overriddenEventTagId: string = ""; fields: string = "";
          creativeIds: JsonNode = nil; quotaUser: string = ""; pageToken: string = "";
          sortField: string = "ID"; alt: string = "json"; sslCompliant: bool = false;
          searchString: string = ""; advertiserId: string = "";
          dynamicClickTracker: bool = false; sizeIds: JsonNode = nil;
          `type`: JsonNode = nil; active: bool = false; oauthToken: string = "";
          campaignIds: JsonNode = nil; userIp: string = "";
          creativeOptimizationConfigurationIds: JsonNode = nil;
          archived: bool = false; maxResults: int = 1000; ids: JsonNode = nil;
          key: string = ""; compatibility: string = "APP";
          landingPageIds: JsonNode = nil; sortOrder: string = "ASCENDING";
          remarketingListIds: JsonNode = nil; prettyPrint: bool = true;
          sslRequired: bool = false; audienceSegmentIds: JsonNode = nil;
          placementIds: JsonNode = nil): Recallable =
  ## dfareportingAdsList
  ## Retrieves a list of ads, possibly filtered. This method supports paging.
  ##   overriddenEventTagId: string
  ##                       : Select only ads with this event tag override ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   creativeIds: JArray
  ##              : Select only ads with these creative IDs assigned.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   sslCompliant: bool
  ##               : Select only ads that are SSL-compliant.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "ad*2015" will return objects with names like "ad June 2015", "ad April 2015", or simply "ad 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "ad" will match objects with name "my ad", "ad 2015", or simply "ad".
  ##   advertiserId: string
  ##               : Select only ads with this advertiser ID.
  ##   dynamicClickTracker: bool
  ##                      : Select only dynamic click trackers. Applicable when type is AD_SERVING_CLICK_TRACKER. If true, select dynamic click trackers. If false, select static click trackers. Leave unset to select both.
  ##   sizeIds: JArray
  ##          : Select only ads with these size IDs.
  ##   type: JArray
  ##       : Select only ads with these types.
  ##   active: bool
  ##         : Select only active ads.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   campaignIds: JArray
  ##              : Select only ads with these campaign IDs.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   creativeOptimizationConfigurationIds: JArray
  ##                                       : Select only ads with these creative optimization configuration IDs.
  ##   archived: bool
  ##           : Select only archived ads.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only ads with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   compatibility: string
  ##                : Select default ads with the specified compatibility. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering an in-stream video ads developed with the VAST standard.
  ##   landingPageIds: JArray
  ##                 : Select only ads with these landing page IDs.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   remarketingListIds: JArray
  ##                     : Select only ads whose list targeting expression use these remarketing list IDs.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   sslRequired: bool
  ##              : Select only ads that require SSL.
  ##   audienceSegmentIds: JArray
  ##                     : Select only ads with these audience segment IDs.
  ##   placementIds: JArray
  ##               : Select only ads with these placement IDs assigned.
  var path_589328 = newJObject()
  var query_589329 = newJObject()
  add(query_589329, "overriddenEventTagId", newJString(overriddenEventTagId))
  add(path_589328, "profileId", newJString(profileId))
  add(query_589329, "fields", newJString(fields))
  if creativeIds != nil:
    query_589329.add "creativeIds", creativeIds
  add(query_589329, "quotaUser", newJString(quotaUser))
  add(query_589329, "pageToken", newJString(pageToken))
  add(query_589329, "sortField", newJString(sortField))
  add(query_589329, "alt", newJString(alt))
  add(query_589329, "sslCompliant", newJBool(sslCompliant))
  add(query_589329, "searchString", newJString(searchString))
  add(query_589329, "advertiserId", newJString(advertiserId))
  add(query_589329, "dynamicClickTracker", newJBool(dynamicClickTracker))
  if sizeIds != nil:
    query_589329.add "sizeIds", sizeIds
  if `type` != nil:
    query_589329.add "type", `type`
  add(query_589329, "active", newJBool(active))
  add(query_589329, "oauth_token", newJString(oauthToken))
  if campaignIds != nil:
    query_589329.add "campaignIds", campaignIds
  add(query_589329, "userIp", newJString(userIp))
  if creativeOptimizationConfigurationIds != nil:
    query_589329.add "creativeOptimizationConfigurationIds",
                    creativeOptimizationConfigurationIds
  add(query_589329, "archived", newJBool(archived))
  add(query_589329, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_589329.add "ids", ids
  add(query_589329, "key", newJString(key))
  add(query_589329, "compatibility", newJString(compatibility))
  if landingPageIds != nil:
    query_589329.add "landingPageIds", landingPageIds
  add(query_589329, "sortOrder", newJString(sortOrder))
  if remarketingListIds != nil:
    query_589329.add "remarketingListIds", remarketingListIds
  add(query_589329, "prettyPrint", newJBool(prettyPrint))
  add(query_589329, "sslRequired", newJBool(sslRequired))
  if audienceSegmentIds != nil:
    query_589329.add "audienceSegmentIds", audienceSegmentIds
  if placementIds != nil:
    query_589329.add "placementIds", placementIds
  result = call_589327.call(path_589328, query_589329, nil, nil, nil)

var dfareportingAdsList* = Call_DfareportingAdsList_589292(
    name: "dfareportingAdsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads",
    validator: validate_DfareportingAdsList_589293, base: "/dfareporting/v3.2",
    url: url_DfareportingAdsList_589294, schemes: {Scheme.Https})
type
  Call_DfareportingAdsPatch_589364 = ref object of OpenApiRestCall_588466
proc url_DfareportingAdsPatch_589366(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsPatch_589365(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing ad. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589367 = path.getOrDefault("profileId")
  valid_589367 = validateParameter(valid_589367, JString, required = true,
                                 default = nil)
  if valid_589367 != nil:
    section.add "profileId", valid_589367
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Ad ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589368 = query.getOrDefault("fields")
  valid_589368 = validateParameter(valid_589368, JString, required = false,
                                 default = nil)
  if valid_589368 != nil:
    section.add "fields", valid_589368
  var valid_589369 = query.getOrDefault("quotaUser")
  valid_589369 = validateParameter(valid_589369, JString, required = false,
                                 default = nil)
  if valid_589369 != nil:
    section.add "quotaUser", valid_589369
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_589370 = query.getOrDefault("id")
  valid_589370 = validateParameter(valid_589370, JString, required = true,
                                 default = nil)
  if valid_589370 != nil:
    section.add "id", valid_589370
  var valid_589371 = query.getOrDefault("alt")
  valid_589371 = validateParameter(valid_589371, JString, required = false,
                                 default = newJString("json"))
  if valid_589371 != nil:
    section.add "alt", valid_589371
  var valid_589372 = query.getOrDefault("oauth_token")
  valid_589372 = validateParameter(valid_589372, JString, required = false,
                                 default = nil)
  if valid_589372 != nil:
    section.add "oauth_token", valid_589372
  var valid_589373 = query.getOrDefault("userIp")
  valid_589373 = validateParameter(valid_589373, JString, required = false,
                                 default = nil)
  if valid_589373 != nil:
    section.add "userIp", valid_589373
  var valid_589374 = query.getOrDefault("key")
  valid_589374 = validateParameter(valid_589374, JString, required = false,
                                 default = nil)
  if valid_589374 != nil:
    section.add "key", valid_589374
  var valid_589375 = query.getOrDefault("prettyPrint")
  valid_589375 = validateParameter(valid_589375, JBool, required = false,
                                 default = newJBool(true))
  if valid_589375 != nil:
    section.add "prettyPrint", valid_589375
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589377: Call_DfareportingAdsPatch_589364; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing ad. This method supports patch semantics.
  ## 
  let valid = call_589377.validator(path, query, header, formData, body)
  let scheme = call_589377.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589377.url(scheme.get, call_589377.host, call_589377.base,
                         call_589377.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589377, url, valid)

proc call*(call_589378: Call_DfareportingAdsPatch_589364; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdsPatch
  ## Updates an existing ad. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Ad ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589379 = newJObject()
  var query_589380 = newJObject()
  var body_589381 = newJObject()
  add(path_589379, "profileId", newJString(profileId))
  add(query_589380, "fields", newJString(fields))
  add(query_589380, "quotaUser", newJString(quotaUser))
  add(query_589380, "id", newJString(id))
  add(query_589380, "alt", newJString(alt))
  add(query_589380, "oauth_token", newJString(oauthToken))
  add(query_589380, "userIp", newJString(userIp))
  add(query_589380, "key", newJString(key))
  if body != nil:
    body_589381 = body
  add(query_589380, "prettyPrint", newJBool(prettyPrint))
  result = call_589378.call(path_589379, query_589380, nil, nil, body_589381)

var dfareportingAdsPatch* = Call_DfareportingAdsPatch_589364(
    name: "dfareportingAdsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads",
    validator: validate_DfareportingAdsPatch_589365, base: "/dfareporting/v3.2",
    url: url_DfareportingAdsPatch_589366, schemes: {Scheme.Https})
type
  Call_DfareportingAdsGet_589382 = ref object of OpenApiRestCall_588466
proc url_DfareportingAdsGet_589384(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsGet_589383(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets one ad by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Ad ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589385 = path.getOrDefault("profileId")
  valid_589385 = validateParameter(valid_589385, JString, required = true,
                                 default = nil)
  if valid_589385 != nil:
    section.add "profileId", valid_589385
  var valid_589386 = path.getOrDefault("id")
  valid_589386 = validateParameter(valid_589386, JString, required = true,
                                 default = nil)
  if valid_589386 != nil:
    section.add "id", valid_589386
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589387 = query.getOrDefault("fields")
  valid_589387 = validateParameter(valid_589387, JString, required = false,
                                 default = nil)
  if valid_589387 != nil:
    section.add "fields", valid_589387
  var valid_589388 = query.getOrDefault("quotaUser")
  valid_589388 = validateParameter(valid_589388, JString, required = false,
                                 default = nil)
  if valid_589388 != nil:
    section.add "quotaUser", valid_589388
  var valid_589389 = query.getOrDefault("alt")
  valid_589389 = validateParameter(valid_589389, JString, required = false,
                                 default = newJString("json"))
  if valid_589389 != nil:
    section.add "alt", valid_589389
  var valid_589390 = query.getOrDefault("oauth_token")
  valid_589390 = validateParameter(valid_589390, JString, required = false,
                                 default = nil)
  if valid_589390 != nil:
    section.add "oauth_token", valid_589390
  var valid_589391 = query.getOrDefault("userIp")
  valid_589391 = validateParameter(valid_589391, JString, required = false,
                                 default = nil)
  if valid_589391 != nil:
    section.add "userIp", valid_589391
  var valid_589392 = query.getOrDefault("key")
  valid_589392 = validateParameter(valid_589392, JString, required = false,
                                 default = nil)
  if valid_589392 != nil:
    section.add "key", valid_589392
  var valid_589393 = query.getOrDefault("prettyPrint")
  valid_589393 = validateParameter(valid_589393, JBool, required = false,
                                 default = newJBool(true))
  if valid_589393 != nil:
    section.add "prettyPrint", valid_589393
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589394: Call_DfareportingAdsGet_589382; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one ad by ID.
  ## 
  let valid = call_589394.validator(path, query, header, formData, body)
  let scheme = call_589394.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589394.url(scheme.get, call_589394.host, call_589394.base,
                         call_589394.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589394, url, valid)

proc call*(call_589395: Call_DfareportingAdsGet_589382; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingAdsGet
  ## Gets one ad by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Ad ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589396 = newJObject()
  var query_589397 = newJObject()
  add(path_589396, "profileId", newJString(profileId))
  add(query_589397, "fields", newJString(fields))
  add(query_589397, "quotaUser", newJString(quotaUser))
  add(query_589397, "alt", newJString(alt))
  add(query_589397, "oauth_token", newJString(oauthToken))
  add(query_589397, "userIp", newJString(userIp))
  add(path_589396, "id", newJString(id))
  add(query_589397, "key", newJString(key))
  add(query_589397, "prettyPrint", newJBool(prettyPrint))
  result = call_589395.call(path_589396, query_589397, nil, nil, nil)

var dfareportingAdsGet* = Call_DfareportingAdsGet_589382(
    name: "dfareportingAdsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads/{id}",
    validator: validate_DfareportingAdsGet_589383, base: "/dfareporting/v3.2",
    url: url_DfareportingAdsGet_589384, schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsUpdate_589419 = ref object of OpenApiRestCall_588466
proc url_DfareportingAdvertiserGroupsUpdate_589421(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsUpdate_589420(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing advertiser group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589422 = path.getOrDefault("profileId")
  valid_589422 = validateParameter(valid_589422, JString, required = true,
                                 default = nil)
  if valid_589422 != nil:
    section.add "profileId", valid_589422
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589423 = query.getOrDefault("fields")
  valid_589423 = validateParameter(valid_589423, JString, required = false,
                                 default = nil)
  if valid_589423 != nil:
    section.add "fields", valid_589423
  var valid_589424 = query.getOrDefault("quotaUser")
  valid_589424 = validateParameter(valid_589424, JString, required = false,
                                 default = nil)
  if valid_589424 != nil:
    section.add "quotaUser", valid_589424
  var valid_589425 = query.getOrDefault("alt")
  valid_589425 = validateParameter(valid_589425, JString, required = false,
                                 default = newJString("json"))
  if valid_589425 != nil:
    section.add "alt", valid_589425
  var valid_589426 = query.getOrDefault("oauth_token")
  valid_589426 = validateParameter(valid_589426, JString, required = false,
                                 default = nil)
  if valid_589426 != nil:
    section.add "oauth_token", valid_589426
  var valid_589427 = query.getOrDefault("userIp")
  valid_589427 = validateParameter(valid_589427, JString, required = false,
                                 default = nil)
  if valid_589427 != nil:
    section.add "userIp", valid_589427
  var valid_589428 = query.getOrDefault("key")
  valid_589428 = validateParameter(valid_589428, JString, required = false,
                                 default = nil)
  if valid_589428 != nil:
    section.add "key", valid_589428
  var valid_589429 = query.getOrDefault("prettyPrint")
  valid_589429 = validateParameter(valid_589429, JBool, required = false,
                                 default = newJBool(true))
  if valid_589429 != nil:
    section.add "prettyPrint", valid_589429
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589431: Call_DfareportingAdvertiserGroupsUpdate_589419;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing advertiser group.
  ## 
  let valid = call_589431.validator(path, query, header, formData, body)
  let scheme = call_589431.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589431.url(scheme.get, call_589431.host, call_589431.base,
                         call_589431.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589431, url, valid)

proc call*(call_589432: Call_DfareportingAdvertiserGroupsUpdate_589419;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserGroupsUpdate
  ## Updates an existing advertiser group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589433 = newJObject()
  var query_589434 = newJObject()
  var body_589435 = newJObject()
  add(path_589433, "profileId", newJString(profileId))
  add(query_589434, "fields", newJString(fields))
  add(query_589434, "quotaUser", newJString(quotaUser))
  add(query_589434, "alt", newJString(alt))
  add(query_589434, "oauth_token", newJString(oauthToken))
  add(query_589434, "userIp", newJString(userIp))
  add(query_589434, "key", newJString(key))
  if body != nil:
    body_589435 = body
  add(query_589434, "prettyPrint", newJBool(prettyPrint))
  result = call_589432.call(path_589433, query_589434, nil, nil, body_589435)

var dfareportingAdvertiserGroupsUpdate* = Call_DfareportingAdvertiserGroupsUpdate_589419(
    name: "dfareportingAdvertiserGroupsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups",
    validator: validate_DfareportingAdvertiserGroupsUpdate_589420,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsUpdate_589421,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsInsert_589436 = ref object of OpenApiRestCall_588466
proc url_DfareportingAdvertiserGroupsInsert_589438(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsInsert_589437(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new advertiser group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589439 = path.getOrDefault("profileId")
  valid_589439 = validateParameter(valid_589439, JString, required = true,
                                 default = nil)
  if valid_589439 != nil:
    section.add "profileId", valid_589439
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589440 = query.getOrDefault("fields")
  valid_589440 = validateParameter(valid_589440, JString, required = false,
                                 default = nil)
  if valid_589440 != nil:
    section.add "fields", valid_589440
  var valid_589441 = query.getOrDefault("quotaUser")
  valid_589441 = validateParameter(valid_589441, JString, required = false,
                                 default = nil)
  if valid_589441 != nil:
    section.add "quotaUser", valid_589441
  var valid_589442 = query.getOrDefault("alt")
  valid_589442 = validateParameter(valid_589442, JString, required = false,
                                 default = newJString("json"))
  if valid_589442 != nil:
    section.add "alt", valid_589442
  var valid_589443 = query.getOrDefault("oauth_token")
  valid_589443 = validateParameter(valid_589443, JString, required = false,
                                 default = nil)
  if valid_589443 != nil:
    section.add "oauth_token", valid_589443
  var valid_589444 = query.getOrDefault("userIp")
  valid_589444 = validateParameter(valid_589444, JString, required = false,
                                 default = nil)
  if valid_589444 != nil:
    section.add "userIp", valid_589444
  var valid_589445 = query.getOrDefault("key")
  valid_589445 = validateParameter(valid_589445, JString, required = false,
                                 default = nil)
  if valid_589445 != nil:
    section.add "key", valid_589445
  var valid_589446 = query.getOrDefault("prettyPrint")
  valid_589446 = validateParameter(valid_589446, JBool, required = false,
                                 default = newJBool(true))
  if valid_589446 != nil:
    section.add "prettyPrint", valid_589446
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589448: Call_DfareportingAdvertiserGroupsInsert_589436;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new advertiser group.
  ## 
  let valid = call_589448.validator(path, query, header, formData, body)
  let scheme = call_589448.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589448.url(scheme.get, call_589448.host, call_589448.base,
                         call_589448.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589448, url, valid)

proc call*(call_589449: Call_DfareportingAdvertiserGroupsInsert_589436;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserGroupsInsert
  ## Inserts a new advertiser group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589450 = newJObject()
  var query_589451 = newJObject()
  var body_589452 = newJObject()
  add(path_589450, "profileId", newJString(profileId))
  add(query_589451, "fields", newJString(fields))
  add(query_589451, "quotaUser", newJString(quotaUser))
  add(query_589451, "alt", newJString(alt))
  add(query_589451, "oauth_token", newJString(oauthToken))
  add(query_589451, "userIp", newJString(userIp))
  add(query_589451, "key", newJString(key))
  if body != nil:
    body_589452 = body
  add(query_589451, "prettyPrint", newJBool(prettyPrint))
  result = call_589449.call(path_589450, query_589451, nil, nil, body_589452)

var dfareportingAdvertiserGroupsInsert* = Call_DfareportingAdvertiserGroupsInsert_589436(
    name: "dfareportingAdvertiserGroupsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups",
    validator: validate_DfareportingAdvertiserGroupsInsert_589437,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsInsert_589438,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsList_589398 = ref object of OpenApiRestCall_588466
proc url_DfareportingAdvertiserGroupsList_589400(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsList_589399(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of advertiser groups, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589401 = path.getOrDefault("profileId")
  valid_589401 = validateParameter(valid_589401, JString, required = true,
                                 default = nil)
  if valid_589401 != nil:
    section.add "profileId", valid_589401
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser group June 2015", "advertiser group April 2015", or simply "advertiser group 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertisergroup" will match objects with name "my advertisergroup", "advertisergroup 2015", or simply "advertisergroup".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only advertiser groups with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589402 = query.getOrDefault("fields")
  valid_589402 = validateParameter(valid_589402, JString, required = false,
                                 default = nil)
  if valid_589402 != nil:
    section.add "fields", valid_589402
  var valid_589403 = query.getOrDefault("pageToken")
  valid_589403 = validateParameter(valid_589403, JString, required = false,
                                 default = nil)
  if valid_589403 != nil:
    section.add "pageToken", valid_589403
  var valid_589404 = query.getOrDefault("quotaUser")
  valid_589404 = validateParameter(valid_589404, JString, required = false,
                                 default = nil)
  if valid_589404 != nil:
    section.add "quotaUser", valid_589404
  var valid_589405 = query.getOrDefault("sortField")
  valid_589405 = validateParameter(valid_589405, JString, required = false,
                                 default = newJString("ID"))
  if valid_589405 != nil:
    section.add "sortField", valid_589405
  var valid_589406 = query.getOrDefault("alt")
  valid_589406 = validateParameter(valid_589406, JString, required = false,
                                 default = newJString("json"))
  if valid_589406 != nil:
    section.add "alt", valid_589406
  var valid_589407 = query.getOrDefault("searchString")
  valid_589407 = validateParameter(valid_589407, JString, required = false,
                                 default = nil)
  if valid_589407 != nil:
    section.add "searchString", valid_589407
  var valid_589408 = query.getOrDefault("oauth_token")
  valid_589408 = validateParameter(valid_589408, JString, required = false,
                                 default = nil)
  if valid_589408 != nil:
    section.add "oauth_token", valid_589408
  var valid_589409 = query.getOrDefault("userIp")
  valid_589409 = validateParameter(valid_589409, JString, required = false,
                                 default = nil)
  if valid_589409 != nil:
    section.add "userIp", valid_589409
  var valid_589410 = query.getOrDefault("maxResults")
  valid_589410 = validateParameter(valid_589410, JInt, required = false,
                                 default = newJInt(1000))
  if valid_589410 != nil:
    section.add "maxResults", valid_589410
  var valid_589411 = query.getOrDefault("ids")
  valid_589411 = validateParameter(valid_589411, JArray, required = false,
                                 default = nil)
  if valid_589411 != nil:
    section.add "ids", valid_589411
  var valid_589412 = query.getOrDefault("key")
  valid_589412 = validateParameter(valid_589412, JString, required = false,
                                 default = nil)
  if valid_589412 != nil:
    section.add "key", valid_589412
  var valid_589413 = query.getOrDefault("sortOrder")
  valid_589413 = validateParameter(valid_589413, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_589413 != nil:
    section.add "sortOrder", valid_589413
  var valid_589414 = query.getOrDefault("prettyPrint")
  valid_589414 = validateParameter(valid_589414, JBool, required = false,
                                 default = newJBool(true))
  if valid_589414 != nil:
    section.add "prettyPrint", valid_589414
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589415: Call_DfareportingAdvertiserGroupsList_589398;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of advertiser groups, possibly filtered. This method supports paging.
  ## 
  let valid = call_589415.validator(path, query, header, formData, body)
  let scheme = call_589415.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589415.url(scheme.get, call_589415.host, call_589415.base,
                         call_589415.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589415, url, valid)

proc call*(call_589416: Call_DfareportingAdvertiserGroupsList_589398;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserGroupsList
  ## Retrieves a list of advertiser groups, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser group June 2015", "advertiser group April 2015", or simply "advertiser group 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertisergroup" will match objects with name "my advertisergroup", "advertisergroup 2015", or simply "advertisergroup".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only advertiser groups with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589417 = newJObject()
  var query_589418 = newJObject()
  add(path_589417, "profileId", newJString(profileId))
  add(query_589418, "fields", newJString(fields))
  add(query_589418, "pageToken", newJString(pageToken))
  add(query_589418, "quotaUser", newJString(quotaUser))
  add(query_589418, "sortField", newJString(sortField))
  add(query_589418, "alt", newJString(alt))
  add(query_589418, "searchString", newJString(searchString))
  add(query_589418, "oauth_token", newJString(oauthToken))
  add(query_589418, "userIp", newJString(userIp))
  add(query_589418, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_589418.add "ids", ids
  add(query_589418, "key", newJString(key))
  add(query_589418, "sortOrder", newJString(sortOrder))
  add(query_589418, "prettyPrint", newJBool(prettyPrint))
  result = call_589416.call(path_589417, query_589418, nil, nil, nil)

var dfareportingAdvertiserGroupsList* = Call_DfareportingAdvertiserGroupsList_589398(
    name: "dfareportingAdvertiserGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups",
    validator: validate_DfareportingAdvertiserGroupsList_589399,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsList_589400,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsPatch_589453 = ref object of OpenApiRestCall_588466
proc url_DfareportingAdvertiserGroupsPatch_589455(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsPatch_589454(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing advertiser group. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589456 = path.getOrDefault("profileId")
  valid_589456 = validateParameter(valid_589456, JString, required = true,
                                 default = nil)
  if valid_589456 != nil:
    section.add "profileId", valid_589456
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Advertiser group ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589457 = query.getOrDefault("fields")
  valid_589457 = validateParameter(valid_589457, JString, required = false,
                                 default = nil)
  if valid_589457 != nil:
    section.add "fields", valid_589457
  var valid_589458 = query.getOrDefault("quotaUser")
  valid_589458 = validateParameter(valid_589458, JString, required = false,
                                 default = nil)
  if valid_589458 != nil:
    section.add "quotaUser", valid_589458
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_589459 = query.getOrDefault("id")
  valid_589459 = validateParameter(valid_589459, JString, required = true,
                                 default = nil)
  if valid_589459 != nil:
    section.add "id", valid_589459
  var valid_589460 = query.getOrDefault("alt")
  valid_589460 = validateParameter(valid_589460, JString, required = false,
                                 default = newJString("json"))
  if valid_589460 != nil:
    section.add "alt", valid_589460
  var valid_589461 = query.getOrDefault("oauth_token")
  valid_589461 = validateParameter(valid_589461, JString, required = false,
                                 default = nil)
  if valid_589461 != nil:
    section.add "oauth_token", valid_589461
  var valid_589462 = query.getOrDefault("userIp")
  valid_589462 = validateParameter(valid_589462, JString, required = false,
                                 default = nil)
  if valid_589462 != nil:
    section.add "userIp", valid_589462
  var valid_589463 = query.getOrDefault("key")
  valid_589463 = validateParameter(valid_589463, JString, required = false,
                                 default = nil)
  if valid_589463 != nil:
    section.add "key", valid_589463
  var valid_589464 = query.getOrDefault("prettyPrint")
  valid_589464 = validateParameter(valid_589464, JBool, required = false,
                                 default = newJBool(true))
  if valid_589464 != nil:
    section.add "prettyPrint", valid_589464
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589466: Call_DfareportingAdvertiserGroupsPatch_589453;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing advertiser group. This method supports patch semantics.
  ## 
  let valid = call_589466.validator(path, query, header, formData, body)
  let scheme = call_589466.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589466.url(scheme.get, call_589466.host, call_589466.base,
                         call_589466.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589466, url, valid)

proc call*(call_589467: Call_DfareportingAdvertiserGroupsPatch_589453;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserGroupsPatch
  ## Updates an existing advertiser group. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Advertiser group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589468 = newJObject()
  var query_589469 = newJObject()
  var body_589470 = newJObject()
  add(path_589468, "profileId", newJString(profileId))
  add(query_589469, "fields", newJString(fields))
  add(query_589469, "quotaUser", newJString(quotaUser))
  add(query_589469, "id", newJString(id))
  add(query_589469, "alt", newJString(alt))
  add(query_589469, "oauth_token", newJString(oauthToken))
  add(query_589469, "userIp", newJString(userIp))
  add(query_589469, "key", newJString(key))
  if body != nil:
    body_589470 = body
  add(query_589469, "prettyPrint", newJBool(prettyPrint))
  result = call_589467.call(path_589468, query_589469, nil, nil, body_589470)

var dfareportingAdvertiserGroupsPatch* = Call_DfareportingAdvertiserGroupsPatch_589453(
    name: "dfareportingAdvertiserGroupsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups",
    validator: validate_DfareportingAdvertiserGroupsPatch_589454,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsPatch_589455,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsGet_589471 = ref object of OpenApiRestCall_588466
proc url_DfareportingAdvertiserGroupsGet_589473(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsGet_589472(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one advertiser group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Advertiser group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589474 = path.getOrDefault("profileId")
  valid_589474 = validateParameter(valid_589474, JString, required = true,
                                 default = nil)
  if valid_589474 != nil:
    section.add "profileId", valid_589474
  var valid_589475 = path.getOrDefault("id")
  valid_589475 = validateParameter(valid_589475, JString, required = true,
                                 default = nil)
  if valid_589475 != nil:
    section.add "id", valid_589475
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589476 = query.getOrDefault("fields")
  valid_589476 = validateParameter(valid_589476, JString, required = false,
                                 default = nil)
  if valid_589476 != nil:
    section.add "fields", valid_589476
  var valid_589477 = query.getOrDefault("quotaUser")
  valid_589477 = validateParameter(valid_589477, JString, required = false,
                                 default = nil)
  if valid_589477 != nil:
    section.add "quotaUser", valid_589477
  var valid_589478 = query.getOrDefault("alt")
  valid_589478 = validateParameter(valid_589478, JString, required = false,
                                 default = newJString("json"))
  if valid_589478 != nil:
    section.add "alt", valid_589478
  var valid_589479 = query.getOrDefault("oauth_token")
  valid_589479 = validateParameter(valid_589479, JString, required = false,
                                 default = nil)
  if valid_589479 != nil:
    section.add "oauth_token", valid_589479
  var valid_589480 = query.getOrDefault("userIp")
  valid_589480 = validateParameter(valid_589480, JString, required = false,
                                 default = nil)
  if valid_589480 != nil:
    section.add "userIp", valid_589480
  var valid_589481 = query.getOrDefault("key")
  valid_589481 = validateParameter(valid_589481, JString, required = false,
                                 default = nil)
  if valid_589481 != nil:
    section.add "key", valid_589481
  var valid_589482 = query.getOrDefault("prettyPrint")
  valid_589482 = validateParameter(valid_589482, JBool, required = false,
                                 default = newJBool(true))
  if valid_589482 != nil:
    section.add "prettyPrint", valid_589482
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589483: Call_DfareportingAdvertiserGroupsGet_589471;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one advertiser group by ID.
  ## 
  let valid = call_589483.validator(path, query, header, formData, body)
  let scheme = call_589483.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589483.url(scheme.get, call_589483.host, call_589483.base,
                         call_589483.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589483, url, valid)

proc call*(call_589484: Call_DfareportingAdvertiserGroupsGet_589471;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserGroupsGet
  ## Gets one advertiser group by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Advertiser group ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589485 = newJObject()
  var query_589486 = newJObject()
  add(path_589485, "profileId", newJString(profileId))
  add(query_589486, "fields", newJString(fields))
  add(query_589486, "quotaUser", newJString(quotaUser))
  add(query_589486, "alt", newJString(alt))
  add(query_589486, "oauth_token", newJString(oauthToken))
  add(query_589486, "userIp", newJString(userIp))
  add(path_589485, "id", newJString(id))
  add(query_589486, "key", newJString(key))
  add(query_589486, "prettyPrint", newJBool(prettyPrint))
  result = call_589484.call(path_589485, query_589486, nil, nil, nil)

var dfareportingAdvertiserGroupsGet* = Call_DfareportingAdvertiserGroupsGet_589471(
    name: "dfareportingAdvertiserGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups/{id}",
    validator: validate_DfareportingAdvertiserGroupsGet_589472,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsGet_589473,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsDelete_589487 = ref object of OpenApiRestCall_588466
proc url_DfareportingAdvertiserGroupsDelete_589489(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsDelete_589488(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing advertiser group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Advertiser group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589490 = path.getOrDefault("profileId")
  valid_589490 = validateParameter(valid_589490, JString, required = true,
                                 default = nil)
  if valid_589490 != nil:
    section.add "profileId", valid_589490
  var valid_589491 = path.getOrDefault("id")
  valid_589491 = validateParameter(valid_589491, JString, required = true,
                                 default = nil)
  if valid_589491 != nil:
    section.add "id", valid_589491
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589492 = query.getOrDefault("fields")
  valid_589492 = validateParameter(valid_589492, JString, required = false,
                                 default = nil)
  if valid_589492 != nil:
    section.add "fields", valid_589492
  var valid_589493 = query.getOrDefault("quotaUser")
  valid_589493 = validateParameter(valid_589493, JString, required = false,
                                 default = nil)
  if valid_589493 != nil:
    section.add "quotaUser", valid_589493
  var valid_589494 = query.getOrDefault("alt")
  valid_589494 = validateParameter(valid_589494, JString, required = false,
                                 default = newJString("json"))
  if valid_589494 != nil:
    section.add "alt", valid_589494
  var valid_589495 = query.getOrDefault("oauth_token")
  valid_589495 = validateParameter(valid_589495, JString, required = false,
                                 default = nil)
  if valid_589495 != nil:
    section.add "oauth_token", valid_589495
  var valid_589496 = query.getOrDefault("userIp")
  valid_589496 = validateParameter(valid_589496, JString, required = false,
                                 default = nil)
  if valid_589496 != nil:
    section.add "userIp", valid_589496
  var valid_589497 = query.getOrDefault("key")
  valid_589497 = validateParameter(valid_589497, JString, required = false,
                                 default = nil)
  if valid_589497 != nil:
    section.add "key", valid_589497
  var valid_589498 = query.getOrDefault("prettyPrint")
  valid_589498 = validateParameter(valid_589498, JBool, required = false,
                                 default = newJBool(true))
  if valid_589498 != nil:
    section.add "prettyPrint", valid_589498
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589499: Call_DfareportingAdvertiserGroupsDelete_589487;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing advertiser group.
  ## 
  let valid = call_589499.validator(path, query, header, formData, body)
  let scheme = call_589499.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589499.url(scheme.get, call_589499.host, call_589499.base,
                         call_589499.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589499, url, valid)

proc call*(call_589500: Call_DfareportingAdvertiserGroupsDelete_589487;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserGroupsDelete
  ## Deletes an existing advertiser group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Advertiser group ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589501 = newJObject()
  var query_589502 = newJObject()
  add(path_589501, "profileId", newJString(profileId))
  add(query_589502, "fields", newJString(fields))
  add(query_589502, "quotaUser", newJString(quotaUser))
  add(query_589502, "alt", newJString(alt))
  add(query_589502, "oauth_token", newJString(oauthToken))
  add(query_589502, "userIp", newJString(userIp))
  add(path_589501, "id", newJString(id))
  add(query_589502, "key", newJString(key))
  add(query_589502, "prettyPrint", newJBool(prettyPrint))
  result = call_589500.call(path_589501, query_589502, nil, nil, nil)

var dfareportingAdvertiserGroupsDelete* = Call_DfareportingAdvertiserGroupsDelete_589487(
    name: "dfareportingAdvertiserGroupsDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups/{id}",
    validator: validate_DfareportingAdvertiserGroupsDelete_589488,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsDelete_589489,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesUpdate_589528 = ref object of OpenApiRestCall_588466
proc url_DfareportingAdvertiserLandingPagesUpdate_589530(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesUpdate_589529(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing landing page.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589531 = path.getOrDefault("profileId")
  valid_589531 = validateParameter(valid_589531, JString, required = true,
                                 default = nil)
  if valid_589531 != nil:
    section.add "profileId", valid_589531
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589532 = query.getOrDefault("fields")
  valid_589532 = validateParameter(valid_589532, JString, required = false,
                                 default = nil)
  if valid_589532 != nil:
    section.add "fields", valid_589532
  var valid_589533 = query.getOrDefault("quotaUser")
  valid_589533 = validateParameter(valid_589533, JString, required = false,
                                 default = nil)
  if valid_589533 != nil:
    section.add "quotaUser", valid_589533
  var valid_589534 = query.getOrDefault("alt")
  valid_589534 = validateParameter(valid_589534, JString, required = false,
                                 default = newJString("json"))
  if valid_589534 != nil:
    section.add "alt", valid_589534
  var valid_589535 = query.getOrDefault("oauth_token")
  valid_589535 = validateParameter(valid_589535, JString, required = false,
                                 default = nil)
  if valid_589535 != nil:
    section.add "oauth_token", valid_589535
  var valid_589536 = query.getOrDefault("userIp")
  valid_589536 = validateParameter(valid_589536, JString, required = false,
                                 default = nil)
  if valid_589536 != nil:
    section.add "userIp", valid_589536
  var valid_589537 = query.getOrDefault("key")
  valid_589537 = validateParameter(valid_589537, JString, required = false,
                                 default = nil)
  if valid_589537 != nil:
    section.add "key", valid_589537
  var valid_589538 = query.getOrDefault("prettyPrint")
  valid_589538 = validateParameter(valid_589538, JBool, required = false,
                                 default = newJBool(true))
  if valid_589538 != nil:
    section.add "prettyPrint", valid_589538
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589540: Call_DfareportingAdvertiserLandingPagesUpdate_589528;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing landing page.
  ## 
  let valid = call_589540.validator(path, query, header, formData, body)
  let scheme = call_589540.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589540.url(scheme.get, call_589540.host, call_589540.base,
                         call_589540.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589540, url, valid)

proc call*(call_589541: Call_DfareportingAdvertiserLandingPagesUpdate_589528;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserLandingPagesUpdate
  ## Updates an existing landing page.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589542 = newJObject()
  var query_589543 = newJObject()
  var body_589544 = newJObject()
  add(path_589542, "profileId", newJString(profileId))
  add(query_589543, "fields", newJString(fields))
  add(query_589543, "quotaUser", newJString(quotaUser))
  add(query_589543, "alt", newJString(alt))
  add(query_589543, "oauth_token", newJString(oauthToken))
  add(query_589543, "userIp", newJString(userIp))
  add(query_589543, "key", newJString(key))
  if body != nil:
    body_589544 = body
  add(query_589543, "prettyPrint", newJBool(prettyPrint))
  result = call_589541.call(path_589542, query_589543, nil, nil, body_589544)

var dfareportingAdvertiserLandingPagesUpdate* = Call_DfareportingAdvertiserLandingPagesUpdate_589528(
    name: "dfareportingAdvertiserLandingPagesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages",
    validator: validate_DfareportingAdvertiserLandingPagesUpdate_589529,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserLandingPagesUpdate_589530,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesInsert_589545 = ref object of OpenApiRestCall_588466
proc url_DfareportingAdvertiserLandingPagesInsert_589547(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesInsert_589546(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new landing page.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589548 = path.getOrDefault("profileId")
  valid_589548 = validateParameter(valid_589548, JString, required = true,
                                 default = nil)
  if valid_589548 != nil:
    section.add "profileId", valid_589548
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589549 = query.getOrDefault("fields")
  valid_589549 = validateParameter(valid_589549, JString, required = false,
                                 default = nil)
  if valid_589549 != nil:
    section.add "fields", valid_589549
  var valid_589550 = query.getOrDefault("quotaUser")
  valid_589550 = validateParameter(valid_589550, JString, required = false,
                                 default = nil)
  if valid_589550 != nil:
    section.add "quotaUser", valid_589550
  var valid_589551 = query.getOrDefault("alt")
  valid_589551 = validateParameter(valid_589551, JString, required = false,
                                 default = newJString("json"))
  if valid_589551 != nil:
    section.add "alt", valid_589551
  var valid_589552 = query.getOrDefault("oauth_token")
  valid_589552 = validateParameter(valid_589552, JString, required = false,
                                 default = nil)
  if valid_589552 != nil:
    section.add "oauth_token", valid_589552
  var valid_589553 = query.getOrDefault("userIp")
  valid_589553 = validateParameter(valid_589553, JString, required = false,
                                 default = nil)
  if valid_589553 != nil:
    section.add "userIp", valid_589553
  var valid_589554 = query.getOrDefault("key")
  valid_589554 = validateParameter(valid_589554, JString, required = false,
                                 default = nil)
  if valid_589554 != nil:
    section.add "key", valid_589554
  var valid_589555 = query.getOrDefault("prettyPrint")
  valid_589555 = validateParameter(valid_589555, JBool, required = false,
                                 default = newJBool(true))
  if valid_589555 != nil:
    section.add "prettyPrint", valid_589555
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589557: Call_DfareportingAdvertiserLandingPagesInsert_589545;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new landing page.
  ## 
  let valid = call_589557.validator(path, query, header, formData, body)
  let scheme = call_589557.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589557.url(scheme.get, call_589557.host, call_589557.base,
                         call_589557.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589557, url, valid)

proc call*(call_589558: Call_DfareportingAdvertiserLandingPagesInsert_589545;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserLandingPagesInsert
  ## Inserts a new landing page.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589559 = newJObject()
  var query_589560 = newJObject()
  var body_589561 = newJObject()
  add(path_589559, "profileId", newJString(profileId))
  add(query_589560, "fields", newJString(fields))
  add(query_589560, "quotaUser", newJString(quotaUser))
  add(query_589560, "alt", newJString(alt))
  add(query_589560, "oauth_token", newJString(oauthToken))
  add(query_589560, "userIp", newJString(userIp))
  add(query_589560, "key", newJString(key))
  if body != nil:
    body_589561 = body
  add(query_589560, "prettyPrint", newJBool(prettyPrint))
  result = call_589558.call(path_589559, query_589560, nil, nil, body_589561)

var dfareportingAdvertiserLandingPagesInsert* = Call_DfareportingAdvertiserLandingPagesInsert_589545(
    name: "dfareportingAdvertiserLandingPagesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages",
    validator: validate_DfareportingAdvertiserLandingPagesInsert_589546,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserLandingPagesInsert_589547,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesList_589503 = ref object of OpenApiRestCall_588466
proc url_DfareportingAdvertiserLandingPagesList_589505(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesList_589504(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of landing pages.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589506 = path.getOrDefault("profileId")
  valid_589506 = validateParameter(valid_589506, JString, required = true,
                                 default = nil)
  if valid_589506 != nil:
    section.add "profileId", valid_589506
  result.add "path", section
  ## parameters in `query` object:
  ##   subaccountId: JString
  ##               : Select only landing pages that belong to this subaccount.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for landing pages by name or ID. Wildcards (*) are allowed. For example, "landingpage*2017" will return landing pages with names like "landingpage July 2017", "landingpage March 2017", or simply "landingpage 2017". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "landingpage" will match campaigns with name "my landingpage", "landingpage 2015", or simply "landingpage".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   campaignIds: JArray
  ##              : Select only landing pages that are associated with these campaigns.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived landing pages. Don't set this field to select both archived and non-archived landing pages.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only landing pages with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only landing pages that belong to these advertisers.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589507 = query.getOrDefault("subaccountId")
  valid_589507 = validateParameter(valid_589507, JString, required = false,
                                 default = nil)
  if valid_589507 != nil:
    section.add "subaccountId", valid_589507
  var valid_589508 = query.getOrDefault("fields")
  valid_589508 = validateParameter(valid_589508, JString, required = false,
                                 default = nil)
  if valid_589508 != nil:
    section.add "fields", valid_589508
  var valid_589509 = query.getOrDefault("pageToken")
  valid_589509 = validateParameter(valid_589509, JString, required = false,
                                 default = nil)
  if valid_589509 != nil:
    section.add "pageToken", valid_589509
  var valid_589510 = query.getOrDefault("quotaUser")
  valid_589510 = validateParameter(valid_589510, JString, required = false,
                                 default = nil)
  if valid_589510 != nil:
    section.add "quotaUser", valid_589510
  var valid_589511 = query.getOrDefault("sortField")
  valid_589511 = validateParameter(valid_589511, JString, required = false,
                                 default = newJString("ID"))
  if valid_589511 != nil:
    section.add "sortField", valid_589511
  var valid_589512 = query.getOrDefault("alt")
  valid_589512 = validateParameter(valid_589512, JString, required = false,
                                 default = newJString("json"))
  if valid_589512 != nil:
    section.add "alt", valid_589512
  var valid_589513 = query.getOrDefault("searchString")
  valid_589513 = validateParameter(valid_589513, JString, required = false,
                                 default = nil)
  if valid_589513 != nil:
    section.add "searchString", valid_589513
  var valid_589514 = query.getOrDefault("oauth_token")
  valid_589514 = validateParameter(valid_589514, JString, required = false,
                                 default = nil)
  if valid_589514 != nil:
    section.add "oauth_token", valid_589514
  var valid_589515 = query.getOrDefault("campaignIds")
  valid_589515 = validateParameter(valid_589515, JArray, required = false,
                                 default = nil)
  if valid_589515 != nil:
    section.add "campaignIds", valid_589515
  var valid_589516 = query.getOrDefault("userIp")
  valid_589516 = validateParameter(valid_589516, JString, required = false,
                                 default = nil)
  if valid_589516 != nil:
    section.add "userIp", valid_589516
  var valid_589517 = query.getOrDefault("archived")
  valid_589517 = validateParameter(valid_589517, JBool, required = false, default = nil)
  if valid_589517 != nil:
    section.add "archived", valid_589517
  var valid_589518 = query.getOrDefault("maxResults")
  valid_589518 = validateParameter(valid_589518, JInt, required = false,
                                 default = newJInt(1000))
  if valid_589518 != nil:
    section.add "maxResults", valid_589518
  var valid_589519 = query.getOrDefault("ids")
  valid_589519 = validateParameter(valid_589519, JArray, required = false,
                                 default = nil)
  if valid_589519 != nil:
    section.add "ids", valid_589519
  var valid_589520 = query.getOrDefault("key")
  valid_589520 = validateParameter(valid_589520, JString, required = false,
                                 default = nil)
  if valid_589520 != nil:
    section.add "key", valid_589520
  var valid_589521 = query.getOrDefault("advertiserIds")
  valid_589521 = validateParameter(valid_589521, JArray, required = false,
                                 default = nil)
  if valid_589521 != nil:
    section.add "advertiserIds", valid_589521
  var valid_589522 = query.getOrDefault("sortOrder")
  valid_589522 = validateParameter(valid_589522, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_589522 != nil:
    section.add "sortOrder", valid_589522
  var valid_589523 = query.getOrDefault("prettyPrint")
  valid_589523 = validateParameter(valid_589523, JBool, required = false,
                                 default = newJBool(true))
  if valid_589523 != nil:
    section.add "prettyPrint", valid_589523
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589524: Call_DfareportingAdvertiserLandingPagesList_589503;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of landing pages.
  ## 
  let valid = call_589524.validator(path, query, header, formData, body)
  let scheme = call_589524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589524.url(scheme.get, call_589524.host, call_589524.base,
                         call_589524.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589524, url, valid)

proc call*(call_589525: Call_DfareportingAdvertiserLandingPagesList_589503;
          profileId: string; subaccountId: string = ""; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; sortField: string = "ID";
          alt: string = "json"; searchString: string = ""; oauthToken: string = "";
          campaignIds: JsonNode = nil; userIp: string = ""; archived: bool = false;
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          advertiserIds: JsonNode = nil; sortOrder: string = "ASCENDING";
          prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserLandingPagesList
  ## Retrieves a list of landing pages.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   subaccountId: string
  ##               : Select only landing pages that belong to this subaccount.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for landing pages by name or ID. Wildcards (*) are allowed. For example, "landingpage*2017" will return landing pages with names like "landingpage July 2017", "landingpage March 2017", or simply "landingpage 2017". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "landingpage" will match campaigns with name "my landingpage", "landingpage 2015", or simply "landingpage".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   campaignIds: JArray
  ##              : Select only landing pages that are associated with these campaigns.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived landing pages. Don't set this field to select both archived and non-archived landing pages.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only landing pages with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only landing pages that belong to these advertisers.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589526 = newJObject()
  var query_589527 = newJObject()
  add(path_589526, "profileId", newJString(profileId))
  add(query_589527, "subaccountId", newJString(subaccountId))
  add(query_589527, "fields", newJString(fields))
  add(query_589527, "pageToken", newJString(pageToken))
  add(query_589527, "quotaUser", newJString(quotaUser))
  add(query_589527, "sortField", newJString(sortField))
  add(query_589527, "alt", newJString(alt))
  add(query_589527, "searchString", newJString(searchString))
  add(query_589527, "oauth_token", newJString(oauthToken))
  if campaignIds != nil:
    query_589527.add "campaignIds", campaignIds
  add(query_589527, "userIp", newJString(userIp))
  add(query_589527, "archived", newJBool(archived))
  add(query_589527, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_589527.add "ids", ids
  add(query_589527, "key", newJString(key))
  if advertiserIds != nil:
    query_589527.add "advertiserIds", advertiserIds
  add(query_589527, "sortOrder", newJString(sortOrder))
  add(query_589527, "prettyPrint", newJBool(prettyPrint))
  result = call_589525.call(path_589526, query_589527, nil, nil, nil)

var dfareportingAdvertiserLandingPagesList* = Call_DfareportingAdvertiserLandingPagesList_589503(
    name: "dfareportingAdvertiserLandingPagesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages",
    validator: validate_DfareportingAdvertiserLandingPagesList_589504,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserLandingPagesList_589505,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesPatch_589562 = ref object of OpenApiRestCall_588466
proc url_DfareportingAdvertiserLandingPagesPatch_589564(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesPatch_589563(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing landing page. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589565 = path.getOrDefault("profileId")
  valid_589565 = validateParameter(valid_589565, JString, required = true,
                                 default = nil)
  if valid_589565 != nil:
    section.add "profileId", valid_589565
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Landing page ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589566 = query.getOrDefault("fields")
  valid_589566 = validateParameter(valid_589566, JString, required = false,
                                 default = nil)
  if valid_589566 != nil:
    section.add "fields", valid_589566
  var valid_589567 = query.getOrDefault("quotaUser")
  valid_589567 = validateParameter(valid_589567, JString, required = false,
                                 default = nil)
  if valid_589567 != nil:
    section.add "quotaUser", valid_589567
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_589568 = query.getOrDefault("id")
  valid_589568 = validateParameter(valid_589568, JString, required = true,
                                 default = nil)
  if valid_589568 != nil:
    section.add "id", valid_589568
  var valid_589569 = query.getOrDefault("alt")
  valid_589569 = validateParameter(valid_589569, JString, required = false,
                                 default = newJString("json"))
  if valid_589569 != nil:
    section.add "alt", valid_589569
  var valid_589570 = query.getOrDefault("oauth_token")
  valid_589570 = validateParameter(valid_589570, JString, required = false,
                                 default = nil)
  if valid_589570 != nil:
    section.add "oauth_token", valid_589570
  var valid_589571 = query.getOrDefault("userIp")
  valid_589571 = validateParameter(valid_589571, JString, required = false,
                                 default = nil)
  if valid_589571 != nil:
    section.add "userIp", valid_589571
  var valid_589572 = query.getOrDefault("key")
  valid_589572 = validateParameter(valid_589572, JString, required = false,
                                 default = nil)
  if valid_589572 != nil:
    section.add "key", valid_589572
  var valid_589573 = query.getOrDefault("prettyPrint")
  valid_589573 = validateParameter(valid_589573, JBool, required = false,
                                 default = newJBool(true))
  if valid_589573 != nil:
    section.add "prettyPrint", valid_589573
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589575: Call_DfareportingAdvertiserLandingPagesPatch_589562;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing landing page. This method supports patch semantics.
  ## 
  let valid = call_589575.validator(path, query, header, formData, body)
  let scheme = call_589575.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589575.url(scheme.get, call_589575.host, call_589575.base,
                         call_589575.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589575, url, valid)

proc call*(call_589576: Call_DfareportingAdvertiserLandingPagesPatch_589562;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserLandingPagesPatch
  ## Updates an existing landing page. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Landing page ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589577 = newJObject()
  var query_589578 = newJObject()
  var body_589579 = newJObject()
  add(path_589577, "profileId", newJString(profileId))
  add(query_589578, "fields", newJString(fields))
  add(query_589578, "quotaUser", newJString(quotaUser))
  add(query_589578, "id", newJString(id))
  add(query_589578, "alt", newJString(alt))
  add(query_589578, "oauth_token", newJString(oauthToken))
  add(query_589578, "userIp", newJString(userIp))
  add(query_589578, "key", newJString(key))
  if body != nil:
    body_589579 = body
  add(query_589578, "prettyPrint", newJBool(prettyPrint))
  result = call_589576.call(path_589577, query_589578, nil, nil, body_589579)

var dfareportingAdvertiserLandingPagesPatch* = Call_DfareportingAdvertiserLandingPagesPatch_589562(
    name: "dfareportingAdvertiserLandingPagesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages",
    validator: validate_DfareportingAdvertiserLandingPagesPatch_589563,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserLandingPagesPatch_589564,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesGet_589580 = ref object of OpenApiRestCall_588466
proc url_DfareportingAdvertiserLandingPagesGet_589582(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesGet_589581(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one landing page by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Landing page ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589583 = path.getOrDefault("profileId")
  valid_589583 = validateParameter(valid_589583, JString, required = true,
                                 default = nil)
  if valid_589583 != nil:
    section.add "profileId", valid_589583
  var valid_589584 = path.getOrDefault("id")
  valid_589584 = validateParameter(valid_589584, JString, required = true,
                                 default = nil)
  if valid_589584 != nil:
    section.add "id", valid_589584
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589585 = query.getOrDefault("fields")
  valid_589585 = validateParameter(valid_589585, JString, required = false,
                                 default = nil)
  if valid_589585 != nil:
    section.add "fields", valid_589585
  var valid_589586 = query.getOrDefault("quotaUser")
  valid_589586 = validateParameter(valid_589586, JString, required = false,
                                 default = nil)
  if valid_589586 != nil:
    section.add "quotaUser", valid_589586
  var valid_589587 = query.getOrDefault("alt")
  valid_589587 = validateParameter(valid_589587, JString, required = false,
                                 default = newJString("json"))
  if valid_589587 != nil:
    section.add "alt", valid_589587
  var valid_589588 = query.getOrDefault("oauth_token")
  valid_589588 = validateParameter(valid_589588, JString, required = false,
                                 default = nil)
  if valid_589588 != nil:
    section.add "oauth_token", valid_589588
  var valid_589589 = query.getOrDefault("userIp")
  valid_589589 = validateParameter(valid_589589, JString, required = false,
                                 default = nil)
  if valid_589589 != nil:
    section.add "userIp", valid_589589
  var valid_589590 = query.getOrDefault("key")
  valid_589590 = validateParameter(valid_589590, JString, required = false,
                                 default = nil)
  if valid_589590 != nil:
    section.add "key", valid_589590
  var valid_589591 = query.getOrDefault("prettyPrint")
  valid_589591 = validateParameter(valid_589591, JBool, required = false,
                                 default = newJBool(true))
  if valid_589591 != nil:
    section.add "prettyPrint", valid_589591
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589592: Call_DfareportingAdvertiserLandingPagesGet_589580;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one landing page by ID.
  ## 
  let valid = call_589592.validator(path, query, header, formData, body)
  let scheme = call_589592.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589592.url(scheme.get, call_589592.host, call_589592.base,
                         call_589592.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589592, url, valid)

proc call*(call_589593: Call_DfareportingAdvertiserLandingPagesGet_589580;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserLandingPagesGet
  ## Gets one landing page by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Landing page ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589594 = newJObject()
  var query_589595 = newJObject()
  add(path_589594, "profileId", newJString(profileId))
  add(query_589595, "fields", newJString(fields))
  add(query_589595, "quotaUser", newJString(quotaUser))
  add(query_589595, "alt", newJString(alt))
  add(query_589595, "oauth_token", newJString(oauthToken))
  add(query_589595, "userIp", newJString(userIp))
  add(path_589594, "id", newJString(id))
  add(query_589595, "key", newJString(key))
  add(query_589595, "prettyPrint", newJBool(prettyPrint))
  result = call_589593.call(path_589594, query_589595, nil, nil, nil)

var dfareportingAdvertiserLandingPagesGet* = Call_DfareportingAdvertiserLandingPagesGet_589580(
    name: "dfareportingAdvertiserLandingPagesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages/{id}",
    validator: validate_DfareportingAdvertiserLandingPagesGet_589581,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserLandingPagesGet_589582,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersUpdate_589623 = ref object of OpenApiRestCall_588466
proc url_DfareportingAdvertisersUpdate_589625(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersUpdate_589624(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing advertiser.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589626 = path.getOrDefault("profileId")
  valid_589626 = validateParameter(valid_589626, JString, required = true,
                                 default = nil)
  if valid_589626 != nil:
    section.add "profileId", valid_589626
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589627 = query.getOrDefault("fields")
  valid_589627 = validateParameter(valid_589627, JString, required = false,
                                 default = nil)
  if valid_589627 != nil:
    section.add "fields", valid_589627
  var valid_589628 = query.getOrDefault("quotaUser")
  valid_589628 = validateParameter(valid_589628, JString, required = false,
                                 default = nil)
  if valid_589628 != nil:
    section.add "quotaUser", valid_589628
  var valid_589629 = query.getOrDefault("alt")
  valid_589629 = validateParameter(valid_589629, JString, required = false,
                                 default = newJString("json"))
  if valid_589629 != nil:
    section.add "alt", valid_589629
  var valid_589630 = query.getOrDefault("oauth_token")
  valid_589630 = validateParameter(valid_589630, JString, required = false,
                                 default = nil)
  if valid_589630 != nil:
    section.add "oauth_token", valid_589630
  var valid_589631 = query.getOrDefault("userIp")
  valid_589631 = validateParameter(valid_589631, JString, required = false,
                                 default = nil)
  if valid_589631 != nil:
    section.add "userIp", valid_589631
  var valid_589632 = query.getOrDefault("key")
  valid_589632 = validateParameter(valid_589632, JString, required = false,
                                 default = nil)
  if valid_589632 != nil:
    section.add "key", valid_589632
  var valid_589633 = query.getOrDefault("prettyPrint")
  valid_589633 = validateParameter(valid_589633, JBool, required = false,
                                 default = newJBool(true))
  if valid_589633 != nil:
    section.add "prettyPrint", valid_589633
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589635: Call_DfareportingAdvertisersUpdate_589623; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing advertiser.
  ## 
  let valid = call_589635.validator(path, query, header, formData, body)
  let scheme = call_589635.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589635.url(scheme.get, call_589635.host, call_589635.base,
                         call_589635.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589635, url, valid)

proc call*(call_589636: Call_DfareportingAdvertisersUpdate_589623;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertisersUpdate
  ## Updates an existing advertiser.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589637 = newJObject()
  var query_589638 = newJObject()
  var body_589639 = newJObject()
  add(path_589637, "profileId", newJString(profileId))
  add(query_589638, "fields", newJString(fields))
  add(query_589638, "quotaUser", newJString(quotaUser))
  add(query_589638, "alt", newJString(alt))
  add(query_589638, "oauth_token", newJString(oauthToken))
  add(query_589638, "userIp", newJString(userIp))
  add(query_589638, "key", newJString(key))
  if body != nil:
    body_589639 = body
  add(query_589638, "prettyPrint", newJBool(prettyPrint))
  result = call_589636.call(path_589637, query_589638, nil, nil, body_589639)

var dfareportingAdvertisersUpdate* = Call_DfareportingAdvertisersUpdate_589623(
    name: "dfareportingAdvertisersUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/advertisers",
    validator: validate_DfareportingAdvertisersUpdate_589624,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertisersUpdate_589625,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersInsert_589640 = ref object of OpenApiRestCall_588466
proc url_DfareportingAdvertisersInsert_589642(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersInsert_589641(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new advertiser.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589643 = path.getOrDefault("profileId")
  valid_589643 = validateParameter(valid_589643, JString, required = true,
                                 default = nil)
  if valid_589643 != nil:
    section.add "profileId", valid_589643
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589644 = query.getOrDefault("fields")
  valid_589644 = validateParameter(valid_589644, JString, required = false,
                                 default = nil)
  if valid_589644 != nil:
    section.add "fields", valid_589644
  var valid_589645 = query.getOrDefault("quotaUser")
  valid_589645 = validateParameter(valid_589645, JString, required = false,
                                 default = nil)
  if valid_589645 != nil:
    section.add "quotaUser", valid_589645
  var valid_589646 = query.getOrDefault("alt")
  valid_589646 = validateParameter(valid_589646, JString, required = false,
                                 default = newJString("json"))
  if valid_589646 != nil:
    section.add "alt", valid_589646
  var valid_589647 = query.getOrDefault("oauth_token")
  valid_589647 = validateParameter(valid_589647, JString, required = false,
                                 default = nil)
  if valid_589647 != nil:
    section.add "oauth_token", valid_589647
  var valid_589648 = query.getOrDefault("userIp")
  valid_589648 = validateParameter(valid_589648, JString, required = false,
                                 default = nil)
  if valid_589648 != nil:
    section.add "userIp", valid_589648
  var valid_589649 = query.getOrDefault("key")
  valid_589649 = validateParameter(valid_589649, JString, required = false,
                                 default = nil)
  if valid_589649 != nil:
    section.add "key", valid_589649
  var valid_589650 = query.getOrDefault("prettyPrint")
  valid_589650 = validateParameter(valid_589650, JBool, required = false,
                                 default = newJBool(true))
  if valid_589650 != nil:
    section.add "prettyPrint", valid_589650
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589652: Call_DfareportingAdvertisersInsert_589640; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new advertiser.
  ## 
  let valid = call_589652.validator(path, query, header, formData, body)
  let scheme = call_589652.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589652.url(scheme.get, call_589652.host, call_589652.base,
                         call_589652.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589652, url, valid)

proc call*(call_589653: Call_DfareportingAdvertisersInsert_589640;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertisersInsert
  ## Inserts a new advertiser.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589654 = newJObject()
  var query_589655 = newJObject()
  var body_589656 = newJObject()
  add(path_589654, "profileId", newJString(profileId))
  add(query_589655, "fields", newJString(fields))
  add(query_589655, "quotaUser", newJString(quotaUser))
  add(query_589655, "alt", newJString(alt))
  add(query_589655, "oauth_token", newJString(oauthToken))
  add(query_589655, "userIp", newJString(userIp))
  add(query_589655, "key", newJString(key))
  if body != nil:
    body_589656 = body
  add(query_589655, "prettyPrint", newJBool(prettyPrint))
  result = call_589653.call(path_589654, query_589655, nil, nil, body_589656)

var dfareportingAdvertisersInsert* = Call_DfareportingAdvertisersInsert_589640(
    name: "dfareportingAdvertisersInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/advertisers",
    validator: validate_DfareportingAdvertisersInsert_589641,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertisersInsert_589642,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersList_589596 = ref object of OpenApiRestCall_588466
proc url_DfareportingAdvertisersList_589598(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersList_589597(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of advertisers, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589599 = path.getOrDefault("profileId")
  valid_589599 = validateParameter(valid_589599, JString, required = true,
                                 default = nil)
  if valid_589599 != nil:
    section.add "profileId", valid_589599
  result.add "path", section
  ## parameters in `query` object:
  ##   subaccountId: JString
  ##               : Select only advertisers with these subaccount IDs.
  ##   advertiserGroupIds: JArray
  ##                     : Select only advertisers with these advertiser group IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   onlyParent: JBool
  ##             : Select only advertisers which use another advertiser's floodlight configuration.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser June 2015", "advertiser April 2015", or simply "advertiser 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertiser" will match objects with name "my advertiser", "advertiser 2015", or simply "advertiser".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   floodlightConfigurationIds: JArray
  ##                             : Select only advertisers with these floodlight configuration IDs.
  ##   ids: JArray
  ##      : Select only advertisers with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   status: JString
  ##         : Select only advertisers with the specified status.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   includeAdvertisersWithoutGroupsOnly: JBool
  ##                                      : Select only advertisers which do not belong to any advertiser group.
  section = newJObject()
  var valid_589600 = query.getOrDefault("subaccountId")
  valid_589600 = validateParameter(valid_589600, JString, required = false,
                                 default = nil)
  if valid_589600 != nil:
    section.add "subaccountId", valid_589600
  var valid_589601 = query.getOrDefault("advertiserGroupIds")
  valid_589601 = validateParameter(valid_589601, JArray, required = false,
                                 default = nil)
  if valid_589601 != nil:
    section.add "advertiserGroupIds", valid_589601
  var valid_589602 = query.getOrDefault("fields")
  valid_589602 = validateParameter(valid_589602, JString, required = false,
                                 default = nil)
  if valid_589602 != nil:
    section.add "fields", valid_589602
  var valid_589603 = query.getOrDefault("pageToken")
  valid_589603 = validateParameter(valid_589603, JString, required = false,
                                 default = nil)
  if valid_589603 != nil:
    section.add "pageToken", valid_589603
  var valid_589604 = query.getOrDefault("quotaUser")
  valid_589604 = validateParameter(valid_589604, JString, required = false,
                                 default = nil)
  if valid_589604 != nil:
    section.add "quotaUser", valid_589604
  var valid_589605 = query.getOrDefault("sortField")
  valid_589605 = validateParameter(valid_589605, JString, required = false,
                                 default = newJString("ID"))
  if valid_589605 != nil:
    section.add "sortField", valid_589605
  var valid_589606 = query.getOrDefault("alt")
  valid_589606 = validateParameter(valid_589606, JString, required = false,
                                 default = newJString("json"))
  if valid_589606 != nil:
    section.add "alt", valid_589606
  var valid_589607 = query.getOrDefault("onlyParent")
  valid_589607 = validateParameter(valid_589607, JBool, required = false, default = nil)
  if valid_589607 != nil:
    section.add "onlyParent", valid_589607
  var valid_589608 = query.getOrDefault("searchString")
  valid_589608 = validateParameter(valid_589608, JString, required = false,
                                 default = nil)
  if valid_589608 != nil:
    section.add "searchString", valid_589608
  var valid_589609 = query.getOrDefault("oauth_token")
  valid_589609 = validateParameter(valid_589609, JString, required = false,
                                 default = nil)
  if valid_589609 != nil:
    section.add "oauth_token", valid_589609
  var valid_589610 = query.getOrDefault("userIp")
  valid_589610 = validateParameter(valid_589610, JString, required = false,
                                 default = nil)
  if valid_589610 != nil:
    section.add "userIp", valid_589610
  var valid_589611 = query.getOrDefault("maxResults")
  valid_589611 = validateParameter(valid_589611, JInt, required = false,
                                 default = newJInt(1000))
  if valid_589611 != nil:
    section.add "maxResults", valid_589611
  var valid_589612 = query.getOrDefault("floodlightConfigurationIds")
  valid_589612 = validateParameter(valid_589612, JArray, required = false,
                                 default = nil)
  if valid_589612 != nil:
    section.add "floodlightConfigurationIds", valid_589612
  var valid_589613 = query.getOrDefault("ids")
  valid_589613 = validateParameter(valid_589613, JArray, required = false,
                                 default = nil)
  if valid_589613 != nil:
    section.add "ids", valid_589613
  var valid_589614 = query.getOrDefault("key")
  valid_589614 = validateParameter(valid_589614, JString, required = false,
                                 default = nil)
  if valid_589614 != nil:
    section.add "key", valid_589614
  var valid_589615 = query.getOrDefault("status")
  valid_589615 = validateParameter(valid_589615, JString, required = false,
                                 default = newJString("APPROVED"))
  if valid_589615 != nil:
    section.add "status", valid_589615
  var valid_589616 = query.getOrDefault("sortOrder")
  valid_589616 = validateParameter(valid_589616, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_589616 != nil:
    section.add "sortOrder", valid_589616
  var valid_589617 = query.getOrDefault("prettyPrint")
  valid_589617 = validateParameter(valid_589617, JBool, required = false,
                                 default = newJBool(true))
  if valid_589617 != nil:
    section.add "prettyPrint", valid_589617
  var valid_589618 = query.getOrDefault("includeAdvertisersWithoutGroupsOnly")
  valid_589618 = validateParameter(valid_589618, JBool, required = false, default = nil)
  if valid_589618 != nil:
    section.add "includeAdvertisersWithoutGroupsOnly", valid_589618
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589619: Call_DfareportingAdvertisersList_589596; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of advertisers, possibly filtered. This method supports paging.
  ## 
  let valid = call_589619.validator(path, query, header, formData, body)
  let scheme = call_589619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589619.url(scheme.get, call_589619.host, call_589619.base,
                         call_589619.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589619, url, valid)

proc call*(call_589620: Call_DfareportingAdvertisersList_589596; profileId: string;
          subaccountId: string = ""; advertiserGroupIds: JsonNode = nil;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "ID"; alt: string = "json"; onlyParent: bool = false;
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; floodlightConfigurationIds: JsonNode = nil;
          ids: JsonNode = nil; key: string = ""; status: string = "APPROVED";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true;
          includeAdvertisersWithoutGroupsOnly: bool = false): Recallable =
  ## dfareportingAdvertisersList
  ## Retrieves a list of advertisers, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   subaccountId: string
  ##               : Select only advertisers with these subaccount IDs.
  ##   advertiserGroupIds: JArray
  ##                     : Select only advertisers with these advertiser group IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   onlyParent: bool
  ##             : Select only advertisers which use another advertiser's floodlight configuration.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser June 2015", "advertiser April 2015", or simply "advertiser 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertiser" will match objects with name "my advertiser", "advertiser 2015", or simply "advertiser".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   floodlightConfigurationIds: JArray
  ##                             : Select only advertisers with these floodlight configuration IDs.
  ##   ids: JArray
  ##      : Select only advertisers with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   status: string
  ##         : Select only advertisers with the specified status.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   includeAdvertisersWithoutGroupsOnly: bool
  ##                                      : Select only advertisers which do not belong to any advertiser group.
  var path_589621 = newJObject()
  var query_589622 = newJObject()
  add(path_589621, "profileId", newJString(profileId))
  add(query_589622, "subaccountId", newJString(subaccountId))
  if advertiserGroupIds != nil:
    query_589622.add "advertiserGroupIds", advertiserGroupIds
  add(query_589622, "fields", newJString(fields))
  add(query_589622, "pageToken", newJString(pageToken))
  add(query_589622, "quotaUser", newJString(quotaUser))
  add(query_589622, "sortField", newJString(sortField))
  add(query_589622, "alt", newJString(alt))
  add(query_589622, "onlyParent", newJBool(onlyParent))
  add(query_589622, "searchString", newJString(searchString))
  add(query_589622, "oauth_token", newJString(oauthToken))
  add(query_589622, "userIp", newJString(userIp))
  add(query_589622, "maxResults", newJInt(maxResults))
  if floodlightConfigurationIds != nil:
    query_589622.add "floodlightConfigurationIds", floodlightConfigurationIds
  if ids != nil:
    query_589622.add "ids", ids
  add(query_589622, "key", newJString(key))
  add(query_589622, "status", newJString(status))
  add(query_589622, "sortOrder", newJString(sortOrder))
  add(query_589622, "prettyPrint", newJBool(prettyPrint))
  add(query_589622, "includeAdvertisersWithoutGroupsOnly",
      newJBool(includeAdvertisersWithoutGroupsOnly))
  result = call_589620.call(path_589621, query_589622, nil, nil, nil)

var dfareportingAdvertisersList* = Call_DfareportingAdvertisersList_589596(
    name: "dfareportingAdvertisersList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/advertisers",
    validator: validate_DfareportingAdvertisersList_589597,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertisersList_589598,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersPatch_589657 = ref object of OpenApiRestCall_588466
proc url_DfareportingAdvertisersPatch_589659(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersPatch_589658(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing advertiser. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589660 = path.getOrDefault("profileId")
  valid_589660 = validateParameter(valid_589660, JString, required = true,
                                 default = nil)
  if valid_589660 != nil:
    section.add "profileId", valid_589660
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Advertiser ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589661 = query.getOrDefault("fields")
  valid_589661 = validateParameter(valid_589661, JString, required = false,
                                 default = nil)
  if valid_589661 != nil:
    section.add "fields", valid_589661
  var valid_589662 = query.getOrDefault("quotaUser")
  valid_589662 = validateParameter(valid_589662, JString, required = false,
                                 default = nil)
  if valid_589662 != nil:
    section.add "quotaUser", valid_589662
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_589663 = query.getOrDefault("id")
  valid_589663 = validateParameter(valid_589663, JString, required = true,
                                 default = nil)
  if valid_589663 != nil:
    section.add "id", valid_589663
  var valid_589664 = query.getOrDefault("alt")
  valid_589664 = validateParameter(valid_589664, JString, required = false,
                                 default = newJString("json"))
  if valid_589664 != nil:
    section.add "alt", valid_589664
  var valid_589665 = query.getOrDefault("oauth_token")
  valid_589665 = validateParameter(valid_589665, JString, required = false,
                                 default = nil)
  if valid_589665 != nil:
    section.add "oauth_token", valid_589665
  var valid_589666 = query.getOrDefault("userIp")
  valid_589666 = validateParameter(valid_589666, JString, required = false,
                                 default = nil)
  if valid_589666 != nil:
    section.add "userIp", valid_589666
  var valid_589667 = query.getOrDefault("key")
  valid_589667 = validateParameter(valid_589667, JString, required = false,
                                 default = nil)
  if valid_589667 != nil:
    section.add "key", valid_589667
  var valid_589668 = query.getOrDefault("prettyPrint")
  valid_589668 = validateParameter(valid_589668, JBool, required = false,
                                 default = newJBool(true))
  if valid_589668 != nil:
    section.add "prettyPrint", valid_589668
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589670: Call_DfareportingAdvertisersPatch_589657; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing advertiser. This method supports patch semantics.
  ## 
  let valid = call_589670.validator(path, query, header, formData, body)
  let scheme = call_589670.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589670.url(scheme.get, call_589670.host, call_589670.base,
                         call_589670.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589670, url, valid)

proc call*(call_589671: Call_DfareportingAdvertisersPatch_589657;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertisersPatch
  ## Updates an existing advertiser. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Advertiser ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589672 = newJObject()
  var query_589673 = newJObject()
  var body_589674 = newJObject()
  add(path_589672, "profileId", newJString(profileId))
  add(query_589673, "fields", newJString(fields))
  add(query_589673, "quotaUser", newJString(quotaUser))
  add(query_589673, "id", newJString(id))
  add(query_589673, "alt", newJString(alt))
  add(query_589673, "oauth_token", newJString(oauthToken))
  add(query_589673, "userIp", newJString(userIp))
  add(query_589673, "key", newJString(key))
  if body != nil:
    body_589674 = body
  add(query_589673, "prettyPrint", newJBool(prettyPrint))
  result = call_589671.call(path_589672, query_589673, nil, nil, body_589674)

var dfareportingAdvertisersPatch* = Call_DfareportingAdvertisersPatch_589657(
    name: "dfareportingAdvertisersPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/advertisers",
    validator: validate_DfareportingAdvertisersPatch_589658,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertisersPatch_589659,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersGet_589675 = ref object of OpenApiRestCall_588466
proc url_DfareportingAdvertisersGet_589677(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersGet_589676(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one advertiser by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Advertiser ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589678 = path.getOrDefault("profileId")
  valid_589678 = validateParameter(valid_589678, JString, required = true,
                                 default = nil)
  if valid_589678 != nil:
    section.add "profileId", valid_589678
  var valid_589679 = path.getOrDefault("id")
  valid_589679 = validateParameter(valid_589679, JString, required = true,
                                 default = nil)
  if valid_589679 != nil:
    section.add "id", valid_589679
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589680 = query.getOrDefault("fields")
  valid_589680 = validateParameter(valid_589680, JString, required = false,
                                 default = nil)
  if valid_589680 != nil:
    section.add "fields", valid_589680
  var valid_589681 = query.getOrDefault("quotaUser")
  valid_589681 = validateParameter(valid_589681, JString, required = false,
                                 default = nil)
  if valid_589681 != nil:
    section.add "quotaUser", valid_589681
  var valid_589682 = query.getOrDefault("alt")
  valid_589682 = validateParameter(valid_589682, JString, required = false,
                                 default = newJString("json"))
  if valid_589682 != nil:
    section.add "alt", valid_589682
  var valid_589683 = query.getOrDefault("oauth_token")
  valid_589683 = validateParameter(valid_589683, JString, required = false,
                                 default = nil)
  if valid_589683 != nil:
    section.add "oauth_token", valid_589683
  var valid_589684 = query.getOrDefault("userIp")
  valid_589684 = validateParameter(valid_589684, JString, required = false,
                                 default = nil)
  if valid_589684 != nil:
    section.add "userIp", valid_589684
  var valid_589685 = query.getOrDefault("key")
  valid_589685 = validateParameter(valid_589685, JString, required = false,
                                 default = nil)
  if valid_589685 != nil:
    section.add "key", valid_589685
  var valid_589686 = query.getOrDefault("prettyPrint")
  valid_589686 = validateParameter(valid_589686, JBool, required = false,
                                 default = newJBool(true))
  if valid_589686 != nil:
    section.add "prettyPrint", valid_589686
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589687: Call_DfareportingAdvertisersGet_589675; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one advertiser by ID.
  ## 
  let valid = call_589687.validator(path, query, header, formData, body)
  let scheme = call_589687.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589687.url(scheme.get, call_589687.host, call_589687.base,
                         call_589687.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589687, url, valid)

proc call*(call_589688: Call_DfareportingAdvertisersGet_589675; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertisersGet
  ## Gets one advertiser by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Advertiser ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589689 = newJObject()
  var query_589690 = newJObject()
  add(path_589689, "profileId", newJString(profileId))
  add(query_589690, "fields", newJString(fields))
  add(query_589690, "quotaUser", newJString(quotaUser))
  add(query_589690, "alt", newJString(alt))
  add(query_589690, "oauth_token", newJString(oauthToken))
  add(query_589690, "userIp", newJString(userIp))
  add(path_589689, "id", newJString(id))
  add(query_589690, "key", newJString(key))
  add(query_589690, "prettyPrint", newJBool(prettyPrint))
  result = call_589688.call(path_589689, query_589690, nil, nil, nil)

var dfareportingAdvertisersGet* = Call_DfareportingAdvertisersGet_589675(
    name: "dfareportingAdvertisersGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertisers/{id}",
    validator: validate_DfareportingAdvertisersGet_589676,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertisersGet_589677,
    schemes: {Scheme.Https})
type
  Call_DfareportingBrowsersList_589691 = ref object of OpenApiRestCall_588466
proc url_DfareportingBrowsersList_589693(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/browsers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingBrowsersList_589692(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of browsers.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589694 = path.getOrDefault("profileId")
  valid_589694 = validateParameter(valid_589694, JString, required = true,
                                 default = nil)
  if valid_589694 != nil:
    section.add "profileId", valid_589694
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589695 = query.getOrDefault("fields")
  valid_589695 = validateParameter(valid_589695, JString, required = false,
                                 default = nil)
  if valid_589695 != nil:
    section.add "fields", valid_589695
  var valid_589696 = query.getOrDefault("quotaUser")
  valid_589696 = validateParameter(valid_589696, JString, required = false,
                                 default = nil)
  if valid_589696 != nil:
    section.add "quotaUser", valid_589696
  var valid_589697 = query.getOrDefault("alt")
  valid_589697 = validateParameter(valid_589697, JString, required = false,
                                 default = newJString("json"))
  if valid_589697 != nil:
    section.add "alt", valid_589697
  var valid_589698 = query.getOrDefault("oauth_token")
  valid_589698 = validateParameter(valid_589698, JString, required = false,
                                 default = nil)
  if valid_589698 != nil:
    section.add "oauth_token", valid_589698
  var valid_589699 = query.getOrDefault("userIp")
  valid_589699 = validateParameter(valid_589699, JString, required = false,
                                 default = nil)
  if valid_589699 != nil:
    section.add "userIp", valid_589699
  var valid_589700 = query.getOrDefault("key")
  valid_589700 = validateParameter(valid_589700, JString, required = false,
                                 default = nil)
  if valid_589700 != nil:
    section.add "key", valid_589700
  var valid_589701 = query.getOrDefault("prettyPrint")
  valid_589701 = validateParameter(valid_589701, JBool, required = false,
                                 default = newJBool(true))
  if valid_589701 != nil:
    section.add "prettyPrint", valid_589701
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589702: Call_DfareportingBrowsersList_589691; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of browsers.
  ## 
  let valid = call_589702.validator(path, query, header, formData, body)
  let scheme = call_589702.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589702.url(scheme.get, call_589702.host, call_589702.base,
                         call_589702.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589702, url, valid)

proc call*(call_589703: Call_DfareportingBrowsersList_589691; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingBrowsersList
  ## Retrieves a list of browsers.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589704 = newJObject()
  var query_589705 = newJObject()
  add(path_589704, "profileId", newJString(profileId))
  add(query_589705, "fields", newJString(fields))
  add(query_589705, "quotaUser", newJString(quotaUser))
  add(query_589705, "alt", newJString(alt))
  add(query_589705, "oauth_token", newJString(oauthToken))
  add(query_589705, "userIp", newJString(userIp))
  add(query_589705, "key", newJString(key))
  add(query_589705, "prettyPrint", newJBool(prettyPrint))
  result = call_589703.call(path_589704, query_589705, nil, nil, nil)

var dfareportingBrowsersList* = Call_DfareportingBrowsersList_589691(
    name: "dfareportingBrowsersList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/browsers",
    validator: validate_DfareportingBrowsersList_589692,
    base: "/dfareporting/v3.2", url: url_DfareportingBrowsersList_589693,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsUpdate_589734 = ref object of OpenApiRestCall_588466
proc url_DfareportingCampaignsUpdate_589736(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsUpdate_589735(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing campaign.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589737 = path.getOrDefault("profileId")
  valid_589737 = validateParameter(valid_589737, JString, required = true,
                                 default = nil)
  if valid_589737 != nil:
    section.add "profileId", valid_589737
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589738 = query.getOrDefault("fields")
  valid_589738 = validateParameter(valid_589738, JString, required = false,
                                 default = nil)
  if valid_589738 != nil:
    section.add "fields", valid_589738
  var valid_589739 = query.getOrDefault("quotaUser")
  valid_589739 = validateParameter(valid_589739, JString, required = false,
                                 default = nil)
  if valid_589739 != nil:
    section.add "quotaUser", valid_589739
  var valid_589740 = query.getOrDefault("alt")
  valid_589740 = validateParameter(valid_589740, JString, required = false,
                                 default = newJString("json"))
  if valid_589740 != nil:
    section.add "alt", valid_589740
  var valid_589741 = query.getOrDefault("oauth_token")
  valid_589741 = validateParameter(valid_589741, JString, required = false,
                                 default = nil)
  if valid_589741 != nil:
    section.add "oauth_token", valid_589741
  var valid_589742 = query.getOrDefault("userIp")
  valid_589742 = validateParameter(valid_589742, JString, required = false,
                                 default = nil)
  if valid_589742 != nil:
    section.add "userIp", valid_589742
  var valid_589743 = query.getOrDefault("key")
  valid_589743 = validateParameter(valid_589743, JString, required = false,
                                 default = nil)
  if valid_589743 != nil:
    section.add "key", valid_589743
  var valid_589744 = query.getOrDefault("prettyPrint")
  valid_589744 = validateParameter(valid_589744, JBool, required = false,
                                 default = newJBool(true))
  if valid_589744 != nil:
    section.add "prettyPrint", valid_589744
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589746: Call_DfareportingCampaignsUpdate_589734; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing campaign.
  ## 
  let valid = call_589746.validator(path, query, header, formData, body)
  let scheme = call_589746.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589746.url(scheme.get, call_589746.host, call_589746.base,
                         call_589746.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589746, url, valid)

proc call*(call_589747: Call_DfareportingCampaignsUpdate_589734; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCampaignsUpdate
  ## Updates an existing campaign.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589748 = newJObject()
  var query_589749 = newJObject()
  var body_589750 = newJObject()
  add(path_589748, "profileId", newJString(profileId))
  add(query_589749, "fields", newJString(fields))
  add(query_589749, "quotaUser", newJString(quotaUser))
  add(query_589749, "alt", newJString(alt))
  add(query_589749, "oauth_token", newJString(oauthToken))
  add(query_589749, "userIp", newJString(userIp))
  add(query_589749, "key", newJString(key))
  if body != nil:
    body_589750 = body
  add(query_589749, "prettyPrint", newJBool(prettyPrint))
  result = call_589747.call(path_589748, query_589749, nil, nil, body_589750)

var dfareportingCampaignsUpdate* = Call_DfareportingCampaignsUpdate_589734(
    name: "dfareportingCampaignsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns",
    validator: validate_DfareportingCampaignsUpdate_589735,
    base: "/dfareporting/v3.2", url: url_DfareportingCampaignsUpdate_589736,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsInsert_589751 = ref object of OpenApiRestCall_588466
proc url_DfareportingCampaignsInsert_589753(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsInsert_589752(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new campaign.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589754 = path.getOrDefault("profileId")
  valid_589754 = validateParameter(valid_589754, JString, required = true,
                                 default = nil)
  if valid_589754 != nil:
    section.add "profileId", valid_589754
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589755 = query.getOrDefault("fields")
  valid_589755 = validateParameter(valid_589755, JString, required = false,
                                 default = nil)
  if valid_589755 != nil:
    section.add "fields", valid_589755
  var valid_589756 = query.getOrDefault("quotaUser")
  valid_589756 = validateParameter(valid_589756, JString, required = false,
                                 default = nil)
  if valid_589756 != nil:
    section.add "quotaUser", valid_589756
  var valid_589757 = query.getOrDefault("alt")
  valid_589757 = validateParameter(valid_589757, JString, required = false,
                                 default = newJString("json"))
  if valid_589757 != nil:
    section.add "alt", valid_589757
  var valid_589758 = query.getOrDefault("oauth_token")
  valid_589758 = validateParameter(valid_589758, JString, required = false,
                                 default = nil)
  if valid_589758 != nil:
    section.add "oauth_token", valid_589758
  var valid_589759 = query.getOrDefault("userIp")
  valid_589759 = validateParameter(valid_589759, JString, required = false,
                                 default = nil)
  if valid_589759 != nil:
    section.add "userIp", valid_589759
  var valid_589760 = query.getOrDefault("key")
  valid_589760 = validateParameter(valid_589760, JString, required = false,
                                 default = nil)
  if valid_589760 != nil:
    section.add "key", valid_589760
  var valid_589761 = query.getOrDefault("prettyPrint")
  valid_589761 = validateParameter(valid_589761, JBool, required = false,
                                 default = newJBool(true))
  if valid_589761 != nil:
    section.add "prettyPrint", valid_589761
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589763: Call_DfareportingCampaignsInsert_589751; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new campaign.
  ## 
  let valid = call_589763.validator(path, query, header, formData, body)
  let scheme = call_589763.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589763.url(scheme.get, call_589763.host, call_589763.base,
                         call_589763.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589763, url, valid)

proc call*(call_589764: Call_DfareportingCampaignsInsert_589751; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCampaignsInsert
  ## Inserts a new campaign.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589765 = newJObject()
  var query_589766 = newJObject()
  var body_589767 = newJObject()
  add(path_589765, "profileId", newJString(profileId))
  add(query_589766, "fields", newJString(fields))
  add(query_589766, "quotaUser", newJString(quotaUser))
  add(query_589766, "alt", newJString(alt))
  add(query_589766, "oauth_token", newJString(oauthToken))
  add(query_589766, "userIp", newJString(userIp))
  add(query_589766, "key", newJString(key))
  if body != nil:
    body_589767 = body
  add(query_589766, "prettyPrint", newJBool(prettyPrint))
  result = call_589764.call(path_589765, query_589766, nil, nil, body_589767)

var dfareportingCampaignsInsert* = Call_DfareportingCampaignsInsert_589751(
    name: "dfareportingCampaignsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns",
    validator: validate_DfareportingCampaignsInsert_589752,
    base: "/dfareporting/v3.2", url: url_DfareportingCampaignsInsert_589753,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsList_589706 = ref object of OpenApiRestCall_588466
proc url_DfareportingCampaignsList_589708(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsList_589707(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of campaigns, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589709 = path.getOrDefault("profileId")
  valid_589709 = validateParameter(valid_589709, JString, required = true,
                                 default = nil)
  if valid_589709 != nil:
    section.add "profileId", valid_589709
  result.add "path", section
  ## parameters in `query` object:
  ##   overriddenEventTagId: JString
  ##                       : Select only campaigns that have overridden this event tag ID.
  ##   subaccountId: JString
  ##               : Select only campaigns that belong to this subaccount.
  ##   advertiserGroupIds: JArray
  ##                     : Select only campaigns whose advertisers belong to these advertiser groups.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   atLeastOneOptimizationActivity: JBool
  ##                                 : Select only campaigns that have at least one optimization activity.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for campaigns by name or ID. Wildcards (*) are allowed. For example, "campaign*2015" will return campaigns with names like "campaign June 2015", "campaign April 2015", or simply "campaign 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "campaign" will match campaigns with name "my campaign", "campaign 2015", or simply "campaign".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived campaigns. Don't set this field to select both archived and non-archived campaigns.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only campaigns with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only campaigns that belong to these advertisers.
  ##   excludedIds: JArray
  ##              : Exclude campaigns with these IDs.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589710 = query.getOrDefault("overriddenEventTagId")
  valid_589710 = validateParameter(valid_589710, JString, required = false,
                                 default = nil)
  if valid_589710 != nil:
    section.add "overriddenEventTagId", valid_589710
  var valid_589711 = query.getOrDefault("subaccountId")
  valid_589711 = validateParameter(valid_589711, JString, required = false,
                                 default = nil)
  if valid_589711 != nil:
    section.add "subaccountId", valid_589711
  var valid_589712 = query.getOrDefault("advertiserGroupIds")
  valid_589712 = validateParameter(valid_589712, JArray, required = false,
                                 default = nil)
  if valid_589712 != nil:
    section.add "advertiserGroupIds", valid_589712
  var valid_589713 = query.getOrDefault("fields")
  valid_589713 = validateParameter(valid_589713, JString, required = false,
                                 default = nil)
  if valid_589713 != nil:
    section.add "fields", valid_589713
  var valid_589714 = query.getOrDefault("atLeastOneOptimizationActivity")
  valid_589714 = validateParameter(valid_589714, JBool, required = false, default = nil)
  if valid_589714 != nil:
    section.add "atLeastOneOptimizationActivity", valid_589714
  var valid_589715 = query.getOrDefault("quotaUser")
  valid_589715 = validateParameter(valid_589715, JString, required = false,
                                 default = nil)
  if valid_589715 != nil:
    section.add "quotaUser", valid_589715
  var valid_589716 = query.getOrDefault("pageToken")
  valid_589716 = validateParameter(valid_589716, JString, required = false,
                                 default = nil)
  if valid_589716 != nil:
    section.add "pageToken", valid_589716
  var valid_589717 = query.getOrDefault("sortField")
  valid_589717 = validateParameter(valid_589717, JString, required = false,
                                 default = newJString("ID"))
  if valid_589717 != nil:
    section.add "sortField", valid_589717
  var valid_589718 = query.getOrDefault("alt")
  valid_589718 = validateParameter(valid_589718, JString, required = false,
                                 default = newJString("json"))
  if valid_589718 != nil:
    section.add "alt", valid_589718
  var valid_589719 = query.getOrDefault("searchString")
  valid_589719 = validateParameter(valid_589719, JString, required = false,
                                 default = nil)
  if valid_589719 != nil:
    section.add "searchString", valid_589719
  var valid_589720 = query.getOrDefault("oauth_token")
  valid_589720 = validateParameter(valid_589720, JString, required = false,
                                 default = nil)
  if valid_589720 != nil:
    section.add "oauth_token", valid_589720
  var valid_589721 = query.getOrDefault("userIp")
  valid_589721 = validateParameter(valid_589721, JString, required = false,
                                 default = nil)
  if valid_589721 != nil:
    section.add "userIp", valid_589721
  var valid_589722 = query.getOrDefault("archived")
  valid_589722 = validateParameter(valid_589722, JBool, required = false, default = nil)
  if valid_589722 != nil:
    section.add "archived", valid_589722
  var valid_589723 = query.getOrDefault("maxResults")
  valid_589723 = validateParameter(valid_589723, JInt, required = false,
                                 default = newJInt(1000))
  if valid_589723 != nil:
    section.add "maxResults", valid_589723
  var valid_589724 = query.getOrDefault("ids")
  valid_589724 = validateParameter(valid_589724, JArray, required = false,
                                 default = nil)
  if valid_589724 != nil:
    section.add "ids", valid_589724
  var valid_589725 = query.getOrDefault("key")
  valid_589725 = validateParameter(valid_589725, JString, required = false,
                                 default = nil)
  if valid_589725 != nil:
    section.add "key", valid_589725
  var valid_589726 = query.getOrDefault("advertiserIds")
  valid_589726 = validateParameter(valid_589726, JArray, required = false,
                                 default = nil)
  if valid_589726 != nil:
    section.add "advertiserIds", valid_589726
  var valid_589727 = query.getOrDefault("excludedIds")
  valid_589727 = validateParameter(valid_589727, JArray, required = false,
                                 default = nil)
  if valid_589727 != nil:
    section.add "excludedIds", valid_589727
  var valid_589728 = query.getOrDefault("sortOrder")
  valid_589728 = validateParameter(valid_589728, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_589728 != nil:
    section.add "sortOrder", valid_589728
  var valid_589729 = query.getOrDefault("prettyPrint")
  valid_589729 = validateParameter(valid_589729, JBool, required = false,
                                 default = newJBool(true))
  if valid_589729 != nil:
    section.add "prettyPrint", valid_589729
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589730: Call_DfareportingCampaignsList_589706; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of campaigns, possibly filtered. This method supports paging.
  ## 
  let valid = call_589730.validator(path, query, header, formData, body)
  let scheme = call_589730.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589730.url(scheme.get, call_589730.host, call_589730.base,
                         call_589730.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589730, url, valid)

proc call*(call_589731: Call_DfareportingCampaignsList_589706; profileId: string;
          overriddenEventTagId: string = ""; subaccountId: string = "";
          advertiserGroupIds: JsonNode = nil; fields: string = "";
          atLeastOneOptimizationActivity: bool = false; quotaUser: string = "";
          pageToken: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          archived: bool = false; maxResults: int = 1000; ids: JsonNode = nil;
          key: string = ""; advertiserIds: JsonNode = nil; excludedIds: JsonNode = nil;
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingCampaignsList
  ## Retrieves a list of campaigns, possibly filtered. This method supports paging.
  ##   overriddenEventTagId: string
  ##                       : Select only campaigns that have overridden this event tag ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   subaccountId: string
  ##               : Select only campaigns that belong to this subaccount.
  ##   advertiserGroupIds: JArray
  ##                     : Select only campaigns whose advertisers belong to these advertiser groups.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   atLeastOneOptimizationActivity: bool
  ##                                 : Select only campaigns that have at least one optimization activity.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for campaigns by name or ID. Wildcards (*) are allowed. For example, "campaign*2015" will return campaigns with names like "campaign June 2015", "campaign April 2015", or simply "campaign 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "campaign" will match campaigns with name "my campaign", "campaign 2015", or simply "campaign".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived campaigns. Don't set this field to select both archived and non-archived campaigns.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only campaigns with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only campaigns that belong to these advertisers.
  ##   excludedIds: JArray
  ##              : Exclude campaigns with these IDs.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589732 = newJObject()
  var query_589733 = newJObject()
  add(query_589733, "overriddenEventTagId", newJString(overriddenEventTagId))
  add(path_589732, "profileId", newJString(profileId))
  add(query_589733, "subaccountId", newJString(subaccountId))
  if advertiserGroupIds != nil:
    query_589733.add "advertiserGroupIds", advertiserGroupIds
  add(query_589733, "fields", newJString(fields))
  add(query_589733, "atLeastOneOptimizationActivity",
      newJBool(atLeastOneOptimizationActivity))
  add(query_589733, "quotaUser", newJString(quotaUser))
  add(query_589733, "pageToken", newJString(pageToken))
  add(query_589733, "sortField", newJString(sortField))
  add(query_589733, "alt", newJString(alt))
  add(query_589733, "searchString", newJString(searchString))
  add(query_589733, "oauth_token", newJString(oauthToken))
  add(query_589733, "userIp", newJString(userIp))
  add(query_589733, "archived", newJBool(archived))
  add(query_589733, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_589733.add "ids", ids
  add(query_589733, "key", newJString(key))
  if advertiserIds != nil:
    query_589733.add "advertiserIds", advertiserIds
  if excludedIds != nil:
    query_589733.add "excludedIds", excludedIds
  add(query_589733, "sortOrder", newJString(sortOrder))
  add(query_589733, "prettyPrint", newJBool(prettyPrint))
  result = call_589731.call(path_589732, query_589733, nil, nil, nil)

var dfareportingCampaignsList* = Call_DfareportingCampaignsList_589706(
    name: "dfareportingCampaignsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns",
    validator: validate_DfareportingCampaignsList_589707,
    base: "/dfareporting/v3.2", url: url_DfareportingCampaignsList_589708,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsPatch_589768 = ref object of OpenApiRestCall_588466
proc url_DfareportingCampaignsPatch_589770(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsPatch_589769(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing campaign. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589771 = path.getOrDefault("profileId")
  valid_589771 = validateParameter(valid_589771, JString, required = true,
                                 default = nil)
  if valid_589771 != nil:
    section.add "profileId", valid_589771
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Campaign ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589772 = query.getOrDefault("fields")
  valid_589772 = validateParameter(valid_589772, JString, required = false,
                                 default = nil)
  if valid_589772 != nil:
    section.add "fields", valid_589772
  var valid_589773 = query.getOrDefault("quotaUser")
  valid_589773 = validateParameter(valid_589773, JString, required = false,
                                 default = nil)
  if valid_589773 != nil:
    section.add "quotaUser", valid_589773
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_589774 = query.getOrDefault("id")
  valid_589774 = validateParameter(valid_589774, JString, required = true,
                                 default = nil)
  if valid_589774 != nil:
    section.add "id", valid_589774
  var valid_589775 = query.getOrDefault("alt")
  valid_589775 = validateParameter(valid_589775, JString, required = false,
                                 default = newJString("json"))
  if valid_589775 != nil:
    section.add "alt", valid_589775
  var valid_589776 = query.getOrDefault("oauth_token")
  valid_589776 = validateParameter(valid_589776, JString, required = false,
                                 default = nil)
  if valid_589776 != nil:
    section.add "oauth_token", valid_589776
  var valid_589777 = query.getOrDefault("userIp")
  valid_589777 = validateParameter(valid_589777, JString, required = false,
                                 default = nil)
  if valid_589777 != nil:
    section.add "userIp", valid_589777
  var valid_589778 = query.getOrDefault("key")
  valid_589778 = validateParameter(valid_589778, JString, required = false,
                                 default = nil)
  if valid_589778 != nil:
    section.add "key", valid_589778
  var valid_589779 = query.getOrDefault("prettyPrint")
  valid_589779 = validateParameter(valid_589779, JBool, required = false,
                                 default = newJBool(true))
  if valid_589779 != nil:
    section.add "prettyPrint", valid_589779
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589781: Call_DfareportingCampaignsPatch_589768; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing campaign. This method supports patch semantics.
  ## 
  let valid = call_589781.validator(path, query, header, formData, body)
  let scheme = call_589781.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589781.url(scheme.get, call_589781.host, call_589781.base,
                         call_589781.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589781, url, valid)

proc call*(call_589782: Call_DfareportingCampaignsPatch_589768; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCampaignsPatch
  ## Updates an existing campaign. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Campaign ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589783 = newJObject()
  var query_589784 = newJObject()
  var body_589785 = newJObject()
  add(path_589783, "profileId", newJString(profileId))
  add(query_589784, "fields", newJString(fields))
  add(query_589784, "quotaUser", newJString(quotaUser))
  add(query_589784, "id", newJString(id))
  add(query_589784, "alt", newJString(alt))
  add(query_589784, "oauth_token", newJString(oauthToken))
  add(query_589784, "userIp", newJString(userIp))
  add(query_589784, "key", newJString(key))
  if body != nil:
    body_589785 = body
  add(query_589784, "prettyPrint", newJBool(prettyPrint))
  result = call_589782.call(path_589783, query_589784, nil, nil, body_589785)

var dfareportingCampaignsPatch* = Call_DfareportingCampaignsPatch_589768(
    name: "dfareportingCampaignsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns",
    validator: validate_DfareportingCampaignsPatch_589769,
    base: "/dfareporting/v3.2", url: url_DfareportingCampaignsPatch_589770,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignCreativeAssociationsInsert_589805 = ref object of OpenApiRestCall_588466
proc url_DfareportingCampaignCreativeAssociationsInsert_589807(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "campaignId" in path, "`campaignId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns/"),
               (kind: VariableSegment, value: "campaignId"),
               (kind: ConstantSegment, value: "/campaignCreativeAssociations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignCreativeAssociationsInsert_589806(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   campaignId: JString (required)
  ##             : Campaign ID in this association.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589808 = path.getOrDefault("profileId")
  valid_589808 = validateParameter(valid_589808, JString, required = true,
                                 default = nil)
  if valid_589808 != nil:
    section.add "profileId", valid_589808
  var valid_589809 = path.getOrDefault("campaignId")
  valid_589809 = validateParameter(valid_589809, JString, required = true,
                                 default = nil)
  if valid_589809 != nil:
    section.add "campaignId", valid_589809
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589810 = query.getOrDefault("fields")
  valid_589810 = validateParameter(valid_589810, JString, required = false,
                                 default = nil)
  if valid_589810 != nil:
    section.add "fields", valid_589810
  var valid_589811 = query.getOrDefault("quotaUser")
  valid_589811 = validateParameter(valid_589811, JString, required = false,
                                 default = nil)
  if valid_589811 != nil:
    section.add "quotaUser", valid_589811
  var valid_589812 = query.getOrDefault("alt")
  valid_589812 = validateParameter(valid_589812, JString, required = false,
                                 default = newJString("json"))
  if valid_589812 != nil:
    section.add "alt", valid_589812
  var valid_589813 = query.getOrDefault("oauth_token")
  valid_589813 = validateParameter(valid_589813, JString, required = false,
                                 default = nil)
  if valid_589813 != nil:
    section.add "oauth_token", valid_589813
  var valid_589814 = query.getOrDefault("userIp")
  valid_589814 = validateParameter(valid_589814, JString, required = false,
                                 default = nil)
  if valid_589814 != nil:
    section.add "userIp", valid_589814
  var valid_589815 = query.getOrDefault("key")
  valid_589815 = validateParameter(valid_589815, JString, required = false,
                                 default = nil)
  if valid_589815 != nil:
    section.add "key", valid_589815
  var valid_589816 = query.getOrDefault("prettyPrint")
  valid_589816 = validateParameter(valid_589816, JBool, required = false,
                                 default = newJBool(true))
  if valid_589816 != nil:
    section.add "prettyPrint", valid_589816
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589818: Call_DfareportingCampaignCreativeAssociationsInsert_589805;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already.
  ## 
  let valid = call_589818.validator(path, query, header, formData, body)
  let scheme = call_589818.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589818.url(scheme.get, call_589818.host, call_589818.base,
                         call_589818.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589818, url, valid)

proc call*(call_589819: Call_DfareportingCampaignCreativeAssociationsInsert_589805;
          profileId: string; campaignId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; body: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingCampaignCreativeAssociationsInsert
  ## Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   campaignId: string (required)
  ##             : Campaign ID in this association.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589820 = newJObject()
  var query_589821 = newJObject()
  var body_589822 = newJObject()
  add(path_589820, "profileId", newJString(profileId))
  add(path_589820, "campaignId", newJString(campaignId))
  add(query_589821, "fields", newJString(fields))
  add(query_589821, "quotaUser", newJString(quotaUser))
  add(query_589821, "alt", newJString(alt))
  add(query_589821, "oauth_token", newJString(oauthToken))
  add(query_589821, "userIp", newJString(userIp))
  add(query_589821, "key", newJString(key))
  if body != nil:
    body_589822 = body
  add(query_589821, "prettyPrint", newJBool(prettyPrint))
  result = call_589819.call(path_589820, query_589821, nil, nil, body_589822)

var dfareportingCampaignCreativeAssociationsInsert* = Call_DfareportingCampaignCreativeAssociationsInsert_589805(
    name: "dfareportingCampaignCreativeAssociationsInsert",
    meth: HttpMethod.HttpPost, host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations",
    validator: validate_DfareportingCampaignCreativeAssociationsInsert_589806,
    base: "/dfareporting/v3.2",
    url: url_DfareportingCampaignCreativeAssociationsInsert_589807,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignCreativeAssociationsList_589786 = ref object of OpenApiRestCall_588466
proc url_DfareportingCampaignCreativeAssociationsList_589788(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "campaignId" in path, "`campaignId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns/"),
               (kind: VariableSegment, value: "campaignId"),
               (kind: ConstantSegment, value: "/campaignCreativeAssociations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignCreativeAssociationsList_589787(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the list of creative IDs associated with the specified campaign. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   campaignId: JString (required)
  ##             : Campaign ID in this association.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589789 = path.getOrDefault("profileId")
  valid_589789 = validateParameter(valid_589789, JString, required = true,
                                 default = nil)
  if valid_589789 != nil:
    section.add "profileId", valid_589789
  var valid_589790 = path.getOrDefault("campaignId")
  valid_589790 = validateParameter(valid_589790, JString, required = true,
                                 default = nil)
  if valid_589790 != nil:
    section.add "campaignId", valid_589790
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589791 = query.getOrDefault("fields")
  valid_589791 = validateParameter(valid_589791, JString, required = false,
                                 default = nil)
  if valid_589791 != nil:
    section.add "fields", valid_589791
  var valid_589792 = query.getOrDefault("pageToken")
  valid_589792 = validateParameter(valid_589792, JString, required = false,
                                 default = nil)
  if valid_589792 != nil:
    section.add "pageToken", valid_589792
  var valid_589793 = query.getOrDefault("quotaUser")
  valid_589793 = validateParameter(valid_589793, JString, required = false,
                                 default = nil)
  if valid_589793 != nil:
    section.add "quotaUser", valid_589793
  var valid_589794 = query.getOrDefault("alt")
  valid_589794 = validateParameter(valid_589794, JString, required = false,
                                 default = newJString("json"))
  if valid_589794 != nil:
    section.add "alt", valid_589794
  var valid_589795 = query.getOrDefault("oauth_token")
  valid_589795 = validateParameter(valid_589795, JString, required = false,
                                 default = nil)
  if valid_589795 != nil:
    section.add "oauth_token", valid_589795
  var valid_589796 = query.getOrDefault("userIp")
  valid_589796 = validateParameter(valid_589796, JString, required = false,
                                 default = nil)
  if valid_589796 != nil:
    section.add "userIp", valid_589796
  var valid_589797 = query.getOrDefault("maxResults")
  valid_589797 = validateParameter(valid_589797, JInt, required = false,
                                 default = newJInt(1000))
  if valid_589797 != nil:
    section.add "maxResults", valid_589797
  var valid_589798 = query.getOrDefault("key")
  valid_589798 = validateParameter(valid_589798, JString, required = false,
                                 default = nil)
  if valid_589798 != nil:
    section.add "key", valid_589798
  var valid_589799 = query.getOrDefault("sortOrder")
  valid_589799 = validateParameter(valid_589799, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_589799 != nil:
    section.add "sortOrder", valid_589799
  var valid_589800 = query.getOrDefault("prettyPrint")
  valid_589800 = validateParameter(valid_589800, JBool, required = false,
                                 default = newJBool(true))
  if valid_589800 != nil:
    section.add "prettyPrint", valid_589800
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589801: Call_DfareportingCampaignCreativeAssociationsList_589786;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the list of creative IDs associated with the specified campaign. This method supports paging.
  ## 
  let valid = call_589801.validator(path, query, header, formData, body)
  let scheme = call_589801.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589801.url(scheme.get, call_589801.host, call_589801.base,
                         call_589801.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589801, url, valid)

proc call*(call_589802: Call_DfareportingCampaignCreativeAssociationsList_589786;
          profileId: string; campaignId: string; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; maxResults: int = 1000;
          key: string = ""; sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingCampaignCreativeAssociationsList
  ## Retrieves the list of creative IDs associated with the specified campaign. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   campaignId: string (required)
  ##             : Campaign ID in this association.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589803 = newJObject()
  var query_589804 = newJObject()
  add(path_589803, "profileId", newJString(profileId))
  add(path_589803, "campaignId", newJString(campaignId))
  add(query_589804, "fields", newJString(fields))
  add(query_589804, "pageToken", newJString(pageToken))
  add(query_589804, "quotaUser", newJString(quotaUser))
  add(query_589804, "alt", newJString(alt))
  add(query_589804, "oauth_token", newJString(oauthToken))
  add(query_589804, "userIp", newJString(userIp))
  add(query_589804, "maxResults", newJInt(maxResults))
  add(query_589804, "key", newJString(key))
  add(query_589804, "sortOrder", newJString(sortOrder))
  add(query_589804, "prettyPrint", newJBool(prettyPrint))
  result = call_589802.call(path_589803, query_589804, nil, nil, nil)

var dfareportingCampaignCreativeAssociationsList* = Call_DfareportingCampaignCreativeAssociationsList_589786(
    name: "dfareportingCampaignCreativeAssociationsList",
    meth: HttpMethod.HttpGet, host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations",
    validator: validate_DfareportingCampaignCreativeAssociationsList_589787,
    base: "/dfareporting/v3.2",
    url: url_DfareportingCampaignCreativeAssociationsList_589788,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsGet_589823 = ref object of OpenApiRestCall_588466
proc url_DfareportingCampaignsGet_589825(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsGet_589824(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one campaign by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Campaign ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589826 = path.getOrDefault("profileId")
  valid_589826 = validateParameter(valid_589826, JString, required = true,
                                 default = nil)
  if valid_589826 != nil:
    section.add "profileId", valid_589826
  var valid_589827 = path.getOrDefault("id")
  valid_589827 = validateParameter(valid_589827, JString, required = true,
                                 default = nil)
  if valid_589827 != nil:
    section.add "id", valid_589827
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589828 = query.getOrDefault("fields")
  valid_589828 = validateParameter(valid_589828, JString, required = false,
                                 default = nil)
  if valid_589828 != nil:
    section.add "fields", valid_589828
  var valid_589829 = query.getOrDefault("quotaUser")
  valid_589829 = validateParameter(valid_589829, JString, required = false,
                                 default = nil)
  if valid_589829 != nil:
    section.add "quotaUser", valid_589829
  var valid_589830 = query.getOrDefault("alt")
  valid_589830 = validateParameter(valid_589830, JString, required = false,
                                 default = newJString("json"))
  if valid_589830 != nil:
    section.add "alt", valid_589830
  var valid_589831 = query.getOrDefault("oauth_token")
  valid_589831 = validateParameter(valid_589831, JString, required = false,
                                 default = nil)
  if valid_589831 != nil:
    section.add "oauth_token", valid_589831
  var valid_589832 = query.getOrDefault("userIp")
  valid_589832 = validateParameter(valid_589832, JString, required = false,
                                 default = nil)
  if valid_589832 != nil:
    section.add "userIp", valid_589832
  var valid_589833 = query.getOrDefault("key")
  valid_589833 = validateParameter(valid_589833, JString, required = false,
                                 default = nil)
  if valid_589833 != nil:
    section.add "key", valid_589833
  var valid_589834 = query.getOrDefault("prettyPrint")
  valid_589834 = validateParameter(valid_589834, JBool, required = false,
                                 default = newJBool(true))
  if valid_589834 != nil:
    section.add "prettyPrint", valid_589834
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589835: Call_DfareportingCampaignsGet_589823; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one campaign by ID.
  ## 
  let valid = call_589835.validator(path, query, header, formData, body)
  let scheme = call_589835.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589835.url(scheme.get, call_589835.host, call_589835.base,
                         call_589835.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589835, url, valid)

proc call*(call_589836: Call_DfareportingCampaignsGet_589823; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingCampaignsGet
  ## Gets one campaign by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Campaign ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589837 = newJObject()
  var query_589838 = newJObject()
  add(path_589837, "profileId", newJString(profileId))
  add(query_589838, "fields", newJString(fields))
  add(query_589838, "quotaUser", newJString(quotaUser))
  add(query_589838, "alt", newJString(alt))
  add(query_589838, "oauth_token", newJString(oauthToken))
  add(query_589838, "userIp", newJString(userIp))
  add(path_589837, "id", newJString(id))
  add(query_589838, "key", newJString(key))
  add(query_589838, "prettyPrint", newJBool(prettyPrint))
  result = call_589836.call(path_589837, query_589838, nil, nil, nil)

var dfareportingCampaignsGet* = Call_DfareportingCampaignsGet_589823(
    name: "dfareportingCampaignsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns/{id}",
    validator: validate_DfareportingCampaignsGet_589824,
    base: "/dfareporting/v3.2", url: url_DfareportingCampaignsGet_589825,
    schemes: {Scheme.Https})
type
  Call_DfareportingChangeLogsList_589839 = ref object of OpenApiRestCall_588466
proc url_DfareportingChangeLogsList_589841(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/changeLogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingChangeLogsList_589840(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of change logs. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589842 = path.getOrDefault("profileId")
  valid_589842 = validateParameter(valid_589842, JString, required = true,
                                 default = nil)
  if valid_589842 != nil:
    section.add "profileId", valid_589842
  result.add "path", section
  ## parameters in `query` object:
  ##   action: JString
  ##         : Select only change logs with the specified action.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   minChangeTime: JString
  ##                : Select only change logs whose change time is before the specified minChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Select only change logs whose object ID, user name, old or new values match the search string.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   maxChangeTime: JString
  ##                : Select only change logs whose change time is before the specified maxChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
  ##   ids: JArray
  ##      : Select only change logs with these IDs.
  ##   objectType: JString
  ##             : Select only change logs with the specified object type.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   objectIds: JArray
  ##            : Select only change logs with these object IDs.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   userProfileIds: JArray
  ##                 : Select only change logs with these user profile IDs.
  section = newJObject()
  var valid_589843 = query.getOrDefault("action")
  valid_589843 = validateParameter(valid_589843, JString, required = false,
                                 default = newJString("ACTION_ADD"))
  if valid_589843 != nil:
    section.add "action", valid_589843
  var valid_589844 = query.getOrDefault("fields")
  valid_589844 = validateParameter(valid_589844, JString, required = false,
                                 default = nil)
  if valid_589844 != nil:
    section.add "fields", valid_589844
  var valid_589845 = query.getOrDefault("pageToken")
  valid_589845 = validateParameter(valid_589845, JString, required = false,
                                 default = nil)
  if valid_589845 != nil:
    section.add "pageToken", valid_589845
  var valid_589846 = query.getOrDefault("quotaUser")
  valid_589846 = validateParameter(valid_589846, JString, required = false,
                                 default = nil)
  if valid_589846 != nil:
    section.add "quotaUser", valid_589846
  var valid_589847 = query.getOrDefault("minChangeTime")
  valid_589847 = validateParameter(valid_589847, JString, required = false,
                                 default = nil)
  if valid_589847 != nil:
    section.add "minChangeTime", valid_589847
  var valid_589848 = query.getOrDefault("alt")
  valid_589848 = validateParameter(valid_589848, JString, required = false,
                                 default = newJString("json"))
  if valid_589848 != nil:
    section.add "alt", valid_589848
  var valid_589849 = query.getOrDefault("searchString")
  valid_589849 = validateParameter(valid_589849, JString, required = false,
                                 default = nil)
  if valid_589849 != nil:
    section.add "searchString", valid_589849
  var valid_589850 = query.getOrDefault("oauth_token")
  valid_589850 = validateParameter(valid_589850, JString, required = false,
                                 default = nil)
  if valid_589850 != nil:
    section.add "oauth_token", valid_589850
  var valid_589851 = query.getOrDefault("userIp")
  valid_589851 = validateParameter(valid_589851, JString, required = false,
                                 default = nil)
  if valid_589851 != nil:
    section.add "userIp", valid_589851
  var valid_589852 = query.getOrDefault("maxResults")
  valid_589852 = validateParameter(valid_589852, JInt, required = false,
                                 default = newJInt(1000))
  if valid_589852 != nil:
    section.add "maxResults", valid_589852
  var valid_589853 = query.getOrDefault("maxChangeTime")
  valid_589853 = validateParameter(valid_589853, JString, required = false,
                                 default = nil)
  if valid_589853 != nil:
    section.add "maxChangeTime", valid_589853
  var valid_589854 = query.getOrDefault("ids")
  valid_589854 = validateParameter(valid_589854, JArray, required = false,
                                 default = nil)
  if valid_589854 != nil:
    section.add "ids", valid_589854
  var valid_589855 = query.getOrDefault("objectType")
  valid_589855 = validateParameter(valid_589855, JString, required = false,
                                 default = newJString("OBJECT_ACCOUNT"))
  if valid_589855 != nil:
    section.add "objectType", valid_589855
  var valid_589856 = query.getOrDefault("key")
  valid_589856 = validateParameter(valid_589856, JString, required = false,
                                 default = nil)
  if valid_589856 != nil:
    section.add "key", valid_589856
  var valid_589857 = query.getOrDefault("objectIds")
  valid_589857 = validateParameter(valid_589857, JArray, required = false,
                                 default = nil)
  if valid_589857 != nil:
    section.add "objectIds", valid_589857
  var valid_589858 = query.getOrDefault("prettyPrint")
  valid_589858 = validateParameter(valid_589858, JBool, required = false,
                                 default = newJBool(true))
  if valid_589858 != nil:
    section.add "prettyPrint", valid_589858
  var valid_589859 = query.getOrDefault("userProfileIds")
  valid_589859 = validateParameter(valid_589859, JArray, required = false,
                                 default = nil)
  if valid_589859 != nil:
    section.add "userProfileIds", valid_589859
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589860: Call_DfareportingChangeLogsList_589839; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of change logs. This method supports paging.
  ## 
  let valid = call_589860.validator(path, query, header, formData, body)
  let scheme = call_589860.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589860.url(scheme.get, call_589860.host, call_589860.base,
                         call_589860.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589860, url, valid)

proc call*(call_589861: Call_DfareportingChangeLogsList_589839; profileId: string;
          action: string = "ACTION_ADD"; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; minChangeTime: string = ""; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; maxChangeTime: string = ""; ids: JsonNode = nil;
          objectType: string = "OBJECT_ACCOUNT"; key: string = "";
          objectIds: JsonNode = nil; prettyPrint: bool = true;
          userProfileIds: JsonNode = nil): Recallable =
  ## dfareportingChangeLogsList
  ## Retrieves a list of change logs. This method supports paging.
  ##   action: string
  ##         : Select only change logs with the specified action.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   minChangeTime: string
  ##                : Select only change logs whose change time is before the specified minChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Select only change logs whose object ID, user name, old or new values match the search string.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   maxChangeTime: string
  ##                : Select only change logs whose change time is before the specified maxChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
  ##   ids: JArray
  ##      : Select only change logs with these IDs.
  ##   objectType: string
  ##             : Select only change logs with the specified object type.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   objectIds: JArray
  ##            : Select only change logs with these object IDs.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   userProfileIds: JArray
  ##                 : Select only change logs with these user profile IDs.
  var path_589862 = newJObject()
  var query_589863 = newJObject()
  add(query_589863, "action", newJString(action))
  add(path_589862, "profileId", newJString(profileId))
  add(query_589863, "fields", newJString(fields))
  add(query_589863, "pageToken", newJString(pageToken))
  add(query_589863, "quotaUser", newJString(quotaUser))
  add(query_589863, "minChangeTime", newJString(minChangeTime))
  add(query_589863, "alt", newJString(alt))
  add(query_589863, "searchString", newJString(searchString))
  add(query_589863, "oauth_token", newJString(oauthToken))
  add(query_589863, "userIp", newJString(userIp))
  add(query_589863, "maxResults", newJInt(maxResults))
  add(query_589863, "maxChangeTime", newJString(maxChangeTime))
  if ids != nil:
    query_589863.add "ids", ids
  add(query_589863, "objectType", newJString(objectType))
  add(query_589863, "key", newJString(key))
  if objectIds != nil:
    query_589863.add "objectIds", objectIds
  add(query_589863, "prettyPrint", newJBool(prettyPrint))
  if userProfileIds != nil:
    query_589863.add "userProfileIds", userProfileIds
  result = call_589861.call(path_589862, query_589863, nil, nil, nil)

var dfareportingChangeLogsList* = Call_DfareportingChangeLogsList_589839(
    name: "dfareportingChangeLogsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/changeLogs",
    validator: validate_DfareportingChangeLogsList_589840,
    base: "/dfareporting/v3.2", url: url_DfareportingChangeLogsList_589841,
    schemes: {Scheme.Https})
type
  Call_DfareportingChangeLogsGet_589864 = ref object of OpenApiRestCall_588466
proc url_DfareportingChangeLogsGet_589866(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/changeLogs/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingChangeLogsGet_589865(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one change log by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Change log ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589867 = path.getOrDefault("profileId")
  valid_589867 = validateParameter(valid_589867, JString, required = true,
                                 default = nil)
  if valid_589867 != nil:
    section.add "profileId", valid_589867
  var valid_589868 = path.getOrDefault("id")
  valid_589868 = validateParameter(valid_589868, JString, required = true,
                                 default = nil)
  if valid_589868 != nil:
    section.add "id", valid_589868
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589869 = query.getOrDefault("fields")
  valid_589869 = validateParameter(valid_589869, JString, required = false,
                                 default = nil)
  if valid_589869 != nil:
    section.add "fields", valid_589869
  var valid_589870 = query.getOrDefault("quotaUser")
  valid_589870 = validateParameter(valid_589870, JString, required = false,
                                 default = nil)
  if valid_589870 != nil:
    section.add "quotaUser", valid_589870
  var valid_589871 = query.getOrDefault("alt")
  valid_589871 = validateParameter(valid_589871, JString, required = false,
                                 default = newJString("json"))
  if valid_589871 != nil:
    section.add "alt", valid_589871
  var valid_589872 = query.getOrDefault("oauth_token")
  valid_589872 = validateParameter(valid_589872, JString, required = false,
                                 default = nil)
  if valid_589872 != nil:
    section.add "oauth_token", valid_589872
  var valid_589873 = query.getOrDefault("userIp")
  valid_589873 = validateParameter(valid_589873, JString, required = false,
                                 default = nil)
  if valid_589873 != nil:
    section.add "userIp", valid_589873
  var valid_589874 = query.getOrDefault("key")
  valid_589874 = validateParameter(valid_589874, JString, required = false,
                                 default = nil)
  if valid_589874 != nil:
    section.add "key", valid_589874
  var valid_589875 = query.getOrDefault("prettyPrint")
  valid_589875 = validateParameter(valid_589875, JBool, required = false,
                                 default = newJBool(true))
  if valid_589875 != nil:
    section.add "prettyPrint", valid_589875
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589876: Call_DfareportingChangeLogsGet_589864; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one change log by ID.
  ## 
  let valid = call_589876.validator(path, query, header, formData, body)
  let scheme = call_589876.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589876.url(scheme.get, call_589876.host, call_589876.base,
                         call_589876.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589876, url, valid)

proc call*(call_589877: Call_DfareportingChangeLogsGet_589864; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingChangeLogsGet
  ## Gets one change log by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Change log ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589878 = newJObject()
  var query_589879 = newJObject()
  add(path_589878, "profileId", newJString(profileId))
  add(query_589879, "fields", newJString(fields))
  add(query_589879, "quotaUser", newJString(quotaUser))
  add(query_589879, "alt", newJString(alt))
  add(query_589879, "oauth_token", newJString(oauthToken))
  add(query_589879, "userIp", newJString(userIp))
  add(path_589878, "id", newJString(id))
  add(query_589879, "key", newJString(key))
  add(query_589879, "prettyPrint", newJBool(prettyPrint))
  result = call_589877.call(path_589878, query_589879, nil, nil, nil)

var dfareportingChangeLogsGet* = Call_DfareportingChangeLogsGet_589864(
    name: "dfareportingChangeLogsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/changeLogs/{id}",
    validator: validate_DfareportingChangeLogsGet_589865,
    base: "/dfareporting/v3.2", url: url_DfareportingChangeLogsGet_589866,
    schemes: {Scheme.Https})
type
  Call_DfareportingCitiesList_589880 = ref object of OpenApiRestCall_588466
proc url_DfareportingCitiesList_589882(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/cities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCitiesList_589881(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of cities, possibly filtered.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589883 = path.getOrDefault("profileId")
  valid_589883 = validateParameter(valid_589883, JString, required = true,
                                 default = nil)
  if valid_589883 != nil:
    section.add "profileId", valid_589883
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   namePrefix: JString
  ##             : Select only cities with names starting with this prefix.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   countryDartIds: JArray
  ##                 : Select only cities from these countries.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   regionDartIds: JArray
  ##                : Select only cities from these regions.
  ##   dartIds: JArray
  ##          : Select only cities with these DART IDs.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589884 = query.getOrDefault("fields")
  valid_589884 = validateParameter(valid_589884, JString, required = false,
                                 default = nil)
  if valid_589884 != nil:
    section.add "fields", valid_589884
  var valid_589885 = query.getOrDefault("quotaUser")
  valid_589885 = validateParameter(valid_589885, JString, required = false,
                                 default = nil)
  if valid_589885 != nil:
    section.add "quotaUser", valid_589885
  var valid_589886 = query.getOrDefault("alt")
  valid_589886 = validateParameter(valid_589886, JString, required = false,
                                 default = newJString("json"))
  if valid_589886 != nil:
    section.add "alt", valid_589886
  var valid_589887 = query.getOrDefault("namePrefix")
  valid_589887 = validateParameter(valid_589887, JString, required = false,
                                 default = nil)
  if valid_589887 != nil:
    section.add "namePrefix", valid_589887
  var valid_589888 = query.getOrDefault("oauth_token")
  valid_589888 = validateParameter(valid_589888, JString, required = false,
                                 default = nil)
  if valid_589888 != nil:
    section.add "oauth_token", valid_589888
  var valid_589889 = query.getOrDefault("userIp")
  valid_589889 = validateParameter(valid_589889, JString, required = false,
                                 default = nil)
  if valid_589889 != nil:
    section.add "userIp", valid_589889
  var valid_589890 = query.getOrDefault("countryDartIds")
  valid_589890 = validateParameter(valid_589890, JArray, required = false,
                                 default = nil)
  if valid_589890 != nil:
    section.add "countryDartIds", valid_589890
  var valid_589891 = query.getOrDefault("key")
  valid_589891 = validateParameter(valid_589891, JString, required = false,
                                 default = nil)
  if valid_589891 != nil:
    section.add "key", valid_589891
  var valid_589892 = query.getOrDefault("regionDartIds")
  valid_589892 = validateParameter(valid_589892, JArray, required = false,
                                 default = nil)
  if valid_589892 != nil:
    section.add "regionDartIds", valid_589892
  var valid_589893 = query.getOrDefault("dartIds")
  valid_589893 = validateParameter(valid_589893, JArray, required = false,
                                 default = nil)
  if valid_589893 != nil:
    section.add "dartIds", valid_589893
  var valid_589894 = query.getOrDefault("prettyPrint")
  valid_589894 = validateParameter(valid_589894, JBool, required = false,
                                 default = newJBool(true))
  if valid_589894 != nil:
    section.add "prettyPrint", valid_589894
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589895: Call_DfareportingCitiesList_589880; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of cities, possibly filtered.
  ## 
  let valid = call_589895.validator(path, query, header, formData, body)
  let scheme = call_589895.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589895.url(scheme.get, call_589895.host, call_589895.base,
                         call_589895.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589895, url, valid)

proc call*(call_589896: Call_DfareportingCitiesList_589880; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          namePrefix: string = ""; oauthToken: string = ""; userIp: string = "";
          countryDartIds: JsonNode = nil; key: string = "";
          regionDartIds: JsonNode = nil; dartIds: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingCitiesList
  ## Retrieves a list of cities, possibly filtered.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   namePrefix: string
  ##             : Select only cities with names starting with this prefix.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   countryDartIds: JArray
  ##                 : Select only cities from these countries.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   regionDartIds: JArray
  ##                : Select only cities from these regions.
  ##   dartIds: JArray
  ##          : Select only cities with these DART IDs.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589897 = newJObject()
  var query_589898 = newJObject()
  add(path_589897, "profileId", newJString(profileId))
  add(query_589898, "fields", newJString(fields))
  add(query_589898, "quotaUser", newJString(quotaUser))
  add(query_589898, "alt", newJString(alt))
  add(query_589898, "namePrefix", newJString(namePrefix))
  add(query_589898, "oauth_token", newJString(oauthToken))
  add(query_589898, "userIp", newJString(userIp))
  if countryDartIds != nil:
    query_589898.add "countryDartIds", countryDartIds
  add(query_589898, "key", newJString(key))
  if regionDartIds != nil:
    query_589898.add "regionDartIds", regionDartIds
  if dartIds != nil:
    query_589898.add "dartIds", dartIds
  add(query_589898, "prettyPrint", newJBool(prettyPrint))
  result = call_589896.call(path_589897, query_589898, nil, nil, nil)

var dfareportingCitiesList* = Call_DfareportingCitiesList_589880(
    name: "dfareportingCitiesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/cities",
    validator: validate_DfareportingCitiesList_589881, base: "/dfareporting/v3.2",
    url: url_DfareportingCitiesList_589882, schemes: {Scheme.Https})
type
  Call_DfareportingConnectionTypesList_589899 = ref object of OpenApiRestCall_588466
proc url_DfareportingConnectionTypesList_589901(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/connectionTypes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingConnectionTypesList_589900(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of connection types.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589902 = path.getOrDefault("profileId")
  valid_589902 = validateParameter(valid_589902, JString, required = true,
                                 default = nil)
  if valid_589902 != nil:
    section.add "profileId", valid_589902
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589903 = query.getOrDefault("fields")
  valid_589903 = validateParameter(valid_589903, JString, required = false,
                                 default = nil)
  if valid_589903 != nil:
    section.add "fields", valid_589903
  var valid_589904 = query.getOrDefault("quotaUser")
  valid_589904 = validateParameter(valid_589904, JString, required = false,
                                 default = nil)
  if valid_589904 != nil:
    section.add "quotaUser", valid_589904
  var valid_589905 = query.getOrDefault("alt")
  valid_589905 = validateParameter(valid_589905, JString, required = false,
                                 default = newJString("json"))
  if valid_589905 != nil:
    section.add "alt", valid_589905
  var valid_589906 = query.getOrDefault("oauth_token")
  valid_589906 = validateParameter(valid_589906, JString, required = false,
                                 default = nil)
  if valid_589906 != nil:
    section.add "oauth_token", valid_589906
  var valid_589907 = query.getOrDefault("userIp")
  valid_589907 = validateParameter(valid_589907, JString, required = false,
                                 default = nil)
  if valid_589907 != nil:
    section.add "userIp", valid_589907
  var valid_589908 = query.getOrDefault("key")
  valid_589908 = validateParameter(valid_589908, JString, required = false,
                                 default = nil)
  if valid_589908 != nil:
    section.add "key", valid_589908
  var valid_589909 = query.getOrDefault("prettyPrint")
  valid_589909 = validateParameter(valid_589909, JBool, required = false,
                                 default = newJBool(true))
  if valid_589909 != nil:
    section.add "prettyPrint", valid_589909
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589910: Call_DfareportingConnectionTypesList_589899;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of connection types.
  ## 
  let valid = call_589910.validator(path, query, header, formData, body)
  let scheme = call_589910.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589910.url(scheme.get, call_589910.host, call_589910.base,
                         call_589910.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589910, url, valid)

proc call*(call_589911: Call_DfareportingConnectionTypesList_589899;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingConnectionTypesList
  ## Retrieves a list of connection types.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589912 = newJObject()
  var query_589913 = newJObject()
  add(path_589912, "profileId", newJString(profileId))
  add(query_589913, "fields", newJString(fields))
  add(query_589913, "quotaUser", newJString(quotaUser))
  add(query_589913, "alt", newJString(alt))
  add(query_589913, "oauth_token", newJString(oauthToken))
  add(query_589913, "userIp", newJString(userIp))
  add(query_589913, "key", newJString(key))
  add(query_589913, "prettyPrint", newJBool(prettyPrint))
  result = call_589911.call(path_589912, query_589913, nil, nil, nil)

var dfareportingConnectionTypesList* = Call_DfareportingConnectionTypesList_589899(
    name: "dfareportingConnectionTypesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/connectionTypes",
    validator: validate_DfareportingConnectionTypesList_589900,
    base: "/dfareporting/v3.2", url: url_DfareportingConnectionTypesList_589901,
    schemes: {Scheme.Https})
type
  Call_DfareportingConnectionTypesGet_589914 = ref object of OpenApiRestCall_588466
proc url_DfareportingConnectionTypesGet_589916(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/connectionTypes/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingConnectionTypesGet_589915(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one connection type by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Connection type ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589917 = path.getOrDefault("profileId")
  valid_589917 = validateParameter(valid_589917, JString, required = true,
                                 default = nil)
  if valid_589917 != nil:
    section.add "profileId", valid_589917
  var valid_589918 = path.getOrDefault("id")
  valid_589918 = validateParameter(valid_589918, JString, required = true,
                                 default = nil)
  if valid_589918 != nil:
    section.add "id", valid_589918
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589919 = query.getOrDefault("fields")
  valid_589919 = validateParameter(valid_589919, JString, required = false,
                                 default = nil)
  if valid_589919 != nil:
    section.add "fields", valid_589919
  var valid_589920 = query.getOrDefault("quotaUser")
  valid_589920 = validateParameter(valid_589920, JString, required = false,
                                 default = nil)
  if valid_589920 != nil:
    section.add "quotaUser", valid_589920
  var valid_589921 = query.getOrDefault("alt")
  valid_589921 = validateParameter(valid_589921, JString, required = false,
                                 default = newJString("json"))
  if valid_589921 != nil:
    section.add "alt", valid_589921
  var valid_589922 = query.getOrDefault("oauth_token")
  valid_589922 = validateParameter(valid_589922, JString, required = false,
                                 default = nil)
  if valid_589922 != nil:
    section.add "oauth_token", valid_589922
  var valid_589923 = query.getOrDefault("userIp")
  valid_589923 = validateParameter(valid_589923, JString, required = false,
                                 default = nil)
  if valid_589923 != nil:
    section.add "userIp", valid_589923
  var valid_589924 = query.getOrDefault("key")
  valid_589924 = validateParameter(valid_589924, JString, required = false,
                                 default = nil)
  if valid_589924 != nil:
    section.add "key", valid_589924
  var valid_589925 = query.getOrDefault("prettyPrint")
  valid_589925 = validateParameter(valid_589925, JBool, required = false,
                                 default = newJBool(true))
  if valid_589925 != nil:
    section.add "prettyPrint", valid_589925
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589926: Call_DfareportingConnectionTypesGet_589914; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one connection type by ID.
  ## 
  let valid = call_589926.validator(path, query, header, formData, body)
  let scheme = call_589926.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589926.url(scheme.get, call_589926.host, call_589926.base,
                         call_589926.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589926, url, valid)

proc call*(call_589927: Call_DfareportingConnectionTypesGet_589914;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingConnectionTypesGet
  ## Gets one connection type by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Connection type ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589928 = newJObject()
  var query_589929 = newJObject()
  add(path_589928, "profileId", newJString(profileId))
  add(query_589929, "fields", newJString(fields))
  add(query_589929, "quotaUser", newJString(quotaUser))
  add(query_589929, "alt", newJString(alt))
  add(query_589929, "oauth_token", newJString(oauthToken))
  add(query_589929, "userIp", newJString(userIp))
  add(path_589928, "id", newJString(id))
  add(query_589929, "key", newJString(key))
  add(query_589929, "prettyPrint", newJBool(prettyPrint))
  result = call_589927.call(path_589928, query_589929, nil, nil, nil)

var dfareportingConnectionTypesGet* = Call_DfareportingConnectionTypesGet_589914(
    name: "dfareportingConnectionTypesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/connectionTypes/{id}",
    validator: validate_DfareportingConnectionTypesGet_589915,
    base: "/dfareporting/v3.2", url: url_DfareportingConnectionTypesGet_589916,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesUpdate_589951 = ref object of OpenApiRestCall_588466
proc url_DfareportingContentCategoriesUpdate_589953(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesUpdate_589952(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing content category.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589954 = path.getOrDefault("profileId")
  valid_589954 = validateParameter(valid_589954, JString, required = true,
                                 default = nil)
  if valid_589954 != nil:
    section.add "profileId", valid_589954
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589955 = query.getOrDefault("fields")
  valid_589955 = validateParameter(valid_589955, JString, required = false,
                                 default = nil)
  if valid_589955 != nil:
    section.add "fields", valid_589955
  var valid_589956 = query.getOrDefault("quotaUser")
  valid_589956 = validateParameter(valid_589956, JString, required = false,
                                 default = nil)
  if valid_589956 != nil:
    section.add "quotaUser", valid_589956
  var valid_589957 = query.getOrDefault("alt")
  valid_589957 = validateParameter(valid_589957, JString, required = false,
                                 default = newJString("json"))
  if valid_589957 != nil:
    section.add "alt", valid_589957
  var valid_589958 = query.getOrDefault("oauth_token")
  valid_589958 = validateParameter(valid_589958, JString, required = false,
                                 default = nil)
  if valid_589958 != nil:
    section.add "oauth_token", valid_589958
  var valid_589959 = query.getOrDefault("userIp")
  valid_589959 = validateParameter(valid_589959, JString, required = false,
                                 default = nil)
  if valid_589959 != nil:
    section.add "userIp", valid_589959
  var valid_589960 = query.getOrDefault("key")
  valid_589960 = validateParameter(valid_589960, JString, required = false,
                                 default = nil)
  if valid_589960 != nil:
    section.add "key", valid_589960
  var valid_589961 = query.getOrDefault("prettyPrint")
  valid_589961 = validateParameter(valid_589961, JBool, required = false,
                                 default = newJBool(true))
  if valid_589961 != nil:
    section.add "prettyPrint", valid_589961
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589963: Call_DfareportingContentCategoriesUpdate_589951;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing content category.
  ## 
  let valid = call_589963.validator(path, query, header, formData, body)
  let scheme = call_589963.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589963.url(scheme.get, call_589963.host, call_589963.base,
                         call_589963.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589963, url, valid)

proc call*(call_589964: Call_DfareportingContentCategoriesUpdate_589951;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingContentCategoriesUpdate
  ## Updates an existing content category.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589965 = newJObject()
  var query_589966 = newJObject()
  var body_589967 = newJObject()
  add(path_589965, "profileId", newJString(profileId))
  add(query_589966, "fields", newJString(fields))
  add(query_589966, "quotaUser", newJString(quotaUser))
  add(query_589966, "alt", newJString(alt))
  add(query_589966, "oauth_token", newJString(oauthToken))
  add(query_589966, "userIp", newJString(userIp))
  add(query_589966, "key", newJString(key))
  if body != nil:
    body_589967 = body
  add(query_589966, "prettyPrint", newJBool(prettyPrint))
  result = call_589964.call(path_589965, query_589966, nil, nil, body_589967)

var dfareportingContentCategoriesUpdate* = Call_DfareportingContentCategoriesUpdate_589951(
    name: "dfareportingContentCategoriesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories",
    validator: validate_DfareportingContentCategoriesUpdate_589952,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesUpdate_589953,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesInsert_589968 = ref object of OpenApiRestCall_588466
proc url_DfareportingContentCategoriesInsert_589970(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesInsert_589969(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new content category.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589971 = path.getOrDefault("profileId")
  valid_589971 = validateParameter(valid_589971, JString, required = true,
                                 default = nil)
  if valid_589971 != nil:
    section.add "profileId", valid_589971
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589972 = query.getOrDefault("fields")
  valid_589972 = validateParameter(valid_589972, JString, required = false,
                                 default = nil)
  if valid_589972 != nil:
    section.add "fields", valid_589972
  var valid_589973 = query.getOrDefault("quotaUser")
  valid_589973 = validateParameter(valid_589973, JString, required = false,
                                 default = nil)
  if valid_589973 != nil:
    section.add "quotaUser", valid_589973
  var valid_589974 = query.getOrDefault("alt")
  valid_589974 = validateParameter(valid_589974, JString, required = false,
                                 default = newJString("json"))
  if valid_589974 != nil:
    section.add "alt", valid_589974
  var valid_589975 = query.getOrDefault("oauth_token")
  valid_589975 = validateParameter(valid_589975, JString, required = false,
                                 default = nil)
  if valid_589975 != nil:
    section.add "oauth_token", valid_589975
  var valid_589976 = query.getOrDefault("userIp")
  valid_589976 = validateParameter(valid_589976, JString, required = false,
                                 default = nil)
  if valid_589976 != nil:
    section.add "userIp", valid_589976
  var valid_589977 = query.getOrDefault("key")
  valid_589977 = validateParameter(valid_589977, JString, required = false,
                                 default = nil)
  if valid_589977 != nil:
    section.add "key", valid_589977
  var valid_589978 = query.getOrDefault("prettyPrint")
  valid_589978 = validateParameter(valid_589978, JBool, required = false,
                                 default = newJBool(true))
  if valid_589978 != nil:
    section.add "prettyPrint", valid_589978
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589980: Call_DfareportingContentCategoriesInsert_589968;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new content category.
  ## 
  let valid = call_589980.validator(path, query, header, formData, body)
  let scheme = call_589980.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589980.url(scheme.get, call_589980.host, call_589980.base,
                         call_589980.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589980, url, valid)

proc call*(call_589981: Call_DfareportingContentCategoriesInsert_589968;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingContentCategoriesInsert
  ## Inserts a new content category.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589982 = newJObject()
  var query_589983 = newJObject()
  var body_589984 = newJObject()
  add(path_589982, "profileId", newJString(profileId))
  add(query_589983, "fields", newJString(fields))
  add(query_589983, "quotaUser", newJString(quotaUser))
  add(query_589983, "alt", newJString(alt))
  add(query_589983, "oauth_token", newJString(oauthToken))
  add(query_589983, "userIp", newJString(userIp))
  add(query_589983, "key", newJString(key))
  if body != nil:
    body_589984 = body
  add(query_589983, "prettyPrint", newJBool(prettyPrint))
  result = call_589981.call(path_589982, query_589983, nil, nil, body_589984)

var dfareportingContentCategoriesInsert* = Call_DfareportingContentCategoriesInsert_589968(
    name: "dfareportingContentCategoriesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories",
    validator: validate_DfareportingContentCategoriesInsert_589969,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesInsert_589970,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesList_589930 = ref object of OpenApiRestCall_588466
proc url_DfareportingContentCategoriesList_589932(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesList_589931(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of content categories, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589933 = path.getOrDefault("profileId")
  valid_589933 = validateParameter(valid_589933, JString, required = true,
                                 default = nil)
  if valid_589933 != nil:
    section.add "profileId", valid_589933
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "contentcategory*2015" will return objects with names like "contentcategory June 2015", "contentcategory April 2015", or simply "contentcategory 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "contentcategory" will match objects with name "my contentcategory", "contentcategory 2015", or simply "contentcategory".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only content categories with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589934 = query.getOrDefault("fields")
  valid_589934 = validateParameter(valid_589934, JString, required = false,
                                 default = nil)
  if valid_589934 != nil:
    section.add "fields", valid_589934
  var valid_589935 = query.getOrDefault("pageToken")
  valid_589935 = validateParameter(valid_589935, JString, required = false,
                                 default = nil)
  if valid_589935 != nil:
    section.add "pageToken", valid_589935
  var valid_589936 = query.getOrDefault("quotaUser")
  valid_589936 = validateParameter(valid_589936, JString, required = false,
                                 default = nil)
  if valid_589936 != nil:
    section.add "quotaUser", valid_589936
  var valid_589937 = query.getOrDefault("sortField")
  valid_589937 = validateParameter(valid_589937, JString, required = false,
                                 default = newJString("ID"))
  if valid_589937 != nil:
    section.add "sortField", valid_589937
  var valid_589938 = query.getOrDefault("alt")
  valid_589938 = validateParameter(valid_589938, JString, required = false,
                                 default = newJString("json"))
  if valid_589938 != nil:
    section.add "alt", valid_589938
  var valid_589939 = query.getOrDefault("searchString")
  valid_589939 = validateParameter(valid_589939, JString, required = false,
                                 default = nil)
  if valid_589939 != nil:
    section.add "searchString", valid_589939
  var valid_589940 = query.getOrDefault("oauth_token")
  valid_589940 = validateParameter(valid_589940, JString, required = false,
                                 default = nil)
  if valid_589940 != nil:
    section.add "oauth_token", valid_589940
  var valid_589941 = query.getOrDefault("userIp")
  valid_589941 = validateParameter(valid_589941, JString, required = false,
                                 default = nil)
  if valid_589941 != nil:
    section.add "userIp", valid_589941
  var valid_589942 = query.getOrDefault("maxResults")
  valid_589942 = validateParameter(valid_589942, JInt, required = false,
                                 default = newJInt(1000))
  if valid_589942 != nil:
    section.add "maxResults", valid_589942
  var valid_589943 = query.getOrDefault("ids")
  valid_589943 = validateParameter(valid_589943, JArray, required = false,
                                 default = nil)
  if valid_589943 != nil:
    section.add "ids", valid_589943
  var valid_589944 = query.getOrDefault("key")
  valid_589944 = validateParameter(valid_589944, JString, required = false,
                                 default = nil)
  if valid_589944 != nil:
    section.add "key", valid_589944
  var valid_589945 = query.getOrDefault("sortOrder")
  valid_589945 = validateParameter(valid_589945, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_589945 != nil:
    section.add "sortOrder", valid_589945
  var valid_589946 = query.getOrDefault("prettyPrint")
  valid_589946 = validateParameter(valid_589946, JBool, required = false,
                                 default = newJBool(true))
  if valid_589946 != nil:
    section.add "prettyPrint", valid_589946
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_589947: Call_DfareportingContentCategoriesList_589930;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of content categories, possibly filtered. This method supports paging.
  ## 
  let valid = call_589947.validator(path, query, header, formData, body)
  let scheme = call_589947.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589947.url(scheme.get, call_589947.host, call_589947.base,
                         call_589947.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589947, url, valid)

proc call*(call_589948: Call_DfareportingContentCategoriesList_589930;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingContentCategoriesList
  ## Retrieves a list of content categories, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "contentcategory*2015" will return objects with names like "contentcategory June 2015", "contentcategory April 2015", or simply "contentcategory 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "contentcategory" will match objects with name "my contentcategory", "contentcategory 2015", or simply "contentcategory".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only content categories with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_589949 = newJObject()
  var query_589950 = newJObject()
  add(path_589949, "profileId", newJString(profileId))
  add(query_589950, "fields", newJString(fields))
  add(query_589950, "pageToken", newJString(pageToken))
  add(query_589950, "quotaUser", newJString(quotaUser))
  add(query_589950, "sortField", newJString(sortField))
  add(query_589950, "alt", newJString(alt))
  add(query_589950, "searchString", newJString(searchString))
  add(query_589950, "oauth_token", newJString(oauthToken))
  add(query_589950, "userIp", newJString(userIp))
  add(query_589950, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_589950.add "ids", ids
  add(query_589950, "key", newJString(key))
  add(query_589950, "sortOrder", newJString(sortOrder))
  add(query_589950, "prettyPrint", newJBool(prettyPrint))
  result = call_589948.call(path_589949, query_589950, nil, nil, nil)

var dfareportingContentCategoriesList* = Call_DfareportingContentCategoriesList_589930(
    name: "dfareportingContentCategoriesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories",
    validator: validate_DfareportingContentCategoriesList_589931,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesList_589932,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesPatch_589985 = ref object of OpenApiRestCall_588466
proc url_DfareportingContentCategoriesPatch_589987(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesPatch_589986(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing content category. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_589988 = path.getOrDefault("profileId")
  valid_589988 = validateParameter(valid_589988, JString, required = true,
                                 default = nil)
  if valid_589988 != nil:
    section.add "profileId", valid_589988
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Content category ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_589989 = query.getOrDefault("fields")
  valid_589989 = validateParameter(valid_589989, JString, required = false,
                                 default = nil)
  if valid_589989 != nil:
    section.add "fields", valid_589989
  var valid_589990 = query.getOrDefault("quotaUser")
  valid_589990 = validateParameter(valid_589990, JString, required = false,
                                 default = nil)
  if valid_589990 != nil:
    section.add "quotaUser", valid_589990
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_589991 = query.getOrDefault("id")
  valid_589991 = validateParameter(valid_589991, JString, required = true,
                                 default = nil)
  if valid_589991 != nil:
    section.add "id", valid_589991
  var valid_589992 = query.getOrDefault("alt")
  valid_589992 = validateParameter(valid_589992, JString, required = false,
                                 default = newJString("json"))
  if valid_589992 != nil:
    section.add "alt", valid_589992
  var valid_589993 = query.getOrDefault("oauth_token")
  valid_589993 = validateParameter(valid_589993, JString, required = false,
                                 default = nil)
  if valid_589993 != nil:
    section.add "oauth_token", valid_589993
  var valid_589994 = query.getOrDefault("userIp")
  valid_589994 = validateParameter(valid_589994, JString, required = false,
                                 default = nil)
  if valid_589994 != nil:
    section.add "userIp", valid_589994
  var valid_589995 = query.getOrDefault("key")
  valid_589995 = validateParameter(valid_589995, JString, required = false,
                                 default = nil)
  if valid_589995 != nil:
    section.add "key", valid_589995
  var valid_589996 = query.getOrDefault("prettyPrint")
  valid_589996 = validateParameter(valid_589996, JBool, required = false,
                                 default = newJBool(true))
  if valid_589996 != nil:
    section.add "prettyPrint", valid_589996
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_589998: Call_DfareportingContentCategoriesPatch_589985;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing content category. This method supports patch semantics.
  ## 
  let valid = call_589998.validator(path, query, header, formData, body)
  let scheme = call_589998.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_589998.url(scheme.get, call_589998.host, call_589998.base,
                         call_589998.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_589998, url, valid)

proc call*(call_589999: Call_DfareportingContentCategoriesPatch_589985;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingContentCategoriesPatch
  ## Updates an existing content category. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Content category ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590000 = newJObject()
  var query_590001 = newJObject()
  var body_590002 = newJObject()
  add(path_590000, "profileId", newJString(profileId))
  add(query_590001, "fields", newJString(fields))
  add(query_590001, "quotaUser", newJString(quotaUser))
  add(query_590001, "id", newJString(id))
  add(query_590001, "alt", newJString(alt))
  add(query_590001, "oauth_token", newJString(oauthToken))
  add(query_590001, "userIp", newJString(userIp))
  add(query_590001, "key", newJString(key))
  if body != nil:
    body_590002 = body
  add(query_590001, "prettyPrint", newJBool(prettyPrint))
  result = call_589999.call(path_590000, query_590001, nil, nil, body_590002)

var dfareportingContentCategoriesPatch* = Call_DfareportingContentCategoriesPatch_589985(
    name: "dfareportingContentCategoriesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories",
    validator: validate_DfareportingContentCategoriesPatch_589986,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesPatch_589987,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesGet_590003 = ref object of OpenApiRestCall_588466
proc url_DfareportingContentCategoriesGet_590005(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesGet_590004(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one content category by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Content category ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590006 = path.getOrDefault("profileId")
  valid_590006 = validateParameter(valid_590006, JString, required = true,
                                 default = nil)
  if valid_590006 != nil:
    section.add "profileId", valid_590006
  var valid_590007 = path.getOrDefault("id")
  valid_590007 = validateParameter(valid_590007, JString, required = true,
                                 default = nil)
  if valid_590007 != nil:
    section.add "id", valid_590007
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590008 = query.getOrDefault("fields")
  valid_590008 = validateParameter(valid_590008, JString, required = false,
                                 default = nil)
  if valid_590008 != nil:
    section.add "fields", valid_590008
  var valid_590009 = query.getOrDefault("quotaUser")
  valid_590009 = validateParameter(valid_590009, JString, required = false,
                                 default = nil)
  if valid_590009 != nil:
    section.add "quotaUser", valid_590009
  var valid_590010 = query.getOrDefault("alt")
  valid_590010 = validateParameter(valid_590010, JString, required = false,
                                 default = newJString("json"))
  if valid_590010 != nil:
    section.add "alt", valid_590010
  var valid_590011 = query.getOrDefault("oauth_token")
  valid_590011 = validateParameter(valid_590011, JString, required = false,
                                 default = nil)
  if valid_590011 != nil:
    section.add "oauth_token", valid_590011
  var valid_590012 = query.getOrDefault("userIp")
  valid_590012 = validateParameter(valid_590012, JString, required = false,
                                 default = nil)
  if valid_590012 != nil:
    section.add "userIp", valid_590012
  var valid_590013 = query.getOrDefault("key")
  valid_590013 = validateParameter(valid_590013, JString, required = false,
                                 default = nil)
  if valid_590013 != nil:
    section.add "key", valid_590013
  var valid_590014 = query.getOrDefault("prettyPrint")
  valid_590014 = validateParameter(valid_590014, JBool, required = false,
                                 default = newJBool(true))
  if valid_590014 != nil:
    section.add "prettyPrint", valid_590014
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590015: Call_DfareportingContentCategoriesGet_590003;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one content category by ID.
  ## 
  let valid = call_590015.validator(path, query, header, formData, body)
  let scheme = call_590015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590015.url(scheme.get, call_590015.host, call_590015.base,
                         call_590015.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590015, url, valid)

proc call*(call_590016: Call_DfareportingContentCategoriesGet_590003;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingContentCategoriesGet
  ## Gets one content category by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Content category ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590017 = newJObject()
  var query_590018 = newJObject()
  add(path_590017, "profileId", newJString(profileId))
  add(query_590018, "fields", newJString(fields))
  add(query_590018, "quotaUser", newJString(quotaUser))
  add(query_590018, "alt", newJString(alt))
  add(query_590018, "oauth_token", newJString(oauthToken))
  add(query_590018, "userIp", newJString(userIp))
  add(path_590017, "id", newJString(id))
  add(query_590018, "key", newJString(key))
  add(query_590018, "prettyPrint", newJBool(prettyPrint))
  result = call_590016.call(path_590017, query_590018, nil, nil, nil)

var dfareportingContentCategoriesGet* = Call_DfareportingContentCategoriesGet_590003(
    name: "dfareportingContentCategoriesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories/{id}",
    validator: validate_DfareportingContentCategoriesGet_590004,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesGet_590005,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesDelete_590019 = ref object of OpenApiRestCall_588466
proc url_DfareportingContentCategoriesDelete_590021(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesDelete_590020(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing content category.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Content category ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590022 = path.getOrDefault("profileId")
  valid_590022 = validateParameter(valid_590022, JString, required = true,
                                 default = nil)
  if valid_590022 != nil:
    section.add "profileId", valid_590022
  var valid_590023 = path.getOrDefault("id")
  valid_590023 = validateParameter(valid_590023, JString, required = true,
                                 default = nil)
  if valid_590023 != nil:
    section.add "id", valid_590023
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590024 = query.getOrDefault("fields")
  valid_590024 = validateParameter(valid_590024, JString, required = false,
                                 default = nil)
  if valid_590024 != nil:
    section.add "fields", valid_590024
  var valid_590025 = query.getOrDefault("quotaUser")
  valid_590025 = validateParameter(valid_590025, JString, required = false,
                                 default = nil)
  if valid_590025 != nil:
    section.add "quotaUser", valid_590025
  var valid_590026 = query.getOrDefault("alt")
  valid_590026 = validateParameter(valid_590026, JString, required = false,
                                 default = newJString("json"))
  if valid_590026 != nil:
    section.add "alt", valid_590026
  var valid_590027 = query.getOrDefault("oauth_token")
  valid_590027 = validateParameter(valid_590027, JString, required = false,
                                 default = nil)
  if valid_590027 != nil:
    section.add "oauth_token", valid_590027
  var valid_590028 = query.getOrDefault("userIp")
  valid_590028 = validateParameter(valid_590028, JString, required = false,
                                 default = nil)
  if valid_590028 != nil:
    section.add "userIp", valid_590028
  var valid_590029 = query.getOrDefault("key")
  valid_590029 = validateParameter(valid_590029, JString, required = false,
                                 default = nil)
  if valid_590029 != nil:
    section.add "key", valid_590029
  var valid_590030 = query.getOrDefault("prettyPrint")
  valid_590030 = validateParameter(valid_590030, JBool, required = false,
                                 default = newJBool(true))
  if valid_590030 != nil:
    section.add "prettyPrint", valid_590030
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590031: Call_DfareportingContentCategoriesDelete_590019;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing content category.
  ## 
  let valid = call_590031.validator(path, query, header, formData, body)
  let scheme = call_590031.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590031.url(scheme.get, call_590031.host, call_590031.base,
                         call_590031.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590031, url, valid)

proc call*(call_590032: Call_DfareportingContentCategoriesDelete_590019;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingContentCategoriesDelete
  ## Deletes an existing content category.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Content category ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590033 = newJObject()
  var query_590034 = newJObject()
  add(path_590033, "profileId", newJString(profileId))
  add(query_590034, "fields", newJString(fields))
  add(query_590034, "quotaUser", newJString(quotaUser))
  add(query_590034, "alt", newJString(alt))
  add(query_590034, "oauth_token", newJString(oauthToken))
  add(query_590034, "userIp", newJString(userIp))
  add(path_590033, "id", newJString(id))
  add(query_590034, "key", newJString(key))
  add(query_590034, "prettyPrint", newJBool(prettyPrint))
  result = call_590032.call(path_590033, query_590034, nil, nil, nil)

var dfareportingContentCategoriesDelete* = Call_DfareportingContentCategoriesDelete_590019(
    name: "dfareportingContentCategoriesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories/{id}",
    validator: validate_DfareportingContentCategoriesDelete_590020,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesDelete_590021,
    schemes: {Scheme.Https})
type
  Call_DfareportingConversionsBatchinsert_590035 = ref object of OpenApiRestCall_588466
proc url_DfareportingConversionsBatchinsert_590037(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/conversions/batchinsert")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingConversionsBatchinsert_590036(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts conversions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590038 = path.getOrDefault("profileId")
  valid_590038 = validateParameter(valid_590038, JString, required = true,
                                 default = nil)
  if valid_590038 != nil:
    section.add "profileId", valid_590038
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590039 = query.getOrDefault("fields")
  valid_590039 = validateParameter(valid_590039, JString, required = false,
                                 default = nil)
  if valid_590039 != nil:
    section.add "fields", valid_590039
  var valid_590040 = query.getOrDefault("quotaUser")
  valid_590040 = validateParameter(valid_590040, JString, required = false,
                                 default = nil)
  if valid_590040 != nil:
    section.add "quotaUser", valid_590040
  var valid_590041 = query.getOrDefault("alt")
  valid_590041 = validateParameter(valid_590041, JString, required = false,
                                 default = newJString("json"))
  if valid_590041 != nil:
    section.add "alt", valid_590041
  var valid_590042 = query.getOrDefault("oauth_token")
  valid_590042 = validateParameter(valid_590042, JString, required = false,
                                 default = nil)
  if valid_590042 != nil:
    section.add "oauth_token", valid_590042
  var valid_590043 = query.getOrDefault("userIp")
  valid_590043 = validateParameter(valid_590043, JString, required = false,
                                 default = nil)
  if valid_590043 != nil:
    section.add "userIp", valid_590043
  var valid_590044 = query.getOrDefault("key")
  valid_590044 = validateParameter(valid_590044, JString, required = false,
                                 default = nil)
  if valid_590044 != nil:
    section.add "key", valid_590044
  var valid_590045 = query.getOrDefault("prettyPrint")
  valid_590045 = validateParameter(valid_590045, JBool, required = false,
                                 default = newJBool(true))
  if valid_590045 != nil:
    section.add "prettyPrint", valid_590045
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590047: Call_DfareportingConversionsBatchinsert_590035;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts conversions.
  ## 
  let valid = call_590047.validator(path, query, header, formData, body)
  let scheme = call_590047.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590047.url(scheme.get, call_590047.host, call_590047.base,
                         call_590047.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590047, url, valid)

proc call*(call_590048: Call_DfareportingConversionsBatchinsert_590035;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingConversionsBatchinsert
  ## Inserts conversions.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590049 = newJObject()
  var query_590050 = newJObject()
  var body_590051 = newJObject()
  add(path_590049, "profileId", newJString(profileId))
  add(query_590050, "fields", newJString(fields))
  add(query_590050, "quotaUser", newJString(quotaUser))
  add(query_590050, "alt", newJString(alt))
  add(query_590050, "oauth_token", newJString(oauthToken))
  add(query_590050, "userIp", newJString(userIp))
  add(query_590050, "key", newJString(key))
  if body != nil:
    body_590051 = body
  add(query_590050, "prettyPrint", newJBool(prettyPrint))
  result = call_590048.call(path_590049, query_590050, nil, nil, body_590051)

var dfareportingConversionsBatchinsert* = Call_DfareportingConversionsBatchinsert_590035(
    name: "dfareportingConversionsBatchinsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/conversions/batchinsert",
    validator: validate_DfareportingConversionsBatchinsert_590036,
    base: "/dfareporting/v3.2", url: url_DfareportingConversionsBatchinsert_590037,
    schemes: {Scheme.Https})
type
  Call_DfareportingConversionsBatchupdate_590052 = ref object of OpenApiRestCall_588466
proc url_DfareportingConversionsBatchupdate_590054(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/conversions/batchupdate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingConversionsBatchupdate_590053(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates existing conversions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590055 = path.getOrDefault("profileId")
  valid_590055 = validateParameter(valid_590055, JString, required = true,
                                 default = nil)
  if valid_590055 != nil:
    section.add "profileId", valid_590055
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590056 = query.getOrDefault("fields")
  valid_590056 = validateParameter(valid_590056, JString, required = false,
                                 default = nil)
  if valid_590056 != nil:
    section.add "fields", valid_590056
  var valid_590057 = query.getOrDefault("quotaUser")
  valid_590057 = validateParameter(valid_590057, JString, required = false,
                                 default = nil)
  if valid_590057 != nil:
    section.add "quotaUser", valid_590057
  var valid_590058 = query.getOrDefault("alt")
  valid_590058 = validateParameter(valid_590058, JString, required = false,
                                 default = newJString("json"))
  if valid_590058 != nil:
    section.add "alt", valid_590058
  var valid_590059 = query.getOrDefault("oauth_token")
  valid_590059 = validateParameter(valid_590059, JString, required = false,
                                 default = nil)
  if valid_590059 != nil:
    section.add "oauth_token", valid_590059
  var valid_590060 = query.getOrDefault("userIp")
  valid_590060 = validateParameter(valid_590060, JString, required = false,
                                 default = nil)
  if valid_590060 != nil:
    section.add "userIp", valid_590060
  var valid_590061 = query.getOrDefault("key")
  valid_590061 = validateParameter(valid_590061, JString, required = false,
                                 default = nil)
  if valid_590061 != nil:
    section.add "key", valid_590061
  var valid_590062 = query.getOrDefault("prettyPrint")
  valid_590062 = validateParameter(valid_590062, JBool, required = false,
                                 default = newJBool(true))
  if valid_590062 != nil:
    section.add "prettyPrint", valid_590062
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590064: Call_DfareportingConversionsBatchupdate_590052;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates existing conversions.
  ## 
  let valid = call_590064.validator(path, query, header, formData, body)
  let scheme = call_590064.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590064.url(scheme.get, call_590064.host, call_590064.base,
                         call_590064.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590064, url, valid)

proc call*(call_590065: Call_DfareportingConversionsBatchupdate_590052;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingConversionsBatchupdate
  ## Updates existing conversions.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590066 = newJObject()
  var query_590067 = newJObject()
  var body_590068 = newJObject()
  add(path_590066, "profileId", newJString(profileId))
  add(query_590067, "fields", newJString(fields))
  add(query_590067, "quotaUser", newJString(quotaUser))
  add(query_590067, "alt", newJString(alt))
  add(query_590067, "oauth_token", newJString(oauthToken))
  add(query_590067, "userIp", newJString(userIp))
  add(query_590067, "key", newJString(key))
  if body != nil:
    body_590068 = body
  add(query_590067, "prettyPrint", newJBool(prettyPrint))
  result = call_590065.call(path_590066, query_590067, nil, nil, body_590068)

var dfareportingConversionsBatchupdate* = Call_DfareportingConversionsBatchupdate_590052(
    name: "dfareportingConversionsBatchupdate", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/conversions/batchupdate",
    validator: validate_DfareportingConversionsBatchupdate_590053,
    base: "/dfareporting/v3.2", url: url_DfareportingConversionsBatchupdate_590054,
    schemes: {Scheme.Https})
type
  Call_DfareportingCountriesList_590069 = ref object of OpenApiRestCall_588466
proc url_DfareportingCountriesList_590071(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/countries")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCountriesList_590070(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of countries.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590072 = path.getOrDefault("profileId")
  valid_590072 = validateParameter(valid_590072, JString, required = true,
                                 default = nil)
  if valid_590072 != nil:
    section.add "profileId", valid_590072
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590073 = query.getOrDefault("fields")
  valid_590073 = validateParameter(valid_590073, JString, required = false,
                                 default = nil)
  if valid_590073 != nil:
    section.add "fields", valid_590073
  var valid_590074 = query.getOrDefault("quotaUser")
  valid_590074 = validateParameter(valid_590074, JString, required = false,
                                 default = nil)
  if valid_590074 != nil:
    section.add "quotaUser", valid_590074
  var valid_590075 = query.getOrDefault("alt")
  valid_590075 = validateParameter(valid_590075, JString, required = false,
                                 default = newJString("json"))
  if valid_590075 != nil:
    section.add "alt", valid_590075
  var valid_590076 = query.getOrDefault("oauth_token")
  valid_590076 = validateParameter(valid_590076, JString, required = false,
                                 default = nil)
  if valid_590076 != nil:
    section.add "oauth_token", valid_590076
  var valid_590077 = query.getOrDefault("userIp")
  valid_590077 = validateParameter(valid_590077, JString, required = false,
                                 default = nil)
  if valid_590077 != nil:
    section.add "userIp", valid_590077
  var valid_590078 = query.getOrDefault("key")
  valid_590078 = validateParameter(valid_590078, JString, required = false,
                                 default = nil)
  if valid_590078 != nil:
    section.add "key", valid_590078
  var valid_590079 = query.getOrDefault("prettyPrint")
  valid_590079 = validateParameter(valid_590079, JBool, required = false,
                                 default = newJBool(true))
  if valid_590079 != nil:
    section.add "prettyPrint", valid_590079
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590080: Call_DfareportingCountriesList_590069; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of countries.
  ## 
  let valid = call_590080.validator(path, query, header, formData, body)
  let scheme = call_590080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590080.url(scheme.get, call_590080.host, call_590080.base,
                         call_590080.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590080, url, valid)

proc call*(call_590081: Call_DfareportingCountriesList_590069; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingCountriesList
  ## Retrieves a list of countries.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590082 = newJObject()
  var query_590083 = newJObject()
  add(path_590082, "profileId", newJString(profileId))
  add(query_590083, "fields", newJString(fields))
  add(query_590083, "quotaUser", newJString(quotaUser))
  add(query_590083, "alt", newJString(alt))
  add(query_590083, "oauth_token", newJString(oauthToken))
  add(query_590083, "userIp", newJString(userIp))
  add(query_590083, "key", newJString(key))
  add(query_590083, "prettyPrint", newJBool(prettyPrint))
  result = call_590081.call(path_590082, query_590083, nil, nil, nil)

var dfareportingCountriesList* = Call_DfareportingCountriesList_590069(
    name: "dfareportingCountriesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/countries",
    validator: validate_DfareportingCountriesList_590070,
    base: "/dfareporting/v3.2", url: url_DfareportingCountriesList_590071,
    schemes: {Scheme.Https})
type
  Call_DfareportingCountriesGet_590084 = ref object of OpenApiRestCall_588466
proc url_DfareportingCountriesGet_590086(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "dartId" in path, "`dartId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/countries/"),
               (kind: VariableSegment, value: "dartId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCountriesGet_590085(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one country by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   dartId: JString (required)
  ##         : Country DART ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590087 = path.getOrDefault("profileId")
  valid_590087 = validateParameter(valid_590087, JString, required = true,
                                 default = nil)
  if valid_590087 != nil:
    section.add "profileId", valid_590087
  var valid_590088 = path.getOrDefault("dartId")
  valid_590088 = validateParameter(valid_590088, JString, required = true,
                                 default = nil)
  if valid_590088 != nil:
    section.add "dartId", valid_590088
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590089 = query.getOrDefault("fields")
  valid_590089 = validateParameter(valid_590089, JString, required = false,
                                 default = nil)
  if valid_590089 != nil:
    section.add "fields", valid_590089
  var valid_590090 = query.getOrDefault("quotaUser")
  valid_590090 = validateParameter(valid_590090, JString, required = false,
                                 default = nil)
  if valid_590090 != nil:
    section.add "quotaUser", valid_590090
  var valid_590091 = query.getOrDefault("alt")
  valid_590091 = validateParameter(valid_590091, JString, required = false,
                                 default = newJString("json"))
  if valid_590091 != nil:
    section.add "alt", valid_590091
  var valid_590092 = query.getOrDefault("oauth_token")
  valid_590092 = validateParameter(valid_590092, JString, required = false,
                                 default = nil)
  if valid_590092 != nil:
    section.add "oauth_token", valid_590092
  var valid_590093 = query.getOrDefault("userIp")
  valid_590093 = validateParameter(valid_590093, JString, required = false,
                                 default = nil)
  if valid_590093 != nil:
    section.add "userIp", valid_590093
  var valid_590094 = query.getOrDefault("key")
  valid_590094 = validateParameter(valid_590094, JString, required = false,
                                 default = nil)
  if valid_590094 != nil:
    section.add "key", valid_590094
  var valid_590095 = query.getOrDefault("prettyPrint")
  valid_590095 = validateParameter(valid_590095, JBool, required = false,
                                 default = newJBool(true))
  if valid_590095 != nil:
    section.add "prettyPrint", valid_590095
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590096: Call_DfareportingCountriesGet_590084; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one country by ID.
  ## 
  let valid = call_590096.validator(path, query, header, formData, body)
  let scheme = call_590096.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590096.url(scheme.get, call_590096.host, call_590096.base,
                         call_590096.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590096, url, valid)

proc call*(call_590097: Call_DfareportingCountriesGet_590084; profileId: string;
          dartId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingCountriesGet
  ## Gets one country by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   dartId: string (required)
  ##         : Country DART ID.
  var path_590098 = newJObject()
  var query_590099 = newJObject()
  add(path_590098, "profileId", newJString(profileId))
  add(query_590099, "fields", newJString(fields))
  add(query_590099, "quotaUser", newJString(quotaUser))
  add(query_590099, "alt", newJString(alt))
  add(query_590099, "oauth_token", newJString(oauthToken))
  add(query_590099, "userIp", newJString(userIp))
  add(query_590099, "key", newJString(key))
  add(query_590099, "prettyPrint", newJBool(prettyPrint))
  add(path_590098, "dartId", newJString(dartId))
  result = call_590097.call(path_590098, query_590099, nil, nil, nil)

var dfareportingCountriesGet* = Call_DfareportingCountriesGet_590084(
    name: "dfareportingCountriesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/countries/{dartId}",
    validator: validate_DfareportingCountriesGet_590085,
    base: "/dfareporting/v3.2", url: url_DfareportingCountriesGet_590086,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeAssetsInsert_590100 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativeAssetsInsert_590102(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "advertiserId" in path, "`advertiserId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeAssets/"),
               (kind: VariableSegment, value: "advertiserId"),
               (kind: ConstantSegment, value: "/creativeAssets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeAssetsInsert_590101(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative asset.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   advertiserId: JString (required)
  ##               : Advertiser ID of this creative. This is a required field.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590103 = path.getOrDefault("profileId")
  valid_590103 = validateParameter(valid_590103, JString, required = true,
                                 default = nil)
  if valid_590103 != nil:
    section.add "profileId", valid_590103
  var valid_590104 = path.getOrDefault("advertiserId")
  valid_590104 = validateParameter(valid_590104, JString, required = true,
                                 default = nil)
  if valid_590104 != nil:
    section.add "advertiserId", valid_590104
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590105 = query.getOrDefault("fields")
  valid_590105 = validateParameter(valid_590105, JString, required = false,
                                 default = nil)
  if valid_590105 != nil:
    section.add "fields", valid_590105
  var valid_590106 = query.getOrDefault("quotaUser")
  valid_590106 = validateParameter(valid_590106, JString, required = false,
                                 default = nil)
  if valid_590106 != nil:
    section.add "quotaUser", valid_590106
  var valid_590107 = query.getOrDefault("alt")
  valid_590107 = validateParameter(valid_590107, JString, required = false,
                                 default = newJString("json"))
  if valid_590107 != nil:
    section.add "alt", valid_590107
  var valid_590108 = query.getOrDefault("oauth_token")
  valid_590108 = validateParameter(valid_590108, JString, required = false,
                                 default = nil)
  if valid_590108 != nil:
    section.add "oauth_token", valid_590108
  var valid_590109 = query.getOrDefault("userIp")
  valid_590109 = validateParameter(valid_590109, JString, required = false,
                                 default = nil)
  if valid_590109 != nil:
    section.add "userIp", valid_590109
  var valid_590110 = query.getOrDefault("key")
  valid_590110 = validateParameter(valid_590110, JString, required = false,
                                 default = nil)
  if valid_590110 != nil:
    section.add "key", valid_590110
  var valid_590111 = query.getOrDefault("prettyPrint")
  valid_590111 = validateParameter(valid_590111, JBool, required = false,
                                 default = newJBool(true))
  if valid_590111 != nil:
    section.add "prettyPrint", valid_590111
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590113: Call_DfareportingCreativeAssetsInsert_590100;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new creative asset.
  ## 
  let valid = call_590113.validator(path, query, header, formData, body)
  let scheme = call_590113.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590113.url(scheme.get, call_590113.host, call_590113.base,
                         call_590113.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590113, url, valid)

proc call*(call_590114: Call_DfareportingCreativeAssetsInsert_590100;
          profileId: string; advertiserId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; body: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeAssetsInsert
  ## Inserts a new creative asset.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserId: string (required)
  ##               : Advertiser ID of this creative. This is a required field.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590115 = newJObject()
  var query_590116 = newJObject()
  var body_590117 = newJObject()
  add(path_590115, "profileId", newJString(profileId))
  add(query_590116, "fields", newJString(fields))
  add(query_590116, "quotaUser", newJString(quotaUser))
  add(query_590116, "alt", newJString(alt))
  add(query_590116, "oauth_token", newJString(oauthToken))
  add(query_590116, "userIp", newJString(userIp))
  add(query_590116, "key", newJString(key))
  add(path_590115, "advertiserId", newJString(advertiserId))
  if body != nil:
    body_590117 = body
  add(query_590116, "prettyPrint", newJBool(prettyPrint))
  result = call_590114.call(path_590115, query_590116, nil, nil, body_590117)

var dfareportingCreativeAssetsInsert* = Call_DfareportingCreativeAssetsInsert_590100(
    name: "dfareportingCreativeAssetsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeAssets/{advertiserId}/creativeAssets",
    validator: validate_DfareportingCreativeAssetsInsert_590101,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeAssetsInsert_590102,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsUpdate_590140 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativeFieldsUpdate_590142(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsUpdate_590141(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative field.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590143 = path.getOrDefault("profileId")
  valid_590143 = validateParameter(valid_590143, JString, required = true,
                                 default = nil)
  if valid_590143 != nil:
    section.add "profileId", valid_590143
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590144 = query.getOrDefault("fields")
  valid_590144 = validateParameter(valid_590144, JString, required = false,
                                 default = nil)
  if valid_590144 != nil:
    section.add "fields", valid_590144
  var valid_590145 = query.getOrDefault("quotaUser")
  valid_590145 = validateParameter(valid_590145, JString, required = false,
                                 default = nil)
  if valid_590145 != nil:
    section.add "quotaUser", valid_590145
  var valid_590146 = query.getOrDefault("alt")
  valid_590146 = validateParameter(valid_590146, JString, required = false,
                                 default = newJString("json"))
  if valid_590146 != nil:
    section.add "alt", valid_590146
  var valid_590147 = query.getOrDefault("oauth_token")
  valid_590147 = validateParameter(valid_590147, JString, required = false,
                                 default = nil)
  if valid_590147 != nil:
    section.add "oauth_token", valid_590147
  var valid_590148 = query.getOrDefault("userIp")
  valid_590148 = validateParameter(valid_590148, JString, required = false,
                                 default = nil)
  if valid_590148 != nil:
    section.add "userIp", valid_590148
  var valid_590149 = query.getOrDefault("key")
  valid_590149 = validateParameter(valid_590149, JString, required = false,
                                 default = nil)
  if valid_590149 != nil:
    section.add "key", valid_590149
  var valid_590150 = query.getOrDefault("prettyPrint")
  valid_590150 = validateParameter(valid_590150, JBool, required = false,
                                 default = newJBool(true))
  if valid_590150 != nil:
    section.add "prettyPrint", valid_590150
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590152: Call_DfareportingCreativeFieldsUpdate_590140;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative field.
  ## 
  let valid = call_590152.validator(path, query, header, formData, body)
  let scheme = call_590152.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590152.url(scheme.get, call_590152.host, call_590152.base,
                         call_590152.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590152, url, valid)

proc call*(call_590153: Call_DfareportingCreativeFieldsUpdate_590140;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldsUpdate
  ## Updates an existing creative field.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590154 = newJObject()
  var query_590155 = newJObject()
  var body_590156 = newJObject()
  add(path_590154, "profileId", newJString(profileId))
  add(query_590155, "fields", newJString(fields))
  add(query_590155, "quotaUser", newJString(quotaUser))
  add(query_590155, "alt", newJString(alt))
  add(query_590155, "oauth_token", newJString(oauthToken))
  add(query_590155, "userIp", newJString(userIp))
  add(query_590155, "key", newJString(key))
  if body != nil:
    body_590156 = body
  add(query_590155, "prettyPrint", newJBool(prettyPrint))
  result = call_590153.call(path_590154, query_590155, nil, nil, body_590156)

var dfareportingCreativeFieldsUpdate* = Call_DfareportingCreativeFieldsUpdate_590140(
    name: "dfareportingCreativeFieldsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields",
    validator: validate_DfareportingCreativeFieldsUpdate_590141,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsUpdate_590142,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsInsert_590157 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativeFieldsInsert_590159(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsInsert_590158(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative field.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590160 = path.getOrDefault("profileId")
  valid_590160 = validateParameter(valid_590160, JString, required = true,
                                 default = nil)
  if valid_590160 != nil:
    section.add "profileId", valid_590160
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590161 = query.getOrDefault("fields")
  valid_590161 = validateParameter(valid_590161, JString, required = false,
                                 default = nil)
  if valid_590161 != nil:
    section.add "fields", valid_590161
  var valid_590162 = query.getOrDefault("quotaUser")
  valid_590162 = validateParameter(valid_590162, JString, required = false,
                                 default = nil)
  if valid_590162 != nil:
    section.add "quotaUser", valid_590162
  var valid_590163 = query.getOrDefault("alt")
  valid_590163 = validateParameter(valid_590163, JString, required = false,
                                 default = newJString("json"))
  if valid_590163 != nil:
    section.add "alt", valid_590163
  var valid_590164 = query.getOrDefault("oauth_token")
  valid_590164 = validateParameter(valid_590164, JString, required = false,
                                 default = nil)
  if valid_590164 != nil:
    section.add "oauth_token", valid_590164
  var valid_590165 = query.getOrDefault("userIp")
  valid_590165 = validateParameter(valid_590165, JString, required = false,
                                 default = nil)
  if valid_590165 != nil:
    section.add "userIp", valid_590165
  var valid_590166 = query.getOrDefault("key")
  valid_590166 = validateParameter(valid_590166, JString, required = false,
                                 default = nil)
  if valid_590166 != nil:
    section.add "key", valid_590166
  var valid_590167 = query.getOrDefault("prettyPrint")
  valid_590167 = validateParameter(valid_590167, JBool, required = false,
                                 default = newJBool(true))
  if valid_590167 != nil:
    section.add "prettyPrint", valid_590167
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590169: Call_DfareportingCreativeFieldsInsert_590157;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new creative field.
  ## 
  let valid = call_590169.validator(path, query, header, formData, body)
  let scheme = call_590169.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590169.url(scheme.get, call_590169.host, call_590169.base,
                         call_590169.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590169, url, valid)

proc call*(call_590170: Call_DfareportingCreativeFieldsInsert_590157;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldsInsert
  ## Inserts a new creative field.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590171 = newJObject()
  var query_590172 = newJObject()
  var body_590173 = newJObject()
  add(path_590171, "profileId", newJString(profileId))
  add(query_590172, "fields", newJString(fields))
  add(query_590172, "quotaUser", newJString(quotaUser))
  add(query_590172, "alt", newJString(alt))
  add(query_590172, "oauth_token", newJString(oauthToken))
  add(query_590172, "userIp", newJString(userIp))
  add(query_590172, "key", newJString(key))
  if body != nil:
    body_590173 = body
  add(query_590172, "prettyPrint", newJBool(prettyPrint))
  result = call_590170.call(path_590171, query_590172, nil, nil, body_590173)

var dfareportingCreativeFieldsInsert* = Call_DfareportingCreativeFieldsInsert_590157(
    name: "dfareportingCreativeFieldsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields",
    validator: validate_DfareportingCreativeFieldsInsert_590158,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsInsert_590159,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsList_590118 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativeFieldsList_590120(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsList_590119(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of creative fields, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590121 = path.getOrDefault("profileId")
  valid_590121 = validateParameter(valid_590121, JString, required = true,
                                 default = nil)
  if valid_590121 != nil:
    section.add "profileId", valid_590121
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for creative fields by name or ID. Wildcards (*) are allowed. For example, "creativefield*2015" will return creative fields with names like "creativefield June 2015", "creativefield April 2015", or simply "creativefield 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativefield" will match creative fields with the name "my creativefield", "creativefield 2015", or simply "creativefield".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creative fields with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only creative fields that belong to these advertisers.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590122 = query.getOrDefault("fields")
  valid_590122 = validateParameter(valid_590122, JString, required = false,
                                 default = nil)
  if valid_590122 != nil:
    section.add "fields", valid_590122
  var valid_590123 = query.getOrDefault("pageToken")
  valid_590123 = validateParameter(valid_590123, JString, required = false,
                                 default = nil)
  if valid_590123 != nil:
    section.add "pageToken", valid_590123
  var valid_590124 = query.getOrDefault("quotaUser")
  valid_590124 = validateParameter(valid_590124, JString, required = false,
                                 default = nil)
  if valid_590124 != nil:
    section.add "quotaUser", valid_590124
  var valid_590125 = query.getOrDefault("sortField")
  valid_590125 = validateParameter(valid_590125, JString, required = false,
                                 default = newJString("ID"))
  if valid_590125 != nil:
    section.add "sortField", valid_590125
  var valid_590126 = query.getOrDefault("alt")
  valid_590126 = validateParameter(valid_590126, JString, required = false,
                                 default = newJString("json"))
  if valid_590126 != nil:
    section.add "alt", valid_590126
  var valid_590127 = query.getOrDefault("searchString")
  valid_590127 = validateParameter(valid_590127, JString, required = false,
                                 default = nil)
  if valid_590127 != nil:
    section.add "searchString", valid_590127
  var valid_590128 = query.getOrDefault("oauth_token")
  valid_590128 = validateParameter(valid_590128, JString, required = false,
                                 default = nil)
  if valid_590128 != nil:
    section.add "oauth_token", valid_590128
  var valid_590129 = query.getOrDefault("userIp")
  valid_590129 = validateParameter(valid_590129, JString, required = false,
                                 default = nil)
  if valid_590129 != nil:
    section.add "userIp", valid_590129
  var valid_590130 = query.getOrDefault("maxResults")
  valid_590130 = validateParameter(valid_590130, JInt, required = false,
                                 default = newJInt(1000))
  if valid_590130 != nil:
    section.add "maxResults", valid_590130
  var valid_590131 = query.getOrDefault("ids")
  valid_590131 = validateParameter(valid_590131, JArray, required = false,
                                 default = nil)
  if valid_590131 != nil:
    section.add "ids", valid_590131
  var valid_590132 = query.getOrDefault("key")
  valid_590132 = validateParameter(valid_590132, JString, required = false,
                                 default = nil)
  if valid_590132 != nil:
    section.add "key", valid_590132
  var valid_590133 = query.getOrDefault("advertiserIds")
  valid_590133 = validateParameter(valid_590133, JArray, required = false,
                                 default = nil)
  if valid_590133 != nil:
    section.add "advertiserIds", valid_590133
  var valid_590134 = query.getOrDefault("sortOrder")
  valid_590134 = validateParameter(valid_590134, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_590134 != nil:
    section.add "sortOrder", valid_590134
  var valid_590135 = query.getOrDefault("prettyPrint")
  valid_590135 = validateParameter(valid_590135, JBool, required = false,
                                 default = newJBool(true))
  if valid_590135 != nil:
    section.add "prettyPrint", valid_590135
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590136: Call_DfareportingCreativeFieldsList_590118; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of creative fields, possibly filtered. This method supports paging.
  ## 
  let valid = call_590136.validator(path, query, header, formData, body)
  let scheme = call_590136.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590136.url(scheme.get, call_590136.host, call_590136.base,
                         call_590136.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590136, url, valid)

proc call*(call_590137: Call_DfareportingCreativeFieldsList_590118;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          advertiserIds: JsonNode = nil; sortOrder: string = "ASCENDING";
          prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldsList
  ## Retrieves a list of creative fields, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for creative fields by name or ID. Wildcards (*) are allowed. For example, "creativefield*2015" will return creative fields with names like "creativefield June 2015", "creativefield April 2015", or simply "creativefield 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativefield" will match creative fields with the name "my creativefield", "creativefield 2015", or simply "creativefield".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creative fields with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only creative fields that belong to these advertisers.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590138 = newJObject()
  var query_590139 = newJObject()
  add(path_590138, "profileId", newJString(profileId))
  add(query_590139, "fields", newJString(fields))
  add(query_590139, "pageToken", newJString(pageToken))
  add(query_590139, "quotaUser", newJString(quotaUser))
  add(query_590139, "sortField", newJString(sortField))
  add(query_590139, "alt", newJString(alt))
  add(query_590139, "searchString", newJString(searchString))
  add(query_590139, "oauth_token", newJString(oauthToken))
  add(query_590139, "userIp", newJString(userIp))
  add(query_590139, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_590139.add "ids", ids
  add(query_590139, "key", newJString(key))
  if advertiserIds != nil:
    query_590139.add "advertiserIds", advertiserIds
  add(query_590139, "sortOrder", newJString(sortOrder))
  add(query_590139, "prettyPrint", newJBool(prettyPrint))
  result = call_590137.call(path_590138, query_590139, nil, nil, nil)

var dfareportingCreativeFieldsList* = Call_DfareportingCreativeFieldsList_590118(
    name: "dfareportingCreativeFieldsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields",
    validator: validate_DfareportingCreativeFieldsList_590119,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsList_590120,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsPatch_590174 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativeFieldsPatch_590176(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsPatch_590175(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative field. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590177 = path.getOrDefault("profileId")
  valid_590177 = validateParameter(valid_590177, JString, required = true,
                                 default = nil)
  if valid_590177 != nil:
    section.add "profileId", valid_590177
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Creative Field ID
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590178 = query.getOrDefault("fields")
  valid_590178 = validateParameter(valid_590178, JString, required = false,
                                 default = nil)
  if valid_590178 != nil:
    section.add "fields", valid_590178
  var valid_590179 = query.getOrDefault("quotaUser")
  valid_590179 = validateParameter(valid_590179, JString, required = false,
                                 default = nil)
  if valid_590179 != nil:
    section.add "quotaUser", valid_590179
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_590180 = query.getOrDefault("id")
  valid_590180 = validateParameter(valid_590180, JString, required = true,
                                 default = nil)
  if valid_590180 != nil:
    section.add "id", valid_590180
  var valid_590181 = query.getOrDefault("alt")
  valid_590181 = validateParameter(valid_590181, JString, required = false,
                                 default = newJString("json"))
  if valid_590181 != nil:
    section.add "alt", valid_590181
  var valid_590182 = query.getOrDefault("oauth_token")
  valid_590182 = validateParameter(valid_590182, JString, required = false,
                                 default = nil)
  if valid_590182 != nil:
    section.add "oauth_token", valid_590182
  var valid_590183 = query.getOrDefault("userIp")
  valid_590183 = validateParameter(valid_590183, JString, required = false,
                                 default = nil)
  if valid_590183 != nil:
    section.add "userIp", valid_590183
  var valid_590184 = query.getOrDefault("key")
  valid_590184 = validateParameter(valid_590184, JString, required = false,
                                 default = nil)
  if valid_590184 != nil:
    section.add "key", valid_590184
  var valid_590185 = query.getOrDefault("prettyPrint")
  valid_590185 = validateParameter(valid_590185, JBool, required = false,
                                 default = newJBool(true))
  if valid_590185 != nil:
    section.add "prettyPrint", valid_590185
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590187: Call_DfareportingCreativeFieldsPatch_590174;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative field. This method supports patch semantics.
  ## 
  let valid = call_590187.validator(path, query, header, formData, body)
  let scheme = call_590187.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590187.url(scheme.get, call_590187.host, call_590187.base,
                         call_590187.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590187, url, valid)

proc call*(call_590188: Call_DfareportingCreativeFieldsPatch_590174;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldsPatch
  ## Updates an existing creative field. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Creative Field ID
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590189 = newJObject()
  var query_590190 = newJObject()
  var body_590191 = newJObject()
  add(path_590189, "profileId", newJString(profileId))
  add(query_590190, "fields", newJString(fields))
  add(query_590190, "quotaUser", newJString(quotaUser))
  add(query_590190, "id", newJString(id))
  add(query_590190, "alt", newJString(alt))
  add(query_590190, "oauth_token", newJString(oauthToken))
  add(query_590190, "userIp", newJString(userIp))
  add(query_590190, "key", newJString(key))
  if body != nil:
    body_590191 = body
  add(query_590190, "prettyPrint", newJBool(prettyPrint))
  result = call_590188.call(path_590189, query_590190, nil, nil, body_590191)

var dfareportingCreativeFieldsPatch* = Call_DfareportingCreativeFieldsPatch_590174(
    name: "dfareportingCreativeFieldsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields",
    validator: validate_DfareportingCreativeFieldsPatch_590175,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsPatch_590176,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesUpdate_590214 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativeFieldValuesUpdate_590216(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesUpdate_590215(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative field value.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590217 = path.getOrDefault("profileId")
  valid_590217 = validateParameter(valid_590217, JString, required = true,
                                 default = nil)
  if valid_590217 != nil:
    section.add "profileId", valid_590217
  var valid_590218 = path.getOrDefault("creativeFieldId")
  valid_590218 = validateParameter(valid_590218, JString, required = true,
                                 default = nil)
  if valid_590218 != nil:
    section.add "creativeFieldId", valid_590218
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590219 = query.getOrDefault("fields")
  valid_590219 = validateParameter(valid_590219, JString, required = false,
                                 default = nil)
  if valid_590219 != nil:
    section.add "fields", valid_590219
  var valid_590220 = query.getOrDefault("quotaUser")
  valid_590220 = validateParameter(valid_590220, JString, required = false,
                                 default = nil)
  if valid_590220 != nil:
    section.add "quotaUser", valid_590220
  var valid_590221 = query.getOrDefault("alt")
  valid_590221 = validateParameter(valid_590221, JString, required = false,
                                 default = newJString("json"))
  if valid_590221 != nil:
    section.add "alt", valid_590221
  var valid_590222 = query.getOrDefault("oauth_token")
  valid_590222 = validateParameter(valid_590222, JString, required = false,
                                 default = nil)
  if valid_590222 != nil:
    section.add "oauth_token", valid_590222
  var valid_590223 = query.getOrDefault("userIp")
  valid_590223 = validateParameter(valid_590223, JString, required = false,
                                 default = nil)
  if valid_590223 != nil:
    section.add "userIp", valid_590223
  var valid_590224 = query.getOrDefault("key")
  valid_590224 = validateParameter(valid_590224, JString, required = false,
                                 default = nil)
  if valid_590224 != nil:
    section.add "key", valid_590224
  var valid_590225 = query.getOrDefault("prettyPrint")
  valid_590225 = validateParameter(valid_590225, JBool, required = false,
                                 default = newJBool(true))
  if valid_590225 != nil:
    section.add "prettyPrint", valid_590225
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590227: Call_DfareportingCreativeFieldValuesUpdate_590214;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative field value.
  ## 
  let valid = call_590227.validator(path, query, header, formData, body)
  let scheme = call_590227.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590227.url(scheme.get, call_590227.host, call_590227.base,
                         call_590227.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590227, url, valid)

proc call*(call_590228: Call_DfareportingCreativeFieldValuesUpdate_590214;
          profileId: string; creativeFieldId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; body: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldValuesUpdate
  ## Updates an existing creative field value.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590229 = newJObject()
  var query_590230 = newJObject()
  var body_590231 = newJObject()
  add(path_590229, "profileId", newJString(profileId))
  add(query_590230, "fields", newJString(fields))
  add(query_590230, "quotaUser", newJString(quotaUser))
  add(query_590230, "alt", newJString(alt))
  add(query_590230, "oauth_token", newJString(oauthToken))
  add(query_590230, "userIp", newJString(userIp))
  add(query_590230, "key", newJString(key))
  add(path_590229, "creativeFieldId", newJString(creativeFieldId))
  if body != nil:
    body_590231 = body
  add(query_590230, "prettyPrint", newJBool(prettyPrint))
  result = call_590228.call(path_590229, query_590230, nil, nil, body_590231)

var dfareportingCreativeFieldValuesUpdate* = Call_DfareportingCreativeFieldValuesUpdate_590214(
    name: "dfareportingCreativeFieldValuesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
    validator: validate_DfareportingCreativeFieldValuesUpdate_590215,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesUpdate_590216,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesInsert_590232 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativeFieldValuesInsert_590234(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesInsert_590233(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative field value.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590235 = path.getOrDefault("profileId")
  valid_590235 = validateParameter(valid_590235, JString, required = true,
                                 default = nil)
  if valid_590235 != nil:
    section.add "profileId", valid_590235
  var valid_590236 = path.getOrDefault("creativeFieldId")
  valid_590236 = validateParameter(valid_590236, JString, required = true,
                                 default = nil)
  if valid_590236 != nil:
    section.add "creativeFieldId", valid_590236
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590237 = query.getOrDefault("fields")
  valid_590237 = validateParameter(valid_590237, JString, required = false,
                                 default = nil)
  if valid_590237 != nil:
    section.add "fields", valid_590237
  var valid_590238 = query.getOrDefault("quotaUser")
  valid_590238 = validateParameter(valid_590238, JString, required = false,
                                 default = nil)
  if valid_590238 != nil:
    section.add "quotaUser", valid_590238
  var valid_590239 = query.getOrDefault("alt")
  valid_590239 = validateParameter(valid_590239, JString, required = false,
                                 default = newJString("json"))
  if valid_590239 != nil:
    section.add "alt", valid_590239
  var valid_590240 = query.getOrDefault("oauth_token")
  valid_590240 = validateParameter(valid_590240, JString, required = false,
                                 default = nil)
  if valid_590240 != nil:
    section.add "oauth_token", valid_590240
  var valid_590241 = query.getOrDefault("userIp")
  valid_590241 = validateParameter(valid_590241, JString, required = false,
                                 default = nil)
  if valid_590241 != nil:
    section.add "userIp", valid_590241
  var valid_590242 = query.getOrDefault("key")
  valid_590242 = validateParameter(valid_590242, JString, required = false,
                                 default = nil)
  if valid_590242 != nil:
    section.add "key", valid_590242
  var valid_590243 = query.getOrDefault("prettyPrint")
  valid_590243 = validateParameter(valid_590243, JBool, required = false,
                                 default = newJBool(true))
  if valid_590243 != nil:
    section.add "prettyPrint", valid_590243
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590245: Call_DfareportingCreativeFieldValuesInsert_590232;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new creative field value.
  ## 
  let valid = call_590245.validator(path, query, header, formData, body)
  let scheme = call_590245.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590245.url(scheme.get, call_590245.host, call_590245.base,
                         call_590245.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590245, url, valid)

proc call*(call_590246: Call_DfareportingCreativeFieldValuesInsert_590232;
          profileId: string; creativeFieldId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; body: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldValuesInsert
  ## Inserts a new creative field value.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590247 = newJObject()
  var query_590248 = newJObject()
  var body_590249 = newJObject()
  add(path_590247, "profileId", newJString(profileId))
  add(query_590248, "fields", newJString(fields))
  add(query_590248, "quotaUser", newJString(quotaUser))
  add(query_590248, "alt", newJString(alt))
  add(query_590248, "oauth_token", newJString(oauthToken))
  add(query_590248, "userIp", newJString(userIp))
  add(query_590248, "key", newJString(key))
  add(path_590247, "creativeFieldId", newJString(creativeFieldId))
  if body != nil:
    body_590249 = body
  add(query_590248, "prettyPrint", newJBool(prettyPrint))
  result = call_590246.call(path_590247, query_590248, nil, nil, body_590249)

var dfareportingCreativeFieldValuesInsert* = Call_DfareportingCreativeFieldValuesInsert_590232(
    name: "dfareportingCreativeFieldValuesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
    validator: validate_DfareportingCreativeFieldValuesInsert_590233,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesInsert_590234,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesList_590192 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativeFieldValuesList_590194(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesList_590193(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of creative field values, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590195 = path.getOrDefault("profileId")
  valid_590195 = validateParameter(valid_590195, JString, required = true,
                                 default = nil)
  if valid_590195 != nil:
    section.add "profileId", valid_590195
  var valid_590196 = path.getOrDefault("creativeFieldId")
  valid_590196 = validateParameter(valid_590196, JString, required = true,
                                 default = nil)
  if valid_590196 != nil:
    section.add "creativeFieldId", valid_590196
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for creative field values by their values. Wildcards (e.g. *) are not allowed.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creative field values with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590197 = query.getOrDefault("fields")
  valid_590197 = validateParameter(valid_590197, JString, required = false,
                                 default = nil)
  if valid_590197 != nil:
    section.add "fields", valid_590197
  var valid_590198 = query.getOrDefault("pageToken")
  valid_590198 = validateParameter(valid_590198, JString, required = false,
                                 default = nil)
  if valid_590198 != nil:
    section.add "pageToken", valid_590198
  var valid_590199 = query.getOrDefault("quotaUser")
  valid_590199 = validateParameter(valid_590199, JString, required = false,
                                 default = nil)
  if valid_590199 != nil:
    section.add "quotaUser", valid_590199
  var valid_590200 = query.getOrDefault("sortField")
  valid_590200 = validateParameter(valid_590200, JString, required = false,
                                 default = newJString("ID"))
  if valid_590200 != nil:
    section.add "sortField", valid_590200
  var valid_590201 = query.getOrDefault("alt")
  valid_590201 = validateParameter(valid_590201, JString, required = false,
                                 default = newJString("json"))
  if valid_590201 != nil:
    section.add "alt", valid_590201
  var valid_590202 = query.getOrDefault("searchString")
  valid_590202 = validateParameter(valid_590202, JString, required = false,
                                 default = nil)
  if valid_590202 != nil:
    section.add "searchString", valid_590202
  var valid_590203 = query.getOrDefault("oauth_token")
  valid_590203 = validateParameter(valid_590203, JString, required = false,
                                 default = nil)
  if valid_590203 != nil:
    section.add "oauth_token", valid_590203
  var valid_590204 = query.getOrDefault("userIp")
  valid_590204 = validateParameter(valid_590204, JString, required = false,
                                 default = nil)
  if valid_590204 != nil:
    section.add "userIp", valid_590204
  var valid_590205 = query.getOrDefault("maxResults")
  valid_590205 = validateParameter(valid_590205, JInt, required = false,
                                 default = newJInt(1000))
  if valid_590205 != nil:
    section.add "maxResults", valid_590205
  var valid_590206 = query.getOrDefault("ids")
  valid_590206 = validateParameter(valid_590206, JArray, required = false,
                                 default = nil)
  if valid_590206 != nil:
    section.add "ids", valid_590206
  var valid_590207 = query.getOrDefault("key")
  valid_590207 = validateParameter(valid_590207, JString, required = false,
                                 default = nil)
  if valid_590207 != nil:
    section.add "key", valid_590207
  var valid_590208 = query.getOrDefault("sortOrder")
  valid_590208 = validateParameter(valid_590208, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_590208 != nil:
    section.add "sortOrder", valid_590208
  var valid_590209 = query.getOrDefault("prettyPrint")
  valid_590209 = validateParameter(valid_590209, JBool, required = false,
                                 default = newJBool(true))
  if valid_590209 != nil:
    section.add "prettyPrint", valid_590209
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590210: Call_DfareportingCreativeFieldValuesList_590192;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of creative field values, possibly filtered. This method supports paging.
  ## 
  let valid = call_590210.validator(path, query, header, formData, body)
  let scheme = call_590210.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590210.url(scheme.get, call_590210.host, call_590210.base,
                         call_590210.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590210, url, valid)

proc call*(call_590211: Call_DfareportingCreativeFieldValuesList_590192;
          profileId: string; creativeFieldId: string; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; sortField: string = "ID";
          alt: string = "json"; searchString: string = ""; oauthToken: string = "";
          userIp: string = ""; maxResults: int = 1000; ids: JsonNode = nil;
          key: string = ""; sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldValuesList
  ## Retrieves a list of creative field values, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for creative field values by their values. Wildcards (e.g. *) are not allowed.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creative field values with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590212 = newJObject()
  var query_590213 = newJObject()
  add(path_590212, "profileId", newJString(profileId))
  add(query_590213, "fields", newJString(fields))
  add(query_590213, "pageToken", newJString(pageToken))
  add(query_590213, "quotaUser", newJString(quotaUser))
  add(query_590213, "sortField", newJString(sortField))
  add(query_590213, "alt", newJString(alt))
  add(query_590213, "searchString", newJString(searchString))
  add(query_590213, "oauth_token", newJString(oauthToken))
  add(query_590213, "userIp", newJString(userIp))
  add(query_590213, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_590213.add "ids", ids
  add(query_590213, "key", newJString(key))
  add(query_590213, "sortOrder", newJString(sortOrder))
  add(path_590212, "creativeFieldId", newJString(creativeFieldId))
  add(query_590213, "prettyPrint", newJBool(prettyPrint))
  result = call_590211.call(path_590212, query_590213, nil, nil, nil)

var dfareportingCreativeFieldValuesList* = Call_DfareportingCreativeFieldValuesList_590192(
    name: "dfareportingCreativeFieldValuesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
    validator: validate_DfareportingCreativeFieldValuesList_590193,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesList_590194,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesPatch_590250 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativeFieldValuesPatch_590252(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesPatch_590251(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative field value. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590253 = path.getOrDefault("profileId")
  valid_590253 = validateParameter(valid_590253, JString, required = true,
                                 default = nil)
  if valid_590253 != nil:
    section.add "profileId", valid_590253
  var valid_590254 = path.getOrDefault("creativeFieldId")
  valid_590254 = validateParameter(valid_590254, JString, required = true,
                                 default = nil)
  if valid_590254 != nil:
    section.add "creativeFieldId", valid_590254
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Creative Field Value ID
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590255 = query.getOrDefault("fields")
  valid_590255 = validateParameter(valid_590255, JString, required = false,
                                 default = nil)
  if valid_590255 != nil:
    section.add "fields", valid_590255
  var valid_590256 = query.getOrDefault("quotaUser")
  valid_590256 = validateParameter(valid_590256, JString, required = false,
                                 default = nil)
  if valid_590256 != nil:
    section.add "quotaUser", valid_590256
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_590257 = query.getOrDefault("id")
  valid_590257 = validateParameter(valid_590257, JString, required = true,
                                 default = nil)
  if valid_590257 != nil:
    section.add "id", valid_590257
  var valid_590258 = query.getOrDefault("alt")
  valid_590258 = validateParameter(valid_590258, JString, required = false,
                                 default = newJString("json"))
  if valid_590258 != nil:
    section.add "alt", valid_590258
  var valid_590259 = query.getOrDefault("oauth_token")
  valid_590259 = validateParameter(valid_590259, JString, required = false,
                                 default = nil)
  if valid_590259 != nil:
    section.add "oauth_token", valid_590259
  var valid_590260 = query.getOrDefault("userIp")
  valid_590260 = validateParameter(valid_590260, JString, required = false,
                                 default = nil)
  if valid_590260 != nil:
    section.add "userIp", valid_590260
  var valid_590261 = query.getOrDefault("key")
  valid_590261 = validateParameter(valid_590261, JString, required = false,
                                 default = nil)
  if valid_590261 != nil:
    section.add "key", valid_590261
  var valid_590262 = query.getOrDefault("prettyPrint")
  valid_590262 = validateParameter(valid_590262, JBool, required = false,
                                 default = newJBool(true))
  if valid_590262 != nil:
    section.add "prettyPrint", valid_590262
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590264: Call_DfareportingCreativeFieldValuesPatch_590250;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative field value. This method supports patch semantics.
  ## 
  let valid = call_590264.validator(path, query, header, formData, body)
  let scheme = call_590264.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590264.url(scheme.get, call_590264.host, call_590264.base,
                         call_590264.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590264, url, valid)

proc call*(call_590265: Call_DfareportingCreativeFieldValuesPatch_590250;
          profileId: string; id: string; creativeFieldId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; body: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldValuesPatch
  ## Updates an existing creative field value. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Creative Field Value ID
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590266 = newJObject()
  var query_590267 = newJObject()
  var body_590268 = newJObject()
  add(path_590266, "profileId", newJString(profileId))
  add(query_590267, "fields", newJString(fields))
  add(query_590267, "quotaUser", newJString(quotaUser))
  add(query_590267, "id", newJString(id))
  add(query_590267, "alt", newJString(alt))
  add(query_590267, "oauth_token", newJString(oauthToken))
  add(query_590267, "userIp", newJString(userIp))
  add(query_590267, "key", newJString(key))
  add(path_590266, "creativeFieldId", newJString(creativeFieldId))
  if body != nil:
    body_590268 = body
  add(query_590267, "prettyPrint", newJBool(prettyPrint))
  result = call_590265.call(path_590266, query_590267, nil, nil, body_590268)

var dfareportingCreativeFieldValuesPatch* = Call_DfareportingCreativeFieldValuesPatch_590250(
    name: "dfareportingCreativeFieldValuesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
    validator: validate_DfareportingCreativeFieldValuesPatch_590251,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesPatch_590252,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesGet_590269 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativeFieldValuesGet_590271(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesGet_590270(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one creative field value by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative Field Value ID
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590272 = path.getOrDefault("profileId")
  valid_590272 = validateParameter(valid_590272, JString, required = true,
                                 default = nil)
  if valid_590272 != nil:
    section.add "profileId", valid_590272
  var valid_590273 = path.getOrDefault("id")
  valid_590273 = validateParameter(valid_590273, JString, required = true,
                                 default = nil)
  if valid_590273 != nil:
    section.add "id", valid_590273
  var valid_590274 = path.getOrDefault("creativeFieldId")
  valid_590274 = validateParameter(valid_590274, JString, required = true,
                                 default = nil)
  if valid_590274 != nil:
    section.add "creativeFieldId", valid_590274
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590275 = query.getOrDefault("fields")
  valid_590275 = validateParameter(valid_590275, JString, required = false,
                                 default = nil)
  if valid_590275 != nil:
    section.add "fields", valid_590275
  var valid_590276 = query.getOrDefault("quotaUser")
  valid_590276 = validateParameter(valid_590276, JString, required = false,
                                 default = nil)
  if valid_590276 != nil:
    section.add "quotaUser", valid_590276
  var valid_590277 = query.getOrDefault("alt")
  valid_590277 = validateParameter(valid_590277, JString, required = false,
                                 default = newJString("json"))
  if valid_590277 != nil:
    section.add "alt", valid_590277
  var valid_590278 = query.getOrDefault("oauth_token")
  valid_590278 = validateParameter(valid_590278, JString, required = false,
                                 default = nil)
  if valid_590278 != nil:
    section.add "oauth_token", valid_590278
  var valid_590279 = query.getOrDefault("userIp")
  valid_590279 = validateParameter(valid_590279, JString, required = false,
                                 default = nil)
  if valid_590279 != nil:
    section.add "userIp", valid_590279
  var valid_590280 = query.getOrDefault("key")
  valid_590280 = validateParameter(valid_590280, JString, required = false,
                                 default = nil)
  if valid_590280 != nil:
    section.add "key", valid_590280
  var valid_590281 = query.getOrDefault("prettyPrint")
  valid_590281 = validateParameter(valid_590281, JBool, required = false,
                                 default = newJBool(true))
  if valid_590281 != nil:
    section.add "prettyPrint", valid_590281
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590282: Call_DfareportingCreativeFieldValuesGet_590269;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one creative field value by ID.
  ## 
  let valid = call_590282.validator(path, query, header, formData, body)
  let scheme = call_590282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590282.url(scheme.get, call_590282.host, call_590282.base,
                         call_590282.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590282, url, valid)

proc call*(call_590283: Call_DfareportingCreativeFieldValuesGet_590269;
          profileId: string; id: string; creativeFieldId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldValuesGet
  ## Gets one creative field value by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Creative Field Value ID
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590284 = newJObject()
  var query_590285 = newJObject()
  add(path_590284, "profileId", newJString(profileId))
  add(query_590285, "fields", newJString(fields))
  add(query_590285, "quotaUser", newJString(quotaUser))
  add(query_590285, "alt", newJString(alt))
  add(query_590285, "oauth_token", newJString(oauthToken))
  add(query_590285, "userIp", newJString(userIp))
  add(path_590284, "id", newJString(id))
  add(query_590285, "key", newJString(key))
  add(path_590284, "creativeFieldId", newJString(creativeFieldId))
  add(query_590285, "prettyPrint", newJBool(prettyPrint))
  result = call_590283.call(path_590284, query_590285, nil, nil, nil)

var dfareportingCreativeFieldValuesGet* = Call_DfareportingCreativeFieldValuesGet_590269(
    name: "dfareportingCreativeFieldValuesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}",
    validator: validate_DfareportingCreativeFieldValuesGet_590270,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesGet_590271,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesDelete_590286 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativeFieldValuesDelete_590288(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesDelete_590287(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing creative field value.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative Field Value ID
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590289 = path.getOrDefault("profileId")
  valid_590289 = validateParameter(valid_590289, JString, required = true,
                                 default = nil)
  if valid_590289 != nil:
    section.add "profileId", valid_590289
  var valid_590290 = path.getOrDefault("id")
  valid_590290 = validateParameter(valid_590290, JString, required = true,
                                 default = nil)
  if valid_590290 != nil:
    section.add "id", valid_590290
  var valid_590291 = path.getOrDefault("creativeFieldId")
  valid_590291 = validateParameter(valid_590291, JString, required = true,
                                 default = nil)
  if valid_590291 != nil:
    section.add "creativeFieldId", valid_590291
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590292 = query.getOrDefault("fields")
  valid_590292 = validateParameter(valid_590292, JString, required = false,
                                 default = nil)
  if valid_590292 != nil:
    section.add "fields", valid_590292
  var valid_590293 = query.getOrDefault("quotaUser")
  valid_590293 = validateParameter(valid_590293, JString, required = false,
                                 default = nil)
  if valid_590293 != nil:
    section.add "quotaUser", valid_590293
  var valid_590294 = query.getOrDefault("alt")
  valid_590294 = validateParameter(valid_590294, JString, required = false,
                                 default = newJString("json"))
  if valid_590294 != nil:
    section.add "alt", valid_590294
  var valid_590295 = query.getOrDefault("oauth_token")
  valid_590295 = validateParameter(valid_590295, JString, required = false,
                                 default = nil)
  if valid_590295 != nil:
    section.add "oauth_token", valid_590295
  var valid_590296 = query.getOrDefault("userIp")
  valid_590296 = validateParameter(valid_590296, JString, required = false,
                                 default = nil)
  if valid_590296 != nil:
    section.add "userIp", valid_590296
  var valid_590297 = query.getOrDefault("key")
  valid_590297 = validateParameter(valid_590297, JString, required = false,
                                 default = nil)
  if valid_590297 != nil:
    section.add "key", valid_590297
  var valid_590298 = query.getOrDefault("prettyPrint")
  valid_590298 = validateParameter(valid_590298, JBool, required = false,
                                 default = newJBool(true))
  if valid_590298 != nil:
    section.add "prettyPrint", valid_590298
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590299: Call_DfareportingCreativeFieldValuesDelete_590286;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing creative field value.
  ## 
  let valid = call_590299.validator(path, query, header, formData, body)
  let scheme = call_590299.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590299.url(scheme.get, call_590299.host, call_590299.base,
                         call_590299.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590299, url, valid)

proc call*(call_590300: Call_DfareportingCreativeFieldValuesDelete_590286;
          profileId: string; id: string; creativeFieldId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldValuesDelete
  ## Deletes an existing creative field value.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Creative Field Value ID
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590301 = newJObject()
  var query_590302 = newJObject()
  add(path_590301, "profileId", newJString(profileId))
  add(query_590302, "fields", newJString(fields))
  add(query_590302, "quotaUser", newJString(quotaUser))
  add(query_590302, "alt", newJString(alt))
  add(query_590302, "oauth_token", newJString(oauthToken))
  add(query_590302, "userIp", newJString(userIp))
  add(path_590301, "id", newJString(id))
  add(query_590302, "key", newJString(key))
  add(path_590301, "creativeFieldId", newJString(creativeFieldId))
  add(query_590302, "prettyPrint", newJBool(prettyPrint))
  result = call_590300.call(path_590301, query_590302, nil, nil, nil)

var dfareportingCreativeFieldValuesDelete* = Call_DfareportingCreativeFieldValuesDelete_590286(
    name: "dfareportingCreativeFieldValuesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}",
    validator: validate_DfareportingCreativeFieldValuesDelete_590287,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesDelete_590288,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsGet_590303 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativeFieldsGet_590305(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsGet_590304(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one creative field by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative Field ID
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590306 = path.getOrDefault("profileId")
  valid_590306 = validateParameter(valid_590306, JString, required = true,
                                 default = nil)
  if valid_590306 != nil:
    section.add "profileId", valid_590306
  var valid_590307 = path.getOrDefault("id")
  valid_590307 = validateParameter(valid_590307, JString, required = true,
                                 default = nil)
  if valid_590307 != nil:
    section.add "id", valid_590307
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590308 = query.getOrDefault("fields")
  valid_590308 = validateParameter(valid_590308, JString, required = false,
                                 default = nil)
  if valid_590308 != nil:
    section.add "fields", valid_590308
  var valid_590309 = query.getOrDefault("quotaUser")
  valid_590309 = validateParameter(valid_590309, JString, required = false,
                                 default = nil)
  if valid_590309 != nil:
    section.add "quotaUser", valid_590309
  var valid_590310 = query.getOrDefault("alt")
  valid_590310 = validateParameter(valid_590310, JString, required = false,
                                 default = newJString("json"))
  if valid_590310 != nil:
    section.add "alt", valid_590310
  var valid_590311 = query.getOrDefault("oauth_token")
  valid_590311 = validateParameter(valid_590311, JString, required = false,
                                 default = nil)
  if valid_590311 != nil:
    section.add "oauth_token", valid_590311
  var valid_590312 = query.getOrDefault("userIp")
  valid_590312 = validateParameter(valid_590312, JString, required = false,
                                 default = nil)
  if valid_590312 != nil:
    section.add "userIp", valid_590312
  var valid_590313 = query.getOrDefault("key")
  valid_590313 = validateParameter(valid_590313, JString, required = false,
                                 default = nil)
  if valid_590313 != nil:
    section.add "key", valid_590313
  var valid_590314 = query.getOrDefault("prettyPrint")
  valid_590314 = validateParameter(valid_590314, JBool, required = false,
                                 default = newJBool(true))
  if valid_590314 != nil:
    section.add "prettyPrint", valid_590314
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590315: Call_DfareportingCreativeFieldsGet_590303; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one creative field by ID.
  ## 
  let valid = call_590315.validator(path, query, header, formData, body)
  let scheme = call_590315.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590315.url(scheme.get, call_590315.host, call_590315.base,
                         call_590315.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590315, url, valid)

proc call*(call_590316: Call_DfareportingCreativeFieldsGet_590303;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldsGet
  ## Gets one creative field by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Creative Field ID
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590317 = newJObject()
  var query_590318 = newJObject()
  add(path_590317, "profileId", newJString(profileId))
  add(query_590318, "fields", newJString(fields))
  add(query_590318, "quotaUser", newJString(quotaUser))
  add(query_590318, "alt", newJString(alt))
  add(query_590318, "oauth_token", newJString(oauthToken))
  add(query_590318, "userIp", newJString(userIp))
  add(path_590317, "id", newJString(id))
  add(query_590318, "key", newJString(key))
  add(query_590318, "prettyPrint", newJBool(prettyPrint))
  result = call_590316.call(path_590317, query_590318, nil, nil, nil)

var dfareportingCreativeFieldsGet* = Call_DfareportingCreativeFieldsGet_590303(
    name: "dfareportingCreativeFieldsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/creativeFields/{id}",
    validator: validate_DfareportingCreativeFieldsGet_590304,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsGet_590305,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsDelete_590319 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativeFieldsDelete_590321(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsDelete_590320(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing creative field.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative Field ID
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590322 = path.getOrDefault("profileId")
  valid_590322 = validateParameter(valid_590322, JString, required = true,
                                 default = nil)
  if valid_590322 != nil:
    section.add "profileId", valid_590322
  var valid_590323 = path.getOrDefault("id")
  valid_590323 = validateParameter(valid_590323, JString, required = true,
                                 default = nil)
  if valid_590323 != nil:
    section.add "id", valid_590323
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590324 = query.getOrDefault("fields")
  valid_590324 = validateParameter(valid_590324, JString, required = false,
                                 default = nil)
  if valid_590324 != nil:
    section.add "fields", valid_590324
  var valid_590325 = query.getOrDefault("quotaUser")
  valid_590325 = validateParameter(valid_590325, JString, required = false,
                                 default = nil)
  if valid_590325 != nil:
    section.add "quotaUser", valid_590325
  var valid_590326 = query.getOrDefault("alt")
  valid_590326 = validateParameter(valid_590326, JString, required = false,
                                 default = newJString("json"))
  if valid_590326 != nil:
    section.add "alt", valid_590326
  var valid_590327 = query.getOrDefault("oauth_token")
  valid_590327 = validateParameter(valid_590327, JString, required = false,
                                 default = nil)
  if valid_590327 != nil:
    section.add "oauth_token", valid_590327
  var valid_590328 = query.getOrDefault("userIp")
  valid_590328 = validateParameter(valid_590328, JString, required = false,
                                 default = nil)
  if valid_590328 != nil:
    section.add "userIp", valid_590328
  var valid_590329 = query.getOrDefault("key")
  valid_590329 = validateParameter(valid_590329, JString, required = false,
                                 default = nil)
  if valid_590329 != nil:
    section.add "key", valid_590329
  var valid_590330 = query.getOrDefault("prettyPrint")
  valid_590330 = validateParameter(valid_590330, JBool, required = false,
                                 default = newJBool(true))
  if valid_590330 != nil:
    section.add "prettyPrint", valid_590330
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590331: Call_DfareportingCreativeFieldsDelete_590319;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing creative field.
  ## 
  let valid = call_590331.validator(path, query, header, formData, body)
  let scheme = call_590331.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590331.url(scheme.get, call_590331.host, call_590331.base,
                         call_590331.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590331, url, valid)

proc call*(call_590332: Call_DfareportingCreativeFieldsDelete_590319;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldsDelete
  ## Deletes an existing creative field.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Creative Field ID
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590333 = newJObject()
  var query_590334 = newJObject()
  add(path_590333, "profileId", newJString(profileId))
  add(query_590334, "fields", newJString(fields))
  add(query_590334, "quotaUser", newJString(quotaUser))
  add(query_590334, "alt", newJString(alt))
  add(query_590334, "oauth_token", newJString(oauthToken))
  add(query_590334, "userIp", newJString(userIp))
  add(path_590333, "id", newJString(id))
  add(query_590334, "key", newJString(key))
  add(query_590334, "prettyPrint", newJBool(prettyPrint))
  result = call_590332.call(path_590333, query_590334, nil, nil, nil)

var dfareportingCreativeFieldsDelete* = Call_DfareportingCreativeFieldsDelete_590319(
    name: "dfareportingCreativeFieldsDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/creativeFields/{id}",
    validator: validate_DfareportingCreativeFieldsDelete_590320,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsDelete_590321,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsUpdate_590358 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativeGroupsUpdate_590360(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsUpdate_590359(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590361 = path.getOrDefault("profileId")
  valid_590361 = validateParameter(valid_590361, JString, required = true,
                                 default = nil)
  if valid_590361 != nil:
    section.add "profileId", valid_590361
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590362 = query.getOrDefault("fields")
  valid_590362 = validateParameter(valid_590362, JString, required = false,
                                 default = nil)
  if valid_590362 != nil:
    section.add "fields", valid_590362
  var valid_590363 = query.getOrDefault("quotaUser")
  valid_590363 = validateParameter(valid_590363, JString, required = false,
                                 default = nil)
  if valid_590363 != nil:
    section.add "quotaUser", valid_590363
  var valid_590364 = query.getOrDefault("alt")
  valid_590364 = validateParameter(valid_590364, JString, required = false,
                                 default = newJString("json"))
  if valid_590364 != nil:
    section.add "alt", valid_590364
  var valid_590365 = query.getOrDefault("oauth_token")
  valid_590365 = validateParameter(valid_590365, JString, required = false,
                                 default = nil)
  if valid_590365 != nil:
    section.add "oauth_token", valid_590365
  var valid_590366 = query.getOrDefault("userIp")
  valid_590366 = validateParameter(valid_590366, JString, required = false,
                                 default = nil)
  if valid_590366 != nil:
    section.add "userIp", valid_590366
  var valid_590367 = query.getOrDefault("key")
  valid_590367 = validateParameter(valid_590367, JString, required = false,
                                 default = nil)
  if valid_590367 != nil:
    section.add "key", valid_590367
  var valid_590368 = query.getOrDefault("prettyPrint")
  valid_590368 = validateParameter(valid_590368, JBool, required = false,
                                 default = newJBool(true))
  if valid_590368 != nil:
    section.add "prettyPrint", valid_590368
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590370: Call_DfareportingCreativeGroupsUpdate_590358;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative group.
  ## 
  let valid = call_590370.validator(path, query, header, formData, body)
  let scheme = call_590370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590370.url(scheme.get, call_590370.host, call_590370.base,
                         call_590370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590370, url, valid)

proc call*(call_590371: Call_DfareportingCreativeGroupsUpdate_590358;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeGroupsUpdate
  ## Updates an existing creative group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590372 = newJObject()
  var query_590373 = newJObject()
  var body_590374 = newJObject()
  add(path_590372, "profileId", newJString(profileId))
  add(query_590373, "fields", newJString(fields))
  add(query_590373, "quotaUser", newJString(quotaUser))
  add(query_590373, "alt", newJString(alt))
  add(query_590373, "oauth_token", newJString(oauthToken))
  add(query_590373, "userIp", newJString(userIp))
  add(query_590373, "key", newJString(key))
  if body != nil:
    body_590374 = body
  add(query_590373, "prettyPrint", newJBool(prettyPrint))
  result = call_590371.call(path_590372, query_590373, nil, nil, body_590374)

var dfareportingCreativeGroupsUpdate* = Call_DfareportingCreativeGroupsUpdate_590358(
    name: "dfareportingCreativeGroupsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeGroups",
    validator: validate_DfareportingCreativeGroupsUpdate_590359,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeGroupsUpdate_590360,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsInsert_590375 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativeGroupsInsert_590377(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsInsert_590376(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590378 = path.getOrDefault("profileId")
  valid_590378 = validateParameter(valid_590378, JString, required = true,
                                 default = nil)
  if valid_590378 != nil:
    section.add "profileId", valid_590378
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590379 = query.getOrDefault("fields")
  valid_590379 = validateParameter(valid_590379, JString, required = false,
                                 default = nil)
  if valid_590379 != nil:
    section.add "fields", valid_590379
  var valid_590380 = query.getOrDefault("quotaUser")
  valid_590380 = validateParameter(valid_590380, JString, required = false,
                                 default = nil)
  if valid_590380 != nil:
    section.add "quotaUser", valid_590380
  var valid_590381 = query.getOrDefault("alt")
  valid_590381 = validateParameter(valid_590381, JString, required = false,
                                 default = newJString("json"))
  if valid_590381 != nil:
    section.add "alt", valid_590381
  var valid_590382 = query.getOrDefault("oauth_token")
  valid_590382 = validateParameter(valid_590382, JString, required = false,
                                 default = nil)
  if valid_590382 != nil:
    section.add "oauth_token", valid_590382
  var valid_590383 = query.getOrDefault("userIp")
  valid_590383 = validateParameter(valid_590383, JString, required = false,
                                 default = nil)
  if valid_590383 != nil:
    section.add "userIp", valid_590383
  var valid_590384 = query.getOrDefault("key")
  valid_590384 = validateParameter(valid_590384, JString, required = false,
                                 default = nil)
  if valid_590384 != nil:
    section.add "key", valid_590384
  var valid_590385 = query.getOrDefault("prettyPrint")
  valid_590385 = validateParameter(valid_590385, JBool, required = false,
                                 default = newJBool(true))
  if valid_590385 != nil:
    section.add "prettyPrint", valid_590385
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590387: Call_DfareportingCreativeGroupsInsert_590375;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new creative group.
  ## 
  let valid = call_590387.validator(path, query, header, formData, body)
  let scheme = call_590387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590387.url(scheme.get, call_590387.host, call_590387.base,
                         call_590387.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590387, url, valid)

proc call*(call_590388: Call_DfareportingCreativeGroupsInsert_590375;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeGroupsInsert
  ## Inserts a new creative group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590389 = newJObject()
  var query_590390 = newJObject()
  var body_590391 = newJObject()
  add(path_590389, "profileId", newJString(profileId))
  add(query_590390, "fields", newJString(fields))
  add(query_590390, "quotaUser", newJString(quotaUser))
  add(query_590390, "alt", newJString(alt))
  add(query_590390, "oauth_token", newJString(oauthToken))
  add(query_590390, "userIp", newJString(userIp))
  add(query_590390, "key", newJString(key))
  if body != nil:
    body_590391 = body
  add(query_590390, "prettyPrint", newJBool(prettyPrint))
  result = call_590388.call(path_590389, query_590390, nil, nil, body_590391)

var dfareportingCreativeGroupsInsert* = Call_DfareportingCreativeGroupsInsert_590375(
    name: "dfareportingCreativeGroupsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeGroups",
    validator: validate_DfareportingCreativeGroupsInsert_590376,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeGroupsInsert_590377,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsList_590335 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativeGroupsList_590337(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsList_590336(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of creative groups, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590338 = path.getOrDefault("profileId")
  valid_590338 = validateParameter(valid_590338, JString, required = true,
                                 default = nil)
  if valid_590338 != nil:
    section.add "profileId", valid_590338
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for creative groups by name or ID. Wildcards (*) are allowed. For example, "creativegroup*2015" will return creative groups with names like "creativegroup June 2015", "creativegroup April 2015", or simply "creativegroup 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativegroup" will match creative groups with the name "my creativegroup", "creativegroup 2015", or simply "creativegroup".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creative groups with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only creative groups that belong to these advertisers.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   groupNumber: JInt
  ##              : Select only creative groups that belong to this subgroup.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590339 = query.getOrDefault("fields")
  valid_590339 = validateParameter(valid_590339, JString, required = false,
                                 default = nil)
  if valid_590339 != nil:
    section.add "fields", valid_590339
  var valid_590340 = query.getOrDefault("pageToken")
  valid_590340 = validateParameter(valid_590340, JString, required = false,
                                 default = nil)
  if valid_590340 != nil:
    section.add "pageToken", valid_590340
  var valid_590341 = query.getOrDefault("quotaUser")
  valid_590341 = validateParameter(valid_590341, JString, required = false,
                                 default = nil)
  if valid_590341 != nil:
    section.add "quotaUser", valid_590341
  var valid_590342 = query.getOrDefault("sortField")
  valid_590342 = validateParameter(valid_590342, JString, required = false,
                                 default = newJString("ID"))
  if valid_590342 != nil:
    section.add "sortField", valid_590342
  var valid_590343 = query.getOrDefault("alt")
  valid_590343 = validateParameter(valid_590343, JString, required = false,
                                 default = newJString("json"))
  if valid_590343 != nil:
    section.add "alt", valid_590343
  var valid_590344 = query.getOrDefault("searchString")
  valid_590344 = validateParameter(valid_590344, JString, required = false,
                                 default = nil)
  if valid_590344 != nil:
    section.add "searchString", valid_590344
  var valid_590345 = query.getOrDefault("oauth_token")
  valid_590345 = validateParameter(valid_590345, JString, required = false,
                                 default = nil)
  if valid_590345 != nil:
    section.add "oauth_token", valid_590345
  var valid_590346 = query.getOrDefault("userIp")
  valid_590346 = validateParameter(valid_590346, JString, required = false,
                                 default = nil)
  if valid_590346 != nil:
    section.add "userIp", valid_590346
  var valid_590347 = query.getOrDefault("maxResults")
  valid_590347 = validateParameter(valid_590347, JInt, required = false,
                                 default = newJInt(1000))
  if valid_590347 != nil:
    section.add "maxResults", valid_590347
  var valid_590348 = query.getOrDefault("ids")
  valid_590348 = validateParameter(valid_590348, JArray, required = false,
                                 default = nil)
  if valid_590348 != nil:
    section.add "ids", valid_590348
  var valid_590349 = query.getOrDefault("key")
  valid_590349 = validateParameter(valid_590349, JString, required = false,
                                 default = nil)
  if valid_590349 != nil:
    section.add "key", valid_590349
  var valid_590350 = query.getOrDefault("advertiserIds")
  valid_590350 = validateParameter(valid_590350, JArray, required = false,
                                 default = nil)
  if valid_590350 != nil:
    section.add "advertiserIds", valid_590350
  var valid_590351 = query.getOrDefault("sortOrder")
  valid_590351 = validateParameter(valid_590351, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_590351 != nil:
    section.add "sortOrder", valid_590351
  var valid_590352 = query.getOrDefault("groupNumber")
  valid_590352 = validateParameter(valid_590352, JInt, required = false, default = nil)
  if valid_590352 != nil:
    section.add "groupNumber", valid_590352
  var valid_590353 = query.getOrDefault("prettyPrint")
  valid_590353 = validateParameter(valid_590353, JBool, required = false,
                                 default = newJBool(true))
  if valid_590353 != nil:
    section.add "prettyPrint", valid_590353
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590354: Call_DfareportingCreativeGroupsList_590335; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of creative groups, possibly filtered. This method supports paging.
  ## 
  let valid = call_590354.validator(path, query, header, formData, body)
  let scheme = call_590354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590354.url(scheme.get, call_590354.host, call_590354.base,
                         call_590354.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590354, url, valid)

proc call*(call_590355: Call_DfareportingCreativeGroupsList_590335;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          advertiserIds: JsonNode = nil; sortOrder: string = "ASCENDING";
          groupNumber: int = 0; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeGroupsList
  ## Retrieves a list of creative groups, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for creative groups by name or ID. Wildcards (*) are allowed. For example, "creativegroup*2015" will return creative groups with names like "creativegroup June 2015", "creativegroup April 2015", or simply "creativegroup 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativegroup" will match creative groups with the name "my creativegroup", "creativegroup 2015", or simply "creativegroup".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creative groups with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only creative groups that belong to these advertisers.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   groupNumber: int
  ##              : Select only creative groups that belong to this subgroup.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590356 = newJObject()
  var query_590357 = newJObject()
  add(path_590356, "profileId", newJString(profileId))
  add(query_590357, "fields", newJString(fields))
  add(query_590357, "pageToken", newJString(pageToken))
  add(query_590357, "quotaUser", newJString(quotaUser))
  add(query_590357, "sortField", newJString(sortField))
  add(query_590357, "alt", newJString(alt))
  add(query_590357, "searchString", newJString(searchString))
  add(query_590357, "oauth_token", newJString(oauthToken))
  add(query_590357, "userIp", newJString(userIp))
  add(query_590357, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_590357.add "ids", ids
  add(query_590357, "key", newJString(key))
  if advertiserIds != nil:
    query_590357.add "advertiserIds", advertiserIds
  add(query_590357, "sortOrder", newJString(sortOrder))
  add(query_590357, "groupNumber", newJInt(groupNumber))
  add(query_590357, "prettyPrint", newJBool(prettyPrint))
  result = call_590355.call(path_590356, query_590357, nil, nil, nil)

var dfareportingCreativeGroupsList* = Call_DfareportingCreativeGroupsList_590335(
    name: "dfareportingCreativeGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeGroups",
    validator: validate_DfareportingCreativeGroupsList_590336,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeGroupsList_590337,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsPatch_590392 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativeGroupsPatch_590394(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsPatch_590393(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative group. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590395 = path.getOrDefault("profileId")
  valid_590395 = validateParameter(valid_590395, JString, required = true,
                                 default = nil)
  if valid_590395 != nil:
    section.add "profileId", valid_590395
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Creative group ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590396 = query.getOrDefault("fields")
  valid_590396 = validateParameter(valid_590396, JString, required = false,
                                 default = nil)
  if valid_590396 != nil:
    section.add "fields", valid_590396
  var valid_590397 = query.getOrDefault("quotaUser")
  valid_590397 = validateParameter(valid_590397, JString, required = false,
                                 default = nil)
  if valid_590397 != nil:
    section.add "quotaUser", valid_590397
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_590398 = query.getOrDefault("id")
  valid_590398 = validateParameter(valid_590398, JString, required = true,
                                 default = nil)
  if valid_590398 != nil:
    section.add "id", valid_590398
  var valid_590399 = query.getOrDefault("alt")
  valid_590399 = validateParameter(valid_590399, JString, required = false,
                                 default = newJString("json"))
  if valid_590399 != nil:
    section.add "alt", valid_590399
  var valid_590400 = query.getOrDefault("oauth_token")
  valid_590400 = validateParameter(valid_590400, JString, required = false,
                                 default = nil)
  if valid_590400 != nil:
    section.add "oauth_token", valid_590400
  var valid_590401 = query.getOrDefault("userIp")
  valid_590401 = validateParameter(valid_590401, JString, required = false,
                                 default = nil)
  if valid_590401 != nil:
    section.add "userIp", valid_590401
  var valid_590402 = query.getOrDefault("key")
  valid_590402 = validateParameter(valid_590402, JString, required = false,
                                 default = nil)
  if valid_590402 != nil:
    section.add "key", valid_590402
  var valid_590403 = query.getOrDefault("prettyPrint")
  valid_590403 = validateParameter(valid_590403, JBool, required = false,
                                 default = newJBool(true))
  if valid_590403 != nil:
    section.add "prettyPrint", valid_590403
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590405: Call_DfareportingCreativeGroupsPatch_590392;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative group. This method supports patch semantics.
  ## 
  let valid = call_590405.validator(path, query, header, formData, body)
  let scheme = call_590405.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590405.url(scheme.get, call_590405.host, call_590405.base,
                         call_590405.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590405, url, valid)

proc call*(call_590406: Call_DfareportingCreativeGroupsPatch_590392;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeGroupsPatch
  ## Updates an existing creative group. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Creative group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590407 = newJObject()
  var query_590408 = newJObject()
  var body_590409 = newJObject()
  add(path_590407, "profileId", newJString(profileId))
  add(query_590408, "fields", newJString(fields))
  add(query_590408, "quotaUser", newJString(quotaUser))
  add(query_590408, "id", newJString(id))
  add(query_590408, "alt", newJString(alt))
  add(query_590408, "oauth_token", newJString(oauthToken))
  add(query_590408, "userIp", newJString(userIp))
  add(query_590408, "key", newJString(key))
  if body != nil:
    body_590409 = body
  add(query_590408, "prettyPrint", newJBool(prettyPrint))
  result = call_590406.call(path_590407, query_590408, nil, nil, body_590409)

var dfareportingCreativeGroupsPatch* = Call_DfareportingCreativeGroupsPatch_590392(
    name: "dfareportingCreativeGroupsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeGroups",
    validator: validate_DfareportingCreativeGroupsPatch_590393,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeGroupsPatch_590394,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsGet_590410 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativeGroupsGet_590412(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsGet_590411(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one creative group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590413 = path.getOrDefault("profileId")
  valid_590413 = validateParameter(valid_590413, JString, required = true,
                                 default = nil)
  if valid_590413 != nil:
    section.add "profileId", valid_590413
  var valid_590414 = path.getOrDefault("id")
  valid_590414 = validateParameter(valid_590414, JString, required = true,
                                 default = nil)
  if valid_590414 != nil:
    section.add "id", valid_590414
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590415 = query.getOrDefault("fields")
  valid_590415 = validateParameter(valid_590415, JString, required = false,
                                 default = nil)
  if valid_590415 != nil:
    section.add "fields", valid_590415
  var valid_590416 = query.getOrDefault("quotaUser")
  valid_590416 = validateParameter(valid_590416, JString, required = false,
                                 default = nil)
  if valid_590416 != nil:
    section.add "quotaUser", valid_590416
  var valid_590417 = query.getOrDefault("alt")
  valid_590417 = validateParameter(valid_590417, JString, required = false,
                                 default = newJString("json"))
  if valid_590417 != nil:
    section.add "alt", valid_590417
  var valid_590418 = query.getOrDefault("oauth_token")
  valid_590418 = validateParameter(valid_590418, JString, required = false,
                                 default = nil)
  if valid_590418 != nil:
    section.add "oauth_token", valid_590418
  var valid_590419 = query.getOrDefault("userIp")
  valid_590419 = validateParameter(valid_590419, JString, required = false,
                                 default = nil)
  if valid_590419 != nil:
    section.add "userIp", valid_590419
  var valid_590420 = query.getOrDefault("key")
  valid_590420 = validateParameter(valid_590420, JString, required = false,
                                 default = nil)
  if valid_590420 != nil:
    section.add "key", valid_590420
  var valid_590421 = query.getOrDefault("prettyPrint")
  valid_590421 = validateParameter(valid_590421, JBool, required = false,
                                 default = newJBool(true))
  if valid_590421 != nil:
    section.add "prettyPrint", valid_590421
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590422: Call_DfareportingCreativeGroupsGet_590410; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one creative group by ID.
  ## 
  let valid = call_590422.validator(path, query, header, formData, body)
  let scheme = call_590422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590422.url(scheme.get, call_590422.host, call_590422.base,
                         call_590422.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590422, url, valid)

proc call*(call_590423: Call_DfareportingCreativeGroupsGet_590410;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeGroupsGet
  ## Gets one creative group by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Creative group ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590424 = newJObject()
  var query_590425 = newJObject()
  add(path_590424, "profileId", newJString(profileId))
  add(query_590425, "fields", newJString(fields))
  add(query_590425, "quotaUser", newJString(quotaUser))
  add(query_590425, "alt", newJString(alt))
  add(query_590425, "oauth_token", newJString(oauthToken))
  add(query_590425, "userIp", newJString(userIp))
  add(path_590424, "id", newJString(id))
  add(query_590425, "key", newJString(key))
  add(query_590425, "prettyPrint", newJBool(prettyPrint))
  result = call_590423.call(path_590424, query_590425, nil, nil, nil)

var dfareportingCreativeGroupsGet* = Call_DfareportingCreativeGroupsGet_590410(
    name: "dfareportingCreativeGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/creativeGroups/{id}",
    validator: validate_DfareportingCreativeGroupsGet_590411,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeGroupsGet_590412,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesUpdate_590457 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativesUpdate_590459(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesUpdate_590458(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590460 = path.getOrDefault("profileId")
  valid_590460 = validateParameter(valid_590460, JString, required = true,
                                 default = nil)
  if valid_590460 != nil:
    section.add "profileId", valid_590460
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590461 = query.getOrDefault("fields")
  valid_590461 = validateParameter(valid_590461, JString, required = false,
                                 default = nil)
  if valid_590461 != nil:
    section.add "fields", valid_590461
  var valid_590462 = query.getOrDefault("quotaUser")
  valid_590462 = validateParameter(valid_590462, JString, required = false,
                                 default = nil)
  if valid_590462 != nil:
    section.add "quotaUser", valid_590462
  var valid_590463 = query.getOrDefault("alt")
  valid_590463 = validateParameter(valid_590463, JString, required = false,
                                 default = newJString("json"))
  if valid_590463 != nil:
    section.add "alt", valid_590463
  var valid_590464 = query.getOrDefault("oauth_token")
  valid_590464 = validateParameter(valid_590464, JString, required = false,
                                 default = nil)
  if valid_590464 != nil:
    section.add "oauth_token", valid_590464
  var valid_590465 = query.getOrDefault("userIp")
  valid_590465 = validateParameter(valid_590465, JString, required = false,
                                 default = nil)
  if valid_590465 != nil:
    section.add "userIp", valid_590465
  var valid_590466 = query.getOrDefault("key")
  valid_590466 = validateParameter(valid_590466, JString, required = false,
                                 default = nil)
  if valid_590466 != nil:
    section.add "key", valid_590466
  var valid_590467 = query.getOrDefault("prettyPrint")
  valid_590467 = validateParameter(valid_590467, JBool, required = false,
                                 default = newJBool(true))
  if valid_590467 != nil:
    section.add "prettyPrint", valid_590467
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590469: Call_DfareportingCreativesUpdate_590457; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing creative.
  ## 
  let valid = call_590469.validator(path, query, header, formData, body)
  let scheme = call_590469.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590469.url(scheme.get, call_590469.host, call_590469.base,
                         call_590469.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590469, url, valid)

proc call*(call_590470: Call_DfareportingCreativesUpdate_590457; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativesUpdate
  ## Updates an existing creative.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590471 = newJObject()
  var query_590472 = newJObject()
  var body_590473 = newJObject()
  add(path_590471, "profileId", newJString(profileId))
  add(query_590472, "fields", newJString(fields))
  add(query_590472, "quotaUser", newJString(quotaUser))
  add(query_590472, "alt", newJString(alt))
  add(query_590472, "oauth_token", newJString(oauthToken))
  add(query_590472, "userIp", newJString(userIp))
  add(query_590472, "key", newJString(key))
  if body != nil:
    body_590473 = body
  add(query_590472, "prettyPrint", newJBool(prettyPrint))
  result = call_590470.call(path_590471, query_590472, nil, nil, body_590473)

var dfareportingCreativesUpdate* = Call_DfareportingCreativesUpdate_590457(
    name: "dfareportingCreativesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives",
    validator: validate_DfareportingCreativesUpdate_590458,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativesUpdate_590459,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesInsert_590474 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativesInsert_590476(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesInsert_590475(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590477 = path.getOrDefault("profileId")
  valid_590477 = validateParameter(valid_590477, JString, required = true,
                                 default = nil)
  if valid_590477 != nil:
    section.add "profileId", valid_590477
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590478 = query.getOrDefault("fields")
  valid_590478 = validateParameter(valid_590478, JString, required = false,
                                 default = nil)
  if valid_590478 != nil:
    section.add "fields", valid_590478
  var valid_590479 = query.getOrDefault("quotaUser")
  valid_590479 = validateParameter(valid_590479, JString, required = false,
                                 default = nil)
  if valid_590479 != nil:
    section.add "quotaUser", valid_590479
  var valid_590480 = query.getOrDefault("alt")
  valid_590480 = validateParameter(valid_590480, JString, required = false,
                                 default = newJString("json"))
  if valid_590480 != nil:
    section.add "alt", valid_590480
  var valid_590481 = query.getOrDefault("oauth_token")
  valid_590481 = validateParameter(valid_590481, JString, required = false,
                                 default = nil)
  if valid_590481 != nil:
    section.add "oauth_token", valid_590481
  var valid_590482 = query.getOrDefault("userIp")
  valid_590482 = validateParameter(valid_590482, JString, required = false,
                                 default = nil)
  if valid_590482 != nil:
    section.add "userIp", valid_590482
  var valid_590483 = query.getOrDefault("key")
  valid_590483 = validateParameter(valid_590483, JString, required = false,
                                 default = nil)
  if valid_590483 != nil:
    section.add "key", valid_590483
  var valid_590484 = query.getOrDefault("prettyPrint")
  valid_590484 = validateParameter(valid_590484, JBool, required = false,
                                 default = newJBool(true))
  if valid_590484 != nil:
    section.add "prettyPrint", valid_590484
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590486: Call_DfareportingCreativesInsert_590474; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new creative.
  ## 
  let valid = call_590486.validator(path, query, header, formData, body)
  let scheme = call_590486.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590486.url(scheme.get, call_590486.host, call_590486.base,
                         call_590486.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590486, url, valid)

proc call*(call_590487: Call_DfareportingCreativesInsert_590474; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativesInsert
  ## Inserts a new creative.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590488 = newJObject()
  var query_590489 = newJObject()
  var body_590490 = newJObject()
  add(path_590488, "profileId", newJString(profileId))
  add(query_590489, "fields", newJString(fields))
  add(query_590489, "quotaUser", newJString(quotaUser))
  add(query_590489, "alt", newJString(alt))
  add(query_590489, "oauth_token", newJString(oauthToken))
  add(query_590489, "userIp", newJString(userIp))
  add(query_590489, "key", newJString(key))
  if body != nil:
    body_590490 = body
  add(query_590489, "prettyPrint", newJBool(prettyPrint))
  result = call_590487.call(path_590488, query_590489, nil, nil, body_590490)

var dfareportingCreativesInsert* = Call_DfareportingCreativesInsert_590474(
    name: "dfareportingCreativesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives",
    validator: validate_DfareportingCreativesInsert_590475,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativesInsert_590476,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesList_590426 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativesList_590428(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesList_590427(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of creatives, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590429 = path.getOrDefault("profileId")
  valid_590429 = validateParameter(valid_590429, JString, required = true,
                                 default = nil)
  if valid_590429 != nil:
    section.add "profileId", valid_590429
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "creative*2015" will return objects with names like "creative June 2015", "creative April 2015", or simply "creative 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "creative" will match objects with name "my creative", "creative 2015", or simply "creative".
  ##   advertiserId: JString
  ##               : Select only creatives with this advertiser ID.
  ##   types: JArray
  ##        : Select only creatives with these creative types.
  ##   sizeIds: JArray
  ##          : Select only creatives with these size IDs.
  ##   active: JBool
  ##         : Select only active creatives. Leave blank to select active and inactive creatives.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   studioCreativeId: JString
  ##                   : Select only creatives corresponding to this Studio creative ID.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   renderingIds: JArray
  ##               : Select only creatives with these rendering IDs.
  ##   archived: JBool
  ##           : Select only archived creatives. Leave blank to select archived and unarchived creatives.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creatives with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   creativeFieldIds: JArray
  ##                   : Select only creatives with these creative field IDs.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   companionCreativeIds: JArray
  ##                       : Select only in-stream video creatives with these companion IDs.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   campaignId: JString
  ##             : Select only creatives with this campaign ID.
  section = newJObject()
  var valid_590430 = query.getOrDefault("fields")
  valid_590430 = validateParameter(valid_590430, JString, required = false,
                                 default = nil)
  if valid_590430 != nil:
    section.add "fields", valid_590430
  var valid_590431 = query.getOrDefault("pageToken")
  valid_590431 = validateParameter(valid_590431, JString, required = false,
                                 default = nil)
  if valid_590431 != nil:
    section.add "pageToken", valid_590431
  var valid_590432 = query.getOrDefault("quotaUser")
  valid_590432 = validateParameter(valid_590432, JString, required = false,
                                 default = nil)
  if valid_590432 != nil:
    section.add "quotaUser", valid_590432
  var valid_590433 = query.getOrDefault("sortField")
  valid_590433 = validateParameter(valid_590433, JString, required = false,
                                 default = newJString("ID"))
  if valid_590433 != nil:
    section.add "sortField", valid_590433
  var valid_590434 = query.getOrDefault("alt")
  valid_590434 = validateParameter(valid_590434, JString, required = false,
                                 default = newJString("json"))
  if valid_590434 != nil:
    section.add "alt", valid_590434
  var valid_590435 = query.getOrDefault("searchString")
  valid_590435 = validateParameter(valid_590435, JString, required = false,
                                 default = nil)
  if valid_590435 != nil:
    section.add "searchString", valid_590435
  var valid_590436 = query.getOrDefault("advertiserId")
  valid_590436 = validateParameter(valid_590436, JString, required = false,
                                 default = nil)
  if valid_590436 != nil:
    section.add "advertiserId", valid_590436
  var valid_590437 = query.getOrDefault("types")
  valid_590437 = validateParameter(valid_590437, JArray, required = false,
                                 default = nil)
  if valid_590437 != nil:
    section.add "types", valid_590437
  var valid_590438 = query.getOrDefault("sizeIds")
  valid_590438 = validateParameter(valid_590438, JArray, required = false,
                                 default = nil)
  if valid_590438 != nil:
    section.add "sizeIds", valid_590438
  var valid_590439 = query.getOrDefault("active")
  valid_590439 = validateParameter(valid_590439, JBool, required = false, default = nil)
  if valid_590439 != nil:
    section.add "active", valid_590439
  var valid_590440 = query.getOrDefault("oauth_token")
  valid_590440 = validateParameter(valid_590440, JString, required = false,
                                 default = nil)
  if valid_590440 != nil:
    section.add "oauth_token", valid_590440
  var valid_590441 = query.getOrDefault("studioCreativeId")
  valid_590441 = validateParameter(valid_590441, JString, required = false,
                                 default = nil)
  if valid_590441 != nil:
    section.add "studioCreativeId", valid_590441
  var valid_590442 = query.getOrDefault("userIp")
  valid_590442 = validateParameter(valid_590442, JString, required = false,
                                 default = nil)
  if valid_590442 != nil:
    section.add "userIp", valid_590442
  var valid_590443 = query.getOrDefault("renderingIds")
  valid_590443 = validateParameter(valid_590443, JArray, required = false,
                                 default = nil)
  if valid_590443 != nil:
    section.add "renderingIds", valid_590443
  var valid_590444 = query.getOrDefault("archived")
  valid_590444 = validateParameter(valid_590444, JBool, required = false, default = nil)
  if valid_590444 != nil:
    section.add "archived", valid_590444
  var valid_590445 = query.getOrDefault("maxResults")
  valid_590445 = validateParameter(valid_590445, JInt, required = false,
                                 default = newJInt(1000))
  if valid_590445 != nil:
    section.add "maxResults", valid_590445
  var valid_590446 = query.getOrDefault("ids")
  valid_590446 = validateParameter(valid_590446, JArray, required = false,
                                 default = nil)
  if valid_590446 != nil:
    section.add "ids", valid_590446
  var valid_590447 = query.getOrDefault("key")
  valid_590447 = validateParameter(valid_590447, JString, required = false,
                                 default = nil)
  if valid_590447 != nil:
    section.add "key", valid_590447
  var valid_590448 = query.getOrDefault("creativeFieldIds")
  valid_590448 = validateParameter(valid_590448, JArray, required = false,
                                 default = nil)
  if valid_590448 != nil:
    section.add "creativeFieldIds", valid_590448
  var valid_590449 = query.getOrDefault("sortOrder")
  valid_590449 = validateParameter(valid_590449, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_590449 != nil:
    section.add "sortOrder", valid_590449
  var valid_590450 = query.getOrDefault("companionCreativeIds")
  valid_590450 = validateParameter(valid_590450, JArray, required = false,
                                 default = nil)
  if valid_590450 != nil:
    section.add "companionCreativeIds", valid_590450
  var valid_590451 = query.getOrDefault("prettyPrint")
  valid_590451 = validateParameter(valid_590451, JBool, required = false,
                                 default = newJBool(true))
  if valid_590451 != nil:
    section.add "prettyPrint", valid_590451
  var valid_590452 = query.getOrDefault("campaignId")
  valid_590452 = validateParameter(valid_590452, JString, required = false,
                                 default = nil)
  if valid_590452 != nil:
    section.add "campaignId", valid_590452
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590453: Call_DfareportingCreativesList_590426; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of creatives, possibly filtered. This method supports paging.
  ## 
  let valid = call_590453.validator(path, query, header, formData, body)
  let scheme = call_590453.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590453.url(scheme.get, call_590453.host, call_590453.base,
                         call_590453.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590453, url, valid)

proc call*(call_590454: Call_DfareportingCreativesList_590426; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "ID"; alt: string = "json"; searchString: string = "";
          advertiserId: string = ""; types: JsonNode = nil; sizeIds: JsonNode = nil;
          active: bool = false; oauthToken: string = ""; studioCreativeId: string = "";
          userIp: string = ""; renderingIds: JsonNode = nil; archived: bool = false;
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          creativeFieldIds: JsonNode = nil; sortOrder: string = "ASCENDING";
          companionCreativeIds: JsonNode = nil; prettyPrint: bool = true;
          campaignId: string = ""): Recallable =
  ## dfareportingCreativesList
  ## Retrieves a list of creatives, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "creative*2015" will return objects with names like "creative June 2015", "creative April 2015", or simply "creative 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "creative" will match objects with name "my creative", "creative 2015", or simply "creative".
  ##   advertiserId: string
  ##               : Select only creatives with this advertiser ID.
  ##   types: JArray
  ##        : Select only creatives with these creative types.
  ##   sizeIds: JArray
  ##          : Select only creatives with these size IDs.
  ##   active: bool
  ##         : Select only active creatives. Leave blank to select active and inactive creatives.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   studioCreativeId: string
  ##                   : Select only creatives corresponding to this Studio creative ID.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   renderingIds: JArray
  ##               : Select only creatives with these rendering IDs.
  ##   archived: bool
  ##           : Select only archived creatives. Leave blank to select archived and unarchived creatives.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creatives with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   creativeFieldIds: JArray
  ##                   : Select only creatives with these creative field IDs.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   companionCreativeIds: JArray
  ##                       : Select only in-stream video creatives with these companion IDs.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   campaignId: string
  ##             : Select only creatives with this campaign ID.
  var path_590455 = newJObject()
  var query_590456 = newJObject()
  add(path_590455, "profileId", newJString(profileId))
  add(query_590456, "fields", newJString(fields))
  add(query_590456, "pageToken", newJString(pageToken))
  add(query_590456, "quotaUser", newJString(quotaUser))
  add(query_590456, "sortField", newJString(sortField))
  add(query_590456, "alt", newJString(alt))
  add(query_590456, "searchString", newJString(searchString))
  add(query_590456, "advertiserId", newJString(advertiserId))
  if types != nil:
    query_590456.add "types", types
  if sizeIds != nil:
    query_590456.add "sizeIds", sizeIds
  add(query_590456, "active", newJBool(active))
  add(query_590456, "oauth_token", newJString(oauthToken))
  add(query_590456, "studioCreativeId", newJString(studioCreativeId))
  add(query_590456, "userIp", newJString(userIp))
  if renderingIds != nil:
    query_590456.add "renderingIds", renderingIds
  add(query_590456, "archived", newJBool(archived))
  add(query_590456, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_590456.add "ids", ids
  add(query_590456, "key", newJString(key))
  if creativeFieldIds != nil:
    query_590456.add "creativeFieldIds", creativeFieldIds
  add(query_590456, "sortOrder", newJString(sortOrder))
  if companionCreativeIds != nil:
    query_590456.add "companionCreativeIds", companionCreativeIds
  add(query_590456, "prettyPrint", newJBool(prettyPrint))
  add(query_590456, "campaignId", newJString(campaignId))
  result = call_590454.call(path_590455, query_590456, nil, nil, nil)

var dfareportingCreativesList* = Call_DfareportingCreativesList_590426(
    name: "dfareportingCreativesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives",
    validator: validate_DfareportingCreativesList_590427,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativesList_590428,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesPatch_590491 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativesPatch_590493(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesPatch_590492(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590494 = path.getOrDefault("profileId")
  valid_590494 = validateParameter(valid_590494, JString, required = true,
                                 default = nil)
  if valid_590494 != nil:
    section.add "profileId", valid_590494
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Creative ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590495 = query.getOrDefault("fields")
  valid_590495 = validateParameter(valid_590495, JString, required = false,
                                 default = nil)
  if valid_590495 != nil:
    section.add "fields", valid_590495
  var valid_590496 = query.getOrDefault("quotaUser")
  valid_590496 = validateParameter(valid_590496, JString, required = false,
                                 default = nil)
  if valid_590496 != nil:
    section.add "quotaUser", valid_590496
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_590497 = query.getOrDefault("id")
  valid_590497 = validateParameter(valid_590497, JString, required = true,
                                 default = nil)
  if valid_590497 != nil:
    section.add "id", valid_590497
  var valid_590498 = query.getOrDefault("alt")
  valid_590498 = validateParameter(valid_590498, JString, required = false,
                                 default = newJString("json"))
  if valid_590498 != nil:
    section.add "alt", valid_590498
  var valid_590499 = query.getOrDefault("oauth_token")
  valid_590499 = validateParameter(valid_590499, JString, required = false,
                                 default = nil)
  if valid_590499 != nil:
    section.add "oauth_token", valid_590499
  var valid_590500 = query.getOrDefault("userIp")
  valid_590500 = validateParameter(valid_590500, JString, required = false,
                                 default = nil)
  if valid_590500 != nil:
    section.add "userIp", valid_590500
  var valid_590501 = query.getOrDefault("key")
  valid_590501 = validateParameter(valid_590501, JString, required = false,
                                 default = nil)
  if valid_590501 != nil:
    section.add "key", valid_590501
  var valid_590502 = query.getOrDefault("prettyPrint")
  valid_590502 = validateParameter(valid_590502, JBool, required = false,
                                 default = newJBool(true))
  if valid_590502 != nil:
    section.add "prettyPrint", valid_590502
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590504: Call_DfareportingCreativesPatch_590491; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing creative. This method supports patch semantics.
  ## 
  let valid = call_590504.validator(path, query, header, formData, body)
  let scheme = call_590504.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590504.url(scheme.get, call_590504.host, call_590504.base,
                         call_590504.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590504, url, valid)

proc call*(call_590505: Call_DfareportingCreativesPatch_590491; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativesPatch
  ## Updates an existing creative. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Creative ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590506 = newJObject()
  var query_590507 = newJObject()
  var body_590508 = newJObject()
  add(path_590506, "profileId", newJString(profileId))
  add(query_590507, "fields", newJString(fields))
  add(query_590507, "quotaUser", newJString(quotaUser))
  add(query_590507, "id", newJString(id))
  add(query_590507, "alt", newJString(alt))
  add(query_590507, "oauth_token", newJString(oauthToken))
  add(query_590507, "userIp", newJString(userIp))
  add(query_590507, "key", newJString(key))
  if body != nil:
    body_590508 = body
  add(query_590507, "prettyPrint", newJBool(prettyPrint))
  result = call_590505.call(path_590506, query_590507, nil, nil, body_590508)

var dfareportingCreativesPatch* = Call_DfareportingCreativesPatch_590491(
    name: "dfareportingCreativesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives",
    validator: validate_DfareportingCreativesPatch_590492,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativesPatch_590493,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesGet_590509 = ref object of OpenApiRestCall_588466
proc url_DfareportingCreativesGet_590511(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesGet_590510(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one creative by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590512 = path.getOrDefault("profileId")
  valid_590512 = validateParameter(valid_590512, JString, required = true,
                                 default = nil)
  if valid_590512 != nil:
    section.add "profileId", valid_590512
  var valid_590513 = path.getOrDefault("id")
  valid_590513 = validateParameter(valid_590513, JString, required = true,
                                 default = nil)
  if valid_590513 != nil:
    section.add "id", valid_590513
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590514 = query.getOrDefault("fields")
  valid_590514 = validateParameter(valid_590514, JString, required = false,
                                 default = nil)
  if valid_590514 != nil:
    section.add "fields", valid_590514
  var valid_590515 = query.getOrDefault("quotaUser")
  valid_590515 = validateParameter(valid_590515, JString, required = false,
                                 default = nil)
  if valid_590515 != nil:
    section.add "quotaUser", valid_590515
  var valid_590516 = query.getOrDefault("alt")
  valid_590516 = validateParameter(valid_590516, JString, required = false,
                                 default = newJString("json"))
  if valid_590516 != nil:
    section.add "alt", valid_590516
  var valid_590517 = query.getOrDefault("oauth_token")
  valid_590517 = validateParameter(valid_590517, JString, required = false,
                                 default = nil)
  if valid_590517 != nil:
    section.add "oauth_token", valid_590517
  var valid_590518 = query.getOrDefault("userIp")
  valid_590518 = validateParameter(valid_590518, JString, required = false,
                                 default = nil)
  if valid_590518 != nil:
    section.add "userIp", valid_590518
  var valid_590519 = query.getOrDefault("key")
  valid_590519 = validateParameter(valid_590519, JString, required = false,
                                 default = nil)
  if valid_590519 != nil:
    section.add "key", valid_590519
  var valid_590520 = query.getOrDefault("prettyPrint")
  valid_590520 = validateParameter(valid_590520, JBool, required = false,
                                 default = newJBool(true))
  if valid_590520 != nil:
    section.add "prettyPrint", valid_590520
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590521: Call_DfareportingCreativesGet_590509; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one creative by ID.
  ## 
  let valid = call_590521.validator(path, query, header, formData, body)
  let scheme = call_590521.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590521.url(scheme.get, call_590521.host, call_590521.base,
                         call_590521.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590521, url, valid)

proc call*(call_590522: Call_DfareportingCreativesGet_590509; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingCreativesGet
  ## Gets one creative by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Creative ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590523 = newJObject()
  var query_590524 = newJObject()
  add(path_590523, "profileId", newJString(profileId))
  add(query_590524, "fields", newJString(fields))
  add(query_590524, "quotaUser", newJString(quotaUser))
  add(query_590524, "alt", newJString(alt))
  add(query_590524, "oauth_token", newJString(oauthToken))
  add(query_590524, "userIp", newJString(userIp))
  add(path_590523, "id", newJString(id))
  add(query_590524, "key", newJString(key))
  add(query_590524, "prettyPrint", newJBool(prettyPrint))
  result = call_590522.call(path_590523, query_590524, nil, nil, nil)

var dfareportingCreativesGet* = Call_DfareportingCreativesGet_590509(
    name: "dfareportingCreativesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives/{id}",
    validator: validate_DfareportingCreativesGet_590510,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativesGet_590511,
    schemes: {Scheme.Https})
type
  Call_DfareportingDimensionValuesQuery_590525 = ref object of OpenApiRestCall_588466
proc url_DfareportingDimensionValuesQuery_590527(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/dimensionvalues/query")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDimensionValuesQuery_590526(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves list of report dimension values for a list of filters.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590528 = path.getOrDefault("profileId")
  valid_590528 = validateParameter(valid_590528, JString, required = true,
                                 default = nil)
  if valid_590528 != nil:
    section.add "profileId", valid_590528
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590529 = query.getOrDefault("fields")
  valid_590529 = validateParameter(valid_590529, JString, required = false,
                                 default = nil)
  if valid_590529 != nil:
    section.add "fields", valid_590529
  var valid_590530 = query.getOrDefault("pageToken")
  valid_590530 = validateParameter(valid_590530, JString, required = false,
                                 default = nil)
  if valid_590530 != nil:
    section.add "pageToken", valid_590530
  var valid_590531 = query.getOrDefault("quotaUser")
  valid_590531 = validateParameter(valid_590531, JString, required = false,
                                 default = nil)
  if valid_590531 != nil:
    section.add "quotaUser", valid_590531
  var valid_590532 = query.getOrDefault("alt")
  valid_590532 = validateParameter(valid_590532, JString, required = false,
                                 default = newJString("json"))
  if valid_590532 != nil:
    section.add "alt", valid_590532
  var valid_590533 = query.getOrDefault("oauth_token")
  valid_590533 = validateParameter(valid_590533, JString, required = false,
                                 default = nil)
  if valid_590533 != nil:
    section.add "oauth_token", valid_590533
  var valid_590534 = query.getOrDefault("userIp")
  valid_590534 = validateParameter(valid_590534, JString, required = false,
                                 default = nil)
  if valid_590534 != nil:
    section.add "userIp", valid_590534
  var valid_590535 = query.getOrDefault("maxResults")
  valid_590535 = validateParameter(valid_590535, JInt, required = false,
                                 default = newJInt(100))
  if valid_590535 != nil:
    section.add "maxResults", valid_590535
  var valid_590536 = query.getOrDefault("key")
  valid_590536 = validateParameter(valid_590536, JString, required = false,
                                 default = nil)
  if valid_590536 != nil:
    section.add "key", valid_590536
  var valid_590537 = query.getOrDefault("prettyPrint")
  valid_590537 = validateParameter(valid_590537, JBool, required = false,
                                 default = newJBool(true))
  if valid_590537 != nil:
    section.add "prettyPrint", valid_590537
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590539: Call_DfareportingDimensionValuesQuery_590525;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves list of report dimension values for a list of filters.
  ## 
  let valid = call_590539.validator(path, query, header, formData, body)
  let scheme = call_590539.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590539.url(scheme.get, call_590539.host, call_590539.base,
                         call_590539.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590539, url, valid)

proc call*(call_590540: Call_DfareportingDimensionValuesQuery_590525;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; maxResults: int = 100; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingDimensionValuesQuery
  ## Retrieves list of report dimension values for a list of filters.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590541 = newJObject()
  var query_590542 = newJObject()
  var body_590543 = newJObject()
  add(path_590541, "profileId", newJString(profileId))
  add(query_590542, "fields", newJString(fields))
  add(query_590542, "pageToken", newJString(pageToken))
  add(query_590542, "quotaUser", newJString(quotaUser))
  add(query_590542, "alt", newJString(alt))
  add(query_590542, "oauth_token", newJString(oauthToken))
  add(query_590542, "userIp", newJString(userIp))
  add(query_590542, "maxResults", newJInt(maxResults))
  add(query_590542, "key", newJString(key))
  if body != nil:
    body_590543 = body
  add(query_590542, "prettyPrint", newJBool(prettyPrint))
  result = call_590540.call(path_590541, query_590542, nil, nil, body_590543)

var dfareportingDimensionValuesQuery* = Call_DfareportingDimensionValuesQuery_590525(
    name: "dfareportingDimensionValuesQuery", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/dimensionvalues/query",
    validator: validate_DfareportingDimensionValuesQuery_590526,
    base: "/dfareporting/v3.2", url: url_DfareportingDimensionValuesQuery_590527,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySiteContactsList_590544 = ref object of OpenApiRestCall_588466
proc url_DfareportingDirectorySiteContactsList_590546(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySiteContacts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySiteContactsList_590545(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of directory site contacts, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590547 = path.getOrDefault("profileId")
  valid_590547 = validateParameter(valid_590547, JString, required = true,
                                 default = nil)
  if valid_590547 != nil:
    section.add "profileId", valid_590547
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "directory site contact*2015" will return objects with names like "directory site contact June 2015", "directory site contact April 2015", or simply "directory site contact 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "directory site contact" will match objects with name "my directory site contact", "directory site contact 2015", or simply "directory site contact".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only directory site contacts with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   directorySiteIds: JArray
  ##                   : Select only directory site contacts with these directory site IDs. This is a required field.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590548 = query.getOrDefault("fields")
  valid_590548 = validateParameter(valid_590548, JString, required = false,
                                 default = nil)
  if valid_590548 != nil:
    section.add "fields", valid_590548
  var valid_590549 = query.getOrDefault("pageToken")
  valid_590549 = validateParameter(valid_590549, JString, required = false,
                                 default = nil)
  if valid_590549 != nil:
    section.add "pageToken", valid_590549
  var valid_590550 = query.getOrDefault("quotaUser")
  valid_590550 = validateParameter(valid_590550, JString, required = false,
                                 default = nil)
  if valid_590550 != nil:
    section.add "quotaUser", valid_590550
  var valid_590551 = query.getOrDefault("sortField")
  valid_590551 = validateParameter(valid_590551, JString, required = false,
                                 default = newJString("ID"))
  if valid_590551 != nil:
    section.add "sortField", valid_590551
  var valid_590552 = query.getOrDefault("alt")
  valid_590552 = validateParameter(valid_590552, JString, required = false,
                                 default = newJString("json"))
  if valid_590552 != nil:
    section.add "alt", valid_590552
  var valid_590553 = query.getOrDefault("searchString")
  valid_590553 = validateParameter(valid_590553, JString, required = false,
                                 default = nil)
  if valid_590553 != nil:
    section.add "searchString", valid_590553
  var valid_590554 = query.getOrDefault("oauth_token")
  valid_590554 = validateParameter(valid_590554, JString, required = false,
                                 default = nil)
  if valid_590554 != nil:
    section.add "oauth_token", valid_590554
  var valid_590555 = query.getOrDefault("userIp")
  valid_590555 = validateParameter(valid_590555, JString, required = false,
                                 default = nil)
  if valid_590555 != nil:
    section.add "userIp", valid_590555
  var valid_590556 = query.getOrDefault("maxResults")
  valid_590556 = validateParameter(valid_590556, JInt, required = false,
                                 default = newJInt(1000))
  if valid_590556 != nil:
    section.add "maxResults", valid_590556
  var valid_590557 = query.getOrDefault("ids")
  valid_590557 = validateParameter(valid_590557, JArray, required = false,
                                 default = nil)
  if valid_590557 != nil:
    section.add "ids", valid_590557
  var valid_590558 = query.getOrDefault("key")
  valid_590558 = validateParameter(valid_590558, JString, required = false,
                                 default = nil)
  if valid_590558 != nil:
    section.add "key", valid_590558
  var valid_590559 = query.getOrDefault("sortOrder")
  valid_590559 = validateParameter(valid_590559, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_590559 != nil:
    section.add "sortOrder", valid_590559
  var valid_590560 = query.getOrDefault("directorySiteIds")
  valid_590560 = validateParameter(valid_590560, JArray, required = false,
                                 default = nil)
  if valid_590560 != nil:
    section.add "directorySiteIds", valid_590560
  var valid_590561 = query.getOrDefault("prettyPrint")
  valid_590561 = validateParameter(valid_590561, JBool, required = false,
                                 default = newJBool(true))
  if valid_590561 != nil:
    section.add "prettyPrint", valid_590561
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590562: Call_DfareportingDirectorySiteContactsList_590544;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of directory site contacts, possibly filtered. This method supports paging.
  ## 
  let valid = call_590562.validator(path, query, header, formData, body)
  let scheme = call_590562.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590562.url(scheme.get, call_590562.host, call_590562.base,
                         call_590562.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590562, url, valid)

proc call*(call_590563: Call_DfareportingDirectorySiteContactsList_590544;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; directorySiteIds: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingDirectorySiteContactsList
  ## Retrieves a list of directory site contacts, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "directory site contact*2015" will return objects with names like "directory site contact June 2015", "directory site contact April 2015", or simply "directory site contact 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "directory site contact" will match objects with name "my directory site contact", "directory site contact 2015", or simply "directory site contact".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only directory site contacts with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   directorySiteIds: JArray
  ##                   : Select only directory site contacts with these directory site IDs. This is a required field.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590564 = newJObject()
  var query_590565 = newJObject()
  add(path_590564, "profileId", newJString(profileId))
  add(query_590565, "fields", newJString(fields))
  add(query_590565, "pageToken", newJString(pageToken))
  add(query_590565, "quotaUser", newJString(quotaUser))
  add(query_590565, "sortField", newJString(sortField))
  add(query_590565, "alt", newJString(alt))
  add(query_590565, "searchString", newJString(searchString))
  add(query_590565, "oauth_token", newJString(oauthToken))
  add(query_590565, "userIp", newJString(userIp))
  add(query_590565, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_590565.add "ids", ids
  add(query_590565, "key", newJString(key))
  add(query_590565, "sortOrder", newJString(sortOrder))
  if directorySiteIds != nil:
    query_590565.add "directorySiteIds", directorySiteIds
  add(query_590565, "prettyPrint", newJBool(prettyPrint))
  result = call_590563.call(path_590564, query_590565, nil, nil, nil)

var dfareportingDirectorySiteContactsList* = Call_DfareportingDirectorySiteContactsList_590544(
    name: "dfareportingDirectorySiteContactsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/directorySiteContacts",
    validator: validate_DfareportingDirectorySiteContactsList_590545,
    base: "/dfareporting/v3.2", url: url_DfareportingDirectorySiteContactsList_590546,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySiteContactsGet_590566 = ref object of OpenApiRestCall_588466
proc url_DfareportingDirectorySiteContactsGet_590568(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySiteContacts/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySiteContactsGet_590567(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one directory site contact by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Directory site contact ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590569 = path.getOrDefault("profileId")
  valid_590569 = validateParameter(valid_590569, JString, required = true,
                                 default = nil)
  if valid_590569 != nil:
    section.add "profileId", valid_590569
  var valid_590570 = path.getOrDefault("id")
  valid_590570 = validateParameter(valid_590570, JString, required = true,
                                 default = nil)
  if valid_590570 != nil:
    section.add "id", valid_590570
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590571 = query.getOrDefault("fields")
  valid_590571 = validateParameter(valid_590571, JString, required = false,
                                 default = nil)
  if valid_590571 != nil:
    section.add "fields", valid_590571
  var valid_590572 = query.getOrDefault("quotaUser")
  valid_590572 = validateParameter(valid_590572, JString, required = false,
                                 default = nil)
  if valid_590572 != nil:
    section.add "quotaUser", valid_590572
  var valid_590573 = query.getOrDefault("alt")
  valid_590573 = validateParameter(valid_590573, JString, required = false,
                                 default = newJString("json"))
  if valid_590573 != nil:
    section.add "alt", valid_590573
  var valid_590574 = query.getOrDefault("oauth_token")
  valid_590574 = validateParameter(valid_590574, JString, required = false,
                                 default = nil)
  if valid_590574 != nil:
    section.add "oauth_token", valid_590574
  var valid_590575 = query.getOrDefault("userIp")
  valid_590575 = validateParameter(valid_590575, JString, required = false,
                                 default = nil)
  if valid_590575 != nil:
    section.add "userIp", valid_590575
  var valid_590576 = query.getOrDefault("key")
  valid_590576 = validateParameter(valid_590576, JString, required = false,
                                 default = nil)
  if valid_590576 != nil:
    section.add "key", valid_590576
  var valid_590577 = query.getOrDefault("prettyPrint")
  valid_590577 = validateParameter(valid_590577, JBool, required = false,
                                 default = newJBool(true))
  if valid_590577 != nil:
    section.add "prettyPrint", valid_590577
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590578: Call_DfareportingDirectorySiteContactsGet_590566;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one directory site contact by ID.
  ## 
  let valid = call_590578.validator(path, query, header, formData, body)
  let scheme = call_590578.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590578.url(scheme.get, call_590578.host, call_590578.base,
                         call_590578.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590578, url, valid)

proc call*(call_590579: Call_DfareportingDirectorySiteContactsGet_590566;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingDirectorySiteContactsGet
  ## Gets one directory site contact by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Directory site contact ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590580 = newJObject()
  var query_590581 = newJObject()
  add(path_590580, "profileId", newJString(profileId))
  add(query_590581, "fields", newJString(fields))
  add(query_590581, "quotaUser", newJString(quotaUser))
  add(query_590581, "alt", newJString(alt))
  add(query_590581, "oauth_token", newJString(oauthToken))
  add(query_590581, "userIp", newJString(userIp))
  add(path_590580, "id", newJString(id))
  add(query_590581, "key", newJString(key))
  add(query_590581, "prettyPrint", newJBool(prettyPrint))
  result = call_590579.call(path_590580, query_590581, nil, nil, nil)

var dfareportingDirectorySiteContactsGet* = Call_DfareportingDirectorySiteContactsGet_590566(
    name: "dfareportingDirectorySiteContactsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/directorySiteContacts/{id}",
    validator: validate_DfareportingDirectorySiteContactsGet_590567,
    base: "/dfareporting/v3.2", url: url_DfareportingDirectorySiteContactsGet_590568,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySitesInsert_590610 = ref object of OpenApiRestCall_588466
proc url_DfareportingDirectorySitesInsert_590612(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySitesInsert_590611(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new directory site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590613 = path.getOrDefault("profileId")
  valid_590613 = validateParameter(valid_590613, JString, required = true,
                                 default = nil)
  if valid_590613 != nil:
    section.add "profileId", valid_590613
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590614 = query.getOrDefault("fields")
  valid_590614 = validateParameter(valid_590614, JString, required = false,
                                 default = nil)
  if valid_590614 != nil:
    section.add "fields", valid_590614
  var valid_590615 = query.getOrDefault("quotaUser")
  valid_590615 = validateParameter(valid_590615, JString, required = false,
                                 default = nil)
  if valid_590615 != nil:
    section.add "quotaUser", valid_590615
  var valid_590616 = query.getOrDefault("alt")
  valid_590616 = validateParameter(valid_590616, JString, required = false,
                                 default = newJString("json"))
  if valid_590616 != nil:
    section.add "alt", valid_590616
  var valid_590617 = query.getOrDefault("oauth_token")
  valid_590617 = validateParameter(valid_590617, JString, required = false,
                                 default = nil)
  if valid_590617 != nil:
    section.add "oauth_token", valid_590617
  var valid_590618 = query.getOrDefault("userIp")
  valid_590618 = validateParameter(valid_590618, JString, required = false,
                                 default = nil)
  if valid_590618 != nil:
    section.add "userIp", valid_590618
  var valid_590619 = query.getOrDefault("key")
  valid_590619 = validateParameter(valid_590619, JString, required = false,
                                 default = nil)
  if valid_590619 != nil:
    section.add "key", valid_590619
  var valid_590620 = query.getOrDefault("prettyPrint")
  valid_590620 = validateParameter(valid_590620, JBool, required = false,
                                 default = newJBool(true))
  if valid_590620 != nil:
    section.add "prettyPrint", valid_590620
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590622: Call_DfareportingDirectorySitesInsert_590610;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new directory site.
  ## 
  let valid = call_590622.validator(path, query, header, formData, body)
  let scheme = call_590622.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590622.url(scheme.get, call_590622.host, call_590622.base,
                         call_590622.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590622, url, valid)

proc call*(call_590623: Call_DfareportingDirectorySitesInsert_590610;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingDirectorySitesInsert
  ## Inserts a new directory site.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590624 = newJObject()
  var query_590625 = newJObject()
  var body_590626 = newJObject()
  add(path_590624, "profileId", newJString(profileId))
  add(query_590625, "fields", newJString(fields))
  add(query_590625, "quotaUser", newJString(quotaUser))
  add(query_590625, "alt", newJString(alt))
  add(query_590625, "oauth_token", newJString(oauthToken))
  add(query_590625, "userIp", newJString(userIp))
  add(query_590625, "key", newJString(key))
  if body != nil:
    body_590626 = body
  add(query_590625, "prettyPrint", newJBool(prettyPrint))
  result = call_590623.call(path_590624, query_590625, nil, nil, body_590626)

var dfareportingDirectorySitesInsert* = Call_DfareportingDirectorySitesInsert_590610(
    name: "dfareportingDirectorySitesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/directorySites",
    validator: validate_DfareportingDirectorySitesInsert_590611,
    base: "/dfareporting/v3.2", url: url_DfareportingDirectorySitesInsert_590612,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySitesList_590582 = ref object of OpenApiRestCall_588466
proc url_DfareportingDirectorySitesList_590584(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySitesList_590583(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of directory sites, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590585 = path.getOrDefault("profileId")
  valid_590585 = validateParameter(valid_590585, JString, required = true,
                                 default = nil)
  if valid_590585 != nil:
    section.add "profileId", valid_590585
  result.add "path", section
  ## parameters in `query` object:
  ##   dfpNetworkCode: JString
  ##                 : Select only directory sites with this Ad Manager network code.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name, ID or URL. Wildcards (*) are allowed. For example, "directory site*2015" will return objects with names like "directory site June 2015", "directory site April 2015", or simply "directory site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "directory site" will match objects with name "my directory site", "directory site 2015" or simply, "directory site".
  ##   countryId: JString
  ##            : Select only directory sites with this country ID.
  ##   active: JBool
  ##         : Select only active directory sites. Leave blank to retrieve both active and inactive directory sites.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only directory sites with these IDs.
  ##   parentId: JString
  ##           : Select only directory sites with this parent ID.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   acceptsInterstitialPlacements: JBool
  ##                                : This search filter is no longer supported and will have no effect on the results returned.
  ##   acceptsInStreamVideoPlacements: JBool
  ##                                 : This search filter is no longer supported and will have no effect on the results returned.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   acceptsPublisherPaidPlacements: JBool
  ##                                 : Select only directory sites that accept publisher paid placements. This field can be left blank.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590586 = query.getOrDefault("dfpNetworkCode")
  valid_590586 = validateParameter(valid_590586, JString, required = false,
                                 default = nil)
  if valid_590586 != nil:
    section.add "dfpNetworkCode", valid_590586
  var valid_590587 = query.getOrDefault("fields")
  valid_590587 = validateParameter(valid_590587, JString, required = false,
                                 default = nil)
  if valid_590587 != nil:
    section.add "fields", valid_590587
  var valid_590588 = query.getOrDefault("pageToken")
  valid_590588 = validateParameter(valid_590588, JString, required = false,
                                 default = nil)
  if valid_590588 != nil:
    section.add "pageToken", valid_590588
  var valid_590589 = query.getOrDefault("quotaUser")
  valid_590589 = validateParameter(valid_590589, JString, required = false,
                                 default = nil)
  if valid_590589 != nil:
    section.add "quotaUser", valid_590589
  var valid_590590 = query.getOrDefault("sortField")
  valid_590590 = validateParameter(valid_590590, JString, required = false,
                                 default = newJString("ID"))
  if valid_590590 != nil:
    section.add "sortField", valid_590590
  var valid_590591 = query.getOrDefault("alt")
  valid_590591 = validateParameter(valid_590591, JString, required = false,
                                 default = newJString("json"))
  if valid_590591 != nil:
    section.add "alt", valid_590591
  var valid_590592 = query.getOrDefault("searchString")
  valid_590592 = validateParameter(valid_590592, JString, required = false,
                                 default = nil)
  if valid_590592 != nil:
    section.add "searchString", valid_590592
  var valid_590593 = query.getOrDefault("countryId")
  valid_590593 = validateParameter(valid_590593, JString, required = false,
                                 default = nil)
  if valid_590593 != nil:
    section.add "countryId", valid_590593
  var valid_590594 = query.getOrDefault("active")
  valid_590594 = validateParameter(valid_590594, JBool, required = false, default = nil)
  if valid_590594 != nil:
    section.add "active", valid_590594
  var valid_590595 = query.getOrDefault("oauth_token")
  valid_590595 = validateParameter(valid_590595, JString, required = false,
                                 default = nil)
  if valid_590595 != nil:
    section.add "oauth_token", valid_590595
  var valid_590596 = query.getOrDefault("userIp")
  valid_590596 = validateParameter(valid_590596, JString, required = false,
                                 default = nil)
  if valid_590596 != nil:
    section.add "userIp", valid_590596
  var valid_590597 = query.getOrDefault("maxResults")
  valid_590597 = validateParameter(valid_590597, JInt, required = false,
                                 default = newJInt(1000))
  if valid_590597 != nil:
    section.add "maxResults", valid_590597
  var valid_590598 = query.getOrDefault("ids")
  valid_590598 = validateParameter(valid_590598, JArray, required = false,
                                 default = nil)
  if valid_590598 != nil:
    section.add "ids", valid_590598
  var valid_590599 = query.getOrDefault("parentId")
  valid_590599 = validateParameter(valid_590599, JString, required = false,
                                 default = nil)
  if valid_590599 != nil:
    section.add "parentId", valid_590599
  var valid_590600 = query.getOrDefault("key")
  valid_590600 = validateParameter(valid_590600, JString, required = false,
                                 default = nil)
  if valid_590600 != nil:
    section.add "key", valid_590600
  var valid_590601 = query.getOrDefault("acceptsInterstitialPlacements")
  valid_590601 = validateParameter(valid_590601, JBool, required = false, default = nil)
  if valid_590601 != nil:
    section.add "acceptsInterstitialPlacements", valid_590601
  var valid_590602 = query.getOrDefault("acceptsInStreamVideoPlacements")
  valid_590602 = validateParameter(valid_590602, JBool, required = false, default = nil)
  if valid_590602 != nil:
    section.add "acceptsInStreamVideoPlacements", valid_590602
  var valid_590603 = query.getOrDefault("sortOrder")
  valid_590603 = validateParameter(valid_590603, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_590603 != nil:
    section.add "sortOrder", valid_590603
  var valid_590604 = query.getOrDefault("acceptsPublisherPaidPlacements")
  valid_590604 = validateParameter(valid_590604, JBool, required = false, default = nil)
  if valid_590604 != nil:
    section.add "acceptsPublisherPaidPlacements", valid_590604
  var valid_590605 = query.getOrDefault("prettyPrint")
  valid_590605 = validateParameter(valid_590605, JBool, required = false,
                                 default = newJBool(true))
  if valid_590605 != nil:
    section.add "prettyPrint", valid_590605
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590606: Call_DfareportingDirectorySitesList_590582; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of directory sites, possibly filtered. This method supports paging.
  ## 
  let valid = call_590606.validator(path, query, header, formData, body)
  let scheme = call_590606.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590606.url(scheme.get, call_590606.host, call_590606.base,
                         call_590606.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590606, url, valid)

proc call*(call_590607: Call_DfareportingDirectorySitesList_590582;
          profileId: string; dfpNetworkCode: string = ""; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; sortField: string = "ID";
          alt: string = "json"; searchString: string = ""; countryId: string = "";
          active: bool = false; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; parentId: string = "";
          key: string = ""; acceptsInterstitialPlacements: bool = false;
          acceptsInStreamVideoPlacements: bool = false;
          sortOrder: string = "ASCENDING";
          acceptsPublisherPaidPlacements: bool = false; prettyPrint: bool = true): Recallable =
  ## dfareportingDirectorySitesList
  ## Retrieves a list of directory sites, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   dfpNetworkCode: string
  ##                 : Select only directory sites with this Ad Manager network code.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name, ID or URL. Wildcards (*) are allowed. For example, "directory site*2015" will return objects with names like "directory site June 2015", "directory site April 2015", or simply "directory site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "directory site" will match objects with name "my directory site", "directory site 2015" or simply, "directory site".
  ##   countryId: string
  ##            : Select only directory sites with this country ID.
  ##   active: bool
  ##         : Select only active directory sites. Leave blank to retrieve both active and inactive directory sites.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only directory sites with these IDs.
  ##   parentId: string
  ##           : Select only directory sites with this parent ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   acceptsInterstitialPlacements: bool
  ##                                : This search filter is no longer supported and will have no effect on the results returned.
  ##   acceptsInStreamVideoPlacements: bool
  ##                                 : This search filter is no longer supported and will have no effect on the results returned.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   acceptsPublisherPaidPlacements: bool
  ##                                 : Select only directory sites that accept publisher paid placements. This field can be left blank.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590608 = newJObject()
  var query_590609 = newJObject()
  add(path_590608, "profileId", newJString(profileId))
  add(query_590609, "dfpNetworkCode", newJString(dfpNetworkCode))
  add(query_590609, "fields", newJString(fields))
  add(query_590609, "pageToken", newJString(pageToken))
  add(query_590609, "quotaUser", newJString(quotaUser))
  add(query_590609, "sortField", newJString(sortField))
  add(query_590609, "alt", newJString(alt))
  add(query_590609, "searchString", newJString(searchString))
  add(query_590609, "countryId", newJString(countryId))
  add(query_590609, "active", newJBool(active))
  add(query_590609, "oauth_token", newJString(oauthToken))
  add(query_590609, "userIp", newJString(userIp))
  add(query_590609, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_590609.add "ids", ids
  add(query_590609, "parentId", newJString(parentId))
  add(query_590609, "key", newJString(key))
  add(query_590609, "acceptsInterstitialPlacements",
      newJBool(acceptsInterstitialPlacements))
  add(query_590609, "acceptsInStreamVideoPlacements",
      newJBool(acceptsInStreamVideoPlacements))
  add(query_590609, "sortOrder", newJString(sortOrder))
  add(query_590609, "acceptsPublisherPaidPlacements",
      newJBool(acceptsPublisherPaidPlacements))
  add(query_590609, "prettyPrint", newJBool(prettyPrint))
  result = call_590607.call(path_590608, query_590609, nil, nil, nil)

var dfareportingDirectorySitesList* = Call_DfareportingDirectorySitesList_590582(
    name: "dfareportingDirectorySitesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/directorySites",
    validator: validate_DfareportingDirectorySitesList_590583,
    base: "/dfareporting/v3.2", url: url_DfareportingDirectorySitesList_590584,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySitesGet_590627 = ref object of OpenApiRestCall_588466
proc url_DfareportingDirectorySitesGet_590629(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySites/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySitesGet_590628(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one directory site by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Directory site ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590630 = path.getOrDefault("profileId")
  valid_590630 = validateParameter(valid_590630, JString, required = true,
                                 default = nil)
  if valid_590630 != nil:
    section.add "profileId", valid_590630
  var valid_590631 = path.getOrDefault("id")
  valid_590631 = validateParameter(valid_590631, JString, required = true,
                                 default = nil)
  if valid_590631 != nil:
    section.add "id", valid_590631
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590632 = query.getOrDefault("fields")
  valid_590632 = validateParameter(valid_590632, JString, required = false,
                                 default = nil)
  if valid_590632 != nil:
    section.add "fields", valid_590632
  var valid_590633 = query.getOrDefault("quotaUser")
  valid_590633 = validateParameter(valid_590633, JString, required = false,
                                 default = nil)
  if valid_590633 != nil:
    section.add "quotaUser", valid_590633
  var valid_590634 = query.getOrDefault("alt")
  valid_590634 = validateParameter(valid_590634, JString, required = false,
                                 default = newJString("json"))
  if valid_590634 != nil:
    section.add "alt", valid_590634
  var valid_590635 = query.getOrDefault("oauth_token")
  valid_590635 = validateParameter(valid_590635, JString, required = false,
                                 default = nil)
  if valid_590635 != nil:
    section.add "oauth_token", valid_590635
  var valid_590636 = query.getOrDefault("userIp")
  valid_590636 = validateParameter(valid_590636, JString, required = false,
                                 default = nil)
  if valid_590636 != nil:
    section.add "userIp", valid_590636
  var valid_590637 = query.getOrDefault("key")
  valid_590637 = validateParameter(valid_590637, JString, required = false,
                                 default = nil)
  if valid_590637 != nil:
    section.add "key", valid_590637
  var valid_590638 = query.getOrDefault("prettyPrint")
  valid_590638 = validateParameter(valid_590638, JBool, required = false,
                                 default = newJBool(true))
  if valid_590638 != nil:
    section.add "prettyPrint", valid_590638
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590639: Call_DfareportingDirectorySitesGet_590627; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one directory site by ID.
  ## 
  let valid = call_590639.validator(path, query, header, formData, body)
  let scheme = call_590639.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590639.url(scheme.get, call_590639.host, call_590639.base,
                         call_590639.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590639, url, valid)

proc call*(call_590640: Call_DfareportingDirectorySitesGet_590627;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingDirectorySitesGet
  ## Gets one directory site by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Directory site ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590641 = newJObject()
  var query_590642 = newJObject()
  add(path_590641, "profileId", newJString(profileId))
  add(query_590642, "fields", newJString(fields))
  add(query_590642, "quotaUser", newJString(quotaUser))
  add(query_590642, "alt", newJString(alt))
  add(query_590642, "oauth_token", newJString(oauthToken))
  add(query_590642, "userIp", newJString(userIp))
  add(path_590641, "id", newJString(id))
  add(query_590642, "key", newJString(key))
  add(query_590642, "prettyPrint", newJBool(prettyPrint))
  result = call_590640.call(path_590641, query_590642, nil, nil, nil)

var dfareportingDirectorySitesGet* = Call_DfareportingDirectorySitesGet_590627(
    name: "dfareportingDirectorySitesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/directorySites/{id}",
    validator: validate_DfareportingDirectorySitesGet_590628,
    base: "/dfareporting/v3.2", url: url_DfareportingDirectorySitesGet_590629,
    schemes: {Scheme.Https})
type
  Call_DfareportingDynamicTargetingKeysInsert_590662 = ref object of OpenApiRestCall_588466
proc url_DfareportingDynamicTargetingKeysInsert_590664(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/dynamicTargetingKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDynamicTargetingKeysInsert_590663(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590665 = path.getOrDefault("profileId")
  valid_590665 = validateParameter(valid_590665, JString, required = true,
                                 default = nil)
  if valid_590665 != nil:
    section.add "profileId", valid_590665
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590666 = query.getOrDefault("fields")
  valid_590666 = validateParameter(valid_590666, JString, required = false,
                                 default = nil)
  if valid_590666 != nil:
    section.add "fields", valid_590666
  var valid_590667 = query.getOrDefault("quotaUser")
  valid_590667 = validateParameter(valid_590667, JString, required = false,
                                 default = nil)
  if valid_590667 != nil:
    section.add "quotaUser", valid_590667
  var valid_590668 = query.getOrDefault("alt")
  valid_590668 = validateParameter(valid_590668, JString, required = false,
                                 default = newJString("json"))
  if valid_590668 != nil:
    section.add "alt", valid_590668
  var valid_590669 = query.getOrDefault("oauth_token")
  valid_590669 = validateParameter(valid_590669, JString, required = false,
                                 default = nil)
  if valid_590669 != nil:
    section.add "oauth_token", valid_590669
  var valid_590670 = query.getOrDefault("userIp")
  valid_590670 = validateParameter(valid_590670, JString, required = false,
                                 default = nil)
  if valid_590670 != nil:
    section.add "userIp", valid_590670
  var valid_590671 = query.getOrDefault("key")
  valid_590671 = validateParameter(valid_590671, JString, required = false,
                                 default = nil)
  if valid_590671 != nil:
    section.add "key", valid_590671
  var valid_590672 = query.getOrDefault("prettyPrint")
  valid_590672 = validateParameter(valid_590672, JBool, required = false,
                                 default = newJBool(true))
  if valid_590672 != nil:
    section.add "prettyPrint", valid_590672
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590674: Call_DfareportingDynamicTargetingKeysInsert_590662;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.
  ## 
  let valid = call_590674.validator(path, query, header, formData, body)
  let scheme = call_590674.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590674.url(scheme.get, call_590674.host, call_590674.base,
                         call_590674.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590674, url, valid)

proc call*(call_590675: Call_DfareportingDynamicTargetingKeysInsert_590662;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingDynamicTargetingKeysInsert
  ## Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590676 = newJObject()
  var query_590677 = newJObject()
  var body_590678 = newJObject()
  add(path_590676, "profileId", newJString(profileId))
  add(query_590677, "fields", newJString(fields))
  add(query_590677, "quotaUser", newJString(quotaUser))
  add(query_590677, "alt", newJString(alt))
  add(query_590677, "oauth_token", newJString(oauthToken))
  add(query_590677, "userIp", newJString(userIp))
  add(query_590677, "key", newJString(key))
  if body != nil:
    body_590678 = body
  add(query_590677, "prettyPrint", newJBool(prettyPrint))
  result = call_590675.call(path_590676, query_590677, nil, nil, body_590678)

var dfareportingDynamicTargetingKeysInsert* = Call_DfareportingDynamicTargetingKeysInsert_590662(
    name: "dfareportingDynamicTargetingKeysInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/dynamicTargetingKeys",
    validator: validate_DfareportingDynamicTargetingKeysInsert_590663,
    base: "/dfareporting/v3.2", url: url_DfareportingDynamicTargetingKeysInsert_590664,
    schemes: {Scheme.Https})
type
  Call_DfareportingDynamicTargetingKeysList_590643 = ref object of OpenApiRestCall_588466
proc url_DfareportingDynamicTargetingKeysList_590645(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/dynamicTargetingKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDynamicTargetingKeysList_590644(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of dynamic targeting keys.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590646 = path.getOrDefault("profileId")
  valid_590646 = validateParameter(valid_590646, JString, required = true,
                                 default = nil)
  if valid_590646 != nil:
    section.add "profileId", valid_590646
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   advertiserId: JString
  ##               : Select only dynamic targeting keys whose object has this advertiser ID.
  ##   names: JArray
  ##        : Select only dynamic targeting keys exactly matching these names.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   objectId: JString
  ##           : Select only dynamic targeting keys with this object ID.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   objectType: JString
  ##             : Select only dynamic targeting keys with this object type.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590647 = query.getOrDefault("fields")
  valid_590647 = validateParameter(valid_590647, JString, required = false,
                                 default = nil)
  if valid_590647 != nil:
    section.add "fields", valid_590647
  var valid_590648 = query.getOrDefault("quotaUser")
  valid_590648 = validateParameter(valid_590648, JString, required = false,
                                 default = nil)
  if valid_590648 != nil:
    section.add "quotaUser", valid_590648
  var valid_590649 = query.getOrDefault("alt")
  valid_590649 = validateParameter(valid_590649, JString, required = false,
                                 default = newJString("json"))
  if valid_590649 != nil:
    section.add "alt", valid_590649
  var valid_590650 = query.getOrDefault("advertiserId")
  valid_590650 = validateParameter(valid_590650, JString, required = false,
                                 default = nil)
  if valid_590650 != nil:
    section.add "advertiserId", valid_590650
  var valid_590651 = query.getOrDefault("names")
  valid_590651 = validateParameter(valid_590651, JArray, required = false,
                                 default = nil)
  if valid_590651 != nil:
    section.add "names", valid_590651
  var valid_590652 = query.getOrDefault("oauth_token")
  valid_590652 = validateParameter(valid_590652, JString, required = false,
                                 default = nil)
  if valid_590652 != nil:
    section.add "oauth_token", valid_590652
  var valid_590653 = query.getOrDefault("objectId")
  valid_590653 = validateParameter(valid_590653, JString, required = false,
                                 default = nil)
  if valid_590653 != nil:
    section.add "objectId", valid_590653
  var valid_590654 = query.getOrDefault("userIp")
  valid_590654 = validateParameter(valid_590654, JString, required = false,
                                 default = nil)
  if valid_590654 != nil:
    section.add "userIp", valid_590654
  var valid_590655 = query.getOrDefault("objectType")
  valid_590655 = validateParameter(valid_590655, JString, required = false,
                                 default = newJString("OBJECT_AD"))
  if valid_590655 != nil:
    section.add "objectType", valid_590655
  var valid_590656 = query.getOrDefault("key")
  valid_590656 = validateParameter(valid_590656, JString, required = false,
                                 default = nil)
  if valid_590656 != nil:
    section.add "key", valid_590656
  var valid_590657 = query.getOrDefault("prettyPrint")
  valid_590657 = validateParameter(valid_590657, JBool, required = false,
                                 default = newJBool(true))
  if valid_590657 != nil:
    section.add "prettyPrint", valid_590657
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590658: Call_DfareportingDynamicTargetingKeysList_590643;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of dynamic targeting keys.
  ## 
  let valid = call_590658.validator(path, query, header, formData, body)
  let scheme = call_590658.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590658.url(scheme.get, call_590658.host, call_590658.base,
                         call_590658.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590658, url, valid)

proc call*(call_590659: Call_DfareportingDynamicTargetingKeysList_590643;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; advertiserId: string = ""; names: JsonNode = nil;
          oauthToken: string = ""; objectId: string = ""; userIp: string = "";
          objectType: string = "OBJECT_AD"; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingDynamicTargetingKeysList
  ## Retrieves a list of dynamic targeting keys.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   advertiserId: string
  ##               : Select only dynamic targeting keys whose object has this advertiser ID.
  ##   names: JArray
  ##        : Select only dynamic targeting keys exactly matching these names.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   objectId: string
  ##           : Select only dynamic targeting keys with this object ID.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   objectType: string
  ##             : Select only dynamic targeting keys with this object type.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590660 = newJObject()
  var query_590661 = newJObject()
  add(path_590660, "profileId", newJString(profileId))
  add(query_590661, "fields", newJString(fields))
  add(query_590661, "quotaUser", newJString(quotaUser))
  add(query_590661, "alt", newJString(alt))
  add(query_590661, "advertiserId", newJString(advertiserId))
  if names != nil:
    query_590661.add "names", names
  add(query_590661, "oauth_token", newJString(oauthToken))
  add(query_590661, "objectId", newJString(objectId))
  add(query_590661, "userIp", newJString(userIp))
  add(query_590661, "objectType", newJString(objectType))
  add(query_590661, "key", newJString(key))
  add(query_590661, "prettyPrint", newJBool(prettyPrint))
  result = call_590659.call(path_590660, query_590661, nil, nil, nil)

var dfareportingDynamicTargetingKeysList* = Call_DfareportingDynamicTargetingKeysList_590643(
    name: "dfareportingDynamicTargetingKeysList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/dynamicTargetingKeys",
    validator: validate_DfareportingDynamicTargetingKeysList_590644,
    base: "/dfareporting/v3.2", url: url_DfareportingDynamicTargetingKeysList_590645,
    schemes: {Scheme.Https})
type
  Call_DfareportingDynamicTargetingKeysDelete_590679 = ref object of OpenApiRestCall_588466
proc url_DfareportingDynamicTargetingKeysDelete_590681(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "objectId" in path, "`objectId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/dynamicTargetingKeys/"),
               (kind: VariableSegment, value: "objectId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDynamicTargetingKeysDelete_590680(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing dynamic targeting key.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   objectId: JString (required)
  ##           : ID of the object of this dynamic targeting key. This is a required field.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590682 = path.getOrDefault("profileId")
  valid_590682 = validateParameter(valid_590682, JString, required = true,
                                 default = nil)
  if valid_590682 != nil:
    section.add "profileId", valid_590682
  var valid_590683 = path.getOrDefault("objectId")
  valid_590683 = validateParameter(valid_590683, JString, required = true,
                                 default = nil)
  if valid_590683 != nil:
    section.add "objectId", valid_590683
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   objectType: JString (required)
  ##             : Type of the object of this dynamic targeting key. This is a required field.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   name: JString (required)
  ##       : Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long and cannot contain commas. All characters are converted to lowercase.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590684 = query.getOrDefault("fields")
  valid_590684 = validateParameter(valid_590684, JString, required = false,
                                 default = nil)
  if valid_590684 != nil:
    section.add "fields", valid_590684
  var valid_590685 = query.getOrDefault("quotaUser")
  valid_590685 = validateParameter(valid_590685, JString, required = false,
                                 default = nil)
  if valid_590685 != nil:
    section.add "quotaUser", valid_590685
  var valid_590686 = query.getOrDefault("alt")
  valid_590686 = validateParameter(valid_590686, JString, required = false,
                                 default = newJString("json"))
  if valid_590686 != nil:
    section.add "alt", valid_590686
  var valid_590687 = query.getOrDefault("oauth_token")
  valid_590687 = validateParameter(valid_590687, JString, required = false,
                                 default = nil)
  if valid_590687 != nil:
    section.add "oauth_token", valid_590687
  var valid_590688 = query.getOrDefault("userIp")
  valid_590688 = validateParameter(valid_590688, JString, required = false,
                                 default = nil)
  if valid_590688 != nil:
    section.add "userIp", valid_590688
  assert query != nil,
        "query argument is necessary due to required `objectType` field"
  var valid_590689 = query.getOrDefault("objectType")
  valid_590689 = validateParameter(valid_590689, JString, required = true,
                                 default = newJString("OBJECT_AD"))
  if valid_590689 != nil:
    section.add "objectType", valid_590689
  var valid_590690 = query.getOrDefault("key")
  valid_590690 = validateParameter(valid_590690, JString, required = false,
                                 default = nil)
  if valid_590690 != nil:
    section.add "key", valid_590690
  var valid_590691 = query.getOrDefault("name")
  valid_590691 = validateParameter(valid_590691, JString, required = true,
                                 default = nil)
  if valid_590691 != nil:
    section.add "name", valid_590691
  var valid_590692 = query.getOrDefault("prettyPrint")
  valid_590692 = validateParameter(valid_590692, JBool, required = false,
                                 default = newJBool(true))
  if valid_590692 != nil:
    section.add "prettyPrint", valid_590692
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590693: Call_DfareportingDynamicTargetingKeysDelete_590679;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing dynamic targeting key.
  ## 
  let valid = call_590693.validator(path, query, header, formData, body)
  let scheme = call_590693.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590693.url(scheme.get, call_590693.host, call_590693.base,
                         call_590693.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590693, url, valid)

proc call*(call_590694: Call_DfareportingDynamicTargetingKeysDelete_590679;
          profileId: string; objectId: string; name: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; objectType: string = "OBJECT_AD"; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingDynamicTargetingKeysDelete
  ## Deletes an existing dynamic targeting key.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   objectId: string (required)
  ##           : ID of the object of this dynamic targeting key. This is a required field.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   objectType: string (required)
  ##             : Type of the object of this dynamic targeting key. This is a required field.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   name: string (required)
  ##       : Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long and cannot contain commas. All characters are converted to lowercase.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590695 = newJObject()
  var query_590696 = newJObject()
  add(path_590695, "profileId", newJString(profileId))
  add(query_590696, "fields", newJString(fields))
  add(query_590696, "quotaUser", newJString(quotaUser))
  add(query_590696, "alt", newJString(alt))
  add(path_590695, "objectId", newJString(objectId))
  add(query_590696, "oauth_token", newJString(oauthToken))
  add(query_590696, "userIp", newJString(userIp))
  add(query_590696, "objectType", newJString(objectType))
  add(query_590696, "key", newJString(key))
  add(query_590696, "name", newJString(name))
  add(query_590696, "prettyPrint", newJBool(prettyPrint))
  result = call_590694.call(path_590695, query_590696, nil, nil, nil)

var dfareportingDynamicTargetingKeysDelete* = Call_DfareportingDynamicTargetingKeysDelete_590679(
    name: "dfareportingDynamicTargetingKeysDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/dynamicTargetingKeys/{objectId}",
    validator: validate_DfareportingDynamicTargetingKeysDelete_590680,
    base: "/dfareporting/v3.2", url: url_DfareportingDynamicTargetingKeysDelete_590681,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsUpdate_590722 = ref object of OpenApiRestCall_588466
proc url_DfareportingEventTagsUpdate_590724(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsUpdate_590723(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing event tag.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590725 = path.getOrDefault("profileId")
  valid_590725 = validateParameter(valid_590725, JString, required = true,
                                 default = nil)
  if valid_590725 != nil:
    section.add "profileId", valid_590725
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590726 = query.getOrDefault("fields")
  valid_590726 = validateParameter(valid_590726, JString, required = false,
                                 default = nil)
  if valid_590726 != nil:
    section.add "fields", valid_590726
  var valid_590727 = query.getOrDefault("quotaUser")
  valid_590727 = validateParameter(valid_590727, JString, required = false,
                                 default = nil)
  if valid_590727 != nil:
    section.add "quotaUser", valid_590727
  var valid_590728 = query.getOrDefault("alt")
  valid_590728 = validateParameter(valid_590728, JString, required = false,
                                 default = newJString("json"))
  if valid_590728 != nil:
    section.add "alt", valid_590728
  var valid_590729 = query.getOrDefault("oauth_token")
  valid_590729 = validateParameter(valid_590729, JString, required = false,
                                 default = nil)
  if valid_590729 != nil:
    section.add "oauth_token", valid_590729
  var valid_590730 = query.getOrDefault("userIp")
  valid_590730 = validateParameter(valid_590730, JString, required = false,
                                 default = nil)
  if valid_590730 != nil:
    section.add "userIp", valid_590730
  var valid_590731 = query.getOrDefault("key")
  valid_590731 = validateParameter(valid_590731, JString, required = false,
                                 default = nil)
  if valid_590731 != nil:
    section.add "key", valid_590731
  var valid_590732 = query.getOrDefault("prettyPrint")
  valid_590732 = validateParameter(valid_590732, JBool, required = false,
                                 default = newJBool(true))
  if valid_590732 != nil:
    section.add "prettyPrint", valid_590732
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590734: Call_DfareportingEventTagsUpdate_590722; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing event tag.
  ## 
  let valid = call_590734.validator(path, query, header, formData, body)
  let scheme = call_590734.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590734.url(scheme.get, call_590734.host, call_590734.base,
                         call_590734.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590734, url, valid)

proc call*(call_590735: Call_DfareportingEventTagsUpdate_590722; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingEventTagsUpdate
  ## Updates an existing event tag.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590736 = newJObject()
  var query_590737 = newJObject()
  var body_590738 = newJObject()
  add(path_590736, "profileId", newJString(profileId))
  add(query_590737, "fields", newJString(fields))
  add(query_590737, "quotaUser", newJString(quotaUser))
  add(query_590737, "alt", newJString(alt))
  add(query_590737, "oauth_token", newJString(oauthToken))
  add(query_590737, "userIp", newJString(userIp))
  add(query_590737, "key", newJString(key))
  if body != nil:
    body_590738 = body
  add(query_590737, "prettyPrint", newJBool(prettyPrint))
  result = call_590735.call(path_590736, query_590737, nil, nil, body_590738)

var dfareportingEventTagsUpdate* = Call_DfareportingEventTagsUpdate_590722(
    name: "dfareportingEventTagsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags",
    validator: validate_DfareportingEventTagsUpdate_590723,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsUpdate_590724,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsInsert_590739 = ref object of OpenApiRestCall_588466
proc url_DfareportingEventTagsInsert_590741(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsInsert_590740(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new event tag.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590742 = path.getOrDefault("profileId")
  valid_590742 = validateParameter(valid_590742, JString, required = true,
                                 default = nil)
  if valid_590742 != nil:
    section.add "profileId", valid_590742
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590743 = query.getOrDefault("fields")
  valid_590743 = validateParameter(valid_590743, JString, required = false,
                                 default = nil)
  if valid_590743 != nil:
    section.add "fields", valid_590743
  var valid_590744 = query.getOrDefault("quotaUser")
  valid_590744 = validateParameter(valid_590744, JString, required = false,
                                 default = nil)
  if valid_590744 != nil:
    section.add "quotaUser", valid_590744
  var valid_590745 = query.getOrDefault("alt")
  valid_590745 = validateParameter(valid_590745, JString, required = false,
                                 default = newJString("json"))
  if valid_590745 != nil:
    section.add "alt", valid_590745
  var valid_590746 = query.getOrDefault("oauth_token")
  valid_590746 = validateParameter(valid_590746, JString, required = false,
                                 default = nil)
  if valid_590746 != nil:
    section.add "oauth_token", valid_590746
  var valid_590747 = query.getOrDefault("userIp")
  valid_590747 = validateParameter(valid_590747, JString, required = false,
                                 default = nil)
  if valid_590747 != nil:
    section.add "userIp", valid_590747
  var valid_590748 = query.getOrDefault("key")
  valid_590748 = validateParameter(valid_590748, JString, required = false,
                                 default = nil)
  if valid_590748 != nil:
    section.add "key", valid_590748
  var valid_590749 = query.getOrDefault("prettyPrint")
  valid_590749 = validateParameter(valid_590749, JBool, required = false,
                                 default = newJBool(true))
  if valid_590749 != nil:
    section.add "prettyPrint", valid_590749
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590751: Call_DfareportingEventTagsInsert_590739; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new event tag.
  ## 
  let valid = call_590751.validator(path, query, header, formData, body)
  let scheme = call_590751.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590751.url(scheme.get, call_590751.host, call_590751.base,
                         call_590751.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590751, url, valid)

proc call*(call_590752: Call_DfareportingEventTagsInsert_590739; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingEventTagsInsert
  ## Inserts a new event tag.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590753 = newJObject()
  var query_590754 = newJObject()
  var body_590755 = newJObject()
  add(path_590753, "profileId", newJString(profileId))
  add(query_590754, "fields", newJString(fields))
  add(query_590754, "quotaUser", newJString(quotaUser))
  add(query_590754, "alt", newJString(alt))
  add(query_590754, "oauth_token", newJString(oauthToken))
  add(query_590754, "userIp", newJString(userIp))
  add(query_590754, "key", newJString(key))
  if body != nil:
    body_590755 = body
  add(query_590754, "prettyPrint", newJBool(prettyPrint))
  result = call_590752.call(path_590753, query_590754, nil, nil, body_590755)

var dfareportingEventTagsInsert* = Call_DfareportingEventTagsInsert_590739(
    name: "dfareportingEventTagsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags",
    validator: validate_DfareportingEventTagsInsert_590740,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsInsert_590741,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsList_590697 = ref object of OpenApiRestCall_588466
proc url_DfareportingEventTagsList_590699(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsList_590698(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of event tags, possibly filtered.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590700 = path.getOrDefault("profileId")
  valid_590700 = validateParameter(valid_590700, JString, required = true,
                                 default = nil)
  if valid_590700 != nil:
    section.add "profileId", valid_590700
  result.add "path", section
  ## parameters in `query` object:
  ##   enabled: JBool
  ##          : Select only enabled event tags. What is considered enabled or disabled depends on the definitionsOnly parameter. When definitionsOnly is set to true, only the specified advertiser or campaign's event tags' enabledByDefault field is examined. When definitionsOnly is set to false, the specified ad or specified campaign's parent advertiser's or parent campaign's event tags' enabledByDefault and status fields are examined as well.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   definitionsOnly: JBool
  ##                  : Examine only the specified campaign or advertiser's event tags for matching selector criteria. When set to false, the parent advertiser and parent campaign of the specified ad or campaign is examined as well. In addition, when set to false, the status field is examined as well, along with the enabledByDefault field. This parameter can not be set to true when adId is specified as ads do not define their own even tags.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "eventtag*2015" will return objects with names like "eventtag June 2015", "eventtag April 2015", or simply "eventtag 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "eventtag" will match objects with name "my eventtag", "eventtag 2015", or simply "eventtag".
  ##   advertiserId: JString
  ##               : Select only event tags that belong to this advertiser.
  ##   eventTagTypes: JArray
  ##                : Select only event tags with the specified event tag types. Event tag types can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   adId: JString
  ##       : Select only event tags that belong to this ad.
  ##   ids: JArray
  ##      : Select only event tags with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   campaignId: JString
  ##             : Select only event tags that belong to this campaign.
  section = newJObject()
  var valid_590701 = query.getOrDefault("enabled")
  valid_590701 = validateParameter(valid_590701, JBool, required = false, default = nil)
  if valid_590701 != nil:
    section.add "enabled", valid_590701
  var valid_590702 = query.getOrDefault("fields")
  valid_590702 = validateParameter(valid_590702, JString, required = false,
                                 default = nil)
  if valid_590702 != nil:
    section.add "fields", valid_590702
  var valid_590703 = query.getOrDefault("quotaUser")
  valid_590703 = validateParameter(valid_590703, JString, required = false,
                                 default = nil)
  if valid_590703 != nil:
    section.add "quotaUser", valid_590703
  var valid_590704 = query.getOrDefault("sortField")
  valid_590704 = validateParameter(valid_590704, JString, required = false,
                                 default = newJString("ID"))
  if valid_590704 != nil:
    section.add "sortField", valid_590704
  var valid_590705 = query.getOrDefault("alt")
  valid_590705 = validateParameter(valid_590705, JString, required = false,
                                 default = newJString("json"))
  if valid_590705 != nil:
    section.add "alt", valid_590705
  var valid_590706 = query.getOrDefault("definitionsOnly")
  valid_590706 = validateParameter(valid_590706, JBool, required = false, default = nil)
  if valid_590706 != nil:
    section.add "definitionsOnly", valid_590706
  var valid_590707 = query.getOrDefault("searchString")
  valid_590707 = validateParameter(valid_590707, JString, required = false,
                                 default = nil)
  if valid_590707 != nil:
    section.add "searchString", valid_590707
  var valid_590708 = query.getOrDefault("advertiserId")
  valid_590708 = validateParameter(valid_590708, JString, required = false,
                                 default = nil)
  if valid_590708 != nil:
    section.add "advertiserId", valid_590708
  var valid_590709 = query.getOrDefault("eventTagTypes")
  valid_590709 = validateParameter(valid_590709, JArray, required = false,
                                 default = nil)
  if valid_590709 != nil:
    section.add "eventTagTypes", valid_590709
  var valid_590710 = query.getOrDefault("oauth_token")
  valid_590710 = validateParameter(valid_590710, JString, required = false,
                                 default = nil)
  if valid_590710 != nil:
    section.add "oauth_token", valid_590710
  var valid_590711 = query.getOrDefault("userIp")
  valid_590711 = validateParameter(valid_590711, JString, required = false,
                                 default = nil)
  if valid_590711 != nil:
    section.add "userIp", valid_590711
  var valid_590712 = query.getOrDefault("adId")
  valid_590712 = validateParameter(valid_590712, JString, required = false,
                                 default = nil)
  if valid_590712 != nil:
    section.add "adId", valid_590712
  var valid_590713 = query.getOrDefault("ids")
  valid_590713 = validateParameter(valid_590713, JArray, required = false,
                                 default = nil)
  if valid_590713 != nil:
    section.add "ids", valid_590713
  var valid_590714 = query.getOrDefault("key")
  valid_590714 = validateParameter(valid_590714, JString, required = false,
                                 default = nil)
  if valid_590714 != nil:
    section.add "key", valid_590714
  var valid_590715 = query.getOrDefault("sortOrder")
  valid_590715 = validateParameter(valid_590715, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_590715 != nil:
    section.add "sortOrder", valid_590715
  var valid_590716 = query.getOrDefault("prettyPrint")
  valid_590716 = validateParameter(valid_590716, JBool, required = false,
                                 default = newJBool(true))
  if valid_590716 != nil:
    section.add "prettyPrint", valid_590716
  var valid_590717 = query.getOrDefault("campaignId")
  valid_590717 = validateParameter(valid_590717, JString, required = false,
                                 default = nil)
  if valid_590717 != nil:
    section.add "campaignId", valid_590717
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590718: Call_DfareportingEventTagsList_590697; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of event tags, possibly filtered.
  ## 
  let valid = call_590718.validator(path, query, header, formData, body)
  let scheme = call_590718.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590718.url(scheme.get, call_590718.host, call_590718.base,
                         call_590718.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590718, url, valid)

proc call*(call_590719: Call_DfareportingEventTagsList_590697; profileId: string;
          enabled: bool = false; fields: string = ""; quotaUser: string = "";
          sortField: string = "ID"; alt: string = "json"; definitionsOnly: bool = false;
          searchString: string = ""; advertiserId: string = "";
          eventTagTypes: JsonNode = nil; oauthToken: string = ""; userIp: string = "";
          adId: string = ""; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true;
          campaignId: string = ""): Recallable =
  ## dfareportingEventTagsList
  ## Retrieves a list of event tags, possibly filtered.
  ##   enabled: bool
  ##          : Select only enabled event tags. What is considered enabled or disabled depends on the definitionsOnly parameter. When definitionsOnly is set to true, only the specified advertiser or campaign's event tags' enabledByDefault field is examined. When definitionsOnly is set to false, the specified ad or specified campaign's parent advertiser's or parent campaign's event tags' enabledByDefault and status fields are examined as well.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   definitionsOnly: bool
  ##                  : Examine only the specified campaign or advertiser's event tags for matching selector criteria. When set to false, the parent advertiser and parent campaign of the specified ad or campaign is examined as well. In addition, when set to false, the status field is examined as well, along with the enabledByDefault field. This parameter can not be set to true when adId is specified as ads do not define their own even tags.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "eventtag*2015" will return objects with names like "eventtag June 2015", "eventtag April 2015", or simply "eventtag 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "eventtag" will match objects with name "my eventtag", "eventtag 2015", or simply "eventtag".
  ##   advertiserId: string
  ##               : Select only event tags that belong to this advertiser.
  ##   eventTagTypes: JArray
  ##                : Select only event tags with the specified event tag types. Event tag types can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   adId: string
  ##       : Select only event tags that belong to this ad.
  ##   ids: JArray
  ##      : Select only event tags with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   campaignId: string
  ##             : Select only event tags that belong to this campaign.
  var path_590720 = newJObject()
  var query_590721 = newJObject()
  add(query_590721, "enabled", newJBool(enabled))
  add(path_590720, "profileId", newJString(profileId))
  add(query_590721, "fields", newJString(fields))
  add(query_590721, "quotaUser", newJString(quotaUser))
  add(query_590721, "sortField", newJString(sortField))
  add(query_590721, "alt", newJString(alt))
  add(query_590721, "definitionsOnly", newJBool(definitionsOnly))
  add(query_590721, "searchString", newJString(searchString))
  add(query_590721, "advertiserId", newJString(advertiserId))
  if eventTagTypes != nil:
    query_590721.add "eventTagTypes", eventTagTypes
  add(query_590721, "oauth_token", newJString(oauthToken))
  add(query_590721, "userIp", newJString(userIp))
  add(query_590721, "adId", newJString(adId))
  if ids != nil:
    query_590721.add "ids", ids
  add(query_590721, "key", newJString(key))
  add(query_590721, "sortOrder", newJString(sortOrder))
  add(query_590721, "prettyPrint", newJBool(prettyPrint))
  add(query_590721, "campaignId", newJString(campaignId))
  result = call_590719.call(path_590720, query_590721, nil, nil, nil)

var dfareportingEventTagsList* = Call_DfareportingEventTagsList_590697(
    name: "dfareportingEventTagsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags",
    validator: validate_DfareportingEventTagsList_590698,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsList_590699,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsPatch_590756 = ref object of OpenApiRestCall_588466
proc url_DfareportingEventTagsPatch_590758(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsPatch_590757(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing event tag. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590759 = path.getOrDefault("profileId")
  valid_590759 = validateParameter(valid_590759, JString, required = true,
                                 default = nil)
  if valid_590759 != nil:
    section.add "profileId", valid_590759
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Event tag ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590760 = query.getOrDefault("fields")
  valid_590760 = validateParameter(valid_590760, JString, required = false,
                                 default = nil)
  if valid_590760 != nil:
    section.add "fields", valid_590760
  var valid_590761 = query.getOrDefault("quotaUser")
  valid_590761 = validateParameter(valid_590761, JString, required = false,
                                 default = nil)
  if valid_590761 != nil:
    section.add "quotaUser", valid_590761
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_590762 = query.getOrDefault("id")
  valid_590762 = validateParameter(valid_590762, JString, required = true,
                                 default = nil)
  if valid_590762 != nil:
    section.add "id", valid_590762
  var valid_590763 = query.getOrDefault("alt")
  valid_590763 = validateParameter(valid_590763, JString, required = false,
                                 default = newJString("json"))
  if valid_590763 != nil:
    section.add "alt", valid_590763
  var valid_590764 = query.getOrDefault("oauth_token")
  valid_590764 = validateParameter(valid_590764, JString, required = false,
                                 default = nil)
  if valid_590764 != nil:
    section.add "oauth_token", valid_590764
  var valid_590765 = query.getOrDefault("userIp")
  valid_590765 = validateParameter(valid_590765, JString, required = false,
                                 default = nil)
  if valid_590765 != nil:
    section.add "userIp", valid_590765
  var valid_590766 = query.getOrDefault("key")
  valid_590766 = validateParameter(valid_590766, JString, required = false,
                                 default = nil)
  if valid_590766 != nil:
    section.add "key", valid_590766
  var valid_590767 = query.getOrDefault("prettyPrint")
  valid_590767 = validateParameter(valid_590767, JBool, required = false,
                                 default = newJBool(true))
  if valid_590767 != nil:
    section.add "prettyPrint", valid_590767
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590769: Call_DfareportingEventTagsPatch_590756; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing event tag. This method supports patch semantics.
  ## 
  let valid = call_590769.validator(path, query, header, formData, body)
  let scheme = call_590769.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590769.url(scheme.get, call_590769.host, call_590769.base,
                         call_590769.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590769, url, valid)

proc call*(call_590770: Call_DfareportingEventTagsPatch_590756; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingEventTagsPatch
  ## Updates an existing event tag. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Event tag ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590771 = newJObject()
  var query_590772 = newJObject()
  var body_590773 = newJObject()
  add(path_590771, "profileId", newJString(profileId))
  add(query_590772, "fields", newJString(fields))
  add(query_590772, "quotaUser", newJString(quotaUser))
  add(query_590772, "id", newJString(id))
  add(query_590772, "alt", newJString(alt))
  add(query_590772, "oauth_token", newJString(oauthToken))
  add(query_590772, "userIp", newJString(userIp))
  add(query_590772, "key", newJString(key))
  if body != nil:
    body_590773 = body
  add(query_590772, "prettyPrint", newJBool(prettyPrint))
  result = call_590770.call(path_590771, query_590772, nil, nil, body_590773)

var dfareportingEventTagsPatch* = Call_DfareportingEventTagsPatch_590756(
    name: "dfareportingEventTagsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags",
    validator: validate_DfareportingEventTagsPatch_590757,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsPatch_590758,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsGet_590774 = ref object of OpenApiRestCall_588466
proc url_DfareportingEventTagsGet_590776(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsGet_590775(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one event tag by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Event tag ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590777 = path.getOrDefault("profileId")
  valid_590777 = validateParameter(valid_590777, JString, required = true,
                                 default = nil)
  if valid_590777 != nil:
    section.add "profileId", valid_590777
  var valid_590778 = path.getOrDefault("id")
  valid_590778 = validateParameter(valid_590778, JString, required = true,
                                 default = nil)
  if valid_590778 != nil:
    section.add "id", valid_590778
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590779 = query.getOrDefault("fields")
  valid_590779 = validateParameter(valid_590779, JString, required = false,
                                 default = nil)
  if valid_590779 != nil:
    section.add "fields", valid_590779
  var valid_590780 = query.getOrDefault("quotaUser")
  valid_590780 = validateParameter(valid_590780, JString, required = false,
                                 default = nil)
  if valid_590780 != nil:
    section.add "quotaUser", valid_590780
  var valid_590781 = query.getOrDefault("alt")
  valid_590781 = validateParameter(valid_590781, JString, required = false,
                                 default = newJString("json"))
  if valid_590781 != nil:
    section.add "alt", valid_590781
  var valid_590782 = query.getOrDefault("oauth_token")
  valid_590782 = validateParameter(valid_590782, JString, required = false,
                                 default = nil)
  if valid_590782 != nil:
    section.add "oauth_token", valid_590782
  var valid_590783 = query.getOrDefault("userIp")
  valid_590783 = validateParameter(valid_590783, JString, required = false,
                                 default = nil)
  if valid_590783 != nil:
    section.add "userIp", valid_590783
  var valid_590784 = query.getOrDefault("key")
  valid_590784 = validateParameter(valid_590784, JString, required = false,
                                 default = nil)
  if valid_590784 != nil:
    section.add "key", valid_590784
  var valid_590785 = query.getOrDefault("prettyPrint")
  valid_590785 = validateParameter(valid_590785, JBool, required = false,
                                 default = newJBool(true))
  if valid_590785 != nil:
    section.add "prettyPrint", valid_590785
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590786: Call_DfareportingEventTagsGet_590774; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one event tag by ID.
  ## 
  let valid = call_590786.validator(path, query, header, formData, body)
  let scheme = call_590786.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590786.url(scheme.get, call_590786.host, call_590786.base,
                         call_590786.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590786, url, valid)

proc call*(call_590787: Call_DfareportingEventTagsGet_590774; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingEventTagsGet
  ## Gets one event tag by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Event tag ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590788 = newJObject()
  var query_590789 = newJObject()
  add(path_590788, "profileId", newJString(profileId))
  add(query_590789, "fields", newJString(fields))
  add(query_590789, "quotaUser", newJString(quotaUser))
  add(query_590789, "alt", newJString(alt))
  add(query_590789, "oauth_token", newJString(oauthToken))
  add(query_590789, "userIp", newJString(userIp))
  add(path_590788, "id", newJString(id))
  add(query_590789, "key", newJString(key))
  add(query_590789, "prettyPrint", newJBool(prettyPrint))
  result = call_590787.call(path_590788, query_590789, nil, nil, nil)

var dfareportingEventTagsGet* = Call_DfareportingEventTagsGet_590774(
    name: "dfareportingEventTagsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags/{id}",
    validator: validate_DfareportingEventTagsGet_590775,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsGet_590776,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsDelete_590790 = ref object of OpenApiRestCall_588466
proc url_DfareportingEventTagsDelete_590792(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsDelete_590791(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing event tag.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Event tag ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590793 = path.getOrDefault("profileId")
  valid_590793 = validateParameter(valid_590793, JString, required = true,
                                 default = nil)
  if valid_590793 != nil:
    section.add "profileId", valid_590793
  var valid_590794 = path.getOrDefault("id")
  valid_590794 = validateParameter(valid_590794, JString, required = true,
                                 default = nil)
  if valid_590794 != nil:
    section.add "id", valid_590794
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590795 = query.getOrDefault("fields")
  valid_590795 = validateParameter(valid_590795, JString, required = false,
                                 default = nil)
  if valid_590795 != nil:
    section.add "fields", valid_590795
  var valid_590796 = query.getOrDefault("quotaUser")
  valid_590796 = validateParameter(valid_590796, JString, required = false,
                                 default = nil)
  if valid_590796 != nil:
    section.add "quotaUser", valid_590796
  var valid_590797 = query.getOrDefault("alt")
  valid_590797 = validateParameter(valid_590797, JString, required = false,
                                 default = newJString("json"))
  if valid_590797 != nil:
    section.add "alt", valid_590797
  var valid_590798 = query.getOrDefault("oauth_token")
  valid_590798 = validateParameter(valid_590798, JString, required = false,
                                 default = nil)
  if valid_590798 != nil:
    section.add "oauth_token", valid_590798
  var valid_590799 = query.getOrDefault("userIp")
  valid_590799 = validateParameter(valid_590799, JString, required = false,
                                 default = nil)
  if valid_590799 != nil:
    section.add "userIp", valid_590799
  var valid_590800 = query.getOrDefault("key")
  valid_590800 = validateParameter(valid_590800, JString, required = false,
                                 default = nil)
  if valid_590800 != nil:
    section.add "key", valid_590800
  var valid_590801 = query.getOrDefault("prettyPrint")
  valid_590801 = validateParameter(valid_590801, JBool, required = false,
                                 default = newJBool(true))
  if valid_590801 != nil:
    section.add "prettyPrint", valid_590801
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590802: Call_DfareportingEventTagsDelete_590790; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing event tag.
  ## 
  let valid = call_590802.validator(path, query, header, formData, body)
  let scheme = call_590802.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590802.url(scheme.get, call_590802.host, call_590802.base,
                         call_590802.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590802, url, valid)

proc call*(call_590803: Call_DfareportingEventTagsDelete_590790; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingEventTagsDelete
  ## Deletes an existing event tag.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Event tag ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590804 = newJObject()
  var query_590805 = newJObject()
  add(path_590804, "profileId", newJString(profileId))
  add(query_590805, "fields", newJString(fields))
  add(query_590805, "quotaUser", newJString(quotaUser))
  add(query_590805, "alt", newJString(alt))
  add(query_590805, "oauth_token", newJString(oauthToken))
  add(query_590805, "userIp", newJString(userIp))
  add(path_590804, "id", newJString(id))
  add(query_590805, "key", newJString(key))
  add(query_590805, "prettyPrint", newJBool(prettyPrint))
  result = call_590803.call(path_590804, query_590805, nil, nil, nil)

var dfareportingEventTagsDelete* = Call_DfareportingEventTagsDelete_590790(
    name: "dfareportingEventTagsDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags/{id}",
    validator: validate_DfareportingEventTagsDelete_590791,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsDelete_590792,
    schemes: {Scheme.Https})
type
  Call_DfareportingFilesList_590806 = ref object of OpenApiRestCall_588466
proc url_DfareportingFilesList_590808(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/files")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFilesList_590807(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists files for a user profile.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590809 = path.getOrDefault("profileId")
  valid_590809 = validateParameter(valid_590809, JString, required = true,
                                 default = nil)
  if valid_590809 != nil:
    section.add "profileId", valid_590809
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : The field by which to sort the list.
  ##   scope: JString
  ##        : The scope that defines which results are returned.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590810 = query.getOrDefault("fields")
  valid_590810 = validateParameter(valid_590810, JString, required = false,
                                 default = nil)
  if valid_590810 != nil:
    section.add "fields", valid_590810
  var valid_590811 = query.getOrDefault("pageToken")
  valid_590811 = validateParameter(valid_590811, JString, required = false,
                                 default = nil)
  if valid_590811 != nil:
    section.add "pageToken", valid_590811
  var valid_590812 = query.getOrDefault("quotaUser")
  valid_590812 = validateParameter(valid_590812, JString, required = false,
                                 default = nil)
  if valid_590812 != nil:
    section.add "quotaUser", valid_590812
  var valid_590813 = query.getOrDefault("sortField")
  valid_590813 = validateParameter(valid_590813, JString, required = false,
                                 default = newJString("LAST_MODIFIED_TIME"))
  if valid_590813 != nil:
    section.add "sortField", valid_590813
  var valid_590814 = query.getOrDefault("scope")
  valid_590814 = validateParameter(valid_590814, JString, required = false,
                                 default = newJString("MINE"))
  if valid_590814 != nil:
    section.add "scope", valid_590814
  var valid_590815 = query.getOrDefault("alt")
  valid_590815 = validateParameter(valid_590815, JString, required = false,
                                 default = newJString("json"))
  if valid_590815 != nil:
    section.add "alt", valid_590815
  var valid_590816 = query.getOrDefault("oauth_token")
  valid_590816 = validateParameter(valid_590816, JString, required = false,
                                 default = nil)
  if valid_590816 != nil:
    section.add "oauth_token", valid_590816
  var valid_590817 = query.getOrDefault("userIp")
  valid_590817 = validateParameter(valid_590817, JString, required = false,
                                 default = nil)
  if valid_590817 != nil:
    section.add "userIp", valid_590817
  var valid_590818 = query.getOrDefault("maxResults")
  valid_590818 = validateParameter(valid_590818, JInt, required = false,
                                 default = newJInt(10))
  if valid_590818 != nil:
    section.add "maxResults", valid_590818
  var valid_590819 = query.getOrDefault("key")
  valid_590819 = validateParameter(valid_590819, JString, required = false,
                                 default = nil)
  if valid_590819 != nil:
    section.add "key", valid_590819
  var valid_590820 = query.getOrDefault("sortOrder")
  valid_590820 = validateParameter(valid_590820, JString, required = false,
                                 default = newJString("DESCENDING"))
  if valid_590820 != nil:
    section.add "sortOrder", valid_590820
  var valid_590821 = query.getOrDefault("prettyPrint")
  valid_590821 = validateParameter(valid_590821, JBool, required = false,
                                 default = newJBool(true))
  if valid_590821 != nil:
    section.add "prettyPrint", valid_590821
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590822: Call_DfareportingFilesList_590806; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists files for a user profile.
  ## 
  let valid = call_590822.validator(path, query, header, formData, body)
  let scheme = call_590822.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590822.url(scheme.get, call_590822.host, call_590822.base,
                         call_590822.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590822, url, valid)

proc call*(call_590823: Call_DfareportingFilesList_590806; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "LAST_MODIFIED_TIME"; scope: string = "MINE";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 10; key: string = ""; sortOrder: string = "DESCENDING";
          prettyPrint: bool = true): Recallable =
  ## dfareportingFilesList
  ## Lists files for a user profile.
  ##   profileId: string (required)
  ##            : The DFA profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : The field by which to sort the list.
  ##   scope: string
  ##        : The scope that defines which results are returned.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590824 = newJObject()
  var query_590825 = newJObject()
  add(path_590824, "profileId", newJString(profileId))
  add(query_590825, "fields", newJString(fields))
  add(query_590825, "pageToken", newJString(pageToken))
  add(query_590825, "quotaUser", newJString(quotaUser))
  add(query_590825, "sortField", newJString(sortField))
  add(query_590825, "scope", newJString(scope))
  add(query_590825, "alt", newJString(alt))
  add(query_590825, "oauth_token", newJString(oauthToken))
  add(query_590825, "userIp", newJString(userIp))
  add(query_590825, "maxResults", newJInt(maxResults))
  add(query_590825, "key", newJString(key))
  add(query_590825, "sortOrder", newJString(sortOrder))
  add(query_590825, "prettyPrint", newJBool(prettyPrint))
  result = call_590823.call(path_590824, query_590825, nil, nil, nil)

var dfareportingFilesList* = Call_DfareportingFilesList_590806(
    name: "dfareportingFilesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/files",
    validator: validate_DfareportingFilesList_590807, base: "/dfareporting/v3.2",
    url: url_DfareportingFilesList_590808, schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesUpdate_590854 = ref object of OpenApiRestCall_588466
proc url_DfareportingFloodlightActivitiesUpdate_590856(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesUpdate_590855(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight activity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590857 = path.getOrDefault("profileId")
  valid_590857 = validateParameter(valid_590857, JString, required = true,
                                 default = nil)
  if valid_590857 != nil:
    section.add "profileId", valid_590857
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590858 = query.getOrDefault("fields")
  valid_590858 = validateParameter(valid_590858, JString, required = false,
                                 default = nil)
  if valid_590858 != nil:
    section.add "fields", valid_590858
  var valid_590859 = query.getOrDefault("quotaUser")
  valid_590859 = validateParameter(valid_590859, JString, required = false,
                                 default = nil)
  if valid_590859 != nil:
    section.add "quotaUser", valid_590859
  var valid_590860 = query.getOrDefault("alt")
  valid_590860 = validateParameter(valid_590860, JString, required = false,
                                 default = newJString("json"))
  if valid_590860 != nil:
    section.add "alt", valid_590860
  var valid_590861 = query.getOrDefault("oauth_token")
  valid_590861 = validateParameter(valid_590861, JString, required = false,
                                 default = nil)
  if valid_590861 != nil:
    section.add "oauth_token", valid_590861
  var valid_590862 = query.getOrDefault("userIp")
  valid_590862 = validateParameter(valid_590862, JString, required = false,
                                 default = nil)
  if valid_590862 != nil:
    section.add "userIp", valid_590862
  var valid_590863 = query.getOrDefault("key")
  valid_590863 = validateParameter(valid_590863, JString, required = false,
                                 default = nil)
  if valid_590863 != nil:
    section.add "key", valid_590863
  var valid_590864 = query.getOrDefault("prettyPrint")
  valid_590864 = validateParameter(valid_590864, JBool, required = false,
                                 default = newJBool(true))
  if valid_590864 != nil:
    section.add "prettyPrint", valid_590864
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590866: Call_DfareportingFloodlightActivitiesUpdate_590854;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight activity.
  ## 
  let valid = call_590866.validator(path, query, header, formData, body)
  let scheme = call_590866.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590866.url(scheme.get, call_590866.host, call_590866.base,
                         call_590866.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590866, url, valid)

proc call*(call_590867: Call_DfareportingFloodlightActivitiesUpdate_590854;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivitiesUpdate
  ## Updates an existing floodlight activity.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590868 = newJObject()
  var query_590869 = newJObject()
  var body_590870 = newJObject()
  add(path_590868, "profileId", newJString(profileId))
  add(query_590869, "fields", newJString(fields))
  add(query_590869, "quotaUser", newJString(quotaUser))
  add(query_590869, "alt", newJString(alt))
  add(query_590869, "oauth_token", newJString(oauthToken))
  add(query_590869, "userIp", newJString(userIp))
  add(query_590869, "key", newJString(key))
  if body != nil:
    body_590870 = body
  add(query_590869, "prettyPrint", newJBool(prettyPrint))
  result = call_590867.call(path_590868, query_590869, nil, nil, body_590870)

var dfareportingFloodlightActivitiesUpdate* = Call_DfareportingFloodlightActivitiesUpdate_590854(
    name: "dfareportingFloodlightActivitiesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities",
    validator: validate_DfareportingFloodlightActivitiesUpdate_590855,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesUpdate_590856,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesInsert_590871 = ref object of OpenApiRestCall_588466
proc url_DfareportingFloodlightActivitiesInsert_590873(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesInsert_590872(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new floodlight activity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590874 = path.getOrDefault("profileId")
  valid_590874 = validateParameter(valid_590874, JString, required = true,
                                 default = nil)
  if valid_590874 != nil:
    section.add "profileId", valid_590874
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590875 = query.getOrDefault("fields")
  valid_590875 = validateParameter(valid_590875, JString, required = false,
                                 default = nil)
  if valid_590875 != nil:
    section.add "fields", valid_590875
  var valid_590876 = query.getOrDefault("quotaUser")
  valid_590876 = validateParameter(valid_590876, JString, required = false,
                                 default = nil)
  if valid_590876 != nil:
    section.add "quotaUser", valid_590876
  var valid_590877 = query.getOrDefault("alt")
  valid_590877 = validateParameter(valid_590877, JString, required = false,
                                 default = newJString("json"))
  if valid_590877 != nil:
    section.add "alt", valid_590877
  var valid_590878 = query.getOrDefault("oauth_token")
  valid_590878 = validateParameter(valid_590878, JString, required = false,
                                 default = nil)
  if valid_590878 != nil:
    section.add "oauth_token", valid_590878
  var valid_590879 = query.getOrDefault("userIp")
  valid_590879 = validateParameter(valid_590879, JString, required = false,
                                 default = nil)
  if valid_590879 != nil:
    section.add "userIp", valid_590879
  var valid_590880 = query.getOrDefault("key")
  valid_590880 = validateParameter(valid_590880, JString, required = false,
                                 default = nil)
  if valid_590880 != nil:
    section.add "key", valid_590880
  var valid_590881 = query.getOrDefault("prettyPrint")
  valid_590881 = validateParameter(valid_590881, JBool, required = false,
                                 default = newJBool(true))
  if valid_590881 != nil:
    section.add "prettyPrint", valid_590881
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590883: Call_DfareportingFloodlightActivitiesInsert_590871;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new floodlight activity.
  ## 
  let valid = call_590883.validator(path, query, header, formData, body)
  let scheme = call_590883.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590883.url(scheme.get, call_590883.host, call_590883.base,
                         call_590883.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590883, url, valid)

proc call*(call_590884: Call_DfareportingFloodlightActivitiesInsert_590871;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivitiesInsert
  ## Inserts a new floodlight activity.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590885 = newJObject()
  var query_590886 = newJObject()
  var body_590887 = newJObject()
  add(path_590885, "profileId", newJString(profileId))
  add(query_590886, "fields", newJString(fields))
  add(query_590886, "quotaUser", newJString(quotaUser))
  add(query_590886, "alt", newJString(alt))
  add(query_590886, "oauth_token", newJString(oauthToken))
  add(query_590886, "userIp", newJString(userIp))
  add(query_590886, "key", newJString(key))
  if body != nil:
    body_590887 = body
  add(query_590886, "prettyPrint", newJBool(prettyPrint))
  result = call_590884.call(path_590885, query_590886, nil, nil, body_590887)

var dfareportingFloodlightActivitiesInsert* = Call_DfareportingFloodlightActivitiesInsert_590871(
    name: "dfareportingFloodlightActivitiesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities",
    validator: validate_DfareportingFloodlightActivitiesInsert_590872,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesInsert_590873,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesList_590826 = ref object of OpenApiRestCall_588466
proc url_DfareportingFloodlightActivitiesList_590828(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesList_590827(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of floodlight activities, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590829 = path.getOrDefault("profileId")
  valid_590829 = validateParameter(valid_590829, JString, required = true,
                                 default = nil)
  if valid_590829 != nil:
    section.add "profileId", valid_590829
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   tagString: JString
  ##            : Select only floodlight activities with the specified tag string.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivity*2015" will return objects with names like "floodlightactivity June 2015", "floodlightactivity April 2015", or simply "floodlightactivity 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivity" will match objects with name "my floodlightactivity activity", "floodlightactivity 2015", or simply "floodlightactivity".
  ##   advertiserId: JString
  ##               : Select only floodlight activities for the specified advertiser ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   floodlightActivityGroupIds: JArray
  ##                             : Select only floodlight activities with the specified floodlight activity group IDs.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   floodlightActivityGroupType: JString
  ##                              : Select only floodlight activities with the specified floodlight activity group type.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   floodlightConfigurationId: JString
  ##                            : Select only floodlight activities for the specified floodlight configuration ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   floodlightActivityGroupTagString: JString
  ##                                   : Select only floodlight activities with the specified floodlight activity group tag string.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only floodlight activities with the specified IDs. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   floodlightActivityGroupName: JString
  ##                              : Select only floodlight activities with the specified floodlight activity group name.
  section = newJObject()
  var valid_590830 = query.getOrDefault("fields")
  valid_590830 = validateParameter(valid_590830, JString, required = false,
                                 default = nil)
  if valid_590830 != nil:
    section.add "fields", valid_590830
  var valid_590831 = query.getOrDefault("pageToken")
  valid_590831 = validateParameter(valid_590831, JString, required = false,
                                 default = nil)
  if valid_590831 != nil:
    section.add "pageToken", valid_590831
  var valid_590832 = query.getOrDefault("quotaUser")
  valid_590832 = validateParameter(valid_590832, JString, required = false,
                                 default = nil)
  if valid_590832 != nil:
    section.add "quotaUser", valid_590832
  var valid_590833 = query.getOrDefault("sortField")
  valid_590833 = validateParameter(valid_590833, JString, required = false,
                                 default = newJString("ID"))
  if valid_590833 != nil:
    section.add "sortField", valid_590833
  var valid_590834 = query.getOrDefault("tagString")
  valid_590834 = validateParameter(valid_590834, JString, required = false,
                                 default = nil)
  if valid_590834 != nil:
    section.add "tagString", valid_590834
  var valid_590835 = query.getOrDefault("alt")
  valid_590835 = validateParameter(valid_590835, JString, required = false,
                                 default = newJString("json"))
  if valid_590835 != nil:
    section.add "alt", valid_590835
  var valid_590836 = query.getOrDefault("searchString")
  valid_590836 = validateParameter(valid_590836, JString, required = false,
                                 default = nil)
  if valid_590836 != nil:
    section.add "searchString", valid_590836
  var valid_590837 = query.getOrDefault("advertiserId")
  valid_590837 = validateParameter(valid_590837, JString, required = false,
                                 default = nil)
  if valid_590837 != nil:
    section.add "advertiserId", valid_590837
  var valid_590838 = query.getOrDefault("floodlightActivityGroupIds")
  valid_590838 = validateParameter(valid_590838, JArray, required = false,
                                 default = nil)
  if valid_590838 != nil:
    section.add "floodlightActivityGroupIds", valid_590838
  var valid_590839 = query.getOrDefault("oauth_token")
  valid_590839 = validateParameter(valid_590839, JString, required = false,
                                 default = nil)
  if valid_590839 != nil:
    section.add "oauth_token", valid_590839
  var valid_590840 = query.getOrDefault("floodlightActivityGroupType")
  valid_590840 = validateParameter(valid_590840, JString, required = false,
                                 default = newJString("COUNTER"))
  if valid_590840 != nil:
    section.add "floodlightActivityGroupType", valid_590840
  var valid_590841 = query.getOrDefault("userIp")
  valid_590841 = validateParameter(valid_590841, JString, required = false,
                                 default = nil)
  if valid_590841 != nil:
    section.add "userIp", valid_590841
  var valid_590842 = query.getOrDefault("floodlightConfigurationId")
  valid_590842 = validateParameter(valid_590842, JString, required = false,
                                 default = nil)
  if valid_590842 != nil:
    section.add "floodlightConfigurationId", valid_590842
  var valid_590843 = query.getOrDefault("floodlightActivityGroupTagString")
  valid_590843 = validateParameter(valid_590843, JString, required = false,
                                 default = nil)
  if valid_590843 != nil:
    section.add "floodlightActivityGroupTagString", valid_590843
  var valid_590844 = query.getOrDefault("maxResults")
  valid_590844 = validateParameter(valid_590844, JInt, required = false,
                                 default = newJInt(1000))
  if valid_590844 != nil:
    section.add "maxResults", valid_590844
  var valid_590845 = query.getOrDefault("ids")
  valid_590845 = validateParameter(valid_590845, JArray, required = false,
                                 default = nil)
  if valid_590845 != nil:
    section.add "ids", valid_590845
  var valid_590846 = query.getOrDefault("key")
  valid_590846 = validateParameter(valid_590846, JString, required = false,
                                 default = nil)
  if valid_590846 != nil:
    section.add "key", valid_590846
  var valid_590847 = query.getOrDefault("sortOrder")
  valid_590847 = validateParameter(valid_590847, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_590847 != nil:
    section.add "sortOrder", valid_590847
  var valid_590848 = query.getOrDefault("prettyPrint")
  valid_590848 = validateParameter(valid_590848, JBool, required = false,
                                 default = newJBool(true))
  if valid_590848 != nil:
    section.add "prettyPrint", valid_590848
  var valid_590849 = query.getOrDefault("floodlightActivityGroupName")
  valid_590849 = validateParameter(valid_590849, JString, required = false,
                                 default = nil)
  if valid_590849 != nil:
    section.add "floodlightActivityGroupName", valid_590849
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590850: Call_DfareportingFloodlightActivitiesList_590826;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of floodlight activities, possibly filtered. This method supports paging.
  ## 
  let valid = call_590850.validator(path, query, header, formData, body)
  let scheme = call_590850.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590850.url(scheme.get, call_590850.host, call_590850.base,
                         call_590850.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590850, url, valid)

proc call*(call_590851: Call_DfareportingFloodlightActivitiesList_590826;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; tagString: string = "";
          alt: string = "json"; searchString: string = ""; advertiserId: string = "";
          floodlightActivityGroupIds: JsonNode = nil; oauthToken: string = "";
          floodlightActivityGroupType: string = "COUNTER"; userIp: string = "";
          floodlightConfigurationId: string = "";
          floodlightActivityGroupTagString: string = ""; maxResults: int = 1000;
          ids: JsonNode = nil; key: string = ""; sortOrder: string = "ASCENDING";
          prettyPrint: bool = true; floodlightActivityGroupName: string = ""): Recallable =
  ## dfareportingFloodlightActivitiesList
  ## Retrieves a list of floodlight activities, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   tagString: string
  ##            : Select only floodlight activities with the specified tag string.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivity*2015" will return objects with names like "floodlightactivity June 2015", "floodlightactivity April 2015", or simply "floodlightactivity 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivity" will match objects with name "my floodlightactivity activity", "floodlightactivity 2015", or simply "floodlightactivity".
  ##   advertiserId: string
  ##               : Select only floodlight activities for the specified advertiser ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   floodlightActivityGroupIds: JArray
  ##                             : Select only floodlight activities with the specified floodlight activity group IDs.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   floodlightActivityGroupType: string
  ##                              : Select only floodlight activities with the specified floodlight activity group type.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   floodlightConfigurationId: string
  ##                            : Select only floodlight activities for the specified floodlight configuration ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   floodlightActivityGroupTagString: string
  ##                                   : Select only floodlight activities with the specified floodlight activity group tag string.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only floodlight activities with the specified IDs. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   floodlightActivityGroupName: string
  ##                              : Select only floodlight activities with the specified floodlight activity group name.
  var path_590852 = newJObject()
  var query_590853 = newJObject()
  add(path_590852, "profileId", newJString(profileId))
  add(query_590853, "fields", newJString(fields))
  add(query_590853, "pageToken", newJString(pageToken))
  add(query_590853, "quotaUser", newJString(quotaUser))
  add(query_590853, "sortField", newJString(sortField))
  add(query_590853, "tagString", newJString(tagString))
  add(query_590853, "alt", newJString(alt))
  add(query_590853, "searchString", newJString(searchString))
  add(query_590853, "advertiserId", newJString(advertiserId))
  if floodlightActivityGroupIds != nil:
    query_590853.add "floodlightActivityGroupIds", floodlightActivityGroupIds
  add(query_590853, "oauth_token", newJString(oauthToken))
  add(query_590853, "floodlightActivityGroupType",
      newJString(floodlightActivityGroupType))
  add(query_590853, "userIp", newJString(userIp))
  add(query_590853, "floodlightConfigurationId",
      newJString(floodlightConfigurationId))
  add(query_590853, "floodlightActivityGroupTagString",
      newJString(floodlightActivityGroupTagString))
  add(query_590853, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_590853.add "ids", ids
  add(query_590853, "key", newJString(key))
  add(query_590853, "sortOrder", newJString(sortOrder))
  add(query_590853, "prettyPrint", newJBool(prettyPrint))
  add(query_590853, "floodlightActivityGroupName",
      newJString(floodlightActivityGroupName))
  result = call_590851.call(path_590852, query_590853, nil, nil, nil)

var dfareportingFloodlightActivitiesList* = Call_DfareportingFloodlightActivitiesList_590826(
    name: "dfareportingFloodlightActivitiesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities",
    validator: validate_DfareportingFloodlightActivitiesList_590827,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesList_590828,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesPatch_590888 = ref object of OpenApiRestCall_588466
proc url_DfareportingFloodlightActivitiesPatch_590890(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesPatch_590889(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight activity. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590891 = path.getOrDefault("profileId")
  valid_590891 = validateParameter(valid_590891, JString, required = true,
                                 default = nil)
  if valid_590891 != nil:
    section.add "profileId", valid_590891
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Floodlight activity ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590892 = query.getOrDefault("fields")
  valid_590892 = validateParameter(valid_590892, JString, required = false,
                                 default = nil)
  if valid_590892 != nil:
    section.add "fields", valid_590892
  var valid_590893 = query.getOrDefault("quotaUser")
  valid_590893 = validateParameter(valid_590893, JString, required = false,
                                 default = nil)
  if valid_590893 != nil:
    section.add "quotaUser", valid_590893
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_590894 = query.getOrDefault("id")
  valid_590894 = validateParameter(valid_590894, JString, required = true,
                                 default = nil)
  if valid_590894 != nil:
    section.add "id", valid_590894
  var valid_590895 = query.getOrDefault("alt")
  valid_590895 = validateParameter(valid_590895, JString, required = false,
                                 default = newJString("json"))
  if valid_590895 != nil:
    section.add "alt", valid_590895
  var valid_590896 = query.getOrDefault("oauth_token")
  valid_590896 = validateParameter(valid_590896, JString, required = false,
                                 default = nil)
  if valid_590896 != nil:
    section.add "oauth_token", valid_590896
  var valid_590897 = query.getOrDefault("userIp")
  valid_590897 = validateParameter(valid_590897, JString, required = false,
                                 default = nil)
  if valid_590897 != nil:
    section.add "userIp", valid_590897
  var valid_590898 = query.getOrDefault("key")
  valid_590898 = validateParameter(valid_590898, JString, required = false,
                                 default = nil)
  if valid_590898 != nil:
    section.add "key", valid_590898
  var valid_590899 = query.getOrDefault("prettyPrint")
  valid_590899 = validateParameter(valid_590899, JBool, required = false,
                                 default = newJBool(true))
  if valid_590899 != nil:
    section.add "prettyPrint", valid_590899
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590901: Call_DfareportingFloodlightActivitiesPatch_590888;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight activity. This method supports patch semantics.
  ## 
  let valid = call_590901.validator(path, query, header, formData, body)
  let scheme = call_590901.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590901.url(scheme.get, call_590901.host, call_590901.base,
                         call_590901.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590901, url, valid)

proc call*(call_590902: Call_DfareportingFloodlightActivitiesPatch_590888;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivitiesPatch
  ## Updates an existing floodlight activity. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Floodlight activity ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590903 = newJObject()
  var query_590904 = newJObject()
  var body_590905 = newJObject()
  add(path_590903, "profileId", newJString(profileId))
  add(query_590904, "fields", newJString(fields))
  add(query_590904, "quotaUser", newJString(quotaUser))
  add(query_590904, "id", newJString(id))
  add(query_590904, "alt", newJString(alt))
  add(query_590904, "oauth_token", newJString(oauthToken))
  add(query_590904, "userIp", newJString(userIp))
  add(query_590904, "key", newJString(key))
  if body != nil:
    body_590905 = body
  add(query_590904, "prettyPrint", newJBool(prettyPrint))
  result = call_590902.call(path_590903, query_590904, nil, nil, body_590905)

var dfareportingFloodlightActivitiesPatch* = Call_DfareportingFloodlightActivitiesPatch_590888(
    name: "dfareportingFloodlightActivitiesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities",
    validator: validate_DfareportingFloodlightActivitiesPatch_590889,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesPatch_590890,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesGeneratetag_590906 = ref object of OpenApiRestCall_588466
proc url_DfareportingFloodlightActivitiesGeneratetag_590908(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"), (kind: ConstantSegment,
        value: "/floodlightActivities/generatetag")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesGeneratetag_590907(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates a tag for a floodlight activity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590909 = path.getOrDefault("profileId")
  valid_590909 = validateParameter(valid_590909, JString, required = true,
                                 default = nil)
  if valid_590909 != nil:
    section.add "profileId", valid_590909
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   floodlightActivityId: JString
  ##                       : Floodlight activity ID for which we want to generate a tag.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590910 = query.getOrDefault("fields")
  valid_590910 = validateParameter(valid_590910, JString, required = false,
                                 default = nil)
  if valid_590910 != nil:
    section.add "fields", valid_590910
  var valid_590911 = query.getOrDefault("quotaUser")
  valid_590911 = validateParameter(valid_590911, JString, required = false,
                                 default = nil)
  if valid_590911 != nil:
    section.add "quotaUser", valid_590911
  var valid_590912 = query.getOrDefault("alt")
  valid_590912 = validateParameter(valid_590912, JString, required = false,
                                 default = newJString("json"))
  if valid_590912 != nil:
    section.add "alt", valid_590912
  var valid_590913 = query.getOrDefault("oauth_token")
  valid_590913 = validateParameter(valid_590913, JString, required = false,
                                 default = nil)
  if valid_590913 != nil:
    section.add "oauth_token", valid_590913
  var valid_590914 = query.getOrDefault("floodlightActivityId")
  valid_590914 = validateParameter(valid_590914, JString, required = false,
                                 default = nil)
  if valid_590914 != nil:
    section.add "floodlightActivityId", valid_590914
  var valid_590915 = query.getOrDefault("userIp")
  valid_590915 = validateParameter(valid_590915, JString, required = false,
                                 default = nil)
  if valid_590915 != nil:
    section.add "userIp", valid_590915
  var valid_590916 = query.getOrDefault("key")
  valid_590916 = validateParameter(valid_590916, JString, required = false,
                                 default = nil)
  if valid_590916 != nil:
    section.add "key", valid_590916
  var valid_590917 = query.getOrDefault("prettyPrint")
  valid_590917 = validateParameter(valid_590917, JBool, required = false,
                                 default = newJBool(true))
  if valid_590917 != nil:
    section.add "prettyPrint", valid_590917
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590918: Call_DfareportingFloodlightActivitiesGeneratetag_590906;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates a tag for a floodlight activity.
  ## 
  let valid = call_590918.validator(path, query, header, formData, body)
  let scheme = call_590918.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590918.url(scheme.get, call_590918.host, call_590918.base,
                         call_590918.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590918, url, valid)

proc call*(call_590919: Call_DfareportingFloodlightActivitiesGeneratetag_590906;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = "";
          floodlightActivityId: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivitiesGeneratetag
  ## Generates a tag for a floodlight activity.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   floodlightActivityId: string
  ##                       : Floodlight activity ID for which we want to generate a tag.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590920 = newJObject()
  var query_590921 = newJObject()
  add(path_590920, "profileId", newJString(profileId))
  add(query_590921, "fields", newJString(fields))
  add(query_590921, "quotaUser", newJString(quotaUser))
  add(query_590921, "alt", newJString(alt))
  add(query_590921, "oauth_token", newJString(oauthToken))
  add(query_590921, "floodlightActivityId", newJString(floodlightActivityId))
  add(query_590921, "userIp", newJString(userIp))
  add(query_590921, "key", newJString(key))
  add(query_590921, "prettyPrint", newJBool(prettyPrint))
  result = call_590919.call(path_590920, query_590921, nil, nil, nil)

var dfareportingFloodlightActivitiesGeneratetag* = Call_DfareportingFloodlightActivitiesGeneratetag_590906(
    name: "dfareportingFloodlightActivitiesGeneratetag",
    meth: HttpMethod.HttpPost, host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities/generatetag",
    validator: validate_DfareportingFloodlightActivitiesGeneratetag_590907,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightActivitiesGeneratetag_590908,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesGet_590922 = ref object of OpenApiRestCall_588466
proc url_DfareportingFloodlightActivitiesGet_590924(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesGet_590923(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one floodlight activity by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Floodlight activity ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590925 = path.getOrDefault("profileId")
  valid_590925 = validateParameter(valid_590925, JString, required = true,
                                 default = nil)
  if valid_590925 != nil:
    section.add "profileId", valid_590925
  var valid_590926 = path.getOrDefault("id")
  valid_590926 = validateParameter(valid_590926, JString, required = true,
                                 default = nil)
  if valid_590926 != nil:
    section.add "id", valid_590926
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590927 = query.getOrDefault("fields")
  valid_590927 = validateParameter(valid_590927, JString, required = false,
                                 default = nil)
  if valid_590927 != nil:
    section.add "fields", valid_590927
  var valid_590928 = query.getOrDefault("quotaUser")
  valid_590928 = validateParameter(valid_590928, JString, required = false,
                                 default = nil)
  if valid_590928 != nil:
    section.add "quotaUser", valid_590928
  var valid_590929 = query.getOrDefault("alt")
  valid_590929 = validateParameter(valid_590929, JString, required = false,
                                 default = newJString("json"))
  if valid_590929 != nil:
    section.add "alt", valid_590929
  var valid_590930 = query.getOrDefault("oauth_token")
  valid_590930 = validateParameter(valid_590930, JString, required = false,
                                 default = nil)
  if valid_590930 != nil:
    section.add "oauth_token", valid_590930
  var valid_590931 = query.getOrDefault("userIp")
  valid_590931 = validateParameter(valid_590931, JString, required = false,
                                 default = nil)
  if valid_590931 != nil:
    section.add "userIp", valid_590931
  var valid_590932 = query.getOrDefault("key")
  valid_590932 = validateParameter(valid_590932, JString, required = false,
                                 default = nil)
  if valid_590932 != nil:
    section.add "key", valid_590932
  var valid_590933 = query.getOrDefault("prettyPrint")
  valid_590933 = validateParameter(valid_590933, JBool, required = false,
                                 default = newJBool(true))
  if valid_590933 != nil:
    section.add "prettyPrint", valid_590933
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590934: Call_DfareportingFloodlightActivitiesGet_590922;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one floodlight activity by ID.
  ## 
  let valid = call_590934.validator(path, query, header, formData, body)
  let scheme = call_590934.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590934.url(scheme.get, call_590934.host, call_590934.base,
                         call_590934.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590934, url, valid)

proc call*(call_590935: Call_DfareportingFloodlightActivitiesGet_590922;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivitiesGet
  ## Gets one floodlight activity by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Floodlight activity ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590936 = newJObject()
  var query_590937 = newJObject()
  add(path_590936, "profileId", newJString(profileId))
  add(query_590937, "fields", newJString(fields))
  add(query_590937, "quotaUser", newJString(quotaUser))
  add(query_590937, "alt", newJString(alt))
  add(query_590937, "oauth_token", newJString(oauthToken))
  add(query_590937, "userIp", newJString(userIp))
  add(path_590936, "id", newJString(id))
  add(query_590937, "key", newJString(key))
  add(query_590937, "prettyPrint", newJBool(prettyPrint))
  result = call_590935.call(path_590936, query_590937, nil, nil, nil)

var dfareportingFloodlightActivitiesGet* = Call_DfareportingFloodlightActivitiesGet_590922(
    name: "dfareportingFloodlightActivitiesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities/{id}",
    validator: validate_DfareportingFloodlightActivitiesGet_590923,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesGet_590924,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesDelete_590938 = ref object of OpenApiRestCall_588466
proc url_DfareportingFloodlightActivitiesDelete_590940(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesDelete_590939(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing floodlight activity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Floodlight activity ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590941 = path.getOrDefault("profileId")
  valid_590941 = validateParameter(valid_590941, JString, required = true,
                                 default = nil)
  if valid_590941 != nil:
    section.add "profileId", valid_590941
  var valid_590942 = path.getOrDefault("id")
  valid_590942 = validateParameter(valid_590942, JString, required = true,
                                 default = nil)
  if valid_590942 != nil:
    section.add "id", valid_590942
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590943 = query.getOrDefault("fields")
  valid_590943 = validateParameter(valid_590943, JString, required = false,
                                 default = nil)
  if valid_590943 != nil:
    section.add "fields", valid_590943
  var valid_590944 = query.getOrDefault("quotaUser")
  valid_590944 = validateParameter(valid_590944, JString, required = false,
                                 default = nil)
  if valid_590944 != nil:
    section.add "quotaUser", valid_590944
  var valid_590945 = query.getOrDefault("alt")
  valid_590945 = validateParameter(valid_590945, JString, required = false,
                                 default = newJString("json"))
  if valid_590945 != nil:
    section.add "alt", valid_590945
  var valid_590946 = query.getOrDefault("oauth_token")
  valid_590946 = validateParameter(valid_590946, JString, required = false,
                                 default = nil)
  if valid_590946 != nil:
    section.add "oauth_token", valid_590946
  var valid_590947 = query.getOrDefault("userIp")
  valid_590947 = validateParameter(valid_590947, JString, required = false,
                                 default = nil)
  if valid_590947 != nil:
    section.add "userIp", valid_590947
  var valid_590948 = query.getOrDefault("key")
  valid_590948 = validateParameter(valid_590948, JString, required = false,
                                 default = nil)
  if valid_590948 != nil:
    section.add "key", valid_590948
  var valid_590949 = query.getOrDefault("prettyPrint")
  valid_590949 = validateParameter(valid_590949, JBool, required = false,
                                 default = newJBool(true))
  if valid_590949 != nil:
    section.add "prettyPrint", valid_590949
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590950: Call_DfareportingFloodlightActivitiesDelete_590938;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing floodlight activity.
  ## 
  let valid = call_590950.validator(path, query, header, formData, body)
  let scheme = call_590950.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590950.url(scheme.get, call_590950.host, call_590950.base,
                         call_590950.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590950, url, valid)

proc call*(call_590951: Call_DfareportingFloodlightActivitiesDelete_590938;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivitiesDelete
  ## Deletes an existing floodlight activity.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Floodlight activity ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590952 = newJObject()
  var query_590953 = newJObject()
  add(path_590952, "profileId", newJString(profileId))
  add(query_590953, "fields", newJString(fields))
  add(query_590953, "quotaUser", newJString(quotaUser))
  add(query_590953, "alt", newJString(alt))
  add(query_590953, "oauth_token", newJString(oauthToken))
  add(query_590953, "userIp", newJString(userIp))
  add(path_590952, "id", newJString(id))
  add(query_590953, "key", newJString(key))
  add(query_590953, "prettyPrint", newJBool(prettyPrint))
  result = call_590951.call(path_590952, query_590953, nil, nil, nil)

var dfareportingFloodlightActivitiesDelete* = Call_DfareportingFloodlightActivitiesDelete_590938(
    name: "dfareportingFloodlightActivitiesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities/{id}",
    validator: validate_DfareportingFloodlightActivitiesDelete_590939,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesDelete_590940,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsUpdate_590978 = ref object of OpenApiRestCall_588466
proc url_DfareportingFloodlightActivityGroupsUpdate_590980(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsUpdate_590979(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight activity group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590981 = path.getOrDefault("profileId")
  valid_590981 = validateParameter(valid_590981, JString, required = true,
                                 default = nil)
  if valid_590981 != nil:
    section.add "profileId", valid_590981
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590982 = query.getOrDefault("fields")
  valid_590982 = validateParameter(valid_590982, JString, required = false,
                                 default = nil)
  if valid_590982 != nil:
    section.add "fields", valid_590982
  var valid_590983 = query.getOrDefault("quotaUser")
  valid_590983 = validateParameter(valid_590983, JString, required = false,
                                 default = nil)
  if valid_590983 != nil:
    section.add "quotaUser", valid_590983
  var valid_590984 = query.getOrDefault("alt")
  valid_590984 = validateParameter(valid_590984, JString, required = false,
                                 default = newJString("json"))
  if valid_590984 != nil:
    section.add "alt", valid_590984
  var valid_590985 = query.getOrDefault("oauth_token")
  valid_590985 = validateParameter(valid_590985, JString, required = false,
                                 default = nil)
  if valid_590985 != nil:
    section.add "oauth_token", valid_590985
  var valid_590986 = query.getOrDefault("userIp")
  valid_590986 = validateParameter(valid_590986, JString, required = false,
                                 default = nil)
  if valid_590986 != nil:
    section.add "userIp", valid_590986
  var valid_590987 = query.getOrDefault("key")
  valid_590987 = validateParameter(valid_590987, JString, required = false,
                                 default = nil)
  if valid_590987 != nil:
    section.add "key", valid_590987
  var valid_590988 = query.getOrDefault("prettyPrint")
  valid_590988 = validateParameter(valid_590988, JBool, required = false,
                                 default = newJBool(true))
  if valid_590988 != nil:
    section.add "prettyPrint", valid_590988
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_590990: Call_DfareportingFloodlightActivityGroupsUpdate_590978;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight activity group.
  ## 
  let valid = call_590990.validator(path, query, header, formData, body)
  let scheme = call_590990.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590990.url(scheme.get, call_590990.host, call_590990.base,
                         call_590990.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590990, url, valid)

proc call*(call_590991: Call_DfareportingFloodlightActivityGroupsUpdate_590978;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivityGroupsUpdate
  ## Updates an existing floodlight activity group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590992 = newJObject()
  var query_590993 = newJObject()
  var body_590994 = newJObject()
  add(path_590992, "profileId", newJString(profileId))
  add(query_590993, "fields", newJString(fields))
  add(query_590993, "quotaUser", newJString(quotaUser))
  add(query_590993, "alt", newJString(alt))
  add(query_590993, "oauth_token", newJString(oauthToken))
  add(query_590993, "userIp", newJString(userIp))
  add(query_590993, "key", newJString(key))
  if body != nil:
    body_590994 = body
  add(query_590993, "prettyPrint", newJBool(prettyPrint))
  result = call_590991.call(path_590992, query_590993, nil, nil, body_590994)

var dfareportingFloodlightActivityGroupsUpdate* = Call_DfareportingFloodlightActivityGroupsUpdate_590978(
    name: "dfareportingFloodlightActivityGroupsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups",
    validator: validate_DfareportingFloodlightActivityGroupsUpdate_590979,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightActivityGroupsUpdate_590980,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsInsert_590995 = ref object of OpenApiRestCall_588466
proc url_DfareportingFloodlightActivityGroupsInsert_590997(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsInsert_590996(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new floodlight activity group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590998 = path.getOrDefault("profileId")
  valid_590998 = validateParameter(valid_590998, JString, required = true,
                                 default = nil)
  if valid_590998 != nil:
    section.add "profileId", valid_590998
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590999 = query.getOrDefault("fields")
  valid_590999 = validateParameter(valid_590999, JString, required = false,
                                 default = nil)
  if valid_590999 != nil:
    section.add "fields", valid_590999
  var valid_591000 = query.getOrDefault("quotaUser")
  valid_591000 = validateParameter(valid_591000, JString, required = false,
                                 default = nil)
  if valid_591000 != nil:
    section.add "quotaUser", valid_591000
  var valid_591001 = query.getOrDefault("alt")
  valid_591001 = validateParameter(valid_591001, JString, required = false,
                                 default = newJString("json"))
  if valid_591001 != nil:
    section.add "alt", valid_591001
  var valid_591002 = query.getOrDefault("oauth_token")
  valid_591002 = validateParameter(valid_591002, JString, required = false,
                                 default = nil)
  if valid_591002 != nil:
    section.add "oauth_token", valid_591002
  var valid_591003 = query.getOrDefault("userIp")
  valid_591003 = validateParameter(valid_591003, JString, required = false,
                                 default = nil)
  if valid_591003 != nil:
    section.add "userIp", valid_591003
  var valid_591004 = query.getOrDefault("key")
  valid_591004 = validateParameter(valid_591004, JString, required = false,
                                 default = nil)
  if valid_591004 != nil:
    section.add "key", valid_591004
  var valid_591005 = query.getOrDefault("prettyPrint")
  valid_591005 = validateParameter(valid_591005, JBool, required = false,
                                 default = newJBool(true))
  if valid_591005 != nil:
    section.add "prettyPrint", valid_591005
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_591007: Call_DfareportingFloodlightActivityGroupsInsert_590995;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new floodlight activity group.
  ## 
  let valid = call_591007.validator(path, query, header, formData, body)
  let scheme = call_591007.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591007.url(scheme.get, call_591007.host, call_591007.base,
                         call_591007.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591007, url, valid)

proc call*(call_591008: Call_DfareportingFloodlightActivityGroupsInsert_590995;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivityGroupsInsert
  ## Inserts a new floodlight activity group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591009 = newJObject()
  var query_591010 = newJObject()
  var body_591011 = newJObject()
  add(path_591009, "profileId", newJString(profileId))
  add(query_591010, "fields", newJString(fields))
  add(query_591010, "quotaUser", newJString(quotaUser))
  add(query_591010, "alt", newJString(alt))
  add(query_591010, "oauth_token", newJString(oauthToken))
  add(query_591010, "userIp", newJString(userIp))
  add(query_591010, "key", newJString(key))
  if body != nil:
    body_591011 = body
  add(query_591010, "prettyPrint", newJBool(prettyPrint))
  result = call_591008.call(path_591009, query_591010, nil, nil, body_591011)

var dfareportingFloodlightActivityGroupsInsert* = Call_DfareportingFloodlightActivityGroupsInsert_590995(
    name: "dfareportingFloodlightActivityGroupsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups",
    validator: validate_DfareportingFloodlightActivityGroupsInsert_590996,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightActivityGroupsInsert_590997,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsList_590954 = ref object of OpenApiRestCall_588466
proc url_DfareportingFloodlightActivityGroupsList_590956(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsList_590955(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_590957 = path.getOrDefault("profileId")
  valid_590957 = validateParameter(valid_590957, JString, required = true,
                                 default = nil)
  if valid_590957 != nil:
    section.add "profileId", valid_590957
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivitygroup*2015" will return objects with names like "floodlightactivitygroup June 2015", "floodlightactivitygroup April 2015", or simply "floodlightactivitygroup 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivitygroup" will match objects with name "my floodlightactivitygroup activity", "floodlightactivitygroup 2015", or simply "floodlightactivitygroup".
  ##   advertiserId: JString
  ##               : Select only floodlight activity groups with the specified advertiser ID. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
  ##   type: JString
  ##       : Select only floodlight activity groups with the specified floodlight activity group type.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   floodlightConfigurationId: JString
  ##                            : Select only floodlight activity groups with the specified floodlight configuration ID. Must specify either advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only floodlight activity groups with the specified IDs. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_590958 = query.getOrDefault("fields")
  valid_590958 = validateParameter(valid_590958, JString, required = false,
                                 default = nil)
  if valid_590958 != nil:
    section.add "fields", valid_590958
  var valid_590959 = query.getOrDefault("pageToken")
  valid_590959 = validateParameter(valid_590959, JString, required = false,
                                 default = nil)
  if valid_590959 != nil:
    section.add "pageToken", valid_590959
  var valid_590960 = query.getOrDefault("quotaUser")
  valid_590960 = validateParameter(valid_590960, JString, required = false,
                                 default = nil)
  if valid_590960 != nil:
    section.add "quotaUser", valid_590960
  var valid_590961 = query.getOrDefault("sortField")
  valid_590961 = validateParameter(valid_590961, JString, required = false,
                                 default = newJString("ID"))
  if valid_590961 != nil:
    section.add "sortField", valid_590961
  var valid_590962 = query.getOrDefault("alt")
  valid_590962 = validateParameter(valid_590962, JString, required = false,
                                 default = newJString("json"))
  if valid_590962 != nil:
    section.add "alt", valid_590962
  var valid_590963 = query.getOrDefault("searchString")
  valid_590963 = validateParameter(valid_590963, JString, required = false,
                                 default = nil)
  if valid_590963 != nil:
    section.add "searchString", valid_590963
  var valid_590964 = query.getOrDefault("advertiserId")
  valid_590964 = validateParameter(valid_590964, JString, required = false,
                                 default = nil)
  if valid_590964 != nil:
    section.add "advertiserId", valid_590964
  var valid_590965 = query.getOrDefault("type")
  valid_590965 = validateParameter(valid_590965, JString, required = false,
                                 default = newJString("COUNTER"))
  if valid_590965 != nil:
    section.add "type", valid_590965
  var valid_590966 = query.getOrDefault("oauth_token")
  valid_590966 = validateParameter(valid_590966, JString, required = false,
                                 default = nil)
  if valid_590966 != nil:
    section.add "oauth_token", valid_590966
  var valid_590967 = query.getOrDefault("userIp")
  valid_590967 = validateParameter(valid_590967, JString, required = false,
                                 default = nil)
  if valid_590967 != nil:
    section.add "userIp", valid_590967
  var valid_590968 = query.getOrDefault("floodlightConfigurationId")
  valid_590968 = validateParameter(valid_590968, JString, required = false,
                                 default = nil)
  if valid_590968 != nil:
    section.add "floodlightConfigurationId", valid_590968
  var valid_590969 = query.getOrDefault("maxResults")
  valid_590969 = validateParameter(valid_590969, JInt, required = false,
                                 default = newJInt(1000))
  if valid_590969 != nil:
    section.add "maxResults", valid_590969
  var valid_590970 = query.getOrDefault("ids")
  valid_590970 = validateParameter(valid_590970, JArray, required = false,
                                 default = nil)
  if valid_590970 != nil:
    section.add "ids", valid_590970
  var valid_590971 = query.getOrDefault("key")
  valid_590971 = validateParameter(valid_590971, JString, required = false,
                                 default = nil)
  if valid_590971 != nil:
    section.add "key", valid_590971
  var valid_590972 = query.getOrDefault("sortOrder")
  valid_590972 = validateParameter(valid_590972, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_590972 != nil:
    section.add "sortOrder", valid_590972
  var valid_590973 = query.getOrDefault("prettyPrint")
  valid_590973 = validateParameter(valid_590973, JBool, required = false,
                                 default = newJBool(true))
  if valid_590973 != nil:
    section.add "prettyPrint", valid_590973
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590974: Call_DfareportingFloodlightActivityGroupsList_590954;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging.
  ## 
  let valid = call_590974.validator(path, query, header, formData, body)
  let scheme = call_590974.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590974.url(scheme.get, call_590974.host, call_590974.base,
                         call_590974.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590974, url, valid)

proc call*(call_590975: Call_DfareportingFloodlightActivityGroupsList_590954;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; advertiserId: string = "";
          `type`: string = "COUNTER"; oauthToken: string = ""; userIp: string = "";
          floodlightConfigurationId: string = ""; maxResults: int = 1000;
          ids: JsonNode = nil; key: string = ""; sortOrder: string = "ASCENDING";
          prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivityGroupsList
  ## Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivitygroup*2015" will return objects with names like "floodlightactivitygroup June 2015", "floodlightactivitygroup April 2015", or simply "floodlightactivitygroup 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivitygroup" will match objects with name "my floodlightactivitygroup activity", "floodlightactivitygroup 2015", or simply "floodlightactivitygroup".
  ##   advertiserId: string
  ##               : Select only floodlight activity groups with the specified advertiser ID. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
  ##   type: string
  ##       : Select only floodlight activity groups with the specified floodlight activity group type.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   floodlightConfigurationId: string
  ##                            : Select only floodlight activity groups with the specified floodlight configuration ID. Must specify either advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only floodlight activity groups with the specified IDs. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_590976 = newJObject()
  var query_590977 = newJObject()
  add(path_590976, "profileId", newJString(profileId))
  add(query_590977, "fields", newJString(fields))
  add(query_590977, "pageToken", newJString(pageToken))
  add(query_590977, "quotaUser", newJString(quotaUser))
  add(query_590977, "sortField", newJString(sortField))
  add(query_590977, "alt", newJString(alt))
  add(query_590977, "searchString", newJString(searchString))
  add(query_590977, "advertiserId", newJString(advertiserId))
  add(query_590977, "type", newJString(`type`))
  add(query_590977, "oauth_token", newJString(oauthToken))
  add(query_590977, "userIp", newJString(userIp))
  add(query_590977, "floodlightConfigurationId",
      newJString(floodlightConfigurationId))
  add(query_590977, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_590977.add "ids", ids
  add(query_590977, "key", newJString(key))
  add(query_590977, "sortOrder", newJString(sortOrder))
  add(query_590977, "prettyPrint", newJBool(prettyPrint))
  result = call_590975.call(path_590976, query_590977, nil, nil, nil)

var dfareportingFloodlightActivityGroupsList* = Call_DfareportingFloodlightActivityGroupsList_590954(
    name: "dfareportingFloodlightActivityGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups",
    validator: validate_DfareportingFloodlightActivityGroupsList_590955,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivityGroupsList_590956,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsPatch_591012 = ref object of OpenApiRestCall_588466
proc url_DfareportingFloodlightActivityGroupsPatch_591014(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsPatch_591013(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight activity group. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591015 = path.getOrDefault("profileId")
  valid_591015 = validateParameter(valid_591015, JString, required = true,
                                 default = nil)
  if valid_591015 != nil:
    section.add "profileId", valid_591015
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Floodlight activity Group ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591016 = query.getOrDefault("fields")
  valid_591016 = validateParameter(valid_591016, JString, required = false,
                                 default = nil)
  if valid_591016 != nil:
    section.add "fields", valid_591016
  var valid_591017 = query.getOrDefault("quotaUser")
  valid_591017 = validateParameter(valid_591017, JString, required = false,
                                 default = nil)
  if valid_591017 != nil:
    section.add "quotaUser", valid_591017
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_591018 = query.getOrDefault("id")
  valid_591018 = validateParameter(valid_591018, JString, required = true,
                                 default = nil)
  if valid_591018 != nil:
    section.add "id", valid_591018
  var valid_591019 = query.getOrDefault("alt")
  valid_591019 = validateParameter(valid_591019, JString, required = false,
                                 default = newJString("json"))
  if valid_591019 != nil:
    section.add "alt", valid_591019
  var valid_591020 = query.getOrDefault("oauth_token")
  valid_591020 = validateParameter(valid_591020, JString, required = false,
                                 default = nil)
  if valid_591020 != nil:
    section.add "oauth_token", valid_591020
  var valid_591021 = query.getOrDefault("userIp")
  valid_591021 = validateParameter(valid_591021, JString, required = false,
                                 default = nil)
  if valid_591021 != nil:
    section.add "userIp", valid_591021
  var valid_591022 = query.getOrDefault("key")
  valid_591022 = validateParameter(valid_591022, JString, required = false,
                                 default = nil)
  if valid_591022 != nil:
    section.add "key", valid_591022
  var valid_591023 = query.getOrDefault("prettyPrint")
  valid_591023 = validateParameter(valid_591023, JBool, required = false,
                                 default = newJBool(true))
  if valid_591023 != nil:
    section.add "prettyPrint", valid_591023
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_591025: Call_DfareportingFloodlightActivityGroupsPatch_591012;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight activity group. This method supports patch semantics.
  ## 
  let valid = call_591025.validator(path, query, header, formData, body)
  let scheme = call_591025.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591025.url(scheme.get, call_591025.host, call_591025.base,
                         call_591025.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591025, url, valid)

proc call*(call_591026: Call_DfareportingFloodlightActivityGroupsPatch_591012;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivityGroupsPatch
  ## Updates an existing floodlight activity group. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Floodlight activity Group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591027 = newJObject()
  var query_591028 = newJObject()
  var body_591029 = newJObject()
  add(path_591027, "profileId", newJString(profileId))
  add(query_591028, "fields", newJString(fields))
  add(query_591028, "quotaUser", newJString(quotaUser))
  add(query_591028, "id", newJString(id))
  add(query_591028, "alt", newJString(alt))
  add(query_591028, "oauth_token", newJString(oauthToken))
  add(query_591028, "userIp", newJString(userIp))
  add(query_591028, "key", newJString(key))
  if body != nil:
    body_591029 = body
  add(query_591028, "prettyPrint", newJBool(prettyPrint))
  result = call_591026.call(path_591027, query_591028, nil, nil, body_591029)

var dfareportingFloodlightActivityGroupsPatch* = Call_DfareportingFloodlightActivityGroupsPatch_591012(
    name: "dfareportingFloodlightActivityGroupsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups",
    validator: validate_DfareportingFloodlightActivityGroupsPatch_591013,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightActivityGroupsPatch_591014,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsGet_591030 = ref object of OpenApiRestCall_588466
proc url_DfareportingFloodlightActivityGroupsGet_591032(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsGet_591031(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one floodlight activity group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Floodlight activity Group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591033 = path.getOrDefault("profileId")
  valid_591033 = validateParameter(valid_591033, JString, required = true,
                                 default = nil)
  if valid_591033 != nil:
    section.add "profileId", valid_591033
  var valid_591034 = path.getOrDefault("id")
  valid_591034 = validateParameter(valid_591034, JString, required = true,
                                 default = nil)
  if valid_591034 != nil:
    section.add "id", valid_591034
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591035 = query.getOrDefault("fields")
  valid_591035 = validateParameter(valid_591035, JString, required = false,
                                 default = nil)
  if valid_591035 != nil:
    section.add "fields", valid_591035
  var valid_591036 = query.getOrDefault("quotaUser")
  valid_591036 = validateParameter(valid_591036, JString, required = false,
                                 default = nil)
  if valid_591036 != nil:
    section.add "quotaUser", valid_591036
  var valid_591037 = query.getOrDefault("alt")
  valid_591037 = validateParameter(valid_591037, JString, required = false,
                                 default = newJString("json"))
  if valid_591037 != nil:
    section.add "alt", valid_591037
  var valid_591038 = query.getOrDefault("oauth_token")
  valid_591038 = validateParameter(valid_591038, JString, required = false,
                                 default = nil)
  if valid_591038 != nil:
    section.add "oauth_token", valid_591038
  var valid_591039 = query.getOrDefault("userIp")
  valid_591039 = validateParameter(valid_591039, JString, required = false,
                                 default = nil)
  if valid_591039 != nil:
    section.add "userIp", valid_591039
  var valid_591040 = query.getOrDefault("key")
  valid_591040 = validateParameter(valid_591040, JString, required = false,
                                 default = nil)
  if valid_591040 != nil:
    section.add "key", valid_591040
  var valid_591041 = query.getOrDefault("prettyPrint")
  valid_591041 = validateParameter(valid_591041, JBool, required = false,
                                 default = newJBool(true))
  if valid_591041 != nil:
    section.add "prettyPrint", valid_591041
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591042: Call_DfareportingFloodlightActivityGroupsGet_591030;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one floodlight activity group by ID.
  ## 
  let valid = call_591042.validator(path, query, header, formData, body)
  let scheme = call_591042.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591042.url(scheme.get, call_591042.host, call_591042.base,
                         call_591042.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591042, url, valid)

proc call*(call_591043: Call_DfareportingFloodlightActivityGroupsGet_591030;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivityGroupsGet
  ## Gets one floodlight activity group by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Floodlight activity Group ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591044 = newJObject()
  var query_591045 = newJObject()
  add(path_591044, "profileId", newJString(profileId))
  add(query_591045, "fields", newJString(fields))
  add(query_591045, "quotaUser", newJString(quotaUser))
  add(query_591045, "alt", newJString(alt))
  add(query_591045, "oauth_token", newJString(oauthToken))
  add(query_591045, "userIp", newJString(userIp))
  add(path_591044, "id", newJString(id))
  add(query_591045, "key", newJString(key))
  add(query_591045, "prettyPrint", newJBool(prettyPrint))
  result = call_591043.call(path_591044, query_591045, nil, nil, nil)

var dfareportingFloodlightActivityGroupsGet* = Call_DfareportingFloodlightActivityGroupsGet_591030(
    name: "dfareportingFloodlightActivityGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups/{id}",
    validator: validate_DfareportingFloodlightActivityGroupsGet_591031,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivityGroupsGet_591032,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightConfigurationsUpdate_591062 = ref object of OpenApiRestCall_588466
proc url_DfareportingFloodlightConfigurationsUpdate_591064(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightConfigurations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightConfigurationsUpdate_591063(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight configuration.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591065 = path.getOrDefault("profileId")
  valid_591065 = validateParameter(valid_591065, JString, required = true,
                                 default = nil)
  if valid_591065 != nil:
    section.add "profileId", valid_591065
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591066 = query.getOrDefault("fields")
  valid_591066 = validateParameter(valid_591066, JString, required = false,
                                 default = nil)
  if valid_591066 != nil:
    section.add "fields", valid_591066
  var valid_591067 = query.getOrDefault("quotaUser")
  valid_591067 = validateParameter(valid_591067, JString, required = false,
                                 default = nil)
  if valid_591067 != nil:
    section.add "quotaUser", valid_591067
  var valid_591068 = query.getOrDefault("alt")
  valid_591068 = validateParameter(valid_591068, JString, required = false,
                                 default = newJString("json"))
  if valid_591068 != nil:
    section.add "alt", valid_591068
  var valid_591069 = query.getOrDefault("oauth_token")
  valid_591069 = validateParameter(valid_591069, JString, required = false,
                                 default = nil)
  if valid_591069 != nil:
    section.add "oauth_token", valid_591069
  var valid_591070 = query.getOrDefault("userIp")
  valid_591070 = validateParameter(valid_591070, JString, required = false,
                                 default = nil)
  if valid_591070 != nil:
    section.add "userIp", valid_591070
  var valid_591071 = query.getOrDefault("key")
  valid_591071 = validateParameter(valid_591071, JString, required = false,
                                 default = nil)
  if valid_591071 != nil:
    section.add "key", valid_591071
  var valid_591072 = query.getOrDefault("prettyPrint")
  valid_591072 = validateParameter(valid_591072, JBool, required = false,
                                 default = newJBool(true))
  if valid_591072 != nil:
    section.add "prettyPrint", valid_591072
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_591074: Call_DfareportingFloodlightConfigurationsUpdate_591062;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight configuration.
  ## 
  let valid = call_591074.validator(path, query, header, formData, body)
  let scheme = call_591074.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591074.url(scheme.get, call_591074.host, call_591074.base,
                         call_591074.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591074, url, valid)

proc call*(call_591075: Call_DfareportingFloodlightConfigurationsUpdate_591062;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightConfigurationsUpdate
  ## Updates an existing floodlight configuration.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591076 = newJObject()
  var query_591077 = newJObject()
  var body_591078 = newJObject()
  add(path_591076, "profileId", newJString(profileId))
  add(query_591077, "fields", newJString(fields))
  add(query_591077, "quotaUser", newJString(quotaUser))
  add(query_591077, "alt", newJString(alt))
  add(query_591077, "oauth_token", newJString(oauthToken))
  add(query_591077, "userIp", newJString(userIp))
  add(query_591077, "key", newJString(key))
  if body != nil:
    body_591078 = body
  add(query_591077, "prettyPrint", newJBool(prettyPrint))
  result = call_591075.call(path_591076, query_591077, nil, nil, body_591078)

var dfareportingFloodlightConfigurationsUpdate* = Call_DfareportingFloodlightConfigurationsUpdate_591062(
    name: "dfareportingFloodlightConfigurationsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightConfigurations",
    validator: validate_DfareportingFloodlightConfigurationsUpdate_591063,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightConfigurationsUpdate_591064,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightConfigurationsList_591046 = ref object of OpenApiRestCall_588466
proc url_DfareportingFloodlightConfigurationsList_591048(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightConfigurations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightConfigurationsList_591047(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of floodlight configurations, possibly filtered.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591049 = path.getOrDefault("profileId")
  valid_591049 = validateParameter(valid_591049, JString, required = true,
                                 default = nil)
  if valid_591049 != nil:
    section.add "profileId", valid_591049
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   ids: JArray
  ##      : Set of IDs of floodlight configurations to retrieve. Required field; otherwise an empty list will be returned.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591050 = query.getOrDefault("fields")
  valid_591050 = validateParameter(valid_591050, JString, required = false,
                                 default = nil)
  if valid_591050 != nil:
    section.add "fields", valid_591050
  var valid_591051 = query.getOrDefault("quotaUser")
  valid_591051 = validateParameter(valid_591051, JString, required = false,
                                 default = nil)
  if valid_591051 != nil:
    section.add "quotaUser", valid_591051
  var valid_591052 = query.getOrDefault("alt")
  valid_591052 = validateParameter(valid_591052, JString, required = false,
                                 default = newJString("json"))
  if valid_591052 != nil:
    section.add "alt", valid_591052
  var valid_591053 = query.getOrDefault("oauth_token")
  valid_591053 = validateParameter(valid_591053, JString, required = false,
                                 default = nil)
  if valid_591053 != nil:
    section.add "oauth_token", valid_591053
  var valid_591054 = query.getOrDefault("userIp")
  valid_591054 = validateParameter(valid_591054, JString, required = false,
                                 default = nil)
  if valid_591054 != nil:
    section.add "userIp", valid_591054
  var valid_591055 = query.getOrDefault("ids")
  valid_591055 = validateParameter(valid_591055, JArray, required = false,
                                 default = nil)
  if valid_591055 != nil:
    section.add "ids", valid_591055
  var valid_591056 = query.getOrDefault("key")
  valid_591056 = validateParameter(valid_591056, JString, required = false,
                                 default = nil)
  if valid_591056 != nil:
    section.add "key", valid_591056
  var valid_591057 = query.getOrDefault("prettyPrint")
  valid_591057 = validateParameter(valid_591057, JBool, required = false,
                                 default = newJBool(true))
  if valid_591057 != nil:
    section.add "prettyPrint", valid_591057
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591058: Call_DfareportingFloodlightConfigurationsList_591046;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of floodlight configurations, possibly filtered.
  ## 
  let valid = call_591058.validator(path, query, header, formData, body)
  let scheme = call_591058.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591058.url(scheme.get, call_591058.host, call_591058.base,
                         call_591058.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591058, url, valid)

proc call*(call_591059: Call_DfareportingFloodlightConfigurationsList_591046;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          ids: JsonNode = nil; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightConfigurationsList
  ## Retrieves a list of floodlight configurations, possibly filtered.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   ids: JArray
  ##      : Set of IDs of floodlight configurations to retrieve. Required field; otherwise an empty list will be returned.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591060 = newJObject()
  var query_591061 = newJObject()
  add(path_591060, "profileId", newJString(profileId))
  add(query_591061, "fields", newJString(fields))
  add(query_591061, "quotaUser", newJString(quotaUser))
  add(query_591061, "alt", newJString(alt))
  add(query_591061, "oauth_token", newJString(oauthToken))
  add(query_591061, "userIp", newJString(userIp))
  if ids != nil:
    query_591061.add "ids", ids
  add(query_591061, "key", newJString(key))
  add(query_591061, "prettyPrint", newJBool(prettyPrint))
  result = call_591059.call(path_591060, query_591061, nil, nil, nil)

var dfareportingFloodlightConfigurationsList* = Call_DfareportingFloodlightConfigurationsList_591046(
    name: "dfareportingFloodlightConfigurationsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightConfigurations",
    validator: validate_DfareportingFloodlightConfigurationsList_591047,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightConfigurationsList_591048,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightConfigurationsPatch_591079 = ref object of OpenApiRestCall_588466
proc url_DfareportingFloodlightConfigurationsPatch_591081(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightConfigurations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightConfigurationsPatch_591080(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight configuration. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591082 = path.getOrDefault("profileId")
  valid_591082 = validateParameter(valid_591082, JString, required = true,
                                 default = nil)
  if valid_591082 != nil:
    section.add "profileId", valid_591082
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Floodlight configuration ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591083 = query.getOrDefault("fields")
  valid_591083 = validateParameter(valid_591083, JString, required = false,
                                 default = nil)
  if valid_591083 != nil:
    section.add "fields", valid_591083
  var valid_591084 = query.getOrDefault("quotaUser")
  valid_591084 = validateParameter(valid_591084, JString, required = false,
                                 default = nil)
  if valid_591084 != nil:
    section.add "quotaUser", valid_591084
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_591085 = query.getOrDefault("id")
  valid_591085 = validateParameter(valid_591085, JString, required = true,
                                 default = nil)
  if valid_591085 != nil:
    section.add "id", valid_591085
  var valid_591086 = query.getOrDefault("alt")
  valid_591086 = validateParameter(valid_591086, JString, required = false,
                                 default = newJString("json"))
  if valid_591086 != nil:
    section.add "alt", valid_591086
  var valid_591087 = query.getOrDefault("oauth_token")
  valid_591087 = validateParameter(valid_591087, JString, required = false,
                                 default = nil)
  if valid_591087 != nil:
    section.add "oauth_token", valid_591087
  var valid_591088 = query.getOrDefault("userIp")
  valid_591088 = validateParameter(valid_591088, JString, required = false,
                                 default = nil)
  if valid_591088 != nil:
    section.add "userIp", valid_591088
  var valid_591089 = query.getOrDefault("key")
  valid_591089 = validateParameter(valid_591089, JString, required = false,
                                 default = nil)
  if valid_591089 != nil:
    section.add "key", valid_591089
  var valid_591090 = query.getOrDefault("prettyPrint")
  valid_591090 = validateParameter(valid_591090, JBool, required = false,
                                 default = newJBool(true))
  if valid_591090 != nil:
    section.add "prettyPrint", valid_591090
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_591092: Call_DfareportingFloodlightConfigurationsPatch_591079;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight configuration. This method supports patch semantics.
  ## 
  let valid = call_591092.validator(path, query, header, formData, body)
  let scheme = call_591092.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591092.url(scheme.get, call_591092.host, call_591092.base,
                         call_591092.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591092, url, valid)

proc call*(call_591093: Call_DfareportingFloodlightConfigurationsPatch_591079;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightConfigurationsPatch
  ## Updates an existing floodlight configuration. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Floodlight configuration ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591094 = newJObject()
  var query_591095 = newJObject()
  var body_591096 = newJObject()
  add(path_591094, "profileId", newJString(profileId))
  add(query_591095, "fields", newJString(fields))
  add(query_591095, "quotaUser", newJString(quotaUser))
  add(query_591095, "id", newJString(id))
  add(query_591095, "alt", newJString(alt))
  add(query_591095, "oauth_token", newJString(oauthToken))
  add(query_591095, "userIp", newJString(userIp))
  add(query_591095, "key", newJString(key))
  if body != nil:
    body_591096 = body
  add(query_591095, "prettyPrint", newJBool(prettyPrint))
  result = call_591093.call(path_591094, query_591095, nil, nil, body_591096)

var dfareportingFloodlightConfigurationsPatch* = Call_DfareportingFloodlightConfigurationsPatch_591079(
    name: "dfareportingFloodlightConfigurationsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightConfigurations",
    validator: validate_DfareportingFloodlightConfigurationsPatch_591080,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightConfigurationsPatch_591081,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightConfigurationsGet_591097 = ref object of OpenApiRestCall_588466
proc url_DfareportingFloodlightConfigurationsGet_591099(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightConfigurations/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightConfigurationsGet_591098(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one floodlight configuration by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Floodlight configuration ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591100 = path.getOrDefault("profileId")
  valid_591100 = validateParameter(valid_591100, JString, required = true,
                                 default = nil)
  if valid_591100 != nil:
    section.add "profileId", valid_591100
  var valid_591101 = path.getOrDefault("id")
  valid_591101 = validateParameter(valid_591101, JString, required = true,
                                 default = nil)
  if valid_591101 != nil:
    section.add "id", valid_591101
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591102 = query.getOrDefault("fields")
  valid_591102 = validateParameter(valid_591102, JString, required = false,
                                 default = nil)
  if valid_591102 != nil:
    section.add "fields", valid_591102
  var valid_591103 = query.getOrDefault("quotaUser")
  valid_591103 = validateParameter(valid_591103, JString, required = false,
                                 default = nil)
  if valid_591103 != nil:
    section.add "quotaUser", valid_591103
  var valid_591104 = query.getOrDefault("alt")
  valid_591104 = validateParameter(valid_591104, JString, required = false,
                                 default = newJString("json"))
  if valid_591104 != nil:
    section.add "alt", valid_591104
  var valid_591105 = query.getOrDefault("oauth_token")
  valid_591105 = validateParameter(valid_591105, JString, required = false,
                                 default = nil)
  if valid_591105 != nil:
    section.add "oauth_token", valid_591105
  var valid_591106 = query.getOrDefault("userIp")
  valid_591106 = validateParameter(valid_591106, JString, required = false,
                                 default = nil)
  if valid_591106 != nil:
    section.add "userIp", valid_591106
  var valid_591107 = query.getOrDefault("key")
  valid_591107 = validateParameter(valid_591107, JString, required = false,
                                 default = nil)
  if valid_591107 != nil:
    section.add "key", valid_591107
  var valid_591108 = query.getOrDefault("prettyPrint")
  valid_591108 = validateParameter(valid_591108, JBool, required = false,
                                 default = newJBool(true))
  if valid_591108 != nil:
    section.add "prettyPrint", valid_591108
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591109: Call_DfareportingFloodlightConfigurationsGet_591097;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one floodlight configuration by ID.
  ## 
  let valid = call_591109.validator(path, query, header, formData, body)
  let scheme = call_591109.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591109.url(scheme.get, call_591109.host, call_591109.base,
                         call_591109.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591109, url, valid)

proc call*(call_591110: Call_DfareportingFloodlightConfigurationsGet_591097;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightConfigurationsGet
  ## Gets one floodlight configuration by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Floodlight configuration ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591111 = newJObject()
  var query_591112 = newJObject()
  add(path_591111, "profileId", newJString(profileId))
  add(query_591112, "fields", newJString(fields))
  add(query_591112, "quotaUser", newJString(quotaUser))
  add(query_591112, "alt", newJString(alt))
  add(query_591112, "oauth_token", newJString(oauthToken))
  add(query_591112, "userIp", newJString(userIp))
  add(path_591111, "id", newJString(id))
  add(query_591112, "key", newJString(key))
  add(query_591112, "prettyPrint", newJBool(prettyPrint))
  result = call_591110.call(path_591111, query_591112, nil, nil, nil)

var dfareportingFloodlightConfigurationsGet* = Call_DfareportingFloodlightConfigurationsGet_591097(
    name: "dfareportingFloodlightConfigurationsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightConfigurations/{id}",
    validator: validate_DfareportingFloodlightConfigurationsGet_591098,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightConfigurationsGet_591099,
    schemes: {Scheme.Https})
type
  Call_DfareportingLanguagesList_591113 = ref object of OpenApiRestCall_588466
proc url_DfareportingLanguagesList_591115(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/languages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingLanguagesList_591114(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of languages.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591116 = path.getOrDefault("profileId")
  valid_591116 = validateParameter(valid_591116, JString, required = true,
                                 default = nil)
  if valid_591116 != nil:
    section.add "profileId", valid_591116
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591117 = query.getOrDefault("fields")
  valid_591117 = validateParameter(valid_591117, JString, required = false,
                                 default = nil)
  if valid_591117 != nil:
    section.add "fields", valid_591117
  var valid_591118 = query.getOrDefault("quotaUser")
  valid_591118 = validateParameter(valid_591118, JString, required = false,
                                 default = nil)
  if valid_591118 != nil:
    section.add "quotaUser", valid_591118
  var valid_591119 = query.getOrDefault("alt")
  valid_591119 = validateParameter(valid_591119, JString, required = false,
                                 default = newJString("json"))
  if valid_591119 != nil:
    section.add "alt", valid_591119
  var valid_591120 = query.getOrDefault("oauth_token")
  valid_591120 = validateParameter(valid_591120, JString, required = false,
                                 default = nil)
  if valid_591120 != nil:
    section.add "oauth_token", valid_591120
  var valid_591121 = query.getOrDefault("userIp")
  valid_591121 = validateParameter(valid_591121, JString, required = false,
                                 default = nil)
  if valid_591121 != nil:
    section.add "userIp", valid_591121
  var valid_591122 = query.getOrDefault("key")
  valid_591122 = validateParameter(valid_591122, JString, required = false,
                                 default = nil)
  if valid_591122 != nil:
    section.add "key", valid_591122
  var valid_591123 = query.getOrDefault("prettyPrint")
  valid_591123 = validateParameter(valid_591123, JBool, required = false,
                                 default = newJBool(true))
  if valid_591123 != nil:
    section.add "prettyPrint", valid_591123
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591124: Call_DfareportingLanguagesList_591113; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of languages.
  ## 
  let valid = call_591124.validator(path, query, header, formData, body)
  let scheme = call_591124.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591124.url(scheme.get, call_591124.host, call_591124.base,
                         call_591124.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591124, url, valid)

proc call*(call_591125: Call_DfareportingLanguagesList_591113; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingLanguagesList
  ## Retrieves a list of languages.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591126 = newJObject()
  var query_591127 = newJObject()
  add(path_591126, "profileId", newJString(profileId))
  add(query_591127, "fields", newJString(fields))
  add(query_591127, "quotaUser", newJString(quotaUser))
  add(query_591127, "alt", newJString(alt))
  add(query_591127, "oauth_token", newJString(oauthToken))
  add(query_591127, "userIp", newJString(userIp))
  add(query_591127, "key", newJString(key))
  add(query_591127, "prettyPrint", newJBool(prettyPrint))
  result = call_591125.call(path_591126, query_591127, nil, nil, nil)

var dfareportingLanguagesList* = Call_DfareportingLanguagesList_591113(
    name: "dfareportingLanguagesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/languages",
    validator: validate_DfareportingLanguagesList_591114,
    base: "/dfareporting/v3.2", url: url_DfareportingLanguagesList_591115,
    schemes: {Scheme.Https})
type
  Call_DfareportingMetrosList_591128 = ref object of OpenApiRestCall_588466
proc url_DfareportingMetrosList_591130(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/metros")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMetrosList_591129(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of metros.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591131 = path.getOrDefault("profileId")
  valid_591131 = validateParameter(valid_591131, JString, required = true,
                                 default = nil)
  if valid_591131 != nil:
    section.add "profileId", valid_591131
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591132 = query.getOrDefault("fields")
  valid_591132 = validateParameter(valid_591132, JString, required = false,
                                 default = nil)
  if valid_591132 != nil:
    section.add "fields", valid_591132
  var valid_591133 = query.getOrDefault("quotaUser")
  valid_591133 = validateParameter(valid_591133, JString, required = false,
                                 default = nil)
  if valid_591133 != nil:
    section.add "quotaUser", valid_591133
  var valid_591134 = query.getOrDefault("alt")
  valid_591134 = validateParameter(valid_591134, JString, required = false,
                                 default = newJString("json"))
  if valid_591134 != nil:
    section.add "alt", valid_591134
  var valid_591135 = query.getOrDefault("oauth_token")
  valid_591135 = validateParameter(valid_591135, JString, required = false,
                                 default = nil)
  if valid_591135 != nil:
    section.add "oauth_token", valid_591135
  var valid_591136 = query.getOrDefault("userIp")
  valid_591136 = validateParameter(valid_591136, JString, required = false,
                                 default = nil)
  if valid_591136 != nil:
    section.add "userIp", valid_591136
  var valid_591137 = query.getOrDefault("key")
  valid_591137 = validateParameter(valid_591137, JString, required = false,
                                 default = nil)
  if valid_591137 != nil:
    section.add "key", valid_591137
  var valid_591138 = query.getOrDefault("prettyPrint")
  valid_591138 = validateParameter(valid_591138, JBool, required = false,
                                 default = newJBool(true))
  if valid_591138 != nil:
    section.add "prettyPrint", valid_591138
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591139: Call_DfareportingMetrosList_591128; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of metros.
  ## 
  let valid = call_591139.validator(path, query, header, formData, body)
  let scheme = call_591139.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591139.url(scheme.get, call_591139.host, call_591139.base,
                         call_591139.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591139, url, valid)

proc call*(call_591140: Call_DfareportingMetrosList_591128; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingMetrosList
  ## Retrieves a list of metros.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591141 = newJObject()
  var query_591142 = newJObject()
  add(path_591141, "profileId", newJString(profileId))
  add(query_591142, "fields", newJString(fields))
  add(query_591142, "quotaUser", newJString(quotaUser))
  add(query_591142, "alt", newJString(alt))
  add(query_591142, "oauth_token", newJString(oauthToken))
  add(query_591142, "userIp", newJString(userIp))
  add(query_591142, "key", newJString(key))
  add(query_591142, "prettyPrint", newJBool(prettyPrint))
  result = call_591140.call(path_591141, query_591142, nil, nil, nil)

var dfareportingMetrosList* = Call_DfareportingMetrosList_591128(
    name: "dfareportingMetrosList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/metros",
    validator: validate_DfareportingMetrosList_591129, base: "/dfareporting/v3.2",
    url: url_DfareportingMetrosList_591130, schemes: {Scheme.Https})
type
  Call_DfareportingMobileAppsList_591143 = ref object of OpenApiRestCall_588466
proc url_DfareportingMobileAppsList_591145(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/mobileApps")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMobileAppsList_591144(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves list of available mobile apps.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591146 = path.getOrDefault("profileId")
  valid_591146 = validateParameter(valid_591146, JString, required = true,
                                 default = nil)
  if valid_591146 != nil:
    section.add "profileId", valid_591146
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "app*2015" will return objects with names like "app Jan 2018", "app Jan 2018", or simply "app 2018". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "app" will match objects with name "my app", "app 2018", or simply "app".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   directories: JArray
  ##              : Select only apps from these directories.
  ##   ids: JArray
  ##      : Select only apps with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591147 = query.getOrDefault("fields")
  valid_591147 = validateParameter(valid_591147, JString, required = false,
                                 default = nil)
  if valid_591147 != nil:
    section.add "fields", valid_591147
  var valid_591148 = query.getOrDefault("pageToken")
  valid_591148 = validateParameter(valid_591148, JString, required = false,
                                 default = nil)
  if valid_591148 != nil:
    section.add "pageToken", valid_591148
  var valid_591149 = query.getOrDefault("quotaUser")
  valid_591149 = validateParameter(valid_591149, JString, required = false,
                                 default = nil)
  if valid_591149 != nil:
    section.add "quotaUser", valid_591149
  var valid_591150 = query.getOrDefault("alt")
  valid_591150 = validateParameter(valid_591150, JString, required = false,
                                 default = newJString("json"))
  if valid_591150 != nil:
    section.add "alt", valid_591150
  var valid_591151 = query.getOrDefault("searchString")
  valid_591151 = validateParameter(valid_591151, JString, required = false,
                                 default = nil)
  if valid_591151 != nil:
    section.add "searchString", valid_591151
  var valid_591152 = query.getOrDefault("oauth_token")
  valid_591152 = validateParameter(valid_591152, JString, required = false,
                                 default = nil)
  if valid_591152 != nil:
    section.add "oauth_token", valid_591152
  var valid_591153 = query.getOrDefault("userIp")
  valid_591153 = validateParameter(valid_591153, JString, required = false,
                                 default = nil)
  if valid_591153 != nil:
    section.add "userIp", valid_591153
  var valid_591154 = query.getOrDefault("maxResults")
  valid_591154 = validateParameter(valid_591154, JInt, required = false,
                                 default = newJInt(1000))
  if valid_591154 != nil:
    section.add "maxResults", valid_591154
  var valid_591155 = query.getOrDefault("directories")
  valid_591155 = validateParameter(valid_591155, JArray, required = false,
                                 default = nil)
  if valid_591155 != nil:
    section.add "directories", valid_591155
  var valid_591156 = query.getOrDefault("ids")
  valid_591156 = validateParameter(valid_591156, JArray, required = false,
                                 default = nil)
  if valid_591156 != nil:
    section.add "ids", valid_591156
  var valid_591157 = query.getOrDefault("key")
  valid_591157 = validateParameter(valid_591157, JString, required = false,
                                 default = nil)
  if valid_591157 != nil:
    section.add "key", valid_591157
  var valid_591158 = query.getOrDefault("prettyPrint")
  valid_591158 = validateParameter(valid_591158, JBool, required = false,
                                 default = newJBool(true))
  if valid_591158 != nil:
    section.add "prettyPrint", valid_591158
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591159: Call_DfareportingMobileAppsList_591143; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves list of available mobile apps.
  ## 
  let valid = call_591159.validator(path, query, header, formData, body)
  let scheme = call_591159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591159.url(scheme.get, call_591159.host, call_591159.base,
                         call_591159.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591159, url, valid)

proc call*(call_591160: Call_DfareportingMobileAppsList_591143; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          alt: string = "json"; searchString: string = ""; oauthToken: string = "";
          userIp: string = ""; maxResults: int = 1000; directories: JsonNode = nil;
          ids: JsonNode = nil; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingMobileAppsList
  ## Retrieves list of available mobile apps.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "app*2015" will return objects with names like "app Jan 2018", "app Jan 2018", or simply "app 2018". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "app" will match objects with name "my app", "app 2018", or simply "app".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   directories: JArray
  ##              : Select only apps from these directories.
  ##   ids: JArray
  ##      : Select only apps with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591161 = newJObject()
  var query_591162 = newJObject()
  add(path_591161, "profileId", newJString(profileId))
  add(query_591162, "fields", newJString(fields))
  add(query_591162, "pageToken", newJString(pageToken))
  add(query_591162, "quotaUser", newJString(quotaUser))
  add(query_591162, "alt", newJString(alt))
  add(query_591162, "searchString", newJString(searchString))
  add(query_591162, "oauth_token", newJString(oauthToken))
  add(query_591162, "userIp", newJString(userIp))
  add(query_591162, "maxResults", newJInt(maxResults))
  if directories != nil:
    query_591162.add "directories", directories
  if ids != nil:
    query_591162.add "ids", ids
  add(query_591162, "key", newJString(key))
  add(query_591162, "prettyPrint", newJBool(prettyPrint))
  result = call_591160.call(path_591161, query_591162, nil, nil, nil)

var dfareportingMobileAppsList* = Call_DfareportingMobileAppsList_591143(
    name: "dfareportingMobileAppsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/mobileApps",
    validator: validate_DfareportingMobileAppsList_591144,
    base: "/dfareporting/v3.2", url: url_DfareportingMobileAppsList_591145,
    schemes: {Scheme.Https})
type
  Call_DfareportingMobileAppsGet_591163 = ref object of OpenApiRestCall_588466
proc url_DfareportingMobileAppsGet_591165(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/mobileApps/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMobileAppsGet_591164(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one mobile app by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Mobile app ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591166 = path.getOrDefault("profileId")
  valid_591166 = validateParameter(valid_591166, JString, required = true,
                                 default = nil)
  if valid_591166 != nil:
    section.add "profileId", valid_591166
  var valid_591167 = path.getOrDefault("id")
  valid_591167 = validateParameter(valid_591167, JString, required = true,
                                 default = nil)
  if valid_591167 != nil:
    section.add "id", valid_591167
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591168 = query.getOrDefault("fields")
  valid_591168 = validateParameter(valid_591168, JString, required = false,
                                 default = nil)
  if valid_591168 != nil:
    section.add "fields", valid_591168
  var valid_591169 = query.getOrDefault("quotaUser")
  valid_591169 = validateParameter(valid_591169, JString, required = false,
                                 default = nil)
  if valid_591169 != nil:
    section.add "quotaUser", valid_591169
  var valid_591170 = query.getOrDefault("alt")
  valid_591170 = validateParameter(valid_591170, JString, required = false,
                                 default = newJString("json"))
  if valid_591170 != nil:
    section.add "alt", valid_591170
  var valid_591171 = query.getOrDefault("oauth_token")
  valid_591171 = validateParameter(valid_591171, JString, required = false,
                                 default = nil)
  if valid_591171 != nil:
    section.add "oauth_token", valid_591171
  var valid_591172 = query.getOrDefault("userIp")
  valid_591172 = validateParameter(valid_591172, JString, required = false,
                                 default = nil)
  if valid_591172 != nil:
    section.add "userIp", valid_591172
  var valid_591173 = query.getOrDefault("key")
  valid_591173 = validateParameter(valid_591173, JString, required = false,
                                 default = nil)
  if valid_591173 != nil:
    section.add "key", valid_591173
  var valid_591174 = query.getOrDefault("prettyPrint")
  valid_591174 = validateParameter(valid_591174, JBool, required = false,
                                 default = newJBool(true))
  if valid_591174 != nil:
    section.add "prettyPrint", valid_591174
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591175: Call_DfareportingMobileAppsGet_591163; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one mobile app by ID.
  ## 
  let valid = call_591175.validator(path, query, header, formData, body)
  let scheme = call_591175.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591175.url(scheme.get, call_591175.host, call_591175.base,
                         call_591175.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591175, url, valid)

proc call*(call_591176: Call_DfareportingMobileAppsGet_591163; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingMobileAppsGet
  ## Gets one mobile app by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Mobile app ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591177 = newJObject()
  var query_591178 = newJObject()
  add(path_591177, "profileId", newJString(profileId))
  add(query_591178, "fields", newJString(fields))
  add(query_591178, "quotaUser", newJString(quotaUser))
  add(query_591178, "alt", newJString(alt))
  add(query_591178, "oauth_token", newJString(oauthToken))
  add(query_591178, "userIp", newJString(userIp))
  add(path_591177, "id", newJString(id))
  add(query_591178, "key", newJString(key))
  add(query_591178, "prettyPrint", newJBool(prettyPrint))
  result = call_591176.call(path_591177, query_591178, nil, nil, nil)

var dfareportingMobileAppsGet* = Call_DfareportingMobileAppsGet_591163(
    name: "dfareportingMobileAppsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/mobileApps/{id}",
    validator: validate_DfareportingMobileAppsGet_591164,
    base: "/dfareporting/v3.2", url: url_DfareportingMobileAppsGet_591165,
    schemes: {Scheme.Https})
type
  Call_DfareportingMobileCarriersList_591179 = ref object of OpenApiRestCall_588466
proc url_DfareportingMobileCarriersList_591181(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/mobileCarriers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMobileCarriersList_591180(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of mobile carriers.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591182 = path.getOrDefault("profileId")
  valid_591182 = validateParameter(valid_591182, JString, required = true,
                                 default = nil)
  if valid_591182 != nil:
    section.add "profileId", valid_591182
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591183 = query.getOrDefault("fields")
  valid_591183 = validateParameter(valid_591183, JString, required = false,
                                 default = nil)
  if valid_591183 != nil:
    section.add "fields", valid_591183
  var valid_591184 = query.getOrDefault("quotaUser")
  valid_591184 = validateParameter(valid_591184, JString, required = false,
                                 default = nil)
  if valid_591184 != nil:
    section.add "quotaUser", valid_591184
  var valid_591185 = query.getOrDefault("alt")
  valid_591185 = validateParameter(valid_591185, JString, required = false,
                                 default = newJString("json"))
  if valid_591185 != nil:
    section.add "alt", valid_591185
  var valid_591186 = query.getOrDefault("oauth_token")
  valid_591186 = validateParameter(valid_591186, JString, required = false,
                                 default = nil)
  if valid_591186 != nil:
    section.add "oauth_token", valid_591186
  var valid_591187 = query.getOrDefault("userIp")
  valid_591187 = validateParameter(valid_591187, JString, required = false,
                                 default = nil)
  if valid_591187 != nil:
    section.add "userIp", valid_591187
  var valid_591188 = query.getOrDefault("key")
  valid_591188 = validateParameter(valid_591188, JString, required = false,
                                 default = nil)
  if valid_591188 != nil:
    section.add "key", valid_591188
  var valid_591189 = query.getOrDefault("prettyPrint")
  valid_591189 = validateParameter(valid_591189, JBool, required = false,
                                 default = newJBool(true))
  if valid_591189 != nil:
    section.add "prettyPrint", valid_591189
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591190: Call_DfareportingMobileCarriersList_591179; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of mobile carriers.
  ## 
  let valid = call_591190.validator(path, query, header, formData, body)
  let scheme = call_591190.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591190.url(scheme.get, call_591190.host, call_591190.base,
                         call_591190.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591190, url, valid)

proc call*(call_591191: Call_DfareportingMobileCarriersList_591179;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingMobileCarriersList
  ## Retrieves a list of mobile carriers.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591192 = newJObject()
  var query_591193 = newJObject()
  add(path_591192, "profileId", newJString(profileId))
  add(query_591193, "fields", newJString(fields))
  add(query_591193, "quotaUser", newJString(quotaUser))
  add(query_591193, "alt", newJString(alt))
  add(query_591193, "oauth_token", newJString(oauthToken))
  add(query_591193, "userIp", newJString(userIp))
  add(query_591193, "key", newJString(key))
  add(query_591193, "prettyPrint", newJBool(prettyPrint))
  result = call_591191.call(path_591192, query_591193, nil, nil, nil)

var dfareportingMobileCarriersList* = Call_DfareportingMobileCarriersList_591179(
    name: "dfareportingMobileCarriersList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/mobileCarriers",
    validator: validate_DfareportingMobileCarriersList_591180,
    base: "/dfareporting/v3.2", url: url_DfareportingMobileCarriersList_591181,
    schemes: {Scheme.Https})
type
  Call_DfareportingMobileCarriersGet_591194 = ref object of OpenApiRestCall_588466
proc url_DfareportingMobileCarriersGet_591196(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/mobileCarriers/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMobileCarriersGet_591195(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one mobile carrier by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Mobile carrier ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591197 = path.getOrDefault("profileId")
  valid_591197 = validateParameter(valid_591197, JString, required = true,
                                 default = nil)
  if valid_591197 != nil:
    section.add "profileId", valid_591197
  var valid_591198 = path.getOrDefault("id")
  valid_591198 = validateParameter(valid_591198, JString, required = true,
                                 default = nil)
  if valid_591198 != nil:
    section.add "id", valid_591198
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591199 = query.getOrDefault("fields")
  valid_591199 = validateParameter(valid_591199, JString, required = false,
                                 default = nil)
  if valid_591199 != nil:
    section.add "fields", valid_591199
  var valid_591200 = query.getOrDefault("quotaUser")
  valid_591200 = validateParameter(valid_591200, JString, required = false,
                                 default = nil)
  if valid_591200 != nil:
    section.add "quotaUser", valid_591200
  var valid_591201 = query.getOrDefault("alt")
  valid_591201 = validateParameter(valid_591201, JString, required = false,
                                 default = newJString("json"))
  if valid_591201 != nil:
    section.add "alt", valid_591201
  var valid_591202 = query.getOrDefault("oauth_token")
  valid_591202 = validateParameter(valid_591202, JString, required = false,
                                 default = nil)
  if valid_591202 != nil:
    section.add "oauth_token", valid_591202
  var valid_591203 = query.getOrDefault("userIp")
  valid_591203 = validateParameter(valid_591203, JString, required = false,
                                 default = nil)
  if valid_591203 != nil:
    section.add "userIp", valid_591203
  var valid_591204 = query.getOrDefault("key")
  valid_591204 = validateParameter(valid_591204, JString, required = false,
                                 default = nil)
  if valid_591204 != nil:
    section.add "key", valid_591204
  var valid_591205 = query.getOrDefault("prettyPrint")
  valid_591205 = validateParameter(valid_591205, JBool, required = false,
                                 default = newJBool(true))
  if valid_591205 != nil:
    section.add "prettyPrint", valid_591205
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591206: Call_DfareportingMobileCarriersGet_591194; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one mobile carrier by ID.
  ## 
  let valid = call_591206.validator(path, query, header, formData, body)
  let scheme = call_591206.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591206.url(scheme.get, call_591206.host, call_591206.base,
                         call_591206.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591206, url, valid)

proc call*(call_591207: Call_DfareportingMobileCarriersGet_591194;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingMobileCarriersGet
  ## Gets one mobile carrier by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Mobile carrier ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591208 = newJObject()
  var query_591209 = newJObject()
  add(path_591208, "profileId", newJString(profileId))
  add(query_591209, "fields", newJString(fields))
  add(query_591209, "quotaUser", newJString(quotaUser))
  add(query_591209, "alt", newJString(alt))
  add(query_591209, "oauth_token", newJString(oauthToken))
  add(query_591209, "userIp", newJString(userIp))
  add(path_591208, "id", newJString(id))
  add(query_591209, "key", newJString(key))
  add(query_591209, "prettyPrint", newJBool(prettyPrint))
  result = call_591207.call(path_591208, query_591209, nil, nil, nil)

var dfareportingMobileCarriersGet* = Call_DfareportingMobileCarriersGet_591194(
    name: "dfareportingMobileCarriersGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/mobileCarriers/{id}",
    validator: validate_DfareportingMobileCarriersGet_591195,
    base: "/dfareporting/v3.2", url: url_DfareportingMobileCarriersGet_591196,
    schemes: {Scheme.Https})
type
  Call_DfareportingOperatingSystemVersionsList_591210 = ref object of OpenApiRestCall_588466
proc url_DfareportingOperatingSystemVersionsList_591212(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/operatingSystemVersions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOperatingSystemVersionsList_591211(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of operating system versions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591213 = path.getOrDefault("profileId")
  valid_591213 = validateParameter(valid_591213, JString, required = true,
                                 default = nil)
  if valid_591213 != nil:
    section.add "profileId", valid_591213
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591214 = query.getOrDefault("fields")
  valid_591214 = validateParameter(valid_591214, JString, required = false,
                                 default = nil)
  if valid_591214 != nil:
    section.add "fields", valid_591214
  var valid_591215 = query.getOrDefault("quotaUser")
  valid_591215 = validateParameter(valid_591215, JString, required = false,
                                 default = nil)
  if valid_591215 != nil:
    section.add "quotaUser", valid_591215
  var valid_591216 = query.getOrDefault("alt")
  valid_591216 = validateParameter(valid_591216, JString, required = false,
                                 default = newJString("json"))
  if valid_591216 != nil:
    section.add "alt", valid_591216
  var valid_591217 = query.getOrDefault("oauth_token")
  valid_591217 = validateParameter(valid_591217, JString, required = false,
                                 default = nil)
  if valid_591217 != nil:
    section.add "oauth_token", valid_591217
  var valid_591218 = query.getOrDefault("userIp")
  valid_591218 = validateParameter(valid_591218, JString, required = false,
                                 default = nil)
  if valid_591218 != nil:
    section.add "userIp", valid_591218
  var valid_591219 = query.getOrDefault("key")
  valid_591219 = validateParameter(valid_591219, JString, required = false,
                                 default = nil)
  if valid_591219 != nil:
    section.add "key", valid_591219
  var valid_591220 = query.getOrDefault("prettyPrint")
  valid_591220 = validateParameter(valid_591220, JBool, required = false,
                                 default = newJBool(true))
  if valid_591220 != nil:
    section.add "prettyPrint", valid_591220
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591221: Call_DfareportingOperatingSystemVersionsList_591210;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of operating system versions.
  ## 
  let valid = call_591221.validator(path, query, header, formData, body)
  let scheme = call_591221.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591221.url(scheme.get, call_591221.host, call_591221.base,
                         call_591221.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591221, url, valid)

proc call*(call_591222: Call_DfareportingOperatingSystemVersionsList_591210;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingOperatingSystemVersionsList
  ## Retrieves a list of operating system versions.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591223 = newJObject()
  var query_591224 = newJObject()
  add(path_591223, "profileId", newJString(profileId))
  add(query_591224, "fields", newJString(fields))
  add(query_591224, "quotaUser", newJString(quotaUser))
  add(query_591224, "alt", newJString(alt))
  add(query_591224, "oauth_token", newJString(oauthToken))
  add(query_591224, "userIp", newJString(userIp))
  add(query_591224, "key", newJString(key))
  add(query_591224, "prettyPrint", newJBool(prettyPrint))
  result = call_591222.call(path_591223, query_591224, nil, nil, nil)

var dfareportingOperatingSystemVersionsList* = Call_DfareportingOperatingSystemVersionsList_591210(
    name: "dfareportingOperatingSystemVersionsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/operatingSystemVersions",
    validator: validate_DfareportingOperatingSystemVersionsList_591211,
    base: "/dfareporting/v3.2", url: url_DfareportingOperatingSystemVersionsList_591212,
    schemes: {Scheme.Https})
type
  Call_DfareportingOperatingSystemVersionsGet_591225 = ref object of OpenApiRestCall_588466
proc url_DfareportingOperatingSystemVersionsGet_591227(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/operatingSystemVersions/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOperatingSystemVersionsGet_591226(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one operating system version by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Operating system version ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591228 = path.getOrDefault("profileId")
  valid_591228 = validateParameter(valid_591228, JString, required = true,
                                 default = nil)
  if valid_591228 != nil:
    section.add "profileId", valid_591228
  var valid_591229 = path.getOrDefault("id")
  valid_591229 = validateParameter(valid_591229, JString, required = true,
                                 default = nil)
  if valid_591229 != nil:
    section.add "id", valid_591229
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591230 = query.getOrDefault("fields")
  valid_591230 = validateParameter(valid_591230, JString, required = false,
                                 default = nil)
  if valid_591230 != nil:
    section.add "fields", valid_591230
  var valid_591231 = query.getOrDefault("quotaUser")
  valid_591231 = validateParameter(valid_591231, JString, required = false,
                                 default = nil)
  if valid_591231 != nil:
    section.add "quotaUser", valid_591231
  var valid_591232 = query.getOrDefault("alt")
  valid_591232 = validateParameter(valid_591232, JString, required = false,
                                 default = newJString("json"))
  if valid_591232 != nil:
    section.add "alt", valid_591232
  var valid_591233 = query.getOrDefault("oauth_token")
  valid_591233 = validateParameter(valid_591233, JString, required = false,
                                 default = nil)
  if valid_591233 != nil:
    section.add "oauth_token", valid_591233
  var valid_591234 = query.getOrDefault("userIp")
  valid_591234 = validateParameter(valid_591234, JString, required = false,
                                 default = nil)
  if valid_591234 != nil:
    section.add "userIp", valid_591234
  var valid_591235 = query.getOrDefault("key")
  valid_591235 = validateParameter(valid_591235, JString, required = false,
                                 default = nil)
  if valid_591235 != nil:
    section.add "key", valid_591235
  var valid_591236 = query.getOrDefault("prettyPrint")
  valid_591236 = validateParameter(valid_591236, JBool, required = false,
                                 default = newJBool(true))
  if valid_591236 != nil:
    section.add "prettyPrint", valid_591236
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591237: Call_DfareportingOperatingSystemVersionsGet_591225;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one operating system version by ID.
  ## 
  let valid = call_591237.validator(path, query, header, formData, body)
  let scheme = call_591237.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591237.url(scheme.get, call_591237.host, call_591237.base,
                         call_591237.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591237, url, valid)

proc call*(call_591238: Call_DfareportingOperatingSystemVersionsGet_591225;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingOperatingSystemVersionsGet
  ## Gets one operating system version by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Operating system version ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591239 = newJObject()
  var query_591240 = newJObject()
  add(path_591239, "profileId", newJString(profileId))
  add(query_591240, "fields", newJString(fields))
  add(query_591240, "quotaUser", newJString(quotaUser))
  add(query_591240, "alt", newJString(alt))
  add(query_591240, "oauth_token", newJString(oauthToken))
  add(query_591240, "userIp", newJString(userIp))
  add(path_591239, "id", newJString(id))
  add(query_591240, "key", newJString(key))
  add(query_591240, "prettyPrint", newJBool(prettyPrint))
  result = call_591238.call(path_591239, query_591240, nil, nil, nil)

var dfareportingOperatingSystemVersionsGet* = Call_DfareportingOperatingSystemVersionsGet_591225(
    name: "dfareportingOperatingSystemVersionsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/operatingSystemVersions/{id}",
    validator: validate_DfareportingOperatingSystemVersionsGet_591226,
    base: "/dfareporting/v3.2", url: url_DfareportingOperatingSystemVersionsGet_591227,
    schemes: {Scheme.Https})
type
  Call_DfareportingOperatingSystemsList_591241 = ref object of OpenApiRestCall_588466
proc url_DfareportingOperatingSystemsList_591243(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/operatingSystems")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOperatingSystemsList_591242(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of operating systems.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591244 = path.getOrDefault("profileId")
  valid_591244 = validateParameter(valid_591244, JString, required = true,
                                 default = nil)
  if valid_591244 != nil:
    section.add "profileId", valid_591244
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591245 = query.getOrDefault("fields")
  valid_591245 = validateParameter(valid_591245, JString, required = false,
                                 default = nil)
  if valid_591245 != nil:
    section.add "fields", valid_591245
  var valid_591246 = query.getOrDefault("quotaUser")
  valid_591246 = validateParameter(valid_591246, JString, required = false,
                                 default = nil)
  if valid_591246 != nil:
    section.add "quotaUser", valid_591246
  var valid_591247 = query.getOrDefault("alt")
  valid_591247 = validateParameter(valid_591247, JString, required = false,
                                 default = newJString("json"))
  if valid_591247 != nil:
    section.add "alt", valid_591247
  var valid_591248 = query.getOrDefault("oauth_token")
  valid_591248 = validateParameter(valid_591248, JString, required = false,
                                 default = nil)
  if valid_591248 != nil:
    section.add "oauth_token", valid_591248
  var valid_591249 = query.getOrDefault("userIp")
  valid_591249 = validateParameter(valid_591249, JString, required = false,
                                 default = nil)
  if valid_591249 != nil:
    section.add "userIp", valid_591249
  var valid_591250 = query.getOrDefault("key")
  valid_591250 = validateParameter(valid_591250, JString, required = false,
                                 default = nil)
  if valid_591250 != nil:
    section.add "key", valid_591250
  var valid_591251 = query.getOrDefault("prettyPrint")
  valid_591251 = validateParameter(valid_591251, JBool, required = false,
                                 default = newJBool(true))
  if valid_591251 != nil:
    section.add "prettyPrint", valid_591251
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591252: Call_DfareportingOperatingSystemsList_591241;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of operating systems.
  ## 
  let valid = call_591252.validator(path, query, header, formData, body)
  let scheme = call_591252.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591252.url(scheme.get, call_591252.host, call_591252.base,
                         call_591252.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591252, url, valid)

proc call*(call_591253: Call_DfareportingOperatingSystemsList_591241;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingOperatingSystemsList
  ## Retrieves a list of operating systems.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591254 = newJObject()
  var query_591255 = newJObject()
  add(path_591254, "profileId", newJString(profileId))
  add(query_591255, "fields", newJString(fields))
  add(query_591255, "quotaUser", newJString(quotaUser))
  add(query_591255, "alt", newJString(alt))
  add(query_591255, "oauth_token", newJString(oauthToken))
  add(query_591255, "userIp", newJString(userIp))
  add(query_591255, "key", newJString(key))
  add(query_591255, "prettyPrint", newJBool(prettyPrint))
  result = call_591253.call(path_591254, query_591255, nil, nil, nil)

var dfareportingOperatingSystemsList* = Call_DfareportingOperatingSystemsList_591241(
    name: "dfareportingOperatingSystemsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/operatingSystems",
    validator: validate_DfareportingOperatingSystemsList_591242,
    base: "/dfareporting/v3.2", url: url_DfareportingOperatingSystemsList_591243,
    schemes: {Scheme.Https})
type
  Call_DfareportingOperatingSystemsGet_591256 = ref object of OpenApiRestCall_588466
proc url_DfareportingOperatingSystemsGet_591258(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "dartId" in path, "`dartId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/operatingSystems/"),
               (kind: VariableSegment, value: "dartId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOperatingSystemsGet_591257(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one operating system by DART ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   dartId: JString (required)
  ##         : Operating system DART ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591259 = path.getOrDefault("profileId")
  valid_591259 = validateParameter(valid_591259, JString, required = true,
                                 default = nil)
  if valid_591259 != nil:
    section.add "profileId", valid_591259
  var valid_591260 = path.getOrDefault("dartId")
  valid_591260 = validateParameter(valid_591260, JString, required = true,
                                 default = nil)
  if valid_591260 != nil:
    section.add "dartId", valid_591260
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591261 = query.getOrDefault("fields")
  valid_591261 = validateParameter(valid_591261, JString, required = false,
                                 default = nil)
  if valid_591261 != nil:
    section.add "fields", valid_591261
  var valid_591262 = query.getOrDefault("quotaUser")
  valid_591262 = validateParameter(valid_591262, JString, required = false,
                                 default = nil)
  if valid_591262 != nil:
    section.add "quotaUser", valid_591262
  var valid_591263 = query.getOrDefault("alt")
  valid_591263 = validateParameter(valid_591263, JString, required = false,
                                 default = newJString("json"))
  if valid_591263 != nil:
    section.add "alt", valid_591263
  var valid_591264 = query.getOrDefault("oauth_token")
  valid_591264 = validateParameter(valid_591264, JString, required = false,
                                 default = nil)
  if valid_591264 != nil:
    section.add "oauth_token", valid_591264
  var valid_591265 = query.getOrDefault("userIp")
  valid_591265 = validateParameter(valid_591265, JString, required = false,
                                 default = nil)
  if valid_591265 != nil:
    section.add "userIp", valid_591265
  var valid_591266 = query.getOrDefault("key")
  valid_591266 = validateParameter(valid_591266, JString, required = false,
                                 default = nil)
  if valid_591266 != nil:
    section.add "key", valid_591266
  var valid_591267 = query.getOrDefault("prettyPrint")
  valid_591267 = validateParameter(valid_591267, JBool, required = false,
                                 default = newJBool(true))
  if valid_591267 != nil:
    section.add "prettyPrint", valid_591267
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591268: Call_DfareportingOperatingSystemsGet_591256;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one operating system by DART ID.
  ## 
  let valid = call_591268.validator(path, query, header, formData, body)
  let scheme = call_591268.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591268.url(scheme.get, call_591268.host, call_591268.base,
                         call_591268.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591268, url, valid)

proc call*(call_591269: Call_DfareportingOperatingSystemsGet_591256;
          profileId: string; dartId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingOperatingSystemsGet
  ## Gets one operating system by DART ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   dartId: string (required)
  ##         : Operating system DART ID.
  var path_591270 = newJObject()
  var query_591271 = newJObject()
  add(path_591270, "profileId", newJString(profileId))
  add(query_591271, "fields", newJString(fields))
  add(query_591271, "quotaUser", newJString(quotaUser))
  add(query_591271, "alt", newJString(alt))
  add(query_591271, "oauth_token", newJString(oauthToken))
  add(query_591271, "userIp", newJString(userIp))
  add(query_591271, "key", newJString(key))
  add(query_591271, "prettyPrint", newJBool(prettyPrint))
  add(path_591270, "dartId", newJString(dartId))
  result = call_591269.call(path_591270, query_591271, nil, nil, nil)

var dfareportingOperatingSystemsGet* = Call_DfareportingOperatingSystemsGet_591256(
    name: "dfareportingOperatingSystemsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/operatingSystems/{dartId}",
    validator: validate_DfareportingOperatingSystemsGet_591257,
    base: "/dfareporting/v3.2", url: url_DfareportingOperatingSystemsGet_591258,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsUpdate_591306 = ref object of OpenApiRestCall_588466
proc url_DfareportingPlacementGroupsUpdate_591308(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsUpdate_591307(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591309 = path.getOrDefault("profileId")
  valid_591309 = validateParameter(valid_591309, JString, required = true,
                                 default = nil)
  if valid_591309 != nil:
    section.add "profileId", valid_591309
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591310 = query.getOrDefault("fields")
  valid_591310 = validateParameter(valid_591310, JString, required = false,
                                 default = nil)
  if valid_591310 != nil:
    section.add "fields", valid_591310
  var valid_591311 = query.getOrDefault("quotaUser")
  valid_591311 = validateParameter(valid_591311, JString, required = false,
                                 default = nil)
  if valid_591311 != nil:
    section.add "quotaUser", valid_591311
  var valid_591312 = query.getOrDefault("alt")
  valid_591312 = validateParameter(valid_591312, JString, required = false,
                                 default = newJString("json"))
  if valid_591312 != nil:
    section.add "alt", valid_591312
  var valid_591313 = query.getOrDefault("oauth_token")
  valid_591313 = validateParameter(valid_591313, JString, required = false,
                                 default = nil)
  if valid_591313 != nil:
    section.add "oauth_token", valid_591313
  var valid_591314 = query.getOrDefault("userIp")
  valid_591314 = validateParameter(valid_591314, JString, required = false,
                                 default = nil)
  if valid_591314 != nil:
    section.add "userIp", valid_591314
  var valid_591315 = query.getOrDefault("key")
  valid_591315 = validateParameter(valid_591315, JString, required = false,
                                 default = nil)
  if valid_591315 != nil:
    section.add "key", valid_591315
  var valid_591316 = query.getOrDefault("prettyPrint")
  valid_591316 = validateParameter(valid_591316, JBool, required = false,
                                 default = newJBool(true))
  if valid_591316 != nil:
    section.add "prettyPrint", valid_591316
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_591318: Call_DfareportingPlacementGroupsUpdate_591306;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing placement group.
  ## 
  let valid = call_591318.validator(path, query, header, formData, body)
  let scheme = call_591318.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591318.url(scheme.get, call_591318.host, call_591318.base,
                         call_591318.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591318, url, valid)

proc call*(call_591319: Call_DfareportingPlacementGroupsUpdate_591306;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementGroupsUpdate
  ## Updates an existing placement group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591320 = newJObject()
  var query_591321 = newJObject()
  var body_591322 = newJObject()
  add(path_591320, "profileId", newJString(profileId))
  add(query_591321, "fields", newJString(fields))
  add(query_591321, "quotaUser", newJString(quotaUser))
  add(query_591321, "alt", newJString(alt))
  add(query_591321, "oauth_token", newJString(oauthToken))
  add(query_591321, "userIp", newJString(userIp))
  add(query_591321, "key", newJString(key))
  if body != nil:
    body_591322 = body
  add(query_591321, "prettyPrint", newJBool(prettyPrint))
  result = call_591319.call(path_591320, query_591321, nil, nil, body_591322)

var dfareportingPlacementGroupsUpdate* = Call_DfareportingPlacementGroupsUpdate_591306(
    name: "dfareportingPlacementGroupsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups",
    validator: validate_DfareportingPlacementGroupsUpdate_591307,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementGroupsUpdate_591308,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsInsert_591323 = ref object of OpenApiRestCall_588466
proc url_DfareportingPlacementGroupsInsert_591325(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsInsert_591324(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new placement group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591326 = path.getOrDefault("profileId")
  valid_591326 = validateParameter(valid_591326, JString, required = true,
                                 default = nil)
  if valid_591326 != nil:
    section.add "profileId", valid_591326
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591327 = query.getOrDefault("fields")
  valid_591327 = validateParameter(valid_591327, JString, required = false,
                                 default = nil)
  if valid_591327 != nil:
    section.add "fields", valid_591327
  var valid_591328 = query.getOrDefault("quotaUser")
  valid_591328 = validateParameter(valid_591328, JString, required = false,
                                 default = nil)
  if valid_591328 != nil:
    section.add "quotaUser", valid_591328
  var valid_591329 = query.getOrDefault("alt")
  valid_591329 = validateParameter(valid_591329, JString, required = false,
                                 default = newJString("json"))
  if valid_591329 != nil:
    section.add "alt", valid_591329
  var valid_591330 = query.getOrDefault("oauth_token")
  valid_591330 = validateParameter(valid_591330, JString, required = false,
                                 default = nil)
  if valid_591330 != nil:
    section.add "oauth_token", valid_591330
  var valid_591331 = query.getOrDefault("userIp")
  valid_591331 = validateParameter(valid_591331, JString, required = false,
                                 default = nil)
  if valid_591331 != nil:
    section.add "userIp", valid_591331
  var valid_591332 = query.getOrDefault("key")
  valid_591332 = validateParameter(valid_591332, JString, required = false,
                                 default = nil)
  if valid_591332 != nil:
    section.add "key", valid_591332
  var valid_591333 = query.getOrDefault("prettyPrint")
  valid_591333 = validateParameter(valid_591333, JBool, required = false,
                                 default = newJBool(true))
  if valid_591333 != nil:
    section.add "prettyPrint", valid_591333
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_591335: Call_DfareportingPlacementGroupsInsert_591323;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new placement group.
  ## 
  let valid = call_591335.validator(path, query, header, formData, body)
  let scheme = call_591335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591335.url(scheme.get, call_591335.host, call_591335.base,
                         call_591335.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591335, url, valid)

proc call*(call_591336: Call_DfareportingPlacementGroupsInsert_591323;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementGroupsInsert
  ## Inserts a new placement group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591337 = newJObject()
  var query_591338 = newJObject()
  var body_591339 = newJObject()
  add(path_591337, "profileId", newJString(profileId))
  add(query_591338, "fields", newJString(fields))
  add(query_591338, "quotaUser", newJString(quotaUser))
  add(query_591338, "alt", newJString(alt))
  add(query_591338, "oauth_token", newJString(oauthToken))
  add(query_591338, "userIp", newJString(userIp))
  add(query_591338, "key", newJString(key))
  if body != nil:
    body_591339 = body
  add(query_591338, "prettyPrint", newJBool(prettyPrint))
  result = call_591336.call(path_591337, query_591338, nil, nil, body_591339)

var dfareportingPlacementGroupsInsert* = Call_DfareportingPlacementGroupsInsert_591323(
    name: "dfareportingPlacementGroupsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups",
    validator: validate_DfareportingPlacementGroupsInsert_591324,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementGroupsInsert_591325,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsList_591272 = ref object of OpenApiRestCall_588466
proc url_DfareportingPlacementGroupsList_591274(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsList_591273(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of placement groups, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591275 = path.getOrDefault("profileId")
  valid_591275 = validateParameter(valid_591275, JString, required = true,
                                 default = nil)
  if valid_591275 != nil:
    section.add "profileId", valid_591275
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   contentCategoryIds: JArray
  ##                     : Select only placement groups that are associated with these content categories.
  ##   alt: JString
  ##      : Data format for the response.
  ##   placementGroupType: JString
  ##                     : Select only placement groups belonging with this group type. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting.
  ##   searchString: JString
  ##               : Allows searching for placement groups by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placement groups with names like "placement group June 2015", "placement group May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementgroup" will match placement groups with name "my placementgroup", "placementgroup 2015", or simply "placementgroup".
  ##   minEndDate: JString
  ##             : Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   siteIds: JArray
  ##          : Select only placement groups that are associated with these sites.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   maxStartDate: JString
  ##               : Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   campaignIds: JArray
  ##              : Select only placement groups that belong to these campaigns.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived placements. Don't set this field to select both archived and non-archived placements.
  ##   maxEndDate: JString
  ##             : Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only placement groups with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only placement groups that belong to these advertisers.
  ##   minStartDate: JString
  ##               : Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   directorySiteIds: JArray
  ##                   : Select only placement groups that are associated with these directory sites.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   placementStrategyIds: JArray
  ##                       : Select only placement groups that are associated with these placement strategies.
  ##   pricingTypes: JArray
  ##               : Select only placement groups with these pricing types.
  section = newJObject()
  var valid_591276 = query.getOrDefault("fields")
  valid_591276 = validateParameter(valid_591276, JString, required = false,
                                 default = nil)
  if valid_591276 != nil:
    section.add "fields", valid_591276
  var valid_591277 = query.getOrDefault("pageToken")
  valid_591277 = validateParameter(valid_591277, JString, required = false,
                                 default = nil)
  if valid_591277 != nil:
    section.add "pageToken", valid_591277
  var valid_591278 = query.getOrDefault("quotaUser")
  valid_591278 = validateParameter(valid_591278, JString, required = false,
                                 default = nil)
  if valid_591278 != nil:
    section.add "quotaUser", valid_591278
  var valid_591279 = query.getOrDefault("sortField")
  valid_591279 = validateParameter(valid_591279, JString, required = false,
                                 default = newJString("ID"))
  if valid_591279 != nil:
    section.add "sortField", valid_591279
  var valid_591280 = query.getOrDefault("contentCategoryIds")
  valid_591280 = validateParameter(valid_591280, JArray, required = false,
                                 default = nil)
  if valid_591280 != nil:
    section.add "contentCategoryIds", valid_591280
  var valid_591281 = query.getOrDefault("alt")
  valid_591281 = validateParameter(valid_591281, JString, required = false,
                                 default = newJString("json"))
  if valid_591281 != nil:
    section.add "alt", valid_591281
  var valid_591282 = query.getOrDefault("placementGroupType")
  valid_591282 = validateParameter(valid_591282, JString, required = false,
                                 default = newJString("PLACEMENT_PACKAGE"))
  if valid_591282 != nil:
    section.add "placementGroupType", valid_591282
  var valid_591283 = query.getOrDefault("searchString")
  valid_591283 = validateParameter(valid_591283, JString, required = false,
                                 default = nil)
  if valid_591283 != nil:
    section.add "searchString", valid_591283
  var valid_591284 = query.getOrDefault("minEndDate")
  valid_591284 = validateParameter(valid_591284, JString, required = false,
                                 default = nil)
  if valid_591284 != nil:
    section.add "minEndDate", valid_591284
  var valid_591285 = query.getOrDefault("siteIds")
  valid_591285 = validateParameter(valid_591285, JArray, required = false,
                                 default = nil)
  if valid_591285 != nil:
    section.add "siteIds", valid_591285
  var valid_591286 = query.getOrDefault("oauth_token")
  valid_591286 = validateParameter(valid_591286, JString, required = false,
                                 default = nil)
  if valid_591286 != nil:
    section.add "oauth_token", valid_591286
  var valid_591287 = query.getOrDefault("maxStartDate")
  valid_591287 = validateParameter(valid_591287, JString, required = false,
                                 default = nil)
  if valid_591287 != nil:
    section.add "maxStartDate", valid_591287
  var valid_591288 = query.getOrDefault("campaignIds")
  valid_591288 = validateParameter(valid_591288, JArray, required = false,
                                 default = nil)
  if valid_591288 != nil:
    section.add "campaignIds", valid_591288
  var valid_591289 = query.getOrDefault("userIp")
  valid_591289 = validateParameter(valid_591289, JString, required = false,
                                 default = nil)
  if valid_591289 != nil:
    section.add "userIp", valid_591289
  var valid_591290 = query.getOrDefault("archived")
  valid_591290 = validateParameter(valid_591290, JBool, required = false, default = nil)
  if valid_591290 != nil:
    section.add "archived", valid_591290
  var valid_591291 = query.getOrDefault("maxEndDate")
  valid_591291 = validateParameter(valid_591291, JString, required = false,
                                 default = nil)
  if valid_591291 != nil:
    section.add "maxEndDate", valid_591291
  var valid_591292 = query.getOrDefault("maxResults")
  valid_591292 = validateParameter(valid_591292, JInt, required = false,
                                 default = newJInt(800))
  if valid_591292 != nil:
    section.add "maxResults", valid_591292
  var valid_591293 = query.getOrDefault("ids")
  valid_591293 = validateParameter(valid_591293, JArray, required = false,
                                 default = nil)
  if valid_591293 != nil:
    section.add "ids", valid_591293
  var valid_591294 = query.getOrDefault("key")
  valid_591294 = validateParameter(valid_591294, JString, required = false,
                                 default = nil)
  if valid_591294 != nil:
    section.add "key", valid_591294
  var valid_591295 = query.getOrDefault("advertiserIds")
  valid_591295 = validateParameter(valid_591295, JArray, required = false,
                                 default = nil)
  if valid_591295 != nil:
    section.add "advertiserIds", valid_591295
  var valid_591296 = query.getOrDefault("minStartDate")
  valid_591296 = validateParameter(valid_591296, JString, required = false,
                                 default = nil)
  if valid_591296 != nil:
    section.add "minStartDate", valid_591296
  var valid_591297 = query.getOrDefault("sortOrder")
  valid_591297 = validateParameter(valid_591297, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_591297 != nil:
    section.add "sortOrder", valid_591297
  var valid_591298 = query.getOrDefault("directorySiteIds")
  valid_591298 = validateParameter(valid_591298, JArray, required = false,
                                 default = nil)
  if valid_591298 != nil:
    section.add "directorySiteIds", valid_591298
  var valid_591299 = query.getOrDefault("prettyPrint")
  valid_591299 = validateParameter(valid_591299, JBool, required = false,
                                 default = newJBool(true))
  if valid_591299 != nil:
    section.add "prettyPrint", valid_591299
  var valid_591300 = query.getOrDefault("placementStrategyIds")
  valid_591300 = validateParameter(valid_591300, JArray, required = false,
                                 default = nil)
  if valid_591300 != nil:
    section.add "placementStrategyIds", valid_591300
  var valid_591301 = query.getOrDefault("pricingTypes")
  valid_591301 = validateParameter(valid_591301, JArray, required = false,
                                 default = nil)
  if valid_591301 != nil:
    section.add "pricingTypes", valid_591301
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591302: Call_DfareportingPlacementGroupsList_591272;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of placement groups, possibly filtered. This method supports paging.
  ## 
  let valid = call_591302.validator(path, query, header, formData, body)
  let scheme = call_591302.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591302.url(scheme.get, call_591302.host, call_591302.base,
                         call_591302.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591302, url, valid)

proc call*(call_591303: Call_DfareportingPlacementGroupsList_591272;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID";
          contentCategoryIds: JsonNode = nil; alt: string = "json";
          placementGroupType: string = "PLACEMENT_PACKAGE";
          searchString: string = ""; minEndDate: string = ""; siteIds: JsonNode = nil;
          oauthToken: string = ""; maxStartDate: string = "";
          campaignIds: JsonNode = nil; userIp: string = ""; archived: bool = false;
          maxEndDate: string = ""; maxResults: int = 800; ids: JsonNode = nil;
          key: string = ""; advertiserIds: JsonNode = nil; minStartDate: string = "";
          sortOrder: string = "ASCENDING"; directorySiteIds: JsonNode = nil;
          prettyPrint: bool = true; placementStrategyIds: JsonNode = nil;
          pricingTypes: JsonNode = nil): Recallable =
  ## dfareportingPlacementGroupsList
  ## Retrieves a list of placement groups, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   contentCategoryIds: JArray
  ##                     : Select only placement groups that are associated with these content categories.
  ##   alt: string
  ##      : Data format for the response.
  ##   placementGroupType: string
  ##                     : Select only placement groups belonging with this group type. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting.
  ##   searchString: string
  ##               : Allows searching for placement groups by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placement groups with names like "placement group June 2015", "placement group May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementgroup" will match placement groups with name "my placementgroup", "placementgroup 2015", or simply "placementgroup".
  ##   minEndDate: string
  ##             : Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   siteIds: JArray
  ##          : Select only placement groups that are associated with these sites.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   maxStartDate: string
  ##               : Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   campaignIds: JArray
  ##              : Select only placement groups that belong to these campaigns.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived placements. Don't set this field to select both archived and non-archived placements.
  ##   maxEndDate: string
  ##             : Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only placement groups with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only placement groups that belong to these advertisers.
  ##   minStartDate: string
  ##               : Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   directorySiteIds: JArray
  ##                   : Select only placement groups that are associated with these directory sites.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   placementStrategyIds: JArray
  ##                       : Select only placement groups that are associated with these placement strategies.
  ##   pricingTypes: JArray
  ##               : Select only placement groups with these pricing types.
  var path_591304 = newJObject()
  var query_591305 = newJObject()
  add(path_591304, "profileId", newJString(profileId))
  add(query_591305, "fields", newJString(fields))
  add(query_591305, "pageToken", newJString(pageToken))
  add(query_591305, "quotaUser", newJString(quotaUser))
  add(query_591305, "sortField", newJString(sortField))
  if contentCategoryIds != nil:
    query_591305.add "contentCategoryIds", contentCategoryIds
  add(query_591305, "alt", newJString(alt))
  add(query_591305, "placementGroupType", newJString(placementGroupType))
  add(query_591305, "searchString", newJString(searchString))
  add(query_591305, "minEndDate", newJString(minEndDate))
  if siteIds != nil:
    query_591305.add "siteIds", siteIds
  add(query_591305, "oauth_token", newJString(oauthToken))
  add(query_591305, "maxStartDate", newJString(maxStartDate))
  if campaignIds != nil:
    query_591305.add "campaignIds", campaignIds
  add(query_591305, "userIp", newJString(userIp))
  add(query_591305, "archived", newJBool(archived))
  add(query_591305, "maxEndDate", newJString(maxEndDate))
  add(query_591305, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_591305.add "ids", ids
  add(query_591305, "key", newJString(key))
  if advertiserIds != nil:
    query_591305.add "advertiserIds", advertiserIds
  add(query_591305, "minStartDate", newJString(minStartDate))
  add(query_591305, "sortOrder", newJString(sortOrder))
  if directorySiteIds != nil:
    query_591305.add "directorySiteIds", directorySiteIds
  add(query_591305, "prettyPrint", newJBool(prettyPrint))
  if placementStrategyIds != nil:
    query_591305.add "placementStrategyIds", placementStrategyIds
  if pricingTypes != nil:
    query_591305.add "pricingTypes", pricingTypes
  result = call_591303.call(path_591304, query_591305, nil, nil, nil)

var dfareportingPlacementGroupsList* = Call_DfareportingPlacementGroupsList_591272(
    name: "dfareportingPlacementGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups",
    validator: validate_DfareportingPlacementGroupsList_591273,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementGroupsList_591274,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsPatch_591340 = ref object of OpenApiRestCall_588466
proc url_DfareportingPlacementGroupsPatch_591342(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsPatch_591341(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement group. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591343 = path.getOrDefault("profileId")
  valid_591343 = validateParameter(valid_591343, JString, required = true,
                                 default = nil)
  if valid_591343 != nil:
    section.add "profileId", valid_591343
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Placement group ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591344 = query.getOrDefault("fields")
  valid_591344 = validateParameter(valid_591344, JString, required = false,
                                 default = nil)
  if valid_591344 != nil:
    section.add "fields", valid_591344
  var valid_591345 = query.getOrDefault("quotaUser")
  valid_591345 = validateParameter(valid_591345, JString, required = false,
                                 default = nil)
  if valid_591345 != nil:
    section.add "quotaUser", valid_591345
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_591346 = query.getOrDefault("id")
  valid_591346 = validateParameter(valid_591346, JString, required = true,
                                 default = nil)
  if valid_591346 != nil:
    section.add "id", valid_591346
  var valid_591347 = query.getOrDefault("alt")
  valid_591347 = validateParameter(valid_591347, JString, required = false,
                                 default = newJString("json"))
  if valid_591347 != nil:
    section.add "alt", valid_591347
  var valid_591348 = query.getOrDefault("oauth_token")
  valid_591348 = validateParameter(valid_591348, JString, required = false,
                                 default = nil)
  if valid_591348 != nil:
    section.add "oauth_token", valid_591348
  var valid_591349 = query.getOrDefault("userIp")
  valid_591349 = validateParameter(valid_591349, JString, required = false,
                                 default = nil)
  if valid_591349 != nil:
    section.add "userIp", valid_591349
  var valid_591350 = query.getOrDefault("key")
  valid_591350 = validateParameter(valid_591350, JString, required = false,
                                 default = nil)
  if valid_591350 != nil:
    section.add "key", valid_591350
  var valid_591351 = query.getOrDefault("prettyPrint")
  valid_591351 = validateParameter(valid_591351, JBool, required = false,
                                 default = newJBool(true))
  if valid_591351 != nil:
    section.add "prettyPrint", valid_591351
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_591353: Call_DfareportingPlacementGroupsPatch_591340;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing placement group. This method supports patch semantics.
  ## 
  let valid = call_591353.validator(path, query, header, formData, body)
  let scheme = call_591353.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591353.url(scheme.get, call_591353.host, call_591353.base,
                         call_591353.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591353, url, valid)

proc call*(call_591354: Call_DfareportingPlacementGroupsPatch_591340;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementGroupsPatch
  ## Updates an existing placement group. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Placement group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591355 = newJObject()
  var query_591356 = newJObject()
  var body_591357 = newJObject()
  add(path_591355, "profileId", newJString(profileId))
  add(query_591356, "fields", newJString(fields))
  add(query_591356, "quotaUser", newJString(quotaUser))
  add(query_591356, "id", newJString(id))
  add(query_591356, "alt", newJString(alt))
  add(query_591356, "oauth_token", newJString(oauthToken))
  add(query_591356, "userIp", newJString(userIp))
  add(query_591356, "key", newJString(key))
  if body != nil:
    body_591357 = body
  add(query_591356, "prettyPrint", newJBool(prettyPrint))
  result = call_591354.call(path_591355, query_591356, nil, nil, body_591357)

var dfareportingPlacementGroupsPatch* = Call_DfareportingPlacementGroupsPatch_591340(
    name: "dfareportingPlacementGroupsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups",
    validator: validate_DfareportingPlacementGroupsPatch_591341,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementGroupsPatch_591342,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsGet_591358 = ref object of OpenApiRestCall_588466
proc url_DfareportingPlacementGroupsGet_591360(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsGet_591359(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one placement group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Placement group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591361 = path.getOrDefault("profileId")
  valid_591361 = validateParameter(valid_591361, JString, required = true,
                                 default = nil)
  if valid_591361 != nil:
    section.add "profileId", valid_591361
  var valid_591362 = path.getOrDefault("id")
  valid_591362 = validateParameter(valid_591362, JString, required = true,
                                 default = nil)
  if valid_591362 != nil:
    section.add "id", valid_591362
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591363 = query.getOrDefault("fields")
  valid_591363 = validateParameter(valid_591363, JString, required = false,
                                 default = nil)
  if valid_591363 != nil:
    section.add "fields", valid_591363
  var valid_591364 = query.getOrDefault("quotaUser")
  valid_591364 = validateParameter(valid_591364, JString, required = false,
                                 default = nil)
  if valid_591364 != nil:
    section.add "quotaUser", valid_591364
  var valid_591365 = query.getOrDefault("alt")
  valid_591365 = validateParameter(valid_591365, JString, required = false,
                                 default = newJString("json"))
  if valid_591365 != nil:
    section.add "alt", valid_591365
  var valid_591366 = query.getOrDefault("oauth_token")
  valid_591366 = validateParameter(valid_591366, JString, required = false,
                                 default = nil)
  if valid_591366 != nil:
    section.add "oauth_token", valid_591366
  var valid_591367 = query.getOrDefault("userIp")
  valid_591367 = validateParameter(valid_591367, JString, required = false,
                                 default = nil)
  if valid_591367 != nil:
    section.add "userIp", valid_591367
  var valid_591368 = query.getOrDefault("key")
  valid_591368 = validateParameter(valid_591368, JString, required = false,
                                 default = nil)
  if valid_591368 != nil:
    section.add "key", valid_591368
  var valid_591369 = query.getOrDefault("prettyPrint")
  valid_591369 = validateParameter(valid_591369, JBool, required = false,
                                 default = newJBool(true))
  if valid_591369 != nil:
    section.add "prettyPrint", valid_591369
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591370: Call_DfareportingPlacementGroupsGet_591358; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one placement group by ID.
  ## 
  let valid = call_591370.validator(path, query, header, formData, body)
  let scheme = call_591370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591370.url(scheme.get, call_591370.host, call_591370.base,
                         call_591370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591370, url, valid)

proc call*(call_591371: Call_DfareportingPlacementGroupsGet_591358;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementGroupsGet
  ## Gets one placement group by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Placement group ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591372 = newJObject()
  var query_591373 = newJObject()
  add(path_591372, "profileId", newJString(profileId))
  add(query_591373, "fields", newJString(fields))
  add(query_591373, "quotaUser", newJString(quotaUser))
  add(query_591373, "alt", newJString(alt))
  add(query_591373, "oauth_token", newJString(oauthToken))
  add(query_591373, "userIp", newJString(userIp))
  add(path_591372, "id", newJString(id))
  add(query_591373, "key", newJString(key))
  add(query_591373, "prettyPrint", newJBool(prettyPrint))
  result = call_591371.call(path_591372, query_591373, nil, nil, nil)

var dfareportingPlacementGroupsGet* = Call_DfareportingPlacementGroupsGet_591358(
    name: "dfareportingPlacementGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups/{id}",
    validator: validate_DfareportingPlacementGroupsGet_591359,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementGroupsGet_591360,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesUpdate_591395 = ref object of OpenApiRestCall_588466
proc url_DfareportingPlacementStrategiesUpdate_591397(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesUpdate_591396(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement strategy.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591398 = path.getOrDefault("profileId")
  valid_591398 = validateParameter(valid_591398, JString, required = true,
                                 default = nil)
  if valid_591398 != nil:
    section.add "profileId", valid_591398
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591399 = query.getOrDefault("fields")
  valid_591399 = validateParameter(valid_591399, JString, required = false,
                                 default = nil)
  if valid_591399 != nil:
    section.add "fields", valid_591399
  var valid_591400 = query.getOrDefault("quotaUser")
  valid_591400 = validateParameter(valid_591400, JString, required = false,
                                 default = nil)
  if valid_591400 != nil:
    section.add "quotaUser", valid_591400
  var valid_591401 = query.getOrDefault("alt")
  valid_591401 = validateParameter(valid_591401, JString, required = false,
                                 default = newJString("json"))
  if valid_591401 != nil:
    section.add "alt", valid_591401
  var valid_591402 = query.getOrDefault("oauth_token")
  valid_591402 = validateParameter(valid_591402, JString, required = false,
                                 default = nil)
  if valid_591402 != nil:
    section.add "oauth_token", valid_591402
  var valid_591403 = query.getOrDefault("userIp")
  valid_591403 = validateParameter(valid_591403, JString, required = false,
                                 default = nil)
  if valid_591403 != nil:
    section.add "userIp", valid_591403
  var valid_591404 = query.getOrDefault("key")
  valid_591404 = validateParameter(valid_591404, JString, required = false,
                                 default = nil)
  if valid_591404 != nil:
    section.add "key", valid_591404
  var valid_591405 = query.getOrDefault("prettyPrint")
  valid_591405 = validateParameter(valid_591405, JBool, required = false,
                                 default = newJBool(true))
  if valid_591405 != nil:
    section.add "prettyPrint", valid_591405
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_591407: Call_DfareportingPlacementStrategiesUpdate_591395;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing placement strategy.
  ## 
  let valid = call_591407.validator(path, query, header, formData, body)
  let scheme = call_591407.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591407.url(scheme.get, call_591407.host, call_591407.base,
                         call_591407.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591407, url, valid)

proc call*(call_591408: Call_DfareportingPlacementStrategiesUpdate_591395;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementStrategiesUpdate
  ## Updates an existing placement strategy.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591409 = newJObject()
  var query_591410 = newJObject()
  var body_591411 = newJObject()
  add(path_591409, "profileId", newJString(profileId))
  add(query_591410, "fields", newJString(fields))
  add(query_591410, "quotaUser", newJString(quotaUser))
  add(query_591410, "alt", newJString(alt))
  add(query_591410, "oauth_token", newJString(oauthToken))
  add(query_591410, "userIp", newJString(userIp))
  add(query_591410, "key", newJString(key))
  if body != nil:
    body_591411 = body
  add(query_591410, "prettyPrint", newJBool(prettyPrint))
  result = call_591408.call(path_591409, query_591410, nil, nil, body_591411)

var dfareportingPlacementStrategiesUpdate* = Call_DfareportingPlacementStrategiesUpdate_591395(
    name: "dfareportingPlacementStrategiesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies",
    validator: validate_DfareportingPlacementStrategiesUpdate_591396,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesUpdate_591397,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesInsert_591412 = ref object of OpenApiRestCall_588466
proc url_DfareportingPlacementStrategiesInsert_591414(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesInsert_591413(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new placement strategy.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591415 = path.getOrDefault("profileId")
  valid_591415 = validateParameter(valid_591415, JString, required = true,
                                 default = nil)
  if valid_591415 != nil:
    section.add "profileId", valid_591415
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591416 = query.getOrDefault("fields")
  valid_591416 = validateParameter(valid_591416, JString, required = false,
                                 default = nil)
  if valid_591416 != nil:
    section.add "fields", valid_591416
  var valid_591417 = query.getOrDefault("quotaUser")
  valid_591417 = validateParameter(valid_591417, JString, required = false,
                                 default = nil)
  if valid_591417 != nil:
    section.add "quotaUser", valid_591417
  var valid_591418 = query.getOrDefault("alt")
  valid_591418 = validateParameter(valid_591418, JString, required = false,
                                 default = newJString("json"))
  if valid_591418 != nil:
    section.add "alt", valid_591418
  var valid_591419 = query.getOrDefault("oauth_token")
  valid_591419 = validateParameter(valid_591419, JString, required = false,
                                 default = nil)
  if valid_591419 != nil:
    section.add "oauth_token", valid_591419
  var valid_591420 = query.getOrDefault("userIp")
  valid_591420 = validateParameter(valid_591420, JString, required = false,
                                 default = nil)
  if valid_591420 != nil:
    section.add "userIp", valid_591420
  var valid_591421 = query.getOrDefault("key")
  valid_591421 = validateParameter(valid_591421, JString, required = false,
                                 default = nil)
  if valid_591421 != nil:
    section.add "key", valid_591421
  var valid_591422 = query.getOrDefault("prettyPrint")
  valid_591422 = validateParameter(valid_591422, JBool, required = false,
                                 default = newJBool(true))
  if valid_591422 != nil:
    section.add "prettyPrint", valid_591422
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_591424: Call_DfareportingPlacementStrategiesInsert_591412;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new placement strategy.
  ## 
  let valid = call_591424.validator(path, query, header, formData, body)
  let scheme = call_591424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591424.url(scheme.get, call_591424.host, call_591424.base,
                         call_591424.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591424, url, valid)

proc call*(call_591425: Call_DfareportingPlacementStrategiesInsert_591412;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementStrategiesInsert
  ## Inserts a new placement strategy.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591426 = newJObject()
  var query_591427 = newJObject()
  var body_591428 = newJObject()
  add(path_591426, "profileId", newJString(profileId))
  add(query_591427, "fields", newJString(fields))
  add(query_591427, "quotaUser", newJString(quotaUser))
  add(query_591427, "alt", newJString(alt))
  add(query_591427, "oauth_token", newJString(oauthToken))
  add(query_591427, "userIp", newJString(userIp))
  add(query_591427, "key", newJString(key))
  if body != nil:
    body_591428 = body
  add(query_591427, "prettyPrint", newJBool(prettyPrint))
  result = call_591425.call(path_591426, query_591427, nil, nil, body_591428)

var dfareportingPlacementStrategiesInsert* = Call_DfareportingPlacementStrategiesInsert_591412(
    name: "dfareportingPlacementStrategiesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies",
    validator: validate_DfareportingPlacementStrategiesInsert_591413,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesInsert_591414,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesList_591374 = ref object of OpenApiRestCall_588466
proc url_DfareportingPlacementStrategiesList_591376(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesList_591375(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of placement strategies, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591377 = path.getOrDefault("profileId")
  valid_591377 = validateParameter(valid_591377, JString, required = true,
                                 default = nil)
  if valid_591377 != nil:
    section.add "profileId", valid_591377
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "placementstrategy*2015" will return objects with names like "placementstrategy June 2015", "placementstrategy April 2015", or simply "placementstrategy 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementstrategy" will match objects with name "my placementstrategy", "placementstrategy 2015", or simply "placementstrategy".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only placement strategies with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591378 = query.getOrDefault("fields")
  valid_591378 = validateParameter(valid_591378, JString, required = false,
                                 default = nil)
  if valid_591378 != nil:
    section.add "fields", valid_591378
  var valid_591379 = query.getOrDefault("pageToken")
  valid_591379 = validateParameter(valid_591379, JString, required = false,
                                 default = nil)
  if valid_591379 != nil:
    section.add "pageToken", valid_591379
  var valid_591380 = query.getOrDefault("quotaUser")
  valid_591380 = validateParameter(valid_591380, JString, required = false,
                                 default = nil)
  if valid_591380 != nil:
    section.add "quotaUser", valid_591380
  var valid_591381 = query.getOrDefault("sortField")
  valid_591381 = validateParameter(valid_591381, JString, required = false,
                                 default = newJString("ID"))
  if valid_591381 != nil:
    section.add "sortField", valid_591381
  var valid_591382 = query.getOrDefault("alt")
  valid_591382 = validateParameter(valid_591382, JString, required = false,
                                 default = newJString("json"))
  if valid_591382 != nil:
    section.add "alt", valid_591382
  var valid_591383 = query.getOrDefault("searchString")
  valid_591383 = validateParameter(valid_591383, JString, required = false,
                                 default = nil)
  if valid_591383 != nil:
    section.add "searchString", valid_591383
  var valid_591384 = query.getOrDefault("oauth_token")
  valid_591384 = validateParameter(valid_591384, JString, required = false,
                                 default = nil)
  if valid_591384 != nil:
    section.add "oauth_token", valid_591384
  var valid_591385 = query.getOrDefault("userIp")
  valid_591385 = validateParameter(valid_591385, JString, required = false,
                                 default = nil)
  if valid_591385 != nil:
    section.add "userIp", valid_591385
  var valid_591386 = query.getOrDefault("maxResults")
  valid_591386 = validateParameter(valid_591386, JInt, required = false,
                                 default = newJInt(1000))
  if valid_591386 != nil:
    section.add "maxResults", valid_591386
  var valid_591387 = query.getOrDefault("ids")
  valid_591387 = validateParameter(valid_591387, JArray, required = false,
                                 default = nil)
  if valid_591387 != nil:
    section.add "ids", valid_591387
  var valid_591388 = query.getOrDefault("key")
  valid_591388 = validateParameter(valid_591388, JString, required = false,
                                 default = nil)
  if valid_591388 != nil:
    section.add "key", valid_591388
  var valid_591389 = query.getOrDefault("sortOrder")
  valid_591389 = validateParameter(valid_591389, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_591389 != nil:
    section.add "sortOrder", valid_591389
  var valid_591390 = query.getOrDefault("prettyPrint")
  valid_591390 = validateParameter(valid_591390, JBool, required = false,
                                 default = newJBool(true))
  if valid_591390 != nil:
    section.add "prettyPrint", valid_591390
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591391: Call_DfareportingPlacementStrategiesList_591374;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of placement strategies, possibly filtered. This method supports paging.
  ## 
  let valid = call_591391.validator(path, query, header, formData, body)
  let scheme = call_591391.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591391.url(scheme.get, call_591391.host, call_591391.base,
                         call_591391.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591391, url, valid)

proc call*(call_591392: Call_DfareportingPlacementStrategiesList_591374;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementStrategiesList
  ## Retrieves a list of placement strategies, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "placementstrategy*2015" will return objects with names like "placementstrategy June 2015", "placementstrategy April 2015", or simply "placementstrategy 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementstrategy" will match objects with name "my placementstrategy", "placementstrategy 2015", or simply "placementstrategy".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only placement strategies with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591393 = newJObject()
  var query_591394 = newJObject()
  add(path_591393, "profileId", newJString(profileId))
  add(query_591394, "fields", newJString(fields))
  add(query_591394, "pageToken", newJString(pageToken))
  add(query_591394, "quotaUser", newJString(quotaUser))
  add(query_591394, "sortField", newJString(sortField))
  add(query_591394, "alt", newJString(alt))
  add(query_591394, "searchString", newJString(searchString))
  add(query_591394, "oauth_token", newJString(oauthToken))
  add(query_591394, "userIp", newJString(userIp))
  add(query_591394, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_591394.add "ids", ids
  add(query_591394, "key", newJString(key))
  add(query_591394, "sortOrder", newJString(sortOrder))
  add(query_591394, "prettyPrint", newJBool(prettyPrint))
  result = call_591392.call(path_591393, query_591394, nil, nil, nil)

var dfareportingPlacementStrategiesList* = Call_DfareportingPlacementStrategiesList_591374(
    name: "dfareportingPlacementStrategiesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies",
    validator: validate_DfareportingPlacementStrategiesList_591375,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesList_591376,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesPatch_591429 = ref object of OpenApiRestCall_588466
proc url_DfareportingPlacementStrategiesPatch_591431(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesPatch_591430(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement strategy. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591432 = path.getOrDefault("profileId")
  valid_591432 = validateParameter(valid_591432, JString, required = true,
                                 default = nil)
  if valid_591432 != nil:
    section.add "profileId", valid_591432
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Placement strategy ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591433 = query.getOrDefault("fields")
  valid_591433 = validateParameter(valid_591433, JString, required = false,
                                 default = nil)
  if valid_591433 != nil:
    section.add "fields", valid_591433
  var valid_591434 = query.getOrDefault("quotaUser")
  valid_591434 = validateParameter(valid_591434, JString, required = false,
                                 default = nil)
  if valid_591434 != nil:
    section.add "quotaUser", valid_591434
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_591435 = query.getOrDefault("id")
  valid_591435 = validateParameter(valid_591435, JString, required = true,
                                 default = nil)
  if valid_591435 != nil:
    section.add "id", valid_591435
  var valid_591436 = query.getOrDefault("alt")
  valid_591436 = validateParameter(valid_591436, JString, required = false,
                                 default = newJString("json"))
  if valid_591436 != nil:
    section.add "alt", valid_591436
  var valid_591437 = query.getOrDefault("oauth_token")
  valid_591437 = validateParameter(valid_591437, JString, required = false,
                                 default = nil)
  if valid_591437 != nil:
    section.add "oauth_token", valid_591437
  var valid_591438 = query.getOrDefault("userIp")
  valid_591438 = validateParameter(valid_591438, JString, required = false,
                                 default = nil)
  if valid_591438 != nil:
    section.add "userIp", valid_591438
  var valid_591439 = query.getOrDefault("key")
  valid_591439 = validateParameter(valid_591439, JString, required = false,
                                 default = nil)
  if valid_591439 != nil:
    section.add "key", valid_591439
  var valid_591440 = query.getOrDefault("prettyPrint")
  valid_591440 = validateParameter(valid_591440, JBool, required = false,
                                 default = newJBool(true))
  if valid_591440 != nil:
    section.add "prettyPrint", valid_591440
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_591442: Call_DfareportingPlacementStrategiesPatch_591429;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing placement strategy. This method supports patch semantics.
  ## 
  let valid = call_591442.validator(path, query, header, formData, body)
  let scheme = call_591442.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591442.url(scheme.get, call_591442.host, call_591442.base,
                         call_591442.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591442, url, valid)

proc call*(call_591443: Call_DfareportingPlacementStrategiesPatch_591429;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementStrategiesPatch
  ## Updates an existing placement strategy. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Placement strategy ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591444 = newJObject()
  var query_591445 = newJObject()
  var body_591446 = newJObject()
  add(path_591444, "profileId", newJString(profileId))
  add(query_591445, "fields", newJString(fields))
  add(query_591445, "quotaUser", newJString(quotaUser))
  add(query_591445, "id", newJString(id))
  add(query_591445, "alt", newJString(alt))
  add(query_591445, "oauth_token", newJString(oauthToken))
  add(query_591445, "userIp", newJString(userIp))
  add(query_591445, "key", newJString(key))
  if body != nil:
    body_591446 = body
  add(query_591445, "prettyPrint", newJBool(prettyPrint))
  result = call_591443.call(path_591444, query_591445, nil, nil, body_591446)

var dfareportingPlacementStrategiesPatch* = Call_DfareportingPlacementStrategiesPatch_591429(
    name: "dfareportingPlacementStrategiesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies",
    validator: validate_DfareportingPlacementStrategiesPatch_591430,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesPatch_591431,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesGet_591447 = ref object of OpenApiRestCall_588466
proc url_DfareportingPlacementStrategiesGet_591449(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesGet_591448(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one placement strategy by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Placement strategy ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591450 = path.getOrDefault("profileId")
  valid_591450 = validateParameter(valid_591450, JString, required = true,
                                 default = nil)
  if valid_591450 != nil:
    section.add "profileId", valid_591450
  var valid_591451 = path.getOrDefault("id")
  valid_591451 = validateParameter(valid_591451, JString, required = true,
                                 default = nil)
  if valid_591451 != nil:
    section.add "id", valid_591451
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591452 = query.getOrDefault("fields")
  valid_591452 = validateParameter(valid_591452, JString, required = false,
                                 default = nil)
  if valid_591452 != nil:
    section.add "fields", valid_591452
  var valid_591453 = query.getOrDefault("quotaUser")
  valid_591453 = validateParameter(valid_591453, JString, required = false,
                                 default = nil)
  if valid_591453 != nil:
    section.add "quotaUser", valid_591453
  var valid_591454 = query.getOrDefault("alt")
  valid_591454 = validateParameter(valid_591454, JString, required = false,
                                 default = newJString("json"))
  if valid_591454 != nil:
    section.add "alt", valid_591454
  var valid_591455 = query.getOrDefault("oauth_token")
  valid_591455 = validateParameter(valid_591455, JString, required = false,
                                 default = nil)
  if valid_591455 != nil:
    section.add "oauth_token", valid_591455
  var valid_591456 = query.getOrDefault("userIp")
  valid_591456 = validateParameter(valid_591456, JString, required = false,
                                 default = nil)
  if valid_591456 != nil:
    section.add "userIp", valid_591456
  var valid_591457 = query.getOrDefault("key")
  valid_591457 = validateParameter(valid_591457, JString, required = false,
                                 default = nil)
  if valid_591457 != nil:
    section.add "key", valid_591457
  var valid_591458 = query.getOrDefault("prettyPrint")
  valid_591458 = validateParameter(valid_591458, JBool, required = false,
                                 default = newJBool(true))
  if valid_591458 != nil:
    section.add "prettyPrint", valid_591458
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591459: Call_DfareportingPlacementStrategiesGet_591447;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one placement strategy by ID.
  ## 
  let valid = call_591459.validator(path, query, header, formData, body)
  let scheme = call_591459.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591459.url(scheme.get, call_591459.host, call_591459.base,
                         call_591459.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591459, url, valid)

proc call*(call_591460: Call_DfareportingPlacementStrategiesGet_591447;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementStrategiesGet
  ## Gets one placement strategy by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Placement strategy ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591461 = newJObject()
  var query_591462 = newJObject()
  add(path_591461, "profileId", newJString(profileId))
  add(query_591462, "fields", newJString(fields))
  add(query_591462, "quotaUser", newJString(quotaUser))
  add(query_591462, "alt", newJString(alt))
  add(query_591462, "oauth_token", newJString(oauthToken))
  add(query_591462, "userIp", newJString(userIp))
  add(path_591461, "id", newJString(id))
  add(query_591462, "key", newJString(key))
  add(query_591462, "prettyPrint", newJBool(prettyPrint))
  result = call_591460.call(path_591461, query_591462, nil, nil, nil)

var dfareportingPlacementStrategiesGet* = Call_DfareportingPlacementStrategiesGet_591447(
    name: "dfareportingPlacementStrategiesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies/{id}",
    validator: validate_DfareportingPlacementStrategiesGet_591448,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesGet_591449,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesDelete_591463 = ref object of OpenApiRestCall_588466
proc url_DfareportingPlacementStrategiesDelete_591465(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesDelete_591464(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing placement strategy.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Placement strategy ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591466 = path.getOrDefault("profileId")
  valid_591466 = validateParameter(valid_591466, JString, required = true,
                                 default = nil)
  if valid_591466 != nil:
    section.add "profileId", valid_591466
  var valid_591467 = path.getOrDefault("id")
  valid_591467 = validateParameter(valid_591467, JString, required = true,
                                 default = nil)
  if valid_591467 != nil:
    section.add "id", valid_591467
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591468 = query.getOrDefault("fields")
  valid_591468 = validateParameter(valid_591468, JString, required = false,
                                 default = nil)
  if valid_591468 != nil:
    section.add "fields", valid_591468
  var valid_591469 = query.getOrDefault("quotaUser")
  valid_591469 = validateParameter(valid_591469, JString, required = false,
                                 default = nil)
  if valid_591469 != nil:
    section.add "quotaUser", valid_591469
  var valid_591470 = query.getOrDefault("alt")
  valid_591470 = validateParameter(valid_591470, JString, required = false,
                                 default = newJString("json"))
  if valid_591470 != nil:
    section.add "alt", valid_591470
  var valid_591471 = query.getOrDefault("oauth_token")
  valid_591471 = validateParameter(valid_591471, JString, required = false,
                                 default = nil)
  if valid_591471 != nil:
    section.add "oauth_token", valid_591471
  var valid_591472 = query.getOrDefault("userIp")
  valid_591472 = validateParameter(valid_591472, JString, required = false,
                                 default = nil)
  if valid_591472 != nil:
    section.add "userIp", valid_591472
  var valid_591473 = query.getOrDefault("key")
  valid_591473 = validateParameter(valid_591473, JString, required = false,
                                 default = nil)
  if valid_591473 != nil:
    section.add "key", valid_591473
  var valid_591474 = query.getOrDefault("prettyPrint")
  valid_591474 = validateParameter(valid_591474, JBool, required = false,
                                 default = newJBool(true))
  if valid_591474 != nil:
    section.add "prettyPrint", valid_591474
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591475: Call_DfareportingPlacementStrategiesDelete_591463;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing placement strategy.
  ## 
  let valid = call_591475.validator(path, query, header, formData, body)
  let scheme = call_591475.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591475.url(scheme.get, call_591475.host, call_591475.base,
                         call_591475.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591475, url, valid)

proc call*(call_591476: Call_DfareportingPlacementStrategiesDelete_591463;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementStrategiesDelete
  ## Deletes an existing placement strategy.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Placement strategy ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591477 = newJObject()
  var query_591478 = newJObject()
  add(path_591477, "profileId", newJString(profileId))
  add(query_591478, "fields", newJString(fields))
  add(query_591478, "quotaUser", newJString(quotaUser))
  add(query_591478, "alt", newJString(alt))
  add(query_591478, "oauth_token", newJString(oauthToken))
  add(query_591478, "userIp", newJString(userIp))
  add(path_591477, "id", newJString(id))
  add(query_591478, "key", newJString(key))
  add(query_591478, "prettyPrint", newJBool(prettyPrint))
  result = call_591476.call(path_591477, query_591478, nil, nil, nil)

var dfareportingPlacementStrategiesDelete* = Call_DfareportingPlacementStrategiesDelete_591463(
    name: "dfareportingPlacementStrategiesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies/{id}",
    validator: validate_DfareportingPlacementStrategiesDelete_591464,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesDelete_591465,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsUpdate_591516 = ref object of OpenApiRestCall_588466
proc url_DfareportingPlacementsUpdate_591518(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsUpdate_591517(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591519 = path.getOrDefault("profileId")
  valid_591519 = validateParameter(valid_591519, JString, required = true,
                                 default = nil)
  if valid_591519 != nil:
    section.add "profileId", valid_591519
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591520 = query.getOrDefault("fields")
  valid_591520 = validateParameter(valid_591520, JString, required = false,
                                 default = nil)
  if valid_591520 != nil:
    section.add "fields", valid_591520
  var valid_591521 = query.getOrDefault("quotaUser")
  valid_591521 = validateParameter(valid_591521, JString, required = false,
                                 default = nil)
  if valid_591521 != nil:
    section.add "quotaUser", valid_591521
  var valid_591522 = query.getOrDefault("alt")
  valid_591522 = validateParameter(valid_591522, JString, required = false,
                                 default = newJString("json"))
  if valid_591522 != nil:
    section.add "alt", valid_591522
  var valid_591523 = query.getOrDefault("oauth_token")
  valid_591523 = validateParameter(valid_591523, JString, required = false,
                                 default = nil)
  if valid_591523 != nil:
    section.add "oauth_token", valid_591523
  var valid_591524 = query.getOrDefault("userIp")
  valid_591524 = validateParameter(valid_591524, JString, required = false,
                                 default = nil)
  if valid_591524 != nil:
    section.add "userIp", valid_591524
  var valid_591525 = query.getOrDefault("key")
  valid_591525 = validateParameter(valid_591525, JString, required = false,
                                 default = nil)
  if valid_591525 != nil:
    section.add "key", valid_591525
  var valid_591526 = query.getOrDefault("prettyPrint")
  valid_591526 = validateParameter(valid_591526, JBool, required = false,
                                 default = newJBool(true))
  if valid_591526 != nil:
    section.add "prettyPrint", valid_591526
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_591528: Call_DfareportingPlacementsUpdate_591516; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing placement.
  ## 
  let valid = call_591528.validator(path, query, header, formData, body)
  let scheme = call_591528.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591528.url(scheme.get, call_591528.host, call_591528.base,
                         call_591528.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591528, url, valid)

proc call*(call_591529: Call_DfareportingPlacementsUpdate_591516;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementsUpdate
  ## Updates an existing placement.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591530 = newJObject()
  var query_591531 = newJObject()
  var body_591532 = newJObject()
  add(path_591530, "profileId", newJString(profileId))
  add(query_591531, "fields", newJString(fields))
  add(query_591531, "quotaUser", newJString(quotaUser))
  add(query_591531, "alt", newJString(alt))
  add(query_591531, "oauth_token", newJString(oauthToken))
  add(query_591531, "userIp", newJString(userIp))
  add(query_591531, "key", newJString(key))
  if body != nil:
    body_591532 = body
  add(query_591531, "prettyPrint", newJBool(prettyPrint))
  result = call_591529.call(path_591530, query_591531, nil, nil, body_591532)

var dfareportingPlacementsUpdate* = Call_DfareportingPlacementsUpdate_591516(
    name: "dfareportingPlacementsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/placements",
    validator: validate_DfareportingPlacementsUpdate_591517,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsUpdate_591518,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsInsert_591533 = ref object of OpenApiRestCall_588466
proc url_DfareportingPlacementsInsert_591535(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsInsert_591534(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new placement.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591536 = path.getOrDefault("profileId")
  valid_591536 = validateParameter(valid_591536, JString, required = true,
                                 default = nil)
  if valid_591536 != nil:
    section.add "profileId", valid_591536
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591537 = query.getOrDefault("fields")
  valid_591537 = validateParameter(valid_591537, JString, required = false,
                                 default = nil)
  if valid_591537 != nil:
    section.add "fields", valid_591537
  var valid_591538 = query.getOrDefault("quotaUser")
  valid_591538 = validateParameter(valid_591538, JString, required = false,
                                 default = nil)
  if valid_591538 != nil:
    section.add "quotaUser", valid_591538
  var valid_591539 = query.getOrDefault("alt")
  valid_591539 = validateParameter(valid_591539, JString, required = false,
                                 default = newJString("json"))
  if valid_591539 != nil:
    section.add "alt", valid_591539
  var valid_591540 = query.getOrDefault("oauth_token")
  valid_591540 = validateParameter(valid_591540, JString, required = false,
                                 default = nil)
  if valid_591540 != nil:
    section.add "oauth_token", valid_591540
  var valid_591541 = query.getOrDefault("userIp")
  valid_591541 = validateParameter(valid_591541, JString, required = false,
                                 default = nil)
  if valid_591541 != nil:
    section.add "userIp", valid_591541
  var valid_591542 = query.getOrDefault("key")
  valid_591542 = validateParameter(valid_591542, JString, required = false,
                                 default = nil)
  if valid_591542 != nil:
    section.add "key", valid_591542
  var valid_591543 = query.getOrDefault("prettyPrint")
  valid_591543 = validateParameter(valid_591543, JBool, required = false,
                                 default = newJBool(true))
  if valid_591543 != nil:
    section.add "prettyPrint", valid_591543
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_591545: Call_DfareportingPlacementsInsert_591533; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new placement.
  ## 
  let valid = call_591545.validator(path, query, header, formData, body)
  let scheme = call_591545.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591545.url(scheme.get, call_591545.host, call_591545.base,
                         call_591545.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591545, url, valid)

proc call*(call_591546: Call_DfareportingPlacementsInsert_591533;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementsInsert
  ## Inserts a new placement.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591547 = newJObject()
  var query_591548 = newJObject()
  var body_591549 = newJObject()
  add(path_591547, "profileId", newJString(profileId))
  add(query_591548, "fields", newJString(fields))
  add(query_591548, "quotaUser", newJString(quotaUser))
  add(query_591548, "alt", newJString(alt))
  add(query_591548, "oauth_token", newJString(oauthToken))
  add(query_591548, "userIp", newJString(userIp))
  add(query_591548, "key", newJString(key))
  if body != nil:
    body_591549 = body
  add(query_591548, "prettyPrint", newJBool(prettyPrint))
  result = call_591546.call(path_591547, query_591548, nil, nil, body_591549)

var dfareportingPlacementsInsert* = Call_DfareportingPlacementsInsert_591533(
    name: "dfareportingPlacementsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/placements",
    validator: validate_DfareportingPlacementsInsert_591534,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsInsert_591535,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsList_591479 = ref object of OpenApiRestCall_588466
proc url_DfareportingPlacementsList_591481(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsList_591480(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of placements, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591482 = path.getOrDefault("profileId")
  valid_591482 = validateParameter(valid_591482, JString, required = true,
                                 default = nil)
  if valid_591482 != nil:
    section.add "profileId", valid_591482
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   contentCategoryIds: JArray
  ##                     : Select only placements that are associated with these content categories.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for placements by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placements with names like "placement June 2015", "placement May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placement" will match placements with name "my placement", "placement 2015", or simply "placement".
  ##   minEndDate: JString
  ##             : Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   sizeIds: JArray
  ##          : Select only placements that are associated with these sizes.
  ##   siteIds: JArray
  ##          : Select only placements that are associated with these sites.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   maxStartDate: JString
  ##               : Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   campaignIds: JArray
  ##              : Select only placements that belong to these campaigns.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived placements. Don't set this field to select both archived and non-archived placements.
  ##   maxEndDate: JString
  ##             : Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only placements with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only placements that belong to these advertisers.
  ##   minStartDate: JString
  ##               : Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   paymentSource: JString
  ##                : Select only placements with this payment source.
  ##   compatibilities: JArray
  ##                  : Select only placements that are associated with these compatibilities. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   directorySiteIds: JArray
  ##                   : Select only placements that are associated with these directory sites.
  ##   groupIds: JArray
  ##           : Select only placements that belong to these placement groups.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   placementStrategyIds: JArray
  ##                       : Select only placements that are associated with these placement strategies.
  ##   pricingTypes: JArray
  ##               : Select only placements with these pricing types.
  section = newJObject()
  var valid_591483 = query.getOrDefault("fields")
  valid_591483 = validateParameter(valid_591483, JString, required = false,
                                 default = nil)
  if valid_591483 != nil:
    section.add "fields", valid_591483
  var valid_591484 = query.getOrDefault("pageToken")
  valid_591484 = validateParameter(valid_591484, JString, required = false,
                                 default = nil)
  if valid_591484 != nil:
    section.add "pageToken", valid_591484
  var valid_591485 = query.getOrDefault("quotaUser")
  valid_591485 = validateParameter(valid_591485, JString, required = false,
                                 default = nil)
  if valid_591485 != nil:
    section.add "quotaUser", valid_591485
  var valid_591486 = query.getOrDefault("sortField")
  valid_591486 = validateParameter(valid_591486, JString, required = false,
                                 default = newJString("ID"))
  if valid_591486 != nil:
    section.add "sortField", valid_591486
  var valid_591487 = query.getOrDefault("contentCategoryIds")
  valid_591487 = validateParameter(valid_591487, JArray, required = false,
                                 default = nil)
  if valid_591487 != nil:
    section.add "contentCategoryIds", valid_591487
  var valid_591488 = query.getOrDefault("alt")
  valid_591488 = validateParameter(valid_591488, JString, required = false,
                                 default = newJString("json"))
  if valid_591488 != nil:
    section.add "alt", valid_591488
  var valid_591489 = query.getOrDefault("searchString")
  valid_591489 = validateParameter(valid_591489, JString, required = false,
                                 default = nil)
  if valid_591489 != nil:
    section.add "searchString", valid_591489
  var valid_591490 = query.getOrDefault("minEndDate")
  valid_591490 = validateParameter(valid_591490, JString, required = false,
                                 default = nil)
  if valid_591490 != nil:
    section.add "minEndDate", valid_591490
  var valid_591491 = query.getOrDefault("sizeIds")
  valid_591491 = validateParameter(valid_591491, JArray, required = false,
                                 default = nil)
  if valid_591491 != nil:
    section.add "sizeIds", valid_591491
  var valid_591492 = query.getOrDefault("siteIds")
  valid_591492 = validateParameter(valid_591492, JArray, required = false,
                                 default = nil)
  if valid_591492 != nil:
    section.add "siteIds", valid_591492
  var valid_591493 = query.getOrDefault("oauth_token")
  valid_591493 = validateParameter(valid_591493, JString, required = false,
                                 default = nil)
  if valid_591493 != nil:
    section.add "oauth_token", valid_591493
  var valid_591494 = query.getOrDefault("maxStartDate")
  valid_591494 = validateParameter(valid_591494, JString, required = false,
                                 default = nil)
  if valid_591494 != nil:
    section.add "maxStartDate", valid_591494
  var valid_591495 = query.getOrDefault("campaignIds")
  valid_591495 = validateParameter(valid_591495, JArray, required = false,
                                 default = nil)
  if valid_591495 != nil:
    section.add "campaignIds", valid_591495
  var valid_591496 = query.getOrDefault("userIp")
  valid_591496 = validateParameter(valid_591496, JString, required = false,
                                 default = nil)
  if valid_591496 != nil:
    section.add "userIp", valid_591496
  var valid_591497 = query.getOrDefault("archived")
  valid_591497 = validateParameter(valid_591497, JBool, required = false, default = nil)
  if valid_591497 != nil:
    section.add "archived", valid_591497
  var valid_591498 = query.getOrDefault("maxEndDate")
  valid_591498 = validateParameter(valid_591498, JString, required = false,
                                 default = nil)
  if valid_591498 != nil:
    section.add "maxEndDate", valid_591498
  var valid_591499 = query.getOrDefault("maxResults")
  valid_591499 = validateParameter(valid_591499, JInt, required = false,
                                 default = newJInt(1000))
  if valid_591499 != nil:
    section.add "maxResults", valid_591499
  var valid_591500 = query.getOrDefault("ids")
  valid_591500 = validateParameter(valid_591500, JArray, required = false,
                                 default = nil)
  if valid_591500 != nil:
    section.add "ids", valid_591500
  var valid_591501 = query.getOrDefault("key")
  valid_591501 = validateParameter(valid_591501, JString, required = false,
                                 default = nil)
  if valid_591501 != nil:
    section.add "key", valid_591501
  var valid_591502 = query.getOrDefault("advertiserIds")
  valid_591502 = validateParameter(valid_591502, JArray, required = false,
                                 default = nil)
  if valid_591502 != nil:
    section.add "advertiserIds", valid_591502
  var valid_591503 = query.getOrDefault("minStartDate")
  valid_591503 = validateParameter(valid_591503, JString, required = false,
                                 default = nil)
  if valid_591503 != nil:
    section.add "minStartDate", valid_591503
  var valid_591504 = query.getOrDefault("paymentSource")
  valid_591504 = validateParameter(valid_591504, JString, required = false,
                                 default = newJString("PLACEMENT_AGENCY_PAID"))
  if valid_591504 != nil:
    section.add "paymentSource", valid_591504
  var valid_591505 = query.getOrDefault("compatibilities")
  valid_591505 = validateParameter(valid_591505, JArray, required = false,
                                 default = nil)
  if valid_591505 != nil:
    section.add "compatibilities", valid_591505
  var valid_591506 = query.getOrDefault("sortOrder")
  valid_591506 = validateParameter(valid_591506, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_591506 != nil:
    section.add "sortOrder", valid_591506
  var valid_591507 = query.getOrDefault("directorySiteIds")
  valid_591507 = validateParameter(valid_591507, JArray, required = false,
                                 default = nil)
  if valid_591507 != nil:
    section.add "directorySiteIds", valid_591507
  var valid_591508 = query.getOrDefault("groupIds")
  valid_591508 = validateParameter(valid_591508, JArray, required = false,
                                 default = nil)
  if valid_591508 != nil:
    section.add "groupIds", valid_591508
  var valid_591509 = query.getOrDefault("prettyPrint")
  valid_591509 = validateParameter(valid_591509, JBool, required = false,
                                 default = newJBool(true))
  if valid_591509 != nil:
    section.add "prettyPrint", valid_591509
  var valid_591510 = query.getOrDefault("placementStrategyIds")
  valid_591510 = validateParameter(valid_591510, JArray, required = false,
                                 default = nil)
  if valid_591510 != nil:
    section.add "placementStrategyIds", valid_591510
  var valid_591511 = query.getOrDefault("pricingTypes")
  valid_591511 = validateParameter(valid_591511, JArray, required = false,
                                 default = nil)
  if valid_591511 != nil:
    section.add "pricingTypes", valid_591511
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591512: Call_DfareportingPlacementsList_591479; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of placements, possibly filtered. This method supports paging.
  ## 
  let valid = call_591512.validator(path, query, header, formData, body)
  let scheme = call_591512.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591512.url(scheme.get, call_591512.host, call_591512.base,
                         call_591512.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591512, url, valid)

proc call*(call_591513: Call_DfareportingPlacementsList_591479; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "ID"; contentCategoryIds: JsonNode = nil;
          alt: string = "json"; searchString: string = ""; minEndDate: string = "";
          sizeIds: JsonNode = nil; siteIds: JsonNode = nil; oauthToken: string = "";
          maxStartDate: string = ""; campaignIds: JsonNode = nil; userIp: string = "";
          archived: bool = false; maxEndDate: string = ""; maxResults: int = 1000;
          ids: JsonNode = nil; key: string = ""; advertiserIds: JsonNode = nil;
          minStartDate: string = "";
          paymentSource: string = "PLACEMENT_AGENCY_PAID";
          compatibilities: JsonNode = nil; sortOrder: string = "ASCENDING";
          directorySiteIds: JsonNode = nil; groupIds: JsonNode = nil;
          prettyPrint: bool = true; placementStrategyIds: JsonNode = nil;
          pricingTypes: JsonNode = nil): Recallable =
  ## dfareportingPlacementsList
  ## Retrieves a list of placements, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   contentCategoryIds: JArray
  ##                     : Select only placements that are associated with these content categories.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for placements by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placements with names like "placement June 2015", "placement May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placement" will match placements with name "my placement", "placement 2015", or simply "placement".
  ##   minEndDate: string
  ##             : Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   sizeIds: JArray
  ##          : Select only placements that are associated with these sizes.
  ##   siteIds: JArray
  ##          : Select only placements that are associated with these sites.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   maxStartDate: string
  ##               : Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   campaignIds: JArray
  ##              : Select only placements that belong to these campaigns.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived placements. Don't set this field to select both archived and non-archived placements.
  ##   maxEndDate: string
  ##             : Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only placements with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only placements that belong to these advertisers.
  ##   minStartDate: string
  ##               : Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   paymentSource: string
  ##                : Select only placements with this payment source.
  ##   compatibilities: JArray
  ##                  : Select only placements that are associated with these compatibilities. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   directorySiteIds: JArray
  ##                   : Select only placements that are associated with these directory sites.
  ##   groupIds: JArray
  ##           : Select only placements that belong to these placement groups.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   placementStrategyIds: JArray
  ##                       : Select only placements that are associated with these placement strategies.
  ##   pricingTypes: JArray
  ##               : Select only placements with these pricing types.
  var path_591514 = newJObject()
  var query_591515 = newJObject()
  add(path_591514, "profileId", newJString(profileId))
  add(query_591515, "fields", newJString(fields))
  add(query_591515, "pageToken", newJString(pageToken))
  add(query_591515, "quotaUser", newJString(quotaUser))
  add(query_591515, "sortField", newJString(sortField))
  if contentCategoryIds != nil:
    query_591515.add "contentCategoryIds", contentCategoryIds
  add(query_591515, "alt", newJString(alt))
  add(query_591515, "searchString", newJString(searchString))
  add(query_591515, "minEndDate", newJString(minEndDate))
  if sizeIds != nil:
    query_591515.add "sizeIds", sizeIds
  if siteIds != nil:
    query_591515.add "siteIds", siteIds
  add(query_591515, "oauth_token", newJString(oauthToken))
  add(query_591515, "maxStartDate", newJString(maxStartDate))
  if campaignIds != nil:
    query_591515.add "campaignIds", campaignIds
  add(query_591515, "userIp", newJString(userIp))
  add(query_591515, "archived", newJBool(archived))
  add(query_591515, "maxEndDate", newJString(maxEndDate))
  add(query_591515, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_591515.add "ids", ids
  add(query_591515, "key", newJString(key))
  if advertiserIds != nil:
    query_591515.add "advertiserIds", advertiserIds
  add(query_591515, "minStartDate", newJString(minStartDate))
  add(query_591515, "paymentSource", newJString(paymentSource))
  if compatibilities != nil:
    query_591515.add "compatibilities", compatibilities
  add(query_591515, "sortOrder", newJString(sortOrder))
  if directorySiteIds != nil:
    query_591515.add "directorySiteIds", directorySiteIds
  if groupIds != nil:
    query_591515.add "groupIds", groupIds
  add(query_591515, "prettyPrint", newJBool(prettyPrint))
  if placementStrategyIds != nil:
    query_591515.add "placementStrategyIds", placementStrategyIds
  if pricingTypes != nil:
    query_591515.add "pricingTypes", pricingTypes
  result = call_591513.call(path_591514, query_591515, nil, nil, nil)

var dfareportingPlacementsList* = Call_DfareportingPlacementsList_591479(
    name: "dfareportingPlacementsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/placements",
    validator: validate_DfareportingPlacementsList_591480,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsList_591481,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsPatch_591550 = ref object of OpenApiRestCall_588466
proc url_DfareportingPlacementsPatch_591552(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsPatch_591551(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591553 = path.getOrDefault("profileId")
  valid_591553 = validateParameter(valid_591553, JString, required = true,
                                 default = nil)
  if valid_591553 != nil:
    section.add "profileId", valid_591553
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Placement ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591554 = query.getOrDefault("fields")
  valid_591554 = validateParameter(valid_591554, JString, required = false,
                                 default = nil)
  if valid_591554 != nil:
    section.add "fields", valid_591554
  var valid_591555 = query.getOrDefault("quotaUser")
  valid_591555 = validateParameter(valid_591555, JString, required = false,
                                 default = nil)
  if valid_591555 != nil:
    section.add "quotaUser", valid_591555
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_591556 = query.getOrDefault("id")
  valid_591556 = validateParameter(valid_591556, JString, required = true,
                                 default = nil)
  if valid_591556 != nil:
    section.add "id", valid_591556
  var valid_591557 = query.getOrDefault("alt")
  valid_591557 = validateParameter(valid_591557, JString, required = false,
                                 default = newJString("json"))
  if valid_591557 != nil:
    section.add "alt", valid_591557
  var valid_591558 = query.getOrDefault("oauth_token")
  valid_591558 = validateParameter(valid_591558, JString, required = false,
                                 default = nil)
  if valid_591558 != nil:
    section.add "oauth_token", valid_591558
  var valid_591559 = query.getOrDefault("userIp")
  valid_591559 = validateParameter(valid_591559, JString, required = false,
                                 default = nil)
  if valid_591559 != nil:
    section.add "userIp", valid_591559
  var valid_591560 = query.getOrDefault("key")
  valid_591560 = validateParameter(valid_591560, JString, required = false,
                                 default = nil)
  if valid_591560 != nil:
    section.add "key", valid_591560
  var valid_591561 = query.getOrDefault("prettyPrint")
  valid_591561 = validateParameter(valid_591561, JBool, required = false,
                                 default = newJBool(true))
  if valid_591561 != nil:
    section.add "prettyPrint", valid_591561
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_591563: Call_DfareportingPlacementsPatch_591550; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing placement. This method supports patch semantics.
  ## 
  let valid = call_591563.validator(path, query, header, formData, body)
  let scheme = call_591563.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591563.url(scheme.get, call_591563.host, call_591563.base,
                         call_591563.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591563, url, valid)

proc call*(call_591564: Call_DfareportingPlacementsPatch_591550; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementsPatch
  ## Updates an existing placement. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Placement ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591565 = newJObject()
  var query_591566 = newJObject()
  var body_591567 = newJObject()
  add(path_591565, "profileId", newJString(profileId))
  add(query_591566, "fields", newJString(fields))
  add(query_591566, "quotaUser", newJString(quotaUser))
  add(query_591566, "id", newJString(id))
  add(query_591566, "alt", newJString(alt))
  add(query_591566, "oauth_token", newJString(oauthToken))
  add(query_591566, "userIp", newJString(userIp))
  add(query_591566, "key", newJString(key))
  if body != nil:
    body_591567 = body
  add(query_591566, "prettyPrint", newJBool(prettyPrint))
  result = call_591564.call(path_591565, query_591566, nil, nil, body_591567)

var dfareportingPlacementsPatch* = Call_DfareportingPlacementsPatch_591550(
    name: "dfareportingPlacementsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/placements",
    validator: validate_DfareportingPlacementsPatch_591551,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsPatch_591552,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsGeneratetags_591568 = ref object of OpenApiRestCall_588466
proc url_DfareportingPlacementsGeneratetags_591570(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements/generatetags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsGeneratetags_591569(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates tags for a placement.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591571 = path.getOrDefault("profileId")
  valid_591571 = validateParameter(valid_591571, JString, required = true,
                                 default = nil)
  if valid_591571 != nil:
    section.add "profileId", valid_591571
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   campaignId: JString
  ##             : Generate placements belonging to this campaign. This is a required field.
  ##   tagFormats: JArray
  ##             : Tag formats to generate for these placements.
  ## 
  ## Note: PLACEMENT_TAG_STANDARD can only be generated for 1x1 placements.
  ##   placementIds: JArray
  ##               : Generate tags for these placements.
  section = newJObject()
  var valid_591572 = query.getOrDefault("fields")
  valid_591572 = validateParameter(valid_591572, JString, required = false,
                                 default = nil)
  if valid_591572 != nil:
    section.add "fields", valid_591572
  var valid_591573 = query.getOrDefault("quotaUser")
  valid_591573 = validateParameter(valid_591573, JString, required = false,
                                 default = nil)
  if valid_591573 != nil:
    section.add "quotaUser", valid_591573
  var valid_591574 = query.getOrDefault("alt")
  valid_591574 = validateParameter(valid_591574, JString, required = false,
                                 default = newJString("json"))
  if valid_591574 != nil:
    section.add "alt", valid_591574
  var valid_591575 = query.getOrDefault("oauth_token")
  valid_591575 = validateParameter(valid_591575, JString, required = false,
                                 default = nil)
  if valid_591575 != nil:
    section.add "oauth_token", valid_591575
  var valid_591576 = query.getOrDefault("userIp")
  valid_591576 = validateParameter(valid_591576, JString, required = false,
                                 default = nil)
  if valid_591576 != nil:
    section.add "userIp", valid_591576
  var valid_591577 = query.getOrDefault("key")
  valid_591577 = validateParameter(valid_591577, JString, required = false,
                                 default = nil)
  if valid_591577 != nil:
    section.add "key", valid_591577
  var valid_591578 = query.getOrDefault("prettyPrint")
  valid_591578 = validateParameter(valid_591578, JBool, required = false,
                                 default = newJBool(true))
  if valid_591578 != nil:
    section.add "prettyPrint", valid_591578
  var valid_591579 = query.getOrDefault("campaignId")
  valid_591579 = validateParameter(valid_591579, JString, required = false,
                                 default = nil)
  if valid_591579 != nil:
    section.add "campaignId", valid_591579
  var valid_591580 = query.getOrDefault("tagFormats")
  valid_591580 = validateParameter(valid_591580, JArray, required = false,
                                 default = nil)
  if valid_591580 != nil:
    section.add "tagFormats", valid_591580
  var valid_591581 = query.getOrDefault("placementIds")
  valid_591581 = validateParameter(valid_591581, JArray, required = false,
                                 default = nil)
  if valid_591581 != nil:
    section.add "placementIds", valid_591581
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591582: Call_DfareportingPlacementsGeneratetags_591568;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates tags for a placement.
  ## 
  let valid = call_591582.validator(path, query, header, formData, body)
  let scheme = call_591582.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591582.url(scheme.get, call_591582.host, call_591582.base,
                         call_591582.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591582, url, valid)

proc call*(call_591583: Call_DfareportingPlacementsGeneratetags_591568;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true; campaignId: string = "";
          tagFormats: JsonNode = nil; placementIds: JsonNode = nil): Recallable =
  ## dfareportingPlacementsGeneratetags
  ## Generates tags for a placement.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   campaignId: string
  ##             : Generate placements belonging to this campaign. This is a required field.
  ##   tagFormats: JArray
  ##             : Tag formats to generate for these placements.
  ## 
  ## Note: PLACEMENT_TAG_STANDARD can only be generated for 1x1 placements.
  ##   placementIds: JArray
  ##               : Generate tags for these placements.
  var path_591584 = newJObject()
  var query_591585 = newJObject()
  add(path_591584, "profileId", newJString(profileId))
  add(query_591585, "fields", newJString(fields))
  add(query_591585, "quotaUser", newJString(quotaUser))
  add(query_591585, "alt", newJString(alt))
  add(query_591585, "oauth_token", newJString(oauthToken))
  add(query_591585, "userIp", newJString(userIp))
  add(query_591585, "key", newJString(key))
  add(query_591585, "prettyPrint", newJBool(prettyPrint))
  add(query_591585, "campaignId", newJString(campaignId))
  if tagFormats != nil:
    query_591585.add "tagFormats", tagFormats
  if placementIds != nil:
    query_591585.add "placementIds", placementIds
  result = call_591583.call(path_591584, query_591585, nil, nil, nil)

var dfareportingPlacementsGeneratetags* = Call_DfareportingPlacementsGeneratetags_591568(
    name: "dfareportingPlacementsGeneratetags", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placements/generatetags",
    validator: validate_DfareportingPlacementsGeneratetags_591569,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsGeneratetags_591570,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsGet_591586 = ref object of OpenApiRestCall_588466
proc url_DfareportingPlacementsGet_591588(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsGet_591587(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one placement by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Placement ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591589 = path.getOrDefault("profileId")
  valid_591589 = validateParameter(valid_591589, JString, required = true,
                                 default = nil)
  if valid_591589 != nil:
    section.add "profileId", valid_591589
  var valid_591590 = path.getOrDefault("id")
  valid_591590 = validateParameter(valid_591590, JString, required = true,
                                 default = nil)
  if valid_591590 != nil:
    section.add "id", valid_591590
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591591 = query.getOrDefault("fields")
  valid_591591 = validateParameter(valid_591591, JString, required = false,
                                 default = nil)
  if valid_591591 != nil:
    section.add "fields", valid_591591
  var valid_591592 = query.getOrDefault("quotaUser")
  valid_591592 = validateParameter(valid_591592, JString, required = false,
                                 default = nil)
  if valid_591592 != nil:
    section.add "quotaUser", valid_591592
  var valid_591593 = query.getOrDefault("alt")
  valid_591593 = validateParameter(valid_591593, JString, required = false,
                                 default = newJString("json"))
  if valid_591593 != nil:
    section.add "alt", valid_591593
  var valid_591594 = query.getOrDefault("oauth_token")
  valid_591594 = validateParameter(valid_591594, JString, required = false,
                                 default = nil)
  if valid_591594 != nil:
    section.add "oauth_token", valid_591594
  var valid_591595 = query.getOrDefault("userIp")
  valid_591595 = validateParameter(valid_591595, JString, required = false,
                                 default = nil)
  if valid_591595 != nil:
    section.add "userIp", valid_591595
  var valid_591596 = query.getOrDefault("key")
  valid_591596 = validateParameter(valid_591596, JString, required = false,
                                 default = nil)
  if valid_591596 != nil:
    section.add "key", valid_591596
  var valid_591597 = query.getOrDefault("prettyPrint")
  valid_591597 = validateParameter(valid_591597, JBool, required = false,
                                 default = newJBool(true))
  if valid_591597 != nil:
    section.add "prettyPrint", valid_591597
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591598: Call_DfareportingPlacementsGet_591586; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one placement by ID.
  ## 
  let valid = call_591598.validator(path, query, header, formData, body)
  let scheme = call_591598.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591598.url(scheme.get, call_591598.host, call_591598.base,
                         call_591598.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591598, url, valid)

proc call*(call_591599: Call_DfareportingPlacementsGet_591586; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementsGet
  ## Gets one placement by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Placement ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591600 = newJObject()
  var query_591601 = newJObject()
  add(path_591600, "profileId", newJString(profileId))
  add(query_591601, "fields", newJString(fields))
  add(query_591601, "quotaUser", newJString(quotaUser))
  add(query_591601, "alt", newJString(alt))
  add(query_591601, "oauth_token", newJString(oauthToken))
  add(query_591601, "userIp", newJString(userIp))
  add(path_591600, "id", newJString(id))
  add(query_591601, "key", newJString(key))
  add(query_591601, "prettyPrint", newJBool(prettyPrint))
  result = call_591599.call(path_591600, query_591601, nil, nil, nil)

var dfareportingPlacementsGet* = Call_DfareportingPlacementsGet_591586(
    name: "dfareportingPlacementsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placements/{id}",
    validator: validate_DfareportingPlacementsGet_591587,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsGet_591588,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlatformTypesList_591602 = ref object of OpenApiRestCall_588466
proc url_DfareportingPlatformTypesList_591604(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/platformTypes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlatformTypesList_591603(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of platform types.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591605 = path.getOrDefault("profileId")
  valid_591605 = validateParameter(valid_591605, JString, required = true,
                                 default = nil)
  if valid_591605 != nil:
    section.add "profileId", valid_591605
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591606 = query.getOrDefault("fields")
  valid_591606 = validateParameter(valid_591606, JString, required = false,
                                 default = nil)
  if valid_591606 != nil:
    section.add "fields", valid_591606
  var valid_591607 = query.getOrDefault("quotaUser")
  valid_591607 = validateParameter(valid_591607, JString, required = false,
                                 default = nil)
  if valid_591607 != nil:
    section.add "quotaUser", valid_591607
  var valid_591608 = query.getOrDefault("alt")
  valid_591608 = validateParameter(valid_591608, JString, required = false,
                                 default = newJString("json"))
  if valid_591608 != nil:
    section.add "alt", valid_591608
  var valid_591609 = query.getOrDefault("oauth_token")
  valid_591609 = validateParameter(valid_591609, JString, required = false,
                                 default = nil)
  if valid_591609 != nil:
    section.add "oauth_token", valid_591609
  var valid_591610 = query.getOrDefault("userIp")
  valid_591610 = validateParameter(valid_591610, JString, required = false,
                                 default = nil)
  if valid_591610 != nil:
    section.add "userIp", valid_591610
  var valid_591611 = query.getOrDefault("key")
  valid_591611 = validateParameter(valid_591611, JString, required = false,
                                 default = nil)
  if valid_591611 != nil:
    section.add "key", valid_591611
  var valid_591612 = query.getOrDefault("prettyPrint")
  valid_591612 = validateParameter(valid_591612, JBool, required = false,
                                 default = newJBool(true))
  if valid_591612 != nil:
    section.add "prettyPrint", valid_591612
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591613: Call_DfareportingPlatformTypesList_591602; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of platform types.
  ## 
  let valid = call_591613.validator(path, query, header, formData, body)
  let scheme = call_591613.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591613.url(scheme.get, call_591613.host, call_591613.base,
                         call_591613.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591613, url, valid)

proc call*(call_591614: Call_DfareportingPlatformTypesList_591602;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingPlatformTypesList
  ## Retrieves a list of platform types.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591615 = newJObject()
  var query_591616 = newJObject()
  add(path_591615, "profileId", newJString(profileId))
  add(query_591616, "fields", newJString(fields))
  add(query_591616, "quotaUser", newJString(quotaUser))
  add(query_591616, "alt", newJString(alt))
  add(query_591616, "oauth_token", newJString(oauthToken))
  add(query_591616, "userIp", newJString(userIp))
  add(query_591616, "key", newJString(key))
  add(query_591616, "prettyPrint", newJBool(prettyPrint))
  result = call_591614.call(path_591615, query_591616, nil, nil, nil)

var dfareportingPlatformTypesList* = Call_DfareportingPlatformTypesList_591602(
    name: "dfareportingPlatformTypesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/platformTypes",
    validator: validate_DfareportingPlatformTypesList_591603,
    base: "/dfareporting/v3.2", url: url_DfareportingPlatformTypesList_591604,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlatformTypesGet_591617 = ref object of OpenApiRestCall_588466
proc url_DfareportingPlatformTypesGet_591619(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/platformTypes/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlatformTypesGet_591618(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one platform type by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Platform type ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591620 = path.getOrDefault("profileId")
  valid_591620 = validateParameter(valid_591620, JString, required = true,
                                 default = nil)
  if valid_591620 != nil:
    section.add "profileId", valid_591620
  var valid_591621 = path.getOrDefault("id")
  valid_591621 = validateParameter(valid_591621, JString, required = true,
                                 default = nil)
  if valid_591621 != nil:
    section.add "id", valid_591621
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591622 = query.getOrDefault("fields")
  valid_591622 = validateParameter(valid_591622, JString, required = false,
                                 default = nil)
  if valid_591622 != nil:
    section.add "fields", valid_591622
  var valid_591623 = query.getOrDefault("quotaUser")
  valid_591623 = validateParameter(valid_591623, JString, required = false,
                                 default = nil)
  if valid_591623 != nil:
    section.add "quotaUser", valid_591623
  var valid_591624 = query.getOrDefault("alt")
  valid_591624 = validateParameter(valid_591624, JString, required = false,
                                 default = newJString("json"))
  if valid_591624 != nil:
    section.add "alt", valid_591624
  var valid_591625 = query.getOrDefault("oauth_token")
  valid_591625 = validateParameter(valid_591625, JString, required = false,
                                 default = nil)
  if valid_591625 != nil:
    section.add "oauth_token", valid_591625
  var valid_591626 = query.getOrDefault("userIp")
  valid_591626 = validateParameter(valid_591626, JString, required = false,
                                 default = nil)
  if valid_591626 != nil:
    section.add "userIp", valid_591626
  var valid_591627 = query.getOrDefault("key")
  valid_591627 = validateParameter(valid_591627, JString, required = false,
                                 default = nil)
  if valid_591627 != nil:
    section.add "key", valid_591627
  var valid_591628 = query.getOrDefault("prettyPrint")
  valid_591628 = validateParameter(valid_591628, JBool, required = false,
                                 default = newJBool(true))
  if valid_591628 != nil:
    section.add "prettyPrint", valid_591628
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591629: Call_DfareportingPlatformTypesGet_591617; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one platform type by ID.
  ## 
  let valid = call_591629.validator(path, query, header, formData, body)
  let scheme = call_591629.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591629.url(scheme.get, call_591629.host, call_591629.base,
                         call_591629.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591629, url, valid)

proc call*(call_591630: Call_DfareportingPlatformTypesGet_591617;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingPlatformTypesGet
  ## Gets one platform type by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Platform type ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591631 = newJObject()
  var query_591632 = newJObject()
  add(path_591631, "profileId", newJString(profileId))
  add(query_591632, "fields", newJString(fields))
  add(query_591632, "quotaUser", newJString(quotaUser))
  add(query_591632, "alt", newJString(alt))
  add(query_591632, "oauth_token", newJString(oauthToken))
  add(query_591632, "userIp", newJString(userIp))
  add(path_591631, "id", newJString(id))
  add(query_591632, "key", newJString(key))
  add(query_591632, "prettyPrint", newJBool(prettyPrint))
  result = call_591630.call(path_591631, query_591632, nil, nil, nil)

var dfareportingPlatformTypesGet* = Call_DfareportingPlatformTypesGet_591617(
    name: "dfareportingPlatformTypesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/platformTypes/{id}",
    validator: validate_DfareportingPlatformTypesGet_591618,
    base: "/dfareporting/v3.2", url: url_DfareportingPlatformTypesGet_591619,
    schemes: {Scheme.Https})
type
  Call_DfareportingPostalCodesList_591633 = ref object of OpenApiRestCall_588466
proc url_DfareportingPostalCodesList_591635(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/postalCodes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPostalCodesList_591634(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of postal codes.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591636 = path.getOrDefault("profileId")
  valid_591636 = validateParameter(valid_591636, JString, required = true,
                                 default = nil)
  if valid_591636 != nil:
    section.add "profileId", valid_591636
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591637 = query.getOrDefault("fields")
  valid_591637 = validateParameter(valid_591637, JString, required = false,
                                 default = nil)
  if valid_591637 != nil:
    section.add "fields", valid_591637
  var valid_591638 = query.getOrDefault("quotaUser")
  valid_591638 = validateParameter(valid_591638, JString, required = false,
                                 default = nil)
  if valid_591638 != nil:
    section.add "quotaUser", valid_591638
  var valid_591639 = query.getOrDefault("alt")
  valid_591639 = validateParameter(valid_591639, JString, required = false,
                                 default = newJString("json"))
  if valid_591639 != nil:
    section.add "alt", valid_591639
  var valid_591640 = query.getOrDefault("oauth_token")
  valid_591640 = validateParameter(valid_591640, JString, required = false,
                                 default = nil)
  if valid_591640 != nil:
    section.add "oauth_token", valid_591640
  var valid_591641 = query.getOrDefault("userIp")
  valid_591641 = validateParameter(valid_591641, JString, required = false,
                                 default = nil)
  if valid_591641 != nil:
    section.add "userIp", valid_591641
  var valid_591642 = query.getOrDefault("key")
  valid_591642 = validateParameter(valid_591642, JString, required = false,
                                 default = nil)
  if valid_591642 != nil:
    section.add "key", valid_591642
  var valid_591643 = query.getOrDefault("prettyPrint")
  valid_591643 = validateParameter(valid_591643, JBool, required = false,
                                 default = newJBool(true))
  if valid_591643 != nil:
    section.add "prettyPrint", valid_591643
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591644: Call_DfareportingPostalCodesList_591633; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of postal codes.
  ## 
  let valid = call_591644.validator(path, query, header, formData, body)
  let scheme = call_591644.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591644.url(scheme.get, call_591644.host, call_591644.base,
                         call_591644.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591644, url, valid)

proc call*(call_591645: Call_DfareportingPostalCodesList_591633; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingPostalCodesList
  ## Retrieves a list of postal codes.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591646 = newJObject()
  var query_591647 = newJObject()
  add(path_591646, "profileId", newJString(profileId))
  add(query_591647, "fields", newJString(fields))
  add(query_591647, "quotaUser", newJString(quotaUser))
  add(query_591647, "alt", newJString(alt))
  add(query_591647, "oauth_token", newJString(oauthToken))
  add(query_591647, "userIp", newJString(userIp))
  add(query_591647, "key", newJString(key))
  add(query_591647, "prettyPrint", newJBool(prettyPrint))
  result = call_591645.call(path_591646, query_591647, nil, nil, nil)

var dfareportingPostalCodesList* = Call_DfareportingPostalCodesList_591633(
    name: "dfareportingPostalCodesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/postalCodes",
    validator: validate_DfareportingPostalCodesList_591634,
    base: "/dfareporting/v3.2", url: url_DfareportingPostalCodesList_591635,
    schemes: {Scheme.Https})
type
  Call_DfareportingPostalCodesGet_591648 = ref object of OpenApiRestCall_588466
proc url_DfareportingPostalCodesGet_591650(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "code" in path, "`code` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/postalCodes/"),
               (kind: VariableSegment, value: "code")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPostalCodesGet_591649(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one postal code by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   code: JString (required)
  ##       : Postal code ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591651 = path.getOrDefault("profileId")
  valid_591651 = validateParameter(valid_591651, JString, required = true,
                                 default = nil)
  if valid_591651 != nil:
    section.add "profileId", valid_591651
  var valid_591652 = path.getOrDefault("code")
  valid_591652 = validateParameter(valid_591652, JString, required = true,
                                 default = nil)
  if valid_591652 != nil:
    section.add "code", valid_591652
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591653 = query.getOrDefault("fields")
  valid_591653 = validateParameter(valid_591653, JString, required = false,
                                 default = nil)
  if valid_591653 != nil:
    section.add "fields", valid_591653
  var valid_591654 = query.getOrDefault("quotaUser")
  valid_591654 = validateParameter(valid_591654, JString, required = false,
                                 default = nil)
  if valid_591654 != nil:
    section.add "quotaUser", valid_591654
  var valid_591655 = query.getOrDefault("alt")
  valid_591655 = validateParameter(valid_591655, JString, required = false,
                                 default = newJString("json"))
  if valid_591655 != nil:
    section.add "alt", valid_591655
  var valid_591656 = query.getOrDefault("oauth_token")
  valid_591656 = validateParameter(valid_591656, JString, required = false,
                                 default = nil)
  if valid_591656 != nil:
    section.add "oauth_token", valid_591656
  var valid_591657 = query.getOrDefault("userIp")
  valid_591657 = validateParameter(valid_591657, JString, required = false,
                                 default = nil)
  if valid_591657 != nil:
    section.add "userIp", valid_591657
  var valid_591658 = query.getOrDefault("key")
  valid_591658 = validateParameter(valid_591658, JString, required = false,
                                 default = nil)
  if valid_591658 != nil:
    section.add "key", valid_591658
  var valid_591659 = query.getOrDefault("prettyPrint")
  valid_591659 = validateParameter(valid_591659, JBool, required = false,
                                 default = newJBool(true))
  if valid_591659 != nil:
    section.add "prettyPrint", valid_591659
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591660: Call_DfareportingPostalCodesGet_591648; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one postal code by ID.
  ## 
  let valid = call_591660.validator(path, query, header, formData, body)
  let scheme = call_591660.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591660.url(scheme.get, call_591660.host, call_591660.base,
                         call_591660.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591660, url, valid)

proc call*(call_591661: Call_DfareportingPostalCodesGet_591648; profileId: string;
          code: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingPostalCodesGet
  ## Gets one postal code by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   code: string (required)
  ##       : Postal code ID.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591662 = newJObject()
  var query_591663 = newJObject()
  add(path_591662, "profileId", newJString(profileId))
  add(query_591663, "fields", newJString(fields))
  add(query_591663, "quotaUser", newJString(quotaUser))
  add(query_591663, "alt", newJString(alt))
  add(query_591663, "oauth_token", newJString(oauthToken))
  add(query_591663, "userIp", newJString(userIp))
  add(query_591663, "key", newJString(key))
  add(path_591662, "code", newJString(code))
  add(query_591663, "prettyPrint", newJBool(prettyPrint))
  result = call_591661.call(path_591662, query_591663, nil, nil, nil)

var dfareportingPostalCodesGet* = Call_DfareportingPostalCodesGet_591648(
    name: "dfareportingPostalCodesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/postalCodes/{code}",
    validator: validate_DfareportingPostalCodesGet_591649,
    base: "/dfareporting/v3.2", url: url_DfareportingPostalCodesGet_591650,
    schemes: {Scheme.Https})
type
  Call_DfareportingProjectsList_591664 = ref object of OpenApiRestCall_588466
proc url_DfareportingProjectsList_591666(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingProjectsList_591665(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of projects, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591667 = path.getOrDefault("profileId")
  valid_591667 = validateParameter(valid_591667, JString, required = true,
                                 default = nil)
  if valid_591667 != nil:
    section.add "profileId", valid_591667
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for projects by name or ID. Wildcards (*) are allowed. For example, "project*2015" will return projects with names like "project June 2015", "project April 2015", or simply "project 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "project" will match projects with name "my project", "project 2015", or simply "project".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only projects with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only projects with these advertiser IDs.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591668 = query.getOrDefault("fields")
  valid_591668 = validateParameter(valid_591668, JString, required = false,
                                 default = nil)
  if valid_591668 != nil:
    section.add "fields", valid_591668
  var valid_591669 = query.getOrDefault("pageToken")
  valid_591669 = validateParameter(valid_591669, JString, required = false,
                                 default = nil)
  if valid_591669 != nil:
    section.add "pageToken", valid_591669
  var valid_591670 = query.getOrDefault("quotaUser")
  valid_591670 = validateParameter(valid_591670, JString, required = false,
                                 default = nil)
  if valid_591670 != nil:
    section.add "quotaUser", valid_591670
  var valid_591671 = query.getOrDefault("sortField")
  valid_591671 = validateParameter(valid_591671, JString, required = false,
                                 default = newJString("ID"))
  if valid_591671 != nil:
    section.add "sortField", valid_591671
  var valid_591672 = query.getOrDefault("alt")
  valid_591672 = validateParameter(valid_591672, JString, required = false,
                                 default = newJString("json"))
  if valid_591672 != nil:
    section.add "alt", valid_591672
  var valid_591673 = query.getOrDefault("searchString")
  valid_591673 = validateParameter(valid_591673, JString, required = false,
                                 default = nil)
  if valid_591673 != nil:
    section.add "searchString", valid_591673
  var valid_591674 = query.getOrDefault("oauth_token")
  valid_591674 = validateParameter(valid_591674, JString, required = false,
                                 default = nil)
  if valid_591674 != nil:
    section.add "oauth_token", valid_591674
  var valid_591675 = query.getOrDefault("userIp")
  valid_591675 = validateParameter(valid_591675, JString, required = false,
                                 default = nil)
  if valid_591675 != nil:
    section.add "userIp", valid_591675
  var valid_591676 = query.getOrDefault("maxResults")
  valid_591676 = validateParameter(valid_591676, JInt, required = false,
                                 default = newJInt(1000))
  if valid_591676 != nil:
    section.add "maxResults", valid_591676
  var valid_591677 = query.getOrDefault("ids")
  valid_591677 = validateParameter(valid_591677, JArray, required = false,
                                 default = nil)
  if valid_591677 != nil:
    section.add "ids", valid_591677
  var valid_591678 = query.getOrDefault("key")
  valid_591678 = validateParameter(valid_591678, JString, required = false,
                                 default = nil)
  if valid_591678 != nil:
    section.add "key", valid_591678
  var valid_591679 = query.getOrDefault("advertiserIds")
  valid_591679 = validateParameter(valid_591679, JArray, required = false,
                                 default = nil)
  if valid_591679 != nil:
    section.add "advertiserIds", valid_591679
  var valid_591680 = query.getOrDefault("sortOrder")
  valid_591680 = validateParameter(valid_591680, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_591680 != nil:
    section.add "sortOrder", valid_591680
  var valid_591681 = query.getOrDefault("prettyPrint")
  valid_591681 = validateParameter(valid_591681, JBool, required = false,
                                 default = newJBool(true))
  if valid_591681 != nil:
    section.add "prettyPrint", valid_591681
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591682: Call_DfareportingProjectsList_591664; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of projects, possibly filtered. This method supports paging.
  ## 
  let valid = call_591682.validator(path, query, header, formData, body)
  let scheme = call_591682.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591682.url(scheme.get, call_591682.host, call_591682.base,
                         call_591682.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591682, url, valid)

proc call*(call_591683: Call_DfareportingProjectsList_591664; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "ID"; alt: string = "json"; searchString: string = "";
          oauthToken: string = ""; userIp: string = ""; maxResults: int = 1000;
          ids: JsonNode = nil; key: string = ""; advertiserIds: JsonNode = nil;
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingProjectsList
  ## Retrieves a list of projects, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for projects by name or ID. Wildcards (*) are allowed. For example, "project*2015" will return projects with names like "project June 2015", "project April 2015", or simply "project 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "project" will match projects with name "my project", "project 2015", or simply "project".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only projects with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only projects with these advertiser IDs.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591684 = newJObject()
  var query_591685 = newJObject()
  add(path_591684, "profileId", newJString(profileId))
  add(query_591685, "fields", newJString(fields))
  add(query_591685, "pageToken", newJString(pageToken))
  add(query_591685, "quotaUser", newJString(quotaUser))
  add(query_591685, "sortField", newJString(sortField))
  add(query_591685, "alt", newJString(alt))
  add(query_591685, "searchString", newJString(searchString))
  add(query_591685, "oauth_token", newJString(oauthToken))
  add(query_591685, "userIp", newJString(userIp))
  add(query_591685, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_591685.add "ids", ids
  add(query_591685, "key", newJString(key))
  if advertiserIds != nil:
    query_591685.add "advertiserIds", advertiserIds
  add(query_591685, "sortOrder", newJString(sortOrder))
  add(query_591685, "prettyPrint", newJBool(prettyPrint))
  result = call_591683.call(path_591684, query_591685, nil, nil, nil)

var dfareportingProjectsList* = Call_DfareportingProjectsList_591664(
    name: "dfareportingProjectsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/projects",
    validator: validate_DfareportingProjectsList_591665,
    base: "/dfareporting/v3.2", url: url_DfareportingProjectsList_591666,
    schemes: {Scheme.Https})
type
  Call_DfareportingProjectsGet_591686 = ref object of OpenApiRestCall_588466
proc url_DfareportingProjectsGet_591688(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingProjectsGet_591687(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one project by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Project ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591689 = path.getOrDefault("profileId")
  valid_591689 = validateParameter(valid_591689, JString, required = true,
                                 default = nil)
  if valid_591689 != nil:
    section.add "profileId", valid_591689
  var valid_591690 = path.getOrDefault("id")
  valid_591690 = validateParameter(valid_591690, JString, required = true,
                                 default = nil)
  if valid_591690 != nil:
    section.add "id", valid_591690
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591691 = query.getOrDefault("fields")
  valid_591691 = validateParameter(valid_591691, JString, required = false,
                                 default = nil)
  if valid_591691 != nil:
    section.add "fields", valid_591691
  var valid_591692 = query.getOrDefault("quotaUser")
  valid_591692 = validateParameter(valid_591692, JString, required = false,
                                 default = nil)
  if valid_591692 != nil:
    section.add "quotaUser", valid_591692
  var valid_591693 = query.getOrDefault("alt")
  valid_591693 = validateParameter(valid_591693, JString, required = false,
                                 default = newJString("json"))
  if valid_591693 != nil:
    section.add "alt", valid_591693
  var valid_591694 = query.getOrDefault("oauth_token")
  valid_591694 = validateParameter(valid_591694, JString, required = false,
                                 default = nil)
  if valid_591694 != nil:
    section.add "oauth_token", valid_591694
  var valid_591695 = query.getOrDefault("userIp")
  valid_591695 = validateParameter(valid_591695, JString, required = false,
                                 default = nil)
  if valid_591695 != nil:
    section.add "userIp", valid_591695
  var valid_591696 = query.getOrDefault("key")
  valid_591696 = validateParameter(valid_591696, JString, required = false,
                                 default = nil)
  if valid_591696 != nil:
    section.add "key", valid_591696
  var valid_591697 = query.getOrDefault("prettyPrint")
  valid_591697 = validateParameter(valid_591697, JBool, required = false,
                                 default = newJBool(true))
  if valid_591697 != nil:
    section.add "prettyPrint", valid_591697
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591698: Call_DfareportingProjectsGet_591686; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one project by ID.
  ## 
  let valid = call_591698.validator(path, query, header, formData, body)
  let scheme = call_591698.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591698.url(scheme.get, call_591698.host, call_591698.base,
                         call_591698.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591698, url, valid)

proc call*(call_591699: Call_DfareportingProjectsGet_591686; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingProjectsGet
  ## Gets one project by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Project ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591700 = newJObject()
  var query_591701 = newJObject()
  add(path_591700, "profileId", newJString(profileId))
  add(query_591701, "fields", newJString(fields))
  add(query_591701, "quotaUser", newJString(quotaUser))
  add(query_591701, "alt", newJString(alt))
  add(query_591701, "oauth_token", newJString(oauthToken))
  add(query_591701, "userIp", newJString(userIp))
  add(path_591700, "id", newJString(id))
  add(query_591701, "key", newJString(key))
  add(query_591701, "prettyPrint", newJBool(prettyPrint))
  result = call_591699.call(path_591700, query_591701, nil, nil, nil)

var dfareportingProjectsGet* = Call_DfareportingProjectsGet_591686(
    name: "dfareportingProjectsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/projects/{id}",
    validator: validate_DfareportingProjectsGet_591687,
    base: "/dfareporting/v3.2", url: url_DfareportingProjectsGet_591688,
    schemes: {Scheme.Https})
type
  Call_DfareportingInventoryItemsList_591702 = ref object of OpenApiRestCall_588466
proc url_DfareportingInventoryItemsList_591704(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/inventoryItems")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingInventoryItemsList_591703(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of inventory items, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   projectId: JString (required)
  ##            : Project ID for order documents.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591705 = path.getOrDefault("profileId")
  valid_591705 = validateParameter(valid_591705, JString, required = true,
                                 default = nil)
  if valid_591705 != nil:
    section.add "profileId", valid_591705
  var valid_591706 = path.getOrDefault("projectId")
  valid_591706 = validateParameter(valid_591706, JString, required = true,
                                 default = nil)
  if valid_591706 != nil:
    section.add "projectId", valid_591706
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   inPlan: JBool
  ##         : Select only inventory items that are in plan.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   orderId: JArray
  ##          : Select only inventory items that belong to specified orders.
  ##   type: JString
  ##       : Select only inventory items with this type.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   siteId: JArray
  ##         : Select only inventory items that are associated with these sites.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only inventory items with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591707 = query.getOrDefault("fields")
  valid_591707 = validateParameter(valid_591707, JString, required = false,
                                 default = nil)
  if valid_591707 != nil:
    section.add "fields", valid_591707
  var valid_591708 = query.getOrDefault("inPlan")
  valid_591708 = validateParameter(valid_591708, JBool, required = false, default = nil)
  if valid_591708 != nil:
    section.add "inPlan", valid_591708
  var valid_591709 = query.getOrDefault("quotaUser")
  valid_591709 = validateParameter(valid_591709, JString, required = false,
                                 default = nil)
  if valid_591709 != nil:
    section.add "quotaUser", valid_591709
  var valid_591710 = query.getOrDefault("pageToken")
  valid_591710 = validateParameter(valid_591710, JString, required = false,
                                 default = nil)
  if valid_591710 != nil:
    section.add "pageToken", valid_591710
  var valid_591711 = query.getOrDefault("sortField")
  valid_591711 = validateParameter(valid_591711, JString, required = false,
                                 default = newJString("ID"))
  if valid_591711 != nil:
    section.add "sortField", valid_591711
  var valid_591712 = query.getOrDefault("alt")
  valid_591712 = validateParameter(valid_591712, JString, required = false,
                                 default = newJString("json"))
  if valid_591712 != nil:
    section.add "alt", valid_591712
  var valid_591713 = query.getOrDefault("orderId")
  valid_591713 = validateParameter(valid_591713, JArray, required = false,
                                 default = nil)
  if valid_591713 != nil:
    section.add "orderId", valid_591713
  var valid_591714 = query.getOrDefault("type")
  valid_591714 = validateParameter(valid_591714, JString, required = false, default = newJString(
      "PLANNING_PLACEMENT_TYPE_CREDIT"))
  if valid_591714 != nil:
    section.add "type", valid_591714
  var valid_591715 = query.getOrDefault("oauth_token")
  valid_591715 = validateParameter(valid_591715, JString, required = false,
                                 default = nil)
  if valid_591715 != nil:
    section.add "oauth_token", valid_591715
  var valid_591716 = query.getOrDefault("userIp")
  valid_591716 = validateParameter(valid_591716, JString, required = false,
                                 default = nil)
  if valid_591716 != nil:
    section.add "userIp", valid_591716
  var valid_591717 = query.getOrDefault("siteId")
  valid_591717 = validateParameter(valid_591717, JArray, required = false,
                                 default = nil)
  if valid_591717 != nil:
    section.add "siteId", valid_591717
  var valid_591718 = query.getOrDefault("maxResults")
  valid_591718 = validateParameter(valid_591718, JInt, required = false,
                                 default = newJInt(1000))
  if valid_591718 != nil:
    section.add "maxResults", valid_591718
  var valid_591719 = query.getOrDefault("ids")
  valid_591719 = validateParameter(valid_591719, JArray, required = false,
                                 default = nil)
  if valid_591719 != nil:
    section.add "ids", valid_591719
  var valid_591720 = query.getOrDefault("key")
  valid_591720 = validateParameter(valid_591720, JString, required = false,
                                 default = nil)
  if valid_591720 != nil:
    section.add "key", valid_591720
  var valid_591721 = query.getOrDefault("sortOrder")
  valid_591721 = validateParameter(valid_591721, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_591721 != nil:
    section.add "sortOrder", valid_591721
  var valid_591722 = query.getOrDefault("prettyPrint")
  valid_591722 = validateParameter(valid_591722, JBool, required = false,
                                 default = newJBool(true))
  if valid_591722 != nil:
    section.add "prettyPrint", valid_591722
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591723: Call_DfareportingInventoryItemsList_591702; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of inventory items, possibly filtered. This method supports paging.
  ## 
  let valid = call_591723.validator(path, query, header, formData, body)
  let scheme = call_591723.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591723.url(scheme.get, call_591723.host, call_591723.base,
                         call_591723.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591723, url, valid)

proc call*(call_591724: Call_DfareportingInventoryItemsList_591702;
          profileId: string; projectId: string; fields: string = "";
          inPlan: bool = false; quotaUser: string = ""; pageToken: string = "";
          sortField: string = "ID"; alt: string = "json"; orderId: JsonNode = nil;
          `type`: string = "PLANNING_PLACEMENT_TYPE_CREDIT";
          oauthToken: string = ""; userIp: string = ""; siteId: JsonNode = nil;
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingInventoryItemsList
  ## Retrieves a list of inventory items, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   inPlan: bool
  ##         : Select only inventory items that are in plan.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   orderId: JArray
  ##          : Select only inventory items that belong to specified orders.
  ##   type: string
  ##       : Select only inventory items with this type.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   siteId: JArray
  ##         : Select only inventory items that are associated with these sites.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only inventory items with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   projectId: string (required)
  ##            : Project ID for order documents.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591725 = newJObject()
  var query_591726 = newJObject()
  add(path_591725, "profileId", newJString(profileId))
  add(query_591726, "fields", newJString(fields))
  add(query_591726, "inPlan", newJBool(inPlan))
  add(query_591726, "quotaUser", newJString(quotaUser))
  add(query_591726, "pageToken", newJString(pageToken))
  add(query_591726, "sortField", newJString(sortField))
  add(query_591726, "alt", newJString(alt))
  if orderId != nil:
    query_591726.add "orderId", orderId
  add(query_591726, "type", newJString(`type`))
  add(query_591726, "oauth_token", newJString(oauthToken))
  add(query_591726, "userIp", newJString(userIp))
  if siteId != nil:
    query_591726.add "siteId", siteId
  add(query_591726, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_591726.add "ids", ids
  add(query_591726, "key", newJString(key))
  add(path_591725, "projectId", newJString(projectId))
  add(query_591726, "sortOrder", newJString(sortOrder))
  add(query_591726, "prettyPrint", newJBool(prettyPrint))
  result = call_591724.call(path_591725, query_591726, nil, nil, nil)

var dfareportingInventoryItemsList* = Call_DfareportingInventoryItemsList_591702(
    name: "dfareportingInventoryItemsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/projects/{projectId}/inventoryItems",
    validator: validate_DfareportingInventoryItemsList_591703,
    base: "/dfareporting/v3.2", url: url_DfareportingInventoryItemsList_591704,
    schemes: {Scheme.Https})
type
  Call_DfareportingInventoryItemsGet_591727 = ref object of OpenApiRestCall_588466
proc url_DfareportingInventoryItemsGet_591729(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/inventoryItems/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingInventoryItemsGet_591728(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one inventory item by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Inventory item ID.
  ##   projectId: JString (required)
  ##            : Project ID for order documents.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591730 = path.getOrDefault("profileId")
  valid_591730 = validateParameter(valid_591730, JString, required = true,
                                 default = nil)
  if valid_591730 != nil:
    section.add "profileId", valid_591730
  var valid_591731 = path.getOrDefault("id")
  valid_591731 = validateParameter(valid_591731, JString, required = true,
                                 default = nil)
  if valid_591731 != nil:
    section.add "id", valid_591731
  var valid_591732 = path.getOrDefault("projectId")
  valid_591732 = validateParameter(valid_591732, JString, required = true,
                                 default = nil)
  if valid_591732 != nil:
    section.add "projectId", valid_591732
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591733 = query.getOrDefault("fields")
  valid_591733 = validateParameter(valid_591733, JString, required = false,
                                 default = nil)
  if valid_591733 != nil:
    section.add "fields", valid_591733
  var valid_591734 = query.getOrDefault("quotaUser")
  valid_591734 = validateParameter(valid_591734, JString, required = false,
                                 default = nil)
  if valid_591734 != nil:
    section.add "quotaUser", valid_591734
  var valid_591735 = query.getOrDefault("alt")
  valid_591735 = validateParameter(valid_591735, JString, required = false,
                                 default = newJString("json"))
  if valid_591735 != nil:
    section.add "alt", valid_591735
  var valid_591736 = query.getOrDefault("oauth_token")
  valid_591736 = validateParameter(valid_591736, JString, required = false,
                                 default = nil)
  if valid_591736 != nil:
    section.add "oauth_token", valid_591736
  var valid_591737 = query.getOrDefault("userIp")
  valid_591737 = validateParameter(valid_591737, JString, required = false,
                                 default = nil)
  if valid_591737 != nil:
    section.add "userIp", valid_591737
  var valid_591738 = query.getOrDefault("key")
  valid_591738 = validateParameter(valid_591738, JString, required = false,
                                 default = nil)
  if valid_591738 != nil:
    section.add "key", valid_591738
  var valid_591739 = query.getOrDefault("prettyPrint")
  valid_591739 = validateParameter(valid_591739, JBool, required = false,
                                 default = newJBool(true))
  if valid_591739 != nil:
    section.add "prettyPrint", valid_591739
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591740: Call_DfareportingInventoryItemsGet_591727; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one inventory item by ID.
  ## 
  let valid = call_591740.validator(path, query, header, formData, body)
  let scheme = call_591740.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591740.url(scheme.get, call_591740.host, call_591740.base,
                         call_591740.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591740, url, valid)

proc call*(call_591741: Call_DfareportingInventoryItemsGet_591727;
          profileId: string; id: string; projectId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingInventoryItemsGet
  ## Gets one inventory item by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Inventory item ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   projectId: string (required)
  ##            : Project ID for order documents.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591742 = newJObject()
  var query_591743 = newJObject()
  add(path_591742, "profileId", newJString(profileId))
  add(query_591743, "fields", newJString(fields))
  add(query_591743, "quotaUser", newJString(quotaUser))
  add(query_591743, "alt", newJString(alt))
  add(query_591743, "oauth_token", newJString(oauthToken))
  add(query_591743, "userIp", newJString(userIp))
  add(path_591742, "id", newJString(id))
  add(query_591743, "key", newJString(key))
  add(path_591742, "projectId", newJString(projectId))
  add(query_591743, "prettyPrint", newJBool(prettyPrint))
  result = call_591741.call(path_591742, query_591743, nil, nil, nil)

var dfareportingInventoryItemsGet* = Call_DfareportingInventoryItemsGet_591727(
    name: "dfareportingInventoryItemsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/projects/{projectId}/inventoryItems/{id}",
    validator: validate_DfareportingInventoryItemsGet_591728,
    base: "/dfareporting/v3.2", url: url_DfareportingInventoryItemsGet_591729,
    schemes: {Scheme.Https})
type
  Call_DfareportingOrderDocumentsList_591744 = ref object of OpenApiRestCall_588466
proc url_DfareportingOrderDocumentsList_591746(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/orderDocuments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOrderDocumentsList_591745(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of order documents, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   projectId: JString (required)
  ##            : Project ID for order documents.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591747 = path.getOrDefault("profileId")
  valid_591747 = validateParameter(valid_591747, JString, required = true,
                                 default = nil)
  if valid_591747 != nil:
    section.add "profileId", valid_591747
  var valid_591748 = path.getOrDefault("projectId")
  valid_591748 = validateParameter(valid_591748, JString, required = true,
                                 default = nil)
  if valid_591748 != nil:
    section.add "projectId", valid_591748
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for order documents by name or ID. Wildcards (*) are allowed. For example, "orderdocument*2015" will return order documents with names like "orderdocument June 2015", "orderdocument April 2015", or simply "orderdocument 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "orderdocument" will match order documents with name "my orderdocument", "orderdocument 2015", or simply "orderdocument".
  ##   orderId: JArray
  ##          : Select only order documents for specified orders.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   siteId: JArray
  ##         : Select only order documents that are associated with these sites.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only order documents with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   approved: JBool
  ##           : Select only order documents that have been approved by at least one user.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591749 = query.getOrDefault("fields")
  valid_591749 = validateParameter(valid_591749, JString, required = false,
                                 default = nil)
  if valid_591749 != nil:
    section.add "fields", valid_591749
  var valid_591750 = query.getOrDefault("pageToken")
  valid_591750 = validateParameter(valid_591750, JString, required = false,
                                 default = nil)
  if valid_591750 != nil:
    section.add "pageToken", valid_591750
  var valid_591751 = query.getOrDefault("quotaUser")
  valid_591751 = validateParameter(valid_591751, JString, required = false,
                                 default = nil)
  if valid_591751 != nil:
    section.add "quotaUser", valid_591751
  var valid_591752 = query.getOrDefault("sortField")
  valid_591752 = validateParameter(valid_591752, JString, required = false,
                                 default = newJString("ID"))
  if valid_591752 != nil:
    section.add "sortField", valid_591752
  var valid_591753 = query.getOrDefault("alt")
  valid_591753 = validateParameter(valid_591753, JString, required = false,
                                 default = newJString("json"))
  if valid_591753 != nil:
    section.add "alt", valid_591753
  var valid_591754 = query.getOrDefault("searchString")
  valid_591754 = validateParameter(valid_591754, JString, required = false,
                                 default = nil)
  if valid_591754 != nil:
    section.add "searchString", valid_591754
  var valid_591755 = query.getOrDefault("orderId")
  valid_591755 = validateParameter(valid_591755, JArray, required = false,
                                 default = nil)
  if valid_591755 != nil:
    section.add "orderId", valid_591755
  var valid_591756 = query.getOrDefault("oauth_token")
  valid_591756 = validateParameter(valid_591756, JString, required = false,
                                 default = nil)
  if valid_591756 != nil:
    section.add "oauth_token", valid_591756
  var valid_591757 = query.getOrDefault("userIp")
  valid_591757 = validateParameter(valid_591757, JString, required = false,
                                 default = nil)
  if valid_591757 != nil:
    section.add "userIp", valid_591757
  var valid_591758 = query.getOrDefault("siteId")
  valid_591758 = validateParameter(valid_591758, JArray, required = false,
                                 default = nil)
  if valid_591758 != nil:
    section.add "siteId", valid_591758
  var valid_591759 = query.getOrDefault("maxResults")
  valid_591759 = validateParameter(valid_591759, JInt, required = false,
                                 default = newJInt(1000))
  if valid_591759 != nil:
    section.add "maxResults", valid_591759
  var valid_591760 = query.getOrDefault("ids")
  valid_591760 = validateParameter(valid_591760, JArray, required = false,
                                 default = nil)
  if valid_591760 != nil:
    section.add "ids", valid_591760
  var valid_591761 = query.getOrDefault("key")
  valid_591761 = validateParameter(valid_591761, JString, required = false,
                                 default = nil)
  if valid_591761 != nil:
    section.add "key", valid_591761
  var valid_591762 = query.getOrDefault("sortOrder")
  valid_591762 = validateParameter(valid_591762, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_591762 != nil:
    section.add "sortOrder", valid_591762
  var valid_591763 = query.getOrDefault("approved")
  valid_591763 = validateParameter(valid_591763, JBool, required = false, default = nil)
  if valid_591763 != nil:
    section.add "approved", valid_591763
  var valid_591764 = query.getOrDefault("prettyPrint")
  valid_591764 = validateParameter(valid_591764, JBool, required = false,
                                 default = newJBool(true))
  if valid_591764 != nil:
    section.add "prettyPrint", valid_591764
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591765: Call_DfareportingOrderDocumentsList_591744; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of order documents, possibly filtered. This method supports paging.
  ## 
  let valid = call_591765.validator(path, query, header, formData, body)
  let scheme = call_591765.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591765.url(scheme.get, call_591765.host, call_591765.base,
                         call_591765.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591765, url, valid)

proc call*(call_591766: Call_DfareportingOrderDocumentsList_591744;
          profileId: string; projectId: string; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; sortField: string = "ID";
          alt: string = "json"; searchString: string = ""; orderId: JsonNode = nil;
          oauthToken: string = ""; userIp: string = ""; siteId: JsonNode = nil;
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; approved: bool = false;
          prettyPrint: bool = true): Recallable =
  ## dfareportingOrderDocumentsList
  ## Retrieves a list of order documents, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for order documents by name or ID. Wildcards (*) are allowed. For example, "orderdocument*2015" will return order documents with names like "orderdocument June 2015", "orderdocument April 2015", or simply "orderdocument 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "orderdocument" will match order documents with name "my orderdocument", "orderdocument 2015", or simply "orderdocument".
  ##   orderId: JArray
  ##          : Select only order documents for specified orders.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   siteId: JArray
  ##         : Select only order documents that are associated with these sites.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only order documents with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   projectId: string (required)
  ##            : Project ID for order documents.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   approved: bool
  ##           : Select only order documents that have been approved by at least one user.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591767 = newJObject()
  var query_591768 = newJObject()
  add(path_591767, "profileId", newJString(profileId))
  add(query_591768, "fields", newJString(fields))
  add(query_591768, "pageToken", newJString(pageToken))
  add(query_591768, "quotaUser", newJString(quotaUser))
  add(query_591768, "sortField", newJString(sortField))
  add(query_591768, "alt", newJString(alt))
  add(query_591768, "searchString", newJString(searchString))
  if orderId != nil:
    query_591768.add "orderId", orderId
  add(query_591768, "oauth_token", newJString(oauthToken))
  add(query_591768, "userIp", newJString(userIp))
  if siteId != nil:
    query_591768.add "siteId", siteId
  add(query_591768, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_591768.add "ids", ids
  add(query_591768, "key", newJString(key))
  add(path_591767, "projectId", newJString(projectId))
  add(query_591768, "sortOrder", newJString(sortOrder))
  add(query_591768, "approved", newJBool(approved))
  add(query_591768, "prettyPrint", newJBool(prettyPrint))
  result = call_591766.call(path_591767, query_591768, nil, nil, nil)

var dfareportingOrderDocumentsList* = Call_DfareportingOrderDocumentsList_591744(
    name: "dfareportingOrderDocumentsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/projects/{projectId}/orderDocuments",
    validator: validate_DfareportingOrderDocumentsList_591745,
    base: "/dfareporting/v3.2", url: url_DfareportingOrderDocumentsList_591746,
    schemes: {Scheme.Https})
type
  Call_DfareportingOrderDocumentsGet_591769 = ref object of OpenApiRestCall_588466
proc url_DfareportingOrderDocumentsGet_591771(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/orderDocuments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOrderDocumentsGet_591770(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one order document by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Order document ID.
  ##   projectId: JString (required)
  ##            : Project ID for order documents.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591772 = path.getOrDefault("profileId")
  valid_591772 = validateParameter(valid_591772, JString, required = true,
                                 default = nil)
  if valid_591772 != nil:
    section.add "profileId", valid_591772
  var valid_591773 = path.getOrDefault("id")
  valid_591773 = validateParameter(valid_591773, JString, required = true,
                                 default = nil)
  if valid_591773 != nil:
    section.add "id", valid_591773
  var valid_591774 = path.getOrDefault("projectId")
  valid_591774 = validateParameter(valid_591774, JString, required = true,
                                 default = nil)
  if valid_591774 != nil:
    section.add "projectId", valid_591774
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591775 = query.getOrDefault("fields")
  valid_591775 = validateParameter(valid_591775, JString, required = false,
                                 default = nil)
  if valid_591775 != nil:
    section.add "fields", valid_591775
  var valid_591776 = query.getOrDefault("quotaUser")
  valid_591776 = validateParameter(valid_591776, JString, required = false,
                                 default = nil)
  if valid_591776 != nil:
    section.add "quotaUser", valid_591776
  var valid_591777 = query.getOrDefault("alt")
  valid_591777 = validateParameter(valid_591777, JString, required = false,
                                 default = newJString("json"))
  if valid_591777 != nil:
    section.add "alt", valid_591777
  var valid_591778 = query.getOrDefault("oauth_token")
  valid_591778 = validateParameter(valid_591778, JString, required = false,
                                 default = nil)
  if valid_591778 != nil:
    section.add "oauth_token", valid_591778
  var valid_591779 = query.getOrDefault("userIp")
  valid_591779 = validateParameter(valid_591779, JString, required = false,
                                 default = nil)
  if valid_591779 != nil:
    section.add "userIp", valid_591779
  var valid_591780 = query.getOrDefault("key")
  valid_591780 = validateParameter(valid_591780, JString, required = false,
                                 default = nil)
  if valid_591780 != nil:
    section.add "key", valid_591780
  var valid_591781 = query.getOrDefault("prettyPrint")
  valid_591781 = validateParameter(valid_591781, JBool, required = false,
                                 default = newJBool(true))
  if valid_591781 != nil:
    section.add "prettyPrint", valid_591781
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591782: Call_DfareportingOrderDocumentsGet_591769; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one order document by ID.
  ## 
  let valid = call_591782.validator(path, query, header, formData, body)
  let scheme = call_591782.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591782.url(scheme.get, call_591782.host, call_591782.base,
                         call_591782.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591782, url, valid)

proc call*(call_591783: Call_DfareportingOrderDocumentsGet_591769;
          profileId: string; id: string; projectId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingOrderDocumentsGet
  ## Gets one order document by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Order document ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   projectId: string (required)
  ##            : Project ID for order documents.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591784 = newJObject()
  var query_591785 = newJObject()
  add(path_591784, "profileId", newJString(profileId))
  add(query_591785, "fields", newJString(fields))
  add(query_591785, "quotaUser", newJString(quotaUser))
  add(query_591785, "alt", newJString(alt))
  add(query_591785, "oauth_token", newJString(oauthToken))
  add(query_591785, "userIp", newJString(userIp))
  add(path_591784, "id", newJString(id))
  add(query_591785, "key", newJString(key))
  add(path_591784, "projectId", newJString(projectId))
  add(query_591785, "prettyPrint", newJBool(prettyPrint))
  result = call_591783.call(path_591784, query_591785, nil, nil, nil)

var dfareportingOrderDocumentsGet* = Call_DfareportingOrderDocumentsGet_591769(
    name: "dfareportingOrderDocumentsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/projects/{projectId}/orderDocuments/{id}",
    validator: validate_DfareportingOrderDocumentsGet_591770,
    base: "/dfareporting/v3.2", url: url_DfareportingOrderDocumentsGet_591771,
    schemes: {Scheme.Https})
type
  Call_DfareportingOrdersList_591786 = ref object of OpenApiRestCall_588466
proc url_DfareportingOrdersList_591788(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/orders")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOrdersList_591787(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of orders, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   projectId: JString (required)
  ##            : Project ID for orders.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591789 = path.getOrDefault("profileId")
  valid_591789 = validateParameter(valid_591789, JString, required = true,
                                 default = nil)
  if valid_591789 != nil:
    section.add "profileId", valid_591789
  var valid_591790 = path.getOrDefault("projectId")
  valid_591790 = validateParameter(valid_591790, JString, required = true,
                                 default = nil)
  if valid_591790 != nil:
    section.add "projectId", valid_591790
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for orders by name or ID. Wildcards (*) are allowed. For example, "order*2015" will return orders with names like "order June 2015", "order April 2015", or simply "order 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "order" will match orders with name "my order", "order 2015", or simply "order".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   siteId: JArray
  ##         : Select only orders that are associated with these site IDs.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only orders with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591791 = query.getOrDefault("fields")
  valid_591791 = validateParameter(valid_591791, JString, required = false,
                                 default = nil)
  if valid_591791 != nil:
    section.add "fields", valid_591791
  var valid_591792 = query.getOrDefault("pageToken")
  valid_591792 = validateParameter(valid_591792, JString, required = false,
                                 default = nil)
  if valid_591792 != nil:
    section.add "pageToken", valid_591792
  var valid_591793 = query.getOrDefault("quotaUser")
  valid_591793 = validateParameter(valid_591793, JString, required = false,
                                 default = nil)
  if valid_591793 != nil:
    section.add "quotaUser", valid_591793
  var valid_591794 = query.getOrDefault("sortField")
  valid_591794 = validateParameter(valid_591794, JString, required = false,
                                 default = newJString("ID"))
  if valid_591794 != nil:
    section.add "sortField", valid_591794
  var valid_591795 = query.getOrDefault("alt")
  valid_591795 = validateParameter(valid_591795, JString, required = false,
                                 default = newJString("json"))
  if valid_591795 != nil:
    section.add "alt", valid_591795
  var valid_591796 = query.getOrDefault("searchString")
  valid_591796 = validateParameter(valid_591796, JString, required = false,
                                 default = nil)
  if valid_591796 != nil:
    section.add "searchString", valid_591796
  var valid_591797 = query.getOrDefault("oauth_token")
  valid_591797 = validateParameter(valid_591797, JString, required = false,
                                 default = nil)
  if valid_591797 != nil:
    section.add "oauth_token", valid_591797
  var valid_591798 = query.getOrDefault("userIp")
  valid_591798 = validateParameter(valid_591798, JString, required = false,
                                 default = nil)
  if valid_591798 != nil:
    section.add "userIp", valid_591798
  var valid_591799 = query.getOrDefault("siteId")
  valid_591799 = validateParameter(valid_591799, JArray, required = false,
                                 default = nil)
  if valid_591799 != nil:
    section.add "siteId", valid_591799
  var valid_591800 = query.getOrDefault("maxResults")
  valid_591800 = validateParameter(valid_591800, JInt, required = false,
                                 default = newJInt(1000))
  if valid_591800 != nil:
    section.add "maxResults", valid_591800
  var valid_591801 = query.getOrDefault("ids")
  valid_591801 = validateParameter(valid_591801, JArray, required = false,
                                 default = nil)
  if valid_591801 != nil:
    section.add "ids", valid_591801
  var valid_591802 = query.getOrDefault("key")
  valid_591802 = validateParameter(valid_591802, JString, required = false,
                                 default = nil)
  if valid_591802 != nil:
    section.add "key", valid_591802
  var valid_591803 = query.getOrDefault("sortOrder")
  valid_591803 = validateParameter(valid_591803, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_591803 != nil:
    section.add "sortOrder", valid_591803
  var valid_591804 = query.getOrDefault("prettyPrint")
  valid_591804 = validateParameter(valid_591804, JBool, required = false,
                                 default = newJBool(true))
  if valid_591804 != nil:
    section.add "prettyPrint", valid_591804
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591805: Call_DfareportingOrdersList_591786; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of orders, possibly filtered. This method supports paging.
  ## 
  let valid = call_591805.validator(path, query, header, formData, body)
  let scheme = call_591805.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591805.url(scheme.get, call_591805.host, call_591805.base,
                         call_591805.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591805, url, valid)

proc call*(call_591806: Call_DfareportingOrdersList_591786; profileId: string;
          projectId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          siteId: JsonNode = nil; maxResults: int = 1000; ids: JsonNode = nil;
          key: string = ""; sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingOrdersList
  ## Retrieves a list of orders, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for orders by name or ID. Wildcards (*) are allowed. For example, "order*2015" will return orders with names like "order June 2015", "order April 2015", or simply "order 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "order" will match orders with name "my order", "order 2015", or simply "order".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   siteId: JArray
  ##         : Select only orders that are associated with these site IDs.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only orders with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   projectId: string (required)
  ##            : Project ID for orders.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591807 = newJObject()
  var query_591808 = newJObject()
  add(path_591807, "profileId", newJString(profileId))
  add(query_591808, "fields", newJString(fields))
  add(query_591808, "pageToken", newJString(pageToken))
  add(query_591808, "quotaUser", newJString(quotaUser))
  add(query_591808, "sortField", newJString(sortField))
  add(query_591808, "alt", newJString(alt))
  add(query_591808, "searchString", newJString(searchString))
  add(query_591808, "oauth_token", newJString(oauthToken))
  add(query_591808, "userIp", newJString(userIp))
  if siteId != nil:
    query_591808.add "siteId", siteId
  add(query_591808, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_591808.add "ids", ids
  add(query_591808, "key", newJString(key))
  add(path_591807, "projectId", newJString(projectId))
  add(query_591808, "sortOrder", newJString(sortOrder))
  add(query_591808, "prettyPrint", newJBool(prettyPrint))
  result = call_591806.call(path_591807, query_591808, nil, nil, nil)

var dfareportingOrdersList* = Call_DfareportingOrdersList_591786(
    name: "dfareportingOrdersList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/projects/{projectId}/orders",
    validator: validate_DfareportingOrdersList_591787, base: "/dfareporting/v3.2",
    url: url_DfareportingOrdersList_591788, schemes: {Scheme.Https})
type
  Call_DfareportingOrdersGet_591809 = ref object of OpenApiRestCall_588466
proc url_DfareportingOrdersGet_591811(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/orders/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOrdersGet_591810(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one order by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Order ID.
  ##   projectId: JString (required)
  ##            : Project ID for orders.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591812 = path.getOrDefault("profileId")
  valid_591812 = validateParameter(valid_591812, JString, required = true,
                                 default = nil)
  if valid_591812 != nil:
    section.add "profileId", valid_591812
  var valid_591813 = path.getOrDefault("id")
  valid_591813 = validateParameter(valid_591813, JString, required = true,
                                 default = nil)
  if valid_591813 != nil:
    section.add "id", valid_591813
  var valid_591814 = path.getOrDefault("projectId")
  valid_591814 = validateParameter(valid_591814, JString, required = true,
                                 default = nil)
  if valid_591814 != nil:
    section.add "projectId", valid_591814
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591815 = query.getOrDefault("fields")
  valid_591815 = validateParameter(valid_591815, JString, required = false,
                                 default = nil)
  if valid_591815 != nil:
    section.add "fields", valid_591815
  var valid_591816 = query.getOrDefault("quotaUser")
  valid_591816 = validateParameter(valid_591816, JString, required = false,
                                 default = nil)
  if valid_591816 != nil:
    section.add "quotaUser", valid_591816
  var valid_591817 = query.getOrDefault("alt")
  valid_591817 = validateParameter(valid_591817, JString, required = false,
                                 default = newJString("json"))
  if valid_591817 != nil:
    section.add "alt", valid_591817
  var valid_591818 = query.getOrDefault("oauth_token")
  valid_591818 = validateParameter(valid_591818, JString, required = false,
                                 default = nil)
  if valid_591818 != nil:
    section.add "oauth_token", valid_591818
  var valid_591819 = query.getOrDefault("userIp")
  valid_591819 = validateParameter(valid_591819, JString, required = false,
                                 default = nil)
  if valid_591819 != nil:
    section.add "userIp", valid_591819
  var valid_591820 = query.getOrDefault("key")
  valid_591820 = validateParameter(valid_591820, JString, required = false,
                                 default = nil)
  if valid_591820 != nil:
    section.add "key", valid_591820
  var valid_591821 = query.getOrDefault("prettyPrint")
  valid_591821 = validateParameter(valid_591821, JBool, required = false,
                                 default = newJBool(true))
  if valid_591821 != nil:
    section.add "prettyPrint", valid_591821
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591822: Call_DfareportingOrdersGet_591809; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one order by ID.
  ## 
  let valid = call_591822.validator(path, query, header, formData, body)
  let scheme = call_591822.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591822.url(scheme.get, call_591822.host, call_591822.base,
                         call_591822.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591822, url, valid)

proc call*(call_591823: Call_DfareportingOrdersGet_591809; profileId: string;
          id: string; projectId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingOrdersGet
  ## Gets one order by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Order ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   projectId: string (required)
  ##            : Project ID for orders.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591824 = newJObject()
  var query_591825 = newJObject()
  add(path_591824, "profileId", newJString(profileId))
  add(query_591825, "fields", newJString(fields))
  add(query_591825, "quotaUser", newJString(quotaUser))
  add(query_591825, "alt", newJString(alt))
  add(query_591825, "oauth_token", newJString(oauthToken))
  add(query_591825, "userIp", newJString(userIp))
  add(path_591824, "id", newJString(id))
  add(query_591825, "key", newJString(key))
  add(path_591824, "projectId", newJString(projectId))
  add(query_591825, "prettyPrint", newJBool(prettyPrint))
  result = call_591823.call(path_591824, query_591825, nil, nil, nil)

var dfareportingOrdersGet* = Call_DfareportingOrdersGet_591809(
    name: "dfareportingOrdersGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/projects/{projectId}/orders/{id}",
    validator: validate_DfareportingOrdersGet_591810, base: "/dfareporting/v3.2",
    url: url_DfareportingOrdersGet_591811, schemes: {Scheme.Https})
type
  Call_DfareportingRegionsList_591826 = ref object of OpenApiRestCall_588466
proc url_DfareportingRegionsList_591828(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/regions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRegionsList_591827(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of regions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591829 = path.getOrDefault("profileId")
  valid_591829 = validateParameter(valid_591829, JString, required = true,
                                 default = nil)
  if valid_591829 != nil:
    section.add "profileId", valid_591829
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591830 = query.getOrDefault("fields")
  valid_591830 = validateParameter(valid_591830, JString, required = false,
                                 default = nil)
  if valid_591830 != nil:
    section.add "fields", valid_591830
  var valid_591831 = query.getOrDefault("quotaUser")
  valid_591831 = validateParameter(valid_591831, JString, required = false,
                                 default = nil)
  if valid_591831 != nil:
    section.add "quotaUser", valid_591831
  var valid_591832 = query.getOrDefault("alt")
  valid_591832 = validateParameter(valid_591832, JString, required = false,
                                 default = newJString("json"))
  if valid_591832 != nil:
    section.add "alt", valid_591832
  var valid_591833 = query.getOrDefault("oauth_token")
  valid_591833 = validateParameter(valid_591833, JString, required = false,
                                 default = nil)
  if valid_591833 != nil:
    section.add "oauth_token", valid_591833
  var valid_591834 = query.getOrDefault("userIp")
  valid_591834 = validateParameter(valid_591834, JString, required = false,
                                 default = nil)
  if valid_591834 != nil:
    section.add "userIp", valid_591834
  var valid_591835 = query.getOrDefault("key")
  valid_591835 = validateParameter(valid_591835, JString, required = false,
                                 default = nil)
  if valid_591835 != nil:
    section.add "key", valid_591835
  var valid_591836 = query.getOrDefault("prettyPrint")
  valid_591836 = validateParameter(valid_591836, JBool, required = false,
                                 default = newJBool(true))
  if valid_591836 != nil:
    section.add "prettyPrint", valid_591836
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591837: Call_DfareportingRegionsList_591826; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of regions.
  ## 
  let valid = call_591837.validator(path, query, header, formData, body)
  let scheme = call_591837.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591837.url(scheme.get, call_591837.host, call_591837.base,
                         call_591837.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591837, url, valid)

proc call*(call_591838: Call_DfareportingRegionsList_591826; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingRegionsList
  ## Retrieves a list of regions.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591839 = newJObject()
  var query_591840 = newJObject()
  add(path_591839, "profileId", newJString(profileId))
  add(query_591840, "fields", newJString(fields))
  add(query_591840, "quotaUser", newJString(quotaUser))
  add(query_591840, "alt", newJString(alt))
  add(query_591840, "oauth_token", newJString(oauthToken))
  add(query_591840, "userIp", newJString(userIp))
  add(query_591840, "key", newJString(key))
  add(query_591840, "prettyPrint", newJBool(prettyPrint))
  result = call_591838.call(path_591839, query_591840, nil, nil, nil)

var dfareportingRegionsList* = Call_DfareportingRegionsList_591826(
    name: "dfareportingRegionsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/regions",
    validator: validate_DfareportingRegionsList_591827,
    base: "/dfareporting/v3.2", url: url_DfareportingRegionsList_591828,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListSharesUpdate_591841 = ref object of OpenApiRestCall_588466
proc url_DfareportingRemarketingListSharesUpdate_591843(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingListShares")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListSharesUpdate_591842(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing remarketing list share.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591844 = path.getOrDefault("profileId")
  valid_591844 = validateParameter(valid_591844, JString, required = true,
                                 default = nil)
  if valid_591844 != nil:
    section.add "profileId", valid_591844
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591845 = query.getOrDefault("fields")
  valid_591845 = validateParameter(valid_591845, JString, required = false,
                                 default = nil)
  if valid_591845 != nil:
    section.add "fields", valid_591845
  var valid_591846 = query.getOrDefault("quotaUser")
  valid_591846 = validateParameter(valid_591846, JString, required = false,
                                 default = nil)
  if valid_591846 != nil:
    section.add "quotaUser", valid_591846
  var valid_591847 = query.getOrDefault("alt")
  valid_591847 = validateParameter(valid_591847, JString, required = false,
                                 default = newJString("json"))
  if valid_591847 != nil:
    section.add "alt", valid_591847
  var valid_591848 = query.getOrDefault("oauth_token")
  valid_591848 = validateParameter(valid_591848, JString, required = false,
                                 default = nil)
  if valid_591848 != nil:
    section.add "oauth_token", valid_591848
  var valid_591849 = query.getOrDefault("userIp")
  valid_591849 = validateParameter(valid_591849, JString, required = false,
                                 default = nil)
  if valid_591849 != nil:
    section.add "userIp", valid_591849
  var valid_591850 = query.getOrDefault("key")
  valid_591850 = validateParameter(valid_591850, JString, required = false,
                                 default = nil)
  if valid_591850 != nil:
    section.add "key", valid_591850
  var valid_591851 = query.getOrDefault("prettyPrint")
  valid_591851 = validateParameter(valid_591851, JBool, required = false,
                                 default = newJBool(true))
  if valid_591851 != nil:
    section.add "prettyPrint", valid_591851
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_591853: Call_DfareportingRemarketingListSharesUpdate_591841;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing remarketing list share.
  ## 
  let valid = call_591853.validator(path, query, header, formData, body)
  let scheme = call_591853.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591853.url(scheme.get, call_591853.host, call_591853.base,
                         call_591853.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591853, url, valid)

proc call*(call_591854: Call_DfareportingRemarketingListSharesUpdate_591841;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListSharesUpdate
  ## Updates an existing remarketing list share.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591855 = newJObject()
  var query_591856 = newJObject()
  var body_591857 = newJObject()
  add(path_591855, "profileId", newJString(profileId))
  add(query_591856, "fields", newJString(fields))
  add(query_591856, "quotaUser", newJString(quotaUser))
  add(query_591856, "alt", newJString(alt))
  add(query_591856, "oauth_token", newJString(oauthToken))
  add(query_591856, "userIp", newJString(userIp))
  add(query_591856, "key", newJString(key))
  if body != nil:
    body_591857 = body
  add(query_591856, "prettyPrint", newJBool(prettyPrint))
  result = call_591854.call(path_591855, query_591856, nil, nil, body_591857)

var dfareportingRemarketingListSharesUpdate* = Call_DfareportingRemarketingListSharesUpdate_591841(
    name: "dfareportingRemarketingListSharesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingListShares",
    validator: validate_DfareportingRemarketingListSharesUpdate_591842,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListSharesUpdate_591843,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListSharesPatch_591858 = ref object of OpenApiRestCall_588466
proc url_DfareportingRemarketingListSharesPatch_591860(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingListShares")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListSharesPatch_591859(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing remarketing list share. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591861 = path.getOrDefault("profileId")
  valid_591861 = validateParameter(valid_591861, JString, required = true,
                                 default = nil)
  if valid_591861 != nil:
    section.add "profileId", valid_591861
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   remarketingListId: JString (required)
  ##                    : Remarketing list ID.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591862 = query.getOrDefault("fields")
  valid_591862 = validateParameter(valid_591862, JString, required = false,
                                 default = nil)
  if valid_591862 != nil:
    section.add "fields", valid_591862
  var valid_591863 = query.getOrDefault("quotaUser")
  valid_591863 = validateParameter(valid_591863, JString, required = false,
                                 default = nil)
  if valid_591863 != nil:
    section.add "quotaUser", valid_591863
  var valid_591864 = query.getOrDefault("alt")
  valid_591864 = validateParameter(valid_591864, JString, required = false,
                                 default = newJString("json"))
  if valid_591864 != nil:
    section.add "alt", valid_591864
  var valid_591865 = query.getOrDefault("oauth_token")
  valid_591865 = validateParameter(valid_591865, JString, required = false,
                                 default = nil)
  if valid_591865 != nil:
    section.add "oauth_token", valid_591865
  var valid_591866 = query.getOrDefault("userIp")
  valid_591866 = validateParameter(valid_591866, JString, required = false,
                                 default = nil)
  if valid_591866 != nil:
    section.add "userIp", valid_591866
  var valid_591867 = query.getOrDefault("key")
  valid_591867 = validateParameter(valid_591867, JString, required = false,
                                 default = nil)
  if valid_591867 != nil:
    section.add "key", valid_591867
  assert query != nil,
        "query argument is necessary due to required `remarketingListId` field"
  var valid_591868 = query.getOrDefault("remarketingListId")
  valid_591868 = validateParameter(valid_591868, JString, required = true,
                                 default = nil)
  if valid_591868 != nil:
    section.add "remarketingListId", valid_591868
  var valid_591869 = query.getOrDefault("prettyPrint")
  valid_591869 = validateParameter(valid_591869, JBool, required = false,
                                 default = newJBool(true))
  if valid_591869 != nil:
    section.add "prettyPrint", valid_591869
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_591871: Call_DfareportingRemarketingListSharesPatch_591858;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing remarketing list share. This method supports patch semantics.
  ## 
  let valid = call_591871.validator(path, query, header, formData, body)
  let scheme = call_591871.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591871.url(scheme.get, call_591871.host, call_591871.base,
                         call_591871.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591871, url, valid)

proc call*(call_591872: Call_DfareportingRemarketingListSharesPatch_591858;
          profileId: string; remarketingListId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; body: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListSharesPatch
  ## Updates an existing remarketing list share. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   remarketingListId: string (required)
  ##                    : Remarketing list ID.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591873 = newJObject()
  var query_591874 = newJObject()
  var body_591875 = newJObject()
  add(path_591873, "profileId", newJString(profileId))
  add(query_591874, "fields", newJString(fields))
  add(query_591874, "quotaUser", newJString(quotaUser))
  add(query_591874, "alt", newJString(alt))
  add(query_591874, "oauth_token", newJString(oauthToken))
  add(query_591874, "userIp", newJString(userIp))
  add(query_591874, "key", newJString(key))
  add(query_591874, "remarketingListId", newJString(remarketingListId))
  if body != nil:
    body_591875 = body
  add(query_591874, "prettyPrint", newJBool(prettyPrint))
  result = call_591872.call(path_591873, query_591874, nil, nil, body_591875)

var dfareportingRemarketingListSharesPatch* = Call_DfareportingRemarketingListSharesPatch_591858(
    name: "dfareportingRemarketingListSharesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingListShares",
    validator: validate_DfareportingRemarketingListSharesPatch_591859,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListSharesPatch_591860,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListSharesGet_591876 = ref object of OpenApiRestCall_588466
proc url_DfareportingRemarketingListSharesGet_591878(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "remarketingListId" in path,
        "`remarketingListId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingListShares/"),
               (kind: VariableSegment, value: "remarketingListId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListSharesGet_591877(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one remarketing list share by remarketing list ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   remarketingListId: JString (required)
  ##                    : Remarketing list ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591879 = path.getOrDefault("profileId")
  valid_591879 = validateParameter(valid_591879, JString, required = true,
                                 default = nil)
  if valid_591879 != nil:
    section.add "profileId", valid_591879
  var valid_591880 = path.getOrDefault("remarketingListId")
  valid_591880 = validateParameter(valid_591880, JString, required = true,
                                 default = nil)
  if valid_591880 != nil:
    section.add "remarketingListId", valid_591880
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591881 = query.getOrDefault("fields")
  valid_591881 = validateParameter(valid_591881, JString, required = false,
                                 default = nil)
  if valid_591881 != nil:
    section.add "fields", valid_591881
  var valid_591882 = query.getOrDefault("quotaUser")
  valid_591882 = validateParameter(valid_591882, JString, required = false,
                                 default = nil)
  if valid_591882 != nil:
    section.add "quotaUser", valid_591882
  var valid_591883 = query.getOrDefault("alt")
  valid_591883 = validateParameter(valid_591883, JString, required = false,
                                 default = newJString("json"))
  if valid_591883 != nil:
    section.add "alt", valid_591883
  var valid_591884 = query.getOrDefault("oauth_token")
  valid_591884 = validateParameter(valid_591884, JString, required = false,
                                 default = nil)
  if valid_591884 != nil:
    section.add "oauth_token", valid_591884
  var valid_591885 = query.getOrDefault("userIp")
  valid_591885 = validateParameter(valid_591885, JString, required = false,
                                 default = nil)
  if valid_591885 != nil:
    section.add "userIp", valid_591885
  var valid_591886 = query.getOrDefault("key")
  valid_591886 = validateParameter(valid_591886, JString, required = false,
                                 default = nil)
  if valid_591886 != nil:
    section.add "key", valid_591886
  var valid_591887 = query.getOrDefault("prettyPrint")
  valid_591887 = validateParameter(valid_591887, JBool, required = false,
                                 default = newJBool(true))
  if valid_591887 != nil:
    section.add "prettyPrint", valid_591887
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591888: Call_DfareportingRemarketingListSharesGet_591876;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one remarketing list share by remarketing list ID.
  ## 
  let valid = call_591888.validator(path, query, header, formData, body)
  let scheme = call_591888.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591888.url(scheme.get, call_591888.host, call_591888.base,
                         call_591888.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591888, url, valid)

proc call*(call_591889: Call_DfareportingRemarketingListSharesGet_591876;
          profileId: string; remarketingListId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListSharesGet
  ## Gets one remarketing list share by remarketing list ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   remarketingListId: string (required)
  ##                    : Remarketing list ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591890 = newJObject()
  var query_591891 = newJObject()
  add(path_591890, "profileId", newJString(profileId))
  add(query_591891, "fields", newJString(fields))
  add(query_591891, "quotaUser", newJString(quotaUser))
  add(query_591891, "alt", newJString(alt))
  add(query_591891, "oauth_token", newJString(oauthToken))
  add(query_591891, "userIp", newJString(userIp))
  add(path_591890, "remarketingListId", newJString(remarketingListId))
  add(query_591891, "key", newJString(key))
  add(query_591891, "prettyPrint", newJBool(prettyPrint))
  result = call_591889.call(path_591890, query_591891, nil, nil, nil)

var dfareportingRemarketingListSharesGet* = Call_DfareportingRemarketingListSharesGet_591876(
    name: "dfareportingRemarketingListSharesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/remarketingListShares/{remarketingListId}",
    validator: validate_DfareportingRemarketingListSharesGet_591877,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListSharesGet_591878,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsUpdate_591915 = ref object of OpenApiRestCall_588466
proc url_DfareportingRemarketingListsUpdate_591917(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsUpdate_591916(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing remarketing list.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591918 = path.getOrDefault("profileId")
  valid_591918 = validateParameter(valid_591918, JString, required = true,
                                 default = nil)
  if valid_591918 != nil:
    section.add "profileId", valid_591918
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591919 = query.getOrDefault("fields")
  valid_591919 = validateParameter(valid_591919, JString, required = false,
                                 default = nil)
  if valid_591919 != nil:
    section.add "fields", valid_591919
  var valid_591920 = query.getOrDefault("quotaUser")
  valid_591920 = validateParameter(valid_591920, JString, required = false,
                                 default = nil)
  if valid_591920 != nil:
    section.add "quotaUser", valid_591920
  var valid_591921 = query.getOrDefault("alt")
  valid_591921 = validateParameter(valid_591921, JString, required = false,
                                 default = newJString("json"))
  if valid_591921 != nil:
    section.add "alt", valid_591921
  var valid_591922 = query.getOrDefault("oauth_token")
  valid_591922 = validateParameter(valid_591922, JString, required = false,
                                 default = nil)
  if valid_591922 != nil:
    section.add "oauth_token", valid_591922
  var valid_591923 = query.getOrDefault("userIp")
  valid_591923 = validateParameter(valid_591923, JString, required = false,
                                 default = nil)
  if valid_591923 != nil:
    section.add "userIp", valid_591923
  var valid_591924 = query.getOrDefault("key")
  valid_591924 = validateParameter(valid_591924, JString, required = false,
                                 default = nil)
  if valid_591924 != nil:
    section.add "key", valid_591924
  var valid_591925 = query.getOrDefault("prettyPrint")
  valid_591925 = validateParameter(valid_591925, JBool, required = false,
                                 default = newJBool(true))
  if valid_591925 != nil:
    section.add "prettyPrint", valid_591925
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_591927: Call_DfareportingRemarketingListsUpdate_591915;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing remarketing list.
  ## 
  let valid = call_591927.validator(path, query, header, formData, body)
  let scheme = call_591927.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591927.url(scheme.get, call_591927.host, call_591927.base,
                         call_591927.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591927, url, valid)

proc call*(call_591928: Call_DfareportingRemarketingListsUpdate_591915;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListsUpdate
  ## Updates an existing remarketing list.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591929 = newJObject()
  var query_591930 = newJObject()
  var body_591931 = newJObject()
  add(path_591929, "profileId", newJString(profileId))
  add(query_591930, "fields", newJString(fields))
  add(query_591930, "quotaUser", newJString(quotaUser))
  add(query_591930, "alt", newJString(alt))
  add(query_591930, "oauth_token", newJString(oauthToken))
  add(query_591930, "userIp", newJString(userIp))
  add(query_591930, "key", newJString(key))
  if body != nil:
    body_591931 = body
  add(query_591930, "prettyPrint", newJBool(prettyPrint))
  result = call_591928.call(path_591929, query_591930, nil, nil, body_591931)

var dfareportingRemarketingListsUpdate* = Call_DfareportingRemarketingListsUpdate_591915(
    name: "dfareportingRemarketingListsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists",
    validator: validate_DfareportingRemarketingListsUpdate_591916,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListsUpdate_591917,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsInsert_591932 = ref object of OpenApiRestCall_588466
proc url_DfareportingRemarketingListsInsert_591934(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsInsert_591933(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new remarketing list.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591935 = path.getOrDefault("profileId")
  valid_591935 = validateParameter(valid_591935, JString, required = true,
                                 default = nil)
  if valid_591935 != nil:
    section.add "profileId", valid_591935
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591936 = query.getOrDefault("fields")
  valid_591936 = validateParameter(valid_591936, JString, required = false,
                                 default = nil)
  if valid_591936 != nil:
    section.add "fields", valid_591936
  var valid_591937 = query.getOrDefault("quotaUser")
  valid_591937 = validateParameter(valid_591937, JString, required = false,
                                 default = nil)
  if valid_591937 != nil:
    section.add "quotaUser", valid_591937
  var valid_591938 = query.getOrDefault("alt")
  valid_591938 = validateParameter(valid_591938, JString, required = false,
                                 default = newJString("json"))
  if valid_591938 != nil:
    section.add "alt", valid_591938
  var valid_591939 = query.getOrDefault("oauth_token")
  valid_591939 = validateParameter(valid_591939, JString, required = false,
                                 default = nil)
  if valid_591939 != nil:
    section.add "oauth_token", valid_591939
  var valid_591940 = query.getOrDefault("userIp")
  valid_591940 = validateParameter(valid_591940, JString, required = false,
                                 default = nil)
  if valid_591940 != nil:
    section.add "userIp", valid_591940
  var valid_591941 = query.getOrDefault("key")
  valid_591941 = validateParameter(valid_591941, JString, required = false,
                                 default = nil)
  if valid_591941 != nil:
    section.add "key", valid_591941
  var valid_591942 = query.getOrDefault("prettyPrint")
  valid_591942 = validateParameter(valid_591942, JBool, required = false,
                                 default = newJBool(true))
  if valid_591942 != nil:
    section.add "prettyPrint", valid_591942
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_591944: Call_DfareportingRemarketingListsInsert_591932;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new remarketing list.
  ## 
  let valid = call_591944.validator(path, query, header, formData, body)
  let scheme = call_591944.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591944.url(scheme.get, call_591944.host, call_591944.base,
                         call_591944.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591944, url, valid)

proc call*(call_591945: Call_DfareportingRemarketingListsInsert_591932;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListsInsert
  ## Inserts a new remarketing list.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591946 = newJObject()
  var query_591947 = newJObject()
  var body_591948 = newJObject()
  add(path_591946, "profileId", newJString(profileId))
  add(query_591947, "fields", newJString(fields))
  add(query_591947, "quotaUser", newJString(quotaUser))
  add(query_591947, "alt", newJString(alt))
  add(query_591947, "oauth_token", newJString(oauthToken))
  add(query_591947, "userIp", newJString(userIp))
  add(query_591947, "key", newJString(key))
  if body != nil:
    body_591948 = body
  add(query_591947, "prettyPrint", newJBool(prettyPrint))
  result = call_591945.call(path_591946, query_591947, nil, nil, body_591948)

var dfareportingRemarketingListsInsert* = Call_DfareportingRemarketingListsInsert_591932(
    name: "dfareportingRemarketingListsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists",
    validator: validate_DfareportingRemarketingListsInsert_591933,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListsInsert_591934,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsList_591892 = ref object of OpenApiRestCall_588466
proc url_DfareportingRemarketingListsList_591894(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsList_591893(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of remarketing lists, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591895 = path.getOrDefault("profileId")
  valid_591895 = validateParameter(valid_591895, JString, required = true,
                                 default = nil)
  if valid_591895 != nil:
    section.add "profileId", valid_591895
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   advertiserId: JString (required)
  ##               : Select only remarketing lists owned by this advertiser.
  ##   active: JBool
  ##         : Select only active or only inactive remarketing lists.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   floodlightActivityId: JString
  ##                       : Select only remarketing lists that have this floodlight activity ID.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   name: JString
  ##       : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591896 = query.getOrDefault("fields")
  valid_591896 = validateParameter(valid_591896, JString, required = false,
                                 default = nil)
  if valid_591896 != nil:
    section.add "fields", valid_591896
  var valid_591897 = query.getOrDefault("pageToken")
  valid_591897 = validateParameter(valid_591897, JString, required = false,
                                 default = nil)
  if valid_591897 != nil:
    section.add "pageToken", valid_591897
  var valid_591898 = query.getOrDefault("quotaUser")
  valid_591898 = validateParameter(valid_591898, JString, required = false,
                                 default = nil)
  if valid_591898 != nil:
    section.add "quotaUser", valid_591898
  var valid_591899 = query.getOrDefault("sortField")
  valid_591899 = validateParameter(valid_591899, JString, required = false,
                                 default = newJString("ID"))
  if valid_591899 != nil:
    section.add "sortField", valid_591899
  var valid_591900 = query.getOrDefault("alt")
  valid_591900 = validateParameter(valid_591900, JString, required = false,
                                 default = newJString("json"))
  if valid_591900 != nil:
    section.add "alt", valid_591900
  assert query != nil,
        "query argument is necessary due to required `advertiserId` field"
  var valid_591901 = query.getOrDefault("advertiserId")
  valid_591901 = validateParameter(valid_591901, JString, required = true,
                                 default = nil)
  if valid_591901 != nil:
    section.add "advertiserId", valid_591901
  var valid_591902 = query.getOrDefault("active")
  valid_591902 = validateParameter(valid_591902, JBool, required = false, default = nil)
  if valid_591902 != nil:
    section.add "active", valid_591902
  var valid_591903 = query.getOrDefault("oauth_token")
  valid_591903 = validateParameter(valid_591903, JString, required = false,
                                 default = nil)
  if valid_591903 != nil:
    section.add "oauth_token", valid_591903
  var valid_591904 = query.getOrDefault("floodlightActivityId")
  valid_591904 = validateParameter(valid_591904, JString, required = false,
                                 default = nil)
  if valid_591904 != nil:
    section.add "floodlightActivityId", valid_591904
  var valid_591905 = query.getOrDefault("userIp")
  valid_591905 = validateParameter(valid_591905, JString, required = false,
                                 default = nil)
  if valid_591905 != nil:
    section.add "userIp", valid_591905
  var valid_591906 = query.getOrDefault("maxResults")
  valid_591906 = validateParameter(valid_591906, JInt, required = false,
                                 default = newJInt(1000))
  if valid_591906 != nil:
    section.add "maxResults", valid_591906
  var valid_591907 = query.getOrDefault("key")
  valid_591907 = validateParameter(valid_591907, JString, required = false,
                                 default = nil)
  if valid_591907 != nil:
    section.add "key", valid_591907
  var valid_591908 = query.getOrDefault("name")
  valid_591908 = validateParameter(valid_591908, JString, required = false,
                                 default = nil)
  if valid_591908 != nil:
    section.add "name", valid_591908
  var valid_591909 = query.getOrDefault("sortOrder")
  valid_591909 = validateParameter(valid_591909, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_591909 != nil:
    section.add "sortOrder", valid_591909
  var valid_591910 = query.getOrDefault("prettyPrint")
  valid_591910 = validateParameter(valid_591910, JBool, required = false,
                                 default = newJBool(true))
  if valid_591910 != nil:
    section.add "prettyPrint", valid_591910
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591911: Call_DfareportingRemarketingListsList_591892;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of remarketing lists, possibly filtered. This method supports paging.
  ## 
  let valid = call_591911.validator(path, query, header, formData, body)
  let scheme = call_591911.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591911.url(scheme.get, call_591911.host, call_591911.base,
                         call_591911.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591911, url, valid)

proc call*(call_591912: Call_DfareportingRemarketingListsList_591892;
          profileId: string; advertiserId: string; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; sortField: string = "ID";
          alt: string = "json"; active: bool = false; oauthToken: string = "";
          floodlightActivityId: string = ""; userIp: string = "";
          maxResults: int = 1000; key: string = ""; name: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListsList
  ## Retrieves a list of remarketing lists, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   advertiserId: string (required)
  ##               : Select only remarketing lists owned by this advertiser.
  ##   active: bool
  ##         : Select only active or only inactive remarketing lists.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   floodlightActivityId: string
  ##                       : Select only remarketing lists that have this floodlight activity ID.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   name: string
  ##       : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591913 = newJObject()
  var query_591914 = newJObject()
  add(path_591913, "profileId", newJString(profileId))
  add(query_591914, "fields", newJString(fields))
  add(query_591914, "pageToken", newJString(pageToken))
  add(query_591914, "quotaUser", newJString(quotaUser))
  add(query_591914, "sortField", newJString(sortField))
  add(query_591914, "alt", newJString(alt))
  add(query_591914, "advertiserId", newJString(advertiserId))
  add(query_591914, "active", newJBool(active))
  add(query_591914, "oauth_token", newJString(oauthToken))
  add(query_591914, "floodlightActivityId", newJString(floodlightActivityId))
  add(query_591914, "userIp", newJString(userIp))
  add(query_591914, "maxResults", newJInt(maxResults))
  add(query_591914, "key", newJString(key))
  add(query_591914, "name", newJString(name))
  add(query_591914, "sortOrder", newJString(sortOrder))
  add(query_591914, "prettyPrint", newJBool(prettyPrint))
  result = call_591912.call(path_591913, query_591914, nil, nil, nil)

var dfareportingRemarketingListsList* = Call_DfareportingRemarketingListsList_591892(
    name: "dfareportingRemarketingListsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists",
    validator: validate_DfareportingRemarketingListsList_591893,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListsList_591894,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsPatch_591949 = ref object of OpenApiRestCall_588466
proc url_DfareportingRemarketingListsPatch_591951(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsPatch_591950(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing remarketing list. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591952 = path.getOrDefault("profileId")
  valid_591952 = validateParameter(valid_591952, JString, required = true,
                                 default = nil)
  if valid_591952 != nil:
    section.add "profileId", valid_591952
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Remarketing list ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591953 = query.getOrDefault("fields")
  valid_591953 = validateParameter(valid_591953, JString, required = false,
                                 default = nil)
  if valid_591953 != nil:
    section.add "fields", valid_591953
  var valid_591954 = query.getOrDefault("quotaUser")
  valid_591954 = validateParameter(valid_591954, JString, required = false,
                                 default = nil)
  if valid_591954 != nil:
    section.add "quotaUser", valid_591954
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_591955 = query.getOrDefault("id")
  valid_591955 = validateParameter(valid_591955, JString, required = true,
                                 default = nil)
  if valid_591955 != nil:
    section.add "id", valid_591955
  var valid_591956 = query.getOrDefault("alt")
  valid_591956 = validateParameter(valid_591956, JString, required = false,
                                 default = newJString("json"))
  if valid_591956 != nil:
    section.add "alt", valid_591956
  var valid_591957 = query.getOrDefault("oauth_token")
  valid_591957 = validateParameter(valid_591957, JString, required = false,
                                 default = nil)
  if valid_591957 != nil:
    section.add "oauth_token", valid_591957
  var valid_591958 = query.getOrDefault("userIp")
  valid_591958 = validateParameter(valid_591958, JString, required = false,
                                 default = nil)
  if valid_591958 != nil:
    section.add "userIp", valid_591958
  var valid_591959 = query.getOrDefault("key")
  valid_591959 = validateParameter(valid_591959, JString, required = false,
                                 default = nil)
  if valid_591959 != nil:
    section.add "key", valid_591959
  var valid_591960 = query.getOrDefault("prettyPrint")
  valid_591960 = validateParameter(valid_591960, JBool, required = false,
                                 default = newJBool(true))
  if valid_591960 != nil:
    section.add "prettyPrint", valid_591960
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_591962: Call_DfareportingRemarketingListsPatch_591949;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing remarketing list. This method supports patch semantics.
  ## 
  let valid = call_591962.validator(path, query, header, formData, body)
  let scheme = call_591962.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591962.url(scheme.get, call_591962.host, call_591962.base,
                         call_591962.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591962, url, valid)

proc call*(call_591963: Call_DfareportingRemarketingListsPatch_591949;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListsPatch
  ## Updates an existing remarketing list. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Remarketing list ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591964 = newJObject()
  var query_591965 = newJObject()
  var body_591966 = newJObject()
  add(path_591964, "profileId", newJString(profileId))
  add(query_591965, "fields", newJString(fields))
  add(query_591965, "quotaUser", newJString(quotaUser))
  add(query_591965, "id", newJString(id))
  add(query_591965, "alt", newJString(alt))
  add(query_591965, "oauth_token", newJString(oauthToken))
  add(query_591965, "userIp", newJString(userIp))
  add(query_591965, "key", newJString(key))
  if body != nil:
    body_591966 = body
  add(query_591965, "prettyPrint", newJBool(prettyPrint))
  result = call_591963.call(path_591964, query_591965, nil, nil, body_591966)

var dfareportingRemarketingListsPatch* = Call_DfareportingRemarketingListsPatch_591949(
    name: "dfareportingRemarketingListsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists",
    validator: validate_DfareportingRemarketingListsPatch_591950,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListsPatch_591951,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsGet_591967 = ref object of OpenApiRestCall_588466
proc url_DfareportingRemarketingListsGet_591969(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsGet_591968(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one remarketing list by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Remarketing list ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591970 = path.getOrDefault("profileId")
  valid_591970 = validateParameter(valid_591970, JString, required = true,
                                 default = nil)
  if valid_591970 != nil:
    section.add "profileId", valid_591970
  var valid_591971 = path.getOrDefault("id")
  valid_591971 = validateParameter(valid_591971, JString, required = true,
                                 default = nil)
  if valid_591971 != nil:
    section.add "id", valid_591971
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591972 = query.getOrDefault("fields")
  valid_591972 = validateParameter(valid_591972, JString, required = false,
                                 default = nil)
  if valid_591972 != nil:
    section.add "fields", valid_591972
  var valid_591973 = query.getOrDefault("quotaUser")
  valid_591973 = validateParameter(valid_591973, JString, required = false,
                                 default = nil)
  if valid_591973 != nil:
    section.add "quotaUser", valid_591973
  var valid_591974 = query.getOrDefault("alt")
  valid_591974 = validateParameter(valid_591974, JString, required = false,
                                 default = newJString("json"))
  if valid_591974 != nil:
    section.add "alt", valid_591974
  var valid_591975 = query.getOrDefault("oauth_token")
  valid_591975 = validateParameter(valid_591975, JString, required = false,
                                 default = nil)
  if valid_591975 != nil:
    section.add "oauth_token", valid_591975
  var valid_591976 = query.getOrDefault("userIp")
  valid_591976 = validateParameter(valid_591976, JString, required = false,
                                 default = nil)
  if valid_591976 != nil:
    section.add "userIp", valid_591976
  var valid_591977 = query.getOrDefault("key")
  valid_591977 = validateParameter(valid_591977, JString, required = false,
                                 default = nil)
  if valid_591977 != nil:
    section.add "key", valid_591977
  var valid_591978 = query.getOrDefault("prettyPrint")
  valid_591978 = validateParameter(valid_591978, JBool, required = false,
                                 default = newJBool(true))
  if valid_591978 != nil:
    section.add "prettyPrint", valid_591978
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591979: Call_DfareportingRemarketingListsGet_591967;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one remarketing list by ID.
  ## 
  let valid = call_591979.validator(path, query, header, formData, body)
  let scheme = call_591979.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591979.url(scheme.get, call_591979.host, call_591979.base,
                         call_591979.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591979, url, valid)

proc call*(call_591980: Call_DfareportingRemarketingListsGet_591967;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListsGet
  ## Gets one remarketing list by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Remarketing list ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_591981 = newJObject()
  var query_591982 = newJObject()
  add(path_591981, "profileId", newJString(profileId))
  add(query_591982, "fields", newJString(fields))
  add(query_591982, "quotaUser", newJString(quotaUser))
  add(query_591982, "alt", newJString(alt))
  add(query_591982, "oauth_token", newJString(oauthToken))
  add(query_591982, "userIp", newJString(userIp))
  add(path_591981, "id", newJString(id))
  add(query_591982, "key", newJString(key))
  add(query_591982, "prettyPrint", newJBool(prettyPrint))
  result = call_591980.call(path_591981, query_591982, nil, nil, nil)

var dfareportingRemarketingListsGet* = Call_DfareportingRemarketingListsGet_591967(
    name: "dfareportingRemarketingListsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists/{id}",
    validator: validate_DfareportingRemarketingListsGet_591968,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListsGet_591969,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsInsert_592003 = ref object of OpenApiRestCall_588466
proc url_DfareportingReportsInsert_592005(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsInsert_592004(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a report.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592006 = path.getOrDefault("profileId")
  valid_592006 = validateParameter(valid_592006, JString, required = true,
                                 default = nil)
  if valid_592006 != nil:
    section.add "profileId", valid_592006
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592007 = query.getOrDefault("fields")
  valid_592007 = validateParameter(valid_592007, JString, required = false,
                                 default = nil)
  if valid_592007 != nil:
    section.add "fields", valid_592007
  var valid_592008 = query.getOrDefault("quotaUser")
  valid_592008 = validateParameter(valid_592008, JString, required = false,
                                 default = nil)
  if valid_592008 != nil:
    section.add "quotaUser", valid_592008
  var valid_592009 = query.getOrDefault("alt")
  valid_592009 = validateParameter(valid_592009, JString, required = false,
                                 default = newJString("json"))
  if valid_592009 != nil:
    section.add "alt", valid_592009
  var valid_592010 = query.getOrDefault("oauth_token")
  valid_592010 = validateParameter(valid_592010, JString, required = false,
                                 default = nil)
  if valid_592010 != nil:
    section.add "oauth_token", valid_592010
  var valid_592011 = query.getOrDefault("userIp")
  valid_592011 = validateParameter(valid_592011, JString, required = false,
                                 default = nil)
  if valid_592011 != nil:
    section.add "userIp", valid_592011
  var valid_592012 = query.getOrDefault("key")
  valid_592012 = validateParameter(valid_592012, JString, required = false,
                                 default = nil)
  if valid_592012 != nil:
    section.add "key", valid_592012
  var valid_592013 = query.getOrDefault("prettyPrint")
  valid_592013 = validateParameter(valid_592013, JBool, required = false,
                                 default = newJBool(true))
  if valid_592013 != nil:
    section.add "prettyPrint", valid_592013
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_592015: Call_DfareportingReportsInsert_592003; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a report.
  ## 
  let valid = call_592015.validator(path, query, header, formData, body)
  let scheme = call_592015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592015.url(scheme.get, call_592015.host, call_592015.base,
                         call_592015.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592015, url, valid)

proc call*(call_592016: Call_DfareportingReportsInsert_592003; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsInsert
  ## Creates a report.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592017 = newJObject()
  var query_592018 = newJObject()
  var body_592019 = newJObject()
  add(path_592017, "profileId", newJString(profileId))
  add(query_592018, "fields", newJString(fields))
  add(query_592018, "quotaUser", newJString(quotaUser))
  add(query_592018, "alt", newJString(alt))
  add(query_592018, "oauth_token", newJString(oauthToken))
  add(query_592018, "userIp", newJString(userIp))
  add(query_592018, "key", newJString(key))
  if body != nil:
    body_592019 = body
  add(query_592018, "prettyPrint", newJBool(prettyPrint))
  result = call_592016.call(path_592017, query_592018, nil, nil, body_592019)

var dfareportingReportsInsert* = Call_DfareportingReportsInsert_592003(
    name: "dfareportingReportsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/reports",
    validator: validate_DfareportingReportsInsert_592004,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsInsert_592005,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsList_591983 = ref object of OpenApiRestCall_588466
proc url_DfareportingReportsList_591985(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsList_591984(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves list of reports.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_591986 = path.getOrDefault("profileId")
  valid_591986 = validateParameter(valid_591986, JString, required = true,
                                 default = nil)
  if valid_591986 != nil:
    section.add "profileId", valid_591986
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : The field by which to sort the list.
  ##   scope: JString
  ##        : The scope that defines which results are returned.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_591987 = query.getOrDefault("fields")
  valid_591987 = validateParameter(valid_591987, JString, required = false,
                                 default = nil)
  if valid_591987 != nil:
    section.add "fields", valid_591987
  var valid_591988 = query.getOrDefault("pageToken")
  valid_591988 = validateParameter(valid_591988, JString, required = false,
                                 default = nil)
  if valid_591988 != nil:
    section.add "pageToken", valid_591988
  var valid_591989 = query.getOrDefault("quotaUser")
  valid_591989 = validateParameter(valid_591989, JString, required = false,
                                 default = nil)
  if valid_591989 != nil:
    section.add "quotaUser", valid_591989
  var valid_591990 = query.getOrDefault("sortField")
  valid_591990 = validateParameter(valid_591990, JString, required = false,
                                 default = newJString("LAST_MODIFIED_TIME"))
  if valid_591990 != nil:
    section.add "sortField", valid_591990
  var valid_591991 = query.getOrDefault("scope")
  valid_591991 = validateParameter(valid_591991, JString, required = false,
                                 default = newJString("MINE"))
  if valid_591991 != nil:
    section.add "scope", valid_591991
  var valid_591992 = query.getOrDefault("alt")
  valid_591992 = validateParameter(valid_591992, JString, required = false,
                                 default = newJString("json"))
  if valid_591992 != nil:
    section.add "alt", valid_591992
  var valid_591993 = query.getOrDefault("oauth_token")
  valid_591993 = validateParameter(valid_591993, JString, required = false,
                                 default = nil)
  if valid_591993 != nil:
    section.add "oauth_token", valid_591993
  var valid_591994 = query.getOrDefault("userIp")
  valid_591994 = validateParameter(valid_591994, JString, required = false,
                                 default = nil)
  if valid_591994 != nil:
    section.add "userIp", valid_591994
  var valid_591995 = query.getOrDefault("maxResults")
  valid_591995 = validateParameter(valid_591995, JInt, required = false,
                                 default = newJInt(10))
  if valid_591995 != nil:
    section.add "maxResults", valid_591995
  var valid_591996 = query.getOrDefault("key")
  valid_591996 = validateParameter(valid_591996, JString, required = false,
                                 default = nil)
  if valid_591996 != nil:
    section.add "key", valid_591996
  var valid_591997 = query.getOrDefault("sortOrder")
  valid_591997 = validateParameter(valid_591997, JString, required = false,
                                 default = newJString("DESCENDING"))
  if valid_591997 != nil:
    section.add "sortOrder", valid_591997
  var valid_591998 = query.getOrDefault("prettyPrint")
  valid_591998 = validateParameter(valid_591998, JBool, required = false,
                                 default = newJBool(true))
  if valid_591998 != nil:
    section.add "prettyPrint", valid_591998
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591999: Call_DfareportingReportsList_591983; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves list of reports.
  ## 
  let valid = call_591999.validator(path, query, header, formData, body)
  let scheme = call_591999.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591999.url(scheme.get, call_591999.host, call_591999.base,
                         call_591999.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591999, url, valid)

proc call*(call_592000: Call_DfareportingReportsList_591983; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "LAST_MODIFIED_TIME"; scope: string = "MINE";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 10; key: string = ""; sortOrder: string = "DESCENDING";
          prettyPrint: bool = true): Recallable =
  ## dfareportingReportsList
  ## Retrieves list of reports.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : The field by which to sort the list.
  ##   scope: string
  ##        : The scope that defines which results are returned.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592001 = newJObject()
  var query_592002 = newJObject()
  add(path_592001, "profileId", newJString(profileId))
  add(query_592002, "fields", newJString(fields))
  add(query_592002, "pageToken", newJString(pageToken))
  add(query_592002, "quotaUser", newJString(quotaUser))
  add(query_592002, "sortField", newJString(sortField))
  add(query_592002, "scope", newJString(scope))
  add(query_592002, "alt", newJString(alt))
  add(query_592002, "oauth_token", newJString(oauthToken))
  add(query_592002, "userIp", newJString(userIp))
  add(query_592002, "maxResults", newJInt(maxResults))
  add(query_592002, "key", newJString(key))
  add(query_592002, "sortOrder", newJString(sortOrder))
  add(query_592002, "prettyPrint", newJBool(prettyPrint))
  result = call_592000.call(path_592001, query_592002, nil, nil, nil)

var dfareportingReportsList* = Call_DfareportingReportsList_591983(
    name: "dfareportingReportsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/reports",
    validator: validate_DfareportingReportsList_591984,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsList_591985,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsCompatibleFieldsQuery_592020 = ref object of OpenApiRestCall_588466
proc url_DfareportingReportsCompatibleFieldsQuery_592022(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"), (kind: ConstantSegment,
        value: "/reports/compatiblefields/query")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsCompatibleFieldsQuery_592021(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592023 = path.getOrDefault("profileId")
  valid_592023 = validateParameter(valid_592023, JString, required = true,
                                 default = nil)
  if valid_592023 != nil:
    section.add "profileId", valid_592023
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592024 = query.getOrDefault("fields")
  valid_592024 = validateParameter(valid_592024, JString, required = false,
                                 default = nil)
  if valid_592024 != nil:
    section.add "fields", valid_592024
  var valid_592025 = query.getOrDefault("quotaUser")
  valid_592025 = validateParameter(valid_592025, JString, required = false,
                                 default = nil)
  if valid_592025 != nil:
    section.add "quotaUser", valid_592025
  var valid_592026 = query.getOrDefault("alt")
  valid_592026 = validateParameter(valid_592026, JString, required = false,
                                 default = newJString("json"))
  if valid_592026 != nil:
    section.add "alt", valid_592026
  var valid_592027 = query.getOrDefault("oauth_token")
  valid_592027 = validateParameter(valid_592027, JString, required = false,
                                 default = nil)
  if valid_592027 != nil:
    section.add "oauth_token", valid_592027
  var valid_592028 = query.getOrDefault("userIp")
  valid_592028 = validateParameter(valid_592028, JString, required = false,
                                 default = nil)
  if valid_592028 != nil:
    section.add "userIp", valid_592028
  var valid_592029 = query.getOrDefault("key")
  valid_592029 = validateParameter(valid_592029, JString, required = false,
                                 default = nil)
  if valid_592029 != nil:
    section.add "key", valid_592029
  var valid_592030 = query.getOrDefault("prettyPrint")
  valid_592030 = validateParameter(valid_592030, JBool, required = false,
                                 default = newJBool(true))
  if valid_592030 != nil:
    section.add "prettyPrint", valid_592030
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_592032: Call_DfareportingReportsCompatibleFieldsQuery_592020;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.
  ## 
  let valid = call_592032.validator(path, query, header, formData, body)
  let scheme = call_592032.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592032.url(scheme.get, call_592032.host, call_592032.base,
                         call_592032.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592032, url, valid)

proc call*(call_592033: Call_DfareportingReportsCompatibleFieldsQuery_592020;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsCompatibleFieldsQuery
  ## Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592034 = newJObject()
  var query_592035 = newJObject()
  var body_592036 = newJObject()
  add(path_592034, "profileId", newJString(profileId))
  add(query_592035, "fields", newJString(fields))
  add(query_592035, "quotaUser", newJString(quotaUser))
  add(query_592035, "alt", newJString(alt))
  add(query_592035, "oauth_token", newJString(oauthToken))
  add(query_592035, "userIp", newJString(userIp))
  add(query_592035, "key", newJString(key))
  if body != nil:
    body_592036 = body
  add(query_592035, "prettyPrint", newJBool(prettyPrint))
  result = call_592033.call(path_592034, query_592035, nil, nil, body_592036)

var dfareportingReportsCompatibleFieldsQuery* = Call_DfareportingReportsCompatibleFieldsQuery_592020(
    name: "dfareportingReportsCompatibleFieldsQuery", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/compatiblefields/query",
    validator: validate_DfareportingReportsCompatibleFieldsQuery_592021,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsCompatibleFieldsQuery_592022,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsUpdate_592053 = ref object of OpenApiRestCall_588466
proc url_DfareportingReportsUpdate_592055(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsUpdate_592054(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a report.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592056 = path.getOrDefault("profileId")
  valid_592056 = validateParameter(valid_592056, JString, required = true,
                                 default = nil)
  if valid_592056 != nil:
    section.add "profileId", valid_592056
  var valid_592057 = path.getOrDefault("reportId")
  valid_592057 = validateParameter(valid_592057, JString, required = true,
                                 default = nil)
  if valid_592057 != nil:
    section.add "reportId", valid_592057
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592058 = query.getOrDefault("fields")
  valid_592058 = validateParameter(valid_592058, JString, required = false,
                                 default = nil)
  if valid_592058 != nil:
    section.add "fields", valid_592058
  var valid_592059 = query.getOrDefault("quotaUser")
  valid_592059 = validateParameter(valid_592059, JString, required = false,
                                 default = nil)
  if valid_592059 != nil:
    section.add "quotaUser", valid_592059
  var valid_592060 = query.getOrDefault("alt")
  valid_592060 = validateParameter(valid_592060, JString, required = false,
                                 default = newJString("json"))
  if valid_592060 != nil:
    section.add "alt", valid_592060
  var valid_592061 = query.getOrDefault("oauth_token")
  valid_592061 = validateParameter(valid_592061, JString, required = false,
                                 default = nil)
  if valid_592061 != nil:
    section.add "oauth_token", valid_592061
  var valid_592062 = query.getOrDefault("userIp")
  valid_592062 = validateParameter(valid_592062, JString, required = false,
                                 default = nil)
  if valid_592062 != nil:
    section.add "userIp", valid_592062
  var valid_592063 = query.getOrDefault("key")
  valid_592063 = validateParameter(valid_592063, JString, required = false,
                                 default = nil)
  if valid_592063 != nil:
    section.add "key", valid_592063
  var valid_592064 = query.getOrDefault("prettyPrint")
  valid_592064 = validateParameter(valid_592064, JBool, required = false,
                                 default = newJBool(true))
  if valid_592064 != nil:
    section.add "prettyPrint", valid_592064
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_592066: Call_DfareportingReportsUpdate_592053; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a report.
  ## 
  let valid = call_592066.validator(path, query, header, formData, body)
  let scheme = call_592066.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592066.url(scheme.get, call_592066.host, call_592066.base,
                         call_592066.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592066, url, valid)

proc call*(call_592067: Call_DfareportingReportsUpdate_592053; profileId: string;
          reportId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsUpdate
  ## Updates a report.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592068 = newJObject()
  var query_592069 = newJObject()
  var body_592070 = newJObject()
  add(path_592068, "profileId", newJString(profileId))
  add(query_592069, "fields", newJString(fields))
  add(query_592069, "quotaUser", newJString(quotaUser))
  add(query_592069, "alt", newJString(alt))
  add(query_592069, "oauth_token", newJString(oauthToken))
  add(query_592069, "userIp", newJString(userIp))
  add(query_592069, "key", newJString(key))
  add(path_592068, "reportId", newJString(reportId))
  if body != nil:
    body_592070 = body
  add(query_592069, "prettyPrint", newJBool(prettyPrint))
  result = call_592067.call(path_592068, query_592069, nil, nil, body_592070)

var dfareportingReportsUpdate* = Call_DfareportingReportsUpdate_592053(
    name: "dfareportingReportsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}",
    validator: validate_DfareportingReportsUpdate_592054,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsUpdate_592055,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsGet_592037 = ref object of OpenApiRestCall_588466
proc url_DfareportingReportsGet_592039(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsGet_592038(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a report by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592040 = path.getOrDefault("profileId")
  valid_592040 = validateParameter(valid_592040, JString, required = true,
                                 default = nil)
  if valid_592040 != nil:
    section.add "profileId", valid_592040
  var valid_592041 = path.getOrDefault("reportId")
  valid_592041 = validateParameter(valid_592041, JString, required = true,
                                 default = nil)
  if valid_592041 != nil:
    section.add "reportId", valid_592041
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592042 = query.getOrDefault("fields")
  valid_592042 = validateParameter(valid_592042, JString, required = false,
                                 default = nil)
  if valid_592042 != nil:
    section.add "fields", valid_592042
  var valid_592043 = query.getOrDefault("quotaUser")
  valid_592043 = validateParameter(valid_592043, JString, required = false,
                                 default = nil)
  if valid_592043 != nil:
    section.add "quotaUser", valid_592043
  var valid_592044 = query.getOrDefault("alt")
  valid_592044 = validateParameter(valid_592044, JString, required = false,
                                 default = newJString("json"))
  if valid_592044 != nil:
    section.add "alt", valid_592044
  var valid_592045 = query.getOrDefault("oauth_token")
  valid_592045 = validateParameter(valid_592045, JString, required = false,
                                 default = nil)
  if valid_592045 != nil:
    section.add "oauth_token", valid_592045
  var valid_592046 = query.getOrDefault("userIp")
  valid_592046 = validateParameter(valid_592046, JString, required = false,
                                 default = nil)
  if valid_592046 != nil:
    section.add "userIp", valid_592046
  var valid_592047 = query.getOrDefault("key")
  valid_592047 = validateParameter(valid_592047, JString, required = false,
                                 default = nil)
  if valid_592047 != nil:
    section.add "key", valid_592047
  var valid_592048 = query.getOrDefault("prettyPrint")
  valid_592048 = validateParameter(valid_592048, JBool, required = false,
                                 default = newJBool(true))
  if valid_592048 != nil:
    section.add "prettyPrint", valid_592048
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592049: Call_DfareportingReportsGet_592037; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a report by its ID.
  ## 
  let valid = call_592049.validator(path, query, header, formData, body)
  let scheme = call_592049.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592049.url(scheme.get, call_592049.host, call_592049.base,
                         call_592049.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592049, url, valid)

proc call*(call_592050: Call_DfareportingReportsGet_592037; profileId: string;
          reportId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsGet
  ## Retrieves a report by its ID.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592051 = newJObject()
  var query_592052 = newJObject()
  add(path_592051, "profileId", newJString(profileId))
  add(query_592052, "fields", newJString(fields))
  add(query_592052, "quotaUser", newJString(quotaUser))
  add(query_592052, "alt", newJString(alt))
  add(query_592052, "oauth_token", newJString(oauthToken))
  add(query_592052, "userIp", newJString(userIp))
  add(query_592052, "key", newJString(key))
  add(path_592051, "reportId", newJString(reportId))
  add(query_592052, "prettyPrint", newJBool(prettyPrint))
  result = call_592050.call(path_592051, query_592052, nil, nil, nil)

var dfareportingReportsGet* = Call_DfareportingReportsGet_592037(
    name: "dfareportingReportsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}",
    validator: validate_DfareportingReportsGet_592038, base: "/dfareporting/v3.2",
    url: url_DfareportingReportsGet_592039, schemes: {Scheme.Https})
type
  Call_DfareportingReportsPatch_592087 = ref object of OpenApiRestCall_588466
proc url_DfareportingReportsPatch_592089(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsPatch_592088(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a report. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592090 = path.getOrDefault("profileId")
  valid_592090 = validateParameter(valid_592090, JString, required = true,
                                 default = nil)
  if valid_592090 != nil:
    section.add "profileId", valid_592090
  var valid_592091 = path.getOrDefault("reportId")
  valid_592091 = validateParameter(valid_592091, JString, required = true,
                                 default = nil)
  if valid_592091 != nil:
    section.add "reportId", valid_592091
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592092 = query.getOrDefault("fields")
  valid_592092 = validateParameter(valid_592092, JString, required = false,
                                 default = nil)
  if valid_592092 != nil:
    section.add "fields", valid_592092
  var valid_592093 = query.getOrDefault("quotaUser")
  valid_592093 = validateParameter(valid_592093, JString, required = false,
                                 default = nil)
  if valid_592093 != nil:
    section.add "quotaUser", valid_592093
  var valid_592094 = query.getOrDefault("alt")
  valid_592094 = validateParameter(valid_592094, JString, required = false,
                                 default = newJString("json"))
  if valid_592094 != nil:
    section.add "alt", valid_592094
  var valid_592095 = query.getOrDefault("oauth_token")
  valid_592095 = validateParameter(valid_592095, JString, required = false,
                                 default = nil)
  if valid_592095 != nil:
    section.add "oauth_token", valid_592095
  var valid_592096 = query.getOrDefault("userIp")
  valid_592096 = validateParameter(valid_592096, JString, required = false,
                                 default = nil)
  if valid_592096 != nil:
    section.add "userIp", valid_592096
  var valid_592097 = query.getOrDefault("key")
  valid_592097 = validateParameter(valid_592097, JString, required = false,
                                 default = nil)
  if valid_592097 != nil:
    section.add "key", valid_592097
  var valid_592098 = query.getOrDefault("prettyPrint")
  valid_592098 = validateParameter(valid_592098, JBool, required = false,
                                 default = newJBool(true))
  if valid_592098 != nil:
    section.add "prettyPrint", valid_592098
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_592100: Call_DfareportingReportsPatch_592087; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a report. This method supports patch semantics.
  ## 
  let valid = call_592100.validator(path, query, header, formData, body)
  let scheme = call_592100.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592100.url(scheme.get, call_592100.host, call_592100.base,
                         call_592100.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592100, url, valid)

proc call*(call_592101: Call_DfareportingReportsPatch_592087; profileId: string;
          reportId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsPatch
  ## Updates a report. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592102 = newJObject()
  var query_592103 = newJObject()
  var body_592104 = newJObject()
  add(path_592102, "profileId", newJString(profileId))
  add(query_592103, "fields", newJString(fields))
  add(query_592103, "quotaUser", newJString(quotaUser))
  add(query_592103, "alt", newJString(alt))
  add(query_592103, "oauth_token", newJString(oauthToken))
  add(query_592103, "userIp", newJString(userIp))
  add(query_592103, "key", newJString(key))
  add(path_592102, "reportId", newJString(reportId))
  if body != nil:
    body_592104 = body
  add(query_592103, "prettyPrint", newJBool(prettyPrint))
  result = call_592101.call(path_592102, query_592103, nil, nil, body_592104)

var dfareportingReportsPatch* = Call_DfareportingReportsPatch_592087(
    name: "dfareportingReportsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}",
    validator: validate_DfareportingReportsPatch_592088,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsPatch_592089,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsDelete_592071 = ref object of OpenApiRestCall_588466
proc url_DfareportingReportsDelete_592073(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsDelete_592072(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a report by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592074 = path.getOrDefault("profileId")
  valid_592074 = validateParameter(valid_592074, JString, required = true,
                                 default = nil)
  if valid_592074 != nil:
    section.add "profileId", valid_592074
  var valid_592075 = path.getOrDefault("reportId")
  valid_592075 = validateParameter(valid_592075, JString, required = true,
                                 default = nil)
  if valid_592075 != nil:
    section.add "reportId", valid_592075
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592076 = query.getOrDefault("fields")
  valid_592076 = validateParameter(valid_592076, JString, required = false,
                                 default = nil)
  if valid_592076 != nil:
    section.add "fields", valid_592076
  var valid_592077 = query.getOrDefault("quotaUser")
  valid_592077 = validateParameter(valid_592077, JString, required = false,
                                 default = nil)
  if valid_592077 != nil:
    section.add "quotaUser", valid_592077
  var valid_592078 = query.getOrDefault("alt")
  valid_592078 = validateParameter(valid_592078, JString, required = false,
                                 default = newJString("json"))
  if valid_592078 != nil:
    section.add "alt", valid_592078
  var valid_592079 = query.getOrDefault("oauth_token")
  valid_592079 = validateParameter(valid_592079, JString, required = false,
                                 default = nil)
  if valid_592079 != nil:
    section.add "oauth_token", valid_592079
  var valid_592080 = query.getOrDefault("userIp")
  valid_592080 = validateParameter(valid_592080, JString, required = false,
                                 default = nil)
  if valid_592080 != nil:
    section.add "userIp", valid_592080
  var valid_592081 = query.getOrDefault("key")
  valid_592081 = validateParameter(valid_592081, JString, required = false,
                                 default = nil)
  if valid_592081 != nil:
    section.add "key", valid_592081
  var valid_592082 = query.getOrDefault("prettyPrint")
  valid_592082 = validateParameter(valid_592082, JBool, required = false,
                                 default = newJBool(true))
  if valid_592082 != nil:
    section.add "prettyPrint", valid_592082
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592083: Call_DfareportingReportsDelete_592071; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a report by its ID.
  ## 
  let valid = call_592083.validator(path, query, header, formData, body)
  let scheme = call_592083.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592083.url(scheme.get, call_592083.host, call_592083.base,
                         call_592083.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592083, url, valid)

proc call*(call_592084: Call_DfareportingReportsDelete_592071; profileId: string;
          reportId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsDelete
  ## Deletes a report by its ID.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592085 = newJObject()
  var query_592086 = newJObject()
  add(path_592085, "profileId", newJString(profileId))
  add(query_592086, "fields", newJString(fields))
  add(query_592086, "quotaUser", newJString(quotaUser))
  add(query_592086, "alt", newJString(alt))
  add(query_592086, "oauth_token", newJString(oauthToken))
  add(query_592086, "userIp", newJString(userIp))
  add(query_592086, "key", newJString(key))
  add(path_592085, "reportId", newJString(reportId))
  add(query_592086, "prettyPrint", newJBool(prettyPrint))
  result = call_592084.call(path_592085, query_592086, nil, nil, nil)

var dfareportingReportsDelete* = Call_DfareportingReportsDelete_592071(
    name: "dfareportingReportsDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}",
    validator: validate_DfareportingReportsDelete_592072,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsDelete_592073,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsFilesList_592105 = ref object of OpenApiRestCall_588466
proc url_DfareportingReportsFilesList_592107(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId"),
               (kind: ConstantSegment, value: "/files")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsFilesList_592106(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists files for a report.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the parent report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592108 = path.getOrDefault("profileId")
  valid_592108 = validateParameter(valid_592108, JString, required = true,
                                 default = nil)
  if valid_592108 != nil:
    section.add "profileId", valid_592108
  var valid_592109 = path.getOrDefault("reportId")
  valid_592109 = validateParameter(valid_592109, JString, required = true,
                                 default = nil)
  if valid_592109 != nil:
    section.add "reportId", valid_592109
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : The field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592110 = query.getOrDefault("fields")
  valid_592110 = validateParameter(valid_592110, JString, required = false,
                                 default = nil)
  if valid_592110 != nil:
    section.add "fields", valid_592110
  var valid_592111 = query.getOrDefault("pageToken")
  valid_592111 = validateParameter(valid_592111, JString, required = false,
                                 default = nil)
  if valid_592111 != nil:
    section.add "pageToken", valid_592111
  var valid_592112 = query.getOrDefault("quotaUser")
  valid_592112 = validateParameter(valid_592112, JString, required = false,
                                 default = nil)
  if valid_592112 != nil:
    section.add "quotaUser", valid_592112
  var valid_592113 = query.getOrDefault("sortField")
  valid_592113 = validateParameter(valid_592113, JString, required = false,
                                 default = newJString("LAST_MODIFIED_TIME"))
  if valid_592113 != nil:
    section.add "sortField", valid_592113
  var valid_592114 = query.getOrDefault("alt")
  valid_592114 = validateParameter(valid_592114, JString, required = false,
                                 default = newJString("json"))
  if valid_592114 != nil:
    section.add "alt", valid_592114
  var valid_592115 = query.getOrDefault("oauth_token")
  valid_592115 = validateParameter(valid_592115, JString, required = false,
                                 default = nil)
  if valid_592115 != nil:
    section.add "oauth_token", valid_592115
  var valid_592116 = query.getOrDefault("userIp")
  valid_592116 = validateParameter(valid_592116, JString, required = false,
                                 default = nil)
  if valid_592116 != nil:
    section.add "userIp", valid_592116
  var valid_592117 = query.getOrDefault("maxResults")
  valid_592117 = validateParameter(valid_592117, JInt, required = false,
                                 default = newJInt(10))
  if valid_592117 != nil:
    section.add "maxResults", valid_592117
  var valid_592118 = query.getOrDefault("key")
  valid_592118 = validateParameter(valid_592118, JString, required = false,
                                 default = nil)
  if valid_592118 != nil:
    section.add "key", valid_592118
  var valid_592119 = query.getOrDefault("sortOrder")
  valid_592119 = validateParameter(valid_592119, JString, required = false,
                                 default = newJString("DESCENDING"))
  if valid_592119 != nil:
    section.add "sortOrder", valid_592119
  var valid_592120 = query.getOrDefault("prettyPrint")
  valid_592120 = validateParameter(valid_592120, JBool, required = false,
                                 default = newJBool(true))
  if valid_592120 != nil:
    section.add "prettyPrint", valid_592120
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592121: Call_DfareportingReportsFilesList_592105; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists files for a report.
  ## 
  let valid = call_592121.validator(path, query, header, formData, body)
  let scheme = call_592121.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592121.url(scheme.get, call_592121.host, call_592121.base,
                         call_592121.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592121, url, valid)

proc call*(call_592122: Call_DfareportingReportsFilesList_592105;
          profileId: string; reportId: string; fields: string = "";
          pageToken: string = ""; quotaUser: string = "";
          sortField: string = "LAST_MODIFIED_TIME"; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; maxResults: int = 10;
          key: string = ""; sortOrder: string = "DESCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsFilesList
  ## Lists files for a report.
  ##   profileId: string (required)
  ##            : The DFA profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : The field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   reportId: string (required)
  ##           : The ID of the parent report.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592123 = newJObject()
  var query_592124 = newJObject()
  add(path_592123, "profileId", newJString(profileId))
  add(query_592124, "fields", newJString(fields))
  add(query_592124, "pageToken", newJString(pageToken))
  add(query_592124, "quotaUser", newJString(quotaUser))
  add(query_592124, "sortField", newJString(sortField))
  add(query_592124, "alt", newJString(alt))
  add(query_592124, "oauth_token", newJString(oauthToken))
  add(query_592124, "userIp", newJString(userIp))
  add(query_592124, "maxResults", newJInt(maxResults))
  add(query_592124, "key", newJString(key))
  add(query_592124, "sortOrder", newJString(sortOrder))
  add(path_592123, "reportId", newJString(reportId))
  add(query_592124, "prettyPrint", newJBool(prettyPrint))
  result = call_592122.call(path_592123, query_592124, nil, nil, nil)

var dfareportingReportsFilesList* = Call_DfareportingReportsFilesList_592105(
    name: "dfareportingReportsFilesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}/files",
    validator: validate_DfareportingReportsFilesList_592106,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsFilesList_592107,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsFilesGet_592125 = ref object of OpenApiRestCall_588466
proc url_DfareportingReportsFilesGet_592127(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  assert "fileId" in path, "`fileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId"),
               (kind: ConstantSegment, value: "/files/"),
               (kind: VariableSegment, value: "fileId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsFilesGet_592126(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a report file. This method supports media download.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA profile ID.
  ##   fileId: JString (required)
  ##         : The ID of the report file.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592128 = path.getOrDefault("profileId")
  valid_592128 = validateParameter(valid_592128, JString, required = true,
                                 default = nil)
  if valid_592128 != nil:
    section.add "profileId", valid_592128
  var valid_592129 = path.getOrDefault("fileId")
  valid_592129 = validateParameter(valid_592129, JString, required = true,
                                 default = nil)
  if valid_592129 != nil:
    section.add "fileId", valid_592129
  var valid_592130 = path.getOrDefault("reportId")
  valid_592130 = validateParameter(valid_592130, JString, required = true,
                                 default = nil)
  if valid_592130 != nil:
    section.add "reportId", valid_592130
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592131 = query.getOrDefault("fields")
  valid_592131 = validateParameter(valid_592131, JString, required = false,
                                 default = nil)
  if valid_592131 != nil:
    section.add "fields", valid_592131
  var valid_592132 = query.getOrDefault("quotaUser")
  valid_592132 = validateParameter(valid_592132, JString, required = false,
                                 default = nil)
  if valid_592132 != nil:
    section.add "quotaUser", valid_592132
  var valid_592133 = query.getOrDefault("alt")
  valid_592133 = validateParameter(valid_592133, JString, required = false,
                                 default = newJString("json"))
  if valid_592133 != nil:
    section.add "alt", valid_592133
  var valid_592134 = query.getOrDefault("oauth_token")
  valid_592134 = validateParameter(valid_592134, JString, required = false,
                                 default = nil)
  if valid_592134 != nil:
    section.add "oauth_token", valid_592134
  var valid_592135 = query.getOrDefault("userIp")
  valid_592135 = validateParameter(valid_592135, JString, required = false,
                                 default = nil)
  if valid_592135 != nil:
    section.add "userIp", valid_592135
  var valid_592136 = query.getOrDefault("key")
  valid_592136 = validateParameter(valid_592136, JString, required = false,
                                 default = nil)
  if valid_592136 != nil:
    section.add "key", valid_592136
  var valid_592137 = query.getOrDefault("prettyPrint")
  valid_592137 = validateParameter(valid_592137, JBool, required = false,
                                 default = newJBool(true))
  if valid_592137 != nil:
    section.add "prettyPrint", valid_592137
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592138: Call_DfareportingReportsFilesGet_592125; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a report file. This method supports media download.
  ## 
  let valid = call_592138.validator(path, query, header, formData, body)
  let scheme = call_592138.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592138.url(scheme.get, call_592138.host, call_592138.base,
                         call_592138.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592138, url, valid)

proc call*(call_592139: Call_DfareportingReportsFilesGet_592125; profileId: string;
          fileId: string; reportId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsFilesGet
  ## Retrieves a report file. This method supports media download.
  ##   profileId: string (required)
  ##            : The DFA profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fileId: string (required)
  ##         : The ID of the report file.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592140 = newJObject()
  var query_592141 = newJObject()
  add(path_592140, "profileId", newJString(profileId))
  add(query_592141, "fields", newJString(fields))
  add(query_592141, "quotaUser", newJString(quotaUser))
  add(path_592140, "fileId", newJString(fileId))
  add(query_592141, "alt", newJString(alt))
  add(query_592141, "oauth_token", newJString(oauthToken))
  add(query_592141, "userIp", newJString(userIp))
  add(query_592141, "key", newJString(key))
  add(path_592140, "reportId", newJString(reportId))
  add(query_592141, "prettyPrint", newJBool(prettyPrint))
  result = call_592139.call(path_592140, query_592141, nil, nil, nil)

var dfareportingReportsFilesGet* = Call_DfareportingReportsFilesGet_592125(
    name: "dfareportingReportsFilesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}/files/{fileId}",
    validator: validate_DfareportingReportsFilesGet_592126,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsFilesGet_592127,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsRun_592142 = ref object of OpenApiRestCall_588466
proc url_DfareportingReportsRun_592144(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId"),
               (kind: ConstantSegment, value: "/run")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsRun_592143(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Runs a report.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592145 = path.getOrDefault("profileId")
  valid_592145 = validateParameter(valid_592145, JString, required = true,
                                 default = nil)
  if valid_592145 != nil:
    section.add "profileId", valid_592145
  var valid_592146 = path.getOrDefault("reportId")
  valid_592146 = validateParameter(valid_592146, JString, required = true,
                                 default = nil)
  if valid_592146 != nil:
    section.add "reportId", valid_592146
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   synchronous: JBool
  ##              : If set and true, tries to run the report synchronously.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592147 = query.getOrDefault("fields")
  valid_592147 = validateParameter(valid_592147, JString, required = false,
                                 default = nil)
  if valid_592147 != nil:
    section.add "fields", valid_592147
  var valid_592148 = query.getOrDefault("quotaUser")
  valid_592148 = validateParameter(valid_592148, JString, required = false,
                                 default = nil)
  if valid_592148 != nil:
    section.add "quotaUser", valid_592148
  var valid_592149 = query.getOrDefault("alt")
  valid_592149 = validateParameter(valid_592149, JString, required = false,
                                 default = newJString("json"))
  if valid_592149 != nil:
    section.add "alt", valid_592149
  var valid_592150 = query.getOrDefault("oauth_token")
  valid_592150 = validateParameter(valid_592150, JString, required = false,
                                 default = nil)
  if valid_592150 != nil:
    section.add "oauth_token", valid_592150
  var valid_592151 = query.getOrDefault("userIp")
  valid_592151 = validateParameter(valid_592151, JString, required = false,
                                 default = nil)
  if valid_592151 != nil:
    section.add "userIp", valid_592151
  var valid_592152 = query.getOrDefault("synchronous")
  valid_592152 = validateParameter(valid_592152, JBool, required = false,
                                 default = newJBool(false))
  if valid_592152 != nil:
    section.add "synchronous", valid_592152
  var valid_592153 = query.getOrDefault("key")
  valid_592153 = validateParameter(valid_592153, JString, required = false,
                                 default = nil)
  if valid_592153 != nil:
    section.add "key", valid_592153
  var valid_592154 = query.getOrDefault("prettyPrint")
  valid_592154 = validateParameter(valid_592154, JBool, required = false,
                                 default = newJBool(true))
  if valid_592154 != nil:
    section.add "prettyPrint", valid_592154
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592155: Call_DfareportingReportsRun_592142; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Runs a report.
  ## 
  let valid = call_592155.validator(path, query, header, formData, body)
  let scheme = call_592155.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592155.url(scheme.get, call_592155.host, call_592155.base,
                         call_592155.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592155, url, valid)

proc call*(call_592156: Call_DfareportingReportsRun_592142; profileId: string;
          reportId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          synchronous: bool = false; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsRun
  ## Runs a report.
  ##   profileId: string (required)
  ##            : The DFA profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   synchronous: bool
  ##              : If set and true, tries to run the report synchronously.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592157 = newJObject()
  var query_592158 = newJObject()
  add(path_592157, "profileId", newJString(profileId))
  add(query_592158, "fields", newJString(fields))
  add(query_592158, "quotaUser", newJString(quotaUser))
  add(query_592158, "alt", newJString(alt))
  add(query_592158, "oauth_token", newJString(oauthToken))
  add(query_592158, "userIp", newJString(userIp))
  add(query_592158, "synchronous", newJBool(synchronous))
  add(query_592158, "key", newJString(key))
  add(path_592157, "reportId", newJString(reportId))
  add(query_592158, "prettyPrint", newJBool(prettyPrint))
  result = call_592156.call(path_592157, query_592158, nil, nil, nil)

var dfareportingReportsRun* = Call_DfareportingReportsRun_592142(
    name: "dfareportingReportsRun", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}/run",
    validator: validate_DfareportingReportsRun_592143, base: "/dfareporting/v3.2",
    url: url_DfareportingReportsRun_592144, schemes: {Scheme.Https})
type
  Call_DfareportingSitesUpdate_592189 = ref object of OpenApiRestCall_588466
proc url_DfareportingSitesUpdate_592191(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesUpdate_592190(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592192 = path.getOrDefault("profileId")
  valid_592192 = validateParameter(valid_592192, JString, required = true,
                                 default = nil)
  if valid_592192 != nil:
    section.add "profileId", valid_592192
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592193 = query.getOrDefault("fields")
  valid_592193 = validateParameter(valid_592193, JString, required = false,
                                 default = nil)
  if valid_592193 != nil:
    section.add "fields", valid_592193
  var valid_592194 = query.getOrDefault("quotaUser")
  valid_592194 = validateParameter(valid_592194, JString, required = false,
                                 default = nil)
  if valid_592194 != nil:
    section.add "quotaUser", valid_592194
  var valid_592195 = query.getOrDefault("alt")
  valid_592195 = validateParameter(valid_592195, JString, required = false,
                                 default = newJString("json"))
  if valid_592195 != nil:
    section.add "alt", valid_592195
  var valid_592196 = query.getOrDefault("oauth_token")
  valid_592196 = validateParameter(valid_592196, JString, required = false,
                                 default = nil)
  if valid_592196 != nil:
    section.add "oauth_token", valid_592196
  var valid_592197 = query.getOrDefault("userIp")
  valid_592197 = validateParameter(valid_592197, JString, required = false,
                                 default = nil)
  if valid_592197 != nil:
    section.add "userIp", valid_592197
  var valid_592198 = query.getOrDefault("key")
  valid_592198 = validateParameter(valid_592198, JString, required = false,
                                 default = nil)
  if valid_592198 != nil:
    section.add "key", valid_592198
  var valid_592199 = query.getOrDefault("prettyPrint")
  valid_592199 = validateParameter(valid_592199, JBool, required = false,
                                 default = newJBool(true))
  if valid_592199 != nil:
    section.add "prettyPrint", valid_592199
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_592201: Call_DfareportingSitesUpdate_592189; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing site.
  ## 
  let valid = call_592201.validator(path, query, header, formData, body)
  let scheme = call_592201.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592201.url(scheme.get, call_592201.host, call_592201.base,
                         call_592201.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592201, url, valid)

proc call*(call_592202: Call_DfareportingSitesUpdate_592189; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSitesUpdate
  ## Updates an existing site.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592203 = newJObject()
  var query_592204 = newJObject()
  var body_592205 = newJObject()
  add(path_592203, "profileId", newJString(profileId))
  add(query_592204, "fields", newJString(fields))
  add(query_592204, "quotaUser", newJString(quotaUser))
  add(query_592204, "alt", newJString(alt))
  add(query_592204, "oauth_token", newJString(oauthToken))
  add(query_592204, "userIp", newJString(userIp))
  add(query_592204, "key", newJString(key))
  if body != nil:
    body_592205 = body
  add(query_592204, "prettyPrint", newJBool(prettyPrint))
  result = call_592202.call(path_592203, query_592204, nil, nil, body_592205)

var dfareportingSitesUpdate* = Call_DfareportingSitesUpdate_592189(
    name: "dfareportingSitesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites",
    validator: validate_DfareportingSitesUpdate_592190,
    base: "/dfareporting/v3.2", url: url_DfareportingSitesUpdate_592191,
    schemes: {Scheme.Https})
type
  Call_DfareportingSitesInsert_592206 = ref object of OpenApiRestCall_588466
proc url_DfareportingSitesInsert_592208(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesInsert_592207(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592209 = path.getOrDefault("profileId")
  valid_592209 = validateParameter(valid_592209, JString, required = true,
                                 default = nil)
  if valid_592209 != nil:
    section.add "profileId", valid_592209
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592210 = query.getOrDefault("fields")
  valid_592210 = validateParameter(valid_592210, JString, required = false,
                                 default = nil)
  if valid_592210 != nil:
    section.add "fields", valid_592210
  var valid_592211 = query.getOrDefault("quotaUser")
  valid_592211 = validateParameter(valid_592211, JString, required = false,
                                 default = nil)
  if valid_592211 != nil:
    section.add "quotaUser", valid_592211
  var valid_592212 = query.getOrDefault("alt")
  valid_592212 = validateParameter(valid_592212, JString, required = false,
                                 default = newJString("json"))
  if valid_592212 != nil:
    section.add "alt", valid_592212
  var valid_592213 = query.getOrDefault("oauth_token")
  valid_592213 = validateParameter(valid_592213, JString, required = false,
                                 default = nil)
  if valid_592213 != nil:
    section.add "oauth_token", valid_592213
  var valid_592214 = query.getOrDefault("userIp")
  valid_592214 = validateParameter(valid_592214, JString, required = false,
                                 default = nil)
  if valid_592214 != nil:
    section.add "userIp", valid_592214
  var valid_592215 = query.getOrDefault("key")
  valid_592215 = validateParameter(valid_592215, JString, required = false,
                                 default = nil)
  if valid_592215 != nil:
    section.add "key", valid_592215
  var valid_592216 = query.getOrDefault("prettyPrint")
  valid_592216 = validateParameter(valid_592216, JBool, required = false,
                                 default = newJBool(true))
  if valid_592216 != nil:
    section.add "prettyPrint", valid_592216
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_592218: Call_DfareportingSitesInsert_592206; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new site.
  ## 
  let valid = call_592218.validator(path, query, header, formData, body)
  let scheme = call_592218.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592218.url(scheme.get, call_592218.host, call_592218.base,
                         call_592218.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592218, url, valid)

proc call*(call_592219: Call_DfareportingSitesInsert_592206; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSitesInsert
  ## Inserts a new site.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592220 = newJObject()
  var query_592221 = newJObject()
  var body_592222 = newJObject()
  add(path_592220, "profileId", newJString(profileId))
  add(query_592221, "fields", newJString(fields))
  add(query_592221, "quotaUser", newJString(quotaUser))
  add(query_592221, "alt", newJString(alt))
  add(query_592221, "oauth_token", newJString(oauthToken))
  add(query_592221, "userIp", newJString(userIp))
  add(query_592221, "key", newJString(key))
  if body != nil:
    body_592222 = body
  add(query_592221, "prettyPrint", newJBool(prettyPrint))
  result = call_592219.call(path_592220, query_592221, nil, nil, body_592222)

var dfareportingSitesInsert* = Call_DfareportingSitesInsert_592206(
    name: "dfareportingSitesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites",
    validator: validate_DfareportingSitesInsert_592207,
    base: "/dfareporting/v3.2", url: url_DfareportingSitesInsert_592208,
    schemes: {Scheme.Https})
type
  Call_DfareportingSitesList_592159 = ref object of OpenApiRestCall_588466
proc url_DfareportingSitesList_592161(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesList_592160(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of sites, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592162 = path.getOrDefault("profileId")
  valid_592162 = validateParameter(valid_592162, JString, required = true,
                                 default = nil)
  if valid_592162 != nil:
    section.add "profileId", valid_592162
  result.add "path", section
  ## parameters in `query` object:
  ##   subaccountId: JString
  ##               : Select only sites with this subaccount ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name, ID or keyName. Wildcards (*) are allowed. For example, "site*2015" will return objects with names like "site June 2015", "site April 2015", or simply "site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "site" will match objects with name "my site", "site 2015", or simply "site".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   campaignIds: JArray
  ##              : Select only sites with these campaign IDs.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only sites with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   acceptsInterstitialPlacements: JBool
  ##                                : This search filter is no longer supported and will have no effect on the results returned.
  ##   acceptsInStreamVideoPlacements: JBool
  ##                                 : This search filter is no longer supported and will have no effect on the results returned.
  ##   adWordsSite: JBool
  ##              : Select only AdWords sites.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   approved: JBool
  ##           : Select only approved sites.
  ##   unmappedSite: JBool
  ##               : Select only sites that have not been mapped to a directory site.
  ##   acceptsPublisherPaidPlacements: JBool
  ##                                 : Select only sites that accept publisher paid placements.
  ##   directorySiteIds: JArray
  ##                   : Select only sites with these directory site IDs.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592163 = query.getOrDefault("subaccountId")
  valid_592163 = validateParameter(valid_592163, JString, required = false,
                                 default = nil)
  if valid_592163 != nil:
    section.add "subaccountId", valid_592163
  var valid_592164 = query.getOrDefault("fields")
  valid_592164 = validateParameter(valid_592164, JString, required = false,
                                 default = nil)
  if valid_592164 != nil:
    section.add "fields", valid_592164
  var valid_592165 = query.getOrDefault("pageToken")
  valid_592165 = validateParameter(valid_592165, JString, required = false,
                                 default = nil)
  if valid_592165 != nil:
    section.add "pageToken", valid_592165
  var valid_592166 = query.getOrDefault("quotaUser")
  valid_592166 = validateParameter(valid_592166, JString, required = false,
                                 default = nil)
  if valid_592166 != nil:
    section.add "quotaUser", valid_592166
  var valid_592167 = query.getOrDefault("sortField")
  valid_592167 = validateParameter(valid_592167, JString, required = false,
                                 default = newJString("ID"))
  if valid_592167 != nil:
    section.add "sortField", valid_592167
  var valid_592168 = query.getOrDefault("alt")
  valid_592168 = validateParameter(valid_592168, JString, required = false,
                                 default = newJString("json"))
  if valid_592168 != nil:
    section.add "alt", valid_592168
  var valid_592169 = query.getOrDefault("searchString")
  valid_592169 = validateParameter(valid_592169, JString, required = false,
                                 default = nil)
  if valid_592169 != nil:
    section.add "searchString", valid_592169
  var valid_592170 = query.getOrDefault("oauth_token")
  valid_592170 = validateParameter(valid_592170, JString, required = false,
                                 default = nil)
  if valid_592170 != nil:
    section.add "oauth_token", valid_592170
  var valid_592171 = query.getOrDefault("campaignIds")
  valid_592171 = validateParameter(valid_592171, JArray, required = false,
                                 default = nil)
  if valid_592171 != nil:
    section.add "campaignIds", valid_592171
  var valid_592172 = query.getOrDefault("userIp")
  valid_592172 = validateParameter(valid_592172, JString, required = false,
                                 default = nil)
  if valid_592172 != nil:
    section.add "userIp", valid_592172
  var valid_592173 = query.getOrDefault("maxResults")
  valid_592173 = validateParameter(valid_592173, JInt, required = false,
                                 default = newJInt(1000))
  if valid_592173 != nil:
    section.add "maxResults", valid_592173
  var valid_592174 = query.getOrDefault("ids")
  valid_592174 = validateParameter(valid_592174, JArray, required = false,
                                 default = nil)
  if valid_592174 != nil:
    section.add "ids", valid_592174
  var valid_592175 = query.getOrDefault("key")
  valid_592175 = validateParameter(valid_592175, JString, required = false,
                                 default = nil)
  if valid_592175 != nil:
    section.add "key", valid_592175
  var valid_592176 = query.getOrDefault("acceptsInterstitialPlacements")
  valid_592176 = validateParameter(valid_592176, JBool, required = false, default = nil)
  if valid_592176 != nil:
    section.add "acceptsInterstitialPlacements", valid_592176
  var valid_592177 = query.getOrDefault("acceptsInStreamVideoPlacements")
  valid_592177 = validateParameter(valid_592177, JBool, required = false, default = nil)
  if valid_592177 != nil:
    section.add "acceptsInStreamVideoPlacements", valid_592177
  var valid_592178 = query.getOrDefault("adWordsSite")
  valid_592178 = validateParameter(valid_592178, JBool, required = false, default = nil)
  if valid_592178 != nil:
    section.add "adWordsSite", valid_592178
  var valid_592179 = query.getOrDefault("sortOrder")
  valid_592179 = validateParameter(valid_592179, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_592179 != nil:
    section.add "sortOrder", valid_592179
  var valid_592180 = query.getOrDefault("approved")
  valid_592180 = validateParameter(valid_592180, JBool, required = false, default = nil)
  if valid_592180 != nil:
    section.add "approved", valid_592180
  var valid_592181 = query.getOrDefault("unmappedSite")
  valid_592181 = validateParameter(valid_592181, JBool, required = false, default = nil)
  if valid_592181 != nil:
    section.add "unmappedSite", valid_592181
  var valid_592182 = query.getOrDefault("acceptsPublisherPaidPlacements")
  valid_592182 = validateParameter(valid_592182, JBool, required = false, default = nil)
  if valid_592182 != nil:
    section.add "acceptsPublisherPaidPlacements", valid_592182
  var valid_592183 = query.getOrDefault("directorySiteIds")
  valid_592183 = validateParameter(valid_592183, JArray, required = false,
                                 default = nil)
  if valid_592183 != nil:
    section.add "directorySiteIds", valid_592183
  var valid_592184 = query.getOrDefault("prettyPrint")
  valid_592184 = validateParameter(valid_592184, JBool, required = false,
                                 default = newJBool(true))
  if valid_592184 != nil:
    section.add "prettyPrint", valid_592184
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592185: Call_DfareportingSitesList_592159; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of sites, possibly filtered. This method supports paging.
  ## 
  let valid = call_592185.validator(path, query, header, formData, body)
  let scheme = call_592185.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592185.url(scheme.get, call_592185.host, call_592185.base,
                         call_592185.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592185, url, valid)

proc call*(call_592186: Call_DfareportingSitesList_592159; profileId: string;
          subaccountId: string = ""; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = "";
          campaignIds: JsonNode = nil; userIp: string = ""; maxResults: int = 1000;
          ids: JsonNode = nil; key: string = "";
          acceptsInterstitialPlacements: bool = false;
          acceptsInStreamVideoPlacements: bool = false; adWordsSite: bool = false;
          sortOrder: string = "ASCENDING"; approved: bool = false;
          unmappedSite: bool = false; acceptsPublisherPaidPlacements: bool = false;
          directorySiteIds: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSitesList
  ## Retrieves a list of sites, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   subaccountId: string
  ##               : Select only sites with this subaccount ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name, ID or keyName. Wildcards (*) are allowed. For example, "site*2015" will return objects with names like "site June 2015", "site April 2015", or simply "site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "site" will match objects with name "my site", "site 2015", or simply "site".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   campaignIds: JArray
  ##              : Select only sites with these campaign IDs.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only sites with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   acceptsInterstitialPlacements: bool
  ##                                : This search filter is no longer supported and will have no effect on the results returned.
  ##   acceptsInStreamVideoPlacements: bool
  ##                                 : This search filter is no longer supported and will have no effect on the results returned.
  ##   adWordsSite: bool
  ##              : Select only AdWords sites.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   approved: bool
  ##           : Select only approved sites.
  ##   unmappedSite: bool
  ##               : Select only sites that have not been mapped to a directory site.
  ##   acceptsPublisherPaidPlacements: bool
  ##                                 : Select only sites that accept publisher paid placements.
  ##   directorySiteIds: JArray
  ##                   : Select only sites with these directory site IDs.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592187 = newJObject()
  var query_592188 = newJObject()
  add(path_592187, "profileId", newJString(profileId))
  add(query_592188, "subaccountId", newJString(subaccountId))
  add(query_592188, "fields", newJString(fields))
  add(query_592188, "pageToken", newJString(pageToken))
  add(query_592188, "quotaUser", newJString(quotaUser))
  add(query_592188, "sortField", newJString(sortField))
  add(query_592188, "alt", newJString(alt))
  add(query_592188, "searchString", newJString(searchString))
  add(query_592188, "oauth_token", newJString(oauthToken))
  if campaignIds != nil:
    query_592188.add "campaignIds", campaignIds
  add(query_592188, "userIp", newJString(userIp))
  add(query_592188, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_592188.add "ids", ids
  add(query_592188, "key", newJString(key))
  add(query_592188, "acceptsInterstitialPlacements",
      newJBool(acceptsInterstitialPlacements))
  add(query_592188, "acceptsInStreamVideoPlacements",
      newJBool(acceptsInStreamVideoPlacements))
  add(query_592188, "adWordsSite", newJBool(adWordsSite))
  add(query_592188, "sortOrder", newJString(sortOrder))
  add(query_592188, "approved", newJBool(approved))
  add(query_592188, "unmappedSite", newJBool(unmappedSite))
  add(query_592188, "acceptsPublisherPaidPlacements",
      newJBool(acceptsPublisherPaidPlacements))
  if directorySiteIds != nil:
    query_592188.add "directorySiteIds", directorySiteIds
  add(query_592188, "prettyPrint", newJBool(prettyPrint))
  result = call_592186.call(path_592187, query_592188, nil, nil, nil)

var dfareportingSitesList* = Call_DfareportingSitesList_592159(
    name: "dfareportingSitesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites",
    validator: validate_DfareportingSitesList_592160, base: "/dfareporting/v3.2",
    url: url_DfareportingSitesList_592161, schemes: {Scheme.Https})
type
  Call_DfareportingSitesPatch_592223 = ref object of OpenApiRestCall_588466
proc url_DfareportingSitesPatch_592225(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesPatch_592224(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing site. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592226 = path.getOrDefault("profileId")
  valid_592226 = validateParameter(valid_592226, JString, required = true,
                                 default = nil)
  if valid_592226 != nil:
    section.add "profileId", valid_592226
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Site ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592227 = query.getOrDefault("fields")
  valid_592227 = validateParameter(valid_592227, JString, required = false,
                                 default = nil)
  if valid_592227 != nil:
    section.add "fields", valid_592227
  var valid_592228 = query.getOrDefault("quotaUser")
  valid_592228 = validateParameter(valid_592228, JString, required = false,
                                 default = nil)
  if valid_592228 != nil:
    section.add "quotaUser", valid_592228
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_592229 = query.getOrDefault("id")
  valid_592229 = validateParameter(valid_592229, JString, required = true,
                                 default = nil)
  if valid_592229 != nil:
    section.add "id", valid_592229
  var valid_592230 = query.getOrDefault("alt")
  valid_592230 = validateParameter(valid_592230, JString, required = false,
                                 default = newJString("json"))
  if valid_592230 != nil:
    section.add "alt", valid_592230
  var valid_592231 = query.getOrDefault("oauth_token")
  valid_592231 = validateParameter(valid_592231, JString, required = false,
                                 default = nil)
  if valid_592231 != nil:
    section.add "oauth_token", valid_592231
  var valid_592232 = query.getOrDefault("userIp")
  valid_592232 = validateParameter(valid_592232, JString, required = false,
                                 default = nil)
  if valid_592232 != nil:
    section.add "userIp", valid_592232
  var valid_592233 = query.getOrDefault("key")
  valid_592233 = validateParameter(valid_592233, JString, required = false,
                                 default = nil)
  if valid_592233 != nil:
    section.add "key", valid_592233
  var valid_592234 = query.getOrDefault("prettyPrint")
  valid_592234 = validateParameter(valid_592234, JBool, required = false,
                                 default = newJBool(true))
  if valid_592234 != nil:
    section.add "prettyPrint", valid_592234
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_592236: Call_DfareportingSitesPatch_592223; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing site. This method supports patch semantics.
  ## 
  let valid = call_592236.validator(path, query, header, formData, body)
  let scheme = call_592236.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592236.url(scheme.get, call_592236.host, call_592236.base,
                         call_592236.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592236, url, valid)

proc call*(call_592237: Call_DfareportingSitesPatch_592223; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSitesPatch
  ## Updates an existing site. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Site ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592238 = newJObject()
  var query_592239 = newJObject()
  var body_592240 = newJObject()
  add(path_592238, "profileId", newJString(profileId))
  add(query_592239, "fields", newJString(fields))
  add(query_592239, "quotaUser", newJString(quotaUser))
  add(query_592239, "id", newJString(id))
  add(query_592239, "alt", newJString(alt))
  add(query_592239, "oauth_token", newJString(oauthToken))
  add(query_592239, "userIp", newJString(userIp))
  add(query_592239, "key", newJString(key))
  if body != nil:
    body_592240 = body
  add(query_592239, "prettyPrint", newJBool(prettyPrint))
  result = call_592237.call(path_592238, query_592239, nil, nil, body_592240)

var dfareportingSitesPatch* = Call_DfareportingSitesPatch_592223(
    name: "dfareportingSitesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites",
    validator: validate_DfareportingSitesPatch_592224, base: "/dfareporting/v3.2",
    url: url_DfareportingSitesPatch_592225, schemes: {Scheme.Https})
type
  Call_DfareportingSitesGet_592241 = ref object of OpenApiRestCall_588466
proc url_DfareportingSitesGet_592243(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesGet_592242(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one site by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Site ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592244 = path.getOrDefault("profileId")
  valid_592244 = validateParameter(valid_592244, JString, required = true,
                                 default = nil)
  if valid_592244 != nil:
    section.add "profileId", valid_592244
  var valid_592245 = path.getOrDefault("id")
  valid_592245 = validateParameter(valid_592245, JString, required = true,
                                 default = nil)
  if valid_592245 != nil:
    section.add "id", valid_592245
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592246 = query.getOrDefault("fields")
  valid_592246 = validateParameter(valid_592246, JString, required = false,
                                 default = nil)
  if valid_592246 != nil:
    section.add "fields", valid_592246
  var valid_592247 = query.getOrDefault("quotaUser")
  valid_592247 = validateParameter(valid_592247, JString, required = false,
                                 default = nil)
  if valid_592247 != nil:
    section.add "quotaUser", valid_592247
  var valid_592248 = query.getOrDefault("alt")
  valid_592248 = validateParameter(valid_592248, JString, required = false,
                                 default = newJString("json"))
  if valid_592248 != nil:
    section.add "alt", valid_592248
  var valid_592249 = query.getOrDefault("oauth_token")
  valid_592249 = validateParameter(valid_592249, JString, required = false,
                                 default = nil)
  if valid_592249 != nil:
    section.add "oauth_token", valid_592249
  var valid_592250 = query.getOrDefault("userIp")
  valid_592250 = validateParameter(valid_592250, JString, required = false,
                                 default = nil)
  if valid_592250 != nil:
    section.add "userIp", valid_592250
  var valid_592251 = query.getOrDefault("key")
  valid_592251 = validateParameter(valid_592251, JString, required = false,
                                 default = nil)
  if valid_592251 != nil:
    section.add "key", valid_592251
  var valid_592252 = query.getOrDefault("prettyPrint")
  valid_592252 = validateParameter(valid_592252, JBool, required = false,
                                 default = newJBool(true))
  if valid_592252 != nil:
    section.add "prettyPrint", valid_592252
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592253: Call_DfareportingSitesGet_592241; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one site by ID.
  ## 
  let valid = call_592253.validator(path, query, header, formData, body)
  let scheme = call_592253.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592253.url(scheme.get, call_592253.host, call_592253.base,
                         call_592253.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592253, url, valid)

proc call*(call_592254: Call_DfareportingSitesGet_592241; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingSitesGet
  ## Gets one site by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Site ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592255 = newJObject()
  var query_592256 = newJObject()
  add(path_592255, "profileId", newJString(profileId))
  add(query_592256, "fields", newJString(fields))
  add(query_592256, "quotaUser", newJString(quotaUser))
  add(query_592256, "alt", newJString(alt))
  add(query_592256, "oauth_token", newJString(oauthToken))
  add(query_592256, "userIp", newJString(userIp))
  add(path_592255, "id", newJString(id))
  add(query_592256, "key", newJString(key))
  add(query_592256, "prettyPrint", newJBool(prettyPrint))
  result = call_592254.call(path_592255, query_592256, nil, nil, nil)

var dfareportingSitesGet* = Call_DfareportingSitesGet_592241(
    name: "dfareportingSitesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites/{id}",
    validator: validate_DfareportingSitesGet_592242, base: "/dfareporting/v3.2",
    url: url_DfareportingSitesGet_592243, schemes: {Scheme.Https})
type
  Call_DfareportingSizesInsert_592276 = ref object of OpenApiRestCall_588466
proc url_DfareportingSizesInsert_592278(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sizes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSizesInsert_592277(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new size.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592279 = path.getOrDefault("profileId")
  valid_592279 = validateParameter(valid_592279, JString, required = true,
                                 default = nil)
  if valid_592279 != nil:
    section.add "profileId", valid_592279
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592280 = query.getOrDefault("fields")
  valid_592280 = validateParameter(valid_592280, JString, required = false,
                                 default = nil)
  if valid_592280 != nil:
    section.add "fields", valid_592280
  var valid_592281 = query.getOrDefault("quotaUser")
  valid_592281 = validateParameter(valid_592281, JString, required = false,
                                 default = nil)
  if valid_592281 != nil:
    section.add "quotaUser", valid_592281
  var valid_592282 = query.getOrDefault("alt")
  valid_592282 = validateParameter(valid_592282, JString, required = false,
                                 default = newJString("json"))
  if valid_592282 != nil:
    section.add "alt", valid_592282
  var valid_592283 = query.getOrDefault("oauth_token")
  valid_592283 = validateParameter(valid_592283, JString, required = false,
                                 default = nil)
  if valid_592283 != nil:
    section.add "oauth_token", valid_592283
  var valid_592284 = query.getOrDefault("userIp")
  valid_592284 = validateParameter(valid_592284, JString, required = false,
                                 default = nil)
  if valid_592284 != nil:
    section.add "userIp", valid_592284
  var valid_592285 = query.getOrDefault("key")
  valid_592285 = validateParameter(valid_592285, JString, required = false,
                                 default = nil)
  if valid_592285 != nil:
    section.add "key", valid_592285
  var valid_592286 = query.getOrDefault("prettyPrint")
  valid_592286 = validateParameter(valid_592286, JBool, required = false,
                                 default = newJBool(true))
  if valid_592286 != nil:
    section.add "prettyPrint", valid_592286
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_592288: Call_DfareportingSizesInsert_592276; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new size.
  ## 
  let valid = call_592288.validator(path, query, header, formData, body)
  let scheme = call_592288.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592288.url(scheme.get, call_592288.host, call_592288.base,
                         call_592288.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592288, url, valid)

proc call*(call_592289: Call_DfareportingSizesInsert_592276; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSizesInsert
  ## Inserts a new size.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592290 = newJObject()
  var query_592291 = newJObject()
  var body_592292 = newJObject()
  add(path_592290, "profileId", newJString(profileId))
  add(query_592291, "fields", newJString(fields))
  add(query_592291, "quotaUser", newJString(quotaUser))
  add(query_592291, "alt", newJString(alt))
  add(query_592291, "oauth_token", newJString(oauthToken))
  add(query_592291, "userIp", newJString(userIp))
  add(query_592291, "key", newJString(key))
  if body != nil:
    body_592292 = body
  add(query_592291, "prettyPrint", newJBool(prettyPrint))
  result = call_592289.call(path_592290, query_592291, nil, nil, body_592292)

var dfareportingSizesInsert* = Call_DfareportingSizesInsert_592276(
    name: "dfareportingSizesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sizes",
    validator: validate_DfareportingSizesInsert_592277,
    base: "/dfareporting/v3.2", url: url_DfareportingSizesInsert_592278,
    schemes: {Scheme.Https})
type
  Call_DfareportingSizesList_592257 = ref object of OpenApiRestCall_588466
proc url_DfareportingSizesList_592259(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sizes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSizesList_592258(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of sizes, possibly filtered. Retrieved sizes are globally unique and may include values not currently in use by your account. Due to this, the list of sizes returned by this method may differ from the list seen in the Trafficking UI.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592260 = path.getOrDefault("profileId")
  valid_592260 = validateParameter(valid_592260, JString, required = true,
                                 default = nil)
  if valid_592260 != nil:
    section.add "profileId", valid_592260
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   height: JInt
  ##         : Select only sizes with this height.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   ids: JArray
  ##      : Select only sizes with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   iabStandard: JBool
  ##              : Select only IAB standard sizes.
  ##   width: JInt
  ##        : Select only sizes with this width.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592261 = query.getOrDefault("fields")
  valid_592261 = validateParameter(valid_592261, JString, required = false,
                                 default = nil)
  if valid_592261 != nil:
    section.add "fields", valid_592261
  var valid_592262 = query.getOrDefault("quotaUser")
  valid_592262 = validateParameter(valid_592262, JString, required = false,
                                 default = nil)
  if valid_592262 != nil:
    section.add "quotaUser", valid_592262
  var valid_592263 = query.getOrDefault("alt")
  valid_592263 = validateParameter(valid_592263, JString, required = false,
                                 default = newJString("json"))
  if valid_592263 != nil:
    section.add "alt", valid_592263
  var valid_592264 = query.getOrDefault("oauth_token")
  valid_592264 = validateParameter(valid_592264, JString, required = false,
                                 default = nil)
  if valid_592264 != nil:
    section.add "oauth_token", valid_592264
  var valid_592265 = query.getOrDefault("height")
  valid_592265 = validateParameter(valid_592265, JInt, required = false, default = nil)
  if valid_592265 != nil:
    section.add "height", valid_592265
  var valid_592266 = query.getOrDefault("userIp")
  valid_592266 = validateParameter(valid_592266, JString, required = false,
                                 default = nil)
  if valid_592266 != nil:
    section.add "userIp", valid_592266
  var valid_592267 = query.getOrDefault("ids")
  valid_592267 = validateParameter(valid_592267, JArray, required = false,
                                 default = nil)
  if valid_592267 != nil:
    section.add "ids", valid_592267
  var valid_592268 = query.getOrDefault("key")
  valid_592268 = validateParameter(valid_592268, JString, required = false,
                                 default = nil)
  if valid_592268 != nil:
    section.add "key", valid_592268
  var valid_592269 = query.getOrDefault("iabStandard")
  valid_592269 = validateParameter(valid_592269, JBool, required = false, default = nil)
  if valid_592269 != nil:
    section.add "iabStandard", valid_592269
  var valid_592270 = query.getOrDefault("width")
  valid_592270 = validateParameter(valid_592270, JInt, required = false, default = nil)
  if valid_592270 != nil:
    section.add "width", valid_592270
  var valid_592271 = query.getOrDefault("prettyPrint")
  valid_592271 = validateParameter(valid_592271, JBool, required = false,
                                 default = newJBool(true))
  if valid_592271 != nil:
    section.add "prettyPrint", valid_592271
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592272: Call_DfareportingSizesList_592257; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of sizes, possibly filtered. Retrieved sizes are globally unique and may include values not currently in use by your account. Due to this, the list of sizes returned by this method may differ from the list seen in the Trafficking UI.
  ## 
  let valid = call_592272.validator(path, query, header, formData, body)
  let scheme = call_592272.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592272.url(scheme.get, call_592272.host, call_592272.base,
                         call_592272.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592272, url, valid)

proc call*(call_592273: Call_DfareportingSizesList_592257; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; height: int = 0; userIp: string = "";
          ids: JsonNode = nil; key: string = ""; iabStandard: bool = false; width: int = 0;
          prettyPrint: bool = true): Recallable =
  ## dfareportingSizesList
  ## Retrieves a list of sizes, possibly filtered. Retrieved sizes are globally unique and may include values not currently in use by your account. Due to this, the list of sizes returned by this method may differ from the list seen in the Trafficking UI.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   height: int
  ##         : Select only sizes with this height.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   ids: JArray
  ##      : Select only sizes with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   iabStandard: bool
  ##              : Select only IAB standard sizes.
  ##   width: int
  ##        : Select only sizes with this width.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592274 = newJObject()
  var query_592275 = newJObject()
  add(path_592274, "profileId", newJString(profileId))
  add(query_592275, "fields", newJString(fields))
  add(query_592275, "quotaUser", newJString(quotaUser))
  add(query_592275, "alt", newJString(alt))
  add(query_592275, "oauth_token", newJString(oauthToken))
  add(query_592275, "height", newJInt(height))
  add(query_592275, "userIp", newJString(userIp))
  if ids != nil:
    query_592275.add "ids", ids
  add(query_592275, "key", newJString(key))
  add(query_592275, "iabStandard", newJBool(iabStandard))
  add(query_592275, "width", newJInt(width))
  add(query_592275, "prettyPrint", newJBool(prettyPrint))
  result = call_592273.call(path_592274, query_592275, nil, nil, nil)

var dfareportingSizesList* = Call_DfareportingSizesList_592257(
    name: "dfareportingSizesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sizes",
    validator: validate_DfareportingSizesList_592258, base: "/dfareporting/v3.2",
    url: url_DfareportingSizesList_592259, schemes: {Scheme.Https})
type
  Call_DfareportingSizesGet_592293 = ref object of OpenApiRestCall_588466
proc url_DfareportingSizesGet_592295(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sizes/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSizesGet_592294(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one size by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Size ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592296 = path.getOrDefault("profileId")
  valid_592296 = validateParameter(valid_592296, JString, required = true,
                                 default = nil)
  if valid_592296 != nil:
    section.add "profileId", valid_592296
  var valid_592297 = path.getOrDefault("id")
  valid_592297 = validateParameter(valid_592297, JString, required = true,
                                 default = nil)
  if valid_592297 != nil:
    section.add "id", valid_592297
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592298 = query.getOrDefault("fields")
  valid_592298 = validateParameter(valid_592298, JString, required = false,
                                 default = nil)
  if valid_592298 != nil:
    section.add "fields", valid_592298
  var valid_592299 = query.getOrDefault("quotaUser")
  valid_592299 = validateParameter(valid_592299, JString, required = false,
                                 default = nil)
  if valid_592299 != nil:
    section.add "quotaUser", valid_592299
  var valid_592300 = query.getOrDefault("alt")
  valid_592300 = validateParameter(valid_592300, JString, required = false,
                                 default = newJString("json"))
  if valid_592300 != nil:
    section.add "alt", valid_592300
  var valid_592301 = query.getOrDefault("oauth_token")
  valid_592301 = validateParameter(valid_592301, JString, required = false,
                                 default = nil)
  if valid_592301 != nil:
    section.add "oauth_token", valid_592301
  var valid_592302 = query.getOrDefault("userIp")
  valid_592302 = validateParameter(valid_592302, JString, required = false,
                                 default = nil)
  if valid_592302 != nil:
    section.add "userIp", valid_592302
  var valid_592303 = query.getOrDefault("key")
  valid_592303 = validateParameter(valid_592303, JString, required = false,
                                 default = nil)
  if valid_592303 != nil:
    section.add "key", valid_592303
  var valid_592304 = query.getOrDefault("prettyPrint")
  valid_592304 = validateParameter(valid_592304, JBool, required = false,
                                 default = newJBool(true))
  if valid_592304 != nil:
    section.add "prettyPrint", valid_592304
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592305: Call_DfareportingSizesGet_592293; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one size by ID.
  ## 
  let valid = call_592305.validator(path, query, header, formData, body)
  let scheme = call_592305.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592305.url(scheme.get, call_592305.host, call_592305.base,
                         call_592305.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592305, url, valid)

proc call*(call_592306: Call_DfareportingSizesGet_592293; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingSizesGet
  ## Gets one size by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Size ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592307 = newJObject()
  var query_592308 = newJObject()
  add(path_592307, "profileId", newJString(profileId))
  add(query_592308, "fields", newJString(fields))
  add(query_592308, "quotaUser", newJString(quotaUser))
  add(query_592308, "alt", newJString(alt))
  add(query_592308, "oauth_token", newJString(oauthToken))
  add(query_592308, "userIp", newJString(userIp))
  add(path_592307, "id", newJString(id))
  add(query_592308, "key", newJString(key))
  add(query_592308, "prettyPrint", newJBool(prettyPrint))
  result = call_592306.call(path_592307, query_592308, nil, nil, nil)

var dfareportingSizesGet* = Call_DfareportingSizesGet_592293(
    name: "dfareportingSizesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sizes/{id}",
    validator: validate_DfareportingSizesGet_592294, base: "/dfareporting/v3.2",
    url: url_DfareportingSizesGet_592295, schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsUpdate_592330 = ref object of OpenApiRestCall_588466
proc url_DfareportingSubaccountsUpdate_592332(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsUpdate_592331(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing subaccount.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592333 = path.getOrDefault("profileId")
  valid_592333 = validateParameter(valid_592333, JString, required = true,
                                 default = nil)
  if valid_592333 != nil:
    section.add "profileId", valid_592333
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592334 = query.getOrDefault("fields")
  valid_592334 = validateParameter(valid_592334, JString, required = false,
                                 default = nil)
  if valid_592334 != nil:
    section.add "fields", valid_592334
  var valid_592335 = query.getOrDefault("quotaUser")
  valid_592335 = validateParameter(valid_592335, JString, required = false,
                                 default = nil)
  if valid_592335 != nil:
    section.add "quotaUser", valid_592335
  var valid_592336 = query.getOrDefault("alt")
  valid_592336 = validateParameter(valid_592336, JString, required = false,
                                 default = newJString("json"))
  if valid_592336 != nil:
    section.add "alt", valid_592336
  var valid_592337 = query.getOrDefault("oauth_token")
  valid_592337 = validateParameter(valid_592337, JString, required = false,
                                 default = nil)
  if valid_592337 != nil:
    section.add "oauth_token", valid_592337
  var valid_592338 = query.getOrDefault("userIp")
  valid_592338 = validateParameter(valid_592338, JString, required = false,
                                 default = nil)
  if valid_592338 != nil:
    section.add "userIp", valid_592338
  var valid_592339 = query.getOrDefault("key")
  valid_592339 = validateParameter(valid_592339, JString, required = false,
                                 default = nil)
  if valid_592339 != nil:
    section.add "key", valid_592339
  var valid_592340 = query.getOrDefault("prettyPrint")
  valid_592340 = validateParameter(valid_592340, JBool, required = false,
                                 default = newJBool(true))
  if valid_592340 != nil:
    section.add "prettyPrint", valid_592340
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_592342: Call_DfareportingSubaccountsUpdate_592330; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing subaccount.
  ## 
  let valid = call_592342.validator(path, query, header, formData, body)
  let scheme = call_592342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592342.url(scheme.get, call_592342.host, call_592342.base,
                         call_592342.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592342, url, valid)

proc call*(call_592343: Call_DfareportingSubaccountsUpdate_592330;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSubaccountsUpdate
  ## Updates an existing subaccount.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592344 = newJObject()
  var query_592345 = newJObject()
  var body_592346 = newJObject()
  add(path_592344, "profileId", newJString(profileId))
  add(query_592345, "fields", newJString(fields))
  add(query_592345, "quotaUser", newJString(quotaUser))
  add(query_592345, "alt", newJString(alt))
  add(query_592345, "oauth_token", newJString(oauthToken))
  add(query_592345, "userIp", newJString(userIp))
  add(query_592345, "key", newJString(key))
  if body != nil:
    body_592346 = body
  add(query_592345, "prettyPrint", newJBool(prettyPrint))
  result = call_592343.call(path_592344, query_592345, nil, nil, body_592346)

var dfareportingSubaccountsUpdate* = Call_DfareportingSubaccountsUpdate_592330(
    name: "dfareportingSubaccountsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/subaccounts",
    validator: validate_DfareportingSubaccountsUpdate_592331,
    base: "/dfareporting/v3.2", url: url_DfareportingSubaccountsUpdate_592332,
    schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsInsert_592347 = ref object of OpenApiRestCall_588466
proc url_DfareportingSubaccountsInsert_592349(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsInsert_592348(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new subaccount.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592350 = path.getOrDefault("profileId")
  valid_592350 = validateParameter(valid_592350, JString, required = true,
                                 default = nil)
  if valid_592350 != nil:
    section.add "profileId", valid_592350
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592351 = query.getOrDefault("fields")
  valid_592351 = validateParameter(valid_592351, JString, required = false,
                                 default = nil)
  if valid_592351 != nil:
    section.add "fields", valid_592351
  var valid_592352 = query.getOrDefault("quotaUser")
  valid_592352 = validateParameter(valid_592352, JString, required = false,
                                 default = nil)
  if valid_592352 != nil:
    section.add "quotaUser", valid_592352
  var valid_592353 = query.getOrDefault("alt")
  valid_592353 = validateParameter(valid_592353, JString, required = false,
                                 default = newJString("json"))
  if valid_592353 != nil:
    section.add "alt", valid_592353
  var valid_592354 = query.getOrDefault("oauth_token")
  valid_592354 = validateParameter(valid_592354, JString, required = false,
                                 default = nil)
  if valid_592354 != nil:
    section.add "oauth_token", valid_592354
  var valid_592355 = query.getOrDefault("userIp")
  valid_592355 = validateParameter(valid_592355, JString, required = false,
                                 default = nil)
  if valid_592355 != nil:
    section.add "userIp", valid_592355
  var valid_592356 = query.getOrDefault("key")
  valid_592356 = validateParameter(valid_592356, JString, required = false,
                                 default = nil)
  if valid_592356 != nil:
    section.add "key", valid_592356
  var valid_592357 = query.getOrDefault("prettyPrint")
  valid_592357 = validateParameter(valid_592357, JBool, required = false,
                                 default = newJBool(true))
  if valid_592357 != nil:
    section.add "prettyPrint", valid_592357
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_592359: Call_DfareportingSubaccountsInsert_592347; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new subaccount.
  ## 
  let valid = call_592359.validator(path, query, header, formData, body)
  let scheme = call_592359.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592359.url(scheme.get, call_592359.host, call_592359.base,
                         call_592359.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592359, url, valid)

proc call*(call_592360: Call_DfareportingSubaccountsInsert_592347;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSubaccountsInsert
  ## Inserts a new subaccount.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592361 = newJObject()
  var query_592362 = newJObject()
  var body_592363 = newJObject()
  add(path_592361, "profileId", newJString(profileId))
  add(query_592362, "fields", newJString(fields))
  add(query_592362, "quotaUser", newJString(quotaUser))
  add(query_592362, "alt", newJString(alt))
  add(query_592362, "oauth_token", newJString(oauthToken))
  add(query_592362, "userIp", newJString(userIp))
  add(query_592362, "key", newJString(key))
  if body != nil:
    body_592363 = body
  add(query_592362, "prettyPrint", newJBool(prettyPrint))
  result = call_592360.call(path_592361, query_592362, nil, nil, body_592363)

var dfareportingSubaccountsInsert* = Call_DfareportingSubaccountsInsert_592347(
    name: "dfareportingSubaccountsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/subaccounts",
    validator: validate_DfareportingSubaccountsInsert_592348,
    base: "/dfareporting/v3.2", url: url_DfareportingSubaccountsInsert_592349,
    schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsList_592309 = ref object of OpenApiRestCall_588466
proc url_DfareportingSubaccountsList_592311(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsList_592310(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of subaccounts, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592312 = path.getOrDefault("profileId")
  valid_592312 = validateParameter(valid_592312, JString, required = true,
                                 default = nil)
  if valid_592312 != nil:
    section.add "profileId", valid_592312
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "subaccount*2015" will return objects with names like "subaccount June 2015", "subaccount April 2015", or simply "subaccount 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "subaccount" will match objects with name "my subaccount", "subaccount 2015", or simply "subaccount".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only subaccounts with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592313 = query.getOrDefault("fields")
  valid_592313 = validateParameter(valid_592313, JString, required = false,
                                 default = nil)
  if valid_592313 != nil:
    section.add "fields", valid_592313
  var valid_592314 = query.getOrDefault("pageToken")
  valid_592314 = validateParameter(valid_592314, JString, required = false,
                                 default = nil)
  if valid_592314 != nil:
    section.add "pageToken", valid_592314
  var valid_592315 = query.getOrDefault("quotaUser")
  valid_592315 = validateParameter(valid_592315, JString, required = false,
                                 default = nil)
  if valid_592315 != nil:
    section.add "quotaUser", valid_592315
  var valid_592316 = query.getOrDefault("sortField")
  valid_592316 = validateParameter(valid_592316, JString, required = false,
                                 default = newJString("ID"))
  if valid_592316 != nil:
    section.add "sortField", valid_592316
  var valid_592317 = query.getOrDefault("alt")
  valid_592317 = validateParameter(valid_592317, JString, required = false,
                                 default = newJString("json"))
  if valid_592317 != nil:
    section.add "alt", valid_592317
  var valid_592318 = query.getOrDefault("searchString")
  valid_592318 = validateParameter(valid_592318, JString, required = false,
                                 default = nil)
  if valid_592318 != nil:
    section.add "searchString", valid_592318
  var valid_592319 = query.getOrDefault("oauth_token")
  valid_592319 = validateParameter(valid_592319, JString, required = false,
                                 default = nil)
  if valid_592319 != nil:
    section.add "oauth_token", valid_592319
  var valid_592320 = query.getOrDefault("userIp")
  valid_592320 = validateParameter(valid_592320, JString, required = false,
                                 default = nil)
  if valid_592320 != nil:
    section.add "userIp", valid_592320
  var valid_592321 = query.getOrDefault("maxResults")
  valid_592321 = validateParameter(valid_592321, JInt, required = false,
                                 default = newJInt(1000))
  if valid_592321 != nil:
    section.add "maxResults", valid_592321
  var valid_592322 = query.getOrDefault("ids")
  valid_592322 = validateParameter(valid_592322, JArray, required = false,
                                 default = nil)
  if valid_592322 != nil:
    section.add "ids", valid_592322
  var valid_592323 = query.getOrDefault("key")
  valid_592323 = validateParameter(valid_592323, JString, required = false,
                                 default = nil)
  if valid_592323 != nil:
    section.add "key", valid_592323
  var valid_592324 = query.getOrDefault("sortOrder")
  valid_592324 = validateParameter(valid_592324, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_592324 != nil:
    section.add "sortOrder", valid_592324
  var valid_592325 = query.getOrDefault("prettyPrint")
  valid_592325 = validateParameter(valid_592325, JBool, required = false,
                                 default = newJBool(true))
  if valid_592325 != nil:
    section.add "prettyPrint", valid_592325
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592326: Call_DfareportingSubaccountsList_592309; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a list of subaccounts, possibly filtered. This method supports paging.
  ## 
  let valid = call_592326.validator(path, query, header, formData, body)
  let scheme = call_592326.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592326.url(scheme.get, call_592326.host, call_592326.base,
                         call_592326.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592326, url, valid)

proc call*(call_592327: Call_DfareportingSubaccountsList_592309; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "ID"; alt: string = "json"; searchString: string = "";
          oauthToken: string = ""; userIp: string = ""; maxResults: int = 1000;
          ids: JsonNode = nil; key: string = ""; sortOrder: string = "ASCENDING";
          prettyPrint: bool = true): Recallable =
  ## dfareportingSubaccountsList
  ## Gets a list of subaccounts, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "subaccount*2015" will return objects with names like "subaccount June 2015", "subaccount April 2015", or simply "subaccount 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "subaccount" will match objects with name "my subaccount", "subaccount 2015", or simply "subaccount".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only subaccounts with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592328 = newJObject()
  var query_592329 = newJObject()
  add(path_592328, "profileId", newJString(profileId))
  add(query_592329, "fields", newJString(fields))
  add(query_592329, "pageToken", newJString(pageToken))
  add(query_592329, "quotaUser", newJString(quotaUser))
  add(query_592329, "sortField", newJString(sortField))
  add(query_592329, "alt", newJString(alt))
  add(query_592329, "searchString", newJString(searchString))
  add(query_592329, "oauth_token", newJString(oauthToken))
  add(query_592329, "userIp", newJString(userIp))
  add(query_592329, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_592329.add "ids", ids
  add(query_592329, "key", newJString(key))
  add(query_592329, "sortOrder", newJString(sortOrder))
  add(query_592329, "prettyPrint", newJBool(prettyPrint))
  result = call_592327.call(path_592328, query_592329, nil, nil, nil)

var dfareportingSubaccountsList* = Call_DfareportingSubaccountsList_592309(
    name: "dfareportingSubaccountsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/subaccounts",
    validator: validate_DfareportingSubaccountsList_592310,
    base: "/dfareporting/v3.2", url: url_DfareportingSubaccountsList_592311,
    schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsPatch_592364 = ref object of OpenApiRestCall_588466
proc url_DfareportingSubaccountsPatch_592366(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsPatch_592365(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing subaccount. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592367 = path.getOrDefault("profileId")
  valid_592367 = validateParameter(valid_592367, JString, required = true,
                                 default = nil)
  if valid_592367 != nil:
    section.add "profileId", valid_592367
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Subaccount ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592368 = query.getOrDefault("fields")
  valid_592368 = validateParameter(valid_592368, JString, required = false,
                                 default = nil)
  if valid_592368 != nil:
    section.add "fields", valid_592368
  var valid_592369 = query.getOrDefault("quotaUser")
  valid_592369 = validateParameter(valid_592369, JString, required = false,
                                 default = nil)
  if valid_592369 != nil:
    section.add "quotaUser", valid_592369
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_592370 = query.getOrDefault("id")
  valid_592370 = validateParameter(valid_592370, JString, required = true,
                                 default = nil)
  if valid_592370 != nil:
    section.add "id", valid_592370
  var valid_592371 = query.getOrDefault("alt")
  valid_592371 = validateParameter(valid_592371, JString, required = false,
                                 default = newJString("json"))
  if valid_592371 != nil:
    section.add "alt", valid_592371
  var valid_592372 = query.getOrDefault("oauth_token")
  valid_592372 = validateParameter(valid_592372, JString, required = false,
                                 default = nil)
  if valid_592372 != nil:
    section.add "oauth_token", valid_592372
  var valid_592373 = query.getOrDefault("userIp")
  valid_592373 = validateParameter(valid_592373, JString, required = false,
                                 default = nil)
  if valid_592373 != nil:
    section.add "userIp", valid_592373
  var valid_592374 = query.getOrDefault("key")
  valid_592374 = validateParameter(valid_592374, JString, required = false,
                                 default = nil)
  if valid_592374 != nil:
    section.add "key", valid_592374
  var valid_592375 = query.getOrDefault("prettyPrint")
  valid_592375 = validateParameter(valid_592375, JBool, required = false,
                                 default = newJBool(true))
  if valid_592375 != nil:
    section.add "prettyPrint", valid_592375
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_592377: Call_DfareportingSubaccountsPatch_592364; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing subaccount. This method supports patch semantics.
  ## 
  let valid = call_592377.validator(path, query, header, formData, body)
  let scheme = call_592377.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592377.url(scheme.get, call_592377.host, call_592377.base,
                         call_592377.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592377, url, valid)

proc call*(call_592378: Call_DfareportingSubaccountsPatch_592364;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSubaccountsPatch
  ## Updates an existing subaccount. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Subaccount ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592379 = newJObject()
  var query_592380 = newJObject()
  var body_592381 = newJObject()
  add(path_592379, "profileId", newJString(profileId))
  add(query_592380, "fields", newJString(fields))
  add(query_592380, "quotaUser", newJString(quotaUser))
  add(query_592380, "id", newJString(id))
  add(query_592380, "alt", newJString(alt))
  add(query_592380, "oauth_token", newJString(oauthToken))
  add(query_592380, "userIp", newJString(userIp))
  add(query_592380, "key", newJString(key))
  if body != nil:
    body_592381 = body
  add(query_592380, "prettyPrint", newJBool(prettyPrint))
  result = call_592378.call(path_592379, query_592380, nil, nil, body_592381)

var dfareportingSubaccountsPatch* = Call_DfareportingSubaccountsPatch_592364(
    name: "dfareportingSubaccountsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/subaccounts",
    validator: validate_DfareportingSubaccountsPatch_592365,
    base: "/dfareporting/v3.2", url: url_DfareportingSubaccountsPatch_592366,
    schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsGet_592382 = ref object of OpenApiRestCall_588466
proc url_DfareportingSubaccountsGet_592384(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsGet_592383(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one subaccount by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Subaccount ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592385 = path.getOrDefault("profileId")
  valid_592385 = validateParameter(valid_592385, JString, required = true,
                                 default = nil)
  if valid_592385 != nil:
    section.add "profileId", valid_592385
  var valid_592386 = path.getOrDefault("id")
  valid_592386 = validateParameter(valid_592386, JString, required = true,
                                 default = nil)
  if valid_592386 != nil:
    section.add "id", valid_592386
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592387 = query.getOrDefault("fields")
  valid_592387 = validateParameter(valid_592387, JString, required = false,
                                 default = nil)
  if valid_592387 != nil:
    section.add "fields", valid_592387
  var valid_592388 = query.getOrDefault("quotaUser")
  valid_592388 = validateParameter(valid_592388, JString, required = false,
                                 default = nil)
  if valid_592388 != nil:
    section.add "quotaUser", valid_592388
  var valid_592389 = query.getOrDefault("alt")
  valid_592389 = validateParameter(valid_592389, JString, required = false,
                                 default = newJString("json"))
  if valid_592389 != nil:
    section.add "alt", valid_592389
  var valid_592390 = query.getOrDefault("oauth_token")
  valid_592390 = validateParameter(valid_592390, JString, required = false,
                                 default = nil)
  if valid_592390 != nil:
    section.add "oauth_token", valid_592390
  var valid_592391 = query.getOrDefault("userIp")
  valid_592391 = validateParameter(valid_592391, JString, required = false,
                                 default = nil)
  if valid_592391 != nil:
    section.add "userIp", valid_592391
  var valid_592392 = query.getOrDefault("key")
  valid_592392 = validateParameter(valid_592392, JString, required = false,
                                 default = nil)
  if valid_592392 != nil:
    section.add "key", valid_592392
  var valid_592393 = query.getOrDefault("prettyPrint")
  valid_592393 = validateParameter(valid_592393, JBool, required = false,
                                 default = newJBool(true))
  if valid_592393 != nil:
    section.add "prettyPrint", valid_592393
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592394: Call_DfareportingSubaccountsGet_592382; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one subaccount by ID.
  ## 
  let valid = call_592394.validator(path, query, header, formData, body)
  let scheme = call_592394.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592394.url(scheme.get, call_592394.host, call_592394.base,
                         call_592394.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592394, url, valid)

proc call*(call_592395: Call_DfareportingSubaccountsGet_592382; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingSubaccountsGet
  ## Gets one subaccount by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Subaccount ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592396 = newJObject()
  var query_592397 = newJObject()
  add(path_592396, "profileId", newJString(profileId))
  add(query_592397, "fields", newJString(fields))
  add(query_592397, "quotaUser", newJString(quotaUser))
  add(query_592397, "alt", newJString(alt))
  add(query_592397, "oauth_token", newJString(oauthToken))
  add(query_592397, "userIp", newJString(userIp))
  add(path_592396, "id", newJString(id))
  add(query_592397, "key", newJString(key))
  add(query_592397, "prettyPrint", newJBool(prettyPrint))
  result = call_592395.call(path_592396, query_592397, nil, nil, nil)

var dfareportingSubaccountsGet* = Call_DfareportingSubaccountsGet_592382(
    name: "dfareportingSubaccountsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/subaccounts/{id}",
    validator: validate_DfareportingSubaccountsGet_592383,
    base: "/dfareporting/v3.2", url: url_DfareportingSubaccountsGet_592384,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetableRemarketingListsList_592398 = ref object of OpenApiRestCall_588466
proc url_DfareportingTargetableRemarketingListsList_592400(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetableRemarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetableRemarketingListsList_592399(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592401 = path.getOrDefault("profileId")
  valid_592401 = validateParameter(valid_592401, JString, required = true,
                                 default = nil)
  if valid_592401 != nil:
    section.add "profileId", valid_592401
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   advertiserId: JString (required)
  ##               : Select only targetable remarketing lists targetable by these advertisers.
  ##   active: JBool
  ##         : Select only active or only inactive targetable remarketing lists.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   name: JString
  ##       : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592402 = query.getOrDefault("fields")
  valid_592402 = validateParameter(valid_592402, JString, required = false,
                                 default = nil)
  if valid_592402 != nil:
    section.add "fields", valid_592402
  var valid_592403 = query.getOrDefault("pageToken")
  valid_592403 = validateParameter(valid_592403, JString, required = false,
                                 default = nil)
  if valid_592403 != nil:
    section.add "pageToken", valid_592403
  var valid_592404 = query.getOrDefault("quotaUser")
  valid_592404 = validateParameter(valid_592404, JString, required = false,
                                 default = nil)
  if valid_592404 != nil:
    section.add "quotaUser", valid_592404
  var valid_592405 = query.getOrDefault("sortField")
  valid_592405 = validateParameter(valid_592405, JString, required = false,
                                 default = newJString("ID"))
  if valid_592405 != nil:
    section.add "sortField", valid_592405
  var valid_592406 = query.getOrDefault("alt")
  valid_592406 = validateParameter(valid_592406, JString, required = false,
                                 default = newJString("json"))
  if valid_592406 != nil:
    section.add "alt", valid_592406
  assert query != nil,
        "query argument is necessary due to required `advertiserId` field"
  var valid_592407 = query.getOrDefault("advertiserId")
  valid_592407 = validateParameter(valid_592407, JString, required = true,
                                 default = nil)
  if valid_592407 != nil:
    section.add "advertiserId", valid_592407
  var valid_592408 = query.getOrDefault("active")
  valid_592408 = validateParameter(valid_592408, JBool, required = false, default = nil)
  if valid_592408 != nil:
    section.add "active", valid_592408
  var valid_592409 = query.getOrDefault("oauth_token")
  valid_592409 = validateParameter(valid_592409, JString, required = false,
                                 default = nil)
  if valid_592409 != nil:
    section.add "oauth_token", valid_592409
  var valid_592410 = query.getOrDefault("userIp")
  valid_592410 = validateParameter(valid_592410, JString, required = false,
                                 default = nil)
  if valid_592410 != nil:
    section.add "userIp", valid_592410
  var valid_592411 = query.getOrDefault("maxResults")
  valid_592411 = validateParameter(valid_592411, JInt, required = false,
                                 default = newJInt(1000))
  if valid_592411 != nil:
    section.add "maxResults", valid_592411
  var valid_592412 = query.getOrDefault("key")
  valid_592412 = validateParameter(valid_592412, JString, required = false,
                                 default = nil)
  if valid_592412 != nil:
    section.add "key", valid_592412
  var valid_592413 = query.getOrDefault("name")
  valid_592413 = validateParameter(valid_592413, JString, required = false,
                                 default = nil)
  if valid_592413 != nil:
    section.add "name", valid_592413
  var valid_592414 = query.getOrDefault("sortOrder")
  valid_592414 = validateParameter(valid_592414, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_592414 != nil:
    section.add "sortOrder", valid_592414
  var valid_592415 = query.getOrDefault("prettyPrint")
  valid_592415 = validateParameter(valid_592415, JBool, required = false,
                                 default = newJBool(true))
  if valid_592415 != nil:
    section.add "prettyPrint", valid_592415
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592416: Call_DfareportingTargetableRemarketingListsList_592398;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging.
  ## 
  let valid = call_592416.validator(path, query, header, formData, body)
  let scheme = call_592416.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592416.url(scheme.get, call_592416.host, call_592416.base,
                         call_592416.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592416, url, valid)

proc call*(call_592417: Call_DfareportingTargetableRemarketingListsList_592398;
          profileId: string; advertiserId: string; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; sortField: string = "ID";
          alt: string = "json"; active: bool = false; oauthToken: string = "";
          userIp: string = ""; maxResults: int = 1000; key: string = ""; name: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingTargetableRemarketingListsList
  ## Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   advertiserId: string (required)
  ##               : Select only targetable remarketing lists targetable by these advertisers.
  ##   active: bool
  ##         : Select only active or only inactive targetable remarketing lists.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   name: string
  ##       : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592418 = newJObject()
  var query_592419 = newJObject()
  add(path_592418, "profileId", newJString(profileId))
  add(query_592419, "fields", newJString(fields))
  add(query_592419, "pageToken", newJString(pageToken))
  add(query_592419, "quotaUser", newJString(quotaUser))
  add(query_592419, "sortField", newJString(sortField))
  add(query_592419, "alt", newJString(alt))
  add(query_592419, "advertiserId", newJString(advertiserId))
  add(query_592419, "active", newJBool(active))
  add(query_592419, "oauth_token", newJString(oauthToken))
  add(query_592419, "userIp", newJString(userIp))
  add(query_592419, "maxResults", newJInt(maxResults))
  add(query_592419, "key", newJString(key))
  add(query_592419, "name", newJString(name))
  add(query_592419, "sortOrder", newJString(sortOrder))
  add(query_592419, "prettyPrint", newJBool(prettyPrint))
  result = call_592417.call(path_592418, query_592419, nil, nil, nil)

var dfareportingTargetableRemarketingListsList* = Call_DfareportingTargetableRemarketingListsList_592398(
    name: "dfareportingTargetableRemarketingListsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetableRemarketingLists",
    validator: validate_DfareportingTargetableRemarketingListsList_592399,
    base: "/dfareporting/v3.2",
    url: url_DfareportingTargetableRemarketingListsList_592400,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetableRemarketingListsGet_592420 = ref object of OpenApiRestCall_588466
proc url_DfareportingTargetableRemarketingListsGet_592422(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetableRemarketingLists/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetableRemarketingListsGet_592421(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one remarketing list by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Remarketing list ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592423 = path.getOrDefault("profileId")
  valid_592423 = validateParameter(valid_592423, JString, required = true,
                                 default = nil)
  if valid_592423 != nil:
    section.add "profileId", valid_592423
  var valid_592424 = path.getOrDefault("id")
  valid_592424 = validateParameter(valid_592424, JString, required = true,
                                 default = nil)
  if valid_592424 != nil:
    section.add "id", valid_592424
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592425 = query.getOrDefault("fields")
  valid_592425 = validateParameter(valid_592425, JString, required = false,
                                 default = nil)
  if valid_592425 != nil:
    section.add "fields", valid_592425
  var valid_592426 = query.getOrDefault("quotaUser")
  valid_592426 = validateParameter(valid_592426, JString, required = false,
                                 default = nil)
  if valid_592426 != nil:
    section.add "quotaUser", valid_592426
  var valid_592427 = query.getOrDefault("alt")
  valid_592427 = validateParameter(valid_592427, JString, required = false,
                                 default = newJString("json"))
  if valid_592427 != nil:
    section.add "alt", valid_592427
  var valid_592428 = query.getOrDefault("oauth_token")
  valid_592428 = validateParameter(valid_592428, JString, required = false,
                                 default = nil)
  if valid_592428 != nil:
    section.add "oauth_token", valid_592428
  var valid_592429 = query.getOrDefault("userIp")
  valid_592429 = validateParameter(valid_592429, JString, required = false,
                                 default = nil)
  if valid_592429 != nil:
    section.add "userIp", valid_592429
  var valid_592430 = query.getOrDefault("key")
  valid_592430 = validateParameter(valid_592430, JString, required = false,
                                 default = nil)
  if valid_592430 != nil:
    section.add "key", valid_592430
  var valid_592431 = query.getOrDefault("prettyPrint")
  valid_592431 = validateParameter(valid_592431, JBool, required = false,
                                 default = newJBool(true))
  if valid_592431 != nil:
    section.add "prettyPrint", valid_592431
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592432: Call_DfareportingTargetableRemarketingListsGet_592420;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one remarketing list by ID.
  ## 
  let valid = call_592432.validator(path, query, header, formData, body)
  let scheme = call_592432.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592432.url(scheme.get, call_592432.host, call_592432.base,
                         call_592432.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592432, url, valid)

proc call*(call_592433: Call_DfareportingTargetableRemarketingListsGet_592420;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingTargetableRemarketingListsGet
  ## Gets one remarketing list by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Remarketing list ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592434 = newJObject()
  var query_592435 = newJObject()
  add(path_592434, "profileId", newJString(profileId))
  add(query_592435, "fields", newJString(fields))
  add(query_592435, "quotaUser", newJString(quotaUser))
  add(query_592435, "alt", newJString(alt))
  add(query_592435, "oauth_token", newJString(oauthToken))
  add(query_592435, "userIp", newJString(userIp))
  add(path_592434, "id", newJString(id))
  add(query_592435, "key", newJString(key))
  add(query_592435, "prettyPrint", newJBool(prettyPrint))
  result = call_592433.call(path_592434, query_592435, nil, nil, nil)

var dfareportingTargetableRemarketingListsGet* = Call_DfareportingTargetableRemarketingListsGet_592420(
    name: "dfareportingTargetableRemarketingListsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetableRemarketingLists/{id}",
    validator: validate_DfareportingTargetableRemarketingListsGet_592421,
    base: "/dfareporting/v3.2",
    url: url_DfareportingTargetableRemarketingListsGet_592422,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesUpdate_592458 = ref object of OpenApiRestCall_588466
proc url_DfareportingTargetingTemplatesUpdate_592460(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesUpdate_592459(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing targeting template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592461 = path.getOrDefault("profileId")
  valid_592461 = validateParameter(valid_592461, JString, required = true,
                                 default = nil)
  if valid_592461 != nil:
    section.add "profileId", valid_592461
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592462 = query.getOrDefault("fields")
  valid_592462 = validateParameter(valid_592462, JString, required = false,
                                 default = nil)
  if valid_592462 != nil:
    section.add "fields", valid_592462
  var valid_592463 = query.getOrDefault("quotaUser")
  valid_592463 = validateParameter(valid_592463, JString, required = false,
                                 default = nil)
  if valid_592463 != nil:
    section.add "quotaUser", valid_592463
  var valid_592464 = query.getOrDefault("alt")
  valid_592464 = validateParameter(valid_592464, JString, required = false,
                                 default = newJString("json"))
  if valid_592464 != nil:
    section.add "alt", valid_592464
  var valid_592465 = query.getOrDefault("oauth_token")
  valid_592465 = validateParameter(valid_592465, JString, required = false,
                                 default = nil)
  if valid_592465 != nil:
    section.add "oauth_token", valid_592465
  var valid_592466 = query.getOrDefault("userIp")
  valid_592466 = validateParameter(valid_592466, JString, required = false,
                                 default = nil)
  if valid_592466 != nil:
    section.add "userIp", valid_592466
  var valid_592467 = query.getOrDefault("key")
  valid_592467 = validateParameter(valid_592467, JString, required = false,
                                 default = nil)
  if valid_592467 != nil:
    section.add "key", valid_592467
  var valid_592468 = query.getOrDefault("prettyPrint")
  valid_592468 = validateParameter(valid_592468, JBool, required = false,
                                 default = newJBool(true))
  if valid_592468 != nil:
    section.add "prettyPrint", valid_592468
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_592470: Call_DfareportingTargetingTemplatesUpdate_592458;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing targeting template.
  ## 
  let valid = call_592470.validator(path, query, header, formData, body)
  let scheme = call_592470.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592470.url(scheme.get, call_592470.host, call_592470.base,
                         call_592470.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592470, url, valid)

proc call*(call_592471: Call_DfareportingTargetingTemplatesUpdate_592458;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingTargetingTemplatesUpdate
  ## Updates an existing targeting template.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592472 = newJObject()
  var query_592473 = newJObject()
  var body_592474 = newJObject()
  add(path_592472, "profileId", newJString(profileId))
  add(query_592473, "fields", newJString(fields))
  add(query_592473, "quotaUser", newJString(quotaUser))
  add(query_592473, "alt", newJString(alt))
  add(query_592473, "oauth_token", newJString(oauthToken))
  add(query_592473, "userIp", newJString(userIp))
  add(query_592473, "key", newJString(key))
  if body != nil:
    body_592474 = body
  add(query_592473, "prettyPrint", newJBool(prettyPrint))
  result = call_592471.call(path_592472, query_592473, nil, nil, body_592474)

var dfareportingTargetingTemplatesUpdate* = Call_DfareportingTargetingTemplatesUpdate_592458(
    name: "dfareportingTargetingTemplatesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates",
    validator: validate_DfareportingTargetingTemplatesUpdate_592459,
    base: "/dfareporting/v3.2", url: url_DfareportingTargetingTemplatesUpdate_592460,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesInsert_592475 = ref object of OpenApiRestCall_588466
proc url_DfareportingTargetingTemplatesInsert_592477(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesInsert_592476(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new targeting template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592478 = path.getOrDefault("profileId")
  valid_592478 = validateParameter(valid_592478, JString, required = true,
                                 default = nil)
  if valid_592478 != nil:
    section.add "profileId", valid_592478
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592479 = query.getOrDefault("fields")
  valid_592479 = validateParameter(valid_592479, JString, required = false,
                                 default = nil)
  if valid_592479 != nil:
    section.add "fields", valid_592479
  var valid_592480 = query.getOrDefault("quotaUser")
  valid_592480 = validateParameter(valid_592480, JString, required = false,
                                 default = nil)
  if valid_592480 != nil:
    section.add "quotaUser", valid_592480
  var valid_592481 = query.getOrDefault("alt")
  valid_592481 = validateParameter(valid_592481, JString, required = false,
                                 default = newJString("json"))
  if valid_592481 != nil:
    section.add "alt", valid_592481
  var valid_592482 = query.getOrDefault("oauth_token")
  valid_592482 = validateParameter(valid_592482, JString, required = false,
                                 default = nil)
  if valid_592482 != nil:
    section.add "oauth_token", valid_592482
  var valid_592483 = query.getOrDefault("userIp")
  valid_592483 = validateParameter(valid_592483, JString, required = false,
                                 default = nil)
  if valid_592483 != nil:
    section.add "userIp", valid_592483
  var valid_592484 = query.getOrDefault("key")
  valid_592484 = validateParameter(valid_592484, JString, required = false,
                                 default = nil)
  if valid_592484 != nil:
    section.add "key", valid_592484
  var valid_592485 = query.getOrDefault("prettyPrint")
  valid_592485 = validateParameter(valid_592485, JBool, required = false,
                                 default = newJBool(true))
  if valid_592485 != nil:
    section.add "prettyPrint", valid_592485
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_592487: Call_DfareportingTargetingTemplatesInsert_592475;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new targeting template.
  ## 
  let valid = call_592487.validator(path, query, header, formData, body)
  let scheme = call_592487.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592487.url(scheme.get, call_592487.host, call_592487.base,
                         call_592487.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592487, url, valid)

proc call*(call_592488: Call_DfareportingTargetingTemplatesInsert_592475;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingTargetingTemplatesInsert
  ## Inserts a new targeting template.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592489 = newJObject()
  var query_592490 = newJObject()
  var body_592491 = newJObject()
  add(path_592489, "profileId", newJString(profileId))
  add(query_592490, "fields", newJString(fields))
  add(query_592490, "quotaUser", newJString(quotaUser))
  add(query_592490, "alt", newJString(alt))
  add(query_592490, "oauth_token", newJString(oauthToken))
  add(query_592490, "userIp", newJString(userIp))
  add(query_592490, "key", newJString(key))
  if body != nil:
    body_592491 = body
  add(query_592490, "prettyPrint", newJBool(prettyPrint))
  result = call_592488.call(path_592489, query_592490, nil, nil, body_592491)

var dfareportingTargetingTemplatesInsert* = Call_DfareportingTargetingTemplatesInsert_592475(
    name: "dfareportingTargetingTemplatesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates",
    validator: validate_DfareportingTargetingTemplatesInsert_592476,
    base: "/dfareporting/v3.2", url: url_DfareportingTargetingTemplatesInsert_592477,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesList_592436 = ref object of OpenApiRestCall_588466
proc url_DfareportingTargetingTemplatesList_592438(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesList_592437(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of targeting templates, optionally filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592439 = path.getOrDefault("profileId")
  valid_592439 = validateParameter(valid_592439, JString, required = true,
                                 default = nil)
  if valid_592439 != nil:
    section.add "profileId", valid_592439
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "template*2015" will return objects with names like "template June 2015", "template April 2015", or simply "template 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "template" will match objects with name "my template", "template 2015", or simply "template".
  ##   advertiserId: JString
  ##               : Select only targeting templates with this advertiser ID.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only targeting templates with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592440 = query.getOrDefault("fields")
  valid_592440 = validateParameter(valid_592440, JString, required = false,
                                 default = nil)
  if valid_592440 != nil:
    section.add "fields", valid_592440
  var valid_592441 = query.getOrDefault("pageToken")
  valid_592441 = validateParameter(valid_592441, JString, required = false,
                                 default = nil)
  if valid_592441 != nil:
    section.add "pageToken", valid_592441
  var valid_592442 = query.getOrDefault("quotaUser")
  valid_592442 = validateParameter(valid_592442, JString, required = false,
                                 default = nil)
  if valid_592442 != nil:
    section.add "quotaUser", valid_592442
  var valid_592443 = query.getOrDefault("sortField")
  valid_592443 = validateParameter(valid_592443, JString, required = false,
                                 default = newJString("ID"))
  if valid_592443 != nil:
    section.add "sortField", valid_592443
  var valid_592444 = query.getOrDefault("alt")
  valid_592444 = validateParameter(valid_592444, JString, required = false,
                                 default = newJString("json"))
  if valid_592444 != nil:
    section.add "alt", valid_592444
  var valid_592445 = query.getOrDefault("searchString")
  valid_592445 = validateParameter(valid_592445, JString, required = false,
                                 default = nil)
  if valid_592445 != nil:
    section.add "searchString", valid_592445
  var valid_592446 = query.getOrDefault("advertiserId")
  valid_592446 = validateParameter(valid_592446, JString, required = false,
                                 default = nil)
  if valid_592446 != nil:
    section.add "advertiserId", valid_592446
  var valid_592447 = query.getOrDefault("oauth_token")
  valid_592447 = validateParameter(valid_592447, JString, required = false,
                                 default = nil)
  if valid_592447 != nil:
    section.add "oauth_token", valid_592447
  var valid_592448 = query.getOrDefault("userIp")
  valid_592448 = validateParameter(valid_592448, JString, required = false,
                                 default = nil)
  if valid_592448 != nil:
    section.add "userIp", valid_592448
  var valid_592449 = query.getOrDefault("maxResults")
  valid_592449 = validateParameter(valid_592449, JInt, required = false,
                                 default = newJInt(1000))
  if valid_592449 != nil:
    section.add "maxResults", valid_592449
  var valid_592450 = query.getOrDefault("ids")
  valid_592450 = validateParameter(valid_592450, JArray, required = false,
                                 default = nil)
  if valid_592450 != nil:
    section.add "ids", valid_592450
  var valid_592451 = query.getOrDefault("key")
  valid_592451 = validateParameter(valid_592451, JString, required = false,
                                 default = nil)
  if valid_592451 != nil:
    section.add "key", valid_592451
  var valid_592452 = query.getOrDefault("sortOrder")
  valid_592452 = validateParameter(valid_592452, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_592452 != nil:
    section.add "sortOrder", valid_592452
  var valid_592453 = query.getOrDefault("prettyPrint")
  valid_592453 = validateParameter(valid_592453, JBool, required = false,
                                 default = newJBool(true))
  if valid_592453 != nil:
    section.add "prettyPrint", valid_592453
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592454: Call_DfareportingTargetingTemplatesList_592436;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of targeting templates, optionally filtered. This method supports paging.
  ## 
  let valid = call_592454.validator(path, query, header, formData, body)
  let scheme = call_592454.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592454.url(scheme.get, call_592454.host, call_592454.base,
                         call_592454.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592454, url, valid)

proc call*(call_592455: Call_DfareportingTargetingTemplatesList_592436;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; advertiserId: string = ""; oauthToken: string = "";
          userIp: string = ""; maxResults: int = 1000; ids: JsonNode = nil;
          key: string = ""; sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingTargetingTemplatesList
  ## Retrieves a list of targeting templates, optionally filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "template*2015" will return objects with names like "template June 2015", "template April 2015", or simply "template 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "template" will match objects with name "my template", "template 2015", or simply "template".
  ##   advertiserId: string
  ##               : Select only targeting templates with this advertiser ID.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only targeting templates with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592456 = newJObject()
  var query_592457 = newJObject()
  add(path_592456, "profileId", newJString(profileId))
  add(query_592457, "fields", newJString(fields))
  add(query_592457, "pageToken", newJString(pageToken))
  add(query_592457, "quotaUser", newJString(quotaUser))
  add(query_592457, "sortField", newJString(sortField))
  add(query_592457, "alt", newJString(alt))
  add(query_592457, "searchString", newJString(searchString))
  add(query_592457, "advertiserId", newJString(advertiserId))
  add(query_592457, "oauth_token", newJString(oauthToken))
  add(query_592457, "userIp", newJString(userIp))
  add(query_592457, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_592457.add "ids", ids
  add(query_592457, "key", newJString(key))
  add(query_592457, "sortOrder", newJString(sortOrder))
  add(query_592457, "prettyPrint", newJBool(prettyPrint))
  result = call_592455.call(path_592456, query_592457, nil, nil, nil)

var dfareportingTargetingTemplatesList* = Call_DfareportingTargetingTemplatesList_592436(
    name: "dfareportingTargetingTemplatesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates",
    validator: validate_DfareportingTargetingTemplatesList_592437,
    base: "/dfareporting/v3.2", url: url_DfareportingTargetingTemplatesList_592438,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesPatch_592492 = ref object of OpenApiRestCall_588466
proc url_DfareportingTargetingTemplatesPatch_592494(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesPatch_592493(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing targeting template. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592495 = path.getOrDefault("profileId")
  valid_592495 = validateParameter(valid_592495, JString, required = true,
                                 default = nil)
  if valid_592495 != nil:
    section.add "profileId", valid_592495
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Targeting template ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592496 = query.getOrDefault("fields")
  valid_592496 = validateParameter(valid_592496, JString, required = false,
                                 default = nil)
  if valid_592496 != nil:
    section.add "fields", valid_592496
  var valid_592497 = query.getOrDefault("quotaUser")
  valid_592497 = validateParameter(valid_592497, JString, required = false,
                                 default = nil)
  if valid_592497 != nil:
    section.add "quotaUser", valid_592497
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_592498 = query.getOrDefault("id")
  valid_592498 = validateParameter(valid_592498, JString, required = true,
                                 default = nil)
  if valid_592498 != nil:
    section.add "id", valid_592498
  var valid_592499 = query.getOrDefault("alt")
  valid_592499 = validateParameter(valid_592499, JString, required = false,
                                 default = newJString("json"))
  if valid_592499 != nil:
    section.add "alt", valid_592499
  var valid_592500 = query.getOrDefault("oauth_token")
  valid_592500 = validateParameter(valid_592500, JString, required = false,
                                 default = nil)
  if valid_592500 != nil:
    section.add "oauth_token", valid_592500
  var valid_592501 = query.getOrDefault("userIp")
  valid_592501 = validateParameter(valid_592501, JString, required = false,
                                 default = nil)
  if valid_592501 != nil:
    section.add "userIp", valid_592501
  var valid_592502 = query.getOrDefault("key")
  valid_592502 = validateParameter(valid_592502, JString, required = false,
                                 default = nil)
  if valid_592502 != nil:
    section.add "key", valid_592502
  var valid_592503 = query.getOrDefault("prettyPrint")
  valid_592503 = validateParameter(valid_592503, JBool, required = false,
                                 default = newJBool(true))
  if valid_592503 != nil:
    section.add "prettyPrint", valid_592503
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_592505: Call_DfareportingTargetingTemplatesPatch_592492;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing targeting template. This method supports patch semantics.
  ## 
  let valid = call_592505.validator(path, query, header, formData, body)
  let scheme = call_592505.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592505.url(scheme.get, call_592505.host, call_592505.base,
                         call_592505.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592505, url, valid)

proc call*(call_592506: Call_DfareportingTargetingTemplatesPatch_592492;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingTargetingTemplatesPatch
  ## Updates an existing targeting template. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Targeting template ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592507 = newJObject()
  var query_592508 = newJObject()
  var body_592509 = newJObject()
  add(path_592507, "profileId", newJString(profileId))
  add(query_592508, "fields", newJString(fields))
  add(query_592508, "quotaUser", newJString(quotaUser))
  add(query_592508, "id", newJString(id))
  add(query_592508, "alt", newJString(alt))
  add(query_592508, "oauth_token", newJString(oauthToken))
  add(query_592508, "userIp", newJString(userIp))
  add(query_592508, "key", newJString(key))
  if body != nil:
    body_592509 = body
  add(query_592508, "prettyPrint", newJBool(prettyPrint))
  result = call_592506.call(path_592507, query_592508, nil, nil, body_592509)

var dfareportingTargetingTemplatesPatch* = Call_DfareportingTargetingTemplatesPatch_592492(
    name: "dfareportingTargetingTemplatesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates",
    validator: validate_DfareportingTargetingTemplatesPatch_592493,
    base: "/dfareporting/v3.2", url: url_DfareportingTargetingTemplatesPatch_592494,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesGet_592510 = ref object of OpenApiRestCall_588466
proc url_DfareportingTargetingTemplatesGet_592512(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesGet_592511(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one targeting template by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Targeting template ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592513 = path.getOrDefault("profileId")
  valid_592513 = validateParameter(valid_592513, JString, required = true,
                                 default = nil)
  if valid_592513 != nil:
    section.add "profileId", valid_592513
  var valid_592514 = path.getOrDefault("id")
  valid_592514 = validateParameter(valid_592514, JString, required = true,
                                 default = nil)
  if valid_592514 != nil:
    section.add "id", valid_592514
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592515 = query.getOrDefault("fields")
  valid_592515 = validateParameter(valid_592515, JString, required = false,
                                 default = nil)
  if valid_592515 != nil:
    section.add "fields", valid_592515
  var valid_592516 = query.getOrDefault("quotaUser")
  valid_592516 = validateParameter(valid_592516, JString, required = false,
                                 default = nil)
  if valid_592516 != nil:
    section.add "quotaUser", valid_592516
  var valid_592517 = query.getOrDefault("alt")
  valid_592517 = validateParameter(valid_592517, JString, required = false,
                                 default = newJString("json"))
  if valid_592517 != nil:
    section.add "alt", valid_592517
  var valid_592518 = query.getOrDefault("oauth_token")
  valid_592518 = validateParameter(valid_592518, JString, required = false,
                                 default = nil)
  if valid_592518 != nil:
    section.add "oauth_token", valid_592518
  var valid_592519 = query.getOrDefault("userIp")
  valid_592519 = validateParameter(valid_592519, JString, required = false,
                                 default = nil)
  if valid_592519 != nil:
    section.add "userIp", valid_592519
  var valid_592520 = query.getOrDefault("key")
  valid_592520 = validateParameter(valid_592520, JString, required = false,
                                 default = nil)
  if valid_592520 != nil:
    section.add "key", valid_592520
  var valid_592521 = query.getOrDefault("prettyPrint")
  valid_592521 = validateParameter(valid_592521, JBool, required = false,
                                 default = newJBool(true))
  if valid_592521 != nil:
    section.add "prettyPrint", valid_592521
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592522: Call_DfareportingTargetingTemplatesGet_592510;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one targeting template by ID.
  ## 
  let valid = call_592522.validator(path, query, header, formData, body)
  let scheme = call_592522.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592522.url(scheme.get, call_592522.host, call_592522.base,
                         call_592522.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592522, url, valid)

proc call*(call_592523: Call_DfareportingTargetingTemplatesGet_592510;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingTargetingTemplatesGet
  ## Gets one targeting template by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Targeting template ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592524 = newJObject()
  var query_592525 = newJObject()
  add(path_592524, "profileId", newJString(profileId))
  add(query_592525, "fields", newJString(fields))
  add(query_592525, "quotaUser", newJString(quotaUser))
  add(query_592525, "alt", newJString(alt))
  add(query_592525, "oauth_token", newJString(oauthToken))
  add(query_592525, "userIp", newJString(userIp))
  add(path_592524, "id", newJString(id))
  add(query_592525, "key", newJString(key))
  add(query_592525, "prettyPrint", newJBool(prettyPrint))
  result = call_592523.call(path_592524, query_592525, nil, nil, nil)

var dfareportingTargetingTemplatesGet* = Call_DfareportingTargetingTemplatesGet_592510(
    name: "dfareportingTargetingTemplatesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates/{id}",
    validator: validate_DfareportingTargetingTemplatesGet_592511,
    base: "/dfareporting/v3.2", url: url_DfareportingTargetingTemplatesGet_592512,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolePermissionGroupsList_592526 = ref object of OpenApiRestCall_588466
proc url_DfareportingUserRolePermissionGroupsList_592528(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRolePermissionGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolePermissionGroupsList_592527(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of all supported user role permission groups.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592529 = path.getOrDefault("profileId")
  valid_592529 = validateParameter(valid_592529, JString, required = true,
                                 default = nil)
  if valid_592529 != nil:
    section.add "profileId", valid_592529
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592530 = query.getOrDefault("fields")
  valid_592530 = validateParameter(valid_592530, JString, required = false,
                                 default = nil)
  if valid_592530 != nil:
    section.add "fields", valid_592530
  var valid_592531 = query.getOrDefault("quotaUser")
  valid_592531 = validateParameter(valid_592531, JString, required = false,
                                 default = nil)
  if valid_592531 != nil:
    section.add "quotaUser", valid_592531
  var valid_592532 = query.getOrDefault("alt")
  valid_592532 = validateParameter(valid_592532, JString, required = false,
                                 default = newJString("json"))
  if valid_592532 != nil:
    section.add "alt", valid_592532
  var valid_592533 = query.getOrDefault("oauth_token")
  valid_592533 = validateParameter(valid_592533, JString, required = false,
                                 default = nil)
  if valid_592533 != nil:
    section.add "oauth_token", valid_592533
  var valid_592534 = query.getOrDefault("userIp")
  valid_592534 = validateParameter(valid_592534, JString, required = false,
                                 default = nil)
  if valid_592534 != nil:
    section.add "userIp", valid_592534
  var valid_592535 = query.getOrDefault("key")
  valid_592535 = validateParameter(valid_592535, JString, required = false,
                                 default = nil)
  if valid_592535 != nil:
    section.add "key", valid_592535
  var valid_592536 = query.getOrDefault("prettyPrint")
  valid_592536 = validateParameter(valid_592536, JBool, required = false,
                                 default = newJBool(true))
  if valid_592536 != nil:
    section.add "prettyPrint", valid_592536
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592537: Call_DfareportingUserRolePermissionGroupsList_592526;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of all supported user role permission groups.
  ## 
  let valid = call_592537.validator(path, query, header, formData, body)
  let scheme = call_592537.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592537.url(scheme.get, call_592537.host, call_592537.base,
                         call_592537.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592537, url, valid)

proc call*(call_592538: Call_DfareportingUserRolePermissionGroupsList_592526;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolePermissionGroupsList
  ## Gets a list of all supported user role permission groups.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592539 = newJObject()
  var query_592540 = newJObject()
  add(path_592539, "profileId", newJString(profileId))
  add(query_592540, "fields", newJString(fields))
  add(query_592540, "quotaUser", newJString(quotaUser))
  add(query_592540, "alt", newJString(alt))
  add(query_592540, "oauth_token", newJString(oauthToken))
  add(query_592540, "userIp", newJString(userIp))
  add(query_592540, "key", newJString(key))
  add(query_592540, "prettyPrint", newJBool(prettyPrint))
  result = call_592538.call(path_592539, query_592540, nil, nil, nil)

var dfareportingUserRolePermissionGroupsList* = Call_DfareportingUserRolePermissionGroupsList_592526(
    name: "dfareportingUserRolePermissionGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/userRolePermissionGroups",
    validator: validate_DfareportingUserRolePermissionGroupsList_592527,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolePermissionGroupsList_592528,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolePermissionGroupsGet_592541 = ref object of OpenApiRestCall_588466
proc url_DfareportingUserRolePermissionGroupsGet_592543(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRolePermissionGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolePermissionGroupsGet_592542(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one user role permission group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User role permission group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592544 = path.getOrDefault("profileId")
  valid_592544 = validateParameter(valid_592544, JString, required = true,
                                 default = nil)
  if valid_592544 != nil:
    section.add "profileId", valid_592544
  var valid_592545 = path.getOrDefault("id")
  valid_592545 = validateParameter(valid_592545, JString, required = true,
                                 default = nil)
  if valid_592545 != nil:
    section.add "id", valid_592545
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592546 = query.getOrDefault("fields")
  valid_592546 = validateParameter(valid_592546, JString, required = false,
                                 default = nil)
  if valid_592546 != nil:
    section.add "fields", valid_592546
  var valid_592547 = query.getOrDefault("quotaUser")
  valid_592547 = validateParameter(valid_592547, JString, required = false,
                                 default = nil)
  if valid_592547 != nil:
    section.add "quotaUser", valid_592547
  var valid_592548 = query.getOrDefault("alt")
  valid_592548 = validateParameter(valid_592548, JString, required = false,
                                 default = newJString("json"))
  if valid_592548 != nil:
    section.add "alt", valid_592548
  var valid_592549 = query.getOrDefault("oauth_token")
  valid_592549 = validateParameter(valid_592549, JString, required = false,
                                 default = nil)
  if valid_592549 != nil:
    section.add "oauth_token", valid_592549
  var valid_592550 = query.getOrDefault("userIp")
  valid_592550 = validateParameter(valid_592550, JString, required = false,
                                 default = nil)
  if valid_592550 != nil:
    section.add "userIp", valid_592550
  var valid_592551 = query.getOrDefault("key")
  valid_592551 = validateParameter(valid_592551, JString, required = false,
                                 default = nil)
  if valid_592551 != nil:
    section.add "key", valid_592551
  var valid_592552 = query.getOrDefault("prettyPrint")
  valid_592552 = validateParameter(valid_592552, JBool, required = false,
                                 default = newJBool(true))
  if valid_592552 != nil:
    section.add "prettyPrint", valid_592552
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592553: Call_DfareportingUserRolePermissionGroupsGet_592541;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one user role permission group by ID.
  ## 
  let valid = call_592553.validator(path, query, header, formData, body)
  let scheme = call_592553.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592553.url(scheme.get, call_592553.host, call_592553.base,
                         call_592553.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592553, url, valid)

proc call*(call_592554: Call_DfareportingUserRolePermissionGroupsGet_592541;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolePermissionGroupsGet
  ## Gets one user role permission group by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : User role permission group ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592555 = newJObject()
  var query_592556 = newJObject()
  add(path_592555, "profileId", newJString(profileId))
  add(query_592556, "fields", newJString(fields))
  add(query_592556, "quotaUser", newJString(quotaUser))
  add(query_592556, "alt", newJString(alt))
  add(query_592556, "oauth_token", newJString(oauthToken))
  add(query_592556, "userIp", newJString(userIp))
  add(path_592555, "id", newJString(id))
  add(query_592556, "key", newJString(key))
  add(query_592556, "prettyPrint", newJBool(prettyPrint))
  result = call_592554.call(path_592555, query_592556, nil, nil, nil)

var dfareportingUserRolePermissionGroupsGet* = Call_DfareportingUserRolePermissionGroupsGet_592541(
    name: "dfareportingUserRolePermissionGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/userRolePermissionGroups/{id}",
    validator: validate_DfareportingUserRolePermissionGroupsGet_592542,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolePermissionGroupsGet_592543,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolePermissionsList_592557 = ref object of OpenApiRestCall_588466
proc url_DfareportingUserRolePermissionsList_592559(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRolePermissions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolePermissionsList_592558(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of user role permissions, possibly filtered.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592560 = path.getOrDefault("profileId")
  valid_592560 = validateParameter(valid_592560, JString, required = true,
                                 default = nil)
  if valid_592560 != nil:
    section.add "profileId", valid_592560
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   ids: JArray
  ##      : Select only user role permissions with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592561 = query.getOrDefault("fields")
  valid_592561 = validateParameter(valid_592561, JString, required = false,
                                 default = nil)
  if valid_592561 != nil:
    section.add "fields", valid_592561
  var valid_592562 = query.getOrDefault("quotaUser")
  valid_592562 = validateParameter(valid_592562, JString, required = false,
                                 default = nil)
  if valid_592562 != nil:
    section.add "quotaUser", valid_592562
  var valid_592563 = query.getOrDefault("alt")
  valid_592563 = validateParameter(valid_592563, JString, required = false,
                                 default = newJString("json"))
  if valid_592563 != nil:
    section.add "alt", valid_592563
  var valid_592564 = query.getOrDefault("oauth_token")
  valid_592564 = validateParameter(valid_592564, JString, required = false,
                                 default = nil)
  if valid_592564 != nil:
    section.add "oauth_token", valid_592564
  var valid_592565 = query.getOrDefault("userIp")
  valid_592565 = validateParameter(valid_592565, JString, required = false,
                                 default = nil)
  if valid_592565 != nil:
    section.add "userIp", valid_592565
  var valid_592566 = query.getOrDefault("ids")
  valid_592566 = validateParameter(valid_592566, JArray, required = false,
                                 default = nil)
  if valid_592566 != nil:
    section.add "ids", valid_592566
  var valid_592567 = query.getOrDefault("key")
  valid_592567 = validateParameter(valid_592567, JString, required = false,
                                 default = nil)
  if valid_592567 != nil:
    section.add "key", valid_592567
  var valid_592568 = query.getOrDefault("prettyPrint")
  valid_592568 = validateParameter(valid_592568, JBool, required = false,
                                 default = newJBool(true))
  if valid_592568 != nil:
    section.add "prettyPrint", valid_592568
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592569: Call_DfareportingUserRolePermissionsList_592557;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of user role permissions, possibly filtered.
  ## 
  let valid = call_592569.validator(path, query, header, formData, body)
  let scheme = call_592569.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592569.url(scheme.get, call_592569.host, call_592569.base,
                         call_592569.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592569, url, valid)

proc call*(call_592570: Call_DfareportingUserRolePermissionsList_592557;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          ids: JsonNode = nil; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolePermissionsList
  ## Gets a list of user role permissions, possibly filtered.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   ids: JArray
  ##      : Select only user role permissions with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592571 = newJObject()
  var query_592572 = newJObject()
  add(path_592571, "profileId", newJString(profileId))
  add(query_592572, "fields", newJString(fields))
  add(query_592572, "quotaUser", newJString(quotaUser))
  add(query_592572, "alt", newJString(alt))
  add(query_592572, "oauth_token", newJString(oauthToken))
  add(query_592572, "userIp", newJString(userIp))
  if ids != nil:
    query_592572.add "ids", ids
  add(query_592572, "key", newJString(key))
  add(query_592572, "prettyPrint", newJBool(prettyPrint))
  result = call_592570.call(path_592571, query_592572, nil, nil, nil)

var dfareportingUserRolePermissionsList* = Call_DfareportingUserRolePermissionsList_592557(
    name: "dfareportingUserRolePermissionsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/userRolePermissions",
    validator: validate_DfareportingUserRolePermissionsList_592558,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolePermissionsList_592559,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolePermissionsGet_592573 = ref object of OpenApiRestCall_588466
proc url_DfareportingUserRolePermissionsGet_592575(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRolePermissions/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolePermissionsGet_592574(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one user role permission by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User role permission ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592576 = path.getOrDefault("profileId")
  valid_592576 = validateParameter(valid_592576, JString, required = true,
                                 default = nil)
  if valid_592576 != nil:
    section.add "profileId", valid_592576
  var valid_592577 = path.getOrDefault("id")
  valid_592577 = validateParameter(valid_592577, JString, required = true,
                                 default = nil)
  if valid_592577 != nil:
    section.add "id", valid_592577
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592578 = query.getOrDefault("fields")
  valid_592578 = validateParameter(valid_592578, JString, required = false,
                                 default = nil)
  if valid_592578 != nil:
    section.add "fields", valid_592578
  var valid_592579 = query.getOrDefault("quotaUser")
  valid_592579 = validateParameter(valid_592579, JString, required = false,
                                 default = nil)
  if valid_592579 != nil:
    section.add "quotaUser", valid_592579
  var valid_592580 = query.getOrDefault("alt")
  valid_592580 = validateParameter(valid_592580, JString, required = false,
                                 default = newJString("json"))
  if valid_592580 != nil:
    section.add "alt", valid_592580
  var valid_592581 = query.getOrDefault("oauth_token")
  valid_592581 = validateParameter(valid_592581, JString, required = false,
                                 default = nil)
  if valid_592581 != nil:
    section.add "oauth_token", valid_592581
  var valid_592582 = query.getOrDefault("userIp")
  valid_592582 = validateParameter(valid_592582, JString, required = false,
                                 default = nil)
  if valid_592582 != nil:
    section.add "userIp", valid_592582
  var valid_592583 = query.getOrDefault("key")
  valid_592583 = validateParameter(valid_592583, JString, required = false,
                                 default = nil)
  if valid_592583 != nil:
    section.add "key", valid_592583
  var valid_592584 = query.getOrDefault("prettyPrint")
  valid_592584 = validateParameter(valid_592584, JBool, required = false,
                                 default = newJBool(true))
  if valid_592584 != nil:
    section.add "prettyPrint", valid_592584
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592585: Call_DfareportingUserRolePermissionsGet_592573;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one user role permission by ID.
  ## 
  let valid = call_592585.validator(path, query, header, formData, body)
  let scheme = call_592585.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592585.url(scheme.get, call_592585.host, call_592585.base,
                         call_592585.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592585, url, valid)

proc call*(call_592586: Call_DfareportingUserRolePermissionsGet_592573;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolePermissionsGet
  ## Gets one user role permission by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : User role permission ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592587 = newJObject()
  var query_592588 = newJObject()
  add(path_592587, "profileId", newJString(profileId))
  add(query_592588, "fields", newJString(fields))
  add(query_592588, "quotaUser", newJString(quotaUser))
  add(query_592588, "alt", newJString(alt))
  add(query_592588, "oauth_token", newJString(oauthToken))
  add(query_592588, "userIp", newJString(userIp))
  add(path_592587, "id", newJString(id))
  add(query_592588, "key", newJString(key))
  add(query_592588, "prettyPrint", newJBool(prettyPrint))
  result = call_592586.call(path_592587, query_592588, nil, nil, nil)

var dfareportingUserRolePermissionsGet* = Call_DfareportingUserRolePermissionsGet_592573(
    name: "dfareportingUserRolePermissionsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/userRolePermissions/{id}",
    validator: validate_DfareportingUserRolePermissionsGet_592574,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolePermissionsGet_592575,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesUpdate_592612 = ref object of OpenApiRestCall_588466
proc url_DfareportingUserRolesUpdate_592614(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesUpdate_592613(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing user role.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592615 = path.getOrDefault("profileId")
  valid_592615 = validateParameter(valid_592615, JString, required = true,
                                 default = nil)
  if valid_592615 != nil:
    section.add "profileId", valid_592615
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592616 = query.getOrDefault("fields")
  valid_592616 = validateParameter(valid_592616, JString, required = false,
                                 default = nil)
  if valid_592616 != nil:
    section.add "fields", valid_592616
  var valid_592617 = query.getOrDefault("quotaUser")
  valid_592617 = validateParameter(valid_592617, JString, required = false,
                                 default = nil)
  if valid_592617 != nil:
    section.add "quotaUser", valid_592617
  var valid_592618 = query.getOrDefault("alt")
  valid_592618 = validateParameter(valid_592618, JString, required = false,
                                 default = newJString("json"))
  if valid_592618 != nil:
    section.add "alt", valid_592618
  var valid_592619 = query.getOrDefault("oauth_token")
  valid_592619 = validateParameter(valid_592619, JString, required = false,
                                 default = nil)
  if valid_592619 != nil:
    section.add "oauth_token", valid_592619
  var valid_592620 = query.getOrDefault("userIp")
  valid_592620 = validateParameter(valid_592620, JString, required = false,
                                 default = nil)
  if valid_592620 != nil:
    section.add "userIp", valid_592620
  var valid_592621 = query.getOrDefault("key")
  valid_592621 = validateParameter(valid_592621, JString, required = false,
                                 default = nil)
  if valid_592621 != nil:
    section.add "key", valid_592621
  var valid_592622 = query.getOrDefault("prettyPrint")
  valid_592622 = validateParameter(valid_592622, JBool, required = false,
                                 default = newJBool(true))
  if valid_592622 != nil:
    section.add "prettyPrint", valid_592622
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_592624: Call_DfareportingUserRolesUpdate_592612; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing user role.
  ## 
  let valid = call_592624.validator(path, query, header, formData, body)
  let scheme = call_592624.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592624.url(scheme.get, call_592624.host, call_592624.base,
                         call_592624.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592624, url, valid)

proc call*(call_592625: Call_DfareportingUserRolesUpdate_592612; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolesUpdate
  ## Updates an existing user role.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592626 = newJObject()
  var query_592627 = newJObject()
  var body_592628 = newJObject()
  add(path_592626, "profileId", newJString(profileId))
  add(query_592627, "fields", newJString(fields))
  add(query_592627, "quotaUser", newJString(quotaUser))
  add(query_592627, "alt", newJString(alt))
  add(query_592627, "oauth_token", newJString(oauthToken))
  add(query_592627, "userIp", newJString(userIp))
  add(query_592627, "key", newJString(key))
  if body != nil:
    body_592628 = body
  add(query_592627, "prettyPrint", newJBool(prettyPrint))
  result = call_592625.call(path_592626, query_592627, nil, nil, body_592628)

var dfareportingUserRolesUpdate* = Call_DfareportingUserRolesUpdate_592612(
    name: "dfareportingUserRolesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles",
    validator: validate_DfareportingUserRolesUpdate_592613,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesUpdate_592614,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesInsert_592629 = ref object of OpenApiRestCall_588466
proc url_DfareportingUserRolesInsert_592631(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesInsert_592630(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new user role.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592632 = path.getOrDefault("profileId")
  valid_592632 = validateParameter(valid_592632, JString, required = true,
                                 default = nil)
  if valid_592632 != nil:
    section.add "profileId", valid_592632
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592633 = query.getOrDefault("fields")
  valid_592633 = validateParameter(valid_592633, JString, required = false,
                                 default = nil)
  if valid_592633 != nil:
    section.add "fields", valid_592633
  var valid_592634 = query.getOrDefault("quotaUser")
  valid_592634 = validateParameter(valid_592634, JString, required = false,
                                 default = nil)
  if valid_592634 != nil:
    section.add "quotaUser", valid_592634
  var valid_592635 = query.getOrDefault("alt")
  valid_592635 = validateParameter(valid_592635, JString, required = false,
                                 default = newJString("json"))
  if valid_592635 != nil:
    section.add "alt", valid_592635
  var valid_592636 = query.getOrDefault("oauth_token")
  valid_592636 = validateParameter(valid_592636, JString, required = false,
                                 default = nil)
  if valid_592636 != nil:
    section.add "oauth_token", valid_592636
  var valid_592637 = query.getOrDefault("userIp")
  valid_592637 = validateParameter(valid_592637, JString, required = false,
                                 default = nil)
  if valid_592637 != nil:
    section.add "userIp", valid_592637
  var valid_592638 = query.getOrDefault("key")
  valid_592638 = validateParameter(valid_592638, JString, required = false,
                                 default = nil)
  if valid_592638 != nil:
    section.add "key", valid_592638
  var valid_592639 = query.getOrDefault("prettyPrint")
  valid_592639 = validateParameter(valid_592639, JBool, required = false,
                                 default = newJBool(true))
  if valid_592639 != nil:
    section.add "prettyPrint", valid_592639
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_592641: Call_DfareportingUserRolesInsert_592629; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new user role.
  ## 
  let valid = call_592641.validator(path, query, header, formData, body)
  let scheme = call_592641.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592641.url(scheme.get, call_592641.host, call_592641.base,
                         call_592641.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592641, url, valid)

proc call*(call_592642: Call_DfareportingUserRolesInsert_592629; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolesInsert
  ## Inserts a new user role.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592643 = newJObject()
  var query_592644 = newJObject()
  var body_592645 = newJObject()
  add(path_592643, "profileId", newJString(profileId))
  add(query_592644, "fields", newJString(fields))
  add(query_592644, "quotaUser", newJString(quotaUser))
  add(query_592644, "alt", newJString(alt))
  add(query_592644, "oauth_token", newJString(oauthToken))
  add(query_592644, "userIp", newJString(userIp))
  add(query_592644, "key", newJString(key))
  if body != nil:
    body_592645 = body
  add(query_592644, "prettyPrint", newJBool(prettyPrint))
  result = call_592642.call(path_592643, query_592644, nil, nil, body_592645)

var dfareportingUserRolesInsert* = Call_DfareportingUserRolesInsert_592629(
    name: "dfareportingUserRolesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles",
    validator: validate_DfareportingUserRolesInsert_592630,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesInsert_592631,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesList_592589 = ref object of OpenApiRestCall_588466
proc url_DfareportingUserRolesList_592591(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesList_592590(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of user roles, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592592 = path.getOrDefault("profileId")
  valid_592592 = validateParameter(valid_592592, JString, required = true,
                                 default = nil)
  if valid_592592 != nil:
    section.add "profileId", valid_592592
  result.add "path", section
  ## parameters in `query` object:
  ##   subaccountId: JString
  ##               : Select only user roles that belong to this subaccount.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "userrole*2015" will return objects with names like "userrole June 2015", "userrole April 2015", or simply "userrole 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "userrole" will match objects with name "my userrole", "userrole 2015", or simply "userrole".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   accountUserRoleOnly: JBool
  ##                      : Select only account level user roles not associated with any specific subaccount.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only user roles with the specified IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592593 = query.getOrDefault("subaccountId")
  valid_592593 = validateParameter(valid_592593, JString, required = false,
                                 default = nil)
  if valid_592593 != nil:
    section.add "subaccountId", valid_592593
  var valid_592594 = query.getOrDefault("fields")
  valid_592594 = validateParameter(valid_592594, JString, required = false,
                                 default = nil)
  if valid_592594 != nil:
    section.add "fields", valid_592594
  var valid_592595 = query.getOrDefault("pageToken")
  valid_592595 = validateParameter(valid_592595, JString, required = false,
                                 default = nil)
  if valid_592595 != nil:
    section.add "pageToken", valid_592595
  var valid_592596 = query.getOrDefault("quotaUser")
  valid_592596 = validateParameter(valid_592596, JString, required = false,
                                 default = nil)
  if valid_592596 != nil:
    section.add "quotaUser", valid_592596
  var valid_592597 = query.getOrDefault("sortField")
  valid_592597 = validateParameter(valid_592597, JString, required = false,
                                 default = newJString("ID"))
  if valid_592597 != nil:
    section.add "sortField", valid_592597
  var valid_592598 = query.getOrDefault("alt")
  valid_592598 = validateParameter(valid_592598, JString, required = false,
                                 default = newJString("json"))
  if valid_592598 != nil:
    section.add "alt", valid_592598
  var valid_592599 = query.getOrDefault("searchString")
  valid_592599 = validateParameter(valid_592599, JString, required = false,
                                 default = nil)
  if valid_592599 != nil:
    section.add "searchString", valid_592599
  var valid_592600 = query.getOrDefault("oauth_token")
  valid_592600 = validateParameter(valid_592600, JString, required = false,
                                 default = nil)
  if valid_592600 != nil:
    section.add "oauth_token", valid_592600
  var valid_592601 = query.getOrDefault("accountUserRoleOnly")
  valid_592601 = validateParameter(valid_592601, JBool, required = false, default = nil)
  if valid_592601 != nil:
    section.add "accountUserRoleOnly", valid_592601
  var valid_592602 = query.getOrDefault("userIp")
  valid_592602 = validateParameter(valid_592602, JString, required = false,
                                 default = nil)
  if valid_592602 != nil:
    section.add "userIp", valid_592602
  var valid_592603 = query.getOrDefault("maxResults")
  valid_592603 = validateParameter(valid_592603, JInt, required = false,
                                 default = newJInt(1000))
  if valid_592603 != nil:
    section.add "maxResults", valid_592603
  var valid_592604 = query.getOrDefault("ids")
  valid_592604 = validateParameter(valid_592604, JArray, required = false,
                                 default = nil)
  if valid_592604 != nil:
    section.add "ids", valid_592604
  var valid_592605 = query.getOrDefault("key")
  valid_592605 = validateParameter(valid_592605, JString, required = false,
                                 default = nil)
  if valid_592605 != nil:
    section.add "key", valid_592605
  var valid_592606 = query.getOrDefault("sortOrder")
  valid_592606 = validateParameter(valid_592606, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_592606 != nil:
    section.add "sortOrder", valid_592606
  var valid_592607 = query.getOrDefault("prettyPrint")
  valid_592607 = validateParameter(valid_592607, JBool, required = false,
                                 default = newJBool(true))
  if valid_592607 != nil:
    section.add "prettyPrint", valid_592607
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592608: Call_DfareportingUserRolesList_592589; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of user roles, possibly filtered. This method supports paging.
  ## 
  let valid = call_592608.validator(path, query, header, formData, body)
  let scheme = call_592608.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592608.url(scheme.get, call_592608.host, call_592608.base,
                         call_592608.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592608, url, valid)

proc call*(call_592609: Call_DfareportingUserRolesList_592589; profileId: string;
          subaccountId: string = ""; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = "";
          accountUserRoleOnly: bool = false; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolesList
  ## Retrieves a list of user roles, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   subaccountId: string
  ##               : Select only user roles that belong to this subaccount.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "userrole*2015" will return objects with names like "userrole June 2015", "userrole April 2015", or simply "userrole 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "userrole" will match objects with name "my userrole", "userrole 2015", or simply "userrole".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   accountUserRoleOnly: bool
  ##                      : Select only account level user roles not associated with any specific subaccount.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only user roles with the specified IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592610 = newJObject()
  var query_592611 = newJObject()
  add(path_592610, "profileId", newJString(profileId))
  add(query_592611, "subaccountId", newJString(subaccountId))
  add(query_592611, "fields", newJString(fields))
  add(query_592611, "pageToken", newJString(pageToken))
  add(query_592611, "quotaUser", newJString(quotaUser))
  add(query_592611, "sortField", newJString(sortField))
  add(query_592611, "alt", newJString(alt))
  add(query_592611, "searchString", newJString(searchString))
  add(query_592611, "oauth_token", newJString(oauthToken))
  add(query_592611, "accountUserRoleOnly", newJBool(accountUserRoleOnly))
  add(query_592611, "userIp", newJString(userIp))
  add(query_592611, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_592611.add "ids", ids
  add(query_592611, "key", newJString(key))
  add(query_592611, "sortOrder", newJString(sortOrder))
  add(query_592611, "prettyPrint", newJBool(prettyPrint))
  result = call_592609.call(path_592610, query_592611, nil, nil, nil)

var dfareportingUserRolesList* = Call_DfareportingUserRolesList_592589(
    name: "dfareportingUserRolesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles",
    validator: validate_DfareportingUserRolesList_592590,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesList_592591,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesPatch_592646 = ref object of OpenApiRestCall_588466
proc url_DfareportingUserRolesPatch_592648(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesPatch_592647(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing user role. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592649 = path.getOrDefault("profileId")
  valid_592649 = validateParameter(valid_592649, JString, required = true,
                                 default = nil)
  if valid_592649 != nil:
    section.add "profileId", valid_592649
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : User role ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592650 = query.getOrDefault("fields")
  valid_592650 = validateParameter(valid_592650, JString, required = false,
                                 default = nil)
  if valid_592650 != nil:
    section.add "fields", valid_592650
  var valid_592651 = query.getOrDefault("quotaUser")
  valid_592651 = validateParameter(valid_592651, JString, required = false,
                                 default = nil)
  if valid_592651 != nil:
    section.add "quotaUser", valid_592651
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_592652 = query.getOrDefault("id")
  valid_592652 = validateParameter(valid_592652, JString, required = true,
                                 default = nil)
  if valid_592652 != nil:
    section.add "id", valid_592652
  var valid_592653 = query.getOrDefault("alt")
  valid_592653 = validateParameter(valid_592653, JString, required = false,
                                 default = newJString("json"))
  if valid_592653 != nil:
    section.add "alt", valid_592653
  var valid_592654 = query.getOrDefault("oauth_token")
  valid_592654 = validateParameter(valid_592654, JString, required = false,
                                 default = nil)
  if valid_592654 != nil:
    section.add "oauth_token", valid_592654
  var valid_592655 = query.getOrDefault("userIp")
  valid_592655 = validateParameter(valid_592655, JString, required = false,
                                 default = nil)
  if valid_592655 != nil:
    section.add "userIp", valid_592655
  var valid_592656 = query.getOrDefault("key")
  valid_592656 = validateParameter(valid_592656, JString, required = false,
                                 default = nil)
  if valid_592656 != nil:
    section.add "key", valid_592656
  var valid_592657 = query.getOrDefault("prettyPrint")
  valid_592657 = validateParameter(valid_592657, JBool, required = false,
                                 default = newJBool(true))
  if valid_592657 != nil:
    section.add "prettyPrint", valid_592657
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_592659: Call_DfareportingUserRolesPatch_592646; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing user role. This method supports patch semantics.
  ## 
  let valid = call_592659.validator(path, query, header, formData, body)
  let scheme = call_592659.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592659.url(scheme.get, call_592659.host, call_592659.base,
                         call_592659.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592659, url, valid)

proc call*(call_592660: Call_DfareportingUserRolesPatch_592646; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolesPatch
  ## Updates an existing user role. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : User role ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592661 = newJObject()
  var query_592662 = newJObject()
  var body_592663 = newJObject()
  add(path_592661, "profileId", newJString(profileId))
  add(query_592662, "fields", newJString(fields))
  add(query_592662, "quotaUser", newJString(quotaUser))
  add(query_592662, "id", newJString(id))
  add(query_592662, "alt", newJString(alt))
  add(query_592662, "oauth_token", newJString(oauthToken))
  add(query_592662, "userIp", newJString(userIp))
  add(query_592662, "key", newJString(key))
  if body != nil:
    body_592663 = body
  add(query_592662, "prettyPrint", newJBool(prettyPrint))
  result = call_592660.call(path_592661, query_592662, nil, nil, body_592663)

var dfareportingUserRolesPatch* = Call_DfareportingUserRolesPatch_592646(
    name: "dfareportingUserRolesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles",
    validator: validate_DfareportingUserRolesPatch_592647,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesPatch_592648,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesGet_592664 = ref object of OpenApiRestCall_588466
proc url_DfareportingUserRolesGet_592666(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesGet_592665(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one user role by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User role ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592667 = path.getOrDefault("profileId")
  valid_592667 = validateParameter(valid_592667, JString, required = true,
                                 default = nil)
  if valid_592667 != nil:
    section.add "profileId", valid_592667
  var valid_592668 = path.getOrDefault("id")
  valid_592668 = validateParameter(valid_592668, JString, required = true,
                                 default = nil)
  if valid_592668 != nil:
    section.add "id", valid_592668
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592669 = query.getOrDefault("fields")
  valid_592669 = validateParameter(valid_592669, JString, required = false,
                                 default = nil)
  if valid_592669 != nil:
    section.add "fields", valid_592669
  var valid_592670 = query.getOrDefault("quotaUser")
  valid_592670 = validateParameter(valid_592670, JString, required = false,
                                 default = nil)
  if valid_592670 != nil:
    section.add "quotaUser", valid_592670
  var valid_592671 = query.getOrDefault("alt")
  valid_592671 = validateParameter(valid_592671, JString, required = false,
                                 default = newJString("json"))
  if valid_592671 != nil:
    section.add "alt", valid_592671
  var valid_592672 = query.getOrDefault("oauth_token")
  valid_592672 = validateParameter(valid_592672, JString, required = false,
                                 default = nil)
  if valid_592672 != nil:
    section.add "oauth_token", valid_592672
  var valid_592673 = query.getOrDefault("userIp")
  valid_592673 = validateParameter(valid_592673, JString, required = false,
                                 default = nil)
  if valid_592673 != nil:
    section.add "userIp", valid_592673
  var valid_592674 = query.getOrDefault("key")
  valid_592674 = validateParameter(valid_592674, JString, required = false,
                                 default = nil)
  if valid_592674 != nil:
    section.add "key", valid_592674
  var valid_592675 = query.getOrDefault("prettyPrint")
  valid_592675 = validateParameter(valid_592675, JBool, required = false,
                                 default = newJBool(true))
  if valid_592675 != nil:
    section.add "prettyPrint", valid_592675
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592676: Call_DfareportingUserRolesGet_592664; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one user role by ID.
  ## 
  let valid = call_592676.validator(path, query, header, formData, body)
  let scheme = call_592676.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592676.url(scheme.get, call_592676.host, call_592676.base,
                         call_592676.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592676, url, valid)

proc call*(call_592677: Call_DfareportingUserRolesGet_592664; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolesGet
  ## Gets one user role by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : User role ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592678 = newJObject()
  var query_592679 = newJObject()
  add(path_592678, "profileId", newJString(profileId))
  add(query_592679, "fields", newJString(fields))
  add(query_592679, "quotaUser", newJString(quotaUser))
  add(query_592679, "alt", newJString(alt))
  add(query_592679, "oauth_token", newJString(oauthToken))
  add(query_592679, "userIp", newJString(userIp))
  add(path_592678, "id", newJString(id))
  add(query_592679, "key", newJString(key))
  add(query_592679, "prettyPrint", newJBool(prettyPrint))
  result = call_592677.call(path_592678, query_592679, nil, nil, nil)

var dfareportingUserRolesGet* = Call_DfareportingUserRolesGet_592664(
    name: "dfareportingUserRolesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles/{id}",
    validator: validate_DfareportingUserRolesGet_592665,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesGet_592666,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesDelete_592680 = ref object of OpenApiRestCall_588466
proc url_DfareportingUserRolesDelete_592682(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesDelete_592681(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing user role.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User role ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592683 = path.getOrDefault("profileId")
  valid_592683 = validateParameter(valid_592683, JString, required = true,
                                 default = nil)
  if valid_592683 != nil:
    section.add "profileId", valid_592683
  var valid_592684 = path.getOrDefault("id")
  valid_592684 = validateParameter(valid_592684, JString, required = true,
                                 default = nil)
  if valid_592684 != nil:
    section.add "id", valid_592684
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592685 = query.getOrDefault("fields")
  valid_592685 = validateParameter(valid_592685, JString, required = false,
                                 default = nil)
  if valid_592685 != nil:
    section.add "fields", valid_592685
  var valid_592686 = query.getOrDefault("quotaUser")
  valid_592686 = validateParameter(valid_592686, JString, required = false,
                                 default = nil)
  if valid_592686 != nil:
    section.add "quotaUser", valid_592686
  var valid_592687 = query.getOrDefault("alt")
  valid_592687 = validateParameter(valid_592687, JString, required = false,
                                 default = newJString("json"))
  if valid_592687 != nil:
    section.add "alt", valid_592687
  var valid_592688 = query.getOrDefault("oauth_token")
  valid_592688 = validateParameter(valid_592688, JString, required = false,
                                 default = nil)
  if valid_592688 != nil:
    section.add "oauth_token", valid_592688
  var valid_592689 = query.getOrDefault("userIp")
  valid_592689 = validateParameter(valid_592689, JString, required = false,
                                 default = nil)
  if valid_592689 != nil:
    section.add "userIp", valid_592689
  var valid_592690 = query.getOrDefault("key")
  valid_592690 = validateParameter(valid_592690, JString, required = false,
                                 default = nil)
  if valid_592690 != nil:
    section.add "key", valid_592690
  var valid_592691 = query.getOrDefault("prettyPrint")
  valid_592691 = validateParameter(valid_592691, JBool, required = false,
                                 default = newJBool(true))
  if valid_592691 != nil:
    section.add "prettyPrint", valid_592691
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592692: Call_DfareportingUserRolesDelete_592680; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing user role.
  ## 
  let valid = call_592692.validator(path, query, header, formData, body)
  let scheme = call_592692.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592692.url(scheme.get, call_592692.host, call_592692.base,
                         call_592692.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592692, url, valid)

proc call*(call_592693: Call_DfareportingUserRolesDelete_592680; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolesDelete
  ## Deletes an existing user role.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : User role ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592694 = newJObject()
  var query_592695 = newJObject()
  add(path_592694, "profileId", newJString(profileId))
  add(query_592695, "fields", newJString(fields))
  add(query_592695, "quotaUser", newJString(quotaUser))
  add(query_592695, "alt", newJString(alt))
  add(query_592695, "oauth_token", newJString(oauthToken))
  add(query_592695, "userIp", newJString(userIp))
  add(path_592694, "id", newJString(id))
  add(query_592695, "key", newJString(key))
  add(query_592695, "prettyPrint", newJBool(prettyPrint))
  result = call_592693.call(path_592694, query_592695, nil, nil, nil)

var dfareportingUserRolesDelete* = Call_DfareportingUserRolesDelete_592680(
    name: "dfareportingUserRolesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles/{id}",
    validator: validate_DfareportingUserRolesDelete_592681,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesDelete_592682,
    schemes: {Scheme.Https})
type
  Call_DfareportingVideoFormatsList_592696 = ref object of OpenApiRestCall_588466
proc url_DfareportingVideoFormatsList_592698(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/videoFormats")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingVideoFormatsList_592697(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available video formats.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592699 = path.getOrDefault("profileId")
  valid_592699 = validateParameter(valid_592699, JString, required = true,
                                 default = nil)
  if valid_592699 != nil:
    section.add "profileId", valid_592699
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592700 = query.getOrDefault("fields")
  valid_592700 = validateParameter(valid_592700, JString, required = false,
                                 default = nil)
  if valid_592700 != nil:
    section.add "fields", valid_592700
  var valid_592701 = query.getOrDefault("quotaUser")
  valid_592701 = validateParameter(valid_592701, JString, required = false,
                                 default = nil)
  if valid_592701 != nil:
    section.add "quotaUser", valid_592701
  var valid_592702 = query.getOrDefault("alt")
  valid_592702 = validateParameter(valid_592702, JString, required = false,
                                 default = newJString("json"))
  if valid_592702 != nil:
    section.add "alt", valid_592702
  var valid_592703 = query.getOrDefault("oauth_token")
  valid_592703 = validateParameter(valid_592703, JString, required = false,
                                 default = nil)
  if valid_592703 != nil:
    section.add "oauth_token", valid_592703
  var valid_592704 = query.getOrDefault("userIp")
  valid_592704 = validateParameter(valid_592704, JString, required = false,
                                 default = nil)
  if valid_592704 != nil:
    section.add "userIp", valid_592704
  var valid_592705 = query.getOrDefault("key")
  valid_592705 = validateParameter(valid_592705, JString, required = false,
                                 default = nil)
  if valid_592705 != nil:
    section.add "key", valid_592705
  var valid_592706 = query.getOrDefault("prettyPrint")
  valid_592706 = validateParameter(valid_592706, JBool, required = false,
                                 default = newJBool(true))
  if valid_592706 != nil:
    section.add "prettyPrint", valid_592706
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592707: Call_DfareportingVideoFormatsList_592696; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists available video formats.
  ## 
  let valid = call_592707.validator(path, query, header, formData, body)
  let scheme = call_592707.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592707.url(scheme.get, call_592707.host, call_592707.base,
                         call_592707.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592707, url, valid)

proc call*(call_592708: Call_DfareportingVideoFormatsList_592696;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingVideoFormatsList
  ## Lists available video formats.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592709 = newJObject()
  var query_592710 = newJObject()
  add(path_592709, "profileId", newJString(profileId))
  add(query_592710, "fields", newJString(fields))
  add(query_592710, "quotaUser", newJString(quotaUser))
  add(query_592710, "alt", newJString(alt))
  add(query_592710, "oauth_token", newJString(oauthToken))
  add(query_592710, "userIp", newJString(userIp))
  add(query_592710, "key", newJString(key))
  add(query_592710, "prettyPrint", newJBool(prettyPrint))
  result = call_592708.call(path_592709, query_592710, nil, nil, nil)

var dfareportingVideoFormatsList* = Call_DfareportingVideoFormatsList_592696(
    name: "dfareportingVideoFormatsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/videoFormats",
    validator: validate_DfareportingVideoFormatsList_592697,
    base: "/dfareporting/v3.2", url: url_DfareportingVideoFormatsList_592698,
    schemes: {Scheme.Https})
type
  Call_DfareportingVideoFormatsGet_592711 = ref object of OpenApiRestCall_588466
proc url_DfareportingVideoFormatsGet_592713(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $composeQueryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/videoFormats/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingVideoFormatsGet_592712(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one video format by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JInt (required)
  ##     : Video format ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_592714 = path.getOrDefault("profileId")
  valid_592714 = validateParameter(valid_592714, JString, required = true,
                                 default = nil)
  if valid_592714 != nil:
    section.add "profileId", valid_592714
  var valid_592715 = path.getOrDefault("id")
  valid_592715 = validateParameter(valid_592715, JInt, required = true, default = nil)
  if valid_592715 != nil:
    section.add "id", valid_592715
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_592716 = query.getOrDefault("fields")
  valid_592716 = validateParameter(valid_592716, JString, required = false,
                                 default = nil)
  if valid_592716 != nil:
    section.add "fields", valid_592716
  var valid_592717 = query.getOrDefault("quotaUser")
  valid_592717 = validateParameter(valid_592717, JString, required = false,
                                 default = nil)
  if valid_592717 != nil:
    section.add "quotaUser", valid_592717
  var valid_592718 = query.getOrDefault("alt")
  valid_592718 = validateParameter(valid_592718, JString, required = false,
                                 default = newJString("json"))
  if valid_592718 != nil:
    section.add "alt", valid_592718
  var valid_592719 = query.getOrDefault("oauth_token")
  valid_592719 = validateParameter(valid_592719, JString, required = false,
                                 default = nil)
  if valid_592719 != nil:
    section.add "oauth_token", valid_592719
  var valid_592720 = query.getOrDefault("userIp")
  valid_592720 = validateParameter(valid_592720, JString, required = false,
                                 default = nil)
  if valid_592720 != nil:
    section.add "userIp", valid_592720
  var valid_592721 = query.getOrDefault("key")
  valid_592721 = validateParameter(valid_592721, JString, required = false,
                                 default = nil)
  if valid_592721 != nil:
    section.add "key", valid_592721
  var valid_592722 = query.getOrDefault("prettyPrint")
  valid_592722 = validateParameter(valid_592722, JBool, required = false,
                                 default = newJBool(true))
  if valid_592722 != nil:
    section.add "prettyPrint", valid_592722
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592723: Call_DfareportingVideoFormatsGet_592711; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one video format by ID.
  ## 
  let valid = call_592723.validator(path, query, header, formData, body)
  let scheme = call_592723.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592723.url(scheme.get, call_592723.host, call_592723.base,
                         call_592723.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592723, url, valid)

proc call*(call_592724: Call_DfareportingVideoFormatsGet_592711; profileId: string;
          id: int; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingVideoFormatsGet
  ## Gets one video format by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: int (required)
  ##     : Video format ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_592725 = newJObject()
  var query_592726 = newJObject()
  add(path_592725, "profileId", newJString(profileId))
  add(query_592726, "fields", newJString(fields))
  add(query_592726, "quotaUser", newJString(quotaUser))
  add(query_592726, "alt", newJString(alt))
  add(query_592726, "oauth_token", newJString(oauthToken))
  add(query_592726, "userIp", newJString(userIp))
  add(path_592725, "id", newJInt(id))
  add(query_592726, "key", newJString(key))
  add(query_592726, "prettyPrint", newJBool(prettyPrint))
  result = call_592724.call(path_592725, query_592726, nil, nil, nil)

var dfareportingVideoFormatsGet* = Call_DfareportingVideoFormatsGet_592711(
    name: "dfareportingVideoFormatsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/videoFormats/{id}",
    validator: validate_DfareportingVideoFormatsGet_592712,
    base: "/dfareporting/v3.2", url: url_DfareportingVideoFormatsGet_592713,
    schemes: {Scheme.Https})
export
  rest

type
  GoogleAuth = ref object
    endpoint*: Uri
    token: string
    expiry*: float64
    issued*: float64
    email: string
    key: string
    scope*: seq[string]
    form: string
    digest: Hash

const
  endpoint = "https://www.googleapis.com/oauth2/v4/token".parseUri
var auth = GoogleAuth(endpoint: endpoint)
proc hash(auth: GoogleAuth): Hash =
  ## yield differing values for effectively different auth payloads
  result = hash($auth.endpoint)
  result = result !& hash(auth.email)
  result = result !& hash(auth.key)
  result = result !& hash(auth.scope.join(" "))
  result = !$result

proc newAuthenticator*(path: string): GoogleAuth =
  let
    input = readFile(path)
    js = parseJson(input)
  auth.email = js["client_email"].getStr
  auth.key = js["private_key"].getStr
  result = auth

proc store(auth: var GoogleAuth; token: string; expiry: int; form: string) =
  auth.token = token
  auth.issued = epochTime()
  auth.expiry = auth.issued + expiry.float64
  auth.form = form
  auth.digest = auth.hash

proc authenticate*(fresh: float64 = 3600.0; lifetime: int = 3600): Future[bool] {.async.} =
  ## get or refresh an authentication token; provide `fresh`
  ## to ensure that the token won't expire in the next N seconds.
  ## provide `lifetime` to indicate how long the token should last.
  let clock = epochTime()
  if auth.expiry > clock + fresh:
    if auth.hash == auth.digest:
      return true
  let
    expiry = clock.int + lifetime
    header = JOSEHeader(alg: RS256, typ: "JWT")
    claims = %*{"iss": auth.email, "scope": auth.scope.join(" "),
              "aud": "https://www.googleapis.com/oauth2/v4/token", "exp": expiry,
              "iat": clock.int}
  var tok = JWT(header: header, claims: toClaims(claims))
  tok.sign(auth.key)
  let post = encodeQuery({"grant_type": "urn:ietf:params:oauth:grant-type:jwt-bearer",
                       "assertion": $tok}, usePlus = false, omitEq = false)
  var client = newAsyncHttpClient()
  client.headers = newHttpHeaders({"Content-Type": "application/x-www-form-urlencoded",
                                 "Content-Length": $post.len})
  let response = await client.request($auth.endpoint, HttpPost, body = post)
  if not response.code.is2xx:
    return false
  let body = await response.body
  client.close
  try:
    let js = parseJson(body)
    auth.store(js["access_token"].getStr, js["expires_in"].getInt,
               js["token_type"].getStr)
  except KeyError:
    return false
  except JsonParsingError:
    return false
  return true

proc composeQueryString(query: JsonNode): string =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs, usePlus = false, omitEq = false)

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  var headers = massageHeaders(input.getOrDefault("header"))
  let body = input.getOrDefault("body").getStr
  if auth.scope.len == 0:
    raise newException(ValueError, "specify authentication scopes")
  if not waitfor authenticate(fresh = 10.0):
    raise newException(IOError, "unable to refresh authentication token")
  headers.add ("Authorization", auth.form & " " & auth.token)
  headers.add ("Content-Type", "application/json")
  headers.add ("Content-Length", $body.len)
  result = newRecallable(call, url, headers, body = body)
