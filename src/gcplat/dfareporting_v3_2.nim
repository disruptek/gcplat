
import
  json, options, hashes, uri, openapi/rest, os, uri, strutils, httpcore

## auto-generated via openapi macro
## title: DCM/DFA Reporting And Trafficking
## version: v3.2
## termsOfService: https://developers.google.com/terms/
## license:
##     name: Creative Commons Attribution 3.0
##     url: http://creativecommons.org/licenses/by/3.0/
## 
## Manages your DoubleClick Campaign Manager ad campaigns and reports.
## 
## https://developers.google.com/doubleclick-advertisers/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_593437 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_593437](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_593437): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  gcpServiceName = "dfareporting"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_DfareportingFilesGet_593706 = ref object of OpenApiRestCall_593437
proc url_DfareportingFilesGet_593708(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "reportId" in path, "`reportId` is a required path parameter"
  assert "fileId" in path, "`fileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId"),
               (kind: ConstantSegment, value: "/files/"),
               (kind: VariableSegment, value: "fileId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFilesGet_593707(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a report file by its report ID and file ID. This method supports media download.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   fileId: JString (required)
  ##         : The ID of the report file.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `fileId` field"
  var valid_593834 = path.getOrDefault("fileId")
  valid_593834 = validateParameter(valid_593834, JString, required = true,
                                 default = nil)
  if valid_593834 != nil:
    section.add "fileId", valid_593834
  var valid_593835 = path.getOrDefault("reportId")
  valid_593835 = validateParameter(valid_593835, JString, required = true,
                                 default = nil)
  if valid_593835 != nil:
    section.add "reportId", valid_593835
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_593836 = query.getOrDefault("fields")
  valid_593836 = validateParameter(valid_593836, JString, required = false,
                                 default = nil)
  if valid_593836 != nil:
    section.add "fields", valid_593836
  var valid_593837 = query.getOrDefault("quotaUser")
  valid_593837 = validateParameter(valid_593837, JString, required = false,
                                 default = nil)
  if valid_593837 != nil:
    section.add "quotaUser", valid_593837
  var valid_593851 = query.getOrDefault("alt")
  valid_593851 = validateParameter(valid_593851, JString, required = false,
                                 default = newJString("json"))
  if valid_593851 != nil:
    section.add "alt", valid_593851
  var valid_593852 = query.getOrDefault("oauth_token")
  valid_593852 = validateParameter(valid_593852, JString, required = false,
                                 default = nil)
  if valid_593852 != nil:
    section.add "oauth_token", valid_593852
  var valid_593853 = query.getOrDefault("userIp")
  valid_593853 = validateParameter(valid_593853, JString, required = false,
                                 default = nil)
  if valid_593853 != nil:
    section.add "userIp", valid_593853
  var valid_593854 = query.getOrDefault("key")
  valid_593854 = validateParameter(valid_593854, JString, required = false,
                                 default = nil)
  if valid_593854 != nil:
    section.add "key", valid_593854
  var valid_593855 = query.getOrDefault("prettyPrint")
  valid_593855 = validateParameter(valid_593855, JBool, required = false,
                                 default = newJBool(true))
  if valid_593855 != nil:
    section.add "prettyPrint", valid_593855
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593878: Call_DfareportingFilesGet_593706; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a report file by its report ID and file ID. This method supports media download.
  ## 
  let valid = call_593878.validator(path, query, header, formData, body)
  let scheme = call_593878.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593878.url(scheme.get, call_593878.host, call_593878.base,
                         call_593878.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593878, url, valid)

proc call*(call_593949: Call_DfareportingFilesGet_593706; fileId: string;
          reportId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingFilesGet
  ## Retrieves a report file by its report ID and file ID. This method supports media download.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fileId: string (required)
  ##         : The ID of the report file.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_593950 = newJObject()
  var query_593952 = newJObject()
  add(query_593952, "fields", newJString(fields))
  add(query_593952, "quotaUser", newJString(quotaUser))
  add(path_593950, "fileId", newJString(fileId))
  add(query_593952, "alt", newJString(alt))
  add(query_593952, "oauth_token", newJString(oauthToken))
  add(query_593952, "userIp", newJString(userIp))
  add(query_593952, "key", newJString(key))
  add(path_593950, "reportId", newJString(reportId))
  add(query_593952, "prettyPrint", newJBool(prettyPrint))
  result = call_593949.call(path_593950, query_593952, nil, nil, nil)

var dfareportingFilesGet* = Call_DfareportingFilesGet_593706(
    name: "dfareportingFilesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/reports/{reportId}/files/{fileId}",
    validator: validate_DfareportingFilesGet_593707, base: "/dfareporting/v3.2",
    url: url_DfareportingFilesGet_593708, schemes: {Scheme.Https})
type
  Call_DfareportingUserProfilesList_593991 = ref object of OpenApiRestCall_593437
proc url_DfareportingUserProfilesList_593993(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_DfareportingUserProfilesList_593992(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves list of user profiles for a user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_593994 = query.getOrDefault("fields")
  valid_593994 = validateParameter(valid_593994, JString, required = false,
                                 default = nil)
  if valid_593994 != nil:
    section.add "fields", valid_593994
  var valid_593995 = query.getOrDefault("quotaUser")
  valid_593995 = validateParameter(valid_593995, JString, required = false,
                                 default = nil)
  if valid_593995 != nil:
    section.add "quotaUser", valid_593995
  var valid_593996 = query.getOrDefault("alt")
  valid_593996 = validateParameter(valid_593996, JString, required = false,
                                 default = newJString("json"))
  if valid_593996 != nil:
    section.add "alt", valid_593996
  var valid_593997 = query.getOrDefault("oauth_token")
  valid_593997 = validateParameter(valid_593997, JString, required = false,
                                 default = nil)
  if valid_593997 != nil:
    section.add "oauth_token", valid_593997
  var valid_593998 = query.getOrDefault("userIp")
  valid_593998 = validateParameter(valid_593998, JString, required = false,
                                 default = nil)
  if valid_593998 != nil:
    section.add "userIp", valid_593998
  var valid_593999 = query.getOrDefault("key")
  valid_593999 = validateParameter(valid_593999, JString, required = false,
                                 default = nil)
  if valid_593999 != nil:
    section.add "key", valid_593999
  var valid_594000 = query.getOrDefault("prettyPrint")
  valid_594000 = validateParameter(valid_594000, JBool, required = false,
                                 default = newJBool(true))
  if valid_594000 != nil:
    section.add "prettyPrint", valid_594000
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594001: Call_DfareportingUserProfilesList_593991; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves list of user profiles for a user.
  ## 
  let valid = call_594001.validator(path, query, header, formData, body)
  let scheme = call_594001.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594001.url(scheme.get, call_594001.host, call_594001.base,
                         call_594001.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594001, url, valid)

proc call*(call_594002: Call_DfareportingUserProfilesList_593991;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingUserProfilesList
  ## Retrieves list of user profiles for a user.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var query_594003 = newJObject()
  add(query_594003, "fields", newJString(fields))
  add(query_594003, "quotaUser", newJString(quotaUser))
  add(query_594003, "alt", newJString(alt))
  add(query_594003, "oauth_token", newJString(oauthToken))
  add(query_594003, "userIp", newJString(userIp))
  add(query_594003, "key", newJString(key))
  add(query_594003, "prettyPrint", newJBool(prettyPrint))
  result = call_594002.call(nil, query_594003, nil, nil, nil)

var dfareportingUserProfilesList* = Call_DfareportingUserProfilesList_593991(
    name: "dfareportingUserProfilesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles",
    validator: validate_DfareportingUserProfilesList_593992,
    base: "/dfareporting/v3.2", url: url_DfareportingUserProfilesList_593993,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserProfilesGet_594004 = ref object of OpenApiRestCall_593437
proc url_DfareportingUserProfilesGet_594006(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserProfilesGet_594005(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one user profile by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594007 = path.getOrDefault("profileId")
  valid_594007 = validateParameter(valid_594007, JString, required = true,
                                 default = nil)
  if valid_594007 != nil:
    section.add "profileId", valid_594007
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594008 = query.getOrDefault("fields")
  valid_594008 = validateParameter(valid_594008, JString, required = false,
                                 default = nil)
  if valid_594008 != nil:
    section.add "fields", valid_594008
  var valid_594009 = query.getOrDefault("quotaUser")
  valid_594009 = validateParameter(valid_594009, JString, required = false,
                                 default = nil)
  if valid_594009 != nil:
    section.add "quotaUser", valid_594009
  var valid_594010 = query.getOrDefault("alt")
  valid_594010 = validateParameter(valid_594010, JString, required = false,
                                 default = newJString("json"))
  if valid_594010 != nil:
    section.add "alt", valid_594010
  var valid_594011 = query.getOrDefault("oauth_token")
  valid_594011 = validateParameter(valid_594011, JString, required = false,
                                 default = nil)
  if valid_594011 != nil:
    section.add "oauth_token", valid_594011
  var valid_594012 = query.getOrDefault("userIp")
  valid_594012 = validateParameter(valid_594012, JString, required = false,
                                 default = nil)
  if valid_594012 != nil:
    section.add "userIp", valid_594012
  var valid_594013 = query.getOrDefault("key")
  valid_594013 = validateParameter(valid_594013, JString, required = false,
                                 default = nil)
  if valid_594013 != nil:
    section.add "key", valid_594013
  var valid_594014 = query.getOrDefault("prettyPrint")
  valid_594014 = validateParameter(valid_594014, JBool, required = false,
                                 default = newJBool(true))
  if valid_594014 != nil:
    section.add "prettyPrint", valid_594014
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594015: Call_DfareportingUserProfilesGet_594004; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one user profile by ID.
  ## 
  let valid = call_594015.validator(path, query, header, formData, body)
  let scheme = call_594015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594015.url(scheme.get, call_594015.host, call_594015.base,
                         call_594015.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594015, url, valid)

proc call*(call_594016: Call_DfareportingUserProfilesGet_594004; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingUserProfilesGet
  ## Gets one user profile by ID.
  ##   profileId: string (required)
  ##            : The user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594017 = newJObject()
  var query_594018 = newJObject()
  add(path_594017, "profileId", newJString(profileId))
  add(query_594018, "fields", newJString(fields))
  add(query_594018, "quotaUser", newJString(quotaUser))
  add(query_594018, "alt", newJString(alt))
  add(query_594018, "oauth_token", newJString(oauthToken))
  add(query_594018, "userIp", newJString(userIp))
  add(query_594018, "key", newJString(key))
  add(query_594018, "prettyPrint", newJBool(prettyPrint))
  result = call_594016.call(path_594017, query_594018, nil, nil, nil)

var dfareportingUserProfilesGet* = Call_DfareportingUserProfilesGet_594004(
    name: "dfareportingUserProfilesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}",
    validator: validate_DfareportingUserProfilesGet_594005,
    base: "/dfareporting/v3.2", url: url_DfareportingUserProfilesGet_594006,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountActiveAdSummariesGet_594019 = ref object of OpenApiRestCall_593437
proc url_DfareportingAccountActiveAdSummariesGet_594021(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "summaryAccountId" in path,
        "`summaryAccountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountActiveAdSummaries/"),
               (kind: VariableSegment, value: "summaryAccountId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountActiveAdSummariesGet_594020(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the account's active ad summary by account ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   summaryAccountId: JString (required)
  ##                   : Account ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594022 = path.getOrDefault("profileId")
  valid_594022 = validateParameter(valid_594022, JString, required = true,
                                 default = nil)
  if valid_594022 != nil:
    section.add "profileId", valid_594022
  var valid_594023 = path.getOrDefault("summaryAccountId")
  valid_594023 = validateParameter(valid_594023, JString, required = true,
                                 default = nil)
  if valid_594023 != nil:
    section.add "summaryAccountId", valid_594023
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594024 = query.getOrDefault("fields")
  valid_594024 = validateParameter(valid_594024, JString, required = false,
                                 default = nil)
  if valid_594024 != nil:
    section.add "fields", valid_594024
  var valid_594025 = query.getOrDefault("quotaUser")
  valid_594025 = validateParameter(valid_594025, JString, required = false,
                                 default = nil)
  if valid_594025 != nil:
    section.add "quotaUser", valid_594025
  var valid_594026 = query.getOrDefault("alt")
  valid_594026 = validateParameter(valid_594026, JString, required = false,
                                 default = newJString("json"))
  if valid_594026 != nil:
    section.add "alt", valid_594026
  var valid_594027 = query.getOrDefault("oauth_token")
  valid_594027 = validateParameter(valid_594027, JString, required = false,
                                 default = nil)
  if valid_594027 != nil:
    section.add "oauth_token", valid_594027
  var valid_594028 = query.getOrDefault("userIp")
  valid_594028 = validateParameter(valid_594028, JString, required = false,
                                 default = nil)
  if valid_594028 != nil:
    section.add "userIp", valid_594028
  var valid_594029 = query.getOrDefault("key")
  valid_594029 = validateParameter(valid_594029, JString, required = false,
                                 default = nil)
  if valid_594029 != nil:
    section.add "key", valid_594029
  var valid_594030 = query.getOrDefault("prettyPrint")
  valid_594030 = validateParameter(valid_594030, JBool, required = false,
                                 default = newJBool(true))
  if valid_594030 != nil:
    section.add "prettyPrint", valid_594030
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594031: Call_DfareportingAccountActiveAdSummariesGet_594019;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the account's active ad summary by account ID.
  ## 
  let valid = call_594031.validator(path, query, header, formData, body)
  let scheme = call_594031.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594031.url(scheme.get, call_594031.host, call_594031.base,
                         call_594031.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594031, url, valid)

proc call*(call_594032: Call_DfareportingAccountActiveAdSummariesGet_594019;
          profileId: string; summaryAccountId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountActiveAdSummariesGet
  ## Gets the account's active ad summary by account ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   summaryAccountId: string (required)
  ##                   : Account ID.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594033 = newJObject()
  var query_594034 = newJObject()
  add(path_594033, "profileId", newJString(profileId))
  add(query_594034, "fields", newJString(fields))
  add(query_594034, "quotaUser", newJString(quotaUser))
  add(query_594034, "alt", newJString(alt))
  add(query_594034, "oauth_token", newJString(oauthToken))
  add(query_594034, "userIp", newJString(userIp))
  add(query_594034, "key", newJString(key))
  add(path_594033, "summaryAccountId", newJString(summaryAccountId))
  add(query_594034, "prettyPrint", newJBool(prettyPrint))
  result = call_594032.call(path_594033, query_594034, nil, nil, nil)

var dfareportingAccountActiveAdSummariesGet* = Call_DfareportingAccountActiveAdSummariesGet_594019(
    name: "dfareportingAccountActiveAdSummariesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accountActiveAdSummaries/{summaryAccountId}",
    validator: validate_DfareportingAccountActiveAdSummariesGet_594020,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountActiveAdSummariesGet_594021,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountPermissionGroupsList_594035 = ref object of OpenApiRestCall_593437
proc url_DfareportingAccountPermissionGroupsList_594037(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountPermissionGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountPermissionGroupsList_594036(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the list of account permission groups.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594038 = path.getOrDefault("profileId")
  valid_594038 = validateParameter(valid_594038, JString, required = true,
                                 default = nil)
  if valid_594038 != nil:
    section.add "profileId", valid_594038
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594039 = query.getOrDefault("fields")
  valid_594039 = validateParameter(valid_594039, JString, required = false,
                                 default = nil)
  if valid_594039 != nil:
    section.add "fields", valid_594039
  var valid_594040 = query.getOrDefault("quotaUser")
  valid_594040 = validateParameter(valid_594040, JString, required = false,
                                 default = nil)
  if valid_594040 != nil:
    section.add "quotaUser", valid_594040
  var valid_594041 = query.getOrDefault("alt")
  valid_594041 = validateParameter(valid_594041, JString, required = false,
                                 default = newJString("json"))
  if valid_594041 != nil:
    section.add "alt", valid_594041
  var valid_594042 = query.getOrDefault("oauth_token")
  valid_594042 = validateParameter(valid_594042, JString, required = false,
                                 default = nil)
  if valid_594042 != nil:
    section.add "oauth_token", valid_594042
  var valid_594043 = query.getOrDefault("userIp")
  valid_594043 = validateParameter(valid_594043, JString, required = false,
                                 default = nil)
  if valid_594043 != nil:
    section.add "userIp", valid_594043
  var valid_594044 = query.getOrDefault("key")
  valid_594044 = validateParameter(valid_594044, JString, required = false,
                                 default = nil)
  if valid_594044 != nil:
    section.add "key", valid_594044
  var valid_594045 = query.getOrDefault("prettyPrint")
  valid_594045 = validateParameter(valid_594045, JBool, required = false,
                                 default = newJBool(true))
  if valid_594045 != nil:
    section.add "prettyPrint", valid_594045
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594046: Call_DfareportingAccountPermissionGroupsList_594035;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the list of account permission groups.
  ## 
  let valid = call_594046.validator(path, query, header, formData, body)
  let scheme = call_594046.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594046.url(scheme.get, call_594046.host, call_594046.base,
                         call_594046.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594046, url, valid)

proc call*(call_594047: Call_DfareportingAccountPermissionGroupsList_594035;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountPermissionGroupsList
  ## Retrieves the list of account permission groups.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594048 = newJObject()
  var query_594049 = newJObject()
  add(path_594048, "profileId", newJString(profileId))
  add(query_594049, "fields", newJString(fields))
  add(query_594049, "quotaUser", newJString(quotaUser))
  add(query_594049, "alt", newJString(alt))
  add(query_594049, "oauth_token", newJString(oauthToken))
  add(query_594049, "userIp", newJString(userIp))
  add(query_594049, "key", newJString(key))
  add(query_594049, "prettyPrint", newJBool(prettyPrint))
  result = call_594047.call(path_594048, query_594049, nil, nil, nil)

var dfareportingAccountPermissionGroupsList* = Call_DfareportingAccountPermissionGroupsList_594035(
    name: "dfareportingAccountPermissionGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountPermissionGroups",
    validator: validate_DfareportingAccountPermissionGroupsList_594036,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountPermissionGroupsList_594037,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountPermissionGroupsGet_594050 = ref object of OpenApiRestCall_593437
proc url_DfareportingAccountPermissionGroupsGet_594052(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountPermissionGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountPermissionGroupsGet_594051(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one account permission group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Account permission group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594053 = path.getOrDefault("profileId")
  valid_594053 = validateParameter(valid_594053, JString, required = true,
                                 default = nil)
  if valid_594053 != nil:
    section.add "profileId", valid_594053
  var valid_594054 = path.getOrDefault("id")
  valid_594054 = validateParameter(valid_594054, JString, required = true,
                                 default = nil)
  if valid_594054 != nil:
    section.add "id", valid_594054
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594055 = query.getOrDefault("fields")
  valid_594055 = validateParameter(valid_594055, JString, required = false,
                                 default = nil)
  if valid_594055 != nil:
    section.add "fields", valid_594055
  var valid_594056 = query.getOrDefault("quotaUser")
  valid_594056 = validateParameter(valid_594056, JString, required = false,
                                 default = nil)
  if valid_594056 != nil:
    section.add "quotaUser", valid_594056
  var valid_594057 = query.getOrDefault("alt")
  valid_594057 = validateParameter(valid_594057, JString, required = false,
                                 default = newJString("json"))
  if valid_594057 != nil:
    section.add "alt", valid_594057
  var valid_594058 = query.getOrDefault("oauth_token")
  valid_594058 = validateParameter(valid_594058, JString, required = false,
                                 default = nil)
  if valid_594058 != nil:
    section.add "oauth_token", valid_594058
  var valid_594059 = query.getOrDefault("userIp")
  valid_594059 = validateParameter(valid_594059, JString, required = false,
                                 default = nil)
  if valid_594059 != nil:
    section.add "userIp", valid_594059
  var valid_594060 = query.getOrDefault("key")
  valid_594060 = validateParameter(valid_594060, JString, required = false,
                                 default = nil)
  if valid_594060 != nil:
    section.add "key", valid_594060
  var valid_594061 = query.getOrDefault("prettyPrint")
  valid_594061 = validateParameter(valid_594061, JBool, required = false,
                                 default = newJBool(true))
  if valid_594061 != nil:
    section.add "prettyPrint", valid_594061
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594062: Call_DfareportingAccountPermissionGroupsGet_594050;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one account permission group by ID.
  ## 
  let valid = call_594062.validator(path, query, header, formData, body)
  let scheme = call_594062.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594062.url(scheme.get, call_594062.host, call_594062.base,
                         call_594062.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594062, url, valid)

proc call*(call_594063: Call_DfareportingAccountPermissionGroupsGet_594050;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountPermissionGroupsGet
  ## Gets one account permission group by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Account permission group ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594064 = newJObject()
  var query_594065 = newJObject()
  add(path_594064, "profileId", newJString(profileId))
  add(query_594065, "fields", newJString(fields))
  add(query_594065, "quotaUser", newJString(quotaUser))
  add(query_594065, "alt", newJString(alt))
  add(query_594065, "oauth_token", newJString(oauthToken))
  add(query_594065, "userIp", newJString(userIp))
  add(path_594064, "id", newJString(id))
  add(query_594065, "key", newJString(key))
  add(query_594065, "prettyPrint", newJBool(prettyPrint))
  result = call_594063.call(path_594064, query_594065, nil, nil, nil)

var dfareportingAccountPermissionGroupsGet* = Call_DfareportingAccountPermissionGroupsGet_594050(
    name: "dfareportingAccountPermissionGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountPermissionGroups/{id}",
    validator: validate_DfareportingAccountPermissionGroupsGet_594051,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountPermissionGroupsGet_594052,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountPermissionsList_594066 = ref object of OpenApiRestCall_593437
proc url_DfareportingAccountPermissionsList_594068(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountPermissions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountPermissionsList_594067(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the list of account permissions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594069 = path.getOrDefault("profileId")
  valid_594069 = validateParameter(valid_594069, JString, required = true,
                                 default = nil)
  if valid_594069 != nil:
    section.add "profileId", valid_594069
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594070 = query.getOrDefault("fields")
  valid_594070 = validateParameter(valid_594070, JString, required = false,
                                 default = nil)
  if valid_594070 != nil:
    section.add "fields", valid_594070
  var valid_594071 = query.getOrDefault("quotaUser")
  valid_594071 = validateParameter(valid_594071, JString, required = false,
                                 default = nil)
  if valid_594071 != nil:
    section.add "quotaUser", valid_594071
  var valid_594072 = query.getOrDefault("alt")
  valid_594072 = validateParameter(valid_594072, JString, required = false,
                                 default = newJString("json"))
  if valid_594072 != nil:
    section.add "alt", valid_594072
  var valid_594073 = query.getOrDefault("oauth_token")
  valid_594073 = validateParameter(valid_594073, JString, required = false,
                                 default = nil)
  if valid_594073 != nil:
    section.add "oauth_token", valid_594073
  var valid_594074 = query.getOrDefault("userIp")
  valid_594074 = validateParameter(valid_594074, JString, required = false,
                                 default = nil)
  if valid_594074 != nil:
    section.add "userIp", valid_594074
  var valid_594075 = query.getOrDefault("key")
  valid_594075 = validateParameter(valid_594075, JString, required = false,
                                 default = nil)
  if valid_594075 != nil:
    section.add "key", valid_594075
  var valid_594076 = query.getOrDefault("prettyPrint")
  valid_594076 = validateParameter(valid_594076, JBool, required = false,
                                 default = newJBool(true))
  if valid_594076 != nil:
    section.add "prettyPrint", valid_594076
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594077: Call_DfareportingAccountPermissionsList_594066;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the list of account permissions.
  ## 
  let valid = call_594077.validator(path, query, header, formData, body)
  let scheme = call_594077.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594077.url(scheme.get, call_594077.host, call_594077.base,
                         call_594077.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594077, url, valid)

proc call*(call_594078: Call_DfareportingAccountPermissionsList_594066;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountPermissionsList
  ## Retrieves the list of account permissions.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594079 = newJObject()
  var query_594080 = newJObject()
  add(path_594079, "profileId", newJString(profileId))
  add(query_594080, "fields", newJString(fields))
  add(query_594080, "quotaUser", newJString(quotaUser))
  add(query_594080, "alt", newJString(alt))
  add(query_594080, "oauth_token", newJString(oauthToken))
  add(query_594080, "userIp", newJString(userIp))
  add(query_594080, "key", newJString(key))
  add(query_594080, "prettyPrint", newJBool(prettyPrint))
  result = call_594078.call(path_594079, query_594080, nil, nil, nil)

var dfareportingAccountPermissionsList* = Call_DfareportingAccountPermissionsList_594066(
    name: "dfareportingAccountPermissionsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountPermissions",
    validator: validate_DfareportingAccountPermissionsList_594067,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountPermissionsList_594068,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountPermissionsGet_594081 = ref object of OpenApiRestCall_593437
proc url_DfareportingAccountPermissionsGet_594083(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountPermissions/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountPermissionsGet_594082(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one account permission by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Account permission ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594084 = path.getOrDefault("profileId")
  valid_594084 = validateParameter(valid_594084, JString, required = true,
                                 default = nil)
  if valid_594084 != nil:
    section.add "profileId", valid_594084
  var valid_594085 = path.getOrDefault("id")
  valid_594085 = validateParameter(valid_594085, JString, required = true,
                                 default = nil)
  if valid_594085 != nil:
    section.add "id", valid_594085
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594086 = query.getOrDefault("fields")
  valid_594086 = validateParameter(valid_594086, JString, required = false,
                                 default = nil)
  if valid_594086 != nil:
    section.add "fields", valid_594086
  var valid_594087 = query.getOrDefault("quotaUser")
  valid_594087 = validateParameter(valid_594087, JString, required = false,
                                 default = nil)
  if valid_594087 != nil:
    section.add "quotaUser", valid_594087
  var valid_594088 = query.getOrDefault("alt")
  valid_594088 = validateParameter(valid_594088, JString, required = false,
                                 default = newJString("json"))
  if valid_594088 != nil:
    section.add "alt", valid_594088
  var valid_594089 = query.getOrDefault("oauth_token")
  valid_594089 = validateParameter(valid_594089, JString, required = false,
                                 default = nil)
  if valid_594089 != nil:
    section.add "oauth_token", valid_594089
  var valid_594090 = query.getOrDefault("userIp")
  valid_594090 = validateParameter(valid_594090, JString, required = false,
                                 default = nil)
  if valid_594090 != nil:
    section.add "userIp", valid_594090
  var valid_594091 = query.getOrDefault("key")
  valid_594091 = validateParameter(valid_594091, JString, required = false,
                                 default = nil)
  if valid_594091 != nil:
    section.add "key", valid_594091
  var valid_594092 = query.getOrDefault("prettyPrint")
  valid_594092 = validateParameter(valid_594092, JBool, required = false,
                                 default = newJBool(true))
  if valid_594092 != nil:
    section.add "prettyPrint", valid_594092
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594093: Call_DfareportingAccountPermissionsGet_594081;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one account permission by ID.
  ## 
  let valid = call_594093.validator(path, query, header, formData, body)
  let scheme = call_594093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594093.url(scheme.get, call_594093.host, call_594093.base,
                         call_594093.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594093, url, valid)

proc call*(call_594094: Call_DfareportingAccountPermissionsGet_594081;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountPermissionsGet
  ## Gets one account permission by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Account permission ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594095 = newJObject()
  var query_594096 = newJObject()
  add(path_594095, "profileId", newJString(profileId))
  add(query_594096, "fields", newJString(fields))
  add(query_594096, "quotaUser", newJString(quotaUser))
  add(query_594096, "alt", newJString(alt))
  add(query_594096, "oauth_token", newJString(oauthToken))
  add(query_594096, "userIp", newJString(userIp))
  add(path_594095, "id", newJString(id))
  add(query_594096, "key", newJString(key))
  add(query_594096, "prettyPrint", newJBool(prettyPrint))
  result = call_594094.call(path_594095, query_594096, nil, nil, nil)

var dfareportingAccountPermissionsGet* = Call_DfareportingAccountPermissionsGet_594081(
    name: "dfareportingAccountPermissionsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountPermissions/{id}",
    validator: validate_DfareportingAccountPermissionsGet_594082,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountPermissionsGet_594083,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesUpdate_594122 = ref object of OpenApiRestCall_593437
proc url_DfareportingAccountUserProfilesUpdate_594124(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesUpdate_594123(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing account user profile.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594125 = path.getOrDefault("profileId")
  valid_594125 = validateParameter(valid_594125, JString, required = true,
                                 default = nil)
  if valid_594125 != nil:
    section.add "profileId", valid_594125
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594126 = query.getOrDefault("fields")
  valid_594126 = validateParameter(valid_594126, JString, required = false,
                                 default = nil)
  if valid_594126 != nil:
    section.add "fields", valid_594126
  var valid_594127 = query.getOrDefault("quotaUser")
  valid_594127 = validateParameter(valid_594127, JString, required = false,
                                 default = nil)
  if valid_594127 != nil:
    section.add "quotaUser", valid_594127
  var valid_594128 = query.getOrDefault("alt")
  valid_594128 = validateParameter(valid_594128, JString, required = false,
                                 default = newJString("json"))
  if valid_594128 != nil:
    section.add "alt", valid_594128
  var valid_594129 = query.getOrDefault("oauth_token")
  valid_594129 = validateParameter(valid_594129, JString, required = false,
                                 default = nil)
  if valid_594129 != nil:
    section.add "oauth_token", valid_594129
  var valid_594130 = query.getOrDefault("userIp")
  valid_594130 = validateParameter(valid_594130, JString, required = false,
                                 default = nil)
  if valid_594130 != nil:
    section.add "userIp", valid_594130
  var valid_594131 = query.getOrDefault("key")
  valid_594131 = validateParameter(valid_594131, JString, required = false,
                                 default = nil)
  if valid_594131 != nil:
    section.add "key", valid_594131
  var valid_594132 = query.getOrDefault("prettyPrint")
  valid_594132 = validateParameter(valid_594132, JBool, required = false,
                                 default = newJBool(true))
  if valid_594132 != nil:
    section.add "prettyPrint", valid_594132
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594134: Call_DfareportingAccountUserProfilesUpdate_594122;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing account user profile.
  ## 
  let valid = call_594134.validator(path, query, header, formData, body)
  let scheme = call_594134.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594134.url(scheme.get, call_594134.host, call_594134.base,
                         call_594134.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594134, url, valid)

proc call*(call_594135: Call_DfareportingAccountUserProfilesUpdate_594122;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountUserProfilesUpdate
  ## Updates an existing account user profile.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594136 = newJObject()
  var query_594137 = newJObject()
  var body_594138 = newJObject()
  add(path_594136, "profileId", newJString(profileId))
  add(query_594137, "fields", newJString(fields))
  add(query_594137, "quotaUser", newJString(quotaUser))
  add(query_594137, "alt", newJString(alt))
  add(query_594137, "oauth_token", newJString(oauthToken))
  add(query_594137, "userIp", newJString(userIp))
  add(query_594137, "key", newJString(key))
  if body != nil:
    body_594138 = body
  add(query_594137, "prettyPrint", newJBool(prettyPrint))
  result = call_594135.call(path_594136, query_594137, nil, nil, body_594138)

var dfareportingAccountUserProfilesUpdate* = Call_DfareportingAccountUserProfilesUpdate_594122(
    name: "dfareportingAccountUserProfilesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles",
    validator: validate_DfareportingAccountUserProfilesUpdate_594123,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountUserProfilesUpdate_594124,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesInsert_594139 = ref object of OpenApiRestCall_593437
proc url_DfareportingAccountUserProfilesInsert_594141(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesInsert_594140(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new account user profile.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594142 = path.getOrDefault("profileId")
  valid_594142 = validateParameter(valid_594142, JString, required = true,
                                 default = nil)
  if valid_594142 != nil:
    section.add "profileId", valid_594142
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594143 = query.getOrDefault("fields")
  valid_594143 = validateParameter(valid_594143, JString, required = false,
                                 default = nil)
  if valid_594143 != nil:
    section.add "fields", valid_594143
  var valid_594144 = query.getOrDefault("quotaUser")
  valid_594144 = validateParameter(valid_594144, JString, required = false,
                                 default = nil)
  if valid_594144 != nil:
    section.add "quotaUser", valid_594144
  var valid_594145 = query.getOrDefault("alt")
  valid_594145 = validateParameter(valid_594145, JString, required = false,
                                 default = newJString("json"))
  if valid_594145 != nil:
    section.add "alt", valid_594145
  var valid_594146 = query.getOrDefault("oauth_token")
  valid_594146 = validateParameter(valid_594146, JString, required = false,
                                 default = nil)
  if valid_594146 != nil:
    section.add "oauth_token", valid_594146
  var valid_594147 = query.getOrDefault("userIp")
  valid_594147 = validateParameter(valid_594147, JString, required = false,
                                 default = nil)
  if valid_594147 != nil:
    section.add "userIp", valid_594147
  var valid_594148 = query.getOrDefault("key")
  valid_594148 = validateParameter(valid_594148, JString, required = false,
                                 default = nil)
  if valid_594148 != nil:
    section.add "key", valid_594148
  var valid_594149 = query.getOrDefault("prettyPrint")
  valid_594149 = validateParameter(valid_594149, JBool, required = false,
                                 default = newJBool(true))
  if valid_594149 != nil:
    section.add "prettyPrint", valid_594149
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594151: Call_DfareportingAccountUserProfilesInsert_594139;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new account user profile.
  ## 
  let valid = call_594151.validator(path, query, header, formData, body)
  let scheme = call_594151.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594151.url(scheme.get, call_594151.host, call_594151.base,
                         call_594151.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594151, url, valid)

proc call*(call_594152: Call_DfareportingAccountUserProfilesInsert_594139;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountUserProfilesInsert
  ## Inserts a new account user profile.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594153 = newJObject()
  var query_594154 = newJObject()
  var body_594155 = newJObject()
  add(path_594153, "profileId", newJString(profileId))
  add(query_594154, "fields", newJString(fields))
  add(query_594154, "quotaUser", newJString(quotaUser))
  add(query_594154, "alt", newJString(alt))
  add(query_594154, "oauth_token", newJString(oauthToken))
  add(query_594154, "userIp", newJString(userIp))
  add(query_594154, "key", newJString(key))
  if body != nil:
    body_594155 = body
  add(query_594154, "prettyPrint", newJBool(prettyPrint))
  result = call_594152.call(path_594153, query_594154, nil, nil, body_594155)

var dfareportingAccountUserProfilesInsert* = Call_DfareportingAccountUserProfilesInsert_594139(
    name: "dfareportingAccountUserProfilesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles",
    validator: validate_DfareportingAccountUserProfilesInsert_594140,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountUserProfilesInsert_594141,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesList_594097 = ref object of OpenApiRestCall_593437
proc url_DfareportingAccountUserProfilesList_594099(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesList_594098(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of account user profiles, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594100 = path.getOrDefault("profileId")
  valid_594100 = validateParameter(valid_594100, JString, required = true,
                                 default = nil)
  if valid_594100 != nil:
    section.add "profileId", valid_594100
  result.add "path", section
  ## parameters in `query` object:
  ##   subaccountId: JString
  ##               : Select only user profiles with the specified subaccount ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "user profile*2015" will return objects with names like "user profile June 2015", "user profile April 2015", or simply "user profile 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "user profile" will match objects with name "my user profile", "user profile 2015", or simply "user profile".
  ##   active: JBool
  ##         : Select only active user profiles.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only user profiles with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   userRoleId: JString
  ##             : Select only user profiles with the specified user role ID.
  section = newJObject()
  var valid_594101 = query.getOrDefault("subaccountId")
  valid_594101 = validateParameter(valid_594101, JString, required = false,
                                 default = nil)
  if valid_594101 != nil:
    section.add "subaccountId", valid_594101
  var valid_594102 = query.getOrDefault("fields")
  valid_594102 = validateParameter(valid_594102, JString, required = false,
                                 default = nil)
  if valid_594102 != nil:
    section.add "fields", valid_594102
  var valid_594103 = query.getOrDefault("pageToken")
  valid_594103 = validateParameter(valid_594103, JString, required = false,
                                 default = nil)
  if valid_594103 != nil:
    section.add "pageToken", valid_594103
  var valid_594104 = query.getOrDefault("quotaUser")
  valid_594104 = validateParameter(valid_594104, JString, required = false,
                                 default = nil)
  if valid_594104 != nil:
    section.add "quotaUser", valid_594104
  var valid_594105 = query.getOrDefault("sortField")
  valid_594105 = validateParameter(valid_594105, JString, required = false,
                                 default = newJString("ID"))
  if valid_594105 != nil:
    section.add "sortField", valid_594105
  var valid_594106 = query.getOrDefault("alt")
  valid_594106 = validateParameter(valid_594106, JString, required = false,
                                 default = newJString("json"))
  if valid_594106 != nil:
    section.add "alt", valid_594106
  var valid_594107 = query.getOrDefault("searchString")
  valid_594107 = validateParameter(valid_594107, JString, required = false,
                                 default = nil)
  if valid_594107 != nil:
    section.add "searchString", valid_594107
  var valid_594108 = query.getOrDefault("active")
  valid_594108 = validateParameter(valid_594108, JBool, required = false, default = nil)
  if valid_594108 != nil:
    section.add "active", valid_594108
  var valid_594109 = query.getOrDefault("oauth_token")
  valid_594109 = validateParameter(valid_594109, JString, required = false,
                                 default = nil)
  if valid_594109 != nil:
    section.add "oauth_token", valid_594109
  var valid_594110 = query.getOrDefault("userIp")
  valid_594110 = validateParameter(valid_594110, JString, required = false,
                                 default = nil)
  if valid_594110 != nil:
    section.add "userIp", valid_594110
  var valid_594112 = query.getOrDefault("maxResults")
  valid_594112 = validateParameter(valid_594112, JInt, required = false,
                                 default = newJInt(1000))
  if valid_594112 != nil:
    section.add "maxResults", valid_594112
  var valid_594113 = query.getOrDefault("ids")
  valid_594113 = validateParameter(valid_594113, JArray, required = false,
                                 default = nil)
  if valid_594113 != nil:
    section.add "ids", valid_594113
  var valid_594114 = query.getOrDefault("key")
  valid_594114 = validateParameter(valid_594114, JString, required = false,
                                 default = nil)
  if valid_594114 != nil:
    section.add "key", valid_594114
  var valid_594115 = query.getOrDefault("sortOrder")
  valid_594115 = validateParameter(valid_594115, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_594115 != nil:
    section.add "sortOrder", valid_594115
  var valid_594116 = query.getOrDefault("prettyPrint")
  valid_594116 = validateParameter(valid_594116, JBool, required = false,
                                 default = newJBool(true))
  if valid_594116 != nil:
    section.add "prettyPrint", valid_594116
  var valid_594117 = query.getOrDefault("userRoleId")
  valid_594117 = validateParameter(valid_594117, JString, required = false,
                                 default = nil)
  if valid_594117 != nil:
    section.add "userRoleId", valid_594117
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594118: Call_DfareportingAccountUserProfilesList_594097;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of account user profiles, possibly filtered. This method supports paging.
  ## 
  let valid = call_594118.validator(path, query, header, formData, body)
  let scheme = call_594118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594118.url(scheme.get, call_594118.host, call_594118.base,
                         call_594118.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594118, url, valid)

proc call*(call_594119: Call_DfareportingAccountUserProfilesList_594097;
          profileId: string; subaccountId: string = ""; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; sortField: string = "ID";
          alt: string = "json"; searchString: string = ""; active: bool = false;
          oauthToken: string = ""; userIp: string = ""; maxResults: int = 1000;
          ids: JsonNode = nil; key: string = ""; sortOrder: string = "ASCENDING";
          prettyPrint: bool = true; userRoleId: string = ""): Recallable =
  ## dfareportingAccountUserProfilesList
  ## Retrieves a list of account user profiles, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   subaccountId: string
  ##               : Select only user profiles with the specified subaccount ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "user profile*2015" will return objects with names like "user profile June 2015", "user profile April 2015", or simply "user profile 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "user profile" will match objects with name "my user profile", "user profile 2015", or simply "user profile".
  ##   active: bool
  ##         : Select only active user profiles.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only user profiles with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   userRoleId: string
  ##             : Select only user profiles with the specified user role ID.
  var path_594120 = newJObject()
  var query_594121 = newJObject()
  add(path_594120, "profileId", newJString(profileId))
  add(query_594121, "subaccountId", newJString(subaccountId))
  add(query_594121, "fields", newJString(fields))
  add(query_594121, "pageToken", newJString(pageToken))
  add(query_594121, "quotaUser", newJString(quotaUser))
  add(query_594121, "sortField", newJString(sortField))
  add(query_594121, "alt", newJString(alt))
  add(query_594121, "searchString", newJString(searchString))
  add(query_594121, "active", newJBool(active))
  add(query_594121, "oauth_token", newJString(oauthToken))
  add(query_594121, "userIp", newJString(userIp))
  add(query_594121, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_594121.add "ids", ids
  add(query_594121, "key", newJString(key))
  add(query_594121, "sortOrder", newJString(sortOrder))
  add(query_594121, "prettyPrint", newJBool(prettyPrint))
  add(query_594121, "userRoleId", newJString(userRoleId))
  result = call_594119.call(path_594120, query_594121, nil, nil, nil)

var dfareportingAccountUserProfilesList* = Call_DfareportingAccountUserProfilesList_594097(
    name: "dfareportingAccountUserProfilesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles",
    validator: validate_DfareportingAccountUserProfilesList_594098,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountUserProfilesList_594099,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesPatch_594156 = ref object of OpenApiRestCall_593437
proc url_DfareportingAccountUserProfilesPatch_594158(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesPatch_594157(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing account user profile. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594159 = path.getOrDefault("profileId")
  valid_594159 = validateParameter(valid_594159, JString, required = true,
                                 default = nil)
  if valid_594159 != nil:
    section.add "profileId", valid_594159
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : User profile ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594160 = query.getOrDefault("fields")
  valid_594160 = validateParameter(valid_594160, JString, required = false,
                                 default = nil)
  if valid_594160 != nil:
    section.add "fields", valid_594160
  var valid_594161 = query.getOrDefault("quotaUser")
  valid_594161 = validateParameter(valid_594161, JString, required = false,
                                 default = nil)
  if valid_594161 != nil:
    section.add "quotaUser", valid_594161
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_594162 = query.getOrDefault("id")
  valid_594162 = validateParameter(valid_594162, JString, required = true,
                                 default = nil)
  if valid_594162 != nil:
    section.add "id", valid_594162
  var valid_594163 = query.getOrDefault("alt")
  valid_594163 = validateParameter(valid_594163, JString, required = false,
                                 default = newJString("json"))
  if valid_594163 != nil:
    section.add "alt", valid_594163
  var valid_594164 = query.getOrDefault("oauth_token")
  valid_594164 = validateParameter(valid_594164, JString, required = false,
                                 default = nil)
  if valid_594164 != nil:
    section.add "oauth_token", valid_594164
  var valid_594165 = query.getOrDefault("userIp")
  valid_594165 = validateParameter(valid_594165, JString, required = false,
                                 default = nil)
  if valid_594165 != nil:
    section.add "userIp", valid_594165
  var valid_594166 = query.getOrDefault("key")
  valid_594166 = validateParameter(valid_594166, JString, required = false,
                                 default = nil)
  if valid_594166 != nil:
    section.add "key", valid_594166
  var valid_594167 = query.getOrDefault("prettyPrint")
  valid_594167 = validateParameter(valid_594167, JBool, required = false,
                                 default = newJBool(true))
  if valid_594167 != nil:
    section.add "prettyPrint", valid_594167
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594169: Call_DfareportingAccountUserProfilesPatch_594156;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing account user profile. This method supports patch semantics.
  ## 
  let valid = call_594169.validator(path, query, header, formData, body)
  let scheme = call_594169.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594169.url(scheme.get, call_594169.host, call_594169.base,
                         call_594169.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594169, url, valid)

proc call*(call_594170: Call_DfareportingAccountUserProfilesPatch_594156;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountUserProfilesPatch
  ## Updates an existing account user profile. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : User profile ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594171 = newJObject()
  var query_594172 = newJObject()
  var body_594173 = newJObject()
  add(path_594171, "profileId", newJString(profileId))
  add(query_594172, "fields", newJString(fields))
  add(query_594172, "quotaUser", newJString(quotaUser))
  add(query_594172, "id", newJString(id))
  add(query_594172, "alt", newJString(alt))
  add(query_594172, "oauth_token", newJString(oauthToken))
  add(query_594172, "userIp", newJString(userIp))
  add(query_594172, "key", newJString(key))
  if body != nil:
    body_594173 = body
  add(query_594172, "prettyPrint", newJBool(prettyPrint))
  result = call_594170.call(path_594171, query_594172, nil, nil, body_594173)

var dfareportingAccountUserProfilesPatch* = Call_DfareportingAccountUserProfilesPatch_594156(
    name: "dfareportingAccountUserProfilesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles",
    validator: validate_DfareportingAccountUserProfilesPatch_594157,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountUserProfilesPatch_594158,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountUserProfilesGet_594174 = ref object of OpenApiRestCall_593437
proc url_DfareportingAccountUserProfilesGet_594176(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accountUserProfiles/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountUserProfilesGet_594175(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one account user profile by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594177 = path.getOrDefault("profileId")
  valid_594177 = validateParameter(valid_594177, JString, required = true,
                                 default = nil)
  if valid_594177 != nil:
    section.add "profileId", valid_594177
  var valid_594178 = path.getOrDefault("id")
  valid_594178 = validateParameter(valid_594178, JString, required = true,
                                 default = nil)
  if valid_594178 != nil:
    section.add "id", valid_594178
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594179 = query.getOrDefault("fields")
  valid_594179 = validateParameter(valid_594179, JString, required = false,
                                 default = nil)
  if valid_594179 != nil:
    section.add "fields", valid_594179
  var valid_594180 = query.getOrDefault("quotaUser")
  valid_594180 = validateParameter(valid_594180, JString, required = false,
                                 default = nil)
  if valid_594180 != nil:
    section.add "quotaUser", valid_594180
  var valid_594181 = query.getOrDefault("alt")
  valid_594181 = validateParameter(valid_594181, JString, required = false,
                                 default = newJString("json"))
  if valid_594181 != nil:
    section.add "alt", valid_594181
  var valid_594182 = query.getOrDefault("oauth_token")
  valid_594182 = validateParameter(valid_594182, JString, required = false,
                                 default = nil)
  if valid_594182 != nil:
    section.add "oauth_token", valid_594182
  var valid_594183 = query.getOrDefault("userIp")
  valid_594183 = validateParameter(valid_594183, JString, required = false,
                                 default = nil)
  if valid_594183 != nil:
    section.add "userIp", valid_594183
  var valid_594184 = query.getOrDefault("key")
  valid_594184 = validateParameter(valid_594184, JString, required = false,
                                 default = nil)
  if valid_594184 != nil:
    section.add "key", valid_594184
  var valid_594185 = query.getOrDefault("prettyPrint")
  valid_594185 = validateParameter(valid_594185, JBool, required = false,
                                 default = newJBool(true))
  if valid_594185 != nil:
    section.add "prettyPrint", valid_594185
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594186: Call_DfareportingAccountUserProfilesGet_594174;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one account user profile by ID.
  ## 
  let valid = call_594186.validator(path, query, header, formData, body)
  let scheme = call_594186.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594186.url(scheme.get, call_594186.host, call_594186.base,
                         call_594186.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594186, url, valid)

proc call*(call_594187: Call_DfareportingAccountUserProfilesGet_594174;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountUserProfilesGet
  ## Gets one account user profile by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : User profile ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594188 = newJObject()
  var query_594189 = newJObject()
  add(path_594188, "profileId", newJString(profileId))
  add(query_594189, "fields", newJString(fields))
  add(query_594189, "quotaUser", newJString(quotaUser))
  add(query_594189, "alt", newJString(alt))
  add(query_594189, "oauth_token", newJString(oauthToken))
  add(query_594189, "userIp", newJString(userIp))
  add(path_594188, "id", newJString(id))
  add(query_594189, "key", newJString(key))
  add(query_594189, "prettyPrint", newJBool(prettyPrint))
  result = call_594187.call(path_594188, query_594189, nil, nil, nil)

var dfareportingAccountUserProfilesGet* = Call_DfareportingAccountUserProfilesGet_594174(
    name: "dfareportingAccountUserProfilesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/accountUserProfiles/{id}",
    validator: validate_DfareportingAccountUserProfilesGet_594175,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountUserProfilesGet_594176,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountsUpdate_594212 = ref object of OpenApiRestCall_593437
proc url_DfareportingAccountsUpdate_594214(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountsUpdate_594213(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing account.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594215 = path.getOrDefault("profileId")
  valid_594215 = validateParameter(valid_594215, JString, required = true,
                                 default = nil)
  if valid_594215 != nil:
    section.add "profileId", valid_594215
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594216 = query.getOrDefault("fields")
  valid_594216 = validateParameter(valid_594216, JString, required = false,
                                 default = nil)
  if valid_594216 != nil:
    section.add "fields", valid_594216
  var valid_594217 = query.getOrDefault("quotaUser")
  valid_594217 = validateParameter(valid_594217, JString, required = false,
                                 default = nil)
  if valid_594217 != nil:
    section.add "quotaUser", valid_594217
  var valid_594218 = query.getOrDefault("alt")
  valid_594218 = validateParameter(valid_594218, JString, required = false,
                                 default = newJString("json"))
  if valid_594218 != nil:
    section.add "alt", valid_594218
  var valid_594219 = query.getOrDefault("oauth_token")
  valid_594219 = validateParameter(valid_594219, JString, required = false,
                                 default = nil)
  if valid_594219 != nil:
    section.add "oauth_token", valid_594219
  var valid_594220 = query.getOrDefault("userIp")
  valid_594220 = validateParameter(valid_594220, JString, required = false,
                                 default = nil)
  if valid_594220 != nil:
    section.add "userIp", valid_594220
  var valid_594221 = query.getOrDefault("key")
  valid_594221 = validateParameter(valid_594221, JString, required = false,
                                 default = nil)
  if valid_594221 != nil:
    section.add "key", valid_594221
  var valid_594222 = query.getOrDefault("prettyPrint")
  valid_594222 = validateParameter(valid_594222, JBool, required = false,
                                 default = newJBool(true))
  if valid_594222 != nil:
    section.add "prettyPrint", valid_594222
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594224: Call_DfareportingAccountsUpdate_594212; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing account.
  ## 
  let valid = call_594224.validator(path, query, header, formData, body)
  let scheme = call_594224.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594224.url(scheme.get, call_594224.host, call_594224.base,
                         call_594224.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594224, url, valid)

proc call*(call_594225: Call_DfareportingAccountsUpdate_594212; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountsUpdate
  ## Updates an existing account.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594226 = newJObject()
  var query_594227 = newJObject()
  var body_594228 = newJObject()
  add(path_594226, "profileId", newJString(profileId))
  add(query_594227, "fields", newJString(fields))
  add(query_594227, "quotaUser", newJString(quotaUser))
  add(query_594227, "alt", newJString(alt))
  add(query_594227, "oauth_token", newJString(oauthToken))
  add(query_594227, "userIp", newJString(userIp))
  add(query_594227, "key", newJString(key))
  if body != nil:
    body_594228 = body
  add(query_594227, "prettyPrint", newJBool(prettyPrint))
  result = call_594225.call(path_594226, query_594227, nil, nil, body_594228)

var dfareportingAccountsUpdate* = Call_DfareportingAccountsUpdate_594212(
    name: "dfareportingAccountsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accounts",
    validator: validate_DfareportingAccountsUpdate_594213,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountsUpdate_594214,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountsList_594190 = ref object of OpenApiRestCall_593437
proc url_DfareportingAccountsList_594192(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountsList_594191(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the list of accounts, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594193 = path.getOrDefault("profileId")
  valid_594193 = validateParameter(valid_594193, JString, required = true,
                                 default = nil)
  if valid_594193 != nil:
    section.add "profileId", valid_594193
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "account*2015" will return objects with names like "account June 2015", "account April 2015", or simply "account 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "account" will match objects with name "my account", "account 2015", or simply "account".
  ##   active: JBool
  ##         : Select only active accounts. Don't set this field to select both active and non-active accounts.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only accounts with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594194 = query.getOrDefault("fields")
  valid_594194 = validateParameter(valid_594194, JString, required = false,
                                 default = nil)
  if valid_594194 != nil:
    section.add "fields", valid_594194
  var valid_594195 = query.getOrDefault("pageToken")
  valid_594195 = validateParameter(valid_594195, JString, required = false,
                                 default = nil)
  if valid_594195 != nil:
    section.add "pageToken", valid_594195
  var valid_594196 = query.getOrDefault("quotaUser")
  valid_594196 = validateParameter(valid_594196, JString, required = false,
                                 default = nil)
  if valid_594196 != nil:
    section.add "quotaUser", valid_594196
  var valid_594197 = query.getOrDefault("sortField")
  valid_594197 = validateParameter(valid_594197, JString, required = false,
                                 default = newJString("ID"))
  if valid_594197 != nil:
    section.add "sortField", valid_594197
  var valid_594198 = query.getOrDefault("alt")
  valid_594198 = validateParameter(valid_594198, JString, required = false,
                                 default = newJString("json"))
  if valid_594198 != nil:
    section.add "alt", valid_594198
  var valid_594199 = query.getOrDefault("searchString")
  valid_594199 = validateParameter(valid_594199, JString, required = false,
                                 default = nil)
  if valid_594199 != nil:
    section.add "searchString", valid_594199
  var valid_594200 = query.getOrDefault("active")
  valid_594200 = validateParameter(valid_594200, JBool, required = false, default = nil)
  if valid_594200 != nil:
    section.add "active", valid_594200
  var valid_594201 = query.getOrDefault("oauth_token")
  valid_594201 = validateParameter(valid_594201, JString, required = false,
                                 default = nil)
  if valid_594201 != nil:
    section.add "oauth_token", valid_594201
  var valid_594202 = query.getOrDefault("userIp")
  valid_594202 = validateParameter(valid_594202, JString, required = false,
                                 default = nil)
  if valid_594202 != nil:
    section.add "userIp", valid_594202
  var valid_594203 = query.getOrDefault("maxResults")
  valid_594203 = validateParameter(valid_594203, JInt, required = false,
                                 default = newJInt(1000))
  if valid_594203 != nil:
    section.add "maxResults", valid_594203
  var valid_594204 = query.getOrDefault("ids")
  valid_594204 = validateParameter(valid_594204, JArray, required = false,
                                 default = nil)
  if valid_594204 != nil:
    section.add "ids", valid_594204
  var valid_594205 = query.getOrDefault("key")
  valid_594205 = validateParameter(valid_594205, JString, required = false,
                                 default = nil)
  if valid_594205 != nil:
    section.add "key", valid_594205
  var valid_594206 = query.getOrDefault("sortOrder")
  valid_594206 = validateParameter(valid_594206, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_594206 != nil:
    section.add "sortOrder", valid_594206
  var valid_594207 = query.getOrDefault("prettyPrint")
  valid_594207 = validateParameter(valid_594207, JBool, required = false,
                                 default = newJBool(true))
  if valid_594207 != nil:
    section.add "prettyPrint", valid_594207
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594208: Call_DfareportingAccountsList_594190; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the list of accounts, possibly filtered. This method supports paging.
  ## 
  let valid = call_594208.validator(path, query, header, formData, body)
  let scheme = call_594208.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594208.url(scheme.get, call_594208.host, call_594208.base,
                         call_594208.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594208, url, valid)

proc call*(call_594209: Call_DfareportingAccountsList_594190; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "ID"; alt: string = "json"; searchString: string = "";
          active: bool = false; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountsList
  ## Retrieves the list of accounts, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "account*2015" will return objects with names like "account June 2015", "account April 2015", or simply "account 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "account" will match objects with name "my account", "account 2015", or simply "account".
  ##   active: bool
  ##         : Select only active accounts. Don't set this field to select both active and non-active accounts.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only accounts with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594210 = newJObject()
  var query_594211 = newJObject()
  add(path_594210, "profileId", newJString(profileId))
  add(query_594211, "fields", newJString(fields))
  add(query_594211, "pageToken", newJString(pageToken))
  add(query_594211, "quotaUser", newJString(quotaUser))
  add(query_594211, "sortField", newJString(sortField))
  add(query_594211, "alt", newJString(alt))
  add(query_594211, "searchString", newJString(searchString))
  add(query_594211, "active", newJBool(active))
  add(query_594211, "oauth_token", newJString(oauthToken))
  add(query_594211, "userIp", newJString(userIp))
  add(query_594211, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_594211.add "ids", ids
  add(query_594211, "key", newJString(key))
  add(query_594211, "sortOrder", newJString(sortOrder))
  add(query_594211, "prettyPrint", newJBool(prettyPrint))
  result = call_594209.call(path_594210, query_594211, nil, nil, nil)

var dfareportingAccountsList* = Call_DfareportingAccountsList_594190(
    name: "dfareportingAccountsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accounts",
    validator: validate_DfareportingAccountsList_594191,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountsList_594192,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountsPatch_594229 = ref object of OpenApiRestCall_593437
proc url_DfareportingAccountsPatch_594231(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountsPatch_594230(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing account. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594232 = path.getOrDefault("profileId")
  valid_594232 = validateParameter(valid_594232, JString, required = true,
                                 default = nil)
  if valid_594232 != nil:
    section.add "profileId", valid_594232
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Account ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594233 = query.getOrDefault("fields")
  valid_594233 = validateParameter(valid_594233, JString, required = false,
                                 default = nil)
  if valid_594233 != nil:
    section.add "fields", valid_594233
  var valid_594234 = query.getOrDefault("quotaUser")
  valid_594234 = validateParameter(valid_594234, JString, required = false,
                                 default = nil)
  if valid_594234 != nil:
    section.add "quotaUser", valid_594234
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_594235 = query.getOrDefault("id")
  valid_594235 = validateParameter(valid_594235, JString, required = true,
                                 default = nil)
  if valid_594235 != nil:
    section.add "id", valid_594235
  var valid_594236 = query.getOrDefault("alt")
  valid_594236 = validateParameter(valid_594236, JString, required = false,
                                 default = newJString("json"))
  if valid_594236 != nil:
    section.add "alt", valid_594236
  var valid_594237 = query.getOrDefault("oauth_token")
  valid_594237 = validateParameter(valid_594237, JString, required = false,
                                 default = nil)
  if valid_594237 != nil:
    section.add "oauth_token", valid_594237
  var valid_594238 = query.getOrDefault("userIp")
  valid_594238 = validateParameter(valid_594238, JString, required = false,
                                 default = nil)
  if valid_594238 != nil:
    section.add "userIp", valid_594238
  var valid_594239 = query.getOrDefault("key")
  valid_594239 = validateParameter(valid_594239, JString, required = false,
                                 default = nil)
  if valid_594239 != nil:
    section.add "key", valid_594239
  var valid_594240 = query.getOrDefault("prettyPrint")
  valid_594240 = validateParameter(valid_594240, JBool, required = false,
                                 default = newJBool(true))
  if valid_594240 != nil:
    section.add "prettyPrint", valid_594240
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594242: Call_DfareportingAccountsPatch_594229; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing account. This method supports patch semantics.
  ## 
  let valid = call_594242.validator(path, query, header, formData, body)
  let scheme = call_594242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594242.url(scheme.get, call_594242.host, call_594242.base,
                         call_594242.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594242, url, valid)

proc call*(call_594243: Call_DfareportingAccountsPatch_594229; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAccountsPatch
  ## Updates an existing account. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Account ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594244 = newJObject()
  var query_594245 = newJObject()
  var body_594246 = newJObject()
  add(path_594244, "profileId", newJString(profileId))
  add(query_594245, "fields", newJString(fields))
  add(query_594245, "quotaUser", newJString(quotaUser))
  add(query_594245, "id", newJString(id))
  add(query_594245, "alt", newJString(alt))
  add(query_594245, "oauth_token", newJString(oauthToken))
  add(query_594245, "userIp", newJString(userIp))
  add(query_594245, "key", newJString(key))
  if body != nil:
    body_594246 = body
  add(query_594245, "prettyPrint", newJBool(prettyPrint))
  result = call_594243.call(path_594244, query_594245, nil, nil, body_594246)

var dfareportingAccountsPatch* = Call_DfareportingAccountsPatch_594229(
    name: "dfareportingAccountsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accounts",
    validator: validate_DfareportingAccountsPatch_594230,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountsPatch_594231,
    schemes: {Scheme.Https})
type
  Call_DfareportingAccountsGet_594247 = ref object of OpenApiRestCall_593437
proc url_DfareportingAccountsGet_594249(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/accounts/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAccountsGet_594248(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one account by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Account ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594250 = path.getOrDefault("profileId")
  valid_594250 = validateParameter(valid_594250, JString, required = true,
                                 default = nil)
  if valid_594250 != nil:
    section.add "profileId", valid_594250
  var valid_594251 = path.getOrDefault("id")
  valid_594251 = validateParameter(valid_594251, JString, required = true,
                                 default = nil)
  if valid_594251 != nil:
    section.add "id", valid_594251
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594252 = query.getOrDefault("fields")
  valid_594252 = validateParameter(valid_594252, JString, required = false,
                                 default = nil)
  if valid_594252 != nil:
    section.add "fields", valid_594252
  var valid_594253 = query.getOrDefault("quotaUser")
  valid_594253 = validateParameter(valid_594253, JString, required = false,
                                 default = nil)
  if valid_594253 != nil:
    section.add "quotaUser", valid_594253
  var valid_594254 = query.getOrDefault("alt")
  valid_594254 = validateParameter(valid_594254, JString, required = false,
                                 default = newJString("json"))
  if valid_594254 != nil:
    section.add "alt", valid_594254
  var valid_594255 = query.getOrDefault("oauth_token")
  valid_594255 = validateParameter(valid_594255, JString, required = false,
                                 default = nil)
  if valid_594255 != nil:
    section.add "oauth_token", valid_594255
  var valid_594256 = query.getOrDefault("userIp")
  valid_594256 = validateParameter(valid_594256, JString, required = false,
                                 default = nil)
  if valid_594256 != nil:
    section.add "userIp", valid_594256
  var valid_594257 = query.getOrDefault("key")
  valid_594257 = validateParameter(valid_594257, JString, required = false,
                                 default = nil)
  if valid_594257 != nil:
    section.add "key", valid_594257
  var valid_594258 = query.getOrDefault("prettyPrint")
  valid_594258 = validateParameter(valid_594258, JBool, required = false,
                                 default = newJBool(true))
  if valid_594258 != nil:
    section.add "prettyPrint", valid_594258
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594259: Call_DfareportingAccountsGet_594247; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one account by ID.
  ## 
  let valid = call_594259.validator(path, query, header, formData, body)
  let scheme = call_594259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594259.url(scheme.get, call_594259.host, call_594259.base,
                         call_594259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594259, url, valid)

proc call*(call_594260: Call_DfareportingAccountsGet_594247; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingAccountsGet
  ## Gets one account by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Account ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594261 = newJObject()
  var query_594262 = newJObject()
  add(path_594261, "profileId", newJString(profileId))
  add(query_594262, "fields", newJString(fields))
  add(query_594262, "quotaUser", newJString(quotaUser))
  add(query_594262, "alt", newJString(alt))
  add(query_594262, "oauth_token", newJString(oauthToken))
  add(query_594262, "userIp", newJString(userIp))
  add(path_594261, "id", newJString(id))
  add(query_594262, "key", newJString(key))
  add(query_594262, "prettyPrint", newJBool(prettyPrint))
  result = call_594260.call(path_594261, query_594262, nil, nil, nil)

var dfareportingAccountsGet* = Call_DfareportingAccountsGet_594247(
    name: "dfareportingAccountsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/accounts/{id}",
    validator: validate_DfareportingAccountsGet_594248,
    base: "/dfareporting/v3.2", url: url_DfareportingAccountsGet_594249,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdsUpdate_594301 = ref object of OpenApiRestCall_593437
proc url_DfareportingAdsUpdate_594303(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsUpdate_594302(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing ad.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594304 = path.getOrDefault("profileId")
  valid_594304 = validateParameter(valid_594304, JString, required = true,
                                 default = nil)
  if valid_594304 != nil:
    section.add "profileId", valid_594304
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594305 = query.getOrDefault("fields")
  valid_594305 = validateParameter(valid_594305, JString, required = false,
                                 default = nil)
  if valid_594305 != nil:
    section.add "fields", valid_594305
  var valid_594306 = query.getOrDefault("quotaUser")
  valid_594306 = validateParameter(valid_594306, JString, required = false,
                                 default = nil)
  if valid_594306 != nil:
    section.add "quotaUser", valid_594306
  var valid_594307 = query.getOrDefault("alt")
  valid_594307 = validateParameter(valid_594307, JString, required = false,
                                 default = newJString("json"))
  if valid_594307 != nil:
    section.add "alt", valid_594307
  var valid_594308 = query.getOrDefault("oauth_token")
  valid_594308 = validateParameter(valid_594308, JString, required = false,
                                 default = nil)
  if valid_594308 != nil:
    section.add "oauth_token", valid_594308
  var valid_594309 = query.getOrDefault("userIp")
  valid_594309 = validateParameter(valid_594309, JString, required = false,
                                 default = nil)
  if valid_594309 != nil:
    section.add "userIp", valid_594309
  var valid_594310 = query.getOrDefault("key")
  valid_594310 = validateParameter(valid_594310, JString, required = false,
                                 default = nil)
  if valid_594310 != nil:
    section.add "key", valid_594310
  var valid_594311 = query.getOrDefault("prettyPrint")
  valid_594311 = validateParameter(valid_594311, JBool, required = false,
                                 default = newJBool(true))
  if valid_594311 != nil:
    section.add "prettyPrint", valid_594311
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594313: Call_DfareportingAdsUpdate_594301; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing ad.
  ## 
  let valid = call_594313.validator(path, query, header, formData, body)
  let scheme = call_594313.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594313.url(scheme.get, call_594313.host, call_594313.base,
                         call_594313.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594313, url, valid)

proc call*(call_594314: Call_DfareportingAdsUpdate_594301; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdsUpdate
  ## Updates an existing ad.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594315 = newJObject()
  var query_594316 = newJObject()
  var body_594317 = newJObject()
  add(path_594315, "profileId", newJString(profileId))
  add(query_594316, "fields", newJString(fields))
  add(query_594316, "quotaUser", newJString(quotaUser))
  add(query_594316, "alt", newJString(alt))
  add(query_594316, "oauth_token", newJString(oauthToken))
  add(query_594316, "userIp", newJString(userIp))
  add(query_594316, "key", newJString(key))
  if body != nil:
    body_594317 = body
  add(query_594316, "prettyPrint", newJBool(prettyPrint))
  result = call_594314.call(path_594315, query_594316, nil, nil, body_594317)

var dfareportingAdsUpdate* = Call_DfareportingAdsUpdate_594301(
    name: "dfareportingAdsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads",
    validator: validate_DfareportingAdsUpdate_594302, base: "/dfareporting/v3.2",
    url: url_DfareportingAdsUpdate_594303, schemes: {Scheme.Https})
type
  Call_DfareportingAdsInsert_594318 = ref object of OpenApiRestCall_593437
proc url_DfareportingAdsInsert_594320(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsInsert_594319(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new ad.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594321 = path.getOrDefault("profileId")
  valid_594321 = validateParameter(valid_594321, JString, required = true,
                                 default = nil)
  if valid_594321 != nil:
    section.add "profileId", valid_594321
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594322 = query.getOrDefault("fields")
  valid_594322 = validateParameter(valid_594322, JString, required = false,
                                 default = nil)
  if valid_594322 != nil:
    section.add "fields", valid_594322
  var valid_594323 = query.getOrDefault("quotaUser")
  valid_594323 = validateParameter(valid_594323, JString, required = false,
                                 default = nil)
  if valid_594323 != nil:
    section.add "quotaUser", valid_594323
  var valid_594324 = query.getOrDefault("alt")
  valid_594324 = validateParameter(valid_594324, JString, required = false,
                                 default = newJString("json"))
  if valid_594324 != nil:
    section.add "alt", valid_594324
  var valid_594325 = query.getOrDefault("oauth_token")
  valid_594325 = validateParameter(valid_594325, JString, required = false,
                                 default = nil)
  if valid_594325 != nil:
    section.add "oauth_token", valid_594325
  var valid_594326 = query.getOrDefault("userIp")
  valid_594326 = validateParameter(valid_594326, JString, required = false,
                                 default = nil)
  if valid_594326 != nil:
    section.add "userIp", valid_594326
  var valid_594327 = query.getOrDefault("key")
  valid_594327 = validateParameter(valid_594327, JString, required = false,
                                 default = nil)
  if valid_594327 != nil:
    section.add "key", valid_594327
  var valid_594328 = query.getOrDefault("prettyPrint")
  valid_594328 = validateParameter(valid_594328, JBool, required = false,
                                 default = newJBool(true))
  if valid_594328 != nil:
    section.add "prettyPrint", valid_594328
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594330: Call_DfareportingAdsInsert_594318; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new ad.
  ## 
  let valid = call_594330.validator(path, query, header, formData, body)
  let scheme = call_594330.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594330.url(scheme.get, call_594330.host, call_594330.base,
                         call_594330.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594330, url, valid)

proc call*(call_594331: Call_DfareportingAdsInsert_594318; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdsInsert
  ## Inserts a new ad.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594332 = newJObject()
  var query_594333 = newJObject()
  var body_594334 = newJObject()
  add(path_594332, "profileId", newJString(profileId))
  add(query_594333, "fields", newJString(fields))
  add(query_594333, "quotaUser", newJString(quotaUser))
  add(query_594333, "alt", newJString(alt))
  add(query_594333, "oauth_token", newJString(oauthToken))
  add(query_594333, "userIp", newJString(userIp))
  add(query_594333, "key", newJString(key))
  if body != nil:
    body_594334 = body
  add(query_594333, "prettyPrint", newJBool(prettyPrint))
  result = call_594331.call(path_594332, query_594333, nil, nil, body_594334)

var dfareportingAdsInsert* = Call_DfareportingAdsInsert_594318(
    name: "dfareportingAdsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads",
    validator: validate_DfareportingAdsInsert_594319, base: "/dfareporting/v3.2",
    url: url_DfareportingAdsInsert_594320, schemes: {Scheme.Https})
type
  Call_DfareportingAdsList_594263 = ref object of OpenApiRestCall_593437
proc url_DfareportingAdsList_594265(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsList_594264(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Retrieves a list of ads, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594266 = path.getOrDefault("profileId")
  valid_594266 = validateParameter(valid_594266, JString, required = true,
                                 default = nil)
  if valid_594266 != nil:
    section.add "profileId", valid_594266
  result.add "path", section
  ## parameters in `query` object:
  ##   overriddenEventTagId: JString
  ##                       : Select only ads with this event tag override ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   creativeIds: JArray
  ##              : Select only ads with these creative IDs assigned.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   sslCompliant: JBool
  ##               : Select only ads that are SSL-compliant.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "ad*2015" will return objects with names like "ad June 2015", "ad April 2015", or simply "ad 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "ad" will match objects with name "my ad", "ad 2015", or simply "ad".
  ##   advertiserId: JString
  ##               : Select only ads with this advertiser ID.
  ##   dynamicClickTracker: JBool
  ##                      : Select only dynamic click trackers. Applicable when type is AD_SERVING_CLICK_TRACKER. If true, select dynamic click trackers. If false, select static click trackers. Leave unset to select both.
  ##   sizeIds: JArray
  ##          : Select only ads with these size IDs.
  ##   type: JArray
  ##       : Select only ads with these types.
  ##   active: JBool
  ##         : Select only active ads.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   campaignIds: JArray
  ##              : Select only ads with these campaign IDs.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   creativeOptimizationConfigurationIds: JArray
  ##                                       : Select only ads with these creative optimization configuration IDs.
  ##   archived: JBool
  ##           : Select only archived ads.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only ads with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   compatibility: JString
  ##                : Select default ads with the specified compatibility. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering an in-stream video ads developed with the VAST standard.
  ##   landingPageIds: JArray
  ##                 : Select only ads with these landing page IDs.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   remarketingListIds: JArray
  ##                     : Select only ads whose list targeting expression use these remarketing list IDs.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   sslRequired: JBool
  ##              : Select only ads that require SSL.
  ##   audienceSegmentIds: JArray
  ##                     : Select only ads with these audience segment IDs.
  ##   placementIds: JArray
  ##               : Select only ads with these placement IDs assigned.
  section = newJObject()
  var valid_594267 = query.getOrDefault("overriddenEventTagId")
  valid_594267 = validateParameter(valid_594267, JString, required = false,
                                 default = nil)
  if valid_594267 != nil:
    section.add "overriddenEventTagId", valid_594267
  var valid_594268 = query.getOrDefault("fields")
  valid_594268 = validateParameter(valid_594268, JString, required = false,
                                 default = nil)
  if valid_594268 != nil:
    section.add "fields", valid_594268
  var valid_594269 = query.getOrDefault("creativeIds")
  valid_594269 = validateParameter(valid_594269, JArray, required = false,
                                 default = nil)
  if valid_594269 != nil:
    section.add "creativeIds", valid_594269
  var valid_594270 = query.getOrDefault("quotaUser")
  valid_594270 = validateParameter(valid_594270, JString, required = false,
                                 default = nil)
  if valid_594270 != nil:
    section.add "quotaUser", valid_594270
  var valid_594271 = query.getOrDefault("pageToken")
  valid_594271 = validateParameter(valid_594271, JString, required = false,
                                 default = nil)
  if valid_594271 != nil:
    section.add "pageToken", valid_594271
  var valid_594272 = query.getOrDefault("sortField")
  valid_594272 = validateParameter(valid_594272, JString, required = false,
                                 default = newJString("ID"))
  if valid_594272 != nil:
    section.add "sortField", valid_594272
  var valid_594273 = query.getOrDefault("alt")
  valid_594273 = validateParameter(valid_594273, JString, required = false,
                                 default = newJString("json"))
  if valid_594273 != nil:
    section.add "alt", valid_594273
  var valid_594274 = query.getOrDefault("sslCompliant")
  valid_594274 = validateParameter(valid_594274, JBool, required = false, default = nil)
  if valid_594274 != nil:
    section.add "sslCompliant", valid_594274
  var valid_594275 = query.getOrDefault("searchString")
  valid_594275 = validateParameter(valid_594275, JString, required = false,
                                 default = nil)
  if valid_594275 != nil:
    section.add "searchString", valid_594275
  var valid_594276 = query.getOrDefault("advertiserId")
  valid_594276 = validateParameter(valid_594276, JString, required = false,
                                 default = nil)
  if valid_594276 != nil:
    section.add "advertiserId", valid_594276
  var valid_594277 = query.getOrDefault("dynamicClickTracker")
  valid_594277 = validateParameter(valid_594277, JBool, required = false, default = nil)
  if valid_594277 != nil:
    section.add "dynamicClickTracker", valid_594277
  var valid_594278 = query.getOrDefault("sizeIds")
  valid_594278 = validateParameter(valid_594278, JArray, required = false,
                                 default = nil)
  if valid_594278 != nil:
    section.add "sizeIds", valid_594278
  var valid_594279 = query.getOrDefault("type")
  valid_594279 = validateParameter(valid_594279, JArray, required = false,
                                 default = nil)
  if valid_594279 != nil:
    section.add "type", valid_594279
  var valid_594280 = query.getOrDefault("active")
  valid_594280 = validateParameter(valid_594280, JBool, required = false, default = nil)
  if valid_594280 != nil:
    section.add "active", valid_594280
  var valid_594281 = query.getOrDefault("oauth_token")
  valid_594281 = validateParameter(valid_594281, JString, required = false,
                                 default = nil)
  if valid_594281 != nil:
    section.add "oauth_token", valid_594281
  var valid_594282 = query.getOrDefault("campaignIds")
  valid_594282 = validateParameter(valid_594282, JArray, required = false,
                                 default = nil)
  if valid_594282 != nil:
    section.add "campaignIds", valid_594282
  var valid_594283 = query.getOrDefault("userIp")
  valid_594283 = validateParameter(valid_594283, JString, required = false,
                                 default = nil)
  if valid_594283 != nil:
    section.add "userIp", valid_594283
  var valid_594284 = query.getOrDefault("creativeOptimizationConfigurationIds")
  valid_594284 = validateParameter(valid_594284, JArray, required = false,
                                 default = nil)
  if valid_594284 != nil:
    section.add "creativeOptimizationConfigurationIds", valid_594284
  var valid_594285 = query.getOrDefault("archived")
  valid_594285 = validateParameter(valid_594285, JBool, required = false, default = nil)
  if valid_594285 != nil:
    section.add "archived", valid_594285
  var valid_594286 = query.getOrDefault("maxResults")
  valid_594286 = validateParameter(valid_594286, JInt, required = false,
                                 default = newJInt(1000))
  if valid_594286 != nil:
    section.add "maxResults", valid_594286
  var valid_594287 = query.getOrDefault("ids")
  valid_594287 = validateParameter(valid_594287, JArray, required = false,
                                 default = nil)
  if valid_594287 != nil:
    section.add "ids", valid_594287
  var valid_594288 = query.getOrDefault("key")
  valid_594288 = validateParameter(valid_594288, JString, required = false,
                                 default = nil)
  if valid_594288 != nil:
    section.add "key", valid_594288
  var valid_594289 = query.getOrDefault("compatibility")
  valid_594289 = validateParameter(valid_594289, JString, required = false,
                                 default = newJString("APP"))
  if valid_594289 != nil:
    section.add "compatibility", valid_594289
  var valid_594290 = query.getOrDefault("landingPageIds")
  valid_594290 = validateParameter(valid_594290, JArray, required = false,
                                 default = nil)
  if valid_594290 != nil:
    section.add "landingPageIds", valid_594290
  var valid_594291 = query.getOrDefault("sortOrder")
  valid_594291 = validateParameter(valid_594291, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_594291 != nil:
    section.add "sortOrder", valid_594291
  var valid_594292 = query.getOrDefault("remarketingListIds")
  valid_594292 = validateParameter(valid_594292, JArray, required = false,
                                 default = nil)
  if valid_594292 != nil:
    section.add "remarketingListIds", valid_594292
  var valid_594293 = query.getOrDefault("prettyPrint")
  valid_594293 = validateParameter(valid_594293, JBool, required = false,
                                 default = newJBool(true))
  if valid_594293 != nil:
    section.add "prettyPrint", valid_594293
  var valid_594294 = query.getOrDefault("sslRequired")
  valid_594294 = validateParameter(valid_594294, JBool, required = false, default = nil)
  if valid_594294 != nil:
    section.add "sslRequired", valid_594294
  var valid_594295 = query.getOrDefault("audienceSegmentIds")
  valid_594295 = validateParameter(valid_594295, JArray, required = false,
                                 default = nil)
  if valid_594295 != nil:
    section.add "audienceSegmentIds", valid_594295
  var valid_594296 = query.getOrDefault("placementIds")
  valid_594296 = validateParameter(valid_594296, JArray, required = false,
                                 default = nil)
  if valid_594296 != nil:
    section.add "placementIds", valid_594296
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594297: Call_DfareportingAdsList_594263; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of ads, possibly filtered. This method supports paging.
  ## 
  let valid = call_594297.validator(path, query, header, formData, body)
  let scheme = call_594297.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594297.url(scheme.get, call_594297.host, call_594297.base,
                         call_594297.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594297, url, valid)

proc call*(call_594298: Call_DfareportingAdsList_594263; profileId: string;
          overriddenEventTagId: string = ""; fields: string = "";
          creativeIds: JsonNode = nil; quotaUser: string = ""; pageToken: string = "";
          sortField: string = "ID"; alt: string = "json"; sslCompliant: bool = false;
          searchString: string = ""; advertiserId: string = "";
          dynamicClickTracker: bool = false; sizeIds: JsonNode = nil;
          `type`: JsonNode = nil; active: bool = false; oauthToken: string = "";
          campaignIds: JsonNode = nil; userIp: string = "";
          creativeOptimizationConfigurationIds: JsonNode = nil;
          archived: bool = false; maxResults: int = 1000; ids: JsonNode = nil;
          key: string = ""; compatibility: string = "APP";
          landingPageIds: JsonNode = nil; sortOrder: string = "ASCENDING";
          remarketingListIds: JsonNode = nil; prettyPrint: bool = true;
          sslRequired: bool = false; audienceSegmentIds: JsonNode = nil;
          placementIds: JsonNode = nil): Recallable =
  ## dfareportingAdsList
  ## Retrieves a list of ads, possibly filtered. This method supports paging.
  ##   overriddenEventTagId: string
  ##                       : Select only ads with this event tag override ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   creativeIds: JArray
  ##              : Select only ads with these creative IDs assigned.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   sslCompliant: bool
  ##               : Select only ads that are SSL-compliant.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "ad*2015" will return objects with names like "ad June 2015", "ad April 2015", or simply "ad 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "ad" will match objects with name "my ad", "ad 2015", or simply "ad".
  ##   advertiserId: string
  ##               : Select only ads with this advertiser ID.
  ##   dynamicClickTracker: bool
  ##                      : Select only dynamic click trackers. Applicable when type is AD_SERVING_CLICK_TRACKER. If true, select dynamic click trackers. If false, select static click trackers. Leave unset to select both.
  ##   sizeIds: JArray
  ##          : Select only ads with these size IDs.
  ##   type: JArray
  ##       : Select only ads with these types.
  ##   active: bool
  ##         : Select only active ads.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   campaignIds: JArray
  ##              : Select only ads with these campaign IDs.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   creativeOptimizationConfigurationIds: JArray
  ##                                       : Select only ads with these creative optimization configuration IDs.
  ##   archived: bool
  ##           : Select only archived ads.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only ads with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   compatibility: string
  ##                : Select default ads with the specified compatibility. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering an in-stream video ads developed with the VAST standard.
  ##   landingPageIds: JArray
  ##                 : Select only ads with these landing page IDs.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   remarketingListIds: JArray
  ##                     : Select only ads whose list targeting expression use these remarketing list IDs.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   sslRequired: bool
  ##              : Select only ads that require SSL.
  ##   audienceSegmentIds: JArray
  ##                     : Select only ads with these audience segment IDs.
  ##   placementIds: JArray
  ##               : Select only ads with these placement IDs assigned.
  var path_594299 = newJObject()
  var query_594300 = newJObject()
  add(query_594300, "overriddenEventTagId", newJString(overriddenEventTagId))
  add(path_594299, "profileId", newJString(profileId))
  add(query_594300, "fields", newJString(fields))
  if creativeIds != nil:
    query_594300.add "creativeIds", creativeIds
  add(query_594300, "quotaUser", newJString(quotaUser))
  add(query_594300, "pageToken", newJString(pageToken))
  add(query_594300, "sortField", newJString(sortField))
  add(query_594300, "alt", newJString(alt))
  add(query_594300, "sslCompliant", newJBool(sslCompliant))
  add(query_594300, "searchString", newJString(searchString))
  add(query_594300, "advertiserId", newJString(advertiserId))
  add(query_594300, "dynamicClickTracker", newJBool(dynamicClickTracker))
  if sizeIds != nil:
    query_594300.add "sizeIds", sizeIds
  if `type` != nil:
    query_594300.add "type", `type`
  add(query_594300, "active", newJBool(active))
  add(query_594300, "oauth_token", newJString(oauthToken))
  if campaignIds != nil:
    query_594300.add "campaignIds", campaignIds
  add(query_594300, "userIp", newJString(userIp))
  if creativeOptimizationConfigurationIds != nil:
    query_594300.add "creativeOptimizationConfigurationIds",
                    creativeOptimizationConfigurationIds
  add(query_594300, "archived", newJBool(archived))
  add(query_594300, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_594300.add "ids", ids
  add(query_594300, "key", newJString(key))
  add(query_594300, "compatibility", newJString(compatibility))
  if landingPageIds != nil:
    query_594300.add "landingPageIds", landingPageIds
  add(query_594300, "sortOrder", newJString(sortOrder))
  if remarketingListIds != nil:
    query_594300.add "remarketingListIds", remarketingListIds
  add(query_594300, "prettyPrint", newJBool(prettyPrint))
  add(query_594300, "sslRequired", newJBool(sslRequired))
  if audienceSegmentIds != nil:
    query_594300.add "audienceSegmentIds", audienceSegmentIds
  if placementIds != nil:
    query_594300.add "placementIds", placementIds
  result = call_594298.call(path_594299, query_594300, nil, nil, nil)

var dfareportingAdsList* = Call_DfareportingAdsList_594263(
    name: "dfareportingAdsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads",
    validator: validate_DfareportingAdsList_594264, base: "/dfareporting/v3.2",
    url: url_DfareportingAdsList_594265, schemes: {Scheme.Https})
type
  Call_DfareportingAdsPatch_594335 = ref object of OpenApiRestCall_593437
proc url_DfareportingAdsPatch_594337(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsPatch_594336(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing ad. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594338 = path.getOrDefault("profileId")
  valid_594338 = validateParameter(valid_594338, JString, required = true,
                                 default = nil)
  if valid_594338 != nil:
    section.add "profileId", valid_594338
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Ad ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594339 = query.getOrDefault("fields")
  valid_594339 = validateParameter(valid_594339, JString, required = false,
                                 default = nil)
  if valid_594339 != nil:
    section.add "fields", valid_594339
  var valid_594340 = query.getOrDefault("quotaUser")
  valid_594340 = validateParameter(valid_594340, JString, required = false,
                                 default = nil)
  if valid_594340 != nil:
    section.add "quotaUser", valid_594340
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_594341 = query.getOrDefault("id")
  valid_594341 = validateParameter(valid_594341, JString, required = true,
                                 default = nil)
  if valid_594341 != nil:
    section.add "id", valid_594341
  var valid_594342 = query.getOrDefault("alt")
  valid_594342 = validateParameter(valid_594342, JString, required = false,
                                 default = newJString("json"))
  if valid_594342 != nil:
    section.add "alt", valid_594342
  var valid_594343 = query.getOrDefault("oauth_token")
  valid_594343 = validateParameter(valid_594343, JString, required = false,
                                 default = nil)
  if valid_594343 != nil:
    section.add "oauth_token", valid_594343
  var valid_594344 = query.getOrDefault("userIp")
  valid_594344 = validateParameter(valid_594344, JString, required = false,
                                 default = nil)
  if valid_594344 != nil:
    section.add "userIp", valid_594344
  var valid_594345 = query.getOrDefault("key")
  valid_594345 = validateParameter(valid_594345, JString, required = false,
                                 default = nil)
  if valid_594345 != nil:
    section.add "key", valid_594345
  var valid_594346 = query.getOrDefault("prettyPrint")
  valid_594346 = validateParameter(valid_594346, JBool, required = false,
                                 default = newJBool(true))
  if valid_594346 != nil:
    section.add "prettyPrint", valid_594346
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594348: Call_DfareportingAdsPatch_594335; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing ad. This method supports patch semantics.
  ## 
  let valid = call_594348.validator(path, query, header, formData, body)
  let scheme = call_594348.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594348.url(scheme.get, call_594348.host, call_594348.base,
                         call_594348.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594348, url, valid)

proc call*(call_594349: Call_DfareportingAdsPatch_594335; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdsPatch
  ## Updates an existing ad. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Ad ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594350 = newJObject()
  var query_594351 = newJObject()
  var body_594352 = newJObject()
  add(path_594350, "profileId", newJString(profileId))
  add(query_594351, "fields", newJString(fields))
  add(query_594351, "quotaUser", newJString(quotaUser))
  add(query_594351, "id", newJString(id))
  add(query_594351, "alt", newJString(alt))
  add(query_594351, "oauth_token", newJString(oauthToken))
  add(query_594351, "userIp", newJString(userIp))
  add(query_594351, "key", newJString(key))
  if body != nil:
    body_594352 = body
  add(query_594351, "prettyPrint", newJBool(prettyPrint))
  result = call_594349.call(path_594350, query_594351, nil, nil, body_594352)

var dfareportingAdsPatch* = Call_DfareportingAdsPatch_594335(
    name: "dfareportingAdsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads",
    validator: validate_DfareportingAdsPatch_594336, base: "/dfareporting/v3.2",
    url: url_DfareportingAdsPatch_594337, schemes: {Scheme.Https})
type
  Call_DfareportingAdsGet_594353 = ref object of OpenApiRestCall_593437
proc url_DfareportingAdsGet_594355(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/ads/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdsGet_594354(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets one ad by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Ad ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594356 = path.getOrDefault("profileId")
  valid_594356 = validateParameter(valid_594356, JString, required = true,
                                 default = nil)
  if valid_594356 != nil:
    section.add "profileId", valid_594356
  var valid_594357 = path.getOrDefault("id")
  valid_594357 = validateParameter(valid_594357, JString, required = true,
                                 default = nil)
  if valid_594357 != nil:
    section.add "id", valid_594357
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594358 = query.getOrDefault("fields")
  valid_594358 = validateParameter(valid_594358, JString, required = false,
                                 default = nil)
  if valid_594358 != nil:
    section.add "fields", valid_594358
  var valid_594359 = query.getOrDefault("quotaUser")
  valid_594359 = validateParameter(valid_594359, JString, required = false,
                                 default = nil)
  if valid_594359 != nil:
    section.add "quotaUser", valid_594359
  var valid_594360 = query.getOrDefault("alt")
  valid_594360 = validateParameter(valid_594360, JString, required = false,
                                 default = newJString("json"))
  if valid_594360 != nil:
    section.add "alt", valid_594360
  var valid_594361 = query.getOrDefault("oauth_token")
  valid_594361 = validateParameter(valid_594361, JString, required = false,
                                 default = nil)
  if valid_594361 != nil:
    section.add "oauth_token", valid_594361
  var valid_594362 = query.getOrDefault("userIp")
  valid_594362 = validateParameter(valid_594362, JString, required = false,
                                 default = nil)
  if valid_594362 != nil:
    section.add "userIp", valid_594362
  var valid_594363 = query.getOrDefault("key")
  valid_594363 = validateParameter(valid_594363, JString, required = false,
                                 default = nil)
  if valid_594363 != nil:
    section.add "key", valid_594363
  var valid_594364 = query.getOrDefault("prettyPrint")
  valid_594364 = validateParameter(valid_594364, JBool, required = false,
                                 default = newJBool(true))
  if valid_594364 != nil:
    section.add "prettyPrint", valid_594364
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594365: Call_DfareportingAdsGet_594353; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one ad by ID.
  ## 
  let valid = call_594365.validator(path, query, header, formData, body)
  let scheme = call_594365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594365.url(scheme.get, call_594365.host, call_594365.base,
                         call_594365.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594365, url, valid)

proc call*(call_594366: Call_DfareportingAdsGet_594353; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingAdsGet
  ## Gets one ad by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Ad ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594367 = newJObject()
  var query_594368 = newJObject()
  add(path_594367, "profileId", newJString(profileId))
  add(query_594368, "fields", newJString(fields))
  add(query_594368, "quotaUser", newJString(quotaUser))
  add(query_594368, "alt", newJString(alt))
  add(query_594368, "oauth_token", newJString(oauthToken))
  add(query_594368, "userIp", newJString(userIp))
  add(path_594367, "id", newJString(id))
  add(query_594368, "key", newJString(key))
  add(query_594368, "prettyPrint", newJBool(prettyPrint))
  result = call_594366.call(path_594367, query_594368, nil, nil, nil)

var dfareportingAdsGet* = Call_DfareportingAdsGet_594353(
    name: "dfareportingAdsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/ads/{id}",
    validator: validate_DfareportingAdsGet_594354, base: "/dfareporting/v3.2",
    url: url_DfareportingAdsGet_594355, schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsUpdate_594390 = ref object of OpenApiRestCall_593437
proc url_DfareportingAdvertiserGroupsUpdate_594392(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsUpdate_594391(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing advertiser group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594393 = path.getOrDefault("profileId")
  valid_594393 = validateParameter(valid_594393, JString, required = true,
                                 default = nil)
  if valid_594393 != nil:
    section.add "profileId", valid_594393
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594394 = query.getOrDefault("fields")
  valid_594394 = validateParameter(valid_594394, JString, required = false,
                                 default = nil)
  if valid_594394 != nil:
    section.add "fields", valid_594394
  var valid_594395 = query.getOrDefault("quotaUser")
  valid_594395 = validateParameter(valid_594395, JString, required = false,
                                 default = nil)
  if valid_594395 != nil:
    section.add "quotaUser", valid_594395
  var valid_594396 = query.getOrDefault("alt")
  valid_594396 = validateParameter(valid_594396, JString, required = false,
                                 default = newJString("json"))
  if valid_594396 != nil:
    section.add "alt", valid_594396
  var valid_594397 = query.getOrDefault("oauth_token")
  valid_594397 = validateParameter(valid_594397, JString, required = false,
                                 default = nil)
  if valid_594397 != nil:
    section.add "oauth_token", valid_594397
  var valid_594398 = query.getOrDefault("userIp")
  valid_594398 = validateParameter(valid_594398, JString, required = false,
                                 default = nil)
  if valid_594398 != nil:
    section.add "userIp", valid_594398
  var valid_594399 = query.getOrDefault("key")
  valid_594399 = validateParameter(valid_594399, JString, required = false,
                                 default = nil)
  if valid_594399 != nil:
    section.add "key", valid_594399
  var valid_594400 = query.getOrDefault("prettyPrint")
  valid_594400 = validateParameter(valid_594400, JBool, required = false,
                                 default = newJBool(true))
  if valid_594400 != nil:
    section.add "prettyPrint", valid_594400
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594402: Call_DfareportingAdvertiserGroupsUpdate_594390;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing advertiser group.
  ## 
  let valid = call_594402.validator(path, query, header, formData, body)
  let scheme = call_594402.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594402.url(scheme.get, call_594402.host, call_594402.base,
                         call_594402.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594402, url, valid)

proc call*(call_594403: Call_DfareportingAdvertiserGroupsUpdate_594390;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserGroupsUpdate
  ## Updates an existing advertiser group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594404 = newJObject()
  var query_594405 = newJObject()
  var body_594406 = newJObject()
  add(path_594404, "profileId", newJString(profileId))
  add(query_594405, "fields", newJString(fields))
  add(query_594405, "quotaUser", newJString(quotaUser))
  add(query_594405, "alt", newJString(alt))
  add(query_594405, "oauth_token", newJString(oauthToken))
  add(query_594405, "userIp", newJString(userIp))
  add(query_594405, "key", newJString(key))
  if body != nil:
    body_594406 = body
  add(query_594405, "prettyPrint", newJBool(prettyPrint))
  result = call_594403.call(path_594404, query_594405, nil, nil, body_594406)

var dfareportingAdvertiserGroupsUpdate* = Call_DfareportingAdvertiserGroupsUpdate_594390(
    name: "dfareportingAdvertiserGroupsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups",
    validator: validate_DfareportingAdvertiserGroupsUpdate_594391,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsUpdate_594392,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsInsert_594407 = ref object of OpenApiRestCall_593437
proc url_DfareportingAdvertiserGroupsInsert_594409(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsInsert_594408(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new advertiser group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594410 = path.getOrDefault("profileId")
  valid_594410 = validateParameter(valid_594410, JString, required = true,
                                 default = nil)
  if valid_594410 != nil:
    section.add "profileId", valid_594410
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594411 = query.getOrDefault("fields")
  valid_594411 = validateParameter(valid_594411, JString, required = false,
                                 default = nil)
  if valid_594411 != nil:
    section.add "fields", valid_594411
  var valid_594412 = query.getOrDefault("quotaUser")
  valid_594412 = validateParameter(valid_594412, JString, required = false,
                                 default = nil)
  if valid_594412 != nil:
    section.add "quotaUser", valid_594412
  var valid_594413 = query.getOrDefault("alt")
  valid_594413 = validateParameter(valid_594413, JString, required = false,
                                 default = newJString("json"))
  if valid_594413 != nil:
    section.add "alt", valid_594413
  var valid_594414 = query.getOrDefault("oauth_token")
  valid_594414 = validateParameter(valid_594414, JString, required = false,
                                 default = nil)
  if valid_594414 != nil:
    section.add "oauth_token", valid_594414
  var valid_594415 = query.getOrDefault("userIp")
  valid_594415 = validateParameter(valid_594415, JString, required = false,
                                 default = nil)
  if valid_594415 != nil:
    section.add "userIp", valid_594415
  var valid_594416 = query.getOrDefault("key")
  valid_594416 = validateParameter(valid_594416, JString, required = false,
                                 default = nil)
  if valid_594416 != nil:
    section.add "key", valid_594416
  var valid_594417 = query.getOrDefault("prettyPrint")
  valid_594417 = validateParameter(valid_594417, JBool, required = false,
                                 default = newJBool(true))
  if valid_594417 != nil:
    section.add "prettyPrint", valid_594417
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594419: Call_DfareportingAdvertiserGroupsInsert_594407;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new advertiser group.
  ## 
  let valid = call_594419.validator(path, query, header, formData, body)
  let scheme = call_594419.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594419.url(scheme.get, call_594419.host, call_594419.base,
                         call_594419.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594419, url, valid)

proc call*(call_594420: Call_DfareportingAdvertiserGroupsInsert_594407;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserGroupsInsert
  ## Inserts a new advertiser group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594421 = newJObject()
  var query_594422 = newJObject()
  var body_594423 = newJObject()
  add(path_594421, "profileId", newJString(profileId))
  add(query_594422, "fields", newJString(fields))
  add(query_594422, "quotaUser", newJString(quotaUser))
  add(query_594422, "alt", newJString(alt))
  add(query_594422, "oauth_token", newJString(oauthToken))
  add(query_594422, "userIp", newJString(userIp))
  add(query_594422, "key", newJString(key))
  if body != nil:
    body_594423 = body
  add(query_594422, "prettyPrint", newJBool(prettyPrint))
  result = call_594420.call(path_594421, query_594422, nil, nil, body_594423)

var dfareportingAdvertiserGroupsInsert* = Call_DfareportingAdvertiserGroupsInsert_594407(
    name: "dfareportingAdvertiserGroupsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups",
    validator: validate_DfareportingAdvertiserGroupsInsert_594408,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsInsert_594409,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsList_594369 = ref object of OpenApiRestCall_593437
proc url_DfareportingAdvertiserGroupsList_594371(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsList_594370(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of advertiser groups, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594372 = path.getOrDefault("profileId")
  valid_594372 = validateParameter(valid_594372, JString, required = true,
                                 default = nil)
  if valid_594372 != nil:
    section.add "profileId", valid_594372
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser group June 2015", "advertiser group April 2015", or simply "advertiser group 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertisergroup" will match objects with name "my advertisergroup", "advertisergroup 2015", or simply "advertisergroup".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only advertiser groups with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594373 = query.getOrDefault("fields")
  valid_594373 = validateParameter(valid_594373, JString, required = false,
                                 default = nil)
  if valid_594373 != nil:
    section.add "fields", valid_594373
  var valid_594374 = query.getOrDefault("pageToken")
  valid_594374 = validateParameter(valid_594374, JString, required = false,
                                 default = nil)
  if valid_594374 != nil:
    section.add "pageToken", valid_594374
  var valid_594375 = query.getOrDefault("quotaUser")
  valid_594375 = validateParameter(valid_594375, JString, required = false,
                                 default = nil)
  if valid_594375 != nil:
    section.add "quotaUser", valid_594375
  var valid_594376 = query.getOrDefault("sortField")
  valid_594376 = validateParameter(valid_594376, JString, required = false,
                                 default = newJString("ID"))
  if valid_594376 != nil:
    section.add "sortField", valid_594376
  var valid_594377 = query.getOrDefault("alt")
  valid_594377 = validateParameter(valid_594377, JString, required = false,
                                 default = newJString("json"))
  if valid_594377 != nil:
    section.add "alt", valid_594377
  var valid_594378 = query.getOrDefault("searchString")
  valid_594378 = validateParameter(valid_594378, JString, required = false,
                                 default = nil)
  if valid_594378 != nil:
    section.add "searchString", valid_594378
  var valid_594379 = query.getOrDefault("oauth_token")
  valid_594379 = validateParameter(valid_594379, JString, required = false,
                                 default = nil)
  if valid_594379 != nil:
    section.add "oauth_token", valid_594379
  var valid_594380 = query.getOrDefault("userIp")
  valid_594380 = validateParameter(valid_594380, JString, required = false,
                                 default = nil)
  if valid_594380 != nil:
    section.add "userIp", valid_594380
  var valid_594381 = query.getOrDefault("maxResults")
  valid_594381 = validateParameter(valid_594381, JInt, required = false,
                                 default = newJInt(1000))
  if valid_594381 != nil:
    section.add "maxResults", valid_594381
  var valid_594382 = query.getOrDefault("ids")
  valid_594382 = validateParameter(valid_594382, JArray, required = false,
                                 default = nil)
  if valid_594382 != nil:
    section.add "ids", valid_594382
  var valid_594383 = query.getOrDefault("key")
  valid_594383 = validateParameter(valid_594383, JString, required = false,
                                 default = nil)
  if valid_594383 != nil:
    section.add "key", valid_594383
  var valid_594384 = query.getOrDefault("sortOrder")
  valid_594384 = validateParameter(valid_594384, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_594384 != nil:
    section.add "sortOrder", valid_594384
  var valid_594385 = query.getOrDefault("prettyPrint")
  valid_594385 = validateParameter(valid_594385, JBool, required = false,
                                 default = newJBool(true))
  if valid_594385 != nil:
    section.add "prettyPrint", valid_594385
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594386: Call_DfareportingAdvertiserGroupsList_594369;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of advertiser groups, possibly filtered. This method supports paging.
  ## 
  let valid = call_594386.validator(path, query, header, formData, body)
  let scheme = call_594386.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594386.url(scheme.get, call_594386.host, call_594386.base,
                         call_594386.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594386, url, valid)

proc call*(call_594387: Call_DfareportingAdvertiserGroupsList_594369;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserGroupsList
  ## Retrieves a list of advertiser groups, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser group June 2015", "advertiser group April 2015", or simply "advertiser group 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertisergroup" will match objects with name "my advertisergroup", "advertisergroup 2015", or simply "advertisergroup".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only advertiser groups with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594388 = newJObject()
  var query_594389 = newJObject()
  add(path_594388, "profileId", newJString(profileId))
  add(query_594389, "fields", newJString(fields))
  add(query_594389, "pageToken", newJString(pageToken))
  add(query_594389, "quotaUser", newJString(quotaUser))
  add(query_594389, "sortField", newJString(sortField))
  add(query_594389, "alt", newJString(alt))
  add(query_594389, "searchString", newJString(searchString))
  add(query_594389, "oauth_token", newJString(oauthToken))
  add(query_594389, "userIp", newJString(userIp))
  add(query_594389, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_594389.add "ids", ids
  add(query_594389, "key", newJString(key))
  add(query_594389, "sortOrder", newJString(sortOrder))
  add(query_594389, "prettyPrint", newJBool(prettyPrint))
  result = call_594387.call(path_594388, query_594389, nil, nil, nil)

var dfareportingAdvertiserGroupsList* = Call_DfareportingAdvertiserGroupsList_594369(
    name: "dfareportingAdvertiserGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups",
    validator: validate_DfareportingAdvertiserGroupsList_594370,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsList_594371,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsPatch_594424 = ref object of OpenApiRestCall_593437
proc url_DfareportingAdvertiserGroupsPatch_594426(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsPatch_594425(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing advertiser group. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594427 = path.getOrDefault("profileId")
  valid_594427 = validateParameter(valid_594427, JString, required = true,
                                 default = nil)
  if valid_594427 != nil:
    section.add "profileId", valid_594427
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Advertiser group ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594428 = query.getOrDefault("fields")
  valid_594428 = validateParameter(valid_594428, JString, required = false,
                                 default = nil)
  if valid_594428 != nil:
    section.add "fields", valid_594428
  var valid_594429 = query.getOrDefault("quotaUser")
  valid_594429 = validateParameter(valid_594429, JString, required = false,
                                 default = nil)
  if valid_594429 != nil:
    section.add "quotaUser", valid_594429
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_594430 = query.getOrDefault("id")
  valid_594430 = validateParameter(valid_594430, JString, required = true,
                                 default = nil)
  if valid_594430 != nil:
    section.add "id", valid_594430
  var valid_594431 = query.getOrDefault("alt")
  valid_594431 = validateParameter(valid_594431, JString, required = false,
                                 default = newJString("json"))
  if valid_594431 != nil:
    section.add "alt", valid_594431
  var valid_594432 = query.getOrDefault("oauth_token")
  valid_594432 = validateParameter(valid_594432, JString, required = false,
                                 default = nil)
  if valid_594432 != nil:
    section.add "oauth_token", valid_594432
  var valid_594433 = query.getOrDefault("userIp")
  valid_594433 = validateParameter(valid_594433, JString, required = false,
                                 default = nil)
  if valid_594433 != nil:
    section.add "userIp", valid_594433
  var valid_594434 = query.getOrDefault("key")
  valid_594434 = validateParameter(valid_594434, JString, required = false,
                                 default = nil)
  if valid_594434 != nil:
    section.add "key", valid_594434
  var valid_594435 = query.getOrDefault("prettyPrint")
  valid_594435 = validateParameter(valid_594435, JBool, required = false,
                                 default = newJBool(true))
  if valid_594435 != nil:
    section.add "prettyPrint", valid_594435
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594437: Call_DfareportingAdvertiserGroupsPatch_594424;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing advertiser group. This method supports patch semantics.
  ## 
  let valid = call_594437.validator(path, query, header, formData, body)
  let scheme = call_594437.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594437.url(scheme.get, call_594437.host, call_594437.base,
                         call_594437.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594437, url, valid)

proc call*(call_594438: Call_DfareportingAdvertiserGroupsPatch_594424;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserGroupsPatch
  ## Updates an existing advertiser group. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Advertiser group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594439 = newJObject()
  var query_594440 = newJObject()
  var body_594441 = newJObject()
  add(path_594439, "profileId", newJString(profileId))
  add(query_594440, "fields", newJString(fields))
  add(query_594440, "quotaUser", newJString(quotaUser))
  add(query_594440, "id", newJString(id))
  add(query_594440, "alt", newJString(alt))
  add(query_594440, "oauth_token", newJString(oauthToken))
  add(query_594440, "userIp", newJString(userIp))
  add(query_594440, "key", newJString(key))
  if body != nil:
    body_594441 = body
  add(query_594440, "prettyPrint", newJBool(prettyPrint))
  result = call_594438.call(path_594439, query_594440, nil, nil, body_594441)

var dfareportingAdvertiserGroupsPatch* = Call_DfareportingAdvertiserGroupsPatch_594424(
    name: "dfareportingAdvertiserGroupsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups",
    validator: validate_DfareportingAdvertiserGroupsPatch_594425,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsPatch_594426,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsGet_594442 = ref object of OpenApiRestCall_593437
proc url_DfareportingAdvertiserGroupsGet_594444(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsGet_594443(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one advertiser group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Advertiser group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594445 = path.getOrDefault("profileId")
  valid_594445 = validateParameter(valid_594445, JString, required = true,
                                 default = nil)
  if valid_594445 != nil:
    section.add "profileId", valid_594445
  var valid_594446 = path.getOrDefault("id")
  valid_594446 = validateParameter(valid_594446, JString, required = true,
                                 default = nil)
  if valid_594446 != nil:
    section.add "id", valid_594446
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594447 = query.getOrDefault("fields")
  valid_594447 = validateParameter(valid_594447, JString, required = false,
                                 default = nil)
  if valid_594447 != nil:
    section.add "fields", valid_594447
  var valid_594448 = query.getOrDefault("quotaUser")
  valid_594448 = validateParameter(valid_594448, JString, required = false,
                                 default = nil)
  if valid_594448 != nil:
    section.add "quotaUser", valid_594448
  var valid_594449 = query.getOrDefault("alt")
  valid_594449 = validateParameter(valid_594449, JString, required = false,
                                 default = newJString("json"))
  if valid_594449 != nil:
    section.add "alt", valid_594449
  var valid_594450 = query.getOrDefault("oauth_token")
  valid_594450 = validateParameter(valid_594450, JString, required = false,
                                 default = nil)
  if valid_594450 != nil:
    section.add "oauth_token", valid_594450
  var valid_594451 = query.getOrDefault("userIp")
  valid_594451 = validateParameter(valid_594451, JString, required = false,
                                 default = nil)
  if valid_594451 != nil:
    section.add "userIp", valid_594451
  var valid_594452 = query.getOrDefault("key")
  valid_594452 = validateParameter(valid_594452, JString, required = false,
                                 default = nil)
  if valid_594452 != nil:
    section.add "key", valid_594452
  var valid_594453 = query.getOrDefault("prettyPrint")
  valid_594453 = validateParameter(valid_594453, JBool, required = false,
                                 default = newJBool(true))
  if valid_594453 != nil:
    section.add "prettyPrint", valid_594453
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594454: Call_DfareportingAdvertiserGroupsGet_594442;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one advertiser group by ID.
  ## 
  let valid = call_594454.validator(path, query, header, formData, body)
  let scheme = call_594454.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594454.url(scheme.get, call_594454.host, call_594454.base,
                         call_594454.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594454, url, valid)

proc call*(call_594455: Call_DfareportingAdvertiserGroupsGet_594442;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserGroupsGet
  ## Gets one advertiser group by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Advertiser group ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594456 = newJObject()
  var query_594457 = newJObject()
  add(path_594456, "profileId", newJString(profileId))
  add(query_594457, "fields", newJString(fields))
  add(query_594457, "quotaUser", newJString(quotaUser))
  add(query_594457, "alt", newJString(alt))
  add(query_594457, "oauth_token", newJString(oauthToken))
  add(query_594457, "userIp", newJString(userIp))
  add(path_594456, "id", newJString(id))
  add(query_594457, "key", newJString(key))
  add(query_594457, "prettyPrint", newJBool(prettyPrint))
  result = call_594455.call(path_594456, query_594457, nil, nil, nil)

var dfareportingAdvertiserGroupsGet* = Call_DfareportingAdvertiserGroupsGet_594442(
    name: "dfareportingAdvertiserGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups/{id}",
    validator: validate_DfareportingAdvertiserGroupsGet_594443,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsGet_594444,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserGroupsDelete_594458 = ref object of OpenApiRestCall_593437
proc url_DfareportingAdvertiserGroupsDelete_594460(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserGroupsDelete_594459(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing advertiser group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Advertiser group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594461 = path.getOrDefault("profileId")
  valid_594461 = validateParameter(valid_594461, JString, required = true,
                                 default = nil)
  if valid_594461 != nil:
    section.add "profileId", valid_594461
  var valid_594462 = path.getOrDefault("id")
  valid_594462 = validateParameter(valid_594462, JString, required = true,
                                 default = nil)
  if valid_594462 != nil:
    section.add "id", valid_594462
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594463 = query.getOrDefault("fields")
  valid_594463 = validateParameter(valid_594463, JString, required = false,
                                 default = nil)
  if valid_594463 != nil:
    section.add "fields", valid_594463
  var valid_594464 = query.getOrDefault("quotaUser")
  valid_594464 = validateParameter(valid_594464, JString, required = false,
                                 default = nil)
  if valid_594464 != nil:
    section.add "quotaUser", valid_594464
  var valid_594465 = query.getOrDefault("alt")
  valid_594465 = validateParameter(valid_594465, JString, required = false,
                                 default = newJString("json"))
  if valid_594465 != nil:
    section.add "alt", valid_594465
  var valid_594466 = query.getOrDefault("oauth_token")
  valid_594466 = validateParameter(valid_594466, JString, required = false,
                                 default = nil)
  if valid_594466 != nil:
    section.add "oauth_token", valid_594466
  var valid_594467 = query.getOrDefault("userIp")
  valid_594467 = validateParameter(valid_594467, JString, required = false,
                                 default = nil)
  if valid_594467 != nil:
    section.add "userIp", valid_594467
  var valid_594468 = query.getOrDefault("key")
  valid_594468 = validateParameter(valid_594468, JString, required = false,
                                 default = nil)
  if valid_594468 != nil:
    section.add "key", valid_594468
  var valid_594469 = query.getOrDefault("prettyPrint")
  valid_594469 = validateParameter(valid_594469, JBool, required = false,
                                 default = newJBool(true))
  if valid_594469 != nil:
    section.add "prettyPrint", valid_594469
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594470: Call_DfareportingAdvertiserGroupsDelete_594458;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing advertiser group.
  ## 
  let valid = call_594470.validator(path, query, header, formData, body)
  let scheme = call_594470.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594470.url(scheme.get, call_594470.host, call_594470.base,
                         call_594470.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594470, url, valid)

proc call*(call_594471: Call_DfareportingAdvertiserGroupsDelete_594458;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserGroupsDelete
  ## Deletes an existing advertiser group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Advertiser group ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594472 = newJObject()
  var query_594473 = newJObject()
  add(path_594472, "profileId", newJString(profileId))
  add(query_594473, "fields", newJString(fields))
  add(query_594473, "quotaUser", newJString(quotaUser))
  add(query_594473, "alt", newJString(alt))
  add(query_594473, "oauth_token", newJString(oauthToken))
  add(query_594473, "userIp", newJString(userIp))
  add(path_594472, "id", newJString(id))
  add(query_594473, "key", newJString(key))
  add(query_594473, "prettyPrint", newJBool(prettyPrint))
  result = call_594471.call(path_594472, query_594473, nil, nil, nil)

var dfareportingAdvertiserGroupsDelete* = Call_DfareportingAdvertiserGroupsDelete_594458(
    name: "dfareportingAdvertiserGroupsDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserGroups/{id}",
    validator: validate_DfareportingAdvertiserGroupsDelete_594459,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserGroupsDelete_594460,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesUpdate_594499 = ref object of OpenApiRestCall_593437
proc url_DfareportingAdvertiserLandingPagesUpdate_594501(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesUpdate_594500(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing landing page.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594502 = path.getOrDefault("profileId")
  valid_594502 = validateParameter(valid_594502, JString, required = true,
                                 default = nil)
  if valid_594502 != nil:
    section.add "profileId", valid_594502
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594503 = query.getOrDefault("fields")
  valid_594503 = validateParameter(valid_594503, JString, required = false,
                                 default = nil)
  if valid_594503 != nil:
    section.add "fields", valid_594503
  var valid_594504 = query.getOrDefault("quotaUser")
  valid_594504 = validateParameter(valid_594504, JString, required = false,
                                 default = nil)
  if valid_594504 != nil:
    section.add "quotaUser", valid_594504
  var valid_594505 = query.getOrDefault("alt")
  valid_594505 = validateParameter(valid_594505, JString, required = false,
                                 default = newJString("json"))
  if valid_594505 != nil:
    section.add "alt", valid_594505
  var valid_594506 = query.getOrDefault("oauth_token")
  valid_594506 = validateParameter(valid_594506, JString, required = false,
                                 default = nil)
  if valid_594506 != nil:
    section.add "oauth_token", valid_594506
  var valid_594507 = query.getOrDefault("userIp")
  valid_594507 = validateParameter(valid_594507, JString, required = false,
                                 default = nil)
  if valid_594507 != nil:
    section.add "userIp", valid_594507
  var valid_594508 = query.getOrDefault("key")
  valid_594508 = validateParameter(valid_594508, JString, required = false,
                                 default = nil)
  if valid_594508 != nil:
    section.add "key", valid_594508
  var valid_594509 = query.getOrDefault("prettyPrint")
  valid_594509 = validateParameter(valid_594509, JBool, required = false,
                                 default = newJBool(true))
  if valid_594509 != nil:
    section.add "prettyPrint", valid_594509
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594511: Call_DfareportingAdvertiserLandingPagesUpdate_594499;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing landing page.
  ## 
  let valid = call_594511.validator(path, query, header, formData, body)
  let scheme = call_594511.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594511.url(scheme.get, call_594511.host, call_594511.base,
                         call_594511.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594511, url, valid)

proc call*(call_594512: Call_DfareportingAdvertiserLandingPagesUpdate_594499;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserLandingPagesUpdate
  ## Updates an existing landing page.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594513 = newJObject()
  var query_594514 = newJObject()
  var body_594515 = newJObject()
  add(path_594513, "profileId", newJString(profileId))
  add(query_594514, "fields", newJString(fields))
  add(query_594514, "quotaUser", newJString(quotaUser))
  add(query_594514, "alt", newJString(alt))
  add(query_594514, "oauth_token", newJString(oauthToken))
  add(query_594514, "userIp", newJString(userIp))
  add(query_594514, "key", newJString(key))
  if body != nil:
    body_594515 = body
  add(query_594514, "prettyPrint", newJBool(prettyPrint))
  result = call_594512.call(path_594513, query_594514, nil, nil, body_594515)

var dfareportingAdvertiserLandingPagesUpdate* = Call_DfareportingAdvertiserLandingPagesUpdate_594499(
    name: "dfareportingAdvertiserLandingPagesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages",
    validator: validate_DfareportingAdvertiserLandingPagesUpdate_594500,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserLandingPagesUpdate_594501,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesInsert_594516 = ref object of OpenApiRestCall_593437
proc url_DfareportingAdvertiserLandingPagesInsert_594518(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesInsert_594517(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new landing page.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594519 = path.getOrDefault("profileId")
  valid_594519 = validateParameter(valid_594519, JString, required = true,
                                 default = nil)
  if valid_594519 != nil:
    section.add "profileId", valid_594519
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594520 = query.getOrDefault("fields")
  valid_594520 = validateParameter(valid_594520, JString, required = false,
                                 default = nil)
  if valid_594520 != nil:
    section.add "fields", valid_594520
  var valid_594521 = query.getOrDefault("quotaUser")
  valid_594521 = validateParameter(valid_594521, JString, required = false,
                                 default = nil)
  if valid_594521 != nil:
    section.add "quotaUser", valid_594521
  var valid_594522 = query.getOrDefault("alt")
  valid_594522 = validateParameter(valid_594522, JString, required = false,
                                 default = newJString("json"))
  if valid_594522 != nil:
    section.add "alt", valid_594522
  var valid_594523 = query.getOrDefault("oauth_token")
  valid_594523 = validateParameter(valid_594523, JString, required = false,
                                 default = nil)
  if valid_594523 != nil:
    section.add "oauth_token", valid_594523
  var valid_594524 = query.getOrDefault("userIp")
  valid_594524 = validateParameter(valid_594524, JString, required = false,
                                 default = nil)
  if valid_594524 != nil:
    section.add "userIp", valid_594524
  var valid_594525 = query.getOrDefault("key")
  valid_594525 = validateParameter(valid_594525, JString, required = false,
                                 default = nil)
  if valid_594525 != nil:
    section.add "key", valid_594525
  var valid_594526 = query.getOrDefault("prettyPrint")
  valid_594526 = validateParameter(valid_594526, JBool, required = false,
                                 default = newJBool(true))
  if valid_594526 != nil:
    section.add "prettyPrint", valid_594526
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594528: Call_DfareportingAdvertiserLandingPagesInsert_594516;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new landing page.
  ## 
  let valid = call_594528.validator(path, query, header, formData, body)
  let scheme = call_594528.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594528.url(scheme.get, call_594528.host, call_594528.base,
                         call_594528.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594528, url, valid)

proc call*(call_594529: Call_DfareportingAdvertiserLandingPagesInsert_594516;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserLandingPagesInsert
  ## Inserts a new landing page.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594530 = newJObject()
  var query_594531 = newJObject()
  var body_594532 = newJObject()
  add(path_594530, "profileId", newJString(profileId))
  add(query_594531, "fields", newJString(fields))
  add(query_594531, "quotaUser", newJString(quotaUser))
  add(query_594531, "alt", newJString(alt))
  add(query_594531, "oauth_token", newJString(oauthToken))
  add(query_594531, "userIp", newJString(userIp))
  add(query_594531, "key", newJString(key))
  if body != nil:
    body_594532 = body
  add(query_594531, "prettyPrint", newJBool(prettyPrint))
  result = call_594529.call(path_594530, query_594531, nil, nil, body_594532)

var dfareportingAdvertiserLandingPagesInsert* = Call_DfareportingAdvertiserLandingPagesInsert_594516(
    name: "dfareportingAdvertiserLandingPagesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages",
    validator: validate_DfareportingAdvertiserLandingPagesInsert_594517,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserLandingPagesInsert_594518,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesList_594474 = ref object of OpenApiRestCall_593437
proc url_DfareportingAdvertiserLandingPagesList_594476(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesList_594475(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of landing pages.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594477 = path.getOrDefault("profileId")
  valid_594477 = validateParameter(valid_594477, JString, required = true,
                                 default = nil)
  if valid_594477 != nil:
    section.add "profileId", valid_594477
  result.add "path", section
  ## parameters in `query` object:
  ##   subaccountId: JString
  ##               : Select only landing pages that belong to this subaccount.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for landing pages by name or ID. Wildcards (*) are allowed. For example, "landingpage*2017" will return landing pages with names like "landingpage July 2017", "landingpage March 2017", or simply "landingpage 2017". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "landingpage" will match campaigns with name "my landingpage", "landingpage 2015", or simply "landingpage".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   campaignIds: JArray
  ##              : Select only landing pages that are associated with these campaigns.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived landing pages. Don't set this field to select both archived and non-archived landing pages.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only landing pages with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only landing pages that belong to these advertisers.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594478 = query.getOrDefault("subaccountId")
  valid_594478 = validateParameter(valid_594478, JString, required = false,
                                 default = nil)
  if valid_594478 != nil:
    section.add "subaccountId", valid_594478
  var valid_594479 = query.getOrDefault("fields")
  valid_594479 = validateParameter(valid_594479, JString, required = false,
                                 default = nil)
  if valid_594479 != nil:
    section.add "fields", valid_594479
  var valid_594480 = query.getOrDefault("pageToken")
  valid_594480 = validateParameter(valid_594480, JString, required = false,
                                 default = nil)
  if valid_594480 != nil:
    section.add "pageToken", valid_594480
  var valid_594481 = query.getOrDefault("quotaUser")
  valid_594481 = validateParameter(valid_594481, JString, required = false,
                                 default = nil)
  if valid_594481 != nil:
    section.add "quotaUser", valid_594481
  var valid_594482 = query.getOrDefault("sortField")
  valid_594482 = validateParameter(valid_594482, JString, required = false,
                                 default = newJString("ID"))
  if valid_594482 != nil:
    section.add "sortField", valid_594482
  var valid_594483 = query.getOrDefault("alt")
  valid_594483 = validateParameter(valid_594483, JString, required = false,
                                 default = newJString("json"))
  if valid_594483 != nil:
    section.add "alt", valid_594483
  var valid_594484 = query.getOrDefault("searchString")
  valid_594484 = validateParameter(valid_594484, JString, required = false,
                                 default = nil)
  if valid_594484 != nil:
    section.add "searchString", valid_594484
  var valid_594485 = query.getOrDefault("oauth_token")
  valid_594485 = validateParameter(valid_594485, JString, required = false,
                                 default = nil)
  if valid_594485 != nil:
    section.add "oauth_token", valid_594485
  var valid_594486 = query.getOrDefault("campaignIds")
  valid_594486 = validateParameter(valid_594486, JArray, required = false,
                                 default = nil)
  if valid_594486 != nil:
    section.add "campaignIds", valid_594486
  var valid_594487 = query.getOrDefault("userIp")
  valid_594487 = validateParameter(valid_594487, JString, required = false,
                                 default = nil)
  if valid_594487 != nil:
    section.add "userIp", valid_594487
  var valid_594488 = query.getOrDefault("archived")
  valid_594488 = validateParameter(valid_594488, JBool, required = false, default = nil)
  if valid_594488 != nil:
    section.add "archived", valid_594488
  var valid_594489 = query.getOrDefault("maxResults")
  valid_594489 = validateParameter(valid_594489, JInt, required = false,
                                 default = newJInt(1000))
  if valid_594489 != nil:
    section.add "maxResults", valid_594489
  var valid_594490 = query.getOrDefault("ids")
  valid_594490 = validateParameter(valid_594490, JArray, required = false,
                                 default = nil)
  if valid_594490 != nil:
    section.add "ids", valid_594490
  var valid_594491 = query.getOrDefault("key")
  valid_594491 = validateParameter(valid_594491, JString, required = false,
                                 default = nil)
  if valid_594491 != nil:
    section.add "key", valid_594491
  var valid_594492 = query.getOrDefault("advertiserIds")
  valid_594492 = validateParameter(valid_594492, JArray, required = false,
                                 default = nil)
  if valid_594492 != nil:
    section.add "advertiserIds", valid_594492
  var valid_594493 = query.getOrDefault("sortOrder")
  valid_594493 = validateParameter(valid_594493, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_594493 != nil:
    section.add "sortOrder", valid_594493
  var valid_594494 = query.getOrDefault("prettyPrint")
  valid_594494 = validateParameter(valid_594494, JBool, required = false,
                                 default = newJBool(true))
  if valid_594494 != nil:
    section.add "prettyPrint", valid_594494
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594495: Call_DfareportingAdvertiserLandingPagesList_594474;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of landing pages.
  ## 
  let valid = call_594495.validator(path, query, header, formData, body)
  let scheme = call_594495.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594495.url(scheme.get, call_594495.host, call_594495.base,
                         call_594495.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594495, url, valid)

proc call*(call_594496: Call_DfareportingAdvertiserLandingPagesList_594474;
          profileId: string; subaccountId: string = ""; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; sortField: string = "ID";
          alt: string = "json"; searchString: string = ""; oauthToken: string = "";
          campaignIds: JsonNode = nil; userIp: string = ""; archived: bool = false;
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          advertiserIds: JsonNode = nil; sortOrder: string = "ASCENDING";
          prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserLandingPagesList
  ## Retrieves a list of landing pages.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   subaccountId: string
  ##               : Select only landing pages that belong to this subaccount.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for landing pages by name or ID. Wildcards (*) are allowed. For example, "landingpage*2017" will return landing pages with names like "landingpage July 2017", "landingpage March 2017", or simply "landingpage 2017". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "landingpage" will match campaigns with name "my landingpage", "landingpage 2015", or simply "landingpage".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   campaignIds: JArray
  ##              : Select only landing pages that are associated with these campaigns.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived landing pages. Don't set this field to select both archived and non-archived landing pages.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only landing pages with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only landing pages that belong to these advertisers.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594497 = newJObject()
  var query_594498 = newJObject()
  add(path_594497, "profileId", newJString(profileId))
  add(query_594498, "subaccountId", newJString(subaccountId))
  add(query_594498, "fields", newJString(fields))
  add(query_594498, "pageToken", newJString(pageToken))
  add(query_594498, "quotaUser", newJString(quotaUser))
  add(query_594498, "sortField", newJString(sortField))
  add(query_594498, "alt", newJString(alt))
  add(query_594498, "searchString", newJString(searchString))
  add(query_594498, "oauth_token", newJString(oauthToken))
  if campaignIds != nil:
    query_594498.add "campaignIds", campaignIds
  add(query_594498, "userIp", newJString(userIp))
  add(query_594498, "archived", newJBool(archived))
  add(query_594498, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_594498.add "ids", ids
  add(query_594498, "key", newJString(key))
  if advertiserIds != nil:
    query_594498.add "advertiserIds", advertiserIds
  add(query_594498, "sortOrder", newJString(sortOrder))
  add(query_594498, "prettyPrint", newJBool(prettyPrint))
  result = call_594496.call(path_594497, query_594498, nil, nil, nil)

var dfareportingAdvertiserLandingPagesList* = Call_DfareportingAdvertiserLandingPagesList_594474(
    name: "dfareportingAdvertiserLandingPagesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages",
    validator: validate_DfareportingAdvertiserLandingPagesList_594475,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserLandingPagesList_594476,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesPatch_594533 = ref object of OpenApiRestCall_593437
proc url_DfareportingAdvertiserLandingPagesPatch_594535(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesPatch_594534(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing landing page. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594536 = path.getOrDefault("profileId")
  valid_594536 = validateParameter(valid_594536, JString, required = true,
                                 default = nil)
  if valid_594536 != nil:
    section.add "profileId", valid_594536
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Landing page ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594537 = query.getOrDefault("fields")
  valid_594537 = validateParameter(valid_594537, JString, required = false,
                                 default = nil)
  if valid_594537 != nil:
    section.add "fields", valid_594537
  var valid_594538 = query.getOrDefault("quotaUser")
  valid_594538 = validateParameter(valid_594538, JString, required = false,
                                 default = nil)
  if valid_594538 != nil:
    section.add "quotaUser", valid_594538
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_594539 = query.getOrDefault("id")
  valid_594539 = validateParameter(valid_594539, JString, required = true,
                                 default = nil)
  if valid_594539 != nil:
    section.add "id", valid_594539
  var valid_594540 = query.getOrDefault("alt")
  valid_594540 = validateParameter(valid_594540, JString, required = false,
                                 default = newJString("json"))
  if valid_594540 != nil:
    section.add "alt", valid_594540
  var valid_594541 = query.getOrDefault("oauth_token")
  valid_594541 = validateParameter(valid_594541, JString, required = false,
                                 default = nil)
  if valid_594541 != nil:
    section.add "oauth_token", valid_594541
  var valid_594542 = query.getOrDefault("userIp")
  valid_594542 = validateParameter(valid_594542, JString, required = false,
                                 default = nil)
  if valid_594542 != nil:
    section.add "userIp", valid_594542
  var valid_594543 = query.getOrDefault("key")
  valid_594543 = validateParameter(valid_594543, JString, required = false,
                                 default = nil)
  if valid_594543 != nil:
    section.add "key", valid_594543
  var valid_594544 = query.getOrDefault("prettyPrint")
  valid_594544 = validateParameter(valid_594544, JBool, required = false,
                                 default = newJBool(true))
  if valid_594544 != nil:
    section.add "prettyPrint", valid_594544
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594546: Call_DfareportingAdvertiserLandingPagesPatch_594533;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing landing page. This method supports patch semantics.
  ## 
  let valid = call_594546.validator(path, query, header, formData, body)
  let scheme = call_594546.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594546.url(scheme.get, call_594546.host, call_594546.base,
                         call_594546.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594546, url, valid)

proc call*(call_594547: Call_DfareportingAdvertiserLandingPagesPatch_594533;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserLandingPagesPatch
  ## Updates an existing landing page. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Landing page ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594548 = newJObject()
  var query_594549 = newJObject()
  var body_594550 = newJObject()
  add(path_594548, "profileId", newJString(profileId))
  add(query_594549, "fields", newJString(fields))
  add(query_594549, "quotaUser", newJString(quotaUser))
  add(query_594549, "id", newJString(id))
  add(query_594549, "alt", newJString(alt))
  add(query_594549, "oauth_token", newJString(oauthToken))
  add(query_594549, "userIp", newJString(userIp))
  add(query_594549, "key", newJString(key))
  if body != nil:
    body_594550 = body
  add(query_594549, "prettyPrint", newJBool(prettyPrint))
  result = call_594547.call(path_594548, query_594549, nil, nil, body_594550)

var dfareportingAdvertiserLandingPagesPatch* = Call_DfareportingAdvertiserLandingPagesPatch_594533(
    name: "dfareportingAdvertiserLandingPagesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages",
    validator: validate_DfareportingAdvertiserLandingPagesPatch_594534,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserLandingPagesPatch_594535,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertiserLandingPagesGet_594551 = ref object of OpenApiRestCall_593437
proc url_DfareportingAdvertiserLandingPagesGet_594553(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertiserLandingPages/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertiserLandingPagesGet_594552(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one landing page by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Landing page ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594554 = path.getOrDefault("profileId")
  valid_594554 = validateParameter(valid_594554, JString, required = true,
                                 default = nil)
  if valid_594554 != nil:
    section.add "profileId", valid_594554
  var valid_594555 = path.getOrDefault("id")
  valid_594555 = validateParameter(valid_594555, JString, required = true,
                                 default = nil)
  if valid_594555 != nil:
    section.add "id", valid_594555
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594556 = query.getOrDefault("fields")
  valid_594556 = validateParameter(valid_594556, JString, required = false,
                                 default = nil)
  if valid_594556 != nil:
    section.add "fields", valid_594556
  var valid_594557 = query.getOrDefault("quotaUser")
  valid_594557 = validateParameter(valid_594557, JString, required = false,
                                 default = nil)
  if valid_594557 != nil:
    section.add "quotaUser", valid_594557
  var valid_594558 = query.getOrDefault("alt")
  valid_594558 = validateParameter(valid_594558, JString, required = false,
                                 default = newJString("json"))
  if valid_594558 != nil:
    section.add "alt", valid_594558
  var valid_594559 = query.getOrDefault("oauth_token")
  valid_594559 = validateParameter(valid_594559, JString, required = false,
                                 default = nil)
  if valid_594559 != nil:
    section.add "oauth_token", valid_594559
  var valid_594560 = query.getOrDefault("userIp")
  valid_594560 = validateParameter(valid_594560, JString, required = false,
                                 default = nil)
  if valid_594560 != nil:
    section.add "userIp", valid_594560
  var valid_594561 = query.getOrDefault("key")
  valid_594561 = validateParameter(valid_594561, JString, required = false,
                                 default = nil)
  if valid_594561 != nil:
    section.add "key", valid_594561
  var valid_594562 = query.getOrDefault("prettyPrint")
  valid_594562 = validateParameter(valid_594562, JBool, required = false,
                                 default = newJBool(true))
  if valid_594562 != nil:
    section.add "prettyPrint", valid_594562
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594563: Call_DfareportingAdvertiserLandingPagesGet_594551;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one landing page by ID.
  ## 
  let valid = call_594563.validator(path, query, header, formData, body)
  let scheme = call_594563.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594563.url(scheme.get, call_594563.host, call_594563.base,
                         call_594563.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594563, url, valid)

proc call*(call_594564: Call_DfareportingAdvertiserLandingPagesGet_594551;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertiserLandingPagesGet
  ## Gets one landing page by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Landing page ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594565 = newJObject()
  var query_594566 = newJObject()
  add(path_594565, "profileId", newJString(profileId))
  add(query_594566, "fields", newJString(fields))
  add(query_594566, "quotaUser", newJString(quotaUser))
  add(query_594566, "alt", newJString(alt))
  add(query_594566, "oauth_token", newJString(oauthToken))
  add(query_594566, "userIp", newJString(userIp))
  add(path_594565, "id", newJString(id))
  add(query_594566, "key", newJString(key))
  add(query_594566, "prettyPrint", newJBool(prettyPrint))
  result = call_594564.call(path_594565, query_594566, nil, nil, nil)

var dfareportingAdvertiserLandingPagesGet* = Call_DfareportingAdvertiserLandingPagesGet_594551(
    name: "dfareportingAdvertiserLandingPagesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertiserLandingPages/{id}",
    validator: validate_DfareportingAdvertiserLandingPagesGet_594552,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertiserLandingPagesGet_594553,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersUpdate_594594 = ref object of OpenApiRestCall_593437
proc url_DfareportingAdvertisersUpdate_594596(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersUpdate_594595(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing advertiser.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594597 = path.getOrDefault("profileId")
  valid_594597 = validateParameter(valid_594597, JString, required = true,
                                 default = nil)
  if valid_594597 != nil:
    section.add "profileId", valid_594597
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594598 = query.getOrDefault("fields")
  valid_594598 = validateParameter(valid_594598, JString, required = false,
                                 default = nil)
  if valid_594598 != nil:
    section.add "fields", valid_594598
  var valid_594599 = query.getOrDefault("quotaUser")
  valid_594599 = validateParameter(valid_594599, JString, required = false,
                                 default = nil)
  if valid_594599 != nil:
    section.add "quotaUser", valid_594599
  var valid_594600 = query.getOrDefault("alt")
  valid_594600 = validateParameter(valid_594600, JString, required = false,
                                 default = newJString("json"))
  if valid_594600 != nil:
    section.add "alt", valid_594600
  var valid_594601 = query.getOrDefault("oauth_token")
  valid_594601 = validateParameter(valid_594601, JString, required = false,
                                 default = nil)
  if valid_594601 != nil:
    section.add "oauth_token", valid_594601
  var valid_594602 = query.getOrDefault("userIp")
  valid_594602 = validateParameter(valid_594602, JString, required = false,
                                 default = nil)
  if valid_594602 != nil:
    section.add "userIp", valid_594602
  var valid_594603 = query.getOrDefault("key")
  valid_594603 = validateParameter(valid_594603, JString, required = false,
                                 default = nil)
  if valid_594603 != nil:
    section.add "key", valid_594603
  var valid_594604 = query.getOrDefault("prettyPrint")
  valid_594604 = validateParameter(valid_594604, JBool, required = false,
                                 default = newJBool(true))
  if valid_594604 != nil:
    section.add "prettyPrint", valid_594604
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594606: Call_DfareportingAdvertisersUpdate_594594; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing advertiser.
  ## 
  let valid = call_594606.validator(path, query, header, formData, body)
  let scheme = call_594606.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594606.url(scheme.get, call_594606.host, call_594606.base,
                         call_594606.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594606, url, valid)

proc call*(call_594607: Call_DfareportingAdvertisersUpdate_594594;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertisersUpdate
  ## Updates an existing advertiser.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594608 = newJObject()
  var query_594609 = newJObject()
  var body_594610 = newJObject()
  add(path_594608, "profileId", newJString(profileId))
  add(query_594609, "fields", newJString(fields))
  add(query_594609, "quotaUser", newJString(quotaUser))
  add(query_594609, "alt", newJString(alt))
  add(query_594609, "oauth_token", newJString(oauthToken))
  add(query_594609, "userIp", newJString(userIp))
  add(query_594609, "key", newJString(key))
  if body != nil:
    body_594610 = body
  add(query_594609, "prettyPrint", newJBool(prettyPrint))
  result = call_594607.call(path_594608, query_594609, nil, nil, body_594610)

var dfareportingAdvertisersUpdate* = Call_DfareportingAdvertisersUpdate_594594(
    name: "dfareportingAdvertisersUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/advertisers",
    validator: validate_DfareportingAdvertisersUpdate_594595,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertisersUpdate_594596,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersInsert_594611 = ref object of OpenApiRestCall_593437
proc url_DfareportingAdvertisersInsert_594613(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersInsert_594612(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new advertiser.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594614 = path.getOrDefault("profileId")
  valid_594614 = validateParameter(valid_594614, JString, required = true,
                                 default = nil)
  if valid_594614 != nil:
    section.add "profileId", valid_594614
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594615 = query.getOrDefault("fields")
  valid_594615 = validateParameter(valid_594615, JString, required = false,
                                 default = nil)
  if valid_594615 != nil:
    section.add "fields", valid_594615
  var valid_594616 = query.getOrDefault("quotaUser")
  valid_594616 = validateParameter(valid_594616, JString, required = false,
                                 default = nil)
  if valid_594616 != nil:
    section.add "quotaUser", valid_594616
  var valid_594617 = query.getOrDefault("alt")
  valid_594617 = validateParameter(valid_594617, JString, required = false,
                                 default = newJString("json"))
  if valid_594617 != nil:
    section.add "alt", valid_594617
  var valid_594618 = query.getOrDefault("oauth_token")
  valid_594618 = validateParameter(valid_594618, JString, required = false,
                                 default = nil)
  if valid_594618 != nil:
    section.add "oauth_token", valid_594618
  var valid_594619 = query.getOrDefault("userIp")
  valid_594619 = validateParameter(valid_594619, JString, required = false,
                                 default = nil)
  if valid_594619 != nil:
    section.add "userIp", valid_594619
  var valid_594620 = query.getOrDefault("key")
  valid_594620 = validateParameter(valid_594620, JString, required = false,
                                 default = nil)
  if valid_594620 != nil:
    section.add "key", valid_594620
  var valid_594621 = query.getOrDefault("prettyPrint")
  valid_594621 = validateParameter(valid_594621, JBool, required = false,
                                 default = newJBool(true))
  if valid_594621 != nil:
    section.add "prettyPrint", valid_594621
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594623: Call_DfareportingAdvertisersInsert_594611; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new advertiser.
  ## 
  let valid = call_594623.validator(path, query, header, formData, body)
  let scheme = call_594623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594623.url(scheme.get, call_594623.host, call_594623.base,
                         call_594623.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594623, url, valid)

proc call*(call_594624: Call_DfareportingAdvertisersInsert_594611;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertisersInsert
  ## Inserts a new advertiser.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594625 = newJObject()
  var query_594626 = newJObject()
  var body_594627 = newJObject()
  add(path_594625, "profileId", newJString(profileId))
  add(query_594626, "fields", newJString(fields))
  add(query_594626, "quotaUser", newJString(quotaUser))
  add(query_594626, "alt", newJString(alt))
  add(query_594626, "oauth_token", newJString(oauthToken))
  add(query_594626, "userIp", newJString(userIp))
  add(query_594626, "key", newJString(key))
  if body != nil:
    body_594627 = body
  add(query_594626, "prettyPrint", newJBool(prettyPrint))
  result = call_594624.call(path_594625, query_594626, nil, nil, body_594627)

var dfareportingAdvertisersInsert* = Call_DfareportingAdvertisersInsert_594611(
    name: "dfareportingAdvertisersInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/advertisers",
    validator: validate_DfareportingAdvertisersInsert_594612,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertisersInsert_594613,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersList_594567 = ref object of OpenApiRestCall_593437
proc url_DfareportingAdvertisersList_594569(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersList_594568(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of advertisers, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594570 = path.getOrDefault("profileId")
  valid_594570 = validateParameter(valid_594570, JString, required = true,
                                 default = nil)
  if valid_594570 != nil:
    section.add "profileId", valid_594570
  result.add "path", section
  ## parameters in `query` object:
  ##   subaccountId: JString
  ##               : Select only advertisers with these subaccount IDs.
  ##   advertiserGroupIds: JArray
  ##                     : Select only advertisers with these advertiser group IDs.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   onlyParent: JBool
  ##             : Select only advertisers which use another advertiser's floodlight configuration.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser June 2015", "advertiser April 2015", or simply "advertiser 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertiser" will match objects with name "my advertiser", "advertiser 2015", or simply "advertiser".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   floodlightConfigurationIds: JArray
  ##                             : Select only advertisers with these floodlight configuration IDs.
  ##   ids: JArray
  ##      : Select only advertisers with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   status: JString
  ##         : Select only advertisers with the specified status.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   includeAdvertisersWithoutGroupsOnly: JBool
  ##                                      : Select only advertisers which do not belong to any advertiser group.
  section = newJObject()
  var valid_594571 = query.getOrDefault("subaccountId")
  valid_594571 = validateParameter(valid_594571, JString, required = false,
                                 default = nil)
  if valid_594571 != nil:
    section.add "subaccountId", valid_594571
  var valid_594572 = query.getOrDefault("advertiserGroupIds")
  valid_594572 = validateParameter(valid_594572, JArray, required = false,
                                 default = nil)
  if valid_594572 != nil:
    section.add "advertiserGroupIds", valid_594572
  var valid_594573 = query.getOrDefault("fields")
  valid_594573 = validateParameter(valid_594573, JString, required = false,
                                 default = nil)
  if valid_594573 != nil:
    section.add "fields", valid_594573
  var valid_594574 = query.getOrDefault("pageToken")
  valid_594574 = validateParameter(valid_594574, JString, required = false,
                                 default = nil)
  if valid_594574 != nil:
    section.add "pageToken", valid_594574
  var valid_594575 = query.getOrDefault("quotaUser")
  valid_594575 = validateParameter(valid_594575, JString, required = false,
                                 default = nil)
  if valid_594575 != nil:
    section.add "quotaUser", valid_594575
  var valid_594576 = query.getOrDefault("sortField")
  valid_594576 = validateParameter(valid_594576, JString, required = false,
                                 default = newJString("ID"))
  if valid_594576 != nil:
    section.add "sortField", valid_594576
  var valid_594577 = query.getOrDefault("alt")
  valid_594577 = validateParameter(valid_594577, JString, required = false,
                                 default = newJString("json"))
  if valid_594577 != nil:
    section.add "alt", valid_594577
  var valid_594578 = query.getOrDefault("onlyParent")
  valid_594578 = validateParameter(valid_594578, JBool, required = false, default = nil)
  if valid_594578 != nil:
    section.add "onlyParent", valid_594578
  var valid_594579 = query.getOrDefault("searchString")
  valid_594579 = validateParameter(valid_594579, JString, required = false,
                                 default = nil)
  if valid_594579 != nil:
    section.add "searchString", valid_594579
  var valid_594580 = query.getOrDefault("oauth_token")
  valid_594580 = validateParameter(valid_594580, JString, required = false,
                                 default = nil)
  if valid_594580 != nil:
    section.add "oauth_token", valid_594580
  var valid_594581 = query.getOrDefault("userIp")
  valid_594581 = validateParameter(valid_594581, JString, required = false,
                                 default = nil)
  if valid_594581 != nil:
    section.add "userIp", valid_594581
  var valid_594582 = query.getOrDefault("maxResults")
  valid_594582 = validateParameter(valid_594582, JInt, required = false,
                                 default = newJInt(1000))
  if valid_594582 != nil:
    section.add "maxResults", valid_594582
  var valid_594583 = query.getOrDefault("floodlightConfigurationIds")
  valid_594583 = validateParameter(valid_594583, JArray, required = false,
                                 default = nil)
  if valid_594583 != nil:
    section.add "floodlightConfigurationIds", valid_594583
  var valid_594584 = query.getOrDefault("ids")
  valid_594584 = validateParameter(valid_594584, JArray, required = false,
                                 default = nil)
  if valid_594584 != nil:
    section.add "ids", valid_594584
  var valid_594585 = query.getOrDefault("key")
  valid_594585 = validateParameter(valid_594585, JString, required = false,
                                 default = nil)
  if valid_594585 != nil:
    section.add "key", valid_594585
  var valid_594586 = query.getOrDefault("status")
  valid_594586 = validateParameter(valid_594586, JString, required = false,
                                 default = newJString("APPROVED"))
  if valid_594586 != nil:
    section.add "status", valid_594586
  var valid_594587 = query.getOrDefault("sortOrder")
  valid_594587 = validateParameter(valid_594587, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_594587 != nil:
    section.add "sortOrder", valid_594587
  var valid_594588 = query.getOrDefault("prettyPrint")
  valid_594588 = validateParameter(valid_594588, JBool, required = false,
                                 default = newJBool(true))
  if valid_594588 != nil:
    section.add "prettyPrint", valid_594588
  var valid_594589 = query.getOrDefault("includeAdvertisersWithoutGroupsOnly")
  valid_594589 = validateParameter(valid_594589, JBool, required = false, default = nil)
  if valid_594589 != nil:
    section.add "includeAdvertisersWithoutGroupsOnly", valid_594589
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594590: Call_DfareportingAdvertisersList_594567; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of advertisers, possibly filtered. This method supports paging.
  ## 
  let valid = call_594590.validator(path, query, header, formData, body)
  let scheme = call_594590.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594590.url(scheme.get, call_594590.host, call_594590.base,
                         call_594590.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594590, url, valid)

proc call*(call_594591: Call_DfareportingAdvertisersList_594567; profileId: string;
          subaccountId: string = ""; advertiserGroupIds: JsonNode = nil;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "ID"; alt: string = "json"; onlyParent: bool = false;
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; floodlightConfigurationIds: JsonNode = nil;
          ids: JsonNode = nil; key: string = ""; status: string = "APPROVED";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true;
          includeAdvertisersWithoutGroupsOnly: bool = false): Recallable =
  ## dfareportingAdvertisersList
  ## Retrieves a list of advertisers, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   subaccountId: string
  ##               : Select only advertisers with these subaccount IDs.
  ##   advertiserGroupIds: JArray
  ##                     : Select only advertisers with these advertiser group IDs.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   onlyParent: bool
  ##             : Select only advertisers which use another advertiser's floodlight configuration.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser June 2015", "advertiser April 2015", or simply "advertiser 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertiser" will match objects with name "my advertiser", "advertiser 2015", or simply "advertiser".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   floodlightConfigurationIds: JArray
  ##                             : Select only advertisers with these floodlight configuration IDs.
  ##   ids: JArray
  ##      : Select only advertisers with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   status: string
  ##         : Select only advertisers with the specified status.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   includeAdvertisersWithoutGroupsOnly: bool
  ##                                      : Select only advertisers which do not belong to any advertiser group.
  var path_594592 = newJObject()
  var query_594593 = newJObject()
  add(path_594592, "profileId", newJString(profileId))
  add(query_594593, "subaccountId", newJString(subaccountId))
  if advertiserGroupIds != nil:
    query_594593.add "advertiserGroupIds", advertiserGroupIds
  add(query_594593, "fields", newJString(fields))
  add(query_594593, "pageToken", newJString(pageToken))
  add(query_594593, "quotaUser", newJString(quotaUser))
  add(query_594593, "sortField", newJString(sortField))
  add(query_594593, "alt", newJString(alt))
  add(query_594593, "onlyParent", newJBool(onlyParent))
  add(query_594593, "searchString", newJString(searchString))
  add(query_594593, "oauth_token", newJString(oauthToken))
  add(query_594593, "userIp", newJString(userIp))
  add(query_594593, "maxResults", newJInt(maxResults))
  if floodlightConfigurationIds != nil:
    query_594593.add "floodlightConfigurationIds", floodlightConfigurationIds
  if ids != nil:
    query_594593.add "ids", ids
  add(query_594593, "key", newJString(key))
  add(query_594593, "status", newJString(status))
  add(query_594593, "sortOrder", newJString(sortOrder))
  add(query_594593, "prettyPrint", newJBool(prettyPrint))
  add(query_594593, "includeAdvertisersWithoutGroupsOnly",
      newJBool(includeAdvertisersWithoutGroupsOnly))
  result = call_594591.call(path_594592, query_594593, nil, nil, nil)

var dfareportingAdvertisersList* = Call_DfareportingAdvertisersList_594567(
    name: "dfareportingAdvertisersList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/advertisers",
    validator: validate_DfareportingAdvertisersList_594568,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertisersList_594569,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersPatch_594628 = ref object of OpenApiRestCall_593437
proc url_DfareportingAdvertisersPatch_594630(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersPatch_594629(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing advertiser. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594631 = path.getOrDefault("profileId")
  valid_594631 = validateParameter(valid_594631, JString, required = true,
                                 default = nil)
  if valid_594631 != nil:
    section.add "profileId", valid_594631
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Advertiser ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594632 = query.getOrDefault("fields")
  valid_594632 = validateParameter(valid_594632, JString, required = false,
                                 default = nil)
  if valid_594632 != nil:
    section.add "fields", valid_594632
  var valid_594633 = query.getOrDefault("quotaUser")
  valid_594633 = validateParameter(valid_594633, JString, required = false,
                                 default = nil)
  if valid_594633 != nil:
    section.add "quotaUser", valid_594633
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_594634 = query.getOrDefault("id")
  valid_594634 = validateParameter(valid_594634, JString, required = true,
                                 default = nil)
  if valid_594634 != nil:
    section.add "id", valid_594634
  var valid_594635 = query.getOrDefault("alt")
  valid_594635 = validateParameter(valid_594635, JString, required = false,
                                 default = newJString("json"))
  if valid_594635 != nil:
    section.add "alt", valid_594635
  var valid_594636 = query.getOrDefault("oauth_token")
  valid_594636 = validateParameter(valid_594636, JString, required = false,
                                 default = nil)
  if valid_594636 != nil:
    section.add "oauth_token", valid_594636
  var valid_594637 = query.getOrDefault("userIp")
  valid_594637 = validateParameter(valid_594637, JString, required = false,
                                 default = nil)
  if valid_594637 != nil:
    section.add "userIp", valid_594637
  var valid_594638 = query.getOrDefault("key")
  valid_594638 = validateParameter(valid_594638, JString, required = false,
                                 default = nil)
  if valid_594638 != nil:
    section.add "key", valid_594638
  var valid_594639 = query.getOrDefault("prettyPrint")
  valid_594639 = validateParameter(valid_594639, JBool, required = false,
                                 default = newJBool(true))
  if valid_594639 != nil:
    section.add "prettyPrint", valid_594639
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594641: Call_DfareportingAdvertisersPatch_594628; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing advertiser. This method supports patch semantics.
  ## 
  let valid = call_594641.validator(path, query, header, formData, body)
  let scheme = call_594641.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594641.url(scheme.get, call_594641.host, call_594641.base,
                         call_594641.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594641, url, valid)

proc call*(call_594642: Call_DfareportingAdvertisersPatch_594628;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertisersPatch
  ## Updates an existing advertiser. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Advertiser ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594643 = newJObject()
  var query_594644 = newJObject()
  var body_594645 = newJObject()
  add(path_594643, "profileId", newJString(profileId))
  add(query_594644, "fields", newJString(fields))
  add(query_594644, "quotaUser", newJString(quotaUser))
  add(query_594644, "id", newJString(id))
  add(query_594644, "alt", newJString(alt))
  add(query_594644, "oauth_token", newJString(oauthToken))
  add(query_594644, "userIp", newJString(userIp))
  add(query_594644, "key", newJString(key))
  if body != nil:
    body_594645 = body
  add(query_594644, "prettyPrint", newJBool(prettyPrint))
  result = call_594642.call(path_594643, query_594644, nil, nil, body_594645)

var dfareportingAdvertisersPatch* = Call_DfareportingAdvertisersPatch_594628(
    name: "dfareportingAdvertisersPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/advertisers",
    validator: validate_DfareportingAdvertisersPatch_594629,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertisersPatch_594630,
    schemes: {Scheme.Https})
type
  Call_DfareportingAdvertisersGet_594646 = ref object of OpenApiRestCall_593437
proc url_DfareportingAdvertisersGet_594648(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/advertisers/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingAdvertisersGet_594647(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one advertiser by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Advertiser ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594649 = path.getOrDefault("profileId")
  valid_594649 = validateParameter(valid_594649, JString, required = true,
                                 default = nil)
  if valid_594649 != nil:
    section.add "profileId", valid_594649
  var valid_594650 = path.getOrDefault("id")
  valid_594650 = validateParameter(valid_594650, JString, required = true,
                                 default = nil)
  if valid_594650 != nil:
    section.add "id", valid_594650
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594651 = query.getOrDefault("fields")
  valid_594651 = validateParameter(valid_594651, JString, required = false,
                                 default = nil)
  if valid_594651 != nil:
    section.add "fields", valid_594651
  var valid_594652 = query.getOrDefault("quotaUser")
  valid_594652 = validateParameter(valid_594652, JString, required = false,
                                 default = nil)
  if valid_594652 != nil:
    section.add "quotaUser", valid_594652
  var valid_594653 = query.getOrDefault("alt")
  valid_594653 = validateParameter(valid_594653, JString, required = false,
                                 default = newJString("json"))
  if valid_594653 != nil:
    section.add "alt", valid_594653
  var valid_594654 = query.getOrDefault("oauth_token")
  valid_594654 = validateParameter(valid_594654, JString, required = false,
                                 default = nil)
  if valid_594654 != nil:
    section.add "oauth_token", valid_594654
  var valid_594655 = query.getOrDefault("userIp")
  valid_594655 = validateParameter(valid_594655, JString, required = false,
                                 default = nil)
  if valid_594655 != nil:
    section.add "userIp", valid_594655
  var valid_594656 = query.getOrDefault("key")
  valid_594656 = validateParameter(valid_594656, JString, required = false,
                                 default = nil)
  if valid_594656 != nil:
    section.add "key", valid_594656
  var valid_594657 = query.getOrDefault("prettyPrint")
  valid_594657 = validateParameter(valid_594657, JBool, required = false,
                                 default = newJBool(true))
  if valid_594657 != nil:
    section.add "prettyPrint", valid_594657
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594658: Call_DfareportingAdvertisersGet_594646; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one advertiser by ID.
  ## 
  let valid = call_594658.validator(path, query, header, formData, body)
  let scheme = call_594658.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594658.url(scheme.get, call_594658.host, call_594658.base,
                         call_594658.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594658, url, valid)

proc call*(call_594659: Call_DfareportingAdvertisersGet_594646; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingAdvertisersGet
  ## Gets one advertiser by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Advertiser ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594660 = newJObject()
  var query_594661 = newJObject()
  add(path_594660, "profileId", newJString(profileId))
  add(query_594661, "fields", newJString(fields))
  add(query_594661, "quotaUser", newJString(quotaUser))
  add(query_594661, "alt", newJString(alt))
  add(query_594661, "oauth_token", newJString(oauthToken))
  add(query_594661, "userIp", newJString(userIp))
  add(path_594660, "id", newJString(id))
  add(query_594661, "key", newJString(key))
  add(query_594661, "prettyPrint", newJBool(prettyPrint))
  result = call_594659.call(path_594660, query_594661, nil, nil, nil)

var dfareportingAdvertisersGet* = Call_DfareportingAdvertisersGet_594646(
    name: "dfareportingAdvertisersGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/advertisers/{id}",
    validator: validate_DfareportingAdvertisersGet_594647,
    base: "/dfareporting/v3.2", url: url_DfareportingAdvertisersGet_594648,
    schemes: {Scheme.Https})
type
  Call_DfareportingBrowsersList_594662 = ref object of OpenApiRestCall_593437
proc url_DfareportingBrowsersList_594664(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/browsers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingBrowsersList_594663(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of browsers.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594665 = path.getOrDefault("profileId")
  valid_594665 = validateParameter(valid_594665, JString, required = true,
                                 default = nil)
  if valid_594665 != nil:
    section.add "profileId", valid_594665
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594666 = query.getOrDefault("fields")
  valid_594666 = validateParameter(valid_594666, JString, required = false,
                                 default = nil)
  if valid_594666 != nil:
    section.add "fields", valid_594666
  var valid_594667 = query.getOrDefault("quotaUser")
  valid_594667 = validateParameter(valid_594667, JString, required = false,
                                 default = nil)
  if valid_594667 != nil:
    section.add "quotaUser", valid_594667
  var valid_594668 = query.getOrDefault("alt")
  valid_594668 = validateParameter(valid_594668, JString, required = false,
                                 default = newJString("json"))
  if valid_594668 != nil:
    section.add "alt", valid_594668
  var valid_594669 = query.getOrDefault("oauth_token")
  valid_594669 = validateParameter(valid_594669, JString, required = false,
                                 default = nil)
  if valid_594669 != nil:
    section.add "oauth_token", valid_594669
  var valid_594670 = query.getOrDefault("userIp")
  valid_594670 = validateParameter(valid_594670, JString, required = false,
                                 default = nil)
  if valid_594670 != nil:
    section.add "userIp", valid_594670
  var valid_594671 = query.getOrDefault("key")
  valid_594671 = validateParameter(valid_594671, JString, required = false,
                                 default = nil)
  if valid_594671 != nil:
    section.add "key", valid_594671
  var valid_594672 = query.getOrDefault("prettyPrint")
  valid_594672 = validateParameter(valid_594672, JBool, required = false,
                                 default = newJBool(true))
  if valid_594672 != nil:
    section.add "prettyPrint", valid_594672
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594673: Call_DfareportingBrowsersList_594662; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of browsers.
  ## 
  let valid = call_594673.validator(path, query, header, formData, body)
  let scheme = call_594673.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594673.url(scheme.get, call_594673.host, call_594673.base,
                         call_594673.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594673, url, valid)

proc call*(call_594674: Call_DfareportingBrowsersList_594662; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingBrowsersList
  ## Retrieves a list of browsers.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594675 = newJObject()
  var query_594676 = newJObject()
  add(path_594675, "profileId", newJString(profileId))
  add(query_594676, "fields", newJString(fields))
  add(query_594676, "quotaUser", newJString(quotaUser))
  add(query_594676, "alt", newJString(alt))
  add(query_594676, "oauth_token", newJString(oauthToken))
  add(query_594676, "userIp", newJString(userIp))
  add(query_594676, "key", newJString(key))
  add(query_594676, "prettyPrint", newJBool(prettyPrint))
  result = call_594674.call(path_594675, query_594676, nil, nil, nil)

var dfareportingBrowsersList* = Call_DfareportingBrowsersList_594662(
    name: "dfareportingBrowsersList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/browsers",
    validator: validate_DfareportingBrowsersList_594663,
    base: "/dfareporting/v3.2", url: url_DfareportingBrowsersList_594664,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsUpdate_594705 = ref object of OpenApiRestCall_593437
proc url_DfareportingCampaignsUpdate_594707(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsUpdate_594706(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing campaign.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594708 = path.getOrDefault("profileId")
  valid_594708 = validateParameter(valid_594708, JString, required = true,
                                 default = nil)
  if valid_594708 != nil:
    section.add "profileId", valid_594708
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594709 = query.getOrDefault("fields")
  valid_594709 = validateParameter(valid_594709, JString, required = false,
                                 default = nil)
  if valid_594709 != nil:
    section.add "fields", valid_594709
  var valid_594710 = query.getOrDefault("quotaUser")
  valid_594710 = validateParameter(valid_594710, JString, required = false,
                                 default = nil)
  if valid_594710 != nil:
    section.add "quotaUser", valid_594710
  var valid_594711 = query.getOrDefault("alt")
  valid_594711 = validateParameter(valid_594711, JString, required = false,
                                 default = newJString("json"))
  if valid_594711 != nil:
    section.add "alt", valid_594711
  var valid_594712 = query.getOrDefault("oauth_token")
  valid_594712 = validateParameter(valid_594712, JString, required = false,
                                 default = nil)
  if valid_594712 != nil:
    section.add "oauth_token", valid_594712
  var valid_594713 = query.getOrDefault("userIp")
  valid_594713 = validateParameter(valid_594713, JString, required = false,
                                 default = nil)
  if valid_594713 != nil:
    section.add "userIp", valid_594713
  var valid_594714 = query.getOrDefault("key")
  valid_594714 = validateParameter(valid_594714, JString, required = false,
                                 default = nil)
  if valid_594714 != nil:
    section.add "key", valid_594714
  var valid_594715 = query.getOrDefault("prettyPrint")
  valid_594715 = validateParameter(valid_594715, JBool, required = false,
                                 default = newJBool(true))
  if valid_594715 != nil:
    section.add "prettyPrint", valid_594715
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594717: Call_DfareportingCampaignsUpdate_594705; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing campaign.
  ## 
  let valid = call_594717.validator(path, query, header, formData, body)
  let scheme = call_594717.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594717.url(scheme.get, call_594717.host, call_594717.base,
                         call_594717.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594717, url, valid)

proc call*(call_594718: Call_DfareportingCampaignsUpdate_594705; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCampaignsUpdate
  ## Updates an existing campaign.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594719 = newJObject()
  var query_594720 = newJObject()
  var body_594721 = newJObject()
  add(path_594719, "profileId", newJString(profileId))
  add(query_594720, "fields", newJString(fields))
  add(query_594720, "quotaUser", newJString(quotaUser))
  add(query_594720, "alt", newJString(alt))
  add(query_594720, "oauth_token", newJString(oauthToken))
  add(query_594720, "userIp", newJString(userIp))
  add(query_594720, "key", newJString(key))
  if body != nil:
    body_594721 = body
  add(query_594720, "prettyPrint", newJBool(prettyPrint))
  result = call_594718.call(path_594719, query_594720, nil, nil, body_594721)

var dfareportingCampaignsUpdate* = Call_DfareportingCampaignsUpdate_594705(
    name: "dfareportingCampaignsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns",
    validator: validate_DfareportingCampaignsUpdate_594706,
    base: "/dfareporting/v3.2", url: url_DfareportingCampaignsUpdate_594707,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsInsert_594722 = ref object of OpenApiRestCall_593437
proc url_DfareportingCampaignsInsert_594724(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsInsert_594723(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new campaign.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594725 = path.getOrDefault("profileId")
  valid_594725 = validateParameter(valid_594725, JString, required = true,
                                 default = nil)
  if valid_594725 != nil:
    section.add "profileId", valid_594725
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594726 = query.getOrDefault("fields")
  valid_594726 = validateParameter(valid_594726, JString, required = false,
                                 default = nil)
  if valid_594726 != nil:
    section.add "fields", valid_594726
  var valid_594727 = query.getOrDefault("quotaUser")
  valid_594727 = validateParameter(valid_594727, JString, required = false,
                                 default = nil)
  if valid_594727 != nil:
    section.add "quotaUser", valid_594727
  var valid_594728 = query.getOrDefault("alt")
  valid_594728 = validateParameter(valid_594728, JString, required = false,
                                 default = newJString("json"))
  if valid_594728 != nil:
    section.add "alt", valid_594728
  var valid_594729 = query.getOrDefault("oauth_token")
  valid_594729 = validateParameter(valid_594729, JString, required = false,
                                 default = nil)
  if valid_594729 != nil:
    section.add "oauth_token", valid_594729
  var valid_594730 = query.getOrDefault("userIp")
  valid_594730 = validateParameter(valid_594730, JString, required = false,
                                 default = nil)
  if valid_594730 != nil:
    section.add "userIp", valid_594730
  var valid_594731 = query.getOrDefault("key")
  valid_594731 = validateParameter(valid_594731, JString, required = false,
                                 default = nil)
  if valid_594731 != nil:
    section.add "key", valid_594731
  var valid_594732 = query.getOrDefault("prettyPrint")
  valid_594732 = validateParameter(valid_594732, JBool, required = false,
                                 default = newJBool(true))
  if valid_594732 != nil:
    section.add "prettyPrint", valid_594732
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594734: Call_DfareportingCampaignsInsert_594722; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new campaign.
  ## 
  let valid = call_594734.validator(path, query, header, formData, body)
  let scheme = call_594734.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594734.url(scheme.get, call_594734.host, call_594734.base,
                         call_594734.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594734, url, valid)

proc call*(call_594735: Call_DfareportingCampaignsInsert_594722; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCampaignsInsert
  ## Inserts a new campaign.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594736 = newJObject()
  var query_594737 = newJObject()
  var body_594738 = newJObject()
  add(path_594736, "profileId", newJString(profileId))
  add(query_594737, "fields", newJString(fields))
  add(query_594737, "quotaUser", newJString(quotaUser))
  add(query_594737, "alt", newJString(alt))
  add(query_594737, "oauth_token", newJString(oauthToken))
  add(query_594737, "userIp", newJString(userIp))
  add(query_594737, "key", newJString(key))
  if body != nil:
    body_594738 = body
  add(query_594737, "prettyPrint", newJBool(prettyPrint))
  result = call_594735.call(path_594736, query_594737, nil, nil, body_594738)

var dfareportingCampaignsInsert* = Call_DfareportingCampaignsInsert_594722(
    name: "dfareportingCampaignsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns",
    validator: validate_DfareportingCampaignsInsert_594723,
    base: "/dfareporting/v3.2", url: url_DfareportingCampaignsInsert_594724,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsList_594677 = ref object of OpenApiRestCall_593437
proc url_DfareportingCampaignsList_594679(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsList_594678(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of campaigns, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594680 = path.getOrDefault("profileId")
  valid_594680 = validateParameter(valid_594680, JString, required = true,
                                 default = nil)
  if valid_594680 != nil:
    section.add "profileId", valid_594680
  result.add "path", section
  ## parameters in `query` object:
  ##   overriddenEventTagId: JString
  ##                       : Select only campaigns that have overridden this event tag ID.
  ##   subaccountId: JString
  ##               : Select only campaigns that belong to this subaccount.
  ##   advertiserGroupIds: JArray
  ##                     : Select only campaigns whose advertisers belong to these advertiser groups.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   atLeastOneOptimizationActivity: JBool
  ##                                 : Select only campaigns that have at least one optimization activity.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for campaigns by name or ID. Wildcards (*) are allowed. For example, "campaign*2015" will return campaigns with names like "campaign June 2015", "campaign April 2015", or simply "campaign 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "campaign" will match campaigns with name "my campaign", "campaign 2015", or simply "campaign".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived campaigns. Don't set this field to select both archived and non-archived campaigns.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only campaigns with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only campaigns that belong to these advertisers.
  ##   excludedIds: JArray
  ##              : Exclude campaigns with these IDs.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594681 = query.getOrDefault("overriddenEventTagId")
  valid_594681 = validateParameter(valid_594681, JString, required = false,
                                 default = nil)
  if valid_594681 != nil:
    section.add "overriddenEventTagId", valid_594681
  var valid_594682 = query.getOrDefault("subaccountId")
  valid_594682 = validateParameter(valid_594682, JString, required = false,
                                 default = nil)
  if valid_594682 != nil:
    section.add "subaccountId", valid_594682
  var valid_594683 = query.getOrDefault("advertiserGroupIds")
  valid_594683 = validateParameter(valid_594683, JArray, required = false,
                                 default = nil)
  if valid_594683 != nil:
    section.add "advertiserGroupIds", valid_594683
  var valid_594684 = query.getOrDefault("fields")
  valid_594684 = validateParameter(valid_594684, JString, required = false,
                                 default = nil)
  if valid_594684 != nil:
    section.add "fields", valid_594684
  var valid_594685 = query.getOrDefault("atLeastOneOptimizationActivity")
  valid_594685 = validateParameter(valid_594685, JBool, required = false, default = nil)
  if valid_594685 != nil:
    section.add "atLeastOneOptimizationActivity", valid_594685
  var valid_594686 = query.getOrDefault("quotaUser")
  valid_594686 = validateParameter(valid_594686, JString, required = false,
                                 default = nil)
  if valid_594686 != nil:
    section.add "quotaUser", valid_594686
  var valid_594687 = query.getOrDefault("pageToken")
  valid_594687 = validateParameter(valid_594687, JString, required = false,
                                 default = nil)
  if valid_594687 != nil:
    section.add "pageToken", valid_594687
  var valid_594688 = query.getOrDefault("sortField")
  valid_594688 = validateParameter(valid_594688, JString, required = false,
                                 default = newJString("ID"))
  if valid_594688 != nil:
    section.add "sortField", valid_594688
  var valid_594689 = query.getOrDefault("alt")
  valid_594689 = validateParameter(valid_594689, JString, required = false,
                                 default = newJString("json"))
  if valid_594689 != nil:
    section.add "alt", valid_594689
  var valid_594690 = query.getOrDefault("searchString")
  valid_594690 = validateParameter(valid_594690, JString, required = false,
                                 default = nil)
  if valid_594690 != nil:
    section.add "searchString", valid_594690
  var valid_594691 = query.getOrDefault("oauth_token")
  valid_594691 = validateParameter(valid_594691, JString, required = false,
                                 default = nil)
  if valid_594691 != nil:
    section.add "oauth_token", valid_594691
  var valid_594692 = query.getOrDefault("userIp")
  valid_594692 = validateParameter(valid_594692, JString, required = false,
                                 default = nil)
  if valid_594692 != nil:
    section.add "userIp", valid_594692
  var valid_594693 = query.getOrDefault("archived")
  valid_594693 = validateParameter(valid_594693, JBool, required = false, default = nil)
  if valid_594693 != nil:
    section.add "archived", valid_594693
  var valid_594694 = query.getOrDefault("maxResults")
  valid_594694 = validateParameter(valid_594694, JInt, required = false,
                                 default = newJInt(1000))
  if valid_594694 != nil:
    section.add "maxResults", valid_594694
  var valid_594695 = query.getOrDefault("ids")
  valid_594695 = validateParameter(valid_594695, JArray, required = false,
                                 default = nil)
  if valid_594695 != nil:
    section.add "ids", valid_594695
  var valid_594696 = query.getOrDefault("key")
  valid_594696 = validateParameter(valid_594696, JString, required = false,
                                 default = nil)
  if valid_594696 != nil:
    section.add "key", valid_594696
  var valid_594697 = query.getOrDefault("advertiserIds")
  valid_594697 = validateParameter(valid_594697, JArray, required = false,
                                 default = nil)
  if valid_594697 != nil:
    section.add "advertiserIds", valid_594697
  var valid_594698 = query.getOrDefault("excludedIds")
  valid_594698 = validateParameter(valid_594698, JArray, required = false,
                                 default = nil)
  if valid_594698 != nil:
    section.add "excludedIds", valid_594698
  var valid_594699 = query.getOrDefault("sortOrder")
  valid_594699 = validateParameter(valid_594699, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_594699 != nil:
    section.add "sortOrder", valid_594699
  var valid_594700 = query.getOrDefault("prettyPrint")
  valid_594700 = validateParameter(valid_594700, JBool, required = false,
                                 default = newJBool(true))
  if valid_594700 != nil:
    section.add "prettyPrint", valid_594700
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594701: Call_DfareportingCampaignsList_594677; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of campaigns, possibly filtered. This method supports paging.
  ## 
  let valid = call_594701.validator(path, query, header, formData, body)
  let scheme = call_594701.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594701.url(scheme.get, call_594701.host, call_594701.base,
                         call_594701.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594701, url, valid)

proc call*(call_594702: Call_DfareportingCampaignsList_594677; profileId: string;
          overriddenEventTagId: string = ""; subaccountId: string = "";
          advertiserGroupIds: JsonNode = nil; fields: string = "";
          atLeastOneOptimizationActivity: bool = false; quotaUser: string = "";
          pageToken: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          archived: bool = false; maxResults: int = 1000; ids: JsonNode = nil;
          key: string = ""; advertiserIds: JsonNode = nil; excludedIds: JsonNode = nil;
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingCampaignsList
  ## Retrieves a list of campaigns, possibly filtered. This method supports paging.
  ##   overriddenEventTagId: string
  ##                       : Select only campaigns that have overridden this event tag ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   subaccountId: string
  ##               : Select only campaigns that belong to this subaccount.
  ##   advertiserGroupIds: JArray
  ##                     : Select only campaigns whose advertisers belong to these advertiser groups.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   atLeastOneOptimizationActivity: bool
  ##                                 : Select only campaigns that have at least one optimization activity.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for campaigns by name or ID. Wildcards (*) are allowed. For example, "campaign*2015" will return campaigns with names like "campaign June 2015", "campaign April 2015", or simply "campaign 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "campaign" will match campaigns with name "my campaign", "campaign 2015", or simply "campaign".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived campaigns. Don't set this field to select both archived and non-archived campaigns.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only campaigns with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only campaigns that belong to these advertisers.
  ##   excludedIds: JArray
  ##              : Exclude campaigns with these IDs.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594703 = newJObject()
  var query_594704 = newJObject()
  add(query_594704, "overriddenEventTagId", newJString(overriddenEventTagId))
  add(path_594703, "profileId", newJString(profileId))
  add(query_594704, "subaccountId", newJString(subaccountId))
  if advertiserGroupIds != nil:
    query_594704.add "advertiserGroupIds", advertiserGroupIds
  add(query_594704, "fields", newJString(fields))
  add(query_594704, "atLeastOneOptimizationActivity",
      newJBool(atLeastOneOptimizationActivity))
  add(query_594704, "quotaUser", newJString(quotaUser))
  add(query_594704, "pageToken", newJString(pageToken))
  add(query_594704, "sortField", newJString(sortField))
  add(query_594704, "alt", newJString(alt))
  add(query_594704, "searchString", newJString(searchString))
  add(query_594704, "oauth_token", newJString(oauthToken))
  add(query_594704, "userIp", newJString(userIp))
  add(query_594704, "archived", newJBool(archived))
  add(query_594704, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_594704.add "ids", ids
  add(query_594704, "key", newJString(key))
  if advertiserIds != nil:
    query_594704.add "advertiserIds", advertiserIds
  if excludedIds != nil:
    query_594704.add "excludedIds", excludedIds
  add(query_594704, "sortOrder", newJString(sortOrder))
  add(query_594704, "prettyPrint", newJBool(prettyPrint))
  result = call_594702.call(path_594703, query_594704, nil, nil, nil)

var dfareportingCampaignsList* = Call_DfareportingCampaignsList_594677(
    name: "dfareportingCampaignsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns",
    validator: validate_DfareportingCampaignsList_594678,
    base: "/dfareporting/v3.2", url: url_DfareportingCampaignsList_594679,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsPatch_594739 = ref object of OpenApiRestCall_593437
proc url_DfareportingCampaignsPatch_594741(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsPatch_594740(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing campaign. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594742 = path.getOrDefault("profileId")
  valid_594742 = validateParameter(valid_594742, JString, required = true,
                                 default = nil)
  if valid_594742 != nil:
    section.add "profileId", valid_594742
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Campaign ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594743 = query.getOrDefault("fields")
  valid_594743 = validateParameter(valid_594743, JString, required = false,
                                 default = nil)
  if valid_594743 != nil:
    section.add "fields", valid_594743
  var valid_594744 = query.getOrDefault("quotaUser")
  valid_594744 = validateParameter(valid_594744, JString, required = false,
                                 default = nil)
  if valid_594744 != nil:
    section.add "quotaUser", valid_594744
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_594745 = query.getOrDefault("id")
  valid_594745 = validateParameter(valid_594745, JString, required = true,
                                 default = nil)
  if valid_594745 != nil:
    section.add "id", valid_594745
  var valid_594746 = query.getOrDefault("alt")
  valid_594746 = validateParameter(valid_594746, JString, required = false,
                                 default = newJString("json"))
  if valid_594746 != nil:
    section.add "alt", valid_594746
  var valid_594747 = query.getOrDefault("oauth_token")
  valid_594747 = validateParameter(valid_594747, JString, required = false,
                                 default = nil)
  if valid_594747 != nil:
    section.add "oauth_token", valid_594747
  var valid_594748 = query.getOrDefault("userIp")
  valid_594748 = validateParameter(valid_594748, JString, required = false,
                                 default = nil)
  if valid_594748 != nil:
    section.add "userIp", valid_594748
  var valid_594749 = query.getOrDefault("key")
  valid_594749 = validateParameter(valid_594749, JString, required = false,
                                 default = nil)
  if valid_594749 != nil:
    section.add "key", valid_594749
  var valid_594750 = query.getOrDefault("prettyPrint")
  valid_594750 = validateParameter(valid_594750, JBool, required = false,
                                 default = newJBool(true))
  if valid_594750 != nil:
    section.add "prettyPrint", valid_594750
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594752: Call_DfareportingCampaignsPatch_594739; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing campaign. This method supports patch semantics.
  ## 
  let valid = call_594752.validator(path, query, header, formData, body)
  let scheme = call_594752.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594752.url(scheme.get, call_594752.host, call_594752.base,
                         call_594752.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594752, url, valid)

proc call*(call_594753: Call_DfareportingCampaignsPatch_594739; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCampaignsPatch
  ## Updates an existing campaign. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Campaign ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594754 = newJObject()
  var query_594755 = newJObject()
  var body_594756 = newJObject()
  add(path_594754, "profileId", newJString(profileId))
  add(query_594755, "fields", newJString(fields))
  add(query_594755, "quotaUser", newJString(quotaUser))
  add(query_594755, "id", newJString(id))
  add(query_594755, "alt", newJString(alt))
  add(query_594755, "oauth_token", newJString(oauthToken))
  add(query_594755, "userIp", newJString(userIp))
  add(query_594755, "key", newJString(key))
  if body != nil:
    body_594756 = body
  add(query_594755, "prettyPrint", newJBool(prettyPrint))
  result = call_594753.call(path_594754, query_594755, nil, nil, body_594756)

var dfareportingCampaignsPatch* = Call_DfareportingCampaignsPatch_594739(
    name: "dfareportingCampaignsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns",
    validator: validate_DfareportingCampaignsPatch_594740,
    base: "/dfareporting/v3.2", url: url_DfareportingCampaignsPatch_594741,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignCreativeAssociationsInsert_594776 = ref object of OpenApiRestCall_593437
proc url_DfareportingCampaignCreativeAssociationsInsert_594778(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "campaignId" in path, "`campaignId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns/"),
               (kind: VariableSegment, value: "campaignId"),
               (kind: ConstantSegment, value: "/campaignCreativeAssociations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignCreativeAssociationsInsert_594777(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   campaignId: JString (required)
  ##             : Campaign ID in this association.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594779 = path.getOrDefault("profileId")
  valid_594779 = validateParameter(valid_594779, JString, required = true,
                                 default = nil)
  if valid_594779 != nil:
    section.add "profileId", valid_594779
  var valid_594780 = path.getOrDefault("campaignId")
  valid_594780 = validateParameter(valid_594780, JString, required = true,
                                 default = nil)
  if valid_594780 != nil:
    section.add "campaignId", valid_594780
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594781 = query.getOrDefault("fields")
  valid_594781 = validateParameter(valid_594781, JString, required = false,
                                 default = nil)
  if valid_594781 != nil:
    section.add "fields", valid_594781
  var valid_594782 = query.getOrDefault("quotaUser")
  valid_594782 = validateParameter(valid_594782, JString, required = false,
                                 default = nil)
  if valid_594782 != nil:
    section.add "quotaUser", valid_594782
  var valid_594783 = query.getOrDefault("alt")
  valid_594783 = validateParameter(valid_594783, JString, required = false,
                                 default = newJString("json"))
  if valid_594783 != nil:
    section.add "alt", valid_594783
  var valid_594784 = query.getOrDefault("oauth_token")
  valid_594784 = validateParameter(valid_594784, JString, required = false,
                                 default = nil)
  if valid_594784 != nil:
    section.add "oauth_token", valid_594784
  var valid_594785 = query.getOrDefault("userIp")
  valid_594785 = validateParameter(valid_594785, JString, required = false,
                                 default = nil)
  if valid_594785 != nil:
    section.add "userIp", valid_594785
  var valid_594786 = query.getOrDefault("key")
  valid_594786 = validateParameter(valid_594786, JString, required = false,
                                 default = nil)
  if valid_594786 != nil:
    section.add "key", valid_594786
  var valid_594787 = query.getOrDefault("prettyPrint")
  valid_594787 = validateParameter(valid_594787, JBool, required = false,
                                 default = newJBool(true))
  if valid_594787 != nil:
    section.add "prettyPrint", valid_594787
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594789: Call_DfareportingCampaignCreativeAssociationsInsert_594776;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already.
  ## 
  let valid = call_594789.validator(path, query, header, formData, body)
  let scheme = call_594789.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594789.url(scheme.get, call_594789.host, call_594789.base,
                         call_594789.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594789, url, valid)

proc call*(call_594790: Call_DfareportingCampaignCreativeAssociationsInsert_594776;
          profileId: string; campaignId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; body: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingCampaignCreativeAssociationsInsert
  ## Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   campaignId: string (required)
  ##             : Campaign ID in this association.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594791 = newJObject()
  var query_594792 = newJObject()
  var body_594793 = newJObject()
  add(path_594791, "profileId", newJString(profileId))
  add(path_594791, "campaignId", newJString(campaignId))
  add(query_594792, "fields", newJString(fields))
  add(query_594792, "quotaUser", newJString(quotaUser))
  add(query_594792, "alt", newJString(alt))
  add(query_594792, "oauth_token", newJString(oauthToken))
  add(query_594792, "userIp", newJString(userIp))
  add(query_594792, "key", newJString(key))
  if body != nil:
    body_594793 = body
  add(query_594792, "prettyPrint", newJBool(prettyPrint))
  result = call_594790.call(path_594791, query_594792, nil, nil, body_594793)

var dfareportingCampaignCreativeAssociationsInsert* = Call_DfareportingCampaignCreativeAssociationsInsert_594776(
    name: "dfareportingCampaignCreativeAssociationsInsert",
    meth: HttpMethod.HttpPost, host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations",
    validator: validate_DfareportingCampaignCreativeAssociationsInsert_594777,
    base: "/dfareporting/v3.2",
    url: url_DfareportingCampaignCreativeAssociationsInsert_594778,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignCreativeAssociationsList_594757 = ref object of OpenApiRestCall_593437
proc url_DfareportingCampaignCreativeAssociationsList_594759(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "campaignId" in path, "`campaignId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns/"),
               (kind: VariableSegment, value: "campaignId"),
               (kind: ConstantSegment, value: "/campaignCreativeAssociations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignCreativeAssociationsList_594758(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the list of creative IDs associated with the specified campaign. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   campaignId: JString (required)
  ##             : Campaign ID in this association.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594760 = path.getOrDefault("profileId")
  valid_594760 = validateParameter(valid_594760, JString, required = true,
                                 default = nil)
  if valid_594760 != nil:
    section.add "profileId", valid_594760
  var valid_594761 = path.getOrDefault("campaignId")
  valid_594761 = validateParameter(valid_594761, JString, required = true,
                                 default = nil)
  if valid_594761 != nil:
    section.add "campaignId", valid_594761
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594762 = query.getOrDefault("fields")
  valid_594762 = validateParameter(valid_594762, JString, required = false,
                                 default = nil)
  if valid_594762 != nil:
    section.add "fields", valid_594762
  var valid_594763 = query.getOrDefault("pageToken")
  valid_594763 = validateParameter(valid_594763, JString, required = false,
                                 default = nil)
  if valid_594763 != nil:
    section.add "pageToken", valid_594763
  var valid_594764 = query.getOrDefault("quotaUser")
  valid_594764 = validateParameter(valid_594764, JString, required = false,
                                 default = nil)
  if valid_594764 != nil:
    section.add "quotaUser", valid_594764
  var valid_594765 = query.getOrDefault("alt")
  valid_594765 = validateParameter(valid_594765, JString, required = false,
                                 default = newJString("json"))
  if valid_594765 != nil:
    section.add "alt", valid_594765
  var valid_594766 = query.getOrDefault("oauth_token")
  valid_594766 = validateParameter(valid_594766, JString, required = false,
                                 default = nil)
  if valid_594766 != nil:
    section.add "oauth_token", valid_594766
  var valid_594767 = query.getOrDefault("userIp")
  valid_594767 = validateParameter(valid_594767, JString, required = false,
                                 default = nil)
  if valid_594767 != nil:
    section.add "userIp", valid_594767
  var valid_594768 = query.getOrDefault("maxResults")
  valid_594768 = validateParameter(valid_594768, JInt, required = false,
                                 default = newJInt(1000))
  if valid_594768 != nil:
    section.add "maxResults", valid_594768
  var valid_594769 = query.getOrDefault("key")
  valid_594769 = validateParameter(valid_594769, JString, required = false,
                                 default = nil)
  if valid_594769 != nil:
    section.add "key", valid_594769
  var valid_594770 = query.getOrDefault("sortOrder")
  valid_594770 = validateParameter(valid_594770, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_594770 != nil:
    section.add "sortOrder", valid_594770
  var valid_594771 = query.getOrDefault("prettyPrint")
  valid_594771 = validateParameter(valid_594771, JBool, required = false,
                                 default = newJBool(true))
  if valid_594771 != nil:
    section.add "prettyPrint", valid_594771
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594772: Call_DfareportingCampaignCreativeAssociationsList_594757;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the list of creative IDs associated with the specified campaign. This method supports paging.
  ## 
  let valid = call_594772.validator(path, query, header, formData, body)
  let scheme = call_594772.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594772.url(scheme.get, call_594772.host, call_594772.base,
                         call_594772.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594772, url, valid)

proc call*(call_594773: Call_DfareportingCampaignCreativeAssociationsList_594757;
          profileId: string; campaignId: string; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; maxResults: int = 1000;
          key: string = ""; sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingCampaignCreativeAssociationsList
  ## Retrieves the list of creative IDs associated with the specified campaign. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   campaignId: string (required)
  ##             : Campaign ID in this association.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594774 = newJObject()
  var query_594775 = newJObject()
  add(path_594774, "profileId", newJString(profileId))
  add(path_594774, "campaignId", newJString(campaignId))
  add(query_594775, "fields", newJString(fields))
  add(query_594775, "pageToken", newJString(pageToken))
  add(query_594775, "quotaUser", newJString(quotaUser))
  add(query_594775, "alt", newJString(alt))
  add(query_594775, "oauth_token", newJString(oauthToken))
  add(query_594775, "userIp", newJString(userIp))
  add(query_594775, "maxResults", newJInt(maxResults))
  add(query_594775, "key", newJString(key))
  add(query_594775, "sortOrder", newJString(sortOrder))
  add(query_594775, "prettyPrint", newJBool(prettyPrint))
  result = call_594773.call(path_594774, query_594775, nil, nil, nil)

var dfareportingCampaignCreativeAssociationsList* = Call_DfareportingCampaignCreativeAssociationsList_594757(
    name: "dfareportingCampaignCreativeAssociationsList",
    meth: HttpMethod.HttpGet, host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations",
    validator: validate_DfareportingCampaignCreativeAssociationsList_594758,
    base: "/dfareporting/v3.2",
    url: url_DfareportingCampaignCreativeAssociationsList_594759,
    schemes: {Scheme.Https})
type
  Call_DfareportingCampaignsGet_594794 = ref object of OpenApiRestCall_593437
proc url_DfareportingCampaignsGet_594796(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/campaigns/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCampaignsGet_594795(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one campaign by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Campaign ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594797 = path.getOrDefault("profileId")
  valid_594797 = validateParameter(valid_594797, JString, required = true,
                                 default = nil)
  if valid_594797 != nil:
    section.add "profileId", valid_594797
  var valid_594798 = path.getOrDefault("id")
  valid_594798 = validateParameter(valid_594798, JString, required = true,
                                 default = nil)
  if valid_594798 != nil:
    section.add "id", valid_594798
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594799 = query.getOrDefault("fields")
  valid_594799 = validateParameter(valid_594799, JString, required = false,
                                 default = nil)
  if valid_594799 != nil:
    section.add "fields", valid_594799
  var valid_594800 = query.getOrDefault("quotaUser")
  valid_594800 = validateParameter(valid_594800, JString, required = false,
                                 default = nil)
  if valid_594800 != nil:
    section.add "quotaUser", valid_594800
  var valid_594801 = query.getOrDefault("alt")
  valid_594801 = validateParameter(valid_594801, JString, required = false,
                                 default = newJString("json"))
  if valid_594801 != nil:
    section.add "alt", valid_594801
  var valid_594802 = query.getOrDefault("oauth_token")
  valid_594802 = validateParameter(valid_594802, JString, required = false,
                                 default = nil)
  if valid_594802 != nil:
    section.add "oauth_token", valid_594802
  var valid_594803 = query.getOrDefault("userIp")
  valid_594803 = validateParameter(valid_594803, JString, required = false,
                                 default = nil)
  if valid_594803 != nil:
    section.add "userIp", valid_594803
  var valid_594804 = query.getOrDefault("key")
  valid_594804 = validateParameter(valid_594804, JString, required = false,
                                 default = nil)
  if valid_594804 != nil:
    section.add "key", valid_594804
  var valid_594805 = query.getOrDefault("prettyPrint")
  valid_594805 = validateParameter(valid_594805, JBool, required = false,
                                 default = newJBool(true))
  if valid_594805 != nil:
    section.add "prettyPrint", valid_594805
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594806: Call_DfareportingCampaignsGet_594794; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one campaign by ID.
  ## 
  let valid = call_594806.validator(path, query, header, formData, body)
  let scheme = call_594806.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594806.url(scheme.get, call_594806.host, call_594806.base,
                         call_594806.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594806, url, valid)

proc call*(call_594807: Call_DfareportingCampaignsGet_594794; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingCampaignsGet
  ## Gets one campaign by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Campaign ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594808 = newJObject()
  var query_594809 = newJObject()
  add(path_594808, "profileId", newJString(profileId))
  add(query_594809, "fields", newJString(fields))
  add(query_594809, "quotaUser", newJString(quotaUser))
  add(query_594809, "alt", newJString(alt))
  add(query_594809, "oauth_token", newJString(oauthToken))
  add(query_594809, "userIp", newJString(userIp))
  add(path_594808, "id", newJString(id))
  add(query_594809, "key", newJString(key))
  add(query_594809, "prettyPrint", newJBool(prettyPrint))
  result = call_594807.call(path_594808, query_594809, nil, nil, nil)

var dfareportingCampaignsGet* = Call_DfareportingCampaignsGet_594794(
    name: "dfareportingCampaignsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/campaigns/{id}",
    validator: validate_DfareportingCampaignsGet_594795,
    base: "/dfareporting/v3.2", url: url_DfareportingCampaignsGet_594796,
    schemes: {Scheme.Https})
type
  Call_DfareportingChangeLogsList_594810 = ref object of OpenApiRestCall_593437
proc url_DfareportingChangeLogsList_594812(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/changeLogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingChangeLogsList_594811(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of change logs. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594813 = path.getOrDefault("profileId")
  valid_594813 = validateParameter(valid_594813, JString, required = true,
                                 default = nil)
  if valid_594813 != nil:
    section.add "profileId", valid_594813
  result.add "path", section
  ## parameters in `query` object:
  ##   action: JString
  ##         : Select only change logs with the specified action.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   minChangeTime: JString
  ##                : Select only change logs whose change time is before the specified minChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Select only change logs whose object ID, user name, old or new values match the search string.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   maxChangeTime: JString
  ##                : Select only change logs whose change time is before the specified maxChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
  ##   ids: JArray
  ##      : Select only change logs with these IDs.
  ##   objectType: JString
  ##             : Select only change logs with the specified object type.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   objectIds: JArray
  ##            : Select only change logs with these object IDs.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   userProfileIds: JArray
  ##                 : Select only change logs with these user profile IDs.
  section = newJObject()
  var valid_594814 = query.getOrDefault("action")
  valid_594814 = validateParameter(valid_594814, JString, required = false,
                                 default = newJString("ACTION_ADD"))
  if valid_594814 != nil:
    section.add "action", valid_594814
  var valid_594815 = query.getOrDefault("fields")
  valid_594815 = validateParameter(valid_594815, JString, required = false,
                                 default = nil)
  if valid_594815 != nil:
    section.add "fields", valid_594815
  var valid_594816 = query.getOrDefault("pageToken")
  valid_594816 = validateParameter(valid_594816, JString, required = false,
                                 default = nil)
  if valid_594816 != nil:
    section.add "pageToken", valid_594816
  var valid_594817 = query.getOrDefault("quotaUser")
  valid_594817 = validateParameter(valid_594817, JString, required = false,
                                 default = nil)
  if valid_594817 != nil:
    section.add "quotaUser", valid_594817
  var valid_594818 = query.getOrDefault("minChangeTime")
  valid_594818 = validateParameter(valid_594818, JString, required = false,
                                 default = nil)
  if valid_594818 != nil:
    section.add "minChangeTime", valid_594818
  var valid_594819 = query.getOrDefault("alt")
  valid_594819 = validateParameter(valid_594819, JString, required = false,
                                 default = newJString("json"))
  if valid_594819 != nil:
    section.add "alt", valid_594819
  var valid_594820 = query.getOrDefault("searchString")
  valid_594820 = validateParameter(valid_594820, JString, required = false,
                                 default = nil)
  if valid_594820 != nil:
    section.add "searchString", valid_594820
  var valid_594821 = query.getOrDefault("oauth_token")
  valid_594821 = validateParameter(valid_594821, JString, required = false,
                                 default = nil)
  if valid_594821 != nil:
    section.add "oauth_token", valid_594821
  var valid_594822 = query.getOrDefault("userIp")
  valid_594822 = validateParameter(valid_594822, JString, required = false,
                                 default = nil)
  if valid_594822 != nil:
    section.add "userIp", valid_594822
  var valid_594823 = query.getOrDefault("maxResults")
  valid_594823 = validateParameter(valid_594823, JInt, required = false,
                                 default = newJInt(1000))
  if valid_594823 != nil:
    section.add "maxResults", valid_594823
  var valid_594824 = query.getOrDefault("maxChangeTime")
  valid_594824 = validateParameter(valid_594824, JString, required = false,
                                 default = nil)
  if valid_594824 != nil:
    section.add "maxChangeTime", valid_594824
  var valid_594825 = query.getOrDefault("ids")
  valid_594825 = validateParameter(valid_594825, JArray, required = false,
                                 default = nil)
  if valid_594825 != nil:
    section.add "ids", valid_594825
  var valid_594826 = query.getOrDefault("objectType")
  valid_594826 = validateParameter(valid_594826, JString, required = false,
                                 default = newJString("OBJECT_ACCOUNT"))
  if valid_594826 != nil:
    section.add "objectType", valid_594826
  var valid_594827 = query.getOrDefault("key")
  valid_594827 = validateParameter(valid_594827, JString, required = false,
                                 default = nil)
  if valid_594827 != nil:
    section.add "key", valid_594827
  var valid_594828 = query.getOrDefault("objectIds")
  valid_594828 = validateParameter(valid_594828, JArray, required = false,
                                 default = nil)
  if valid_594828 != nil:
    section.add "objectIds", valid_594828
  var valid_594829 = query.getOrDefault("prettyPrint")
  valid_594829 = validateParameter(valid_594829, JBool, required = false,
                                 default = newJBool(true))
  if valid_594829 != nil:
    section.add "prettyPrint", valid_594829
  var valid_594830 = query.getOrDefault("userProfileIds")
  valid_594830 = validateParameter(valid_594830, JArray, required = false,
                                 default = nil)
  if valid_594830 != nil:
    section.add "userProfileIds", valid_594830
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594831: Call_DfareportingChangeLogsList_594810; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of change logs. This method supports paging.
  ## 
  let valid = call_594831.validator(path, query, header, formData, body)
  let scheme = call_594831.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594831.url(scheme.get, call_594831.host, call_594831.base,
                         call_594831.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594831, url, valid)

proc call*(call_594832: Call_DfareportingChangeLogsList_594810; profileId: string;
          action: string = "ACTION_ADD"; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; minChangeTime: string = ""; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; maxChangeTime: string = ""; ids: JsonNode = nil;
          objectType: string = "OBJECT_ACCOUNT"; key: string = "";
          objectIds: JsonNode = nil; prettyPrint: bool = true;
          userProfileIds: JsonNode = nil): Recallable =
  ## dfareportingChangeLogsList
  ## Retrieves a list of change logs. This method supports paging.
  ##   action: string
  ##         : Select only change logs with the specified action.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   minChangeTime: string
  ##                : Select only change logs whose change time is before the specified minChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Select only change logs whose object ID, user name, old or new values match the search string.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   maxChangeTime: string
  ##                : Select only change logs whose change time is before the specified maxChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
  ##   ids: JArray
  ##      : Select only change logs with these IDs.
  ##   objectType: string
  ##             : Select only change logs with the specified object type.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   objectIds: JArray
  ##            : Select only change logs with these object IDs.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   userProfileIds: JArray
  ##                 : Select only change logs with these user profile IDs.
  var path_594833 = newJObject()
  var query_594834 = newJObject()
  add(query_594834, "action", newJString(action))
  add(path_594833, "profileId", newJString(profileId))
  add(query_594834, "fields", newJString(fields))
  add(query_594834, "pageToken", newJString(pageToken))
  add(query_594834, "quotaUser", newJString(quotaUser))
  add(query_594834, "minChangeTime", newJString(minChangeTime))
  add(query_594834, "alt", newJString(alt))
  add(query_594834, "searchString", newJString(searchString))
  add(query_594834, "oauth_token", newJString(oauthToken))
  add(query_594834, "userIp", newJString(userIp))
  add(query_594834, "maxResults", newJInt(maxResults))
  add(query_594834, "maxChangeTime", newJString(maxChangeTime))
  if ids != nil:
    query_594834.add "ids", ids
  add(query_594834, "objectType", newJString(objectType))
  add(query_594834, "key", newJString(key))
  if objectIds != nil:
    query_594834.add "objectIds", objectIds
  add(query_594834, "prettyPrint", newJBool(prettyPrint))
  if userProfileIds != nil:
    query_594834.add "userProfileIds", userProfileIds
  result = call_594832.call(path_594833, query_594834, nil, nil, nil)

var dfareportingChangeLogsList* = Call_DfareportingChangeLogsList_594810(
    name: "dfareportingChangeLogsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/changeLogs",
    validator: validate_DfareportingChangeLogsList_594811,
    base: "/dfareporting/v3.2", url: url_DfareportingChangeLogsList_594812,
    schemes: {Scheme.Https})
type
  Call_DfareportingChangeLogsGet_594835 = ref object of OpenApiRestCall_593437
proc url_DfareportingChangeLogsGet_594837(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/changeLogs/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingChangeLogsGet_594836(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one change log by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Change log ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594838 = path.getOrDefault("profileId")
  valid_594838 = validateParameter(valid_594838, JString, required = true,
                                 default = nil)
  if valid_594838 != nil:
    section.add "profileId", valid_594838
  var valid_594839 = path.getOrDefault("id")
  valid_594839 = validateParameter(valid_594839, JString, required = true,
                                 default = nil)
  if valid_594839 != nil:
    section.add "id", valid_594839
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594840 = query.getOrDefault("fields")
  valid_594840 = validateParameter(valid_594840, JString, required = false,
                                 default = nil)
  if valid_594840 != nil:
    section.add "fields", valid_594840
  var valid_594841 = query.getOrDefault("quotaUser")
  valid_594841 = validateParameter(valid_594841, JString, required = false,
                                 default = nil)
  if valid_594841 != nil:
    section.add "quotaUser", valid_594841
  var valid_594842 = query.getOrDefault("alt")
  valid_594842 = validateParameter(valid_594842, JString, required = false,
                                 default = newJString("json"))
  if valid_594842 != nil:
    section.add "alt", valid_594842
  var valid_594843 = query.getOrDefault("oauth_token")
  valid_594843 = validateParameter(valid_594843, JString, required = false,
                                 default = nil)
  if valid_594843 != nil:
    section.add "oauth_token", valid_594843
  var valid_594844 = query.getOrDefault("userIp")
  valid_594844 = validateParameter(valid_594844, JString, required = false,
                                 default = nil)
  if valid_594844 != nil:
    section.add "userIp", valid_594844
  var valid_594845 = query.getOrDefault("key")
  valid_594845 = validateParameter(valid_594845, JString, required = false,
                                 default = nil)
  if valid_594845 != nil:
    section.add "key", valid_594845
  var valid_594846 = query.getOrDefault("prettyPrint")
  valid_594846 = validateParameter(valid_594846, JBool, required = false,
                                 default = newJBool(true))
  if valid_594846 != nil:
    section.add "prettyPrint", valid_594846
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594847: Call_DfareportingChangeLogsGet_594835; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one change log by ID.
  ## 
  let valid = call_594847.validator(path, query, header, formData, body)
  let scheme = call_594847.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594847.url(scheme.get, call_594847.host, call_594847.base,
                         call_594847.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594847, url, valid)

proc call*(call_594848: Call_DfareportingChangeLogsGet_594835; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingChangeLogsGet
  ## Gets one change log by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Change log ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594849 = newJObject()
  var query_594850 = newJObject()
  add(path_594849, "profileId", newJString(profileId))
  add(query_594850, "fields", newJString(fields))
  add(query_594850, "quotaUser", newJString(quotaUser))
  add(query_594850, "alt", newJString(alt))
  add(query_594850, "oauth_token", newJString(oauthToken))
  add(query_594850, "userIp", newJString(userIp))
  add(path_594849, "id", newJString(id))
  add(query_594850, "key", newJString(key))
  add(query_594850, "prettyPrint", newJBool(prettyPrint))
  result = call_594848.call(path_594849, query_594850, nil, nil, nil)

var dfareportingChangeLogsGet* = Call_DfareportingChangeLogsGet_594835(
    name: "dfareportingChangeLogsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/changeLogs/{id}",
    validator: validate_DfareportingChangeLogsGet_594836,
    base: "/dfareporting/v3.2", url: url_DfareportingChangeLogsGet_594837,
    schemes: {Scheme.Https})
type
  Call_DfareportingCitiesList_594851 = ref object of OpenApiRestCall_593437
proc url_DfareportingCitiesList_594853(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/cities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCitiesList_594852(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of cities, possibly filtered.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594854 = path.getOrDefault("profileId")
  valid_594854 = validateParameter(valid_594854, JString, required = true,
                                 default = nil)
  if valid_594854 != nil:
    section.add "profileId", valid_594854
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   namePrefix: JString
  ##             : Select only cities with names starting with this prefix.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   countryDartIds: JArray
  ##                 : Select only cities from these countries.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   regionDartIds: JArray
  ##                : Select only cities from these regions.
  ##   dartIds: JArray
  ##          : Select only cities with these DART IDs.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594855 = query.getOrDefault("fields")
  valid_594855 = validateParameter(valid_594855, JString, required = false,
                                 default = nil)
  if valid_594855 != nil:
    section.add "fields", valid_594855
  var valid_594856 = query.getOrDefault("quotaUser")
  valid_594856 = validateParameter(valid_594856, JString, required = false,
                                 default = nil)
  if valid_594856 != nil:
    section.add "quotaUser", valid_594856
  var valid_594857 = query.getOrDefault("alt")
  valid_594857 = validateParameter(valid_594857, JString, required = false,
                                 default = newJString("json"))
  if valid_594857 != nil:
    section.add "alt", valid_594857
  var valid_594858 = query.getOrDefault("namePrefix")
  valid_594858 = validateParameter(valid_594858, JString, required = false,
                                 default = nil)
  if valid_594858 != nil:
    section.add "namePrefix", valid_594858
  var valid_594859 = query.getOrDefault("oauth_token")
  valid_594859 = validateParameter(valid_594859, JString, required = false,
                                 default = nil)
  if valid_594859 != nil:
    section.add "oauth_token", valid_594859
  var valid_594860 = query.getOrDefault("userIp")
  valid_594860 = validateParameter(valid_594860, JString, required = false,
                                 default = nil)
  if valid_594860 != nil:
    section.add "userIp", valid_594860
  var valid_594861 = query.getOrDefault("countryDartIds")
  valid_594861 = validateParameter(valid_594861, JArray, required = false,
                                 default = nil)
  if valid_594861 != nil:
    section.add "countryDartIds", valid_594861
  var valid_594862 = query.getOrDefault("key")
  valid_594862 = validateParameter(valid_594862, JString, required = false,
                                 default = nil)
  if valid_594862 != nil:
    section.add "key", valid_594862
  var valid_594863 = query.getOrDefault("regionDartIds")
  valid_594863 = validateParameter(valid_594863, JArray, required = false,
                                 default = nil)
  if valid_594863 != nil:
    section.add "regionDartIds", valid_594863
  var valid_594864 = query.getOrDefault("dartIds")
  valid_594864 = validateParameter(valid_594864, JArray, required = false,
                                 default = nil)
  if valid_594864 != nil:
    section.add "dartIds", valid_594864
  var valid_594865 = query.getOrDefault("prettyPrint")
  valid_594865 = validateParameter(valid_594865, JBool, required = false,
                                 default = newJBool(true))
  if valid_594865 != nil:
    section.add "prettyPrint", valid_594865
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594866: Call_DfareportingCitiesList_594851; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of cities, possibly filtered.
  ## 
  let valid = call_594866.validator(path, query, header, formData, body)
  let scheme = call_594866.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594866.url(scheme.get, call_594866.host, call_594866.base,
                         call_594866.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594866, url, valid)

proc call*(call_594867: Call_DfareportingCitiesList_594851; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          namePrefix: string = ""; oauthToken: string = ""; userIp: string = "";
          countryDartIds: JsonNode = nil; key: string = "";
          regionDartIds: JsonNode = nil; dartIds: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingCitiesList
  ## Retrieves a list of cities, possibly filtered.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   namePrefix: string
  ##             : Select only cities with names starting with this prefix.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   countryDartIds: JArray
  ##                 : Select only cities from these countries.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   regionDartIds: JArray
  ##                : Select only cities from these regions.
  ##   dartIds: JArray
  ##          : Select only cities with these DART IDs.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594868 = newJObject()
  var query_594869 = newJObject()
  add(path_594868, "profileId", newJString(profileId))
  add(query_594869, "fields", newJString(fields))
  add(query_594869, "quotaUser", newJString(quotaUser))
  add(query_594869, "alt", newJString(alt))
  add(query_594869, "namePrefix", newJString(namePrefix))
  add(query_594869, "oauth_token", newJString(oauthToken))
  add(query_594869, "userIp", newJString(userIp))
  if countryDartIds != nil:
    query_594869.add "countryDartIds", countryDartIds
  add(query_594869, "key", newJString(key))
  if regionDartIds != nil:
    query_594869.add "regionDartIds", regionDartIds
  if dartIds != nil:
    query_594869.add "dartIds", dartIds
  add(query_594869, "prettyPrint", newJBool(prettyPrint))
  result = call_594867.call(path_594868, query_594869, nil, nil, nil)

var dfareportingCitiesList* = Call_DfareportingCitiesList_594851(
    name: "dfareportingCitiesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/cities",
    validator: validate_DfareportingCitiesList_594852, base: "/dfareporting/v3.2",
    url: url_DfareportingCitiesList_594853, schemes: {Scheme.Https})
type
  Call_DfareportingConnectionTypesList_594870 = ref object of OpenApiRestCall_593437
proc url_DfareportingConnectionTypesList_594872(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/connectionTypes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingConnectionTypesList_594871(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of connection types.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594873 = path.getOrDefault("profileId")
  valid_594873 = validateParameter(valid_594873, JString, required = true,
                                 default = nil)
  if valid_594873 != nil:
    section.add "profileId", valid_594873
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594874 = query.getOrDefault("fields")
  valid_594874 = validateParameter(valid_594874, JString, required = false,
                                 default = nil)
  if valid_594874 != nil:
    section.add "fields", valid_594874
  var valid_594875 = query.getOrDefault("quotaUser")
  valid_594875 = validateParameter(valid_594875, JString, required = false,
                                 default = nil)
  if valid_594875 != nil:
    section.add "quotaUser", valid_594875
  var valid_594876 = query.getOrDefault("alt")
  valid_594876 = validateParameter(valid_594876, JString, required = false,
                                 default = newJString("json"))
  if valid_594876 != nil:
    section.add "alt", valid_594876
  var valid_594877 = query.getOrDefault("oauth_token")
  valid_594877 = validateParameter(valid_594877, JString, required = false,
                                 default = nil)
  if valid_594877 != nil:
    section.add "oauth_token", valid_594877
  var valid_594878 = query.getOrDefault("userIp")
  valid_594878 = validateParameter(valid_594878, JString, required = false,
                                 default = nil)
  if valid_594878 != nil:
    section.add "userIp", valid_594878
  var valid_594879 = query.getOrDefault("key")
  valid_594879 = validateParameter(valid_594879, JString, required = false,
                                 default = nil)
  if valid_594879 != nil:
    section.add "key", valid_594879
  var valid_594880 = query.getOrDefault("prettyPrint")
  valid_594880 = validateParameter(valid_594880, JBool, required = false,
                                 default = newJBool(true))
  if valid_594880 != nil:
    section.add "prettyPrint", valid_594880
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594881: Call_DfareportingConnectionTypesList_594870;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of connection types.
  ## 
  let valid = call_594881.validator(path, query, header, formData, body)
  let scheme = call_594881.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594881.url(scheme.get, call_594881.host, call_594881.base,
                         call_594881.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594881, url, valid)

proc call*(call_594882: Call_DfareportingConnectionTypesList_594870;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingConnectionTypesList
  ## Retrieves a list of connection types.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594883 = newJObject()
  var query_594884 = newJObject()
  add(path_594883, "profileId", newJString(profileId))
  add(query_594884, "fields", newJString(fields))
  add(query_594884, "quotaUser", newJString(quotaUser))
  add(query_594884, "alt", newJString(alt))
  add(query_594884, "oauth_token", newJString(oauthToken))
  add(query_594884, "userIp", newJString(userIp))
  add(query_594884, "key", newJString(key))
  add(query_594884, "prettyPrint", newJBool(prettyPrint))
  result = call_594882.call(path_594883, query_594884, nil, nil, nil)

var dfareportingConnectionTypesList* = Call_DfareportingConnectionTypesList_594870(
    name: "dfareportingConnectionTypesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/connectionTypes",
    validator: validate_DfareportingConnectionTypesList_594871,
    base: "/dfareporting/v3.2", url: url_DfareportingConnectionTypesList_594872,
    schemes: {Scheme.Https})
type
  Call_DfareportingConnectionTypesGet_594885 = ref object of OpenApiRestCall_593437
proc url_DfareportingConnectionTypesGet_594887(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/connectionTypes/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingConnectionTypesGet_594886(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one connection type by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Connection type ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594888 = path.getOrDefault("profileId")
  valid_594888 = validateParameter(valid_594888, JString, required = true,
                                 default = nil)
  if valid_594888 != nil:
    section.add "profileId", valid_594888
  var valid_594889 = path.getOrDefault("id")
  valid_594889 = validateParameter(valid_594889, JString, required = true,
                                 default = nil)
  if valid_594889 != nil:
    section.add "id", valid_594889
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594890 = query.getOrDefault("fields")
  valid_594890 = validateParameter(valid_594890, JString, required = false,
                                 default = nil)
  if valid_594890 != nil:
    section.add "fields", valid_594890
  var valid_594891 = query.getOrDefault("quotaUser")
  valid_594891 = validateParameter(valid_594891, JString, required = false,
                                 default = nil)
  if valid_594891 != nil:
    section.add "quotaUser", valid_594891
  var valid_594892 = query.getOrDefault("alt")
  valid_594892 = validateParameter(valid_594892, JString, required = false,
                                 default = newJString("json"))
  if valid_594892 != nil:
    section.add "alt", valid_594892
  var valid_594893 = query.getOrDefault("oauth_token")
  valid_594893 = validateParameter(valid_594893, JString, required = false,
                                 default = nil)
  if valid_594893 != nil:
    section.add "oauth_token", valid_594893
  var valid_594894 = query.getOrDefault("userIp")
  valid_594894 = validateParameter(valid_594894, JString, required = false,
                                 default = nil)
  if valid_594894 != nil:
    section.add "userIp", valid_594894
  var valid_594895 = query.getOrDefault("key")
  valid_594895 = validateParameter(valid_594895, JString, required = false,
                                 default = nil)
  if valid_594895 != nil:
    section.add "key", valid_594895
  var valid_594896 = query.getOrDefault("prettyPrint")
  valid_594896 = validateParameter(valid_594896, JBool, required = false,
                                 default = newJBool(true))
  if valid_594896 != nil:
    section.add "prettyPrint", valid_594896
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594897: Call_DfareportingConnectionTypesGet_594885; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one connection type by ID.
  ## 
  let valid = call_594897.validator(path, query, header, formData, body)
  let scheme = call_594897.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594897.url(scheme.get, call_594897.host, call_594897.base,
                         call_594897.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594897, url, valid)

proc call*(call_594898: Call_DfareportingConnectionTypesGet_594885;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingConnectionTypesGet
  ## Gets one connection type by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Connection type ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594899 = newJObject()
  var query_594900 = newJObject()
  add(path_594899, "profileId", newJString(profileId))
  add(query_594900, "fields", newJString(fields))
  add(query_594900, "quotaUser", newJString(quotaUser))
  add(query_594900, "alt", newJString(alt))
  add(query_594900, "oauth_token", newJString(oauthToken))
  add(query_594900, "userIp", newJString(userIp))
  add(path_594899, "id", newJString(id))
  add(query_594900, "key", newJString(key))
  add(query_594900, "prettyPrint", newJBool(prettyPrint))
  result = call_594898.call(path_594899, query_594900, nil, nil, nil)

var dfareportingConnectionTypesGet* = Call_DfareportingConnectionTypesGet_594885(
    name: "dfareportingConnectionTypesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/connectionTypes/{id}",
    validator: validate_DfareportingConnectionTypesGet_594886,
    base: "/dfareporting/v3.2", url: url_DfareportingConnectionTypesGet_594887,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesUpdate_594922 = ref object of OpenApiRestCall_593437
proc url_DfareportingContentCategoriesUpdate_594924(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesUpdate_594923(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing content category.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594925 = path.getOrDefault("profileId")
  valid_594925 = validateParameter(valid_594925, JString, required = true,
                                 default = nil)
  if valid_594925 != nil:
    section.add "profileId", valid_594925
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594926 = query.getOrDefault("fields")
  valid_594926 = validateParameter(valid_594926, JString, required = false,
                                 default = nil)
  if valid_594926 != nil:
    section.add "fields", valid_594926
  var valid_594927 = query.getOrDefault("quotaUser")
  valid_594927 = validateParameter(valid_594927, JString, required = false,
                                 default = nil)
  if valid_594927 != nil:
    section.add "quotaUser", valid_594927
  var valid_594928 = query.getOrDefault("alt")
  valid_594928 = validateParameter(valid_594928, JString, required = false,
                                 default = newJString("json"))
  if valid_594928 != nil:
    section.add "alt", valid_594928
  var valid_594929 = query.getOrDefault("oauth_token")
  valid_594929 = validateParameter(valid_594929, JString, required = false,
                                 default = nil)
  if valid_594929 != nil:
    section.add "oauth_token", valid_594929
  var valid_594930 = query.getOrDefault("userIp")
  valid_594930 = validateParameter(valid_594930, JString, required = false,
                                 default = nil)
  if valid_594930 != nil:
    section.add "userIp", valid_594930
  var valid_594931 = query.getOrDefault("key")
  valid_594931 = validateParameter(valid_594931, JString, required = false,
                                 default = nil)
  if valid_594931 != nil:
    section.add "key", valid_594931
  var valid_594932 = query.getOrDefault("prettyPrint")
  valid_594932 = validateParameter(valid_594932, JBool, required = false,
                                 default = newJBool(true))
  if valid_594932 != nil:
    section.add "prettyPrint", valid_594932
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594934: Call_DfareportingContentCategoriesUpdate_594922;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing content category.
  ## 
  let valid = call_594934.validator(path, query, header, formData, body)
  let scheme = call_594934.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594934.url(scheme.get, call_594934.host, call_594934.base,
                         call_594934.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594934, url, valid)

proc call*(call_594935: Call_DfareportingContentCategoriesUpdate_594922;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingContentCategoriesUpdate
  ## Updates an existing content category.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594936 = newJObject()
  var query_594937 = newJObject()
  var body_594938 = newJObject()
  add(path_594936, "profileId", newJString(profileId))
  add(query_594937, "fields", newJString(fields))
  add(query_594937, "quotaUser", newJString(quotaUser))
  add(query_594937, "alt", newJString(alt))
  add(query_594937, "oauth_token", newJString(oauthToken))
  add(query_594937, "userIp", newJString(userIp))
  add(query_594937, "key", newJString(key))
  if body != nil:
    body_594938 = body
  add(query_594937, "prettyPrint", newJBool(prettyPrint))
  result = call_594935.call(path_594936, query_594937, nil, nil, body_594938)

var dfareportingContentCategoriesUpdate* = Call_DfareportingContentCategoriesUpdate_594922(
    name: "dfareportingContentCategoriesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories",
    validator: validate_DfareportingContentCategoriesUpdate_594923,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesUpdate_594924,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesInsert_594939 = ref object of OpenApiRestCall_593437
proc url_DfareportingContentCategoriesInsert_594941(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesInsert_594940(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new content category.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594942 = path.getOrDefault("profileId")
  valid_594942 = validateParameter(valid_594942, JString, required = true,
                                 default = nil)
  if valid_594942 != nil:
    section.add "profileId", valid_594942
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594943 = query.getOrDefault("fields")
  valid_594943 = validateParameter(valid_594943, JString, required = false,
                                 default = nil)
  if valid_594943 != nil:
    section.add "fields", valid_594943
  var valid_594944 = query.getOrDefault("quotaUser")
  valid_594944 = validateParameter(valid_594944, JString, required = false,
                                 default = nil)
  if valid_594944 != nil:
    section.add "quotaUser", valid_594944
  var valid_594945 = query.getOrDefault("alt")
  valid_594945 = validateParameter(valid_594945, JString, required = false,
                                 default = newJString("json"))
  if valid_594945 != nil:
    section.add "alt", valid_594945
  var valid_594946 = query.getOrDefault("oauth_token")
  valid_594946 = validateParameter(valid_594946, JString, required = false,
                                 default = nil)
  if valid_594946 != nil:
    section.add "oauth_token", valid_594946
  var valid_594947 = query.getOrDefault("userIp")
  valid_594947 = validateParameter(valid_594947, JString, required = false,
                                 default = nil)
  if valid_594947 != nil:
    section.add "userIp", valid_594947
  var valid_594948 = query.getOrDefault("key")
  valid_594948 = validateParameter(valid_594948, JString, required = false,
                                 default = nil)
  if valid_594948 != nil:
    section.add "key", valid_594948
  var valid_594949 = query.getOrDefault("prettyPrint")
  valid_594949 = validateParameter(valid_594949, JBool, required = false,
                                 default = newJBool(true))
  if valid_594949 != nil:
    section.add "prettyPrint", valid_594949
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594951: Call_DfareportingContentCategoriesInsert_594939;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new content category.
  ## 
  let valid = call_594951.validator(path, query, header, formData, body)
  let scheme = call_594951.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594951.url(scheme.get, call_594951.host, call_594951.base,
                         call_594951.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594951, url, valid)

proc call*(call_594952: Call_DfareportingContentCategoriesInsert_594939;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingContentCategoriesInsert
  ## Inserts a new content category.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594953 = newJObject()
  var query_594954 = newJObject()
  var body_594955 = newJObject()
  add(path_594953, "profileId", newJString(profileId))
  add(query_594954, "fields", newJString(fields))
  add(query_594954, "quotaUser", newJString(quotaUser))
  add(query_594954, "alt", newJString(alt))
  add(query_594954, "oauth_token", newJString(oauthToken))
  add(query_594954, "userIp", newJString(userIp))
  add(query_594954, "key", newJString(key))
  if body != nil:
    body_594955 = body
  add(query_594954, "prettyPrint", newJBool(prettyPrint))
  result = call_594952.call(path_594953, query_594954, nil, nil, body_594955)

var dfareportingContentCategoriesInsert* = Call_DfareportingContentCategoriesInsert_594939(
    name: "dfareportingContentCategoriesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories",
    validator: validate_DfareportingContentCategoriesInsert_594940,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesInsert_594941,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesList_594901 = ref object of OpenApiRestCall_593437
proc url_DfareportingContentCategoriesList_594903(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesList_594902(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of content categories, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594904 = path.getOrDefault("profileId")
  valid_594904 = validateParameter(valid_594904, JString, required = true,
                                 default = nil)
  if valid_594904 != nil:
    section.add "profileId", valid_594904
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "contentcategory*2015" will return objects with names like "contentcategory June 2015", "contentcategory April 2015", or simply "contentcategory 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "contentcategory" will match objects with name "my contentcategory", "contentcategory 2015", or simply "contentcategory".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only content categories with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594905 = query.getOrDefault("fields")
  valid_594905 = validateParameter(valid_594905, JString, required = false,
                                 default = nil)
  if valid_594905 != nil:
    section.add "fields", valid_594905
  var valid_594906 = query.getOrDefault("pageToken")
  valid_594906 = validateParameter(valid_594906, JString, required = false,
                                 default = nil)
  if valid_594906 != nil:
    section.add "pageToken", valid_594906
  var valid_594907 = query.getOrDefault("quotaUser")
  valid_594907 = validateParameter(valid_594907, JString, required = false,
                                 default = nil)
  if valid_594907 != nil:
    section.add "quotaUser", valid_594907
  var valid_594908 = query.getOrDefault("sortField")
  valid_594908 = validateParameter(valid_594908, JString, required = false,
                                 default = newJString("ID"))
  if valid_594908 != nil:
    section.add "sortField", valid_594908
  var valid_594909 = query.getOrDefault("alt")
  valid_594909 = validateParameter(valid_594909, JString, required = false,
                                 default = newJString("json"))
  if valid_594909 != nil:
    section.add "alt", valid_594909
  var valid_594910 = query.getOrDefault("searchString")
  valid_594910 = validateParameter(valid_594910, JString, required = false,
                                 default = nil)
  if valid_594910 != nil:
    section.add "searchString", valid_594910
  var valid_594911 = query.getOrDefault("oauth_token")
  valid_594911 = validateParameter(valid_594911, JString, required = false,
                                 default = nil)
  if valid_594911 != nil:
    section.add "oauth_token", valid_594911
  var valid_594912 = query.getOrDefault("userIp")
  valid_594912 = validateParameter(valid_594912, JString, required = false,
                                 default = nil)
  if valid_594912 != nil:
    section.add "userIp", valid_594912
  var valid_594913 = query.getOrDefault("maxResults")
  valid_594913 = validateParameter(valid_594913, JInt, required = false,
                                 default = newJInt(1000))
  if valid_594913 != nil:
    section.add "maxResults", valid_594913
  var valid_594914 = query.getOrDefault("ids")
  valid_594914 = validateParameter(valid_594914, JArray, required = false,
                                 default = nil)
  if valid_594914 != nil:
    section.add "ids", valid_594914
  var valid_594915 = query.getOrDefault("key")
  valid_594915 = validateParameter(valid_594915, JString, required = false,
                                 default = nil)
  if valid_594915 != nil:
    section.add "key", valid_594915
  var valid_594916 = query.getOrDefault("sortOrder")
  valid_594916 = validateParameter(valid_594916, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_594916 != nil:
    section.add "sortOrder", valid_594916
  var valid_594917 = query.getOrDefault("prettyPrint")
  valid_594917 = validateParameter(valid_594917, JBool, required = false,
                                 default = newJBool(true))
  if valid_594917 != nil:
    section.add "prettyPrint", valid_594917
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594918: Call_DfareportingContentCategoriesList_594901;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of content categories, possibly filtered. This method supports paging.
  ## 
  let valid = call_594918.validator(path, query, header, formData, body)
  let scheme = call_594918.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594918.url(scheme.get, call_594918.host, call_594918.base,
                         call_594918.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594918, url, valid)

proc call*(call_594919: Call_DfareportingContentCategoriesList_594901;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingContentCategoriesList
  ## Retrieves a list of content categories, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "contentcategory*2015" will return objects with names like "contentcategory June 2015", "contentcategory April 2015", or simply "contentcategory 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "contentcategory" will match objects with name "my contentcategory", "contentcategory 2015", or simply "contentcategory".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only content categories with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594920 = newJObject()
  var query_594921 = newJObject()
  add(path_594920, "profileId", newJString(profileId))
  add(query_594921, "fields", newJString(fields))
  add(query_594921, "pageToken", newJString(pageToken))
  add(query_594921, "quotaUser", newJString(quotaUser))
  add(query_594921, "sortField", newJString(sortField))
  add(query_594921, "alt", newJString(alt))
  add(query_594921, "searchString", newJString(searchString))
  add(query_594921, "oauth_token", newJString(oauthToken))
  add(query_594921, "userIp", newJString(userIp))
  add(query_594921, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_594921.add "ids", ids
  add(query_594921, "key", newJString(key))
  add(query_594921, "sortOrder", newJString(sortOrder))
  add(query_594921, "prettyPrint", newJBool(prettyPrint))
  result = call_594919.call(path_594920, query_594921, nil, nil, nil)

var dfareportingContentCategoriesList* = Call_DfareportingContentCategoriesList_594901(
    name: "dfareportingContentCategoriesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories",
    validator: validate_DfareportingContentCategoriesList_594902,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesList_594903,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesPatch_594956 = ref object of OpenApiRestCall_593437
proc url_DfareportingContentCategoriesPatch_594958(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesPatch_594957(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing content category. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594959 = path.getOrDefault("profileId")
  valid_594959 = validateParameter(valid_594959, JString, required = true,
                                 default = nil)
  if valid_594959 != nil:
    section.add "profileId", valid_594959
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Content category ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594960 = query.getOrDefault("fields")
  valid_594960 = validateParameter(valid_594960, JString, required = false,
                                 default = nil)
  if valid_594960 != nil:
    section.add "fields", valid_594960
  var valid_594961 = query.getOrDefault("quotaUser")
  valid_594961 = validateParameter(valid_594961, JString, required = false,
                                 default = nil)
  if valid_594961 != nil:
    section.add "quotaUser", valid_594961
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_594962 = query.getOrDefault("id")
  valid_594962 = validateParameter(valid_594962, JString, required = true,
                                 default = nil)
  if valid_594962 != nil:
    section.add "id", valid_594962
  var valid_594963 = query.getOrDefault("alt")
  valid_594963 = validateParameter(valid_594963, JString, required = false,
                                 default = newJString("json"))
  if valid_594963 != nil:
    section.add "alt", valid_594963
  var valid_594964 = query.getOrDefault("oauth_token")
  valid_594964 = validateParameter(valid_594964, JString, required = false,
                                 default = nil)
  if valid_594964 != nil:
    section.add "oauth_token", valid_594964
  var valid_594965 = query.getOrDefault("userIp")
  valid_594965 = validateParameter(valid_594965, JString, required = false,
                                 default = nil)
  if valid_594965 != nil:
    section.add "userIp", valid_594965
  var valid_594966 = query.getOrDefault("key")
  valid_594966 = validateParameter(valid_594966, JString, required = false,
                                 default = nil)
  if valid_594966 != nil:
    section.add "key", valid_594966
  var valid_594967 = query.getOrDefault("prettyPrint")
  valid_594967 = validateParameter(valid_594967, JBool, required = false,
                                 default = newJBool(true))
  if valid_594967 != nil:
    section.add "prettyPrint", valid_594967
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_594969: Call_DfareportingContentCategoriesPatch_594956;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing content category. This method supports patch semantics.
  ## 
  let valid = call_594969.validator(path, query, header, formData, body)
  let scheme = call_594969.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594969.url(scheme.get, call_594969.host, call_594969.base,
                         call_594969.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594969, url, valid)

proc call*(call_594970: Call_DfareportingContentCategoriesPatch_594956;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingContentCategoriesPatch
  ## Updates an existing content category. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Content category ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594971 = newJObject()
  var query_594972 = newJObject()
  var body_594973 = newJObject()
  add(path_594971, "profileId", newJString(profileId))
  add(query_594972, "fields", newJString(fields))
  add(query_594972, "quotaUser", newJString(quotaUser))
  add(query_594972, "id", newJString(id))
  add(query_594972, "alt", newJString(alt))
  add(query_594972, "oauth_token", newJString(oauthToken))
  add(query_594972, "userIp", newJString(userIp))
  add(query_594972, "key", newJString(key))
  if body != nil:
    body_594973 = body
  add(query_594972, "prettyPrint", newJBool(prettyPrint))
  result = call_594970.call(path_594971, query_594972, nil, nil, body_594973)

var dfareportingContentCategoriesPatch* = Call_DfareportingContentCategoriesPatch_594956(
    name: "dfareportingContentCategoriesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories",
    validator: validate_DfareportingContentCategoriesPatch_594957,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesPatch_594958,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesGet_594974 = ref object of OpenApiRestCall_593437
proc url_DfareportingContentCategoriesGet_594976(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesGet_594975(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one content category by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Content category ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594977 = path.getOrDefault("profileId")
  valid_594977 = validateParameter(valid_594977, JString, required = true,
                                 default = nil)
  if valid_594977 != nil:
    section.add "profileId", valid_594977
  var valid_594978 = path.getOrDefault("id")
  valid_594978 = validateParameter(valid_594978, JString, required = true,
                                 default = nil)
  if valid_594978 != nil:
    section.add "id", valid_594978
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594979 = query.getOrDefault("fields")
  valid_594979 = validateParameter(valid_594979, JString, required = false,
                                 default = nil)
  if valid_594979 != nil:
    section.add "fields", valid_594979
  var valid_594980 = query.getOrDefault("quotaUser")
  valid_594980 = validateParameter(valid_594980, JString, required = false,
                                 default = nil)
  if valid_594980 != nil:
    section.add "quotaUser", valid_594980
  var valid_594981 = query.getOrDefault("alt")
  valid_594981 = validateParameter(valid_594981, JString, required = false,
                                 default = newJString("json"))
  if valid_594981 != nil:
    section.add "alt", valid_594981
  var valid_594982 = query.getOrDefault("oauth_token")
  valid_594982 = validateParameter(valid_594982, JString, required = false,
                                 default = nil)
  if valid_594982 != nil:
    section.add "oauth_token", valid_594982
  var valid_594983 = query.getOrDefault("userIp")
  valid_594983 = validateParameter(valid_594983, JString, required = false,
                                 default = nil)
  if valid_594983 != nil:
    section.add "userIp", valid_594983
  var valid_594984 = query.getOrDefault("key")
  valid_594984 = validateParameter(valid_594984, JString, required = false,
                                 default = nil)
  if valid_594984 != nil:
    section.add "key", valid_594984
  var valid_594985 = query.getOrDefault("prettyPrint")
  valid_594985 = validateParameter(valid_594985, JBool, required = false,
                                 default = newJBool(true))
  if valid_594985 != nil:
    section.add "prettyPrint", valid_594985
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594986: Call_DfareportingContentCategoriesGet_594974;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one content category by ID.
  ## 
  let valid = call_594986.validator(path, query, header, formData, body)
  let scheme = call_594986.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594986.url(scheme.get, call_594986.host, call_594986.base,
                         call_594986.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594986, url, valid)

proc call*(call_594987: Call_DfareportingContentCategoriesGet_594974;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingContentCategoriesGet
  ## Gets one content category by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Content category ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_594988 = newJObject()
  var query_594989 = newJObject()
  add(path_594988, "profileId", newJString(profileId))
  add(query_594989, "fields", newJString(fields))
  add(query_594989, "quotaUser", newJString(quotaUser))
  add(query_594989, "alt", newJString(alt))
  add(query_594989, "oauth_token", newJString(oauthToken))
  add(query_594989, "userIp", newJString(userIp))
  add(path_594988, "id", newJString(id))
  add(query_594989, "key", newJString(key))
  add(query_594989, "prettyPrint", newJBool(prettyPrint))
  result = call_594987.call(path_594988, query_594989, nil, nil, nil)

var dfareportingContentCategoriesGet* = Call_DfareportingContentCategoriesGet_594974(
    name: "dfareportingContentCategoriesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories/{id}",
    validator: validate_DfareportingContentCategoriesGet_594975,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesGet_594976,
    schemes: {Scheme.Https})
type
  Call_DfareportingContentCategoriesDelete_594990 = ref object of OpenApiRestCall_593437
proc url_DfareportingContentCategoriesDelete_594992(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/contentCategories/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingContentCategoriesDelete_594991(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing content category.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Content category ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_594993 = path.getOrDefault("profileId")
  valid_594993 = validateParameter(valid_594993, JString, required = true,
                                 default = nil)
  if valid_594993 != nil:
    section.add "profileId", valid_594993
  var valid_594994 = path.getOrDefault("id")
  valid_594994 = validateParameter(valid_594994, JString, required = true,
                                 default = nil)
  if valid_594994 != nil:
    section.add "id", valid_594994
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_594995 = query.getOrDefault("fields")
  valid_594995 = validateParameter(valid_594995, JString, required = false,
                                 default = nil)
  if valid_594995 != nil:
    section.add "fields", valid_594995
  var valid_594996 = query.getOrDefault("quotaUser")
  valid_594996 = validateParameter(valid_594996, JString, required = false,
                                 default = nil)
  if valid_594996 != nil:
    section.add "quotaUser", valid_594996
  var valid_594997 = query.getOrDefault("alt")
  valid_594997 = validateParameter(valid_594997, JString, required = false,
                                 default = newJString("json"))
  if valid_594997 != nil:
    section.add "alt", valid_594997
  var valid_594998 = query.getOrDefault("oauth_token")
  valid_594998 = validateParameter(valid_594998, JString, required = false,
                                 default = nil)
  if valid_594998 != nil:
    section.add "oauth_token", valid_594998
  var valid_594999 = query.getOrDefault("userIp")
  valid_594999 = validateParameter(valid_594999, JString, required = false,
                                 default = nil)
  if valid_594999 != nil:
    section.add "userIp", valid_594999
  var valid_595000 = query.getOrDefault("key")
  valid_595000 = validateParameter(valid_595000, JString, required = false,
                                 default = nil)
  if valid_595000 != nil:
    section.add "key", valid_595000
  var valid_595001 = query.getOrDefault("prettyPrint")
  valid_595001 = validateParameter(valid_595001, JBool, required = false,
                                 default = newJBool(true))
  if valid_595001 != nil:
    section.add "prettyPrint", valid_595001
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595002: Call_DfareportingContentCategoriesDelete_594990;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing content category.
  ## 
  let valid = call_595002.validator(path, query, header, formData, body)
  let scheme = call_595002.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595002.url(scheme.get, call_595002.host, call_595002.base,
                         call_595002.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595002, url, valid)

proc call*(call_595003: Call_DfareportingContentCategoriesDelete_594990;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingContentCategoriesDelete
  ## Deletes an existing content category.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Content category ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595004 = newJObject()
  var query_595005 = newJObject()
  add(path_595004, "profileId", newJString(profileId))
  add(query_595005, "fields", newJString(fields))
  add(query_595005, "quotaUser", newJString(quotaUser))
  add(query_595005, "alt", newJString(alt))
  add(query_595005, "oauth_token", newJString(oauthToken))
  add(query_595005, "userIp", newJString(userIp))
  add(path_595004, "id", newJString(id))
  add(query_595005, "key", newJString(key))
  add(query_595005, "prettyPrint", newJBool(prettyPrint))
  result = call_595003.call(path_595004, query_595005, nil, nil, nil)

var dfareportingContentCategoriesDelete* = Call_DfareportingContentCategoriesDelete_594990(
    name: "dfareportingContentCategoriesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/contentCategories/{id}",
    validator: validate_DfareportingContentCategoriesDelete_594991,
    base: "/dfareporting/v3.2", url: url_DfareportingContentCategoriesDelete_594992,
    schemes: {Scheme.Https})
type
  Call_DfareportingConversionsBatchinsert_595006 = ref object of OpenApiRestCall_593437
proc url_DfareportingConversionsBatchinsert_595008(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/conversions/batchinsert")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingConversionsBatchinsert_595007(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts conversions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595009 = path.getOrDefault("profileId")
  valid_595009 = validateParameter(valid_595009, JString, required = true,
                                 default = nil)
  if valid_595009 != nil:
    section.add "profileId", valid_595009
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595010 = query.getOrDefault("fields")
  valid_595010 = validateParameter(valid_595010, JString, required = false,
                                 default = nil)
  if valid_595010 != nil:
    section.add "fields", valid_595010
  var valid_595011 = query.getOrDefault("quotaUser")
  valid_595011 = validateParameter(valid_595011, JString, required = false,
                                 default = nil)
  if valid_595011 != nil:
    section.add "quotaUser", valid_595011
  var valid_595012 = query.getOrDefault("alt")
  valid_595012 = validateParameter(valid_595012, JString, required = false,
                                 default = newJString("json"))
  if valid_595012 != nil:
    section.add "alt", valid_595012
  var valid_595013 = query.getOrDefault("oauth_token")
  valid_595013 = validateParameter(valid_595013, JString, required = false,
                                 default = nil)
  if valid_595013 != nil:
    section.add "oauth_token", valid_595013
  var valid_595014 = query.getOrDefault("userIp")
  valid_595014 = validateParameter(valid_595014, JString, required = false,
                                 default = nil)
  if valid_595014 != nil:
    section.add "userIp", valid_595014
  var valid_595015 = query.getOrDefault("key")
  valid_595015 = validateParameter(valid_595015, JString, required = false,
                                 default = nil)
  if valid_595015 != nil:
    section.add "key", valid_595015
  var valid_595016 = query.getOrDefault("prettyPrint")
  valid_595016 = validateParameter(valid_595016, JBool, required = false,
                                 default = newJBool(true))
  if valid_595016 != nil:
    section.add "prettyPrint", valid_595016
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595018: Call_DfareportingConversionsBatchinsert_595006;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts conversions.
  ## 
  let valid = call_595018.validator(path, query, header, formData, body)
  let scheme = call_595018.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595018.url(scheme.get, call_595018.host, call_595018.base,
                         call_595018.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595018, url, valid)

proc call*(call_595019: Call_DfareportingConversionsBatchinsert_595006;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingConversionsBatchinsert
  ## Inserts conversions.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595020 = newJObject()
  var query_595021 = newJObject()
  var body_595022 = newJObject()
  add(path_595020, "profileId", newJString(profileId))
  add(query_595021, "fields", newJString(fields))
  add(query_595021, "quotaUser", newJString(quotaUser))
  add(query_595021, "alt", newJString(alt))
  add(query_595021, "oauth_token", newJString(oauthToken))
  add(query_595021, "userIp", newJString(userIp))
  add(query_595021, "key", newJString(key))
  if body != nil:
    body_595022 = body
  add(query_595021, "prettyPrint", newJBool(prettyPrint))
  result = call_595019.call(path_595020, query_595021, nil, nil, body_595022)

var dfareportingConversionsBatchinsert* = Call_DfareportingConversionsBatchinsert_595006(
    name: "dfareportingConversionsBatchinsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/conversions/batchinsert",
    validator: validate_DfareportingConversionsBatchinsert_595007,
    base: "/dfareporting/v3.2", url: url_DfareportingConversionsBatchinsert_595008,
    schemes: {Scheme.Https})
type
  Call_DfareportingConversionsBatchupdate_595023 = ref object of OpenApiRestCall_593437
proc url_DfareportingConversionsBatchupdate_595025(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/conversions/batchupdate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingConversionsBatchupdate_595024(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates existing conversions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595026 = path.getOrDefault("profileId")
  valid_595026 = validateParameter(valid_595026, JString, required = true,
                                 default = nil)
  if valid_595026 != nil:
    section.add "profileId", valid_595026
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595027 = query.getOrDefault("fields")
  valid_595027 = validateParameter(valid_595027, JString, required = false,
                                 default = nil)
  if valid_595027 != nil:
    section.add "fields", valid_595027
  var valid_595028 = query.getOrDefault("quotaUser")
  valid_595028 = validateParameter(valid_595028, JString, required = false,
                                 default = nil)
  if valid_595028 != nil:
    section.add "quotaUser", valid_595028
  var valid_595029 = query.getOrDefault("alt")
  valid_595029 = validateParameter(valid_595029, JString, required = false,
                                 default = newJString("json"))
  if valid_595029 != nil:
    section.add "alt", valid_595029
  var valid_595030 = query.getOrDefault("oauth_token")
  valid_595030 = validateParameter(valid_595030, JString, required = false,
                                 default = nil)
  if valid_595030 != nil:
    section.add "oauth_token", valid_595030
  var valid_595031 = query.getOrDefault("userIp")
  valid_595031 = validateParameter(valid_595031, JString, required = false,
                                 default = nil)
  if valid_595031 != nil:
    section.add "userIp", valid_595031
  var valid_595032 = query.getOrDefault("key")
  valid_595032 = validateParameter(valid_595032, JString, required = false,
                                 default = nil)
  if valid_595032 != nil:
    section.add "key", valid_595032
  var valid_595033 = query.getOrDefault("prettyPrint")
  valid_595033 = validateParameter(valid_595033, JBool, required = false,
                                 default = newJBool(true))
  if valid_595033 != nil:
    section.add "prettyPrint", valid_595033
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595035: Call_DfareportingConversionsBatchupdate_595023;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates existing conversions.
  ## 
  let valid = call_595035.validator(path, query, header, formData, body)
  let scheme = call_595035.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595035.url(scheme.get, call_595035.host, call_595035.base,
                         call_595035.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595035, url, valid)

proc call*(call_595036: Call_DfareportingConversionsBatchupdate_595023;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingConversionsBatchupdate
  ## Updates existing conversions.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595037 = newJObject()
  var query_595038 = newJObject()
  var body_595039 = newJObject()
  add(path_595037, "profileId", newJString(profileId))
  add(query_595038, "fields", newJString(fields))
  add(query_595038, "quotaUser", newJString(quotaUser))
  add(query_595038, "alt", newJString(alt))
  add(query_595038, "oauth_token", newJString(oauthToken))
  add(query_595038, "userIp", newJString(userIp))
  add(query_595038, "key", newJString(key))
  if body != nil:
    body_595039 = body
  add(query_595038, "prettyPrint", newJBool(prettyPrint))
  result = call_595036.call(path_595037, query_595038, nil, nil, body_595039)

var dfareportingConversionsBatchupdate* = Call_DfareportingConversionsBatchupdate_595023(
    name: "dfareportingConversionsBatchupdate", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/conversions/batchupdate",
    validator: validate_DfareportingConversionsBatchupdate_595024,
    base: "/dfareporting/v3.2", url: url_DfareportingConversionsBatchupdate_595025,
    schemes: {Scheme.Https})
type
  Call_DfareportingCountriesList_595040 = ref object of OpenApiRestCall_593437
proc url_DfareportingCountriesList_595042(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/countries")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCountriesList_595041(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of countries.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595043 = path.getOrDefault("profileId")
  valid_595043 = validateParameter(valid_595043, JString, required = true,
                                 default = nil)
  if valid_595043 != nil:
    section.add "profileId", valid_595043
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595044 = query.getOrDefault("fields")
  valid_595044 = validateParameter(valid_595044, JString, required = false,
                                 default = nil)
  if valid_595044 != nil:
    section.add "fields", valid_595044
  var valid_595045 = query.getOrDefault("quotaUser")
  valid_595045 = validateParameter(valid_595045, JString, required = false,
                                 default = nil)
  if valid_595045 != nil:
    section.add "quotaUser", valid_595045
  var valid_595046 = query.getOrDefault("alt")
  valid_595046 = validateParameter(valid_595046, JString, required = false,
                                 default = newJString("json"))
  if valid_595046 != nil:
    section.add "alt", valid_595046
  var valid_595047 = query.getOrDefault("oauth_token")
  valid_595047 = validateParameter(valid_595047, JString, required = false,
                                 default = nil)
  if valid_595047 != nil:
    section.add "oauth_token", valid_595047
  var valid_595048 = query.getOrDefault("userIp")
  valid_595048 = validateParameter(valid_595048, JString, required = false,
                                 default = nil)
  if valid_595048 != nil:
    section.add "userIp", valid_595048
  var valid_595049 = query.getOrDefault("key")
  valid_595049 = validateParameter(valid_595049, JString, required = false,
                                 default = nil)
  if valid_595049 != nil:
    section.add "key", valid_595049
  var valid_595050 = query.getOrDefault("prettyPrint")
  valid_595050 = validateParameter(valid_595050, JBool, required = false,
                                 default = newJBool(true))
  if valid_595050 != nil:
    section.add "prettyPrint", valid_595050
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595051: Call_DfareportingCountriesList_595040; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of countries.
  ## 
  let valid = call_595051.validator(path, query, header, formData, body)
  let scheme = call_595051.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595051.url(scheme.get, call_595051.host, call_595051.base,
                         call_595051.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595051, url, valid)

proc call*(call_595052: Call_DfareportingCountriesList_595040; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingCountriesList
  ## Retrieves a list of countries.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595053 = newJObject()
  var query_595054 = newJObject()
  add(path_595053, "profileId", newJString(profileId))
  add(query_595054, "fields", newJString(fields))
  add(query_595054, "quotaUser", newJString(quotaUser))
  add(query_595054, "alt", newJString(alt))
  add(query_595054, "oauth_token", newJString(oauthToken))
  add(query_595054, "userIp", newJString(userIp))
  add(query_595054, "key", newJString(key))
  add(query_595054, "prettyPrint", newJBool(prettyPrint))
  result = call_595052.call(path_595053, query_595054, nil, nil, nil)

var dfareportingCountriesList* = Call_DfareportingCountriesList_595040(
    name: "dfareportingCountriesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/countries",
    validator: validate_DfareportingCountriesList_595041,
    base: "/dfareporting/v3.2", url: url_DfareportingCountriesList_595042,
    schemes: {Scheme.Https})
type
  Call_DfareportingCountriesGet_595055 = ref object of OpenApiRestCall_593437
proc url_DfareportingCountriesGet_595057(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "dartId" in path, "`dartId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/countries/"),
               (kind: VariableSegment, value: "dartId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCountriesGet_595056(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one country by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   dartId: JString (required)
  ##         : Country DART ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595058 = path.getOrDefault("profileId")
  valid_595058 = validateParameter(valid_595058, JString, required = true,
                                 default = nil)
  if valid_595058 != nil:
    section.add "profileId", valid_595058
  var valid_595059 = path.getOrDefault("dartId")
  valid_595059 = validateParameter(valid_595059, JString, required = true,
                                 default = nil)
  if valid_595059 != nil:
    section.add "dartId", valid_595059
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595060 = query.getOrDefault("fields")
  valid_595060 = validateParameter(valid_595060, JString, required = false,
                                 default = nil)
  if valid_595060 != nil:
    section.add "fields", valid_595060
  var valid_595061 = query.getOrDefault("quotaUser")
  valid_595061 = validateParameter(valid_595061, JString, required = false,
                                 default = nil)
  if valid_595061 != nil:
    section.add "quotaUser", valid_595061
  var valid_595062 = query.getOrDefault("alt")
  valid_595062 = validateParameter(valid_595062, JString, required = false,
                                 default = newJString("json"))
  if valid_595062 != nil:
    section.add "alt", valid_595062
  var valid_595063 = query.getOrDefault("oauth_token")
  valid_595063 = validateParameter(valid_595063, JString, required = false,
                                 default = nil)
  if valid_595063 != nil:
    section.add "oauth_token", valid_595063
  var valid_595064 = query.getOrDefault("userIp")
  valid_595064 = validateParameter(valid_595064, JString, required = false,
                                 default = nil)
  if valid_595064 != nil:
    section.add "userIp", valid_595064
  var valid_595065 = query.getOrDefault("key")
  valid_595065 = validateParameter(valid_595065, JString, required = false,
                                 default = nil)
  if valid_595065 != nil:
    section.add "key", valid_595065
  var valid_595066 = query.getOrDefault("prettyPrint")
  valid_595066 = validateParameter(valid_595066, JBool, required = false,
                                 default = newJBool(true))
  if valid_595066 != nil:
    section.add "prettyPrint", valid_595066
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595067: Call_DfareportingCountriesGet_595055; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one country by ID.
  ## 
  let valid = call_595067.validator(path, query, header, formData, body)
  let scheme = call_595067.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595067.url(scheme.get, call_595067.host, call_595067.base,
                         call_595067.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595067, url, valid)

proc call*(call_595068: Call_DfareportingCountriesGet_595055; profileId: string;
          dartId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingCountriesGet
  ## Gets one country by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   dartId: string (required)
  ##         : Country DART ID.
  var path_595069 = newJObject()
  var query_595070 = newJObject()
  add(path_595069, "profileId", newJString(profileId))
  add(query_595070, "fields", newJString(fields))
  add(query_595070, "quotaUser", newJString(quotaUser))
  add(query_595070, "alt", newJString(alt))
  add(query_595070, "oauth_token", newJString(oauthToken))
  add(query_595070, "userIp", newJString(userIp))
  add(query_595070, "key", newJString(key))
  add(query_595070, "prettyPrint", newJBool(prettyPrint))
  add(path_595069, "dartId", newJString(dartId))
  result = call_595068.call(path_595069, query_595070, nil, nil, nil)

var dfareportingCountriesGet* = Call_DfareportingCountriesGet_595055(
    name: "dfareportingCountriesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/countries/{dartId}",
    validator: validate_DfareportingCountriesGet_595056,
    base: "/dfareporting/v3.2", url: url_DfareportingCountriesGet_595057,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeAssetsInsert_595071 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativeAssetsInsert_595073(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "advertiserId" in path, "`advertiserId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeAssets/"),
               (kind: VariableSegment, value: "advertiserId"),
               (kind: ConstantSegment, value: "/creativeAssets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeAssetsInsert_595072(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative asset.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   advertiserId: JString (required)
  ##               : Advertiser ID of this creative. This is a required field.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595074 = path.getOrDefault("profileId")
  valid_595074 = validateParameter(valid_595074, JString, required = true,
                                 default = nil)
  if valid_595074 != nil:
    section.add "profileId", valid_595074
  var valid_595075 = path.getOrDefault("advertiserId")
  valid_595075 = validateParameter(valid_595075, JString, required = true,
                                 default = nil)
  if valid_595075 != nil:
    section.add "advertiserId", valid_595075
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595076 = query.getOrDefault("fields")
  valid_595076 = validateParameter(valid_595076, JString, required = false,
                                 default = nil)
  if valid_595076 != nil:
    section.add "fields", valid_595076
  var valid_595077 = query.getOrDefault("quotaUser")
  valid_595077 = validateParameter(valid_595077, JString, required = false,
                                 default = nil)
  if valid_595077 != nil:
    section.add "quotaUser", valid_595077
  var valid_595078 = query.getOrDefault("alt")
  valid_595078 = validateParameter(valid_595078, JString, required = false,
                                 default = newJString("json"))
  if valid_595078 != nil:
    section.add "alt", valid_595078
  var valid_595079 = query.getOrDefault("oauth_token")
  valid_595079 = validateParameter(valid_595079, JString, required = false,
                                 default = nil)
  if valid_595079 != nil:
    section.add "oauth_token", valid_595079
  var valid_595080 = query.getOrDefault("userIp")
  valid_595080 = validateParameter(valid_595080, JString, required = false,
                                 default = nil)
  if valid_595080 != nil:
    section.add "userIp", valid_595080
  var valid_595081 = query.getOrDefault("key")
  valid_595081 = validateParameter(valid_595081, JString, required = false,
                                 default = nil)
  if valid_595081 != nil:
    section.add "key", valid_595081
  var valid_595082 = query.getOrDefault("prettyPrint")
  valid_595082 = validateParameter(valid_595082, JBool, required = false,
                                 default = newJBool(true))
  if valid_595082 != nil:
    section.add "prettyPrint", valid_595082
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595084: Call_DfareportingCreativeAssetsInsert_595071;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new creative asset.
  ## 
  let valid = call_595084.validator(path, query, header, formData, body)
  let scheme = call_595084.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595084.url(scheme.get, call_595084.host, call_595084.base,
                         call_595084.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595084, url, valid)

proc call*(call_595085: Call_DfareportingCreativeAssetsInsert_595071;
          profileId: string; advertiserId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; body: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeAssetsInsert
  ## Inserts a new creative asset.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserId: string (required)
  ##               : Advertiser ID of this creative. This is a required field.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595086 = newJObject()
  var query_595087 = newJObject()
  var body_595088 = newJObject()
  add(path_595086, "profileId", newJString(profileId))
  add(query_595087, "fields", newJString(fields))
  add(query_595087, "quotaUser", newJString(quotaUser))
  add(query_595087, "alt", newJString(alt))
  add(query_595087, "oauth_token", newJString(oauthToken))
  add(query_595087, "userIp", newJString(userIp))
  add(query_595087, "key", newJString(key))
  add(path_595086, "advertiserId", newJString(advertiserId))
  if body != nil:
    body_595088 = body
  add(query_595087, "prettyPrint", newJBool(prettyPrint))
  result = call_595085.call(path_595086, query_595087, nil, nil, body_595088)

var dfareportingCreativeAssetsInsert* = Call_DfareportingCreativeAssetsInsert_595071(
    name: "dfareportingCreativeAssetsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeAssets/{advertiserId}/creativeAssets",
    validator: validate_DfareportingCreativeAssetsInsert_595072,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeAssetsInsert_595073,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsUpdate_595111 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativeFieldsUpdate_595113(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsUpdate_595112(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative field.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595114 = path.getOrDefault("profileId")
  valid_595114 = validateParameter(valid_595114, JString, required = true,
                                 default = nil)
  if valid_595114 != nil:
    section.add "profileId", valid_595114
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595115 = query.getOrDefault("fields")
  valid_595115 = validateParameter(valid_595115, JString, required = false,
                                 default = nil)
  if valid_595115 != nil:
    section.add "fields", valid_595115
  var valid_595116 = query.getOrDefault("quotaUser")
  valid_595116 = validateParameter(valid_595116, JString, required = false,
                                 default = nil)
  if valid_595116 != nil:
    section.add "quotaUser", valid_595116
  var valid_595117 = query.getOrDefault("alt")
  valid_595117 = validateParameter(valid_595117, JString, required = false,
                                 default = newJString("json"))
  if valid_595117 != nil:
    section.add "alt", valid_595117
  var valid_595118 = query.getOrDefault("oauth_token")
  valid_595118 = validateParameter(valid_595118, JString, required = false,
                                 default = nil)
  if valid_595118 != nil:
    section.add "oauth_token", valid_595118
  var valid_595119 = query.getOrDefault("userIp")
  valid_595119 = validateParameter(valid_595119, JString, required = false,
                                 default = nil)
  if valid_595119 != nil:
    section.add "userIp", valid_595119
  var valid_595120 = query.getOrDefault("key")
  valid_595120 = validateParameter(valid_595120, JString, required = false,
                                 default = nil)
  if valid_595120 != nil:
    section.add "key", valid_595120
  var valid_595121 = query.getOrDefault("prettyPrint")
  valid_595121 = validateParameter(valid_595121, JBool, required = false,
                                 default = newJBool(true))
  if valid_595121 != nil:
    section.add "prettyPrint", valid_595121
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595123: Call_DfareportingCreativeFieldsUpdate_595111;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative field.
  ## 
  let valid = call_595123.validator(path, query, header, formData, body)
  let scheme = call_595123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595123.url(scheme.get, call_595123.host, call_595123.base,
                         call_595123.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595123, url, valid)

proc call*(call_595124: Call_DfareportingCreativeFieldsUpdate_595111;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldsUpdate
  ## Updates an existing creative field.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595125 = newJObject()
  var query_595126 = newJObject()
  var body_595127 = newJObject()
  add(path_595125, "profileId", newJString(profileId))
  add(query_595126, "fields", newJString(fields))
  add(query_595126, "quotaUser", newJString(quotaUser))
  add(query_595126, "alt", newJString(alt))
  add(query_595126, "oauth_token", newJString(oauthToken))
  add(query_595126, "userIp", newJString(userIp))
  add(query_595126, "key", newJString(key))
  if body != nil:
    body_595127 = body
  add(query_595126, "prettyPrint", newJBool(prettyPrint))
  result = call_595124.call(path_595125, query_595126, nil, nil, body_595127)

var dfareportingCreativeFieldsUpdate* = Call_DfareportingCreativeFieldsUpdate_595111(
    name: "dfareportingCreativeFieldsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields",
    validator: validate_DfareportingCreativeFieldsUpdate_595112,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsUpdate_595113,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsInsert_595128 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativeFieldsInsert_595130(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsInsert_595129(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative field.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595131 = path.getOrDefault("profileId")
  valid_595131 = validateParameter(valid_595131, JString, required = true,
                                 default = nil)
  if valid_595131 != nil:
    section.add "profileId", valid_595131
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595132 = query.getOrDefault("fields")
  valid_595132 = validateParameter(valid_595132, JString, required = false,
                                 default = nil)
  if valid_595132 != nil:
    section.add "fields", valid_595132
  var valid_595133 = query.getOrDefault("quotaUser")
  valid_595133 = validateParameter(valid_595133, JString, required = false,
                                 default = nil)
  if valid_595133 != nil:
    section.add "quotaUser", valid_595133
  var valid_595134 = query.getOrDefault("alt")
  valid_595134 = validateParameter(valid_595134, JString, required = false,
                                 default = newJString("json"))
  if valid_595134 != nil:
    section.add "alt", valid_595134
  var valid_595135 = query.getOrDefault("oauth_token")
  valid_595135 = validateParameter(valid_595135, JString, required = false,
                                 default = nil)
  if valid_595135 != nil:
    section.add "oauth_token", valid_595135
  var valid_595136 = query.getOrDefault("userIp")
  valid_595136 = validateParameter(valid_595136, JString, required = false,
                                 default = nil)
  if valid_595136 != nil:
    section.add "userIp", valid_595136
  var valid_595137 = query.getOrDefault("key")
  valid_595137 = validateParameter(valid_595137, JString, required = false,
                                 default = nil)
  if valid_595137 != nil:
    section.add "key", valid_595137
  var valid_595138 = query.getOrDefault("prettyPrint")
  valid_595138 = validateParameter(valid_595138, JBool, required = false,
                                 default = newJBool(true))
  if valid_595138 != nil:
    section.add "prettyPrint", valid_595138
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595140: Call_DfareportingCreativeFieldsInsert_595128;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new creative field.
  ## 
  let valid = call_595140.validator(path, query, header, formData, body)
  let scheme = call_595140.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595140.url(scheme.get, call_595140.host, call_595140.base,
                         call_595140.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595140, url, valid)

proc call*(call_595141: Call_DfareportingCreativeFieldsInsert_595128;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldsInsert
  ## Inserts a new creative field.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595142 = newJObject()
  var query_595143 = newJObject()
  var body_595144 = newJObject()
  add(path_595142, "profileId", newJString(profileId))
  add(query_595143, "fields", newJString(fields))
  add(query_595143, "quotaUser", newJString(quotaUser))
  add(query_595143, "alt", newJString(alt))
  add(query_595143, "oauth_token", newJString(oauthToken))
  add(query_595143, "userIp", newJString(userIp))
  add(query_595143, "key", newJString(key))
  if body != nil:
    body_595144 = body
  add(query_595143, "prettyPrint", newJBool(prettyPrint))
  result = call_595141.call(path_595142, query_595143, nil, nil, body_595144)

var dfareportingCreativeFieldsInsert* = Call_DfareportingCreativeFieldsInsert_595128(
    name: "dfareportingCreativeFieldsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields",
    validator: validate_DfareportingCreativeFieldsInsert_595129,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsInsert_595130,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsList_595089 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativeFieldsList_595091(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsList_595090(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of creative fields, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595092 = path.getOrDefault("profileId")
  valid_595092 = validateParameter(valid_595092, JString, required = true,
                                 default = nil)
  if valid_595092 != nil:
    section.add "profileId", valid_595092
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for creative fields by name or ID. Wildcards (*) are allowed. For example, "creativefield*2015" will return creative fields with names like "creativefield June 2015", "creativefield April 2015", or simply "creativefield 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativefield" will match creative fields with the name "my creativefield", "creativefield 2015", or simply "creativefield".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creative fields with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only creative fields that belong to these advertisers.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595093 = query.getOrDefault("fields")
  valid_595093 = validateParameter(valid_595093, JString, required = false,
                                 default = nil)
  if valid_595093 != nil:
    section.add "fields", valid_595093
  var valid_595094 = query.getOrDefault("pageToken")
  valid_595094 = validateParameter(valid_595094, JString, required = false,
                                 default = nil)
  if valid_595094 != nil:
    section.add "pageToken", valid_595094
  var valid_595095 = query.getOrDefault("quotaUser")
  valid_595095 = validateParameter(valid_595095, JString, required = false,
                                 default = nil)
  if valid_595095 != nil:
    section.add "quotaUser", valid_595095
  var valid_595096 = query.getOrDefault("sortField")
  valid_595096 = validateParameter(valid_595096, JString, required = false,
                                 default = newJString("ID"))
  if valid_595096 != nil:
    section.add "sortField", valid_595096
  var valid_595097 = query.getOrDefault("alt")
  valid_595097 = validateParameter(valid_595097, JString, required = false,
                                 default = newJString("json"))
  if valid_595097 != nil:
    section.add "alt", valid_595097
  var valid_595098 = query.getOrDefault("searchString")
  valid_595098 = validateParameter(valid_595098, JString, required = false,
                                 default = nil)
  if valid_595098 != nil:
    section.add "searchString", valid_595098
  var valid_595099 = query.getOrDefault("oauth_token")
  valid_595099 = validateParameter(valid_595099, JString, required = false,
                                 default = nil)
  if valid_595099 != nil:
    section.add "oauth_token", valid_595099
  var valid_595100 = query.getOrDefault("userIp")
  valid_595100 = validateParameter(valid_595100, JString, required = false,
                                 default = nil)
  if valid_595100 != nil:
    section.add "userIp", valid_595100
  var valid_595101 = query.getOrDefault("maxResults")
  valid_595101 = validateParameter(valid_595101, JInt, required = false,
                                 default = newJInt(1000))
  if valid_595101 != nil:
    section.add "maxResults", valid_595101
  var valid_595102 = query.getOrDefault("ids")
  valid_595102 = validateParameter(valid_595102, JArray, required = false,
                                 default = nil)
  if valid_595102 != nil:
    section.add "ids", valid_595102
  var valid_595103 = query.getOrDefault("key")
  valid_595103 = validateParameter(valid_595103, JString, required = false,
                                 default = nil)
  if valid_595103 != nil:
    section.add "key", valid_595103
  var valid_595104 = query.getOrDefault("advertiserIds")
  valid_595104 = validateParameter(valid_595104, JArray, required = false,
                                 default = nil)
  if valid_595104 != nil:
    section.add "advertiserIds", valid_595104
  var valid_595105 = query.getOrDefault("sortOrder")
  valid_595105 = validateParameter(valid_595105, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_595105 != nil:
    section.add "sortOrder", valid_595105
  var valid_595106 = query.getOrDefault("prettyPrint")
  valid_595106 = validateParameter(valid_595106, JBool, required = false,
                                 default = newJBool(true))
  if valid_595106 != nil:
    section.add "prettyPrint", valid_595106
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595107: Call_DfareportingCreativeFieldsList_595089; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of creative fields, possibly filtered. This method supports paging.
  ## 
  let valid = call_595107.validator(path, query, header, formData, body)
  let scheme = call_595107.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595107.url(scheme.get, call_595107.host, call_595107.base,
                         call_595107.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595107, url, valid)

proc call*(call_595108: Call_DfareportingCreativeFieldsList_595089;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          advertiserIds: JsonNode = nil; sortOrder: string = "ASCENDING";
          prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldsList
  ## Retrieves a list of creative fields, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for creative fields by name or ID. Wildcards (*) are allowed. For example, "creativefield*2015" will return creative fields with names like "creativefield June 2015", "creativefield April 2015", or simply "creativefield 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativefield" will match creative fields with the name "my creativefield", "creativefield 2015", or simply "creativefield".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creative fields with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only creative fields that belong to these advertisers.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595109 = newJObject()
  var query_595110 = newJObject()
  add(path_595109, "profileId", newJString(profileId))
  add(query_595110, "fields", newJString(fields))
  add(query_595110, "pageToken", newJString(pageToken))
  add(query_595110, "quotaUser", newJString(quotaUser))
  add(query_595110, "sortField", newJString(sortField))
  add(query_595110, "alt", newJString(alt))
  add(query_595110, "searchString", newJString(searchString))
  add(query_595110, "oauth_token", newJString(oauthToken))
  add(query_595110, "userIp", newJString(userIp))
  add(query_595110, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_595110.add "ids", ids
  add(query_595110, "key", newJString(key))
  if advertiserIds != nil:
    query_595110.add "advertiserIds", advertiserIds
  add(query_595110, "sortOrder", newJString(sortOrder))
  add(query_595110, "prettyPrint", newJBool(prettyPrint))
  result = call_595108.call(path_595109, query_595110, nil, nil, nil)

var dfareportingCreativeFieldsList* = Call_DfareportingCreativeFieldsList_595089(
    name: "dfareportingCreativeFieldsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields",
    validator: validate_DfareportingCreativeFieldsList_595090,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsList_595091,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsPatch_595145 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativeFieldsPatch_595147(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsPatch_595146(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative field. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595148 = path.getOrDefault("profileId")
  valid_595148 = validateParameter(valid_595148, JString, required = true,
                                 default = nil)
  if valid_595148 != nil:
    section.add "profileId", valid_595148
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Creative Field ID
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595149 = query.getOrDefault("fields")
  valid_595149 = validateParameter(valid_595149, JString, required = false,
                                 default = nil)
  if valid_595149 != nil:
    section.add "fields", valid_595149
  var valid_595150 = query.getOrDefault("quotaUser")
  valid_595150 = validateParameter(valid_595150, JString, required = false,
                                 default = nil)
  if valid_595150 != nil:
    section.add "quotaUser", valid_595150
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_595151 = query.getOrDefault("id")
  valid_595151 = validateParameter(valid_595151, JString, required = true,
                                 default = nil)
  if valid_595151 != nil:
    section.add "id", valid_595151
  var valid_595152 = query.getOrDefault("alt")
  valid_595152 = validateParameter(valid_595152, JString, required = false,
                                 default = newJString("json"))
  if valid_595152 != nil:
    section.add "alt", valid_595152
  var valid_595153 = query.getOrDefault("oauth_token")
  valid_595153 = validateParameter(valid_595153, JString, required = false,
                                 default = nil)
  if valid_595153 != nil:
    section.add "oauth_token", valid_595153
  var valid_595154 = query.getOrDefault("userIp")
  valid_595154 = validateParameter(valid_595154, JString, required = false,
                                 default = nil)
  if valid_595154 != nil:
    section.add "userIp", valid_595154
  var valid_595155 = query.getOrDefault("key")
  valid_595155 = validateParameter(valid_595155, JString, required = false,
                                 default = nil)
  if valid_595155 != nil:
    section.add "key", valid_595155
  var valid_595156 = query.getOrDefault("prettyPrint")
  valid_595156 = validateParameter(valid_595156, JBool, required = false,
                                 default = newJBool(true))
  if valid_595156 != nil:
    section.add "prettyPrint", valid_595156
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595158: Call_DfareportingCreativeFieldsPatch_595145;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative field. This method supports patch semantics.
  ## 
  let valid = call_595158.validator(path, query, header, formData, body)
  let scheme = call_595158.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595158.url(scheme.get, call_595158.host, call_595158.base,
                         call_595158.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595158, url, valid)

proc call*(call_595159: Call_DfareportingCreativeFieldsPatch_595145;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldsPatch
  ## Updates an existing creative field. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Creative Field ID
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595160 = newJObject()
  var query_595161 = newJObject()
  var body_595162 = newJObject()
  add(path_595160, "profileId", newJString(profileId))
  add(query_595161, "fields", newJString(fields))
  add(query_595161, "quotaUser", newJString(quotaUser))
  add(query_595161, "id", newJString(id))
  add(query_595161, "alt", newJString(alt))
  add(query_595161, "oauth_token", newJString(oauthToken))
  add(query_595161, "userIp", newJString(userIp))
  add(query_595161, "key", newJString(key))
  if body != nil:
    body_595162 = body
  add(query_595161, "prettyPrint", newJBool(prettyPrint))
  result = call_595159.call(path_595160, query_595161, nil, nil, body_595162)

var dfareportingCreativeFieldsPatch* = Call_DfareportingCreativeFieldsPatch_595145(
    name: "dfareportingCreativeFieldsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields",
    validator: validate_DfareportingCreativeFieldsPatch_595146,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsPatch_595147,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesUpdate_595185 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativeFieldValuesUpdate_595187(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesUpdate_595186(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative field value.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595188 = path.getOrDefault("profileId")
  valid_595188 = validateParameter(valid_595188, JString, required = true,
                                 default = nil)
  if valid_595188 != nil:
    section.add "profileId", valid_595188
  var valid_595189 = path.getOrDefault("creativeFieldId")
  valid_595189 = validateParameter(valid_595189, JString, required = true,
                                 default = nil)
  if valid_595189 != nil:
    section.add "creativeFieldId", valid_595189
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595190 = query.getOrDefault("fields")
  valid_595190 = validateParameter(valid_595190, JString, required = false,
                                 default = nil)
  if valid_595190 != nil:
    section.add "fields", valid_595190
  var valid_595191 = query.getOrDefault("quotaUser")
  valid_595191 = validateParameter(valid_595191, JString, required = false,
                                 default = nil)
  if valid_595191 != nil:
    section.add "quotaUser", valid_595191
  var valid_595192 = query.getOrDefault("alt")
  valid_595192 = validateParameter(valid_595192, JString, required = false,
                                 default = newJString("json"))
  if valid_595192 != nil:
    section.add "alt", valid_595192
  var valid_595193 = query.getOrDefault("oauth_token")
  valid_595193 = validateParameter(valid_595193, JString, required = false,
                                 default = nil)
  if valid_595193 != nil:
    section.add "oauth_token", valid_595193
  var valid_595194 = query.getOrDefault("userIp")
  valid_595194 = validateParameter(valid_595194, JString, required = false,
                                 default = nil)
  if valid_595194 != nil:
    section.add "userIp", valid_595194
  var valid_595195 = query.getOrDefault("key")
  valid_595195 = validateParameter(valid_595195, JString, required = false,
                                 default = nil)
  if valid_595195 != nil:
    section.add "key", valid_595195
  var valid_595196 = query.getOrDefault("prettyPrint")
  valid_595196 = validateParameter(valid_595196, JBool, required = false,
                                 default = newJBool(true))
  if valid_595196 != nil:
    section.add "prettyPrint", valid_595196
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595198: Call_DfareportingCreativeFieldValuesUpdate_595185;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative field value.
  ## 
  let valid = call_595198.validator(path, query, header, formData, body)
  let scheme = call_595198.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595198.url(scheme.get, call_595198.host, call_595198.base,
                         call_595198.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595198, url, valid)

proc call*(call_595199: Call_DfareportingCreativeFieldValuesUpdate_595185;
          profileId: string; creativeFieldId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; body: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldValuesUpdate
  ## Updates an existing creative field value.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595200 = newJObject()
  var query_595201 = newJObject()
  var body_595202 = newJObject()
  add(path_595200, "profileId", newJString(profileId))
  add(query_595201, "fields", newJString(fields))
  add(query_595201, "quotaUser", newJString(quotaUser))
  add(query_595201, "alt", newJString(alt))
  add(query_595201, "oauth_token", newJString(oauthToken))
  add(query_595201, "userIp", newJString(userIp))
  add(query_595201, "key", newJString(key))
  add(path_595200, "creativeFieldId", newJString(creativeFieldId))
  if body != nil:
    body_595202 = body
  add(query_595201, "prettyPrint", newJBool(prettyPrint))
  result = call_595199.call(path_595200, query_595201, nil, nil, body_595202)

var dfareportingCreativeFieldValuesUpdate* = Call_DfareportingCreativeFieldValuesUpdate_595185(
    name: "dfareportingCreativeFieldValuesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
    validator: validate_DfareportingCreativeFieldValuesUpdate_595186,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesUpdate_595187,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesInsert_595203 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativeFieldValuesInsert_595205(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesInsert_595204(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative field value.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595206 = path.getOrDefault("profileId")
  valid_595206 = validateParameter(valid_595206, JString, required = true,
                                 default = nil)
  if valid_595206 != nil:
    section.add "profileId", valid_595206
  var valid_595207 = path.getOrDefault("creativeFieldId")
  valid_595207 = validateParameter(valid_595207, JString, required = true,
                                 default = nil)
  if valid_595207 != nil:
    section.add "creativeFieldId", valid_595207
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595208 = query.getOrDefault("fields")
  valid_595208 = validateParameter(valid_595208, JString, required = false,
                                 default = nil)
  if valid_595208 != nil:
    section.add "fields", valid_595208
  var valid_595209 = query.getOrDefault("quotaUser")
  valid_595209 = validateParameter(valid_595209, JString, required = false,
                                 default = nil)
  if valid_595209 != nil:
    section.add "quotaUser", valid_595209
  var valid_595210 = query.getOrDefault("alt")
  valid_595210 = validateParameter(valid_595210, JString, required = false,
                                 default = newJString("json"))
  if valid_595210 != nil:
    section.add "alt", valid_595210
  var valid_595211 = query.getOrDefault("oauth_token")
  valid_595211 = validateParameter(valid_595211, JString, required = false,
                                 default = nil)
  if valid_595211 != nil:
    section.add "oauth_token", valid_595211
  var valid_595212 = query.getOrDefault("userIp")
  valid_595212 = validateParameter(valid_595212, JString, required = false,
                                 default = nil)
  if valid_595212 != nil:
    section.add "userIp", valid_595212
  var valid_595213 = query.getOrDefault("key")
  valid_595213 = validateParameter(valid_595213, JString, required = false,
                                 default = nil)
  if valid_595213 != nil:
    section.add "key", valid_595213
  var valid_595214 = query.getOrDefault("prettyPrint")
  valid_595214 = validateParameter(valid_595214, JBool, required = false,
                                 default = newJBool(true))
  if valid_595214 != nil:
    section.add "prettyPrint", valid_595214
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595216: Call_DfareportingCreativeFieldValuesInsert_595203;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new creative field value.
  ## 
  let valid = call_595216.validator(path, query, header, formData, body)
  let scheme = call_595216.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595216.url(scheme.get, call_595216.host, call_595216.base,
                         call_595216.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595216, url, valid)

proc call*(call_595217: Call_DfareportingCreativeFieldValuesInsert_595203;
          profileId: string; creativeFieldId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; body: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldValuesInsert
  ## Inserts a new creative field value.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595218 = newJObject()
  var query_595219 = newJObject()
  var body_595220 = newJObject()
  add(path_595218, "profileId", newJString(profileId))
  add(query_595219, "fields", newJString(fields))
  add(query_595219, "quotaUser", newJString(quotaUser))
  add(query_595219, "alt", newJString(alt))
  add(query_595219, "oauth_token", newJString(oauthToken))
  add(query_595219, "userIp", newJString(userIp))
  add(query_595219, "key", newJString(key))
  add(path_595218, "creativeFieldId", newJString(creativeFieldId))
  if body != nil:
    body_595220 = body
  add(query_595219, "prettyPrint", newJBool(prettyPrint))
  result = call_595217.call(path_595218, query_595219, nil, nil, body_595220)

var dfareportingCreativeFieldValuesInsert* = Call_DfareportingCreativeFieldValuesInsert_595203(
    name: "dfareportingCreativeFieldValuesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
    validator: validate_DfareportingCreativeFieldValuesInsert_595204,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesInsert_595205,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesList_595163 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativeFieldValuesList_595165(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesList_595164(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of creative field values, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595166 = path.getOrDefault("profileId")
  valid_595166 = validateParameter(valid_595166, JString, required = true,
                                 default = nil)
  if valid_595166 != nil:
    section.add "profileId", valid_595166
  var valid_595167 = path.getOrDefault("creativeFieldId")
  valid_595167 = validateParameter(valid_595167, JString, required = true,
                                 default = nil)
  if valid_595167 != nil:
    section.add "creativeFieldId", valid_595167
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for creative field values by their values. Wildcards (e.g. *) are not allowed.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creative field values with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595168 = query.getOrDefault("fields")
  valid_595168 = validateParameter(valid_595168, JString, required = false,
                                 default = nil)
  if valid_595168 != nil:
    section.add "fields", valid_595168
  var valid_595169 = query.getOrDefault("pageToken")
  valid_595169 = validateParameter(valid_595169, JString, required = false,
                                 default = nil)
  if valid_595169 != nil:
    section.add "pageToken", valid_595169
  var valid_595170 = query.getOrDefault("quotaUser")
  valid_595170 = validateParameter(valid_595170, JString, required = false,
                                 default = nil)
  if valid_595170 != nil:
    section.add "quotaUser", valid_595170
  var valid_595171 = query.getOrDefault("sortField")
  valid_595171 = validateParameter(valid_595171, JString, required = false,
                                 default = newJString("ID"))
  if valid_595171 != nil:
    section.add "sortField", valid_595171
  var valid_595172 = query.getOrDefault("alt")
  valid_595172 = validateParameter(valid_595172, JString, required = false,
                                 default = newJString("json"))
  if valid_595172 != nil:
    section.add "alt", valid_595172
  var valid_595173 = query.getOrDefault("searchString")
  valid_595173 = validateParameter(valid_595173, JString, required = false,
                                 default = nil)
  if valid_595173 != nil:
    section.add "searchString", valid_595173
  var valid_595174 = query.getOrDefault("oauth_token")
  valid_595174 = validateParameter(valid_595174, JString, required = false,
                                 default = nil)
  if valid_595174 != nil:
    section.add "oauth_token", valid_595174
  var valid_595175 = query.getOrDefault("userIp")
  valid_595175 = validateParameter(valid_595175, JString, required = false,
                                 default = nil)
  if valid_595175 != nil:
    section.add "userIp", valid_595175
  var valid_595176 = query.getOrDefault("maxResults")
  valid_595176 = validateParameter(valid_595176, JInt, required = false,
                                 default = newJInt(1000))
  if valid_595176 != nil:
    section.add "maxResults", valid_595176
  var valid_595177 = query.getOrDefault("ids")
  valid_595177 = validateParameter(valid_595177, JArray, required = false,
                                 default = nil)
  if valid_595177 != nil:
    section.add "ids", valid_595177
  var valid_595178 = query.getOrDefault("key")
  valid_595178 = validateParameter(valid_595178, JString, required = false,
                                 default = nil)
  if valid_595178 != nil:
    section.add "key", valid_595178
  var valid_595179 = query.getOrDefault("sortOrder")
  valid_595179 = validateParameter(valid_595179, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_595179 != nil:
    section.add "sortOrder", valid_595179
  var valid_595180 = query.getOrDefault("prettyPrint")
  valid_595180 = validateParameter(valid_595180, JBool, required = false,
                                 default = newJBool(true))
  if valid_595180 != nil:
    section.add "prettyPrint", valid_595180
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595181: Call_DfareportingCreativeFieldValuesList_595163;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of creative field values, possibly filtered. This method supports paging.
  ## 
  let valid = call_595181.validator(path, query, header, formData, body)
  let scheme = call_595181.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595181.url(scheme.get, call_595181.host, call_595181.base,
                         call_595181.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595181, url, valid)

proc call*(call_595182: Call_DfareportingCreativeFieldValuesList_595163;
          profileId: string; creativeFieldId: string; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; sortField: string = "ID";
          alt: string = "json"; searchString: string = ""; oauthToken: string = "";
          userIp: string = ""; maxResults: int = 1000; ids: JsonNode = nil;
          key: string = ""; sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldValuesList
  ## Retrieves a list of creative field values, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for creative field values by their values. Wildcards (e.g. *) are not allowed.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creative field values with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595183 = newJObject()
  var query_595184 = newJObject()
  add(path_595183, "profileId", newJString(profileId))
  add(query_595184, "fields", newJString(fields))
  add(query_595184, "pageToken", newJString(pageToken))
  add(query_595184, "quotaUser", newJString(quotaUser))
  add(query_595184, "sortField", newJString(sortField))
  add(query_595184, "alt", newJString(alt))
  add(query_595184, "searchString", newJString(searchString))
  add(query_595184, "oauth_token", newJString(oauthToken))
  add(query_595184, "userIp", newJString(userIp))
  add(query_595184, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_595184.add "ids", ids
  add(query_595184, "key", newJString(key))
  add(query_595184, "sortOrder", newJString(sortOrder))
  add(path_595183, "creativeFieldId", newJString(creativeFieldId))
  add(query_595184, "prettyPrint", newJBool(prettyPrint))
  result = call_595182.call(path_595183, query_595184, nil, nil, nil)

var dfareportingCreativeFieldValuesList* = Call_DfareportingCreativeFieldValuesList_595163(
    name: "dfareportingCreativeFieldValuesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
    validator: validate_DfareportingCreativeFieldValuesList_595164,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesList_595165,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesPatch_595221 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativeFieldValuesPatch_595223(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesPatch_595222(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative field value. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595224 = path.getOrDefault("profileId")
  valid_595224 = validateParameter(valid_595224, JString, required = true,
                                 default = nil)
  if valid_595224 != nil:
    section.add "profileId", valid_595224
  var valid_595225 = path.getOrDefault("creativeFieldId")
  valid_595225 = validateParameter(valid_595225, JString, required = true,
                                 default = nil)
  if valid_595225 != nil:
    section.add "creativeFieldId", valid_595225
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Creative Field Value ID
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595226 = query.getOrDefault("fields")
  valid_595226 = validateParameter(valid_595226, JString, required = false,
                                 default = nil)
  if valid_595226 != nil:
    section.add "fields", valid_595226
  var valid_595227 = query.getOrDefault("quotaUser")
  valid_595227 = validateParameter(valid_595227, JString, required = false,
                                 default = nil)
  if valid_595227 != nil:
    section.add "quotaUser", valid_595227
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_595228 = query.getOrDefault("id")
  valid_595228 = validateParameter(valid_595228, JString, required = true,
                                 default = nil)
  if valid_595228 != nil:
    section.add "id", valid_595228
  var valid_595229 = query.getOrDefault("alt")
  valid_595229 = validateParameter(valid_595229, JString, required = false,
                                 default = newJString("json"))
  if valid_595229 != nil:
    section.add "alt", valid_595229
  var valid_595230 = query.getOrDefault("oauth_token")
  valid_595230 = validateParameter(valid_595230, JString, required = false,
                                 default = nil)
  if valid_595230 != nil:
    section.add "oauth_token", valid_595230
  var valid_595231 = query.getOrDefault("userIp")
  valid_595231 = validateParameter(valid_595231, JString, required = false,
                                 default = nil)
  if valid_595231 != nil:
    section.add "userIp", valid_595231
  var valid_595232 = query.getOrDefault("key")
  valid_595232 = validateParameter(valid_595232, JString, required = false,
                                 default = nil)
  if valid_595232 != nil:
    section.add "key", valid_595232
  var valid_595233 = query.getOrDefault("prettyPrint")
  valid_595233 = validateParameter(valid_595233, JBool, required = false,
                                 default = newJBool(true))
  if valid_595233 != nil:
    section.add "prettyPrint", valid_595233
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595235: Call_DfareportingCreativeFieldValuesPatch_595221;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative field value. This method supports patch semantics.
  ## 
  let valid = call_595235.validator(path, query, header, formData, body)
  let scheme = call_595235.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595235.url(scheme.get, call_595235.host, call_595235.base,
                         call_595235.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595235, url, valid)

proc call*(call_595236: Call_DfareportingCreativeFieldValuesPatch_595221;
          profileId: string; id: string; creativeFieldId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; body: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldValuesPatch
  ## Updates an existing creative field value. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Creative Field Value ID
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595237 = newJObject()
  var query_595238 = newJObject()
  var body_595239 = newJObject()
  add(path_595237, "profileId", newJString(profileId))
  add(query_595238, "fields", newJString(fields))
  add(query_595238, "quotaUser", newJString(quotaUser))
  add(query_595238, "id", newJString(id))
  add(query_595238, "alt", newJString(alt))
  add(query_595238, "oauth_token", newJString(oauthToken))
  add(query_595238, "userIp", newJString(userIp))
  add(query_595238, "key", newJString(key))
  add(path_595237, "creativeFieldId", newJString(creativeFieldId))
  if body != nil:
    body_595239 = body
  add(query_595238, "prettyPrint", newJBool(prettyPrint))
  result = call_595236.call(path_595237, query_595238, nil, nil, body_595239)

var dfareportingCreativeFieldValuesPatch* = Call_DfareportingCreativeFieldValuesPatch_595221(
    name: "dfareportingCreativeFieldValuesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
    validator: validate_DfareportingCreativeFieldValuesPatch_595222,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesPatch_595223,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesGet_595240 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativeFieldValuesGet_595242(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesGet_595241(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one creative field value by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative Field Value ID
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595243 = path.getOrDefault("profileId")
  valid_595243 = validateParameter(valid_595243, JString, required = true,
                                 default = nil)
  if valid_595243 != nil:
    section.add "profileId", valid_595243
  var valid_595244 = path.getOrDefault("id")
  valid_595244 = validateParameter(valid_595244, JString, required = true,
                                 default = nil)
  if valid_595244 != nil:
    section.add "id", valid_595244
  var valid_595245 = path.getOrDefault("creativeFieldId")
  valid_595245 = validateParameter(valid_595245, JString, required = true,
                                 default = nil)
  if valid_595245 != nil:
    section.add "creativeFieldId", valid_595245
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595246 = query.getOrDefault("fields")
  valid_595246 = validateParameter(valid_595246, JString, required = false,
                                 default = nil)
  if valid_595246 != nil:
    section.add "fields", valid_595246
  var valid_595247 = query.getOrDefault("quotaUser")
  valid_595247 = validateParameter(valid_595247, JString, required = false,
                                 default = nil)
  if valid_595247 != nil:
    section.add "quotaUser", valid_595247
  var valid_595248 = query.getOrDefault("alt")
  valid_595248 = validateParameter(valid_595248, JString, required = false,
                                 default = newJString("json"))
  if valid_595248 != nil:
    section.add "alt", valid_595248
  var valid_595249 = query.getOrDefault("oauth_token")
  valid_595249 = validateParameter(valid_595249, JString, required = false,
                                 default = nil)
  if valid_595249 != nil:
    section.add "oauth_token", valid_595249
  var valid_595250 = query.getOrDefault("userIp")
  valid_595250 = validateParameter(valid_595250, JString, required = false,
                                 default = nil)
  if valid_595250 != nil:
    section.add "userIp", valid_595250
  var valid_595251 = query.getOrDefault("key")
  valid_595251 = validateParameter(valid_595251, JString, required = false,
                                 default = nil)
  if valid_595251 != nil:
    section.add "key", valid_595251
  var valid_595252 = query.getOrDefault("prettyPrint")
  valid_595252 = validateParameter(valid_595252, JBool, required = false,
                                 default = newJBool(true))
  if valid_595252 != nil:
    section.add "prettyPrint", valid_595252
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595253: Call_DfareportingCreativeFieldValuesGet_595240;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one creative field value by ID.
  ## 
  let valid = call_595253.validator(path, query, header, formData, body)
  let scheme = call_595253.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595253.url(scheme.get, call_595253.host, call_595253.base,
                         call_595253.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595253, url, valid)

proc call*(call_595254: Call_DfareportingCreativeFieldValuesGet_595240;
          profileId: string; id: string; creativeFieldId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldValuesGet
  ## Gets one creative field value by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Creative Field Value ID
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595255 = newJObject()
  var query_595256 = newJObject()
  add(path_595255, "profileId", newJString(profileId))
  add(query_595256, "fields", newJString(fields))
  add(query_595256, "quotaUser", newJString(quotaUser))
  add(query_595256, "alt", newJString(alt))
  add(query_595256, "oauth_token", newJString(oauthToken))
  add(query_595256, "userIp", newJString(userIp))
  add(path_595255, "id", newJString(id))
  add(query_595256, "key", newJString(key))
  add(path_595255, "creativeFieldId", newJString(creativeFieldId))
  add(query_595256, "prettyPrint", newJBool(prettyPrint))
  result = call_595254.call(path_595255, query_595256, nil, nil, nil)

var dfareportingCreativeFieldValuesGet* = Call_DfareportingCreativeFieldValuesGet_595240(
    name: "dfareportingCreativeFieldValuesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}",
    validator: validate_DfareportingCreativeFieldValuesGet_595241,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesGet_595242,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldValuesDelete_595257 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativeFieldValuesDelete_595259(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "creativeFieldId" in path, "`creativeFieldId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "creativeFieldId"),
               (kind: ConstantSegment, value: "/creativeFieldValues/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldValuesDelete_595258(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing creative field value.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative Field Value ID
  ##   creativeFieldId: JString (required)
  ##                  : Creative field ID for this creative field value.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595260 = path.getOrDefault("profileId")
  valid_595260 = validateParameter(valid_595260, JString, required = true,
                                 default = nil)
  if valid_595260 != nil:
    section.add "profileId", valid_595260
  var valid_595261 = path.getOrDefault("id")
  valid_595261 = validateParameter(valid_595261, JString, required = true,
                                 default = nil)
  if valid_595261 != nil:
    section.add "id", valid_595261
  var valid_595262 = path.getOrDefault("creativeFieldId")
  valid_595262 = validateParameter(valid_595262, JString, required = true,
                                 default = nil)
  if valid_595262 != nil:
    section.add "creativeFieldId", valid_595262
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595263 = query.getOrDefault("fields")
  valid_595263 = validateParameter(valid_595263, JString, required = false,
                                 default = nil)
  if valid_595263 != nil:
    section.add "fields", valid_595263
  var valid_595264 = query.getOrDefault("quotaUser")
  valid_595264 = validateParameter(valid_595264, JString, required = false,
                                 default = nil)
  if valid_595264 != nil:
    section.add "quotaUser", valid_595264
  var valid_595265 = query.getOrDefault("alt")
  valid_595265 = validateParameter(valid_595265, JString, required = false,
                                 default = newJString("json"))
  if valid_595265 != nil:
    section.add "alt", valid_595265
  var valid_595266 = query.getOrDefault("oauth_token")
  valid_595266 = validateParameter(valid_595266, JString, required = false,
                                 default = nil)
  if valid_595266 != nil:
    section.add "oauth_token", valid_595266
  var valid_595267 = query.getOrDefault("userIp")
  valid_595267 = validateParameter(valid_595267, JString, required = false,
                                 default = nil)
  if valid_595267 != nil:
    section.add "userIp", valid_595267
  var valid_595268 = query.getOrDefault("key")
  valid_595268 = validateParameter(valid_595268, JString, required = false,
                                 default = nil)
  if valid_595268 != nil:
    section.add "key", valid_595268
  var valid_595269 = query.getOrDefault("prettyPrint")
  valid_595269 = validateParameter(valid_595269, JBool, required = false,
                                 default = newJBool(true))
  if valid_595269 != nil:
    section.add "prettyPrint", valid_595269
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595270: Call_DfareportingCreativeFieldValuesDelete_595257;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing creative field value.
  ## 
  let valid = call_595270.validator(path, query, header, formData, body)
  let scheme = call_595270.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595270.url(scheme.get, call_595270.host, call_595270.base,
                         call_595270.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595270, url, valid)

proc call*(call_595271: Call_DfareportingCreativeFieldValuesDelete_595257;
          profileId: string; id: string; creativeFieldId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldValuesDelete
  ## Deletes an existing creative field value.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Creative Field Value ID
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   creativeFieldId: string (required)
  ##                  : Creative field ID for this creative field value.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595272 = newJObject()
  var query_595273 = newJObject()
  add(path_595272, "profileId", newJString(profileId))
  add(query_595273, "fields", newJString(fields))
  add(query_595273, "quotaUser", newJString(quotaUser))
  add(query_595273, "alt", newJString(alt))
  add(query_595273, "oauth_token", newJString(oauthToken))
  add(query_595273, "userIp", newJString(userIp))
  add(path_595272, "id", newJString(id))
  add(query_595273, "key", newJString(key))
  add(path_595272, "creativeFieldId", newJString(creativeFieldId))
  add(query_595273, "prettyPrint", newJBool(prettyPrint))
  result = call_595271.call(path_595272, query_595273, nil, nil, nil)

var dfareportingCreativeFieldValuesDelete* = Call_DfareportingCreativeFieldValuesDelete_595257(
    name: "dfareportingCreativeFieldValuesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}",
    validator: validate_DfareportingCreativeFieldValuesDelete_595258,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldValuesDelete_595259,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsGet_595274 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativeFieldsGet_595276(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsGet_595275(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one creative field by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative Field ID
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595277 = path.getOrDefault("profileId")
  valid_595277 = validateParameter(valid_595277, JString, required = true,
                                 default = nil)
  if valid_595277 != nil:
    section.add "profileId", valid_595277
  var valid_595278 = path.getOrDefault("id")
  valid_595278 = validateParameter(valid_595278, JString, required = true,
                                 default = nil)
  if valid_595278 != nil:
    section.add "id", valid_595278
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595279 = query.getOrDefault("fields")
  valid_595279 = validateParameter(valid_595279, JString, required = false,
                                 default = nil)
  if valid_595279 != nil:
    section.add "fields", valid_595279
  var valid_595280 = query.getOrDefault("quotaUser")
  valid_595280 = validateParameter(valid_595280, JString, required = false,
                                 default = nil)
  if valid_595280 != nil:
    section.add "quotaUser", valid_595280
  var valid_595281 = query.getOrDefault("alt")
  valid_595281 = validateParameter(valid_595281, JString, required = false,
                                 default = newJString("json"))
  if valid_595281 != nil:
    section.add "alt", valid_595281
  var valid_595282 = query.getOrDefault("oauth_token")
  valid_595282 = validateParameter(valid_595282, JString, required = false,
                                 default = nil)
  if valid_595282 != nil:
    section.add "oauth_token", valid_595282
  var valid_595283 = query.getOrDefault("userIp")
  valid_595283 = validateParameter(valid_595283, JString, required = false,
                                 default = nil)
  if valid_595283 != nil:
    section.add "userIp", valid_595283
  var valid_595284 = query.getOrDefault("key")
  valid_595284 = validateParameter(valid_595284, JString, required = false,
                                 default = nil)
  if valid_595284 != nil:
    section.add "key", valid_595284
  var valid_595285 = query.getOrDefault("prettyPrint")
  valid_595285 = validateParameter(valid_595285, JBool, required = false,
                                 default = newJBool(true))
  if valid_595285 != nil:
    section.add "prettyPrint", valid_595285
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595286: Call_DfareportingCreativeFieldsGet_595274; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one creative field by ID.
  ## 
  let valid = call_595286.validator(path, query, header, formData, body)
  let scheme = call_595286.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595286.url(scheme.get, call_595286.host, call_595286.base,
                         call_595286.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595286, url, valid)

proc call*(call_595287: Call_DfareportingCreativeFieldsGet_595274;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldsGet
  ## Gets one creative field by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Creative Field ID
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595288 = newJObject()
  var query_595289 = newJObject()
  add(path_595288, "profileId", newJString(profileId))
  add(query_595289, "fields", newJString(fields))
  add(query_595289, "quotaUser", newJString(quotaUser))
  add(query_595289, "alt", newJString(alt))
  add(query_595289, "oauth_token", newJString(oauthToken))
  add(query_595289, "userIp", newJString(userIp))
  add(path_595288, "id", newJString(id))
  add(query_595289, "key", newJString(key))
  add(query_595289, "prettyPrint", newJBool(prettyPrint))
  result = call_595287.call(path_595288, query_595289, nil, nil, nil)

var dfareportingCreativeFieldsGet* = Call_DfareportingCreativeFieldsGet_595274(
    name: "dfareportingCreativeFieldsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/creativeFields/{id}",
    validator: validate_DfareportingCreativeFieldsGet_595275,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsGet_595276,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeFieldsDelete_595290 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativeFieldsDelete_595292(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeFields/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeFieldsDelete_595291(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing creative field.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative Field ID
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595293 = path.getOrDefault("profileId")
  valid_595293 = validateParameter(valid_595293, JString, required = true,
                                 default = nil)
  if valid_595293 != nil:
    section.add "profileId", valid_595293
  var valid_595294 = path.getOrDefault("id")
  valid_595294 = validateParameter(valid_595294, JString, required = true,
                                 default = nil)
  if valid_595294 != nil:
    section.add "id", valid_595294
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595295 = query.getOrDefault("fields")
  valid_595295 = validateParameter(valid_595295, JString, required = false,
                                 default = nil)
  if valid_595295 != nil:
    section.add "fields", valid_595295
  var valid_595296 = query.getOrDefault("quotaUser")
  valid_595296 = validateParameter(valid_595296, JString, required = false,
                                 default = nil)
  if valid_595296 != nil:
    section.add "quotaUser", valid_595296
  var valid_595297 = query.getOrDefault("alt")
  valid_595297 = validateParameter(valid_595297, JString, required = false,
                                 default = newJString("json"))
  if valid_595297 != nil:
    section.add "alt", valid_595297
  var valid_595298 = query.getOrDefault("oauth_token")
  valid_595298 = validateParameter(valid_595298, JString, required = false,
                                 default = nil)
  if valid_595298 != nil:
    section.add "oauth_token", valid_595298
  var valid_595299 = query.getOrDefault("userIp")
  valid_595299 = validateParameter(valid_595299, JString, required = false,
                                 default = nil)
  if valid_595299 != nil:
    section.add "userIp", valid_595299
  var valid_595300 = query.getOrDefault("key")
  valid_595300 = validateParameter(valid_595300, JString, required = false,
                                 default = nil)
  if valid_595300 != nil:
    section.add "key", valid_595300
  var valid_595301 = query.getOrDefault("prettyPrint")
  valid_595301 = validateParameter(valid_595301, JBool, required = false,
                                 default = newJBool(true))
  if valid_595301 != nil:
    section.add "prettyPrint", valid_595301
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595302: Call_DfareportingCreativeFieldsDelete_595290;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing creative field.
  ## 
  let valid = call_595302.validator(path, query, header, formData, body)
  let scheme = call_595302.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595302.url(scheme.get, call_595302.host, call_595302.base,
                         call_595302.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595302, url, valid)

proc call*(call_595303: Call_DfareportingCreativeFieldsDelete_595290;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeFieldsDelete
  ## Deletes an existing creative field.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Creative Field ID
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595304 = newJObject()
  var query_595305 = newJObject()
  add(path_595304, "profileId", newJString(profileId))
  add(query_595305, "fields", newJString(fields))
  add(query_595305, "quotaUser", newJString(quotaUser))
  add(query_595305, "alt", newJString(alt))
  add(query_595305, "oauth_token", newJString(oauthToken))
  add(query_595305, "userIp", newJString(userIp))
  add(path_595304, "id", newJString(id))
  add(query_595305, "key", newJString(key))
  add(query_595305, "prettyPrint", newJBool(prettyPrint))
  result = call_595303.call(path_595304, query_595305, nil, nil, nil)

var dfareportingCreativeFieldsDelete* = Call_DfareportingCreativeFieldsDelete_595290(
    name: "dfareportingCreativeFieldsDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/creativeFields/{id}",
    validator: validate_DfareportingCreativeFieldsDelete_595291,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeFieldsDelete_595292,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsUpdate_595329 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativeGroupsUpdate_595331(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsUpdate_595330(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595332 = path.getOrDefault("profileId")
  valid_595332 = validateParameter(valid_595332, JString, required = true,
                                 default = nil)
  if valid_595332 != nil:
    section.add "profileId", valid_595332
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595333 = query.getOrDefault("fields")
  valid_595333 = validateParameter(valid_595333, JString, required = false,
                                 default = nil)
  if valid_595333 != nil:
    section.add "fields", valid_595333
  var valid_595334 = query.getOrDefault("quotaUser")
  valid_595334 = validateParameter(valid_595334, JString, required = false,
                                 default = nil)
  if valid_595334 != nil:
    section.add "quotaUser", valid_595334
  var valid_595335 = query.getOrDefault("alt")
  valid_595335 = validateParameter(valid_595335, JString, required = false,
                                 default = newJString("json"))
  if valid_595335 != nil:
    section.add "alt", valid_595335
  var valid_595336 = query.getOrDefault("oauth_token")
  valid_595336 = validateParameter(valid_595336, JString, required = false,
                                 default = nil)
  if valid_595336 != nil:
    section.add "oauth_token", valid_595336
  var valid_595337 = query.getOrDefault("userIp")
  valid_595337 = validateParameter(valid_595337, JString, required = false,
                                 default = nil)
  if valid_595337 != nil:
    section.add "userIp", valid_595337
  var valid_595338 = query.getOrDefault("key")
  valid_595338 = validateParameter(valid_595338, JString, required = false,
                                 default = nil)
  if valid_595338 != nil:
    section.add "key", valid_595338
  var valid_595339 = query.getOrDefault("prettyPrint")
  valid_595339 = validateParameter(valid_595339, JBool, required = false,
                                 default = newJBool(true))
  if valid_595339 != nil:
    section.add "prettyPrint", valid_595339
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595341: Call_DfareportingCreativeGroupsUpdate_595329;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative group.
  ## 
  let valid = call_595341.validator(path, query, header, formData, body)
  let scheme = call_595341.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595341.url(scheme.get, call_595341.host, call_595341.base,
                         call_595341.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595341, url, valid)

proc call*(call_595342: Call_DfareportingCreativeGroupsUpdate_595329;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeGroupsUpdate
  ## Updates an existing creative group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595343 = newJObject()
  var query_595344 = newJObject()
  var body_595345 = newJObject()
  add(path_595343, "profileId", newJString(profileId))
  add(query_595344, "fields", newJString(fields))
  add(query_595344, "quotaUser", newJString(quotaUser))
  add(query_595344, "alt", newJString(alt))
  add(query_595344, "oauth_token", newJString(oauthToken))
  add(query_595344, "userIp", newJString(userIp))
  add(query_595344, "key", newJString(key))
  if body != nil:
    body_595345 = body
  add(query_595344, "prettyPrint", newJBool(prettyPrint))
  result = call_595342.call(path_595343, query_595344, nil, nil, body_595345)

var dfareportingCreativeGroupsUpdate* = Call_DfareportingCreativeGroupsUpdate_595329(
    name: "dfareportingCreativeGroupsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeGroups",
    validator: validate_DfareportingCreativeGroupsUpdate_595330,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeGroupsUpdate_595331,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsInsert_595346 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativeGroupsInsert_595348(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsInsert_595347(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595349 = path.getOrDefault("profileId")
  valid_595349 = validateParameter(valid_595349, JString, required = true,
                                 default = nil)
  if valid_595349 != nil:
    section.add "profileId", valid_595349
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595350 = query.getOrDefault("fields")
  valid_595350 = validateParameter(valid_595350, JString, required = false,
                                 default = nil)
  if valid_595350 != nil:
    section.add "fields", valid_595350
  var valid_595351 = query.getOrDefault("quotaUser")
  valid_595351 = validateParameter(valid_595351, JString, required = false,
                                 default = nil)
  if valid_595351 != nil:
    section.add "quotaUser", valid_595351
  var valid_595352 = query.getOrDefault("alt")
  valid_595352 = validateParameter(valid_595352, JString, required = false,
                                 default = newJString("json"))
  if valid_595352 != nil:
    section.add "alt", valid_595352
  var valid_595353 = query.getOrDefault("oauth_token")
  valid_595353 = validateParameter(valid_595353, JString, required = false,
                                 default = nil)
  if valid_595353 != nil:
    section.add "oauth_token", valid_595353
  var valid_595354 = query.getOrDefault("userIp")
  valid_595354 = validateParameter(valid_595354, JString, required = false,
                                 default = nil)
  if valid_595354 != nil:
    section.add "userIp", valid_595354
  var valid_595355 = query.getOrDefault("key")
  valid_595355 = validateParameter(valid_595355, JString, required = false,
                                 default = nil)
  if valid_595355 != nil:
    section.add "key", valid_595355
  var valid_595356 = query.getOrDefault("prettyPrint")
  valid_595356 = validateParameter(valid_595356, JBool, required = false,
                                 default = newJBool(true))
  if valid_595356 != nil:
    section.add "prettyPrint", valid_595356
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595358: Call_DfareportingCreativeGroupsInsert_595346;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new creative group.
  ## 
  let valid = call_595358.validator(path, query, header, formData, body)
  let scheme = call_595358.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595358.url(scheme.get, call_595358.host, call_595358.base,
                         call_595358.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595358, url, valid)

proc call*(call_595359: Call_DfareportingCreativeGroupsInsert_595346;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeGroupsInsert
  ## Inserts a new creative group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595360 = newJObject()
  var query_595361 = newJObject()
  var body_595362 = newJObject()
  add(path_595360, "profileId", newJString(profileId))
  add(query_595361, "fields", newJString(fields))
  add(query_595361, "quotaUser", newJString(quotaUser))
  add(query_595361, "alt", newJString(alt))
  add(query_595361, "oauth_token", newJString(oauthToken))
  add(query_595361, "userIp", newJString(userIp))
  add(query_595361, "key", newJString(key))
  if body != nil:
    body_595362 = body
  add(query_595361, "prettyPrint", newJBool(prettyPrint))
  result = call_595359.call(path_595360, query_595361, nil, nil, body_595362)

var dfareportingCreativeGroupsInsert* = Call_DfareportingCreativeGroupsInsert_595346(
    name: "dfareportingCreativeGroupsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeGroups",
    validator: validate_DfareportingCreativeGroupsInsert_595347,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeGroupsInsert_595348,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsList_595306 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativeGroupsList_595308(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsList_595307(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of creative groups, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595309 = path.getOrDefault("profileId")
  valid_595309 = validateParameter(valid_595309, JString, required = true,
                                 default = nil)
  if valid_595309 != nil:
    section.add "profileId", valid_595309
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for creative groups by name or ID. Wildcards (*) are allowed. For example, "creativegroup*2015" will return creative groups with names like "creativegroup June 2015", "creativegroup April 2015", or simply "creativegroup 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativegroup" will match creative groups with the name "my creativegroup", "creativegroup 2015", or simply "creativegroup".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creative groups with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only creative groups that belong to these advertisers.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   groupNumber: JInt
  ##              : Select only creative groups that belong to this subgroup.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595310 = query.getOrDefault("fields")
  valid_595310 = validateParameter(valid_595310, JString, required = false,
                                 default = nil)
  if valid_595310 != nil:
    section.add "fields", valid_595310
  var valid_595311 = query.getOrDefault("pageToken")
  valid_595311 = validateParameter(valid_595311, JString, required = false,
                                 default = nil)
  if valid_595311 != nil:
    section.add "pageToken", valid_595311
  var valid_595312 = query.getOrDefault("quotaUser")
  valid_595312 = validateParameter(valid_595312, JString, required = false,
                                 default = nil)
  if valid_595312 != nil:
    section.add "quotaUser", valid_595312
  var valid_595313 = query.getOrDefault("sortField")
  valid_595313 = validateParameter(valid_595313, JString, required = false,
                                 default = newJString("ID"))
  if valid_595313 != nil:
    section.add "sortField", valid_595313
  var valid_595314 = query.getOrDefault("alt")
  valid_595314 = validateParameter(valid_595314, JString, required = false,
                                 default = newJString("json"))
  if valid_595314 != nil:
    section.add "alt", valid_595314
  var valid_595315 = query.getOrDefault("searchString")
  valid_595315 = validateParameter(valid_595315, JString, required = false,
                                 default = nil)
  if valid_595315 != nil:
    section.add "searchString", valid_595315
  var valid_595316 = query.getOrDefault("oauth_token")
  valid_595316 = validateParameter(valid_595316, JString, required = false,
                                 default = nil)
  if valid_595316 != nil:
    section.add "oauth_token", valid_595316
  var valid_595317 = query.getOrDefault("userIp")
  valid_595317 = validateParameter(valid_595317, JString, required = false,
                                 default = nil)
  if valid_595317 != nil:
    section.add "userIp", valid_595317
  var valid_595318 = query.getOrDefault("maxResults")
  valid_595318 = validateParameter(valid_595318, JInt, required = false,
                                 default = newJInt(1000))
  if valid_595318 != nil:
    section.add "maxResults", valid_595318
  var valid_595319 = query.getOrDefault("ids")
  valid_595319 = validateParameter(valid_595319, JArray, required = false,
                                 default = nil)
  if valid_595319 != nil:
    section.add "ids", valid_595319
  var valid_595320 = query.getOrDefault("key")
  valid_595320 = validateParameter(valid_595320, JString, required = false,
                                 default = nil)
  if valid_595320 != nil:
    section.add "key", valid_595320
  var valid_595321 = query.getOrDefault("advertiserIds")
  valid_595321 = validateParameter(valid_595321, JArray, required = false,
                                 default = nil)
  if valid_595321 != nil:
    section.add "advertiserIds", valid_595321
  var valid_595322 = query.getOrDefault("sortOrder")
  valid_595322 = validateParameter(valid_595322, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_595322 != nil:
    section.add "sortOrder", valid_595322
  var valid_595323 = query.getOrDefault("groupNumber")
  valid_595323 = validateParameter(valid_595323, JInt, required = false, default = nil)
  if valid_595323 != nil:
    section.add "groupNumber", valid_595323
  var valid_595324 = query.getOrDefault("prettyPrint")
  valid_595324 = validateParameter(valid_595324, JBool, required = false,
                                 default = newJBool(true))
  if valid_595324 != nil:
    section.add "prettyPrint", valid_595324
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595325: Call_DfareportingCreativeGroupsList_595306; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of creative groups, possibly filtered. This method supports paging.
  ## 
  let valid = call_595325.validator(path, query, header, formData, body)
  let scheme = call_595325.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595325.url(scheme.get, call_595325.host, call_595325.base,
                         call_595325.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595325, url, valid)

proc call*(call_595326: Call_DfareportingCreativeGroupsList_595306;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          advertiserIds: JsonNode = nil; sortOrder: string = "ASCENDING";
          groupNumber: int = 0; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeGroupsList
  ## Retrieves a list of creative groups, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for creative groups by name or ID. Wildcards (*) are allowed. For example, "creativegroup*2015" will return creative groups with names like "creativegroup June 2015", "creativegroup April 2015", or simply "creativegroup 2015". Most of the searches also add wild-cards implicitly at the start and the end of the search string. For example, a search string of "creativegroup" will match creative groups with the name "my creativegroup", "creativegroup 2015", or simply "creativegroup".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creative groups with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only creative groups that belong to these advertisers.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   groupNumber: int
  ##              : Select only creative groups that belong to this subgroup.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595327 = newJObject()
  var query_595328 = newJObject()
  add(path_595327, "profileId", newJString(profileId))
  add(query_595328, "fields", newJString(fields))
  add(query_595328, "pageToken", newJString(pageToken))
  add(query_595328, "quotaUser", newJString(quotaUser))
  add(query_595328, "sortField", newJString(sortField))
  add(query_595328, "alt", newJString(alt))
  add(query_595328, "searchString", newJString(searchString))
  add(query_595328, "oauth_token", newJString(oauthToken))
  add(query_595328, "userIp", newJString(userIp))
  add(query_595328, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_595328.add "ids", ids
  add(query_595328, "key", newJString(key))
  if advertiserIds != nil:
    query_595328.add "advertiserIds", advertiserIds
  add(query_595328, "sortOrder", newJString(sortOrder))
  add(query_595328, "groupNumber", newJInt(groupNumber))
  add(query_595328, "prettyPrint", newJBool(prettyPrint))
  result = call_595326.call(path_595327, query_595328, nil, nil, nil)

var dfareportingCreativeGroupsList* = Call_DfareportingCreativeGroupsList_595306(
    name: "dfareportingCreativeGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeGroups",
    validator: validate_DfareportingCreativeGroupsList_595307,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeGroupsList_595308,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsPatch_595363 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativeGroupsPatch_595365(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsPatch_595364(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative group. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595366 = path.getOrDefault("profileId")
  valid_595366 = validateParameter(valid_595366, JString, required = true,
                                 default = nil)
  if valid_595366 != nil:
    section.add "profileId", valid_595366
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Creative group ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595367 = query.getOrDefault("fields")
  valid_595367 = validateParameter(valid_595367, JString, required = false,
                                 default = nil)
  if valid_595367 != nil:
    section.add "fields", valid_595367
  var valid_595368 = query.getOrDefault("quotaUser")
  valid_595368 = validateParameter(valid_595368, JString, required = false,
                                 default = nil)
  if valid_595368 != nil:
    section.add "quotaUser", valid_595368
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_595369 = query.getOrDefault("id")
  valid_595369 = validateParameter(valid_595369, JString, required = true,
                                 default = nil)
  if valid_595369 != nil:
    section.add "id", valid_595369
  var valid_595370 = query.getOrDefault("alt")
  valid_595370 = validateParameter(valid_595370, JString, required = false,
                                 default = newJString("json"))
  if valid_595370 != nil:
    section.add "alt", valid_595370
  var valid_595371 = query.getOrDefault("oauth_token")
  valid_595371 = validateParameter(valid_595371, JString, required = false,
                                 default = nil)
  if valid_595371 != nil:
    section.add "oauth_token", valid_595371
  var valid_595372 = query.getOrDefault("userIp")
  valid_595372 = validateParameter(valid_595372, JString, required = false,
                                 default = nil)
  if valid_595372 != nil:
    section.add "userIp", valid_595372
  var valid_595373 = query.getOrDefault("key")
  valid_595373 = validateParameter(valid_595373, JString, required = false,
                                 default = nil)
  if valid_595373 != nil:
    section.add "key", valid_595373
  var valid_595374 = query.getOrDefault("prettyPrint")
  valid_595374 = validateParameter(valid_595374, JBool, required = false,
                                 default = newJBool(true))
  if valid_595374 != nil:
    section.add "prettyPrint", valid_595374
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595376: Call_DfareportingCreativeGroupsPatch_595363;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing creative group. This method supports patch semantics.
  ## 
  let valid = call_595376.validator(path, query, header, formData, body)
  let scheme = call_595376.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595376.url(scheme.get, call_595376.host, call_595376.base,
                         call_595376.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595376, url, valid)

proc call*(call_595377: Call_DfareportingCreativeGroupsPatch_595363;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeGroupsPatch
  ## Updates an existing creative group. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Creative group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595378 = newJObject()
  var query_595379 = newJObject()
  var body_595380 = newJObject()
  add(path_595378, "profileId", newJString(profileId))
  add(query_595379, "fields", newJString(fields))
  add(query_595379, "quotaUser", newJString(quotaUser))
  add(query_595379, "id", newJString(id))
  add(query_595379, "alt", newJString(alt))
  add(query_595379, "oauth_token", newJString(oauthToken))
  add(query_595379, "userIp", newJString(userIp))
  add(query_595379, "key", newJString(key))
  if body != nil:
    body_595380 = body
  add(query_595379, "prettyPrint", newJBool(prettyPrint))
  result = call_595377.call(path_595378, query_595379, nil, nil, body_595380)

var dfareportingCreativeGroupsPatch* = Call_DfareportingCreativeGroupsPatch_595363(
    name: "dfareportingCreativeGroupsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creativeGroups",
    validator: validate_DfareportingCreativeGroupsPatch_595364,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeGroupsPatch_595365,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativeGroupsGet_595381 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativeGroupsGet_595383(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creativeGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativeGroupsGet_595382(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one creative group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595384 = path.getOrDefault("profileId")
  valid_595384 = validateParameter(valid_595384, JString, required = true,
                                 default = nil)
  if valid_595384 != nil:
    section.add "profileId", valid_595384
  var valid_595385 = path.getOrDefault("id")
  valid_595385 = validateParameter(valid_595385, JString, required = true,
                                 default = nil)
  if valid_595385 != nil:
    section.add "id", valid_595385
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595386 = query.getOrDefault("fields")
  valid_595386 = validateParameter(valid_595386, JString, required = false,
                                 default = nil)
  if valid_595386 != nil:
    section.add "fields", valid_595386
  var valid_595387 = query.getOrDefault("quotaUser")
  valid_595387 = validateParameter(valid_595387, JString, required = false,
                                 default = nil)
  if valid_595387 != nil:
    section.add "quotaUser", valid_595387
  var valid_595388 = query.getOrDefault("alt")
  valid_595388 = validateParameter(valid_595388, JString, required = false,
                                 default = newJString("json"))
  if valid_595388 != nil:
    section.add "alt", valid_595388
  var valid_595389 = query.getOrDefault("oauth_token")
  valid_595389 = validateParameter(valid_595389, JString, required = false,
                                 default = nil)
  if valid_595389 != nil:
    section.add "oauth_token", valid_595389
  var valid_595390 = query.getOrDefault("userIp")
  valid_595390 = validateParameter(valid_595390, JString, required = false,
                                 default = nil)
  if valid_595390 != nil:
    section.add "userIp", valid_595390
  var valid_595391 = query.getOrDefault("key")
  valid_595391 = validateParameter(valid_595391, JString, required = false,
                                 default = nil)
  if valid_595391 != nil:
    section.add "key", valid_595391
  var valid_595392 = query.getOrDefault("prettyPrint")
  valid_595392 = validateParameter(valid_595392, JBool, required = false,
                                 default = newJBool(true))
  if valid_595392 != nil:
    section.add "prettyPrint", valid_595392
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595393: Call_DfareportingCreativeGroupsGet_595381; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one creative group by ID.
  ## 
  let valid = call_595393.validator(path, query, header, formData, body)
  let scheme = call_595393.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595393.url(scheme.get, call_595393.host, call_595393.base,
                         call_595393.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595393, url, valid)

proc call*(call_595394: Call_DfareportingCreativeGroupsGet_595381;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativeGroupsGet
  ## Gets one creative group by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Creative group ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595395 = newJObject()
  var query_595396 = newJObject()
  add(path_595395, "profileId", newJString(profileId))
  add(query_595396, "fields", newJString(fields))
  add(query_595396, "quotaUser", newJString(quotaUser))
  add(query_595396, "alt", newJString(alt))
  add(query_595396, "oauth_token", newJString(oauthToken))
  add(query_595396, "userIp", newJString(userIp))
  add(path_595395, "id", newJString(id))
  add(query_595396, "key", newJString(key))
  add(query_595396, "prettyPrint", newJBool(prettyPrint))
  result = call_595394.call(path_595395, query_595396, nil, nil, nil)

var dfareportingCreativeGroupsGet* = Call_DfareportingCreativeGroupsGet_595381(
    name: "dfareportingCreativeGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/creativeGroups/{id}",
    validator: validate_DfareportingCreativeGroupsGet_595382,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativeGroupsGet_595383,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesUpdate_595428 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativesUpdate_595430(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesUpdate_595429(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595431 = path.getOrDefault("profileId")
  valid_595431 = validateParameter(valid_595431, JString, required = true,
                                 default = nil)
  if valid_595431 != nil:
    section.add "profileId", valid_595431
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595432 = query.getOrDefault("fields")
  valid_595432 = validateParameter(valid_595432, JString, required = false,
                                 default = nil)
  if valid_595432 != nil:
    section.add "fields", valid_595432
  var valid_595433 = query.getOrDefault("quotaUser")
  valid_595433 = validateParameter(valid_595433, JString, required = false,
                                 default = nil)
  if valid_595433 != nil:
    section.add "quotaUser", valid_595433
  var valid_595434 = query.getOrDefault("alt")
  valid_595434 = validateParameter(valid_595434, JString, required = false,
                                 default = newJString("json"))
  if valid_595434 != nil:
    section.add "alt", valid_595434
  var valid_595435 = query.getOrDefault("oauth_token")
  valid_595435 = validateParameter(valid_595435, JString, required = false,
                                 default = nil)
  if valid_595435 != nil:
    section.add "oauth_token", valid_595435
  var valid_595436 = query.getOrDefault("userIp")
  valid_595436 = validateParameter(valid_595436, JString, required = false,
                                 default = nil)
  if valid_595436 != nil:
    section.add "userIp", valid_595436
  var valid_595437 = query.getOrDefault("key")
  valid_595437 = validateParameter(valid_595437, JString, required = false,
                                 default = nil)
  if valid_595437 != nil:
    section.add "key", valid_595437
  var valid_595438 = query.getOrDefault("prettyPrint")
  valid_595438 = validateParameter(valid_595438, JBool, required = false,
                                 default = newJBool(true))
  if valid_595438 != nil:
    section.add "prettyPrint", valid_595438
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595440: Call_DfareportingCreativesUpdate_595428; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing creative.
  ## 
  let valid = call_595440.validator(path, query, header, formData, body)
  let scheme = call_595440.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595440.url(scheme.get, call_595440.host, call_595440.base,
                         call_595440.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595440, url, valid)

proc call*(call_595441: Call_DfareportingCreativesUpdate_595428; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativesUpdate
  ## Updates an existing creative.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595442 = newJObject()
  var query_595443 = newJObject()
  var body_595444 = newJObject()
  add(path_595442, "profileId", newJString(profileId))
  add(query_595443, "fields", newJString(fields))
  add(query_595443, "quotaUser", newJString(quotaUser))
  add(query_595443, "alt", newJString(alt))
  add(query_595443, "oauth_token", newJString(oauthToken))
  add(query_595443, "userIp", newJString(userIp))
  add(query_595443, "key", newJString(key))
  if body != nil:
    body_595444 = body
  add(query_595443, "prettyPrint", newJBool(prettyPrint))
  result = call_595441.call(path_595442, query_595443, nil, nil, body_595444)

var dfareportingCreativesUpdate* = Call_DfareportingCreativesUpdate_595428(
    name: "dfareportingCreativesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives",
    validator: validate_DfareportingCreativesUpdate_595429,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativesUpdate_595430,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesInsert_595445 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativesInsert_595447(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesInsert_595446(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new creative.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595448 = path.getOrDefault("profileId")
  valid_595448 = validateParameter(valid_595448, JString, required = true,
                                 default = nil)
  if valid_595448 != nil:
    section.add "profileId", valid_595448
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595449 = query.getOrDefault("fields")
  valid_595449 = validateParameter(valid_595449, JString, required = false,
                                 default = nil)
  if valid_595449 != nil:
    section.add "fields", valid_595449
  var valid_595450 = query.getOrDefault("quotaUser")
  valid_595450 = validateParameter(valid_595450, JString, required = false,
                                 default = nil)
  if valid_595450 != nil:
    section.add "quotaUser", valid_595450
  var valid_595451 = query.getOrDefault("alt")
  valid_595451 = validateParameter(valid_595451, JString, required = false,
                                 default = newJString("json"))
  if valid_595451 != nil:
    section.add "alt", valid_595451
  var valid_595452 = query.getOrDefault("oauth_token")
  valid_595452 = validateParameter(valid_595452, JString, required = false,
                                 default = nil)
  if valid_595452 != nil:
    section.add "oauth_token", valid_595452
  var valid_595453 = query.getOrDefault("userIp")
  valid_595453 = validateParameter(valid_595453, JString, required = false,
                                 default = nil)
  if valid_595453 != nil:
    section.add "userIp", valid_595453
  var valid_595454 = query.getOrDefault("key")
  valid_595454 = validateParameter(valid_595454, JString, required = false,
                                 default = nil)
  if valid_595454 != nil:
    section.add "key", valid_595454
  var valid_595455 = query.getOrDefault("prettyPrint")
  valid_595455 = validateParameter(valid_595455, JBool, required = false,
                                 default = newJBool(true))
  if valid_595455 != nil:
    section.add "prettyPrint", valid_595455
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595457: Call_DfareportingCreativesInsert_595445; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new creative.
  ## 
  let valid = call_595457.validator(path, query, header, formData, body)
  let scheme = call_595457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595457.url(scheme.get, call_595457.host, call_595457.base,
                         call_595457.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595457, url, valid)

proc call*(call_595458: Call_DfareportingCreativesInsert_595445; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativesInsert
  ## Inserts a new creative.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595459 = newJObject()
  var query_595460 = newJObject()
  var body_595461 = newJObject()
  add(path_595459, "profileId", newJString(profileId))
  add(query_595460, "fields", newJString(fields))
  add(query_595460, "quotaUser", newJString(quotaUser))
  add(query_595460, "alt", newJString(alt))
  add(query_595460, "oauth_token", newJString(oauthToken))
  add(query_595460, "userIp", newJString(userIp))
  add(query_595460, "key", newJString(key))
  if body != nil:
    body_595461 = body
  add(query_595460, "prettyPrint", newJBool(prettyPrint))
  result = call_595458.call(path_595459, query_595460, nil, nil, body_595461)

var dfareportingCreativesInsert* = Call_DfareportingCreativesInsert_595445(
    name: "dfareportingCreativesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives",
    validator: validate_DfareportingCreativesInsert_595446,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativesInsert_595447,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesList_595397 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativesList_595399(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesList_595398(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of creatives, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595400 = path.getOrDefault("profileId")
  valid_595400 = validateParameter(valid_595400, JString, required = true,
                                 default = nil)
  if valid_595400 != nil:
    section.add "profileId", valid_595400
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "creative*2015" will return objects with names like "creative June 2015", "creative April 2015", or simply "creative 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "creative" will match objects with name "my creative", "creative 2015", or simply "creative".
  ##   advertiserId: JString
  ##               : Select only creatives with this advertiser ID.
  ##   types: JArray
  ##        : Select only creatives with these creative types.
  ##   sizeIds: JArray
  ##          : Select only creatives with these size IDs.
  ##   active: JBool
  ##         : Select only active creatives. Leave blank to select active and inactive creatives.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   studioCreativeId: JString
  ##                   : Select only creatives corresponding to this Studio creative ID.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   renderingIds: JArray
  ##               : Select only creatives with these rendering IDs.
  ##   archived: JBool
  ##           : Select only archived creatives. Leave blank to select archived and unarchived creatives.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creatives with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   creativeFieldIds: JArray
  ##                   : Select only creatives with these creative field IDs.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   companionCreativeIds: JArray
  ##                       : Select only in-stream video creatives with these companion IDs.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   campaignId: JString
  ##             : Select only creatives with this campaign ID.
  section = newJObject()
  var valid_595401 = query.getOrDefault("fields")
  valid_595401 = validateParameter(valid_595401, JString, required = false,
                                 default = nil)
  if valid_595401 != nil:
    section.add "fields", valid_595401
  var valid_595402 = query.getOrDefault("pageToken")
  valid_595402 = validateParameter(valid_595402, JString, required = false,
                                 default = nil)
  if valid_595402 != nil:
    section.add "pageToken", valid_595402
  var valid_595403 = query.getOrDefault("quotaUser")
  valid_595403 = validateParameter(valid_595403, JString, required = false,
                                 default = nil)
  if valid_595403 != nil:
    section.add "quotaUser", valid_595403
  var valid_595404 = query.getOrDefault("sortField")
  valid_595404 = validateParameter(valid_595404, JString, required = false,
                                 default = newJString("ID"))
  if valid_595404 != nil:
    section.add "sortField", valid_595404
  var valid_595405 = query.getOrDefault("alt")
  valid_595405 = validateParameter(valid_595405, JString, required = false,
                                 default = newJString("json"))
  if valid_595405 != nil:
    section.add "alt", valid_595405
  var valid_595406 = query.getOrDefault("searchString")
  valid_595406 = validateParameter(valid_595406, JString, required = false,
                                 default = nil)
  if valid_595406 != nil:
    section.add "searchString", valid_595406
  var valid_595407 = query.getOrDefault("advertiserId")
  valid_595407 = validateParameter(valid_595407, JString, required = false,
                                 default = nil)
  if valid_595407 != nil:
    section.add "advertiserId", valid_595407
  var valid_595408 = query.getOrDefault("types")
  valid_595408 = validateParameter(valid_595408, JArray, required = false,
                                 default = nil)
  if valid_595408 != nil:
    section.add "types", valid_595408
  var valid_595409 = query.getOrDefault("sizeIds")
  valid_595409 = validateParameter(valid_595409, JArray, required = false,
                                 default = nil)
  if valid_595409 != nil:
    section.add "sizeIds", valid_595409
  var valid_595410 = query.getOrDefault("active")
  valid_595410 = validateParameter(valid_595410, JBool, required = false, default = nil)
  if valid_595410 != nil:
    section.add "active", valid_595410
  var valid_595411 = query.getOrDefault("oauth_token")
  valid_595411 = validateParameter(valid_595411, JString, required = false,
                                 default = nil)
  if valid_595411 != nil:
    section.add "oauth_token", valid_595411
  var valid_595412 = query.getOrDefault("studioCreativeId")
  valid_595412 = validateParameter(valid_595412, JString, required = false,
                                 default = nil)
  if valid_595412 != nil:
    section.add "studioCreativeId", valid_595412
  var valid_595413 = query.getOrDefault("userIp")
  valid_595413 = validateParameter(valid_595413, JString, required = false,
                                 default = nil)
  if valid_595413 != nil:
    section.add "userIp", valid_595413
  var valid_595414 = query.getOrDefault("renderingIds")
  valid_595414 = validateParameter(valid_595414, JArray, required = false,
                                 default = nil)
  if valid_595414 != nil:
    section.add "renderingIds", valid_595414
  var valid_595415 = query.getOrDefault("archived")
  valid_595415 = validateParameter(valid_595415, JBool, required = false, default = nil)
  if valid_595415 != nil:
    section.add "archived", valid_595415
  var valid_595416 = query.getOrDefault("maxResults")
  valid_595416 = validateParameter(valid_595416, JInt, required = false,
                                 default = newJInt(1000))
  if valid_595416 != nil:
    section.add "maxResults", valid_595416
  var valid_595417 = query.getOrDefault("ids")
  valid_595417 = validateParameter(valid_595417, JArray, required = false,
                                 default = nil)
  if valid_595417 != nil:
    section.add "ids", valid_595417
  var valid_595418 = query.getOrDefault("key")
  valid_595418 = validateParameter(valid_595418, JString, required = false,
                                 default = nil)
  if valid_595418 != nil:
    section.add "key", valid_595418
  var valid_595419 = query.getOrDefault("creativeFieldIds")
  valid_595419 = validateParameter(valid_595419, JArray, required = false,
                                 default = nil)
  if valid_595419 != nil:
    section.add "creativeFieldIds", valid_595419
  var valid_595420 = query.getOrDefault("sortOrder")
  valid_595420 = validateParameter(valid_595420, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_595420 != nil:
    section.add "sortOrder", valid_595420
  var valid_595421 = query.getOrDefault("companionCreativeIds")
  valid_595421 = validateParameter(valid_595421, JArray, required = false,
                                 default = nil)
  if valid_595421 != nil:
    section.add "companionCreativeIds", valid_595421
  var valid_595422 = query.getOrDefault("prettyPrint")
  valid_595422 = validateParameter(valid_595422, JBool, required = false,
                                 default = newJBool(true))
  if valid_595422 != nil:
    section.add "prettyPrint", valid_595422
  var valid_595423 = query.getOrDefault("campaignId")
  valid_595423 = validateParameter(valid_595423, JString, required = false,
                                 default = nil)
  if valid_595423 != nil:
    section.add "campaignId", valid_595423
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595424: Call_DfareportingCreativesList_595397; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of creatives, possibly filtered. This method supports paging.
  ## 
  let valid = call_595424.validator(path, query, header, formData, body)
  let scheme = call_595424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595424.url(scheme.get, call_595424.host, call_595424.base,
                         call_595424.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595424, url, valid)

proc call*(call_595425: Call_DfareportingCreativesList_595397; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "ID"; alt: string = "json"; searchString: string = "";
          advertiserId: string = ""; types: JsonNode = nil; sizeIds: JsonNode = nil;
          active: bool = false; oauthToken: string = ""; studioCreativeId: string = "";
          userIp: string = ""; renderingIds: JsonNode = nil; archived: bool = false;
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          creativeFieldIds: JsonNode = nil; sortOrder: string = "ASCENDING";
          companionCreativeIds: JsonNode = nil; prettyPrint: bool = true;
          campaignId: string = ""): Recallable =
  ## dfareportingCreativesList
  ## Retrieves a list of creatives, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "creative*2015" will return objects with names like "creative June 2015", "creative April 2015", or simply "creative 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "creative" will match objects with name "my creative", "creative 2015", or simply "creative".
  ##   advertiserId: string
  ##               : Select only creatives with this advertiser ID.
  ##   types: JArray
  ##        : Select only creatives with these creative types.
  ##   sizeIds: JArray
  ##          : Select only creatives with these size IDs.
  ##   active: bool
  ##         : Select only active creatives. Leave blank to select active and inactive creatives.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   studioCreativeId: string
  ##                   : Select only creatives corresponding to this Studio creative ID.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   renderingIds: JArray
  ##               : Select only creatives with these rendering IDs.
  ##   archived: bool
  ##           : Select only archived creatives. Leave blank to select archived and unarchived creatives.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only creatives with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   creativeFieldIds: JArray
  ##                   : Select only creatives with these creative field IDs.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   companionCreativeIds: JArray
  ##                       : Select only in-stream video creatives with these companion IDs.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   campaignId: string
  ##             : Select only creatives with this campaign ID.
  var path_595426 = newJObject()
  var query_595427 = newJObject()
  add(path_595426, "profileId", newJString(profileId))
  add(query_595427, "fields", newJString(fields))
  add(query_595427, "pageToken", newJString(pageToken))
  add(query_595427, "quotaUser", newJString(quotaUser))
  add(query_595427, "sortField", newJString(sortField))
  add(query_595427, "alt", newJString(alt))
  add(query_595427, "searchString", newJString(searchString))
  add(query_595427, "advertiserId", newJString(advertiserId))
  if types != nil:
    query_595427.add "types", types
  if sizeIds != nil:
    query_595427.add "sizeIds", sizeIds
  add(query_595427, "active", newJBool(active))
  add(query_595427, "oauth_token", newJString(oauthToken))
  add(query_595427, "studioCreativeId", newJString(studioCreativeId))
  add(query_595427, "userIp", newJString(userIp))
  if renderingIds != nil:
    query_595427.add "renderingIds", renderingIds
  add(query_595427, "archived", newJBool(archived))
  add(query_595427, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_595427.add "ids", ids
  add(query_595427, "key", newJString(key))
  if creativeFieldIds != nil:
    query_595427.add "creativeFieldIds", creativeFieldIds
  add(query_595427, "sortOrder", newJString(sortOrder))
  if companionCreativeIds != nil:
    query_595427.add "companionCreativeIds", companionCreativeIds
  add(query_595427, "prettyPrint", newJBool(prettyPrint))
  add(query_595427, "campaignId", newJString(campaignId))
  result = call_595425.call(path_595426, query_595427, nil, nil, nil)

var dfareportingCreativesList* = Call_DfareportingCreativesList_595397(
    name: "dfareportingCreativesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives",
    validator: validate_DfareportingCreativesList_595398,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativesList_595399,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesPatch_595462 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativesPatch_595464(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesPatch_595463(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing creative. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595465 = path.getOrDefault("profileId")
  valid_595465 = validateParameter(valid_595465, JString, required = true,
                                 default = nil)
  if valid_595465 != nil:
    section.add "profileId", valid_595465
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Creative ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595466 = query.getOrDefault("fields")
  valid_595466 = validateParameter(valid_595466, JString, required = false,
                                 default = nil)
  if valid_595466 != nil:
    section.add "fields", valid_595466
  var valid_595467 = query.getOrDefault("quotaUser")
  valid_595467 = validateParameter(valid_595467, JString, required = false,
                                 default = nil)
  if valid_595467 != nil:
    section.add "quotaUser", valid_595467
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_595468 = query.getOrDefault("id")
  valid_595468 = validateParameter(valid_595468, JString, required = true,
                                 default = nil)
  if valid_595468 != nil:
    section.add "id", valid_595468
  var valid_595469 = query.getOrDefault("alt")
  valid_595469 = validateParameter(valid_595469, JString, required = false,
                                 default = newJString("json"))
  if valid_595469 != nil:
    section.add "alt", valid_595469
  var valid_595470 = query.getOrDefault("oauth_token")
  valid_595470 = validateParameter(valid_595470, JString, required = false,
                                 default = nil)
  if valid_595470 != nil:
    section.add "oauth_token", valid_595470
  var valid_595471 = query.getOrDefault("userIp")
  valid_595471 = validateParameter(valid_595471, JString, required = false,
                                 default = nil)
  if valid_595471 != nil:
    section.add "userIp", valid_595471
  var valid_595472 = query.getOrDefault("key")
  valid_595472 = validateParameter(valid_595472, JString, required = false,
                                 default = nil)
  if valid_595472 != nil:
    section.add "key", valid_595472
  var valid_595473 = query.getOrDefault("prettyPrint")
  valid_595473 = validateParameter(valid_595473, JBool, required = false,
                                 default = newJBool(true))
  if valid_595473 != nil:
    section.add "prettyPrint", valid_595473
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595475: Call_DfareportingCreativesPatch_595462; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing creative. This method supports patch semantics.
  ## 
  let valid = call_595475.validator(path, query, header, formData, body)
  let scheme = call_595475.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595475.url(scheme.get, call_595475.host, call_595475.base,
                         call_595475.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595475, url, valid)

proc call*(call_595476: Call_DfareportingCreativesPatch_595462; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingCreativesPatch
  ## Updates an existing creative. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Creative ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595477 = newJObject()
  var query_595478 = newJObject()
  var body_595479 = newJObject()
  add(path_595477, "profileId", newJString(profileId))
  add(query_595478, "fields", newJString(fields))
  add(query_595478, "quotaUser", newJString(quotaUser))
  add(query_595478, "id", newJString(id))
  add(query_595478, "alt", newJString(alt))
  add(query_595478, "oauth_token", newJString(oauthToken))
  add(query_595478, "userIp", newJString(userIp))
  add(query_595478, "key", newJString(key))
  if body != nil:
    body_595479 = body
  add(query_595478, "prettyPrint", newJBool(prettyPrint))
  result = call_595476.call(path_595477, query_595478, nil, nil, body_595479)

var dfareportingCreativesPatch* = Call_DfareportingCreativesPatch_595462(
    name: "dfareportingCreativesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives",
    validator: validate_DfareportingCreativesPatch_595463,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativesPatch_595464,
    schemes: {Scheme.Https})
type
  Call_DfareportingCreativesGet_595480 = ref object of OpenApiRestCall_593437
proc url_DfareportingCreativesGet_595482(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/creatives/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingCreativesGet_595481(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one creative by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Creative ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595483 = path.getOrDefault("profileId")
  valid_595483 = validateParameter(valid_595483, JString, required = true,
                                 default = nil)
  if valid_595483 != nil:
    section.add "profileId", valid_595483
  var valid_595484 = path.getOrDefault("id")
  valid_595484 = validateParameter(valid_595484, JString, required = true,
                                 default = nil)
  if valid_595484 != nil:
    section.add "id", valid_595484
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595485 = query.getOrDefault("fields")
  valid_595485 = validateParameter(valid_595485, JString, required = false,
                                 default = nil)
  if valid_595485 != nil:
    section.add "fields", valid_595485
  var valid_595486 = query.getOrDefault("quotaUser")
  valid_595486 = validateParameter(valid_595486, JString, required = false,
                                 default = nil)
  if valid_595486 != nil:
    section.add "quotaUser", valid_595486
  var valid_595487 = query.getOrDefault("alt")
  valid_595487 = validateParameter(valid_595487, JString, required = false,
                                 default = newJString("json"))
  if valid_595487 != nil:
    section.add "alt", valid_595487
  var valid_595488 = query.getOrDefault("oauth_token")
  valid_595488 = validateParameter(valid_595488, JString, required = false,
                                 default = nil)
  if valid_595488 != nil:
    section.add "oauth_token", valid_595488
  var valid_595489 = query.getOrDefault("userIp")
  valid_595489 = validateParameter(valid_595489, JString, required = false,
                                 default = nil)
  if valid_595489 != nil:
    section.add "userIp", valid_595489
  var valid_595490 = query.getOrDefault("key")
  valid_595490 = validateParameter(valid_595490, JString, required = false,
                                 default = nil)
  if valid_595490 != nil:
    section.add "key", valid_595490
  var valid_595491 = query.getOrDefault("prettyPrint")
  valid_595491 = validateParameter(valid_595491, JBool, required = false,
                                 default = newJBool(true))
  if valid_595491 != nil:
    section.add "prettyPrint", valid_595491
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595492: Call_DfareportingCreativesGet_595480; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one creative by ID.
  ## 
  let valid = call_595492.validator(path, query, header, formData, body)
  let scheme = call_595492.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595492.url(scheme.get, call_595492.host, call_595492.base,
                         call_595492.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595492, url, valid)

proc call*(call_595493: Call_DfareportingCreativesGet_595480; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingCreativesGet
  ## Gets one creative by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Creative ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595494 = newJObject()
  var query_595495 = newJObject()
  add(path_595494, "profileId", newJString(profileId))
  add(query_595495, "fields", newJString(fields))
  add(query_595495, "quotaUser", newJString(quotaUser))
  add(query_595495, "alt", newJString(alt))
  add(query_595495, "oauth_token", newJString(oauthToken))
  add(query_595495, "userIp", newJString(userIp))
  add(path_595494, "id", newJString(id))
  add(query_595495, "key", newJString(key))
  add(query_595495, "prettyPrint", newJBool(prettyPrint))
  result = call_595493.call(path_595494, query_595495, nil, nil, nil)

var dfareportingCreativesGet* = Call_DfareportingCreativesGet_595480(
    name: "dfareportingCreativesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/creatives/{id}",
    validator: validate_DfareportingCreativesGet_595481,
    base: "/dfareporting/v3.2", url: url_DfareportingCreativesGet_595482,
    schemes: {Scheme.Https})
type
  Call_DfareportingDimensionValuesQuery_595496 = ref object of OpenApiRestCall_593437
proc url_DfareportingDimensionValuesQuery_595498(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/dimensionvalues/query")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDimensionValuesQuery_595497(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves list of report dimension values for a list of filters.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595499 = path.getOrDefault("profileId")
  valid_595499 = validateParameter(valid_595499, JString, required = true,
                                 default = nil)
  if valid_595499 != nil:
    section.add "profileId", valid_595499
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595500 = query.getOrDefault("fields")
  valid_595500 = validateParameter(valid_595500, JString, required = false,
                                 default = nil)
  if valid_595500 != nil:
    section.add "fields", valid_595500
  var valid_595501 = query.getOrDefault("pageToken")
  valid_595501 = validateParameter(valid_595501, JString, required = false,
                                 default = nil)
  if valid_595501 != nil:
    section.add "pageToken", valid_595501
  var valid_595502 = query.getOrDefault("quotaUser")
  valid_595502 = validateParameter(valid_595502, JString, required = false,
                                 default = nil)
  if valid_595502 != nil:
    section.add "quotaUser", valid_595502
  var valid_595503 = query.getOrDefault("alt")
  valid_595503 = validateParameter(valid_595503, JString, required = false,
                                 default = newJString("json"))
  if valid_595503 != nil:
    section.add "alt", valid_595503
  var valid_595504 = query.getOrDefault("oauth_token")
  valid_595504 = validateParameter(valid_595504, JString, required = false,
                                 default = nil)
  if valid_595504 != nil:
    section.add "oauth_token", valid_595504
  var valid_595505 = query.getOrDefault("userIp")
  valid_595505 = validateParameter(valid_595505, JString, required = false,
                                 default = nil)
  if valid_595505 != nil:
    section.add "userIp", valid_595505
  var valid_595506 = query.getOrDefault("maxResults")
  valid_595506 = validateParameter(valid_595506, JInt, required = false,
                                 default = newJInt(100))
  if valid_595506 != nil:
    section.add "maxResults", valid_595506
  var valid_595507 = query.getOrDefault("key")
  valid_595507 = validateParameter(valid_595507, JString, required = false,
                                 default = nil)
  if valid_595507 != nil:
    section.add "key", valid_595507
  var valid_595508 = query.getOrDefault("prettyPrint")
  valid_595508 = validateParameter(valid_595508, JBool, required = false,
                                 default = newJBool(true))
  if valid_595508 != nil:
    section.add "prettyPrint", valid_595508
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595510: Call_DfareportingDimensionValuesQuery_595496;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves list of report dimension values for a list of filters.
  ## 
  let valid = call_595510.validator(path, query, header, formData, body)
  let scheme = call_595510.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595510.url(scheme.get, call_595510.host, call_595510.base,
                         call_595510.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595510, url, valid)

proc call*(call_595511: Call_DfareportingDimensionValuesQuery_595496;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; maxResults: int = 100; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingDimensionValuesQuery
  ## Retrieves list of report dimension values for a list of filters.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595512 = newJObject()
  var query_595513 = newJObject()
  var body_595514 = newJObject()
  add(path_595512, "profileId", newJString(profileId))
  add(query_595513, "fields", newJString(fields))
  add(query_595513, "pageToken", newJString(pageToken))
  add(query_595513, "quotaUser", newJString(quotaUser))
  add(query_595513, "alt", newJString(alt))
  add(query_595513, "oauth_token", newJString(oauthToken))
  add(query_595513, "userIp", newJString(userIp))
  add(query_595513, "maxResults", newJInt(maxResults))
  add(query_595513, "key", newJString(key))
  if body != nil:
    body_595514 = body
  add(query_595513, "prettyPrint", newJBool(prettyPrint))
  result = call_595511.call(path_595512, query_595513, nil, nil, body_595514)

var dfareportingDimensionValuesQuery* = Call_DfareportingDimensionValuesQuery_595496(
    name: "dfareportingDimensionValuesQuery", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/dimensionvalues/query",
    validator: validate_DfareportingDimensionValuesQuery_595497,
    base: "/dfareporting/v3.2", url: url_DfareportingDimensionValuesQuery_595498,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySiteContactsList_595515 = ref object of OpenApiRestCall_593437
proc url_DfareportingDirectorySiteContactsList_595517(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySiteContacts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySiteContactsList_595516(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of directory site contacts, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595518 = path.getOrDefault("profileId")
  valid_595518 = validateParameter(valid_595518, JString, required = true,
                                 default = nil)
  if valid_595518 != nil:
    section.add "profileId", valid_595518
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "directory site contact*2015" will return objects with names like "directory site contact June 2015", "directory site contact April 2015", or simply "directory site contact 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "directory site contact" will match objects with name "my directory site contact", "directory site contact 2015", or simply "directory site contact".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only directory site contacts with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   directorySiteIds: JArray
  ##                   : Select only directory site contacts with these directory site IDs. This is a required field.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595519 = query.getOrDefault("fields")
  valid_595519 = validateParameter(valid_595519, JString, required = false,
                                 default = nil)
  if valid_595519 != nil:
    section.add "fields", valid_595519
  var valid_595520 = query.getOrDefault("pageToken")
  valid_595520 = validateParameter(valid_595520, JString, required = false,
                                 default = nil)
  if valid_595520 != nil:
    section.add "pageToken", valid_595520
  var valid_595521 = query.getOrDefault("quotaUser")
  valid_595521 = validateParameter(valid_595521, JString, required = false,
                                 default = nil)
  if valid_595521 != nil:
    section.add "quotaUser", valid_595521
  var valid_595522 = query.getOrDefault("sortField")
  valid_595522 = validateParameter(valid_595522, JString, required = false,
                                 default = newJString("ID"))
  if valid_595522 != nil:
    section.add "sortField", valid_595522
  var valid_595523 = query.getOrDefault("alt")
  valid_595523 = validateParameter(valid_595523, JString, required = false,
                                 default = newJString("json"))
  if valid_595523 != nil:
    section.add "alt", valid_595523
  var valid_595524 = query.getOrDefault("searchString")
  valid_595524 = validateParameter(valid_595524, JString, required = false,
                                 default = nil)
  if valid_595524 != nil:
    section.add "searchString", valid_595524
  var valid_595525 = query.getOrDefault("oauth_token")
  valid_595525 = validateParameter(valid_595525, JString, required = false,
                                 default = nil)
  if valid_595525 != nil:
    section.add "oauth_token", valid_595525
  var valid_595526 = query.getOrDefault("userIp")
  valid_595526 = validateParameter(valid_595526, JString, required = false,
                                 default = nil)
  if valid_595526 != nil:
    section.add "userIp", valid_595526
  var valid_595527 = query.getOrDefault("maxResults")
  valid_595527 = validateParameter(valid_595527, JInt, required = false,
                                 default = newJInt(1000))
  if valid_595527 != nil:
    section.add "maxResults", valid_595527
  var valid_595528 = query.getOrDefault("ids")
  valid_595528 = validateParameter(valid_595528, JArray, required = false,
                                 default = nil)
  if valid_595528 != nil:
    section.add "ids", valid_595528
  var valid_595529 = query.getOrDefault("key")
  valid_595529 = validateParameter(valid_595529, JString, required = false,
                                 default = nil)
  if valid_595529 != nil:
    section.add "key", valid_595529
  var valid_595530 = query.getOrDefault("sortOrder")
  valid_595530 = validateParameter(valid_595530, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_595530 != nil:
    section.add "sortOrder", valid_595530
  var valid_595531 = query.getOrDefault("directorySiteIds")
  valid_595531 = validateParameter(valid_595531, JArray, required = false,
                                 default = nil)
  if valid_595531 != nil:
    section.add "directorySiteIds", valid_595531
  var valid_595532 = query.getOrDefault("prettyPrint")
  valid_595532 = validateParameter(valid_595532, JBool, required = false,
                                 default = newJBool(true))
  if valid_595532 != nil:
    section.add "prettyPrint", valid_595532
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595533: Call_DfareportingDirectorySiteContactsList_595515;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of directory site contacts, possibly filtered. This method supports paging.
  ## 
  let valid = call_595533.validator(path, query, header, formData, body)
  let scheme = call_595533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595533.url(scheme.get, call_595533.host, call_595533.base,
                         call_595533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595533, url, valid)

proc call*(call_595534: Call_DfareportingDirectorySiteContactsList_595515;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; directorySiteIds: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingDirectorySiteContactsList
  ## Retrieves a list of directory site contacts, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name, ID or email. Wildcards (*) are allowed. For example, "directory site contact*2015" will return objects with names like "directory site contact June 2015", "directory site contact April 2015", or simply "directory site contact 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "directory site contact" will match objects with name "my directory site contact", "directory site contact 2015", or simply "directory site contact".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only directory site contacts with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   directorySiteIds: JArray
  ##                   : Select only directory site contacts with these directory site IDs. This is a required field.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595535 = newJObject()
  var query_595536 = newJObject()
  add(path_595535, "profileId", newJString(profileId))
  add(query_595536, "fields", newJString(fields))
  add(query_595536, "pageToken", newJString(pageToken))
  add(query_595536, "quotaUser", newJString(quotaUser))
  add(query_595536, "sortField", newJString(sortField))
  add(query_595536, "alt", newJString(alt))
  add(query_595536, "searchString", newJString(searchString))
  add(query_595536, "oauth_token", newJString(oauthToken))
  add(query_595536, "userIp", newJString(userIp))
  add(query_595536, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_595536.add "ids", ids
  add(query_595536, "key", newJString(key))
  add(query_595536, "sortOrder", newJString(sortOrder))
  if directorySiteIds != nil:
    query_595536.add "directorySiteIds", directorySiteIds
  add(query_595536, "prettyPrint", newJBool(prettyPrint))
  result = call_595534.call(path_595535, query_595536, nil, nil, nil)

var dfareportingDirectorySiteContactsList* = Call_DfareportingDirectorySiteContactsList_595515(
    name: "dfareportingDirectorySiteContactsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/directorySiteContacts",
    validator: validate_DfareportingDirectorySiteContactsList_595516,
    base: "/dfareporting/v3.2", url: url_DfareportingDirectorySiteContactsList_595517,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySiteContactsGet_595537 = ref object of OpenApiRestCall_593437
proc url_DfareportingDirectorySiteContactsGet_595539(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySiteContacts/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySiteContactsGet_595538(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one directory site contact by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Directory site contact ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595540 = path.getOrDefault("profileId")
  valid_595540 = validateParameter(valid_595540, JString, required = true,
                                 default = nil)
  if valid_595540 != nil:
    section.add "profileId", valid_595540
  var valid_595541 = path.getOrDefault("id")
  valid_595541 = validateParameter(valid_595541, JString, required = true,
                                 default = nil)
  if valid_595541 != nil:
    section.add "id", valid_595541
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595542 = query.getOrDefault("fields")
  valid_595542 = validateParameter(valid_595542, JString, required = false,
                                 default = nil)
  if valid_595542 != nil:
    section.add "fields", valid_595542
  var valid_595543 = query.getOrDefault("quotaUser")
  valid_595543 = validateParameter(valid_595543, JString, required = false,
                                 default = nil)
  if valid_595543 != nil:
    section.add "quotaUser", valid_595543
  var valid_595544 = query.getOrDefault("alt")
  valid_595544 = validateParameter(valid_595544, JString, required = false,
                                 default = newJString("json"))
  if valid_595544 != nil:
    section.add "alt", valid_595544
  var valid_595545 = query.getOrDefault("oauth_token")
  valid_595545 = validateParameter(valid_595545, JString, required = false,
                                 default = nil)
  if valid_595545 != nil:
    section.add "oauth_token", valid_595545
  var valid_595546 = query.getOrDefault("userIp")
  valid_595546 = validateParameter(valid_595546, JString, required = false,
                                 default = nil)
  if valid_595546 != nil:
    section.add "userIp", valid_595546
  var valid_595547 = query.getOrDefault("key")
  valid_595547 = validateParameter(valid_595547, JString, required = false,
                                 default = nil)
  if valid_595547 != nil:
    section.add "key", valid_595547
  var valid_595548 = query.getOrDefault("prettyPrint")
  valid_595548 = validateParameter(valid_595548, JBool, required = false,
                                 default = newJBool(true))
  if valid_595548 != nil:
    section.add "prettyPrint", valid_595548
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595549: Call_DfareportingDirectorySiteContactsGet_595537;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one directory site contact by ID.
  ## 
  let valid = call_595549.validator(path, query, header, formData, body)
  let scheme = call_595549.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595549.url(scheme.get, call_595549.host, call_595549.base,
                         call_595549.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595549, url, valid)

proc call*(call_595550: Call_DfareportingDirectorySiteContactsGet_595537;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingDirectorySiteContactsGet
  ## Gets one directory site contact by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Directory site contact ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595551 = newJObject()
  var query_595552 = newJObject()
  add(path_595551, "profileId", newJString(profileId))
  add(query_595552, "fields", newJString(fields))
  add(query_595552, "quotaUser", newJString(quotaUser))
  add(query_595552, "alt", newJString(alt))
  add(query_595552, "oauth_token", newJString(oauthToken))
  add(query_595552, "userIp", newJString(userIp))
  add(path_595551, "id", newJString(id))
  add(query_595552, "key", newJString(key))
  add(query_595552, "prettyPrint", newJBool(prettyPrint))
  result = call_595550.call(path_595551, query_595552, nil, nil, nil)

var dfareportingDirectorySiteContactsGet* = Call_DfareportingDirectorySiteContactsGet_595537(
    name: "dfareportingDirectorySiteContactsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/directorySiteContacts/{id}",
    validator: validate_DfareportingDirectorySiteContactsGet_595538,
    base: "/dfareporting/v3.2", url: url_DfareportingDirectorySiteContactsGet_595539,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySitesInsert_595581 = ref object of OpenApiRestCall_593437
proc url_DfareportingDirectorySitesInsert_595583(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySitesInsert_595582(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new directory site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595584 = path.getOrDefault("profileId")
  valid_595584 = validateParameter(valid_595584, JString, required = true,
                                 default = nil)
  if valid_595584 != nil:
    section.add "profileId", valid_595584
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595585 = query.getOrDefault("fields")
  valid_595585 = validateParameter(valid_595585, JString, required = false,
                                 default = nil)
  if valid_595585 != nil:
    section.add "fields", valid_595585
  var valid_595586 = query.getOrDefault("quotaUser")
  valid_595586 = validateParameter(valid_595586, JString, required = false,
                                 default = nil)
  if valid_595586 != nil:
    section.add "quotaUser", valid_595586
  var valid_595587 = query.getOrDefault("alt")
  valid_595587 = validateParameter(valid_595587, JString, required = false,
                                 default = newJString("json"))
  if valid_595587 != nil:
    section.add "alt", valid_595587
  var valid_595588 = query.getOrDefault("oauth_token")
  valid_595588 = validateParameter(valid_595588, JString, required = false,
                                 default = nil)
  if valid_595588 != nil:
    section.add "oauth_token", valid_595588
  var valid_595589 = query.getOrDefault("userIp")
  valid_595589 = validateParameter(valid_595589, JString, required = false,
                                 default = nil)
  if valid_595589 != nil:
    section.add "userIp", valid_595589
  var valid_595590 = query.getOrDefault("key")
  valid_595590 = validateParameter(valid_595590, JString, required = false,
                                 default = nil)
  if valid_595590 != nil:
    section.add "key", valid_595590
  var valid_595591 = query.getOrDefault("prettyPrint")
  valid_595591 = validateParameter(valid_595591, JBool, required = false,
                                 default = newJBool(true))
  if valid_595591 != nil:
    section.add "prettyPrint", valid_595591
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595593: Call_DfareportingDirectorySitesInsert_595581;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new directory site.
  ## 
  let valid = call_595593.validator(path, query, header, formData, body)
  let scheme = call_595593.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595593.url(scheme.get, call_595593.host, call_595593.base,
                         call_595593.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595593, url, valid)

proc call*(call_595594: Call_DfareportingDirectorySitesInsert_595581;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingDirectorySitesInsert
  ## Inserts a new directory site.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595595 = newJObject()
  var query_595596 = newJObject()
  var body_595597 = newJObject()
  add(path_595595, "profileId", newJString(profileId))
  add(query_595596, "fields", newJString(fields))
  add(query_595596, "quotaUser", newJString(quotaUser))
  add(query_595596, "alt", newJString(alt))
  add(query_595596, "oauth_token", newJString(oauthToken))
  add(query_595596, "userIp", newJString(userIp))
  add(query_595596, "key", newJString(key))
  if body != nil:
    body_595597 = body
  add(query_595596, "prettyPrint", newJBool(prettyPrint))
  result = call_595594.call(path_595595, query_595596, nil, nil, body_595597)

var dfareportingDirectorySitesInsert* = Call_DfareportingDirectorySitesInsert_595581(
    name: "dfareportingDirectorySitesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/directorySites",
    validator: validate_DfareportingDirectorySitesInsert_595582,
    base: "/dfareporting/v3.2", url: url_DfareportingDirectorySitesInsert_595583,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySitesList_595553 = ref object of OpenApiRestCall_593437
proc url_DfareportingDirectorySitesList_595555(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySitesList_595554(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of directory sites, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595556 = path.getOrDefault("profileId")
  valid_595556 = validateParameter(valid_595556, JString, required = true,
                                 default = nil)
  if valid_595556 != nil:
    section.add "profileId", valid_595556
  result.add "path", section
  ## parameters in `query` object:
  ##   dfpNetworkCode: JString
  ##                 : Select only directory sites with this Ad Manager network code.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name, ID or URL. Wildcards (*) are allowed. For example, "directory site*2015" will return objects with names like "directory site June 2015", "directory site April 2015", or simply "directory site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "directory site" will match objects with name "my directory site", "directory site 2015" or simply, "directory site".
  ##   countryId: JString
  ##            : Select only directory sites with this country ID.
  ##   active: JBool
  ##         : Select only active directory sites. Leave blank to retrieve both active and inactive directory sites.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only directory sites with these IDs.
  ##   parentId: JString
  ##           : Select only directory sites with this parent ID.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   acceptsInterstitialPlacements: JBool
  ##                                : This search filter is no longer supported and will have no effect on the results returned.
  ##   acceptsInStreamVideoPlacements: JBool
  ##                                 : This search filter is no longer supported and will have no effect on the results returned.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   acceptsPublisherPaidPlacements: JBool
  ##                                 : Select only directory sites that accept publisher paid placements. This field can be left blank.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595557 = query.getOrDefault("dfpNetworkCode")
  valid_595557 = validateParameter(valid_595557, JString, required = false,
                                 default = nil)
  if valid_595557 != nil:
    section.add "dfpNetworkCode", valid_595557
  var valid_595558 = query.getOrDefault("fields")
  valid_595558 = validateParameter(valid_595558, JString, required = false,
                                 default = nil)
  if valid_595558 != nil:
    section.add "fields", valid_595558
  var valid_595559 = query.getOrDefault("pageToken")
  valid_595559 = validateParameter(valid_595559, JString, required = false,
                                 default = nil)
  if valid_595559 != nil:
    section.add "pageToken", valid_595559
  var valid_595560 = query.getOrDefault("quotaUser")
  valid_595560 = validateParameter(valid_595560, JString, required = false,
                                 default = nil)
  if valid_595560 != nil:
    section.add "quotaUser", valid_595560
  var valid_595561 = query.getOrDefault("sortField")
  valid_595561 = validateParameter(valid_595561, JString, required = false,
                                 default = newJString("ID"))
  if valid_595561 != nil:
    section.add "sortField", valid_595561
  var valid_595562 = query.getOrDefault("alt")
  valid_595562 = validateParameter(valid_595562, JString, required = false,
                                 default = newJString("json"))
  if valid_595562 != nil:
    section.add "alt", valid_595562
  var valid_595563 = query.getOrDefault("searchString")
  valid_595563 = validateParameter(valid_595563, JString, required = false,
                                 default = nil)
  if valid_595563 != nil:
    section.add "searchString", valid_595563
  var valid_595564 = query.getOrDefault("countryId")
  valid_595564 = validateParameter(valid_595564, JString, required = false,
                                 default = nil)
  if valid_595564 != nil:
    section.add "countryId", valid_595564
  var valid_595565 = query.getOrDefault("active")
  valid_595565 = validateParameter(valid_595565, JBool, required = false, default = nil)
  if valid_595565 != nil:
    section.add "active", valid_595565
  var valid_595566 = query.getOrDefault("oauth_token")
  valid_595566 = validateParameter(valid_595566, JString, required = false,
                                 default = nil)
  if valid_595566 != nil:
    section.add "oauth_token", valid_595566
  var valid_595567 = query.getOrDefault("userIp")
  valid_595567 = validateParameter(valid_595567, JString, required = false,
                                 default = nil)
  if valid_595567 != nil:
    section.add "userIp", valid_595567
  var valid_595568 = query.getOrDefault("maxResults")
  valid_595568 = validateParameter(valid_595568, JInt, required = false,
                                 default = newJInt(1000))
  if valid_595568 != nil:
    section.add "maxResults", valid_595568
  var valid_595569 = query.getOrDefault("ids")
  valid_595569 = validateParameter(valid_595569, JArray, required = false,
                                 default = nil)
  if valid_595569 != nil:
    section.add "ids", valid_595569
  var valid_595570 = query.getOrDefault("parentId")
  valid_595570 = validateParameter(valid_595570, JString, required = false,
                                 default = nil)
  if valid_595570 != nil:
    section.add "parentId", valid_595570
  var valid_595571 = query.getOrDefault("key")
  valid_595571 = validateParameter(valid_595571, JString, required = false,
                                 default = nil)
  if valid_595571 != nil:
    section.add "key", valid_595571
  var valid_595572 = query.getOrDefault("acceptsInterstitialPlacements")
  valid_595572 = validateParameter(valid_595572, JBool, required = false, default = nil)
  if valid_595572 != nil:
    section.add "acceptsInterstitialPlacements", valid_595572
  var valid_595573 = query.getOrDefault("acceptsInStreamVideoPlacements")
  valid_595573 = validateParameter(valid_595573, JBool, required = false, default = nil)
  if valid_595573 != nil:
    section.add "acceptsInStreamVideoPlacements", valid_595573
  var valid_595574 = query.getOrDefault("sortOrder")
  valid_595574 = validateParameter(valid_595574, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_595574 != nil:
    section.add "sortOrder", valid_595574
  var valid_595575 = query.getOrDefault("acceptsPublisherPaidPlacements")
  valid_595575 = validateParameter(valid_595575, JBool, required = false, default = nil)
  if valid_595575 != nil:
    section.add "acceptsPublisherPaidPlacements", valid_595575
  var valid_595576 = query.getOrDefault("prettyPrint")
  valid_595576 = validateParameter(valid_595576, JBool, required = false,
                                 default = newJBool(true))
  if valid_595576 != nil:
    section.add "prettyPrint", valid_595576
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595577: Call_DfareportingDirectorySitesList_595553; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of directory sites, possibly filtered. This method supports paging.
  ## 
  let valid = call_595577.validator(path, query, header, formData, body)
  let scheme = call_595577.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595577.url(scheme.get, call_595577.host, call_595577.base,
                         call_595577.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595577, url, valid)

proc call*(call_595578: Call_DfareportingDirectorySitesList_595553;
          profileId: string; dfpNetworkCode: string = ""; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; sortField: string = "ID";
          alt: string = "json"; searchString: string = ""; countryId: string = "";
          active: bool = false; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; parentId: string = "";
          key: string = ""; acceptsInterstitialPlacements: bool = false;
          acceptsInStreamVideoPlacements: bool = false;
          sortOrder: string = "ASCENDING";
          acceptsPublisherPaidPlacements: bool = false; prettyPrint: bool = true): Recallable =
  ## dfareportingDirectorySitesList
  ## Retrieves a list of directory sites, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   dfpNetworkCode: string
  ##                 : Select only directory sites with this Ad Manager network code.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name, ID or URL. Wildcards (*) are allowed. For example, "directory site*2015" will return objects with names like "directory site June 2015", "directory site April 2015", or simply "directory site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "directory site" will match objects with name "my directory site", "directory site 2015" or simply, "directory site".
  ##   countryId: string
  ##            : Select only directory sites with this country ID.
  ##   active: bool
  ##         : Select only active directory sites. Leave blank to retrieve both active and inactive directory sites.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only directory sites with these IDs.
  ##   parentId: string
  ##           : Select only directory sites with this parent ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   acceptsInterstitialPlacements: bool
  ##                                : This search filter is no longer supported and will have no effect on the results returned.
  ##   acceptsInStreamVideoPlacements: bool
  ##                                 : This search filter is no longer supported and will have no effect on the results returned.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   acceptsPublisherPaidPlacements: bool
  ##                                 : Select only directory sites that accept publisher paid placements. This field can be left blank.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595579 = newJObject()
  var query_595580 = newJObject()
  add(path_595579, "profileId", newJString(profileId))
  add(query_595580, "dfpNetworkCode", newJString(dfpNetworkCode))
  add(query_595580, "fields", newJString(fields))
  add(query_595580, "pageToken", newJString(pageToken))
  add(query_595580, "quotaUser", newJString(quotaUser))
  add(query_595580, "sortField", newJString(sortField))
  add(query_595580, "alt", newJString(alt))
  add(query_595580, "searchString", newJString(searchString))
  add(query_595580, "countryId", newJString(countryId))
  add(query_595580, "active", newJBool(active))
  add(query_595580, "oauth_token", newJString(oauthToken))
  add(query_595580, "userIp", newJString(userIp))
  add(query_595580, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_595580.add "ids", ids
  add(query_595580, "parentId", newJString(parentId))
  add(query_595580, "key", newJString(key))
  add(query_595580, "acceptsInterstitialPlacements",
      newJBool(acceptsInterstitialPlacements))
  add(query_595580, "acceptsInStreamVideoPlacements",
      newJBool(acceptsInStreamVideoPlacements))
  add(query_595580, "sortOrder", newJString(sortOrder))
  add(query_595580, "acceptsPublisherPaidPlacements",
      newJBool(acceptsPublisherPaidPlacements))
  add(query_595580, "prettyPrint", newJBool(prettyPrint))
  result = call_595578.call(path_595579, query_595580, nil, nil, nil)

var dfareportingDirectorySitesList* = Call_DfareportingDirectorySitesList_595553(
    name: "dfareportingDirectorySitesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/directorySites",
    validator: validate_DfareportingDirectorySitesList_595554,
    base: "/dfareporting/v3.2", url: url_DfareportingDirectorySitesList_595555,
    schemes: {Scheme.Https})
type
  Call_DfareportingDirectorySitesGet_595598 = ref object of OpenApiRestCall_593437
proc url_DfareportingDirectorySitesGet_595600(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/directorySites/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDirectorySitesGet_595599(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one directory site by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Directory site ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595601 = path.getOrDefault("profileId")
  valid_595601 = validateParameter(valid_595601, JString, required = true,
                                 default = nil)
  if valid_595601 != nil:
    section.add "profileId", valid_595601
  var valid_595602 = path.getOrDefault("id")
  valid_595602 = validateParameter(valid_595602, JString, required = true,
                                 default = nil)
  if valid_595602 != nil:
    section.add "id", valid_595602
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595603 = query.getOrDefault("fields")
  valid_595603 = validateParameter(valid_595603, JString, required = false,
                                 default = nil)
  if valid_595603 != nil:
    section.add "fields", valid_595603
  var valid_595604 = query.getOrDefault("quotaUser")
  valid_595604 = validateParameter(valid_595604, JString, required = false,
                                 default = nil)
  if valid_595604 != nil:
    section.add "quotaUser", valid_595604
  var valid_595605 = query.getOrDefault("alt")
  valid_595605 = validateParameter(valid_595605, JString, required = false,
                                 default = newJString("json"))
  if valid_595605 != nil:
    section.add "alt", valid_595605
  var valid_595606 = query.getOrDefault("oauth_token")
  valid_595606 = validateParameter(valid_595606, JString, required = false,
                                 default = nil)
  if valid_595606 != nil:
    section.add "oauth_token", valid_595606
  var valid_595607 = query.getOrDefault("userIp")
  valid_595607 = validateParameter(valid_595607, JString, required = false,
                                 default = nil)
  if valid_595607 != nil:
    section.add "userIp", valid_595607
  var valid_595608 = query.getOrDefault("key")
  valid_595608 = validateParameter(valid_595608, JString, required = false,
                                 default = nil)
  if valid_595608 != nil:
    section.add "key", valid_595608
  var valid_595609 = query.getOrDefault("prettyPrint")
  valid_595609 = validateParameter(valid_595609, JBool, required = false,
                                 default = newJBool(true))
  if valid_595609 != nil:
    section.add "prettyPrint", valid_595609
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595610: Call_DfareportingDirectorySitesGet_595598; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one directory site by ID.
  ## 
  let valid = call_595610.validator(path, query, header, formData, body)
  let scheme = call_595610.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595610.url(scheme.get, call_595610.host, call_595610.base,
                         call_595610.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595610, url, valid)

proc call*(call_595611: Call_DfareportingDirectorySitesGet_595598;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingDirectorySitesGet
  ## Gets one directory site by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Directory site ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595612 = newJObject()
  var query_595613 = newJObject()
  add(path_595612, "profileId", newJString(profileId))
  add(query_595613, "fields", newJString(fields))
  add(query_595613, "quotaUser", newJString(quotaUser))
  add(query_595613, "alt", newJString(alt))
  add(query_595613, "oauth_token", newJString(oauthToken))
  add(query_595613, "userIp", newJString(userIp))
  add(path_595612, "id", newJString(id))
  add(query_595613, "key", newJString(key))
  add(query_595613, "prettyPrint", newJBool(prettyPrint))
  result = call_595611.call(path_595612, query_595613, nil, nil, nil)

var dfareportingDirectorySitesGet* = Call_DfareportingDirectorySitesGet_595598(
    name: "dfareportingDirectorySitesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/directorySites/{id}",
    validator: validate_DfareportingDirectorySitesGet_595599,
    base: "/dfareporting/v3.2", url: url_DfareportingDirectorySitesGet_595600,
    schemes: {Scheme.Https})
type
  Call_DfareportingDynamicTargetingKeysInsert_595633 = ref object of OpenApiRestCall_593437
proc url_DfareportingDynamicTargetingKeysInsert_595635(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/dynamicTargetingKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDynamicTargetingKeysInsert_595634(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595636 = path.getOrDefault("profileId")
  valid_595636 = validateParameter(valid_595636, JString, required = true,
                                 default = nil)
  if valid_595636 != nil:
    section.add "profileId", valid_595636
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595637 = query.getOrDefault("fields")
  valid_595637 = validateParameter(valid_595637, JString, required = false,
                                 default = nil)
  if valid_595637 != nil:
    section.add "fields", valid_595637
  var valid_595638 = query.getOrDefault("quotaUser")
  valid_595638 = validateParameter(valid_595638, JString, required = false,
                                 default = nil)
  if valid_595638 != nil:
    section.add "quotaUser", valid_595638
  var valid_595639 = query.getOrDefault("alt")
  valid_595639 = validateParameter(valid_595639, JString, required = false,
                                 default = newJString("json"))
  if valid_595639 != nil:
    section.add "alt", valid_595639
  var valid_595640 = query.getOrDefault("oauth_token")
  valid_595640 = validateParameter(valid_595640, JString, required = false,
                                 default = nil)
  if valid_595640 != nil:
    section.add "oauth_token", valid_595640
  var valid_595641 = query.getOrDefault("userIp")
  valid_595641 = validateParameter(valid_595641, JString, required = false,
                                 default = nil)
  if valid_595641 != nil:
    section.add "userIp", valid_595641
  var valid_595642 = query.getOrDefault("key")
  valid_595642 = validateParameter(valid_595642, JString, required = false,
                                 default = nil)
  if valid_595642 != nil:
    section.add "key", valid_595642
  var valid_595643 = query.getOrDefault("prettyPrint")
  valid_595643 = validateParameter(valid_595643, JBool, required = false,
                                 default = newJBool(true))
  if valid_595643 != nil:
    section.add "prettyPrint", valid_595643
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595645: Call_DfareportingDynamicTargetingKeysInsert_595633;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.
  ## 
  let valid = call_595645.validator(path, query, header, formData, body)
  let scheme = call_595645.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595645.url(scheme.get, call_595645.host, call_595645.base,
                         call_595645.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595645, url, valid)

proc call*(call_595646: Call_DfareportingDynamicTargetingKeysInsert_595633;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingDynamicTargetingKeysInsert
  ## Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595647 = newJObject()
  var query_595648 = newJObject()
  var body_595649 = newJObject()
  add(path_595647, "profileId", newJString(profileId))
  add(query_595648, "fields", newJString(fields))
  add(query_595648, "quotaUser", newJString(quotaUser))
  add(query_595648, "alt", newJString(alt))
  add(query_595648, "oauth_token", newJString(oauthToken))
  add(query_595648, "userIp", newJString(userIp))
  add(query_595648, "key", newJString(key))
  if body != nil:
    body_595649 = body
  add(query_595648, "prettyPrint", newJBool(prettyPrint))
  result = call_595646.call(path_595647, query_595648, nil, nil, body_595649)

var dfareportingDynamicTargetingKeysInsert* = Call_DfareportingDynamicTargetingKeysInsert_595633(
    name: "dfareportingDynamicTargetingKeysInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/dynamicTargetingKeys",
    validator: validate_DfareportingDynamicTargetingKeysInsert_595634,
    base: "/dfareporting/v3.2", url: url_DfareportingDynamicTargetingKeysInsert_595635,
    schemes: {Scheme.Https})
type
  Call_DfareportingDynamicTargetingKeysList_595614 = ref object of OpenApiRestCall_593437
proc url_DfareportingDynamicTargetingKeysList_595616(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/dynamicTargetingKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDynamicTargetingKeysList_595615(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of dynamic targeting keys.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595617 = path.getOrDefault("profileId")
  valid_595617 = validateParameter(valid_595617, JString, required = true,
                                 default = nil)
  if valid_595617 != nil:
    section.add "profileId", valid_595617
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   advertiserId: JString
  ##               : Select only dynamic targeting keys whose object has this advertiser ID.
  ##   names: JArray
  ##        : Select only dynamic targeting keys exactly matching these names.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   objectId: JString
  ##           : Select only dynamic targeting keys with this object ID.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   objectType: JString
  ##             : Select only dynamic targeting keys with this object type.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595618 = query.getOrDefault("fields")
  valid_595618 = validateParameter(valid_595618, JString, required = false,
                                 default = nil)
  if valid_595618 != nil:
    section.add "fields", valid_595618
  var valid_595619 = query.getOrDefault("quotaUser")
  valid_595619 = validateParameter(valid_595619, JString, required = false,
                                 default = nil)
  if valid_595619 != nil:
    section.add "quotaUser", valid_595619
  var valid_595620 = query.getOrDefault("alt")
  valid_595620 = validateParameter(valid_595620, JString, required = false,
                                 default = newJString("json"))
  if valid_595620 != nil:
    section.add "alt", valid_595620
  var valid_595621 = query.getOrDefault("advertiserId")
  valid_595621 = validateParameter(valid_595621, JString, required = false,
                                 default = nil)
  if valid_595621 != nil:
    section.add "advertiserId", valid_595621
  var valid_595622 = query.getOrDefault("names")
  valid_595622 = validateParameter(valid_595622, JArray, required = false,
                                 default = nil)
  if valid_595622 != nil:
    section.add "names", valid_595622
  var valid_595623 = query.getOrDefault("oauth_token")
  valid_595623 = validateParameter(valid_595623, JString, required = false,
                                 default = nil)
  if valid_595623 != nil:
    section.add "oauth_token", valid_595623
  var valid_595624 = query.getOrDefault("objectId")
  valid_595624 = validateParameter(valid_595624, JString, required = false,
                                 default = nil)
  if valid_595624 != nil:
    section.add "objectId", valid_595624
  var valid_595625 = query.getOrDefault("userIp")
  valid_595625 = validateParameter(valid_595625, JString, required = false,
                                 default = nil)
  if valid_595625 != nil:
    section.add "userIp", valid_595625
  var valid_595626 = query.getOrDefault("objectType")
  valid_595626 = validateParameter(valid_595626, JString, required = false,
                                 default = newJString("OBJECT_AD"))
  if valid_595626 != nil:
    section.add "objectType", valid_595626
  var valid_595627 = query.getOrDefault("key")
  valid_595627 = validateParameter(valid_595627, JString, required = false,
                                 default = nil)
  if valid_595627 != nil:
    section.add "key", valid_595627
  var valid_595628 = query.getOrDefault("prettyPrint")
  valid_595628 = validateParameter(valid_595628, JBool, required = false,
                                 default = newJBool(true))
  if valid_595628 != nil:
    section.add "prettyPrint", valid_595628
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595629: Call_DfareportingDynamicTargetingKeysList_595614;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of dynamic targeting keys.
  ## 
  let valid = call_595629.validator(path, query, header, formData, body)
  let scheme = call_595629.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595629.url(scheme.get, call_595629.host, call_595629.base,
                         call_595629.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595629, url, valid)

proc call*(call_595630: Call_DfareportingDynamicTargetingKeysList_595614;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; advertiserId: string = ""; names: JsonNode = nil;
          oauthToken: string = ""; objectId: string = ""; userIp: string = "";
          objectType: string = "OBJECT_AD"; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingDynamicTargetingKeysList
  ## Retrieves a list of dynamic targeting keys.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   advertiserId: string
  ##               : Select only dynamic targeting keys whose object has this advertiser ID.
  ##   names: JArray
  ##        : Select only dynamic targeting keys exactly matching these names.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   objectId: string
  ##           : Select only dynamic targeting keys with this object ID.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   objectType: string
  ##             : Select only dynamic targeting keys with this object type.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595631 = newJObject()
  var query_595632 = newJObject()
  add(path_595631, "profileId", newJString(profileId))
  add(query_595632, "fields", newJString(fields))
  add(query_595632, "quotaUser", newJString(quotaUser))
  add(query_595632, "alt", newJString(alt))
  add(query_595632, "advertiserId", newJString(advertiserId))
  if names != nil:
    query_595632.add "names", names
  add(query_595632, "oauth_token", newJString(oauthToken))
  add(query_595632, "objectId", newJString(objectId))
  add(query_595632, "userIp", newJString(userIp))
  add(query_595632, "objectType", newJString(objectType))
  add(query_595632, "key", newJString(key))
  add(query_595632, "prettyPrint", newJBool(prettyPrint))
  result = call_595630.call(path_595631, query_595632, nil, nil, nil)

var dfareportingDynamicTargetingKeysList* = Call_DfareportingDynamicTargetingKeysList_595614(
    name: "dfareportingDynamicTargetingKeysList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/dynamicTargetingKeys",
    validator: validate_DfareportingDynamicTargetingKeysList_595615,
    base: "/dfareporting/v3.2", url: url_DfareportingDynamicTargetingKeysList_595616,
    schemes: {Scheme.Https})
type
  Call_DfareportingDynamicTargetingKeysDelete_595650 = ref object of OpenApiRestCall_593437
proc url_DfareportingDynamicTargetingKeysDelete_595652(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "objectId" in path, "`objectId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/dynamicTargetingKeys/"),
               (kind: VariableSegment, value: "objectId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingDynamicTargetingKeysDelete_595651(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing dynamic targeting key.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   objectId: JString (required)
  ##           : ID of the object of this dynamic targeting key. This is a required field.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595653 = path.getOrDefault("profileId")
  valid_595653 = validateParameter(valid_595653, JString, required = true,
                                 default = nil)
  if valid_595653 != nil:
    section.add "profileId", valid_595653
  var valid_595654 = path.getOrDefault("objectId")
  valid_595654 = validateParameter(valid_595654, JString, required = true,
                                 default = nil)
  if valid_595654 != nil:
    section.add "objectId", valid_595654
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   objectType: JString (required)
  ##             : Type of the object of this dynamic targeting key. This is a required field.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   name: JString (required)
  ##       : Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long and cannot contain commas. All characters are converted to lowercase.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595655 = query.getOrDefault("fields")
  valid_595655 = validateParameter(valid_595655, JString, required = false,
                                 default = nil)
  if valid_595655 != nil:
    section.add "fields", valid_595655
  var valid_595656 = query.getOrDefault("quotaUser")
  valid_595656 = validateParameter(valid_595656, JString, required = false,
                                 default = nil)
  if valid_595656 != nil:
    section.add "quotaUser", valid_595656
  var valid_595657 = query.getOrDefault("alt")
  valid_595657 = validateParameter(valid_595657, JString, required = false,
                                 default = newJString("json"))
  if valid_595657 != nil:
    section.add "alt", valid_595657
  var valid_595658 = query.getOrDefault("oauth_token")
  valid_595658 = validateParameter(valid_595658, JString, required = false,
                                 default = nil)
  if valid_595658 != nil:
    section.add "oauth_token", valid_595658
  var valid_595659 = query.getOrDefault("userIp")
  valid_595659 = validateParameter(valid_595659, JString, required = false,
                                 default = nil)
  if valid_595659 != nil:
    section.add "userIp", valid_595659
  assert query != nil,
        "query argument is necessary due to required `objectType` field"
  var valid_595660 = query.getOrDefault("objectType")
  valid_595660 = validateParameter(valid_595660, JString, required = true,
                                 default = newJString("OBJECT_AD"))
  if valid_595660 != nil:
    section.add "objectType", valid_595660
  var valid_595661 = query.getOrDefault("key")
  valid_595661 = validateParameter(valid_595661, JString, required = false,
                                 default = nil)
  if valid_595661 != nil:
    section.add "key", valid_595661
  var valid_595662 = query.getOrDefault("name")
  valid_595662 = validateParameter(valid_595662, JString, required = true,
                                 default = nil)
  if valid_595662 != nil:
    section.add "name", valid_595662
  var valid_595663 = query.getOrDefault("prettyPrint")
  valid_595663 = validateParameter(valid_595663, JBool, required = false,
                                 default = newJBool(true))
  if valid_595663 != nil:
    section.add "prettyPrint", valid_595663
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595664: Call_DfareportingDynamicTargetingKeysDelete_595650;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing dynamic targeting key.
  ## 
  let valid = call_595664.validator(path, query, header, formData, body)
  let scheme = call_595664.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595664.url(scheme.get, call_595664.host, call_595664.base,
                         call_595664.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595664, url, valid)

proc call*(call_595665: Call_DfareportingDynamicTargetingKeysDelete_595650;
          profileId: string; objectId: string; name: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; objectType: string = "OBJECT_AD"; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingDynamicTargetingKeysDelete
  ## Deletes an existing dynamic targeting key.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   objectId: string (required)
  ##           : ID of the object of this dynamic targeting key. This is a required field.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   objectType: string (required)
  ##             : Type of the object of this dynamic targeting key. This is a required field.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   name: string (required)
  ##       : Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long and cannot contain commas. All characters are converted to lowercase.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595666 = newJObject()
  var query_595667 = newJObject()
  add(path_595666, "profileId", newJString(profileId))
  add(query_595667, "fields", newJString(fields))
  add(query_595667, "quotaUser", newJString(quotaUser))
  add(query_595667, "alt", newJString(alt))
  add(path_595666, "objectId", newJString(objectId))
  add(query_595667, "oauth_token", newJString(oauthToken))
  add(query_595667, "userIp", newJString(userIp))
  add(query_595667, "objectType", newJString(objectType))
  add(query_595667, "key", newJString(key))
  add(query_595667, "name", newJString(name))
  add(query_595667, "prettyPrint", newJBool(prettyPrint))
  result = call_595665.call(path_595666, query_595667, nil, nil, nil)

var dfareportingDynamicTargetingKeysDelete* = Call_DfareportingDynamicTargetingKeysDelete_595650(
    name: "dfareportingDynamicTargetingKeysDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/dynamicTargetingKeys/{objectId}",
    validator: validate_DfareportingDynamicTargetingKeysDelete_595651,
    base: "/dfareporting/v3.2", url: url_DfareportingDynamicTargetingKeysDelete_595652,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsUpdate_595693 = ref object of OpenApiRestCall_593437
proc url_DfareportingEventTagsUpdate_595695(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsUpdate_595694(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing event tag.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595696 = path.getOrDefault("profileId")
  valid_595696 = validateParameter(valid_595696, JString, required = true,
                                 default = nil)
  if valid_595696 != nil:
    section.add "profileId", valid_595696
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595697 = query.getOrDefault("fields")
  valid_595697 = validateParameter(valid_595697, JString, required = false,
                                 default = nil)
  if valid_595697 != nil:
    section.add "fields", valid_595697
  var valid_595698 = query.getOrDefault("quotaUser")
  valid_595698 = validateParameter(valid_595698, JString, required = false,
                                 default = nil)
  if valid_595698 != nil:
    section.add "quotaUser", valid_595698
  var valid_595699 = query.getOrDefault("alt")
  valid_595699 = validateParameter(valid_595699, JString, required = false,
                                 default = newJString("json"))
  if valid_595699 != nil:
    section.add "alt", valid_595699
  var valid_595700 = query.getOrDefault("oauth_token")
  valid_595700 = validateParameter(valid_595700, JString, required = false,
                                 default = nil)
  if valid_595700 != nil:
    section.add "oauth_token", valid_595700
  var valid_595701 = query.getOrDefault("userIp")
  valid_595701 = validateParameter(valid_595701, JString, required = false,
                                 default = nil)
  if valid_595701 != nil:
    section.add "userIp", valid_595701
  var valid_595702 = query.getOrDefault("key")
  valid_595702 = validateParameter(valid_595702, JString, required = false,
                                 default = nil)
  if valid_595702 != nil:
    section.add "key", valid_595702
  var valid_595703 = query.getOrDefault("prettyPrint")
  valid_595703 = validateParameter(valid_595703, JBool, required = false,
                                 default = newJBool(true))
  if valid_595703 != nil:
    section.add "prettyPrint", valid_595703
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595705: Call_DfareportingEventTagsUpdate_595693; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing event tag.
  ## 
  let valid = call_595705.validator(path, query, header, formData, body)
  let scheme = call_595705.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595705.url(scheme.get, call_595705.host, call_595705.base,
                         call_595705.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595705, url, valid)

proc call*(call_595706: Call_DfareportingEventTagsUpdate_595693; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingEventTagsUpdate
  ## Updates an existing event tag.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595707 = newJObject()
  var query_595708 = newJObject()
  var body_595709 = newJObject()
  add(path_595707, "profileId", newJString(profileId))
  add(query_595708, "fields", newJString(fields))
  add(query_595708, "quotaUser", newJString(quotaUser))
  add(query_595708, "alt", newJString(alt))
  add(query_595708, "oauth_token", newJString(oauthToken))
  add(query_595708, "userIp", newJString(userIp))
  add(query_595708, "key", newJString(key))
  if body != nil:
    body_595709 = body
  add(query_595708, "prettyPrint", newJBool(prettyPrint))
  result = call_595706.call(path_595707, query_595708, nil, nil, body_595709)

var dfareportingEventTagsUpdate* = Call_DfareportingEventTagsUpdate_595693(
    name: "dfareportingEventTagsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags",
    validator: validate_DfareportingEventTagsUpdate_595694,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsUpdate_595695,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsInsert_595710 = ref object of OpenApiRestCall_593437
proc url_DfareportingEventTagsInsert_595712(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsInsert_595711(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new event tag.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595713 = path.getOrDefault("profileId")
  valid_595713 = validateParameter(valid_595713, JString, required = true,
                                 default = nil)
  if valid_595713 != nil:
    section.add "profileId", valid_595713
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595714 = query.getOrDefault("fields")
  valid_595714 = validateParameter(valid_595714, JString, required = false,
                                 default = nil)
  if valid_595714 != nil:
    section.add "fields", valid_595714
  var valid_595715 = query.getOrDefault("quotaUser")
  valid_595715 = validateParameter(valid_595715, JString, required = false,
                                 default = nil)
  if valid_595715 != nil:
    section.add "quotaUser", valid_595715
  var valid_595716 = query.getOrDefault("alt")
  valid_595716 = validateParameter(valid_595716, JString, required = false,
                                 default = newJString("json"))
  if valid_595716 != nil:
    section.add "alt", valid_595716
  var valid_595717 = query.getOrDefault("oauth_token")
  valid_595717 = validateParameter(valid_595717, JString, required = false,
                                 default = nil)
  if valid_595717 != nil:
    section.add "oauth_token", valid_595717
  var valid_595718 = query.getOrDefault("userIp")
  valid_595718 = validateParameter(valid_595718, JString, required = false,
                                 default = nil)
  if valid_595718 != nil:
    section.add "userIp", valid_595718
  var valid_595719 = query.getOrDefault("key")
  valid_595719 = validateParameter(valid_595719, JString, required = false,
                                 default = nil)
  if valid_595719 != nil:
    section.add "key", valid_595719
  var valid_595720 = query.getOrDefault("prettyPrint")
  valid_595720 = validateParameter(valid_595720, JBool, required = false,
                                 default = newJBool(true))
  if valid_595720 != nil:
    section.add "prettyPrint", valid_595720
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595722: Call_DfareportingEventTagsInsert_595710; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new event tag.
  ## 
  let valid = call_595722.validator(path, query, header, formData, body)
  let scheme = call_595722.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595722.url(scheme.get, call_595722.host, call_595722.base,
                         call_595722.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595722, url, valid)

proc call*(call_595723: Call_DfareportingEventTagsInsert_595710; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingEventTagsInsert
  ## Inserts a new event tag.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595724 = newJObject()
  var query_595725 = newJObject()
  var body_595726 = newJObject()
  add(path_595724, "profileId", newJString(profileId))
  add(query_595725, "fields", newJString(fields))
  add(query_595725, "quotaUser", newJString(quotaUser))
  add(query_595725, "alt", newJString(alt))
  add(query_595725, "oauth_token", newJString(oauthToken))
  add(query_595725, "userIp", newJString(userIp))
  add(query_595725, "key", newJString(key))
  if body != nil:
    body_595726 = body
  add(query_595725, "prettyPrint", newJBool(prettyPrint))
  result = call_595723.call(path_595724, query_595725, nil, nil, body_595726)

var dfareportingEventTagsInsert* = Call_DfareportingEventTagsInsert_595710(
    name: "dfareportingEventTagsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags",
    validator: validate_DfareportingEventTagsInsert_595711,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsInsert_595712,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsList_595668 = ref object of OpenApiRestCall_593437
proc url_DfareportingEventTagsList_595670(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsList_595669(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of event tags, possibly filtered.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595671 = path.getOrDefault("profileId")
  valid_595671 = validateParameter(valid_595671, JString, required = true,
                                 default = nil)
  if valid_595671 != nil:
    section.add "profileId", valid_595671
  result.add "path", section
  ## parameters in `query` object:
  ##   enabled: JBool
  ##          : Select only enabled event tags. What is considered enabled or disabled depends on the definitionsOnly parameter. When definitionsOnly is set to true, only the specified advertiser or campaign's event tags' enabledByDefault field is examined. When definitionsOnly is set to false, the specified ad or specified campaign's parent advertiser's or parent campaign's event tags' enabledByDefault and status fields are examined as well.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   definitionsOnly: JBool
  ##                  : Examine only the specified campaign or advertiser's event tags for matching selector criteria. When set to false, the parent advertiser and parent campaign of the specified ad or campaign is examined as well. In addition, when set to false, the status field is examined as well, along with the enabledByDefault field. This parameter can not be set to true when adId is specified as ads do not define their own even tags.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "eventtag*2015" will return objects with names like "eventtag June 2015", "eventtag April 2015", or simply "eventtag 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "eventtag" will match objects with name "my eventtag", "eventtag 2015", or simply "eventtag".
  ##   advertiserId: JString
  ##               : Select only event tags that belong to this advertiser.
  ##   eventTagTypes: JArray
  ##                : Select only event tags with the specified event tag types. Event tag types can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   adId: JString
  ##       : Select only event tags that belong to this ad.
  ##   ids: JArray
  ##      : Select only event tags with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   campaignId: JString
  ##             : Select only event tags that belong to this campaign.
  section = newJObject()
  var valid_595672 = query.getOrDefault("enabled")
  valid_595672 = validateParameter(valid_595672, JBool, required = false, default = nil)
  if valid_595672 != nil:
    section.add "enabled", valid_595672
  var valid_595673 = query.getOrDefault("fields")
  valid_595673 = validateParameter(valid_595673, JString, required = false,
                                 default = nil)
  if valid_595673 != nil:
    section.add "fields", valid_595673
  var valid_595674 = query.getOrDefault("quotaUser")
  valid_595674 = validateParameter(valid_595674, JString, required = false,
                                 default = nil)
  if valid_595674 != nil:
    section.add "quotaUser", valid_595674
  var valid_595675 = query.getOrDefault("sortField")
  valid_595675 = validateParameter(valid_595675, JString, required = false,
                                 default = newJString("ID"))
  if valid_595675 != nil:
    section.add "sortField", valid_595675
  var valid_595676 = query.getOrDefault("alt")
  valid_595676 = validateParameter(valid_595676, JString, required = false,
                                 default = newJString("json"))
  if valid_595676 != nil:
    section.add "alt", valid_595676
  var valid_595677 = query.getOrDefault("definitionsOnly")
  valid_595677 = validateParameter(valid_595677, JBool, required = false, default = nil)
  if valid_595677 != nil:
    section.add "definitionsOnly", valid_595677
  var valid_595678 = query.getOrDefault("searchString")
  valid_595678 = validateParameter(valid_595678, JString, required = false,
                                 default = nil)
  if valid_595678 != nil:
    section.add "searchString", valid_595678
  var valid_595679 = query.getOrDefault("advertiserId")
  valid_595679 = validateParameter(valid_595679, JString, required = false,
                                 default = nil)
  if valid_595679 != nil:
    section.add "advertiserId", valid_595679
  var valid_595680 = query.getOrDefault("eventTagTypes")
  valid_595680 = validateParameter(valid_595680, JArray, required = false,
                                 default = nil)
  if valid_595680 != nil:
    section.add "eventTagTypes", valid_595680
  var valid_595681 = query.getOrDefault("oauth_token")
  valid_595681 = validateParameter(valid_595681, JString, required = false,
                                 default = nil)
  if valid_595681 != nil:
    section.add "oauth_token", valid_595681
  var valid_595682 = query.getOrDefault("userIp")
  valid_595682 = validateParameter(valid_595682, JString, required = false,
                                 default = nil)
  if valid_595682 != nil:
    section.add "userIp", valid_595682
  var valid_595683 = query.getOrDefault("adId")
  valid_595683 = validateParameter(valid_595683, JString, required = false,
                                 default = nil)
  if valid_595683 != nil:
    section.add "adId", valid_595683
  var valid_595684 = query.getOrDefault("ids")
  valid_595684 = validateParameter(valid_595684, JArray, required = false,
                                 default = nil)
  if valid_595684 != nil:
    section.add "ids", valid_595684
  var valid_595685 = query.getOrDefault("key")
  valid_595685 = validateParameter(valid_595685, JString, required = false,
                                 default = nil)
  if valid_595685 != nil:
    section.add "key", valid_595685
  var valid_595686 = query.getOrDefault("sortOrder")
  valid_595686 = validateParameter(valid_595686, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_595686 != nil:
    section.add "sortOrder", valid_595686
  var valid_595687 = query.getOrDefault("prettyPrint")
  valid_595687 = validateParameter(valid_595687, JBool, required = false,
                                 default = newJBool(true))
  if valid_595687 != nil:
    section.add "prettyPrint", valid_595687
  var valid_595688 = query.getOrDefault("campaignId")
  valid_595688 = validateParameter(valid_595688, JString, required = false,
                                 default = nil)
  if valid_595688 != nil:
    section.add "campaignId", valid_595688
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595689: Call_DfareportingEventTagsList_595668; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of event tags, possibly filtered.
  ## 
  let valid = call_595689.validator(path, query, header, formData, body)
  let scheme = call_595689.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595689.url(scheme.get, call_595689.host, call_595689.base,
                         call_595689.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595689, url, valid)

proc call*(call_595690: Call_DfareportingEventTagsList_595668; profileId: string;
          enabled: bool = false; fields: string = ""; quotaUser: string = "";
          sortField: string = "ID"; alt: string = "json"; definitionsOnly: bool = false;
          searchString: string = ""; advertiserId: string = "";
          eventTagTypes: JsonNode = nil; oauthToken: string = ""; userIp: string = "";
          adId: string = ""; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true;
          campaignId: string = ""): Recallable =
  ## dfareportingEventTagsList
  ## Retrieves a list of event tags, possibly filtered.
  ##   enabled: bool
  ##          : Select only enabled event tags. What is considered enabled or disabled depends on the definitionsOnly parameter. When definitionsOnly is set to true, only the specified advertiser or campaign's event tags' enabledByDefault field is examined. When definitionsOnly is set to false, the specified ad or specified campaign's parent advertiser's or parent campaign's event tags' enabledByDefault and status fields are examined as well.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   definitionsOnly: bool
  ##                  : Examine only the specified campaign or advertiser's event tags for matching selector criteria. When set to false, the parent advertiser and parent campaign of the specified ad or campaign is examined as well. In addition, when set to false, the status field is examined as well, along with the enabledByDefault field. This parameter can not be set to true when adId is specified as ads do not define their own even tags.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "eventtag*2015" will return objects with names like "eventtag June 2015", "eventtag April 2015", or simply "eventtag 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "eventtag" will match objects with name "my eventtag", "eventtag 2015", or simply "eventtag".
  ##   advertiserId: string
  ##               : Select only event tags that belong to this advertiser.
  ##   eventTagTypes: JArray
  ##                : Select only event tags with the specified event tag types. Event tag types can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   adId: string
  ##       : Select only event tags that belong to this ad.
  ##   ids: JArray
  ##      : Select only event tags with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   campaignId: string
  ##             : Select only event tags that belong to this campaign.
  var path_595691 = newJObject()
  var query_595692 = newJObject()
  add(query_595692, "enabled", newJBool(enabled))
  add(path_595691, "profileId", newJString(profileId))
  add(query_595692, "fields", newJString(fields))
  add(query_595692, "quotaUser", newJString(quotaUser))
  add(query_595692, "sortField", newJString(sortField))
  add(query_595692, "alt", newJString(alt))
  add(query_595692, "definitionsOnly", newJBool(definitionsOnly))
  add(query_595692, "searchString", newJString(searchString))
  add(query_595692, "advertiserId", newJString(advertiserId))
  if eventTagTypes != nil:
    query_595692.add "eventTagTypes", eventTagTypes
  add(query_595692, "oauth_token", newJString(oauthToken))
  add(query_595692, "userIp", newJString(userIp))
  add(query_595692, "adId", newJString(adId))
  if ids != nil:
    query_595692.add "ids", ids
  add(query_595692, "key", newJString(key))
  add(query_595692, "sortOrder", newJString(sortOrder))
  add(query_595692, "prettyPrint", newJBool(prettyPrint))
  add(query_595692, "campaignId", newJString(campaignId))
  result = call_595690.call(path_595691, query_595692, nil, nil, nil)

var dfareportingEventTagsList* = Call_DfareportingEventTagsList_595668(
    name: "dfareportingEventTagsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags",
    validator: validate_DfareportingEventTagsList_595669,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsList_595670,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsPatch_595727 = ref object of OpenApiRestCall_593437
proc url_DfareportingEventTagsPatch_595729(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsPatch_595728(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing event tag. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595730 = path.getOrDefault("profileId")
  valid_595730 = validateParameter(valid_595730, JString, required = true,
                                 default = nil)
  if valid_595730 != nil:
    section.add "profileId", valid_595730
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Event tag ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595731 = query.getOrDefault("fields")
  valid_595731 = validateParameter(valid_595731, JString, required = false,
                                 default = nil)
  if valid_595731 != nil:
    section.add "fields", valid_595731
  var valid_595732 = query.getOrDefault("quotaUser")
  valid_595732 = validateParameter(valid_595732, JString, required = false,
                                 default = nil)
  if valid_595732 != nil:
    section.add "quotaUser", valid_595732
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_595733 = query.getOrDefault("id")
  valid_595733 = validateParameter(valid_595733, JString, required = true,
                                 default = nil)
  if valid_595733 != nil:
    section.add "id", valid_595733
  var valid_595734 = query.getOrDefault("alt")
  valid_595734 = validateParameter(valid_595734, JString, required = false,
                                 default = newJString("json"))
  if valid_595734 != nil:
    section.add "alt", valid_595734
  var valid_595735 = query.getOrDefault("oauth_token")
  valid_595735 = validateParameter(valid_595735, JString, required = false,
                                 default = nil)
  if valid_595735 != nil:
    section.add "oauth_token", valid_595735
  var valid_595736 = query.getOrDefault("userIp")
  valid_595736 = validateParameter(valid_595736, JString, required = false,
                                 default = nil)
  if valid_595736 != nil:
    section.add "userIp", valid_595736
  var valid_595737 = query.getOrDefault("key")
  valid_595737 = validateParameter(valid_595737, JString, required = false,
                                 default = nil)
  if valid_595737 != nil:
    section.add "key", valid_595737
  var valid_595738 = query.getOrDefault("prettyPrint")
  valid_595738 = validateParameter(valid_595738, JBool, required = false,
                                 default = newJBool(true))
  if valid_595738 != nil:
    section.add "prettyPrint", valid_595738
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595740: Call_DfareportingEventTagsPatch_595727; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing event tag. This method supports patch semantics.
  ## 
  let valid = call_595740.validator(path, query, header, formData, body)
  let scheme = call_595740.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595740.url(scheme.get, call_595740.host, call_595740.base,
                         call_595740.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595740, url, valid)

proc call*(call_595741: Call_DfareportingEventTagsPatch_595727; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingEventTagsPatch
  ## Updates an existing event tag. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Event tag ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595742 = newJObject()
  var query_595743 = newJObject()
  var body_595744 = newJObject()
  add(path_595742, "profileId", newJString(profileId))
  add(query_595743, "fields", newJString(fields))
  add(query_595743, "quotaUser", newJString(quotaUser))
  add(query_595743, "id", newJString(id))
  add(query_595743, "alt", newJString(alt))
  add(query_595743, "oauth_token", newJString(oauthToken))
  add(query_595743, "userIp", newJString(userIp))
  add(query_595743, "key", newJString(key))
  if body != nil:
    body_595744 = body
  add(query_595743, "prettyPrint", newJBool(prettyPrint))
  result = call_595741.call(path_595742, query_595743, nil, nil, body_595744)

var dfareportingEventTagsPatch* = Call_DfareportingEventTagsPatch_595727(
    name: "dfareportingEventTagsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags",
    validator: validate_DfareportingEventTagsPatch_595728,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsPatch_595729,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsGet_595745 = ref object of OpenApiRestCall_593437
proc url_DfareportingEventTagsGet_595747(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsGet_595746(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one event tag by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Event tag ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595748 = path.getOrDefault("profileId")
  valid_595748 = validateParameter(valid_595748, JString, required = true,
                                 default = nil)
  if valid_595748 != nil:
    section.add "profileId", valid_595748
  var valid_595749 = path.getOrDefault("id")
  valid_595749 = validateParameter(valid_595749, JString, required = true,
                                 default = nil)
  if valid_595749 != nil:
    section.add "id", valid_595749
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595750 = query.getOrDefault("fields")
  valid_595750 = validateParameter(valid_595750, JString, required = false,
                                 default = nil)
  if valid_595750 != nil:
    section.add "fields", valid_595750
  var valid_595751 = query.getOrDefault("quotaUser")
  valid_595751 = validateParameter(valid_595751, JString, required = false,
                                 default = nil)
  if valid_595751 != nil:
    section.add "quotaUser", valid_595751
  var valid_595752 = query.getOrDefault("alt")
  valid_595752 = validateParameter(valid_595752, JString, required = false,
                                 default = newJString("json"))
  if valid_595752 != nil:
    section.add "alt", valid_595752
  var valid_595753 = query.getOrDefault("oauth_token")
  valid_595753 = validateParameter(valid_595753, JString, required = false,
                                 default = nil)
  if valid_595753 != nil:
    section.add "oauth_token", valid_595753
  var valid_595754 = query.getOrDefault("userIp")
  valid_595754 = validateParameter(valid_595754, JString, required = false,
                                 default = nil)
  if valid_595754 != nil:
    section.add "userIp", valid_595754
  var valid_595755 = query.getOrDefault("key")
  valid_595755 = validateParameter(valid_595755, JString, required = false,
                                 default = nil)
  if valid_595755 != nil:
    section.add "key", valid_595755
  var valid_595756 = query.getOrDefault("prettyPrint")
  valid_595756 = validateParameter(valid_595756, JBool, required = false,
                                 default = newJBool(true))
  if valid_595756 != nil:
    section.add "prettyPrint", valid_595756
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595757: Call_DfareportingEventTagsGet_595745; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one event tag by ID.
  ## 
  let valid = call_595757.validator(path, query, header, formData, body)
  let scheme = call_595757.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595757.url(scheme.get, call_595757.host, call_595757.base,
                         call_595757.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595757, url, valid)

proc call*(call_595758: Call_DfareportingEventTagsGet_595745; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingEventTagsGet
  ## Gets one event tag by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Event tag ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595759 = newJObject()
  var query_595760 = newJObject()
  add(path_595759, "profileId", newJString(profileId))
  add(query_595760, "fields", newJString(fields))
  add(query_595760, "quotaUser", newJString(quotaUser))
  add(query_595760, "alt", newJString(alt))
  add(query_595760, "oauth_token", newJString(oauthToken))
  add(query_595760, "userIp", newJString(userIp))
  add(path_595759, "id", newJString(id))
  add(query_595760, "key", newJString(key))
  add(query_595760, "prettyPrint", newJBool(prettyPrint))
  result = call_595758.call(path_595759, query_595760, nil, nil, nil)

var dfareportingEventTagsGet* = Call_DfareportingEventTagsGet_595745(
    name: "dfareportingEventTagsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags/{id}",
    validator: validate_DfareportingEventTagsGet_595746,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsGet_595747,
    schemes: {Scheme.Https})
type
  Call_DfareportingEventTagsDelete_595761 = ref object of OpenApiRestCall_593437
proc url_DfareportingEventTagsDelete_595763(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/eventTags/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingEventTagsDelete_595762(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing event tag.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Event tag ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595764 = path.getOrDefault("profileId")
  valid_595764 = validateParameter(valid_595764, JString, required = true,
                                 default = nil)
  if valid_595764 != nil:
    section.add "profileId", valid_595764
  var valid_595765 = path.getOrDefault("id")
  valid_595765 = validateParameter(valid_595765, JString, required = true,
                                 default = nil)
  if valid_595765 != nil:
    section.add "id", valid_595765
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595766 = query.getOrDefault("fields")
  valid_595766 = validateParameter(valid_595766, JString, required = false,
                                 default = nil)
  if valid_595766 != nil:
    section.add "fields", valid_595766
  var valid_595767 = query.getOrDefault("quotaUser")
  valid_595767 = validateParameter(valid_595767, JString, required = false,
                                 default = nil)
  if valid_595767 != nil:
    section.add "quotaUser", valid_595767
  var valid_595768 = query.getOrDefault("alt")
  valid_595768 = validateParameter(valid_595768, JString, required = false,
                                 default = newJString("json"))
  if valid_595768 != nil:
    section.add "alt", valid_595768
  var valid_595769 = query.getOrDefault("oauth_token")
  valid_595769 = validateParameter(valid_595769, JString, required = false,
                                 default = nil)
  if valid_595769 != nil:
    section.add "oauth_token", valid_595769
  var valid_595770 = query.getOrDefault("userIp")
  valid_595770 = validateParameter(valid_595770, JString, required = false,
                                 default = nil)
  if valid_595770 != nil:
    section.add "userIp", valid_595770
  var valid_595771 = query.getOrDefault("key")
  valid_595771 = validateParameter(valid_595771, JString, required = false,
                                 default = nil)
  if valid_595771 != nil:
    section.add "key", valid_595771
  var valid_595772 = query.getOrDefault("prettyPrint")
  valid_595772 = validateParameter(valid_595772, JBool, required = false,
                                 default = newJBool(true))
  if valid_595772 != nil:
    section.add "prettyPrint", valid_595772
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595773: Call_DfareportingEventTagsDelete_595761; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing event tag.
  ## 
  let valid = call_595773.validator(path, query, header, formData, body)
  let scheme = call_595773.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595773.url(scheme.get, call_595773.host, call_595773.base,
                         call_595773.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595773, url, valid)

proc call*(call_595774: Call_DfareportingEventTagsDelete_595761; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingEventTagsDelete
  ## Deletes an existing event tag.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Event tag ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595775 = newJObject()
  var query_595776 = newJObject()
  add(path_595775, "profileId", newJString(profileId))
  add(query_595776, "fields", newJString(fields))
  add(query_595776, "quotaUser", newJString(quotaUser))
  add(query_595776, "alt", newJString(alt))
  add(query_595776, "oauth_token", newJString(oauthToken))
  add(query_595776, "userIp", newJString(userIp))
  add(path_595775, "id", newJString(id))
  add(query_595776, "key", newJString(key))
  add(query_595776, "prettyPrint", newJBool(prettyPrint))
  result = call_595774.call(path_595775, query_595776, nil, nil, nil)

var dfareportingEventTagsDelete* = Call_DfareportingEventTagsDelete_595761(
    name: "dfareportingEventTagsDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/eventTags/{id}",
    validator: validate_DfareportingEventTagsDelete_595762,
    base: "/dfareporting/v3.2", url: url_DfareportingEventTagsDelete_595763,
    schemes: {Scheme.Https})
type
  Call_DfareportingFilesList_595777 = ref object of OpenApiRestCall_593437
proc url_DfareportingFilesList_595779(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/files")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFilesList_595778(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists files for a user profile.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595780 = path.getOrDefault("profileId")
  valid_595780 = validateParameter(valid_595780, JString, required = true,
                                 default = nil)
  if valid_595780 != nil:
    section.add "profileId", valid_595780
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : The field by which to sort the list.
  ##   scope: JString
  ##        : The scope that defines which results are returned.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595781 = query.getOrDefault("fields")
  valid_595781 = validateParameter(valid_595781, JString, required = false,
                                 default = nil)
  if valid_595781 != nil:
    section.add "fields", valid_595781
  var valid_595782 = query.getOrDefault("pageToken")
  valid_595782 = validateParameter(valid_595782, JString, required = false,
                                 default = nil)
  if valid_595782 != nil:
    section.add "pageToken", valid_595782
  var valid_595783 = query.getOrDefault("quotaUser")
  valid_595783 = validateParameter(valid_595783, JString, required = false,
                                 default = nil)
  if valid_595783 != nil:
    section.add "quotaUser", valid_595783
  var valid_595784 = query.getOrDefault("sortField")
  valid_595784 = validateParameter(valid_595784, JString, required = false,
                                 default = newJString("LAST_MODIFIED_TIME"))
  if valid_595784 != nil:
    section.add "sortField", valid_595784
  var valid_595785 = query.getOrDefault("scope")
  valid_595785 = validateParameter(valid_595785, JString, required = false,
                                 default = newJString("MINE"))
  if valid_595785 != nil:
    section.add "scope", valid_595785
  var valid_595786 = query.getOrDefault("alt")
  valid_595786 = validateParameter(valid_595786, JString, required = false,
                                 default = newJString("json"))
  if valid_595786 != nil:
    section.add "alt", valid_595786
  var valid_595787 = query.getOrDefault("oauth_token")
  valid_595787 = validateParameter(valid_595787, JString, required = false,
                                 default = nil)
  if valid_595787 != nil:
    section.add "oauth_token", valid_595787
  var valid_595788 = query.getOrDefault("userIp")
  valid_595788 = validateParameter(valid_595788, JString, required = false,
                                 default = nil)
  if valid_595788 != nil:
    section.add "userIp", valid_595788
  var valid_595789 = query.getOrDefault("maxResults")
  valid_595789 = validateParameter(valid_595789, JInt, required = false,
                                 default = newJInt(10))
  if valid_595789 != nil:
    section.add "maxResults", valid_595789
  var valid_595790 = query.getOrDefault("key")
  valid_595790 = validateParameter(valid_595790, JString, required = false,
                                 default = nil)
  if valid_595790 != nil:
    section.add "key", valid_595790
  var valid_595791 = query.getOrDefault("sortOrder")
  valid_595791 = validateParameter(valid_595791, JString, required = false,
                                 default = newJString("DESCENDING"))
  if valid_595791 != nil:
    section.add "sortOrder", valid_595791
  var valid_595792 = query.getOrDefault("prettyPrint")
  valid_595792 = validateParameter(valid_595792, JBool, required = false,
                                 default = newJBool(true))
  if valid_595792 != nil:
    section.add "prettyPrint", valid_595792
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595793: Call_DfareportingFilesList_595777; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists files for a user profile.
  ## 
  let valid = call_595793.validator(path, query, header, formData, body)
  let scheme = call_595793.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595793.url(scheme.get, call_595793.host, call_595793.base,
                         call_595793.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595793, url, valid)

proc call*(call_595794: Call_DfareportingFilesList_595777; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "LAST_MODIFIED_TIME"; scope: string = "MINE";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 10; key: string = ""; sortOrder: string = "DESCENDING";
          prettyPrint: bool = true): Recallable =
  ## dfareportingFilesList
  ## Lists files for a user profile.
  ##   profileId: string (required)
  ##            : The DFA profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : The field by which to sort the list.
  ##   scope: string
  ##        : The scope that defines which results are returned.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595795 = newJObject()
  var query_595796 = newJObject()
  add(path_595795, "profileId", newJString(profileId))
  add(query_595796, "fields", newJString(fields))
  add(query_595796, "pageToken", newJString(pageToken))
  add(query_595796, "quotaUser", newJString(quotaUser))
  add(query_595796, "sortField", newJString(sortField))
  add(query_595796, "scope", newJString(scope))
  add(query_595796, "alt", newJString(alt))
  add(query_595796, "oauth_token", newJString(oauthToken))
  add(query_595796, "userIp", newJString(userIp))
  add(query_595796, "maxResults", newJInt(maxResults))
  add(query_595796, "key", newJString(key))
  add(query_595796, "sortOrder", newJString(sortOrder))
  add(query_595796, "prettyPrint", newJBool(prettyPrint))
  result = call_595794.call(path_595795, query_595796, nil, nil, nil)

var dfareportingFilesList* = Call_DfareportingFilesList_595777(
    name: "dfareportingFilesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/files",
    validator: validate_DfareportingFilesList_595778, base: "/dfareporting/v3.2",
    url: url_DfareportingFilesList_595779, schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesUpdate_595825 = ref object of OpenApiRestCall_593437
proc url_DfareportingFloodlightActivitiesUpdate_595827(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesUpdate_595826(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight activity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595828 = path.getOrDefault("profileId")
  valid_595828 = validateParameter(valid_595828, JString, required = true,
                                 default = nil)
  if valid_595828 != nil:
    section.add "profileId", valid_595828
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595829 = query.getOrDefault("fields")
  valid_595829 = validateParameter(valid_595829, JString, required = false,
                                 default = nil)
  if valid_595829 != nil:
    section.add "fields", valid_595829
  var valid_595830 = query.getOrDefault("quotaUser")
  valid_595830 = validateParameter(valid_595830, JString, required = false,
                                 default = nil)
  if valid_595830 != nil:
    section.add "quotaUser", valid_595830
  var valid_595831 = query.getOrDefault("alt")
  valid_595831 = validateParameter(valid_595831, JString, required = false,
                                 default = newJString("json"))
  if valid_595831 != nil:
    section.add "alt", valid_595831
  var valid_595832 = query.getOrDefault("oauth_token")
  valid_595832 = validateParameter(valid_595832, JString, required = false,
                                 default = nil)
  if valid_595832 != nil:
    section.add "oauth_token", valid_595832
  var valid_595833 = query.getOrDefault("userIp")
  valid_595833 = validateParameter(valid_595833, JString, required = false,
                                 default = nil)
  if valid_595833 != nil:
    section.add "userIp", valid_595833
  var valid_595834 = query.getOrDefault("key")
  valid_595834 = validateParameter(valid_595834, JString, required = false,
                                 default = nil)
  if valid_595834 != nil:
    section.add "key", valid_595834
  var valid_595835 = query.getOrDefault("prettyPrint")
  valid_595835 = validateParameter(valid_595835, JBool, required = false,
                                 default = newJBool(true))
  if valid_595835 != nil:
    section.add "prettyPrint", valid_595835
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595837: Call_DfareportingFloodlightActivitiesUpdate_595825;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight activity.
  ## 
  let valid = call_595837.validator(path, query, header, formData, body)
  let scheme = call_595837.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595837.url(scheme.get, call_595837.host, call_595837.base,
                         call_595837.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595837, url, valid)

proc call*(call_595838: Call_DfareportingFloodlightActivitiesUpdate_595825;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivitiesUpdate
  ## Updates an existing floodlight activity.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595839 = newJObject()
  var query_595840 = newJObject()
  var body_595841 = newJObject()
  add(path_595839, "profileId", newJString(profileId))
  add(query_595840, "fields", newJString(fields))
  add(query_595840, "quotaUser", newJString(quotaUser))
  add(query_595840, "alt", newJString(alt))
  add(query_595840, "oauth_token", newJString(oauthToken))
  add(query_595840, "userIp", newJString(userIp))
  add(query_595840, "key", newJString(key))
  if body != nil:
    body_595841 = body
  add(query_595840, "prettyPrint", newJBool(prettyPrint))
  result = call_595838.call(path_595839, query_595840, nil, nil, body_595841)

var dfareportingFloodlightActivitiesUpdate* = Call_DfareportingFloodlightActivitiesUpdate_595825(
    name: "dfareportingFloodlightActivitiesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities",
    validator: validate_DfareportingFloodlightActivitiesUpdate_595826,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesUpdate_595827,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesInsert_595842 = ref object of OpenApiRestCall_593437
proc url_DfareportingFloodlightActivitiesInsert_595844(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesInsert_595843(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new floodlight activity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595845 = path.getOrDefault("profileId")
  valid_595845 = validateParameter(valid_595845, JString, required = true,
                                 default = nil)
  if valid_595845 != nil:
    section.add "profileId", valid_595845
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595846 = query.getOrDefault("fields")
  valid_595846 = validateParameter(valid_595846, JString, required = false,
                                 default = nil)
  if valid_595846 != nil:
    section.add "fields", valid_595846
  var valid_595847 = query.getOrDefault("quotaUser")
  valid_595847 = validateParameter(valid_595847, JString, required = false,
                                 default = nil)
  if valid_595847 != nil:
    section.add "quotaUser", valid_595847
  var valid_595848 = query.getOrDefault("alt")
  valid_595848 = validateParameter(valid_595848, JString, required = false,
                                 default = newJString("json"))
  if valid_595848 != nil:
    section.add "alt", valid_595848
  var valid_595849 = query.getOrDefault("oauth_token")
  valid_595849 = validateParameter(valid_595849, JString, required = false,
                                 default = nil)
  if valid_595849 != nil:
    section.add "oauth_token", valid_595849
  var valid_595850 = query.getOrDefault("userIp")
  valid_595850 = validateParameter(valid_595850, JString, required = false,
                                 default = nil)
  if valid_595850 != nil:
    section.add "userIp", valid_595850
  var valid_595851 = query.getOrDefault("key")
  valid_595851 = validateParameter(valid_595851, JString, required = false,
                                 default = nil)
  if valid_595851 != nil:
    section.add "key", valid_595851
  var valid_595852 = query.getOrDefault("prettyPrint")
  valid_595852 = validateParameter(valid_595852, JBool, required = false,
                                 default = newJBool(true))
  if valid_595852 != nil:
    section.add "prettyPrint", valid_595852
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595854: Call_DfareportingFloodlightActivitiesInsert_595842;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new floodlight activity.
  ## 
  let valid = call_595854.validator(path, query, header, formData, body)
  let scheme = call_595854.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595854.url(scheme.get, call_595854.host, call_595854.base,
                         call_595854.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595854, url, valid)

proc call*(call_595855: Call_DfareportingFloodlightActivitiesInsert_595842;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivitiesInsert
  ## Inserts a new floodlight activity.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595856 = newJObject()
  var query_595857 = newJObject()
  var body_595858 = newJObject()
  add(path_595856, "profileId", newJString(profileId))
  add(query_595857, "fields", newJString(fields))
  add(query_595857, "quotaUser", newJString(quotaUser))
  add(query_595857, "alt", newJString(alt))
  add(query_595857, "oauth_token", newJString(oauthToken))
  add(query_595857, "userIp", newJString(userIp))
  add(query_595857, "key", newJString(key))
  if body != nil:
    body_595858 = body
  add(query_595857, "prettyPrint", newJBool(prettyPrint))
  result = call_595855.call(path_595856, query_595857, nil, nil, body_595858)

var dfareportingFloodlightActivitiesInsert* = Call_DfareportingFloodlightActivitiesInsert_595842(
    name: "dfareportingFloodlightActivitiesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities",
    validator: validate_DfareportingFloodlightActivitiesInsert_595843,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesInsert_595844,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesList_595797 = ref object of OpenApiRestCall_593437
proc url_DfareportingFloodlightActivitiesList_595799(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesList_595798(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of floodlight activities, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595800 = path.getOrDefault("profileId")
  valid_595800 = validateParameter(valid_595800, JString, required = true,
                                 default = nil)
  if valid_595800 != nil:
    section.add "profileId", valid_595800
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   tagString: JString
  ##            : Select only floodlight activities with the specified tag string.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivity*2015" will return objects with names like "floodlightactivity June 2015", "floodlightactivity April 2015", or simply "floodlightactivity 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivity" will match objects with name "my floodlightactivity activity", "floodlightactivity 2015", or simply "floodlightactivity".
  ##   advertiserId: JString
  ##               : Select only floodlight activities for the specified advertiser ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   floodlightActivityGroupIds: JArray
  ##                             : Select only floodlight activities with the specified floodlight activity group IDs.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   floodlightActivityGroupType: JString
  ##                              : Select only floodlight activities with the specified floodlight activity group type.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   floodlightConfigurationId: JString
  ##                            : Select only floodlight activities for the specified floodlight configuration ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   floodlightActivityGroupTagString: JString
  ##                                   : Select only floodlight activities with the specified floodlight activity group tag string.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only floodlight activities with the specified IDs. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   floodlightActivityGroupName: JString
  ##                              : Select only floodlight activities with the specified floodlight activity group name.
  section = newJObject()
  var valid_595801 = query.getOrDefault("fields")
  valid_595801 = validateParameter(valid_595801, JString, required = false,
                                 default = nil)
  if valid_595801 != nil:
    section.add "fields", valid_595801
  var valid_595802 = query.getOrDefault("pageToken")
  valid_595802 = validateParameter(valid_595802, JString, required = false,
                                 default = nil)
  if valid_595802 != nil:
    section.add "pageToken", valid_595802
  var valid_595803 = query.getOrDefault("quotaUser")
  valid_595803 = validateParameter(valid_595803, JString, required = false,
                                 default = nil)
  if valid_595803 != nil:
    section.add "quotaUser", valid_595803
  var valid_595804 = query.getOrDefault("sortField")
  valid_595804 = validateParameter(valid_595804, JString, required = false,
                                 default = newJString("ID"))
  if valid_595804 != nil:
    section.add "sortField", valid_595804
  var valid_595805 = query.getOrDefault("tagString")
  valid_595805 = validateParameter(valid_595805, JString, required = false,
                                 default = nil)
  if valid_595805 != nil:
    section.add "tagString", valid_595805
  var valid_595806 = query.getOrDefault("alt")
  valid_595806 = validateParameter(valid_595806, JString, required = false,
                                 default = newJString("json"))
  if valid_595806 != nil:
    section.add "alt", valid_595806
  var valid_595807 = query.getOrDefault("searchString")
  valid_595807 = validateParameter(valid_595807, JString, required = false,
                                 default = nil)
  if valid_595807 != nil:
    section.add "searchString", valid_595807
  var valid_595808 = query.getOrDefault("advertiserId")
  valid_595808 = validateParameter(valid_595808, JString, required = false,
                                 default = nil)
  if valid_595808 != nil:
    section.add "advertiserId", valid_595808
  var valid_595809 = query.getOrDefault("floodlightActivityGroupIds")
  valid_595809 = validateParameter(valid_595809, JArray, required = false,
                                 default = nil)
  if valid_595809 != nil:
    section.add "floodlightActivityGroupIds", valid_595809
  var valid_595810 = query.getOrDefault("oauth_token")
  valid_595810 = validateParameter(valid_595810, JString, required = false,
                                 default = nil)
  if valid_595810 != nil:
    section.add "oauth_token", valid_595810
  var valid_595811 = query.getOrDefault("floodlightActivityGroupType")
  valid_595811 = validateParameter(valid_595811, JString, required = false,
                                 default = newJString("COUNTER"))
  if valid_595811 != nil:
    section.add "floodlightActivityGroupType", valid_595811
  var valid_595812 = query.getOrDefault("userIp")
  valid_595812 = validateParameter(valid_595812, JString, required = false,
                                 default = nil)
  if valid_595812 != nil:
    section.add "userIp", valid_595812
  var valid_595813 = query.getOrDefault("floodlightConfigurationId")
  valid_595813 = validateParameter(valid_595813, JString, required = false,
                                 default = nil)
  if valid_595813 != nil:
    section.add "floodlightConfigurationId", valid_595813
  var valid_595814 = query.getOrDefault("floodlightActivityGroupTagString")
  valid_595814 = validateParameter(valid_595814, JString, required = false,
                                 default = nil)
  if valid_595814 != nil:
    section.add "floodlightActivityGroupTagString", valid_595814
  var valid_595815 = query.getOrDefault("maxResults")
  valid_595815 = validateParameter(valid_595815, JInt, required = false,
                                 default = newJInt(1000))
  if valid_595815 != nil:
    section.add "maxResults", valid_595815
  var valid_595816 = query.getOrDefault("ids")
  valid_595816 = validateParameter(valid_595816, JArray, required = false,
                                 default = nil)
  if valid_595816 != nil:
    section.add "ids", valid_595816
  var valid_595817 = query.getOrDefault("key")
  valid_595817 = validateParameter(valid_595817, JString, required = false,
                                 default = nil)
  if valid_595817 != nil:
    section.add "key", valid_595817
  var valid_595818 = query.getOrDefault("sortOrder")
  valid_595818 = validateParameter(valid_595818, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_595818 != nil:
    section.add "sortOrder", valid_595818
  var valid_595819 = query.getOrDefault("prettyPrint")
  valid_595819 = validateParameter(valid_595819, JBool, required = false,
                                 default = newJBool(true))
  if valid_595819 != nil:
    section.add "prettyPrint", valid_595819
  var valid_595820 = query.getOrDefault("floodlightActivityGroupName")
  valid_595820 = validateParameter(valid_595820, JString, required = false,
                                 default = nil)
  if valid_595820 != nil:
    section.add "floodlightActivityGroupName", valid_595820
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595821: Call_DfareportingFloodlightActivitiesList_595797;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of floodlight activities, possibly filtered. This method supports paging.
  ## 
  let valid = call_595821.validator(path, query, header, formData, body)
  let scheme = call_595821.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595821.url(scheme.get, call_595821.host, call_595821.base,
                         call_595821.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595821, url, valid)

proc call*(call_595822: Call_DfareportingFloodlightActivitiesList_595797;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; tagString: string = "";
          alt: string = "json"; searchString: string = ""; advertiserId: string = "";
          floodlightActivityGroupIds: JsonNode = nil; oauthToken: string = "";
          floodlightActivityGroupType: string = "COUNTER"; userIp: string = "";
          floodlightConfigurationId: string = "";
          floodlightActivityGroupTagString: string = ""; maxResults: int = 1000;
          ids: JsonNode = nil; key: string = ""; sortOrder: string = "ASCENDING";
          prettyPrint: bool = true; floodlightActivityGroupName: string = ""): Recallable =
  ## dfareportingFloodlightActivitiesList
  ## Retrieves a list of floodlight activities, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   tagString: string
  ##            : Select only floodlight activities with the specified tag string.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivity*2015" will return objects with names like "floodlightactivity June 2015", "floodlightactivity April 2015", or simply "floodlightactivity 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivity" will match objects with name "my floodlightactivity activity", "floodlightactivity 2015", or simply "floodlightactivity".
  ##   advertiserId: string
  ##               : Select only floodlight activities for the specified advertiser ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   floodlightActivityGroupIds: JArray
  ##                             : Select only floodlight activities with the specified floodlight activity group IDs.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   floodlightActivityGroupType: string
  ##                              : Select only floodlight activities with the specified floodlight activity group type.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   floodlightConfigurationId: string
  ##                            : Select only floodlight activities for the specified floodlight configuration ID. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   floodlightActivityGroupTagString: string
  ##                                   : Select only floodlight activities with the specified floodlight activity group tag string.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only floodlight activities with the specified IDs. Must specify either ids, advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   floodlightActivityGroupName: string
  ##                              : Select only floodlight activities with the specified floodlight activity group name.
  var path_595823 = newJObject()
  var query_595824 = newJObject()
  add(path_595823, "profileId", newJString(profileId))
  add(query_595824, "fields", newJString(fields))
  add(query_595824, "pageToken", newJString(pageToken))
  add(query_595824, "quotaUser", newJString(quotaUser))
  add(query_595824, "sortField", newJString(sortField))
  add(query_595824, "tagString", newJString(tagString))
  add(query_595824, "alt", newJString(alt))
  add(query_595824, "searchString", newJString(searchString))
  add(query_595824, "advertiserId", newJString(advertiserId))
  if floodlightActivityGroupIds != nil:
    query_595824.add "floodlightActivityGroupIds", floodlightActivityGroupIds
  add(query_595824, "oauth_token", newJString(oauthToken))
  add(query_595824, "floodlightActivityGroupType",
      newJString(floodlightActivityGroupType))
  add(query_595824, "userIp", newJString(userIp))
  add(query_595824, "floodlightConfigurationId",
      newJString(floodlightConfigurationId))
  add(query_595824, "floodlightActivityGroupTagString",
      newJString(floodlightActivityGroupTagString))
  add(query_595824, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_595824.add "ids", ids
  add(query_595824, "key", newJString(key))
  add(query_595824, "sortOrder", newJString(sortOrder))
  add(query_595824, "prettyPrint", newJBool(prettyPrint))
  add(query_595824, "floodlightActivityGroupName",
      newJString(floodlightActivityGroupName))
  result = call_595822.call(path_595823, query_595824, nil, nil, nil)

var dfareportingFloodlightActivitiesList* = Call_DfareportingFloodlightActivitiesList_595797(
    name: "dfareportingFloodlightActivitiesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities",
    validator: validate_DfareportingFloodlightActivitiesList_595798,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesList_595799,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesPatch_595859 = ref object of OpenApiRestCall_593437
proc url_DfareportingFloodlightActivitiesPatch_595861(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesPatch_595860(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight activity. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595862 = path.getOrDefault("profileId")
  valid_595862 = validateParameter(valid_595862, JString, required = true,
                                 default = nil)
  if valid_595862 != nil:
    section.add "profileId", valid_595862
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Floodlight activity ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595863 = query.getOrDefault("fields")
  valid_595863 = validateParameter(valid_595863, JString, required = false,
                                 default = nil)
  if valid_595863 != nil:
    section.add "fields", valid_595863
  var valid_595864 = query.getOrDefault("quotaUser")
  valid_595864 = validateParameter(valid_595864, JString, required = false,
                                 default = nil)
  if valid_595864 != nil:
    section.add "quotaUser", valid_595864
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_595865 = query.getOrDefault("id")
  valid_595865 = validateParameter(valid_595865, JString, required = true,
                                 default = nil)
  if valid_595865 != nil:
    section.add "id", valid_595865
  var valid_595866 = query.getOrDefault("alt")
  valid_595866 = validateParameter(valid_595866, JString, required = false,
                                 default = newJString("json"))
  if valid_595866 != nil:
    section.add "alt", valid_595866
  var valid_595867 = query.getOrDefault("oauth_token")
  valid_595867 = validateParameter(valid_595867, JString, required = false,
                                 default = nil)
  if valid_595867 != nil:
    section.add "oauth_token", valid_595867
  var valid_595868 = query.getOrDefault("userIp")
  valid_595868 = validateParameter(valid_595868, JString, required = false,
                                 default = nil)
  if valid_595868 != nil:
    section.add "userIp", valid_595868
  var valid_595869 = query.getOrDefault("key")
  valid_595869 = validateParameter(valid_595869, JString, required = false,
                                 default = nil)
  if valid_595869 != nil:
    section.add "key", valid_595869
  var valid_595870 = query.getOrDefault("prettyPrint")
  valid_595870 = validateParameter(valid_595870, JBool, required = false,
                                 default = newJBool(true))
  if valid_595870 != nil:
    section.add "prettyPrint", valid_595870
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595872: Call_DfareportingFloodlightActivitiesPatch_595859;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight activity. This method supports patch semantics.
  ## 
  let valid = call_595872.validator(path, query, header, formData, body)
  let scheme = call_595872.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595872.url(scheme.get, call_595872.host, call_595872.base,
                         call_595872.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595872, url, valid)

proc call*(call_595873: Call_DfareportingFloodlightActivitiesPatch_595859;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivitiesPatch
  ## Updates an existing floodlight activity. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Floodlight activity ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595874 = newJObject()
  var query_595875 = newJObject()
  var body_595876 = newJObject()
  add(path_595874, "profileId", newJString(profileId))
  add(query_595875, "fields", newJString(fields))
  add(query_595875, "quotaUser", newJString(quotaUser))
  add(query_595875, "id", newJString(id))
  add(query_595875, "alt", newJString(alt))
  add(query_595875, "oauth_token", newJString(oauthToken))
  add(query_595875, "userIp", newJString(userIp))
  add(query_595875, "key", newJString(key))
  if body != nil:
    body_595876 = body
  add(query_595875, "prettyPrint", newJBool(prettyPrint))
  result = call_595873.call(path_595874, query_595875, nil, nil, body_595876)

var dfareportingFloodlightActivitiesPatch* = Call_DfareportingFloodlightActivitiesPatch_595859(
    name: "dfareportingFloodlightActivitiesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities",
    validator: validate_DfareportingFloodlightActivitiesPatch_595860,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesPatch_595861,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesGeneratetag_595877 = ref object of OpenApiRestCall_593437
proc url_DfareportingFloodlightActivitiesGeneratetag_595879(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"), (kind: ConstantSegment,
        value: "/floodlightActivities/generatetag")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesGeneratetag_595878(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates a tag for a floodlight activity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595880 = path.getOrDefault("profileId")
  valid_595880 = validateParameter(valid_595880, JString, required = true,
                                 default = nil)
  if valid_595880 != nil:
    section.add "profileId", valid_595880
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   floodlightActivityId: JString
  ##                       : Floodlight activity ID for which we want to generate a tag.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595881 = query.getOrDefault("fields")
  valid_595881 = validateParameter(valid_595881, JString, required = false,
                                 default = nil)
  if valid_595881 != nil:
    section.add "fields", valid_595881
  var valid_595882 = query.getOrDefault("quotaUser")
  valid_595882 = validateParameter(valid_595882, JString, required = false,
                                 default = nil)
  if valid_595882 != nil:
    section.add "quotaUser", valid_595882
  var valid_595883 = query.getOrDefault("alt")
  valid_595883 = validateParameter(valid_595883, JString, required = false,
                                 default = newJString("json"))
  if valid_595883 != nil:
    section.add "alt", valid_595883
  var valid_595884 = query.getOrDefault("oauth_token")
  valid_595884 = validateParameter(valid_595884, JString, required = false,
                                 default = nil)
  if valid_595884 != nil:
    section.add "oauth_token", valid_595884
  var valid_595885 = query.getOrDefault("floodlightActivityId")
  valid_595885 = validateParameter(valid_595885, JString, required = false,
                                 default = nil)
  if valid_595885 != nil:
    section.add "floodlightActivityId", valid_595885
  var valid_595886 = query.getOrDefault("userIp")
  valid_595886 = validateParameter(valid_595886, JString, required = false,
                                 default = nil)
  if valid_595886 != nil:
    section.add "userIp", valid_595886
  var valid_595887 = query.getOrDefault("key")
  valid_595887 = validateParameter(valid_595887, JString, required = false,
                                 default = nil)
  if valid_595887 != nil:
    section.add "key", valid_595887
  var valid_595888 = query.getOrDefault("prettyPrint")
  valid_595888 = validateParameter(valid_595888, JBool, required = false,
                                 default = newJBool(true))
  if valid_595888 != nil:
    section.add "prettyPrint", valid_595888
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595889: Call_DfareportingFloodlightActivitiesGeneratetag_595877;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates a tag for a floodlight activity.
  ## 
  let valid = call_595889.validator(path, query, header, formData, body)
  let scheme = call_595889.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595889.url(scheme.get, call_595889.host, call_595889.base,
                         call_595889.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595889, url, valid)

proc call*(call_595890: Call_DfareportingFloodlightActivitiesGeneratetag_595877;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = "";
          floodlightActivityId: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivitiesGeneratetag
  ## Generates a tag for a floodlight activity.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   floodlightActivityId: string
  ##                       : Floodlight activity ID for which we want to generate a tag.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595891 = newJObject()
  var query_595892 = newJObject()
  add(path_595891, "profileId", newJString(profileId))
  add(query_595892, "fields", newJString(fields))
  add(query_595892, "quotaUser", newJString(quotaUser))
  add(query_595892, "alt", newJString(alt))
  add(query_595892, "oauth_token", newJString(oauthToken))
  add(query_595892, "floodlightActivityId", newJString(floodlightActivityId))
  add(query_595892, "userIp", newJString(userIp))
  add(query_595892, "key", newJString(key))
  add(query_595892, "prettyPrint", newJBool(prettyPrint))
  result = call_595890.call(path_595891, query_595892, nil, nil, nil)

var dfareportingFloodlightActivitiesGeneratetag* = Call_DfareportingFloodlightActivitiesGeneratetag_595877(
    name: "dfareportingFloodlightActivitiesGeneratetag",
    meth: HttpMethod.HttpPost, host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities/generatetag",
    validator: validate_DfareportingFloodlightActivitiesGeneratetag_595878,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightActivitiesGeneratetag_595879,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesGet_595893 = ref object of OpenApiRestCall_593437
proc url_DfareportingFloodlightActivitiesGet_595895(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesGet_595894(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one floodlight activity by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Floodlight activity ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595896 = path.getOrDefault("profileId")
  valid_595896 = validateParameter(valid_595896, JString, required = true,
                                 default = nil)
  if valid_595896 != nil:
    section.add "profileId", valid_595896
  var valid_595897 = path.getOrDefault("id")
  valid_595897 = validateParameter(valid_595897, JString, required = true,
                                 default = nil)
  if valid_595897 != nil:
    section.add "id", valid_595897
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595898 = query.getOrDefault("fields")
  valid_595898 = validateParameter(valid_595898, JString, required = false,
                                 default = nil)
  if valid_595898 != nil:
    section.add "fields", valid_595898
  var valid_595899 = query.getOrDefault("quotaUser")
  valid_595899 = validateParameter(valid_595899, JString, required = false,
                                 default = nil)
  if valid_595899 != nil:
    section.add "quotaUser", valid_595899
  var valid_595900 = query.getOrDefault("alt")
  valid_595900 = validateParameter(valid_595900, JString, required = false,
                                 default = newJString("json"))
  if valid_595900 != nil:
    section.add "alt", valid_595900
  var valid_595901 = query.getOrDefault("oauth_token")
  valid_595901 = validateParameter(valid_595901, JString, required = false,
                                 default = nil)
  if valid_595901 != nil:
    section.add "oauth_token", valid_595901
  var valid_595902 = query.getOrDefault("userIp")
  valid_595902 = validateParameter(valid_595902, JString, required = false,
                                 default = nil)
  if valid_595902 != nil:
    section.add "userIp", valid_595902
  var valid_595903 = query.getOrDefault("key")
  valid_595903 = validateParameter(valid_595903, JString, required = false,
                                 default = nil)
  if valid_595903 != nil:
    section.add "key", valid_595903
  var valid_595904 = query.getOrDefault("prettyPrint")
  valid_595904 = validateParameter(valid_595904, JBool, required = false,
                                 default = newJBool(true))
  if valid_595904 != nil:
    section.add "prettyPrint", valid_595904
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595905: Call_DfareportingFloodlightActivitiesGet_595893;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one floodlight activity by ID.
  ## 
  let valid = call_595905.validator(path, query, header, formData, body)
  let scheme = call_595905.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595905.url(scheme.get, call_595905.host, call_595905.base,
                         call_595905.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595905, url, valid)

proc call*(call_595906: Call_DfareportingFloodlightActivitiesGet_595893;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivitiesGet
  ## Gets one floodlight activity by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Floodlight activity ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595907 = newJObject()
  var query_595908 = newJObject()
  add(path_595907, "profileId", newJString(profileId))
  add(query_595908, "fields", newJString(fields))
  add(query_595908, "quotaUser", newJString(quotaUser))
  add(query_595908, "alt", newJString(alt))
  add(query_595908, "oauth_token", newJString(oauthToken))
  add(query_595908, "userIp", newJString(userIp))
  add(path_595907, "id", newJString(id))
  add(query_595908, "key", newJString(key))
  add(query_595908, "prettyPrint", newJBool(prettyPrint))
  result = call_595906.call(path_595907, query_595908, nil, nil, nil)

var dfareportingFloodlightActivitiesGet* = Call_DfareportingFloodlightActivitiesGet_595893(
    name: "dfareportingFloodlightActivitiesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities/{id}",
    validator: validate_DfareportingFloodlightActivitiesGet_595894,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesGet_595895,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivitiesDelete_595909 = ref object of OpenApiRestCall_593437
proc url_DfareportingFloodlightActivitiesDelete_595911(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivities/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivitiesDelete_595910(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing floodlight activity.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Floodlight activity ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595912 = path.getOrDefault("profileId")
  valid_595912 = validateParameter(valid_595912, JString, required = true,
                                 default = nil)
  if valid_595912 != nil:
    section.add "profileId", valid_595912
  var valid_595913 = path.getOrDefault("id")
  valid_595913 = validateParameter(valid_595913, JString, required = true,
                                 default = nil)
  if valid_595913 != nil:
    section.add "id", valid_595913
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595914 = query.getOrDefault("fields")
  valid_595914 = validateParameter(valid_595914, JString, required = false,
                                 default = nil)
  if valid_595914 != nil:
    section.add "fields", valid_595914
  var valid_595915 = query.getOrDefault("quotaUser")
  valid_595915 = validateParameter(valid_595915, JString, required = false,
                                 default = nil)
  if valid_595915 != nil:
    section.add "quotaUser", valid_595915
  var valid_595916 = query.getOrDefault("alt")
  valid_595916 = validateParameter(valid_595916, JString, required = false,
                                 default = newJString("json"))
  if valid_595916 != nil:
    section.add "alt", valid_595916
  var valid_595917 = query.getOrDefault("oauth_token")
  valid_595917 = validateParameter(valid_595917, JString, required = false,
                                 default = nil)
  if valid_595917 != nil:
    section.add "oauth_token", valid_595917
  var valid_595918 = query.getOrDefault("userIp")
  valid_595918 = validateParameter(valid_595918, JString, required = false,
                                 default = nil)
  if valid_595918 != nil:
    section.add "userIp", valid_595918
  var valid_595919 = query.getOrDefault("key")
  valid_595919 = validateParameter(valid_595919, JString, required = false,
                                 default = nil)
  if valid_595919 != nil:
    section.add "key", valid_595919
  var valid_595920 = query.getOrDefault("prettyPrint")
  valid_595920 = validateParameter(valid_595920, JBool, required = false,
                                 default = newJBool(true))
  if valid_595920 != nil:
    section.add "prettyPrint", valid_595920
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595921: Call_DfareportingFloodlightActivitiesDelete_595909;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing floodlight activity.
  ## 
  let valid = call_595921.validator(path, query, header, formData, body)
  let scheme = call_595921.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595921.url(scheme.get, call_595921.host, call_595921.base,
                         call_595921.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595921, url, valid)

proc call*(call_595922: Call_DfareportingFloodlightActivitiesDelete_595909;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivitiesDelete
  ## Deletes an existing floodlight activity.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Floodlight activity ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595923 = newJObject()
  var query_595924 = newJObject()
  add(path_595923, "profileId", newJString(profileId))
  add(query_595924, "fields", newJString(fields))
  add(query_595924, "quotaUser", newJString(quotaUser))
  add(query_595924, "alt", newJString(alt))
  add(query_595924, "oauth_token", newJString(oauthToken))
  add(query_595924, "userIp", newJString(userIp))
  add(path_595923, "id", newJString(id))
  add(query_595924, "key", newJString(key))
  add(query_595924, "prettyPrint", newJBool(prettyPrint))
  result = call_595922.call(path_595923, query_595924, nil, nil, nil)

var dfareportingFloodlightActivitiesDelete* = Call_DfareportingFloodlightActivitiesDelete_595909(
    name: "dfareportingFloodlightActivitiesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivities/{id}",
    validator: validate_DfareportingFloodlightActivitiesDelete_595910,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivitiesDelete_595911,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsUpdate_595949 = ref object of OpenApiRestCall_593437
proc url_DfareportingFloodlightActivityGroupsUpdate_595951(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsUpdate_595950(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight activity group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595952 = path.getOrDefault("profileId")
  valid_595952 = validateParameter(valid_595952, JString, required = true,
                                 default = nil)
  if valid_595952 != nil:
    section.add "profileId", valid_595952
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595953 = query.getOrDefault("fields")
  valid_595953 = validateParameter(valid_595953, JString, required = false,
                                 default = nil)
  if valid_595953 != nil:
    section.add "fields", valid_595953
  var valid_595954 = query.getOrDefault("quotaUser")
  valid_595954 = validateParameter(valid_595954, JString, required = false,
                                 default = nil)
  if valid_595954 != nil:
    section.add "quotaUser", valid_595954
  var valid_595955 = query.getOrDefault("alt")
  valid_595955 = validateParameter(valid_595955, JString, required = false,
                                 default = newJString("json"))
  if valid_595955 != nil:
    section.add "alt", valid_595955
  var valid_595956 = query.getOrDefault("oauth_token")
  valid_595956 = validateParameter(valid_595956, JString, required = false,
                                 default = nil)
  if valid_595956 != nil:
    section.add "oauth_token", valid_595956
  var valid_595957 = query.getOrDefault("userIp")
  valid_595957 = validateParameter(valid_595957, JString, required = false,
                                 default = nil)
  if valid_595957 != nil:
    section.add "userIp", valid_595957
  var valid_595958 = query.getOrDefault("key")
  valid_595958 = validateParameter(valid_595958, JString, required = false,
                                 default = nil)
  if valid_595958 != nil:
    section.add "key", valid_595958
  var valid_595959 = query.getOrDefault("prettyPrint")
  valid_595959 = validateParameter(valid_595959, JBool, required = false,
                                 default = newJBool(true))
  if valid_595959 != nil:
    section.add "prettyPrint", valid_595959
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595961: Call_DfareportingFloodlightActivityGroupsUpdate_595949;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight activity group.
  ## 
  let valid = call_595961.validator(path, query, header, formData, body)
  let scheme = call_595961.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595961.url(scheme.get, call_595961.host, call_595961.base,
                         call_595961.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595961, url, valid)

proc call*(call_595962: Call_DfareportingFloodlightActivityGroupsUpdate_595949;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivityGroupsUpdate
  ## Updates an existing floodlight activity group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595963 = newJObject()
  var query_595964 = newJObject()
  var body_595965 = newJObject()
  add(path_595963, "profileId", newJString(profileId))
  add(query_595964, "fields", newJString(fields))
  add(query_595964, "quotaUser", newJString(quotaUser))
  add(query_595964, "alt", newJString(alt))
  add(query_595964, "oauth_token", newJString(oauthToken))
  add(query_595964, "userIp", newJString(userIp))
  add(query_595964, "key", newJString(key))
  if body != nil:
    body_595965 = body
  add(query_595964, "prettyPrint", newJBool(prettyPrint))
  result = call_595962.call(path_595963, query_595964, nil, nil, body_595965)

var dfareportingFloodlightActivityGroupsUpdate* = Call_DfareportingFloodlightActivityGroupsUpdate_595949(
    name: "dfareportingFloodlightActivityGroupsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups",
    validator: validate_DfareportingFloodlightActivityGroupsUpdate_595950,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightActivityGroupsUpdate_595951,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsInsert_595966 = ref object of OpenApiRestCall_593437
proc url_DfareportingFloodlightActivityGroupsInsert_595968(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsInsert_595967(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new floodlight activity group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595969 = path.getOrDefault("profileId")
  valid_595969 = validateParameter(valid_595969, JString, required = true,
                                 default = nil)
  if valid_595969 != nil:
    section.add "profileId", valid_595969
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595970 = query.getOrDefault("fields")
  valid_595970 = validateParameter(valid_595970, JString, required = false,
                                 default = nil)
  if valid_595970 != nil:
    section.add "fields", valid_595970
  var valid_595971 = query.getOrDefault("quotaUser")
  valid_595971 = validateParameter(valid_595971, JString, required = false,
                                 default = nil)
  if valid_595971 != nil:
    section.add "quotaUser", valid_595971
  var valid_595972 = query.getOrDefault("alt")
  valid_595972 = validateParameter(valid_595972, JString, required = false,
                                 default = newJString("json"))
  if valid_595972 != nil:
    section.add "alt", valid_595972
  var valid_595973 = query.getOrDefault("oauth_token")
  valid_595973 = validateParameter(valid_595973, JString, required = false,
                                 default = nil)
  if valid_595973 != nil:
    section.add "oauth_token", valid_595973
  var valid_595974 = query.getOrDefault("userIp")
  valid_595974 = validateParameter(valid_595974, JString, required = false,
                                 default = nil)
  if valid_595974 != nil:
    section.add "userIp", valid_595974
  var valid_595975 = query.getOrDefault("key")
  valid_595975 = validateParameter(valid_595975, JString, required = false,
                                 default = nil)
  if valid_595975 != nil:
    section.add "key", valid_595975
  var valid_595976 = query.getOrDefault("prettyPrint")
  valid_595976 = validateParameter(valid_595976, JBool, required = false,
                                 default = newJBool(true))
  if valid_595976 != nil:
    section.add "prettyPrint", valid_595976
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595978: Call_DfareportingFloodlightActivityGroupsInsert_595966;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new floodlight activity group.
  ## 
  let valid = call_595978.validator(path, query, header, formData, body)
  let scheme = call_595978.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595978.url(scheme.get, call_595978.host, call_595978.base,
                         call_595978.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595978, url, valid)

proc call*(call_595979: Call_DfareportingFloodlightActivityGroupsInsert_595966;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivityGroupsInsert
  ## Inserts a new floodlight activity group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595980 = newJObject()
  var query_595981 = newJObject()
  var body_595982 = newJObject()
  add(path_595980, "profileId", newJString(profileId))
  add(query_595981, "fields", newJString(fields))
  add(query_595981, "quotaUser", newJString(quotaUser))
  add(query_595981, "alt", newJString(alt))
  add(query_595981, "oauth_token", newJString(oauthToken))
  add(query_595981, "userIp", newJString(userIp))
  add(query_595981, "key", newJString(key))
  if body != nil:
    body_595982 = body
  add(query_595981, "prettyPrint", newJBool(prettyPrint))
  result = call_595979.call(path_595980, query_595981, nil, nil, body_595982)

var dfareportingFloodlightActivityGroupsInsert* = Call_DfareportingFloodlightActivityGroupsInsert_595966(
    name: "dfareportingFloodlightActivityGroupsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups",
    validator: validate_DfareportingFloodlightActivityGroupsInsert_595967,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightActivityGroupsInsert_595968,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsList_595925 = ref object of OpenApiRestCall_593437
proc url_DfareportingFloodlightActivityGroupsList_595927(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsList_595926(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595928 = path.getOrDefault("profileId")
  valid_595928 = validateParameter(valid_595928, JString, required = true,
                                 default = nil)
  if valid_595928 != nil:
    section.add "profileId", valid_595928
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivitygroup*2015" will return objects with names like "floodlightactivitygroup June 2015", "floodlightactivitygroup April 2015", or simply "floodlightactivitygroup 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivitygroup" will match objects with name "my floodlightactivitygroup activity", "floodlightactivitygroup 2015", or simply "floodlightactivitygroup".
  ##   advertiserId: JString
  ##               : Select only floodlight activity groups with the specified advertiser ID. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
  ##   type: JString
  ##       : Select only floodlight activity groups with the specified floodlight activity group type.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   floodlightConfigurationId: JString
  ##                            : Select only floodlight activity groups with the specified floodlight configuration ID. Must specify either advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only floodlight activity groups with the specified IDs. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595929 = query.getOrDefault("fields")
  valid_595929 = validateParameter(valid_595929, JString, required = false,
                                 default = nil)
  if valid_595929 != nil:
    section.add "fields", valid_595929
  var valid_595930 = query.getOrDefault("pageToken")
  valid_595930 = validateParameter(valid_595930, JString, required = false,
                                 default = nil)
  if valid_595930 != nil:
    section.add "pageToken", valid_595930
  var valid_595931 = query.getOrDefault("quotaUser")
  valid_595931 = validateParameter(valid_595931, JString, required = false,
                                 default = nil)
  if valid_595931 != nil:
    section.add "quotaUser", valid_595931
  var valid_595932 = query.getOrDefault("sortField")
  valid_595932 = validateParameter(valid_595932, JString, required = false,
                                 default = newJString("ID"))
  if valid_595932 != nil:
    section.add "sortField", valid_595932
  var valid_595933 = query.getOrDefault("alt")
  valid_595933 = validateParameter(valid_595933, JString, required = false,
                                 default = newJString("json"))
  if valid_595933 != nil:
    section.add "alt", valid_595933
  var valid_595934 = query.getOrDefault("searchString")
  valid_595934 = validateParameter(valid_595934, JString, required = false,
                                 default = nil)
  if valid_595934 != nil:
    section.add "searchString", valid_595934
  var valid_595935 = query.getOrDefault("advertiserId")
  valid_595935 = validateParameter(valid_595935, JString, required = false,
                                 default = nil)
  if valid_595935 != nil:
    section.add "advertiserId", valid_595935
  var valid_595936 = query.getOrDefault("type")
  valid_595936 = validateParameter(valid_595936, JString, required = false,
                                 default = newJString("COUNTER"))
  if valid_595936 != nil:
    section.add "type", valid_595936
  var valid_595937 = query.getOrDefault("oauth_token")
  valid_595937 = validateParameter(valid_595937, JString, required = false,
                                 default = nil)
  if valid_595937 != nil:
    section.add "oauth_token", valid_595937
  var valid_595938 = query.getOrDefault("userIp")
  valid_595938 = validateParameter(valid_595938, JString, required = false,
                                 default = nil)
  if valid_595938 != nil:
    section.add "userIp", valid_595938
  var valid_595939 = query.getOrDefault("floodlightConfigurationId")
  valid_595939 = validateParameter(valid_595939, JString, required = false,
                                 default = nil)
  if valid_595939 != nil:
    section.add "floodlightConfigurationId", valid_595939
  var valid_595940 = query.getOrDefault("maxResults")
  valid_595940 = validateParameter(valid_595940, JInt, required = false,
                                 default = newJInt(1000))
  if valid_595940 != nil:
    section.add "maxResults", valid_595940
  var valid_595941 = query.getOrDefault("ids")
  valid_595941 = validateParameter(valid_595941, JArray, required = false,
                                 default = nil)
  if valid_595941 != nil:
    section.add "ids", valid_595941
  var valid_595942 = query.getOrDefault("key")
  valid_595942 = validateParameter(valid_595942, JString, required = false,
                                 default = nil)
  if valid_595942 != nil:
    section.add "key", valid_595942
  var valid_595943 = query.getOrDefault("sortOrder")
  valid_595943 = validateParameter(valid_595943, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_595943 != nil:
    section.add "sortOrder", valid_595943
  var valid_595944 = query.getOrDefault("prettyPrint")
  valid_595944 = validateParameter(valid_595944, JBool, required = false,
                                 default = newJBool(true))
  if valid_595944 != nil:
    section.add "prettyPrint", valid_595944
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_595945: Call_DfareportingFloodlightActivityGroupsList_595925;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging.
  ## 
  let valid = call_595945.validator(path, query, header, formData, body)
  let scheme = call_595945.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595945.url(scheme.get, call_595945.host, call_595945.base,
                         call_595945.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595945, url, valid)

proc call*(call_595946: Call_DfareportingFloodlightActivityGroupsList_595925;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; advertiserId: string = "";
          `type`: string = "COUNTER"; oauthToken: string = ""; userIp: string = "";
          floodlightConfigurationId: string = ""; maxResults: int = 1000;
          ids: JsonNode = nil; key: string = ""; sortOrder: string = "ASCENDING";
          prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivityGroupsList
  ## Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "floodlightactivitygroup*2015" will return objects with names like "floodlightactivitygroup June 2015", "floodlightactivitygroup April 2015", or simply "floodlightactivitygroup 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "floodlightactivitygroup" will match objects with name "my floodlightactivitygroup activity", "floodlightactivitygroup 2015", or simply "floodlightactivitygroup".
  ##   advertiserId: string
  ##               : Select only floodlight activity groups with the specified advertiser ID. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
  ##   type: string
  ##       : Select only floodlight activity groups with the specified floodlight activity group type.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   floodlightConfigurationId: string
  ##                            : Select only floodlight activity groups with the specified floodlight configuration ID. Must specify either advertiserId, or floodlightConfigurationId for a non-empty result.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only floodlight activity groups with the specified IDs. Must specify either advertiserId or floodlightConfigurationId for a non-empty result.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595947 = newJObject()
  var query_595948 = newJObject()
  add(path_595947, "profileId", newJString(profileId))
  add(query_595948, "fields", newJString(fields))
  add(query_595948, "pageToken", newJString(pageToken))
  add(query_595948, "quotaUser", newJString(quotaUser))
  add(query_595948, "sortField", newJString(sortField))
  add(query_595948, "alt", newJString(alt))
  add(query_595948, "searchString", newJString(searchString))
  add(query_595948, "advertiserId", newJString(advertiserId))
  add(query_595948, "type", newJString(`type`))
  add(query_595948, "oauth_token", newJString(oauthToken))
  add(query_595948, "userIp", newJString(userIp))
  add(query_595948, "floodlightConfigurationId",
      newJString(floodlightConfigurationId))
  add(query_595948, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_595948.add "ids", ids
  add(query_595948, "key", newJString(key))
  add(query_595948, "sortOrder", newJString(sortOrder))
  add(query_595948, "prettyPrint", newJBool(prettyPrint))
  result = call_595946.call(path_595947, query_595948, nil, nil, nil)

var dfareportingFloodlightActivityGroupsList* = Call_DfareportingFloodlightActivityGroupsList_595925(
    name: "dfareportingFloodlightActivityGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups",
    validator: validate_DfareportingFloodlightActivityGroupsList_595926,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivityGroupsList_595927,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsPatch_595983 = ref object of OpenApiRestCall_593437
proc url_DfareportingFloodlightActivityGroupsPatch_595985(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsPatch_595984(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight activity group. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_595986 = path.getOrDefault("profileId")
  valid_595986 = validateParameter(valid_595986, JString, required = true,
                                 default = nil)
  if valid_595986 != nil:
    section.add "profileId", valid_595986
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Floodlight activity Group ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_595987 = query.getOrDefault("fields")
  valid_595987 = validateParameter(valid_595987, JString, required = false,
                                 default = nil)
  if valid_595987 != nil:
    section.add "fields", valid_595987
  var valid_595988 = query.getOrDefault("quotaUser")
  valid_595988 = validateParameter(valid_595988, JString, required = false,
                                 default = nil)
  if valid_595988 != nil:
    section.add "quotaUser", valid_595988
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_595989 = query.getOrDefault("id")
  valid_595989 = validateParameter(valid_595989, JString, required = true,
                                 default = nil)
  if valid_595989 != nil:
    section.add "id", valid_595989
  var valid_595990 = query.getOrDefault("alt")
  valid_595990 = validateParameter(valid_595990, JString, required = false,
                                 default = newJString("json"))
  if valid_595990 != nil:
    section.add "alt", valid_595990
  var valid_595991 = query.getOrDefault("oauth_token")
  valid_595991 = validateParameter(valid_595991, JString, required = false,
                                 default = nil)
  if valid_595991 != nil:
    section.add "oauth_token", valid_595991
  var valid_595992 = query.getOrDefault("userIp")
  valid_595992 = validateParameter(valid_595992, JString, required = false,
                                 default = nil)
  if valid_595992 != nil:
    section.add "userIp", valid_595992
  var valid_595993 = query.getOrDefault("key")
  valid_595993 = validateParameter(valid_595993, JString, required = false,
                                 default = nil)
  if valid_595993 != nil:
    section.add "key", valid_595993
  var valid_595994 = query.getOrDefault("prettyPrint")
  valid_595994 = validateParameter(valid_595994, JBool, required = false,
                                 default = newJBool(true))
  if valid_595994 != nil:
    section.add "prettyPrint", valid_595994
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_595996: Call_DfareportingFloodlightActivityGroupsPatch_595983;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight activity group. This method supports patch semantics.
  ## 
  let valid = call_595996.validator(path, query, header, formData, body)
  let scheme = call_595996.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_595996.url(scheme.get, call_595996.host, call_595996.base,
                         call_595996.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_595996, url, valid)

proc call*(call_595997: Call_DfareportingFloodlightActivityGroupsPatch_595983;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivityGroupsPatch
  ## Updates an existing floodlight activity group. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Floodlight activity Group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_595998 = newJObject()
  var query_595999 = newJObject()
  var body_596000 = newJObject()
  add(path_595998, "profileId", newJString(profileId))
  add(query_595999, "fields", newJString(fields))
  add(query_595999, "quotaUser", newJString(quotaUser))
  add(query_595999, "id", newJString(id))
  add(query_595999, "alt", newJString(alt))
  add(query_595999, "oauth_token", newJString(oauthToken))
  add(query_595999, "userIp", newJString(userIp))
  add(query_595999, "key", newJString(key))
  if body != nil:
    body_596000 = body
  add(query_595999, "prettyPrint", newJBool(prettyPrint))
  result = call_595997.call(path_595998, query_595999, nil, nil, body_596000)

var dfareportingFloodlightActivityGroupsPatch* = Call_DfareportingFloodlightActivityGroupsPatch_595983(
    name: "dfareportingFloodlightActivityGroupsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups",
    validator: validate_DfareportingFloodlightActivityGroupsPatch_595984,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightActivityGroupsPatch_595985,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightActivityGroupsGet_596001 = ref object of OpenApiRestCall_593437
proc url_DfareportingFloodlightActivityGroupsGet_596003(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightActivityGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightActivityGroupsGet_596002(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one floodlight activity group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Floodlight activity Group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596004 = path.getOrDefault("profileId")
  valid_596004 = validateParameter(valid_596004, JString, required = true,
                                 default = nil)
  if valid_596004 != nil:
    section.add "profileId", valid_596004
  var valid_596005 = path.getOrDefault("id")
  valid_596005 = validateParameter(valid_596005, JString, required = true,
                                 default = nil)
  if valid_596005 != nil:
    section.add "id", valid_596005
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596006 = query.getOrDefault("fields")
  valid_596006 = validateParameter(valid_596006, JString, required = false,
                                 default = nil)
  if valid_596006 != nil:
    section.add "fields", valid_596006
  var valid_596007 = query.getOrDefault("quotaUser")
  valid_596007 = validateParameter(valid_596007, JString, required = false,
                                 default = nil)
  if valid_596007 != nil:
    section.add "quotaUser", valid_596007
  var valid_596008 = query.getOrDefault("alt")
  valid_596008 = validateParameter(valid_596008, JString, required = false,
                                 default = newJString("json"))
  if valid_596008 != nil:
    section.add "alt", valid_596008
  var valid_596009 = query.getOrDefault("oauth_token")
  valid_596009 = validateParameter(valid_596009, JString, required = false,
                                 default = nil)
  if valid_596009 != nil:
    section.add "oauth_token", valid_596009
  var valid_596010 = query.getOrDefault("userIp")
  valid_596010 = validateParameter(valid_596010, JString, required = false,
                                 default = nil)
  if valid_596010 != nil:
    section.add "userIp", valid_596010
  var valid_596011 = query.getOrDefault("key")
  valid_596011 = validateParameter(valid_596011, JString, required = false,
                                 default = nil)
  if valid_596011 != nil:
    section.add "key", valid_596011
  var valid_596012 = query.getOrDefault("prettyPrint")
  valid_596012 = validateParameter(valid_596012, JBool, required = false,
                                 default = newJBool(true))
  if valid_596012 != nil:
    section.add "prettyPrint", valid_596012
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596013: Call_DfareportingFloodlightActivityGroupsGet_596001;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one floodlight activity group by ID.
  ## 
  let valid = call_596013.validator(path, query, header, formData, body)
  let scheme = call_596013.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596013.url(scheme.get, call_596013.host, call_596013.base,
                         call_596013.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596013, url, valid)

proc call*(call_596014: Call_DfareportingFloodlightActivityGroupsGet_596001;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightActivityGroupsGet
  ## Gets one floodlight activity group by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Floodlight activity Group ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596015 = newJObject()
  var query_596016 = newJObject()
  add(path_596015, "profileId", newJString(profileId))
  add(query_596016, "fields", newJString(fields))
  add(query_596016, "quotaUser", newJString(quotaUser))
  add(query_596016, "alt", newJString(alt))
  add(query_596016, "oauth_token", newJString(oauthToken))
  add(query_596016, "userIp", newJString(userIp))
  add(path_596015, "id", newJString(id))
  add(query_596016, "key", newJString(key))
  add(query_596016, "prettyPrint", newJBool(prettyPrint))
  result = call_596014.call(path_596015, query_596016, nil, nil, nil)

var dfareportingFloodlightActivityGroupsGet* = Call_DfareportingFloodlightActivityGroupsGet_596001(
    name: "dfareportingFloodlightActivityGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightActivityGroups/{id}",
    validator: validate_DfareportingFloodlightActivityGroupsGet_596002,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightActivityGroupsGet_596003,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightConfigurationsUpdate_596033 = ref object of OpenApiRestCall_593437
proc url_DfareportingFloodlightConfigurationsUpdate_596035(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightConfigurations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightConfigurationsUpdate_596034(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight configuration.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596036 = path.getOrDefault("profileId")
  valid_596036 = validateParameter(valid_596036, JString, required = true,
                                 default = nil)
  if valid_596036 != nil:
    section.add "profileId", valid_596036
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596037 = query.getOrDefault("fields")
  valid_596037 = validateParameter(valid_596037, JString, required = false,
                                 default = nil)
  if valid_596037 != nil:
    section.add "fields", valid_596037
  var valid_596038 = query.getOrDefault("quotaUser")
  valid_596038 = validateParameter(valid_596038, JString, required = false,
                                 default = nil)
  if valid_596038 != nil:
    section.add "quotaUser", valid_596038
  var valid_596039 = query.getOrDefault("alt")
  valid_596039 = validateParameter(valid_596039, JString, required = false,
                                 default = newJString("json"))
  if valid_596039 != nil:
    section.add "alt", valid_596039
  var valid_596040 = query.getOrDefault("oauth_token")
  valid_596040 = validateParameter(valid_596040, JString, required = false,
                                 default = nil)
  if valid_596040 != nil:
    section.add "oauth_token", valid_596040
  var valid_596041 = query.getOrDefault("userIp")
  valid_596041 = validateParameter(valid_596041, JString, required = false,
                                 default = nil)
  if valid_596041 != nil:
    section.add "userIp", valid_596041
  var valid_596042 = query.getOrDefault("key")
  valid_596042 = validateParameter(valid_596042, JString, required = false,
                                 default = nil)
  if valid_596042 != nil:
    section.add "key", valid_596042
  var valid_596043 = query.getOrDefault("prettyPrint")
  valid_596043 = validateParameter(valid_596043, JBool, required = false,
                                 default = newJBool(true))
  if valid_596043 != nil:
    section.add "prettyPrint", valid_596043
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596045: Call_DfareportingFloodlightConfigurationsUpdate_596033;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight configuration.
  ## 
  let valid = call_596045.validator(path, query, header, formData, body)
  let scheme = call_596045.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596045.url(scheme.get, call_596045.host, call_596045.base,
                         call_596045.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596045, url, valid)

proc call*(call_596046: Call_DfareportingFloodlightConfigurationsUpdate_596033;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightConfigurationsUpdate
  ## Updates an existing floodlight configuration.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596047 = newJObject()
  var query_596048 = newJObject()
  var body_596049 = newJObject()
  add(path_596047, "profileId", newJString(profileId))
  add(query_596048, "fields", newJString(fields))
  add(query_596048, "quotaUser", newJString(quotaUser))
  add(query_596048, "alt", newJString(alt))
  add(query_596048, "oauth_token", newJString(oauthToken))
  add(query_596048, "userIp", newJString(userIp))
  add(query_596048, "key", newJString(key))
  if body != nil:
    body_596049 = body
  add(query_596048, "prettyPrint", newJBool(prettyPrint))
  result = call_596046.call(path_596047, query_596048, nil, nil, body_596049)

var dfareportingFloodlightConfigurationsUpdate* = Call_DfareportingFloodlightConfigurationsUpdate_596033(
    name: "dfareportingFloodlightConfigurationsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightConfigurations",
    validator: validate_DfareportingFloodlightConfigurationsUpdate_596034,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightConfigurationsUpdate_596035,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightConfigurationsList_596017 = ref object of OpenApiRestCall_593437
proc url_DfareportingFloodlightConfigurationsList_596019(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightConfigurations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightConfigurationsList_596018(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of floodlight configurations, possibly filtered.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596020 = path.getOrDefault("profileId")
  valid_596020 = validateParameter(valid_596020, JString, required = true,
                                 default = nil)
  if valid_596020 != nil:
    section.add "profileId", valid_596020
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   ids: JArray
  ##      : Set of IDs of floodlight configurations to retrieve. Required field; otherwise an empty list will be returned.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596021 = query.getOrDefault("fields")
  valid_596021 = validateParameter(valid_596021, JString, required = false,
                                 default = nil)
  if valid_596021 != nil:
    section.add "fields", valid_596021
  var valid_596022 = query.getOrDefault("quotaUser")
  valid_596022 = validateParameter(valid_596022, JString, required = false,
                                 default = nil)
  if valid_596022 != nil:
    section.add "quotaUser", valid_596022
  var valid_596023 = query.getOrDefault("alt")
  valid_596023 = validateParameter(valid_596023, JString, required = false,
                                 default = newJString("json"))
  if valid_596023 != nil:
    section.add "alt", valid_596023
  var valid_596024 = query.getOrDefault("oauth_token")
  valid_596024 = validateParameter(valid_596024, JString, required = false,
                                 default = nil)
  if valid_596024 != nil:
    section.add "oauth_token", valid_596024
  var valid_596025 = query.getOrDefault("userIp")
  valid_596025 = validateParameter(valid_596025, JString, required = false,
                                 default = nil)
  if valid_596025 != nil:
    section.add "userIp", valid_596025
  var valid_596026 = query.getOrDefault("ids")
  valid_596026 = validateParameter(valid_596026, JArray, required = false,
                                 default = nil)
  if valid_596026 != nil:
    section.add "ids", valid_596026
  var valid_596027 = query.getOrDefault("key")
  valid_596027 = validateParameter(valid_596027, JString, required = false,
                                 default = nil)
  if valid_596027 != nil:
    section.add "key", valid_596027
  var valid_596028 = query.getOrDefault("prettyPrint")
  valid_596028 = validateParameter(valid_596028, JBool, required = false,
                                 default = newJBool(true))
  if valid_596028 != nil:
    section.add "prettyPrint", valid_596028
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596029: Call_DfareportingFloodlightConfigurationsList_596017;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of floodlight configurations, possibly filtered.
  ## 
  let valid = call_596029.validator(path, query, header, formData, body)
  let scheme = call_596029.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596029.url(scheme.get, call_596029.host, call_596029.base,
                         call_596029.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596029, url, valid)

proc call*(call_596030: Call_DfareportingFloodlightConfigurationsList_596017;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          ids: JsonNode = nil; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightConfigurationsList
  ## Retrieves a list of floodlight configurations, possibly filtered.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   ids: JArray
  ##      : Set of IDs of floodlight configurations to retrieve. Required field; otherwise an empty list will be returned.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596031 = newJObject()
  var query_596032 = newJObject()
  add(path_596031, "profileId", newJString(profileId))
  add(query_596032, "fields", newJString(fields))
  add(query_596032, "quotaUser", newJString(quotaUser))
  add(query_596032, "alt", newJString(alt))
  add(query_596032, "oauth_token", newJString(oauthToken))
  add(query_596032, "userIp", newJString(userIp))
  if ids != nil:
    query_596032.add "ids", ids
  add(query_596032, "key", newJString(key))
  add(query_596032, "prettyPrint", newJBool(prettyPrint))
  result = call_596030.call(path_596031, query_596032, nil, nil, nil)

var dfareportingFloodlightConfigurationsList* = Call_DfareportingFloodlightConfigurationsList_596017(
    name: "dfareportingFloodlightConfigurationsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightConfigurations",
    validator: validate_DfareportingFloodlightConfigurationsList_596018,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightConfigurationsList_596019,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightConfigurationsPatch_596050 = ref object of OpenApiRestCall_593437
proc url_DfareportingFloodlightConfigurationsPatch_596052(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightConfigurations")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightConfigurationsPatch_596051(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing floodlight configuration. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596053 = path.getOrDefault("profileId")
  valid_596053 = validateParameter(valid_596053, JString, required = true,
                                 default = nil)
  if valid_596053 != nil:
    section.add "profileId", valid_596053
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Floodlight configuration ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596054 = query.getOrDefault("fields")
  valid_596054 = validateParameter(valid_596054, JString, required = false,
                                 default = nil)
  if valid_596054 != nil:
    section.add "fields", valid_596054
  var valid_596055 = query.getOrDefault("quotaUser")
  valid_596055 = validateParameter(valid_596055, JString, required = false,
                                 default = nil)
  if valid_596055 != nil:
    section.add "quotaUser", valid_596055
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_596056 = query.getOrDefault("id")
  valid_596056 = validateParameter(valid_596056, JString, required = true,
                                 default = nil)
  if valid_596056 != nil:
    section.add "id", valid_596056
  var valid_596057 = query.getOrDefault("alt")
  valid_596057 = validateParameter(valid_596057, JString, required = false,
                                 default = newJString("json"))
  if valid_596057 != nil:
    section.add "alt", valid_596057
  var valid_596058 = query.getOrDefault("oauth_token")
  valid_596058 = validateParameter(valid_596058, JString, required = false,
                                 default = nil)
  if valid_596058 != nil:
    section.add "oauth_token", valid_596058
  var valid_596059 = query.getOrDefault("userIp")
  valid_596059 = validateParameter(valid_596059, JString, required = false,
                                 default = nil)
  if valid_596059 != nil:
    section.add "userIp", valid_596059
  var valid_596060 = query.getOrDefault("key")
  valid_596060 = validateParameter(valid_596060, JString, required = false,
                                 default = nil)
  if valid_596060 != nil:
    section.add "key", valid_596060
  var valid_596061 = query.getOrDefault("prettyPrint")
  valid_596061 = validateParameter(valid_596061, JBool, required = false,
                                 default = newJBool(true))
  if valid_596061 != nil:
    section.add "prettyPrint", valid_596061
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596063: Call_DfareportingFloodlightConfigurationsPatch_596050;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing floodlight configuration. This method supports patch semantics.
  ## 
  let valid = call_596063.validator(path, query, header, formData, body)
  let scheme = call_596063.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596063.url(scheme.get, call_596063.host, call_596063.base,
                         call_596063.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596063, url, valid)

proc call*(call_596064: Call_DfareportingFloodlightConfigurationsPatch_596050;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightConfigurationsPatch
  ## Updates an existing floodlight configuration. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Floodlight configuration ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596065 = newJObject()
  var query_596066 = newJObject()
  var body_596067 = newJObject()
  add(path_596065, "profileId", newJString(profileId))
  add(query_596066, "fields", newJString(fields))
  add(query_596066, "quotaUser", newJString(quotaUser))
  add(query_596066, "id", newJString(id))
  add(query_596066, "alt", newJString(alt))
  add(query_596066, "oauth_token", newJString(oauthToken))
  add(query_596066, "userIp", newJString(userIp))
  add(query_596066, "key", newJString(key))
  if body != nil:
    body_596067 = body
  add(query_596066, "prettyPrint", newJBool(prettyPrint))
  result = call_596064.call(path_596065, query_596066, nil, nil, body_596067)

var dfareportingFloodlightConfigurationsPatch* = Call_DfareportingFloodlightConfigurationsPatch_596050(
    name: "dfareportingFloodlightConfigurationsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightConfigurations",
    validator: validate_DfareportingFloodlightConfigurationsPatch_596051,
    base: "/dfareporting/v3.2",
    url: url_DfareportingFloodlightConfigurationsPatch_596052,
    schemes: {Scheme.Https})
type
  Call_DfareportingFloodlightConfigurationsGet_596068 = ref object of OpenApiRestCall_593437
proc url_DfareportingFloodlightConfigurationsGet_596070(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/floodlightConfigurations/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingFloodlightConfigurationsGet_596069(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one floodlight configuration by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Floodlight configuration ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596071 = path.getOrDefault("profileId")
  valid_596071 = validateParameter(valid_596071, JString, required = true,
                                 default = nil)
  if valid_596071 != nil:
    section.add "profileId", valid_596071
  var valid_596072 = path.getOrDefault("id")
  valid_596072 = validateParameter(valid_596072, JString, required = true,
                                 default = nil)
  if valid_596072 != nil:
    section.add "id", valid_596072
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596073 = query.getOrDefault("fields")
  valid_596073 = validateParameter(valid_596073, JString, required = false,
                                 default = nil)
  if valid_596073 != nil:
    section.add "fields", valid_596073
  var valid_596074 = query.getOrDefault("quotaUser")
  valid_596074 = validateParameter(valid_596074, JString, required = false,
                                 default = nil)
  if valid_596074 != nil:
    section.add "quotaUser", valid_596074
  var valid_596075 = query.getOrDefault("alt")
  valid_596075 = validateParameter(valid_596075, JString, required = false,
                                 default = newJString("json"))
  if valid_596075 != nil:
    section.add "alt", valid_596075
  var valid_596076 = query.getOrDefault("oauth_token")
  valid_596076 = validateParameter(valid_596076, JString, required = false,
                                 default = nil)
  if valid_596076 != nil:
    section.add "oauth_token", valid_596076
  var valid_596077 = query.getOrDefault("userIp")
  valid_596077 = validateParameter(valid_596077, JString, required = false,
                                 default = nil)
  if valid_596077 != nil:
    section.add "userIp", valid_596077
  var valid_596078 = query.getOrDefault("key")
  valid_596078 = validateParameter(valid_596078, JString, required = false,
                                 default = nil)
  if valid_596078 != nil:
    section.add "key", valid_596078
  var valid_596079 = query.getOrDefault("prettyPrint")
  valid_596079 = validateParameter(valid_596079, JBool, required = false,
                                 default = newJBool(true))
  if valid_596079 != nil:
    section.add "prettyPrint", valid_596079
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596080: Call_DfareportingFloodlightConfigurationsGet_596068;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one floodlight configuration by ID.
  ## 
  let valid = call_596080.validator(path, query, header, formData, body)
  let scheme = call_596080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596080.url(scheme.get, call_596080.host, call_596080.base,
                         call_596080.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596080, url, valid)

proc call*(call_596081: Call_DfareportingFloodlightConfigurationsGet_596068;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingFloodlightConfigurationsGet
  ## Gets one floodlight configuration by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Floodlight configuration ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596082 = newJObject()
  var query_596083 = newJObject()
  add(path_596082, "profileId", newJString(profileId))
  add(query_596083, "fields", newJString(fields))
  add(query_596083, "quotaUser", newJString(quotaUser))
  add(query_596083, "alt", newJString(alt))
  add(query_596083, "oauth_token", newJString(oauthToken))
  add(query_596083, "userIp", newJString(userIp))
  add(path_596082, "id", newJString(id))
  add(query_596083, "key", newJString(key))
  add(query_596083, "prettyPrint", newJBool(prettyPrint))
  result = call_596081.call(path_596082, query_596083, nil, nil, nil)

var dfareportingFloodlightConfigurationsGet* = Call_DfareportingFloodlightConfigurationsGet_596068(
    name: "dfareportingFloodlightConfigurationsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/floodlightConfigurations/{id}",
    validator: validate_DfareportingFloodlightConfigurationsGet_596069,
    base: "/dfareporting/v3.2", url: url_DfareportingFloodlightConfigurationsGet_596070,
    schemes: {Scheme.Https})
type
  Call_DfareportingLanguagesList_596084 = ref object of OpenApiRestCall_593437
proc url_DfareportingLanguagesList_596086(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/languages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingLanguagesList_596085(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of languages.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596087 = path.getOrDefault("profileId")
  valid_596087 = validateParameter(valid_596087, JString, required = true,
                                 default = nil)
  if valid_596087 != nil:
    section.add "profileId", valid_596087
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596088 = query.getOrDefault("fields")
  valid_596088 = validateParameter(valid_596088, JString, required = false,
                                 default = nil)
  if valid_596088 != nil:
    section.add "fields", valid_596088
  var valid_596089 = query.getOrDefault("quotaUser")
  valid_596089 = validateParameter(valid_596089, JString, required = false,
                                 default = nil)
  if valid_596089 != nil:
    section.add "quotaUser", valid_596089
  var valid_596090 = query.getOrDefault("alt")
  valid_596090 = validateParameter(valid_596090, JString, required = false,
                                 default = newJString("json"))
  if valid_596090 != nil:
    section.add "alt", valid_596090
  var valid_596091 = query.getOrDefault("oauth_token")
  valid_596091 = validateParameter(valid_596091, JString, required = false,
                                 default = nil)
  if valid_596091 != nil:
    section.add "oauth_token", valid_596091
  var valid_596092 = query.getOrDefault("userIp")
  valid_596092 = validateParameter(valid_596092, JString, required = false,
                                 default = nil)
  if valid_596092 != nil:
    section.add "userIp", valid_596092
  var valid_596093 = query.getOrDefault("key")
  valid_596093 = validateParameter(valid_596093, JString, required = false,
                                 default = nil)
  if valid_596093 != nil:
    section.add "key", valid_596093
  var valid_596094 = query.getOrDefault("prettyPrint")
  valid_596094 = validateParameter(valid_596094, JBool, required = false,
                                 default = newJBool(true))
  if valid_596094 != nil:
    section.add "prettyPrint", valid_596094
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596095: Call_DfareportingLanguagesList_596084; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of languages.
  ## 
  let valid = call_596095.validator(path, query, header, formData, body)
  let scheme = call_596095.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596095.url(scheme.get, call_596095.host, call_596095.base,
                         call_596095.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596095, url, valid)

proc call*(call_596096: Call_DfareportingLanguagesList_596084; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingLanguagesList
  ## Retrieves a list of languages.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596097 = newJObject()
  var query_596098 = newJObject()
  add(path_596097, "profileId", newJString(profileId))
  add(query_596098, "fields", newJString(fields))
  add(query_596098, "quotaUser", newJString(quotaUser))
  add(query_596098, "alt", newJString(alt))
  add(query_596098, "oauth_token", newJString(oauthToken))
  add(query_596098, "userIp", newJString(userIp))
  add(query_596098, "key", newJString(key))
  add(query_596098, "prettyPrint", newJBool(prettyPrint))
  result = call_596096.call(path_596097, query_596098, nil, nil, nil)

var dfareportingLanguagesList* = Call_DfareportingLanguagesList_596084(
    name: "dfareportingLanguagesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/languages",
    validator: validate_DfareportingLanguagesList_596085,
    base: "/dfareporting/v3.2", url: url_DfareportingLanguagesList_596086,
    schemes: {Scheme.Https})
type
  Call_DfareportingMetrosList_596099 = ref object of OpenApiRestCall_593437
proc url_DfareportingMetrosList_596101(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/metros")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMetrosList_596100(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of metros.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596102 = path.getOrDefault("profileId")
  valid_596102 = validateParameter(valid_596102, JString, required = true,
                                 default = nil)
  if valid_596102 != nil:
    section.add "profileId", valid_596102
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596103 = query.getOrDefault("fields")
  valid_596103 = validateParameter(valid_596103, JString, required = false,
                                 default = nil)
  if valid_596103 != nil:
    section.add "fields", valid_596103
  var valid_596104 = query.getOrDefault("quotaUser")
  valid_596104 = validateParameter(valid_596104, JString, required = false,
                                 default = nil)
  if valid_596104 != nil:
    section.add "quotaUser", valid_596104
  var valid_596105 = query.getOrDefault("alt")
  valid_596105 = validateParameter(valid_596105, JString, required = false,
                                 default = newJString("json"))
  if valid_596105 != nil:
    section.add "alt", valid_596105
  var valid_596106 = query.getOrDefault("oauth_token")
  valid_596106 = validateParameter(valid_596106, JString, required = false,
                                 default = nil)
  if valid_596106 != nil:
    section.add "oauth_token", valid_596106
  var valid_596107 = query.getOrDefault("userIp")
  valid_596107 = validateParameter(valid_596107, JString, required = false,
                                 default = nil)
  if valid_596107 != nil:
    section.add "userIp", valid_596107
  var valid_596108 = query.getOrDefault("key")
  valid_596108 = validateParameter(valid_596108, JString, required = false,
                                 default = nil)
  if valid_596108 != nil:
    section.add "key", valid_596108
  var valid_596109 = query.getOrDefault("prettyPrint")
  valid_596109 = validateParameter(valid_596109, JBool, required = false,
                                 default = newJBool(true))
  if valid_596109 != nil:
    section.add "prettyPrint", valid_596109
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596110: Call_DfareportingMetrosList_596099; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of metros.
  ## 
  let valid = call_596110.validator(path, query, header, formData, body)
  let scheme = call_596110.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596110.url(scheme.get, call_596110.host, call_596110.base,
                         call_596110.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596110, url, valid)

proc call*(call_596111: Call_DfareportingMetrosList_596099; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingMetrosList
  ## Retrieves a list of metros.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596112 = newJObject()
  var query_596113 = newJObject()
  add(path_596112, "profileId", newJString(profileId))
  add(query_596113, "fields", newJString(fields))
  add(query_596113, "quotaUser", newJString(quotaUser))
  add(query_596113, "alt", newJString(alt))
  add(query_596113, "oauth_token", newJString(oauthToken))
  add(query_596113, "userIp", newJString(userIp))
  add(query_596113, "key", newJString(key))
  add(query_596113, "prettyPrint", newJBool(prettyPrint))
  result = call_596111.call(path_596112, query_596113, nil, nil, nil)

var dfareportingMetrosList* = Call_DfareportingMetrosList_596099(
    name: "dfareportingMetrosList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/metros",
    validator: validate_DfareportingMetrosList_596100, base: "/dfareporting/v3.2",
    url: url_DfareportingMetrosList_596101, schemes: {Scheme.Https})
type
  Call_DfareportingMobileAppsList_596114 = ref object of OpenApiRestCall_593437
proc url_DfareportingMobileAppsList_596116(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/mobileApps")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMobileAppsList_596115(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves list of available mobile apps.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596117 = path.getOrDefault("profileId")
  valid_596117 = validateParameter(valid_596117, JString, required = true,
                                 default = nil)
  if valid_596117 != nil:
    section.add "profileId", valid_596117
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "app*2015" will return objects with names like "app Jan 2018", "app Jan 2018", or simply "app 2018". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "app" will match objects with name "my app", "app 2018", or simply "app".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   directories: JArray
  ##              : Select only apps from these directories.
  ##   ids: JArray
  ##      : Select only apps with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596118 = query.getOrDefault("fields")
  valid_596118 = validateParameter(valid_596118, JString, required = false,
                                 default = nil)
  if valid_596118 != nil:
    section.add "fields", valid_596118
  var valid_596119 = query.getOrDefault("pageToken")
  valid_596119 = validateParameter(valid_596119, JString, required = false,
                                 default = nil)
  if valid_596119 != nil:
    section.add "pageToken", valid_596119
  var valid_596120 = query.getOrDefault("quotaUser")
  valid_596120 = validateParameter(valid_596120, JString, required = false,
                                 default = nil)
  if valid_596120 != nil:
    section.add "quotaUser", valid_596120
  var valid_596121 = query.getOrDefault("alt")
  valid_596121 = validateParameter(valid_596121, JString, required = false,
                                 default = newJString("json"))
  if valid_596121 != nil:
    section.add "alt", valid_596121
  var valid_596122 = query.getOrDefault("searchString")
  valid_596122 = validateParameter(valid_596122, JString, required = false,
                                 default = nil)
  if valid_596122 != nil:
    section.add "searchString", valid_596122
  var valid_596123 = query.getOrDefault("oauth_token")
  valid_596123 = validateParameter(valid_596123, JString, required = false,
                                 default = nil)
  if valid_596123 != nil:
    section.add "oauth_token", valid_596123
  var valid_596124 = query.getOrDefault("userIp")
  valid_596124 = validateParameter(valid_596124, JString, required = false,
                                 default = nil)
  if valid_596124 != nil:
    section.add "userIp", valid_596124
  var valid_596125 = query.getOrDefault("maxResults")
  valid_596125 = validateParameter(valid_596125, JInt, required = false,
                                 default = newJInt(1000))
  if valid_596125 != nil:
    section.add "maxResults", valid_596125
  var valid_596126 = query.getOrDefault("directories")
  valid_596126 = validateParameter(valid_596126, JArray, required = false,
                                 default = nil)
  if valid_596126 != nil:
    section.add "directories", valid_596126
  var valid_596127 = query.getOrDefault("ids")
  valid_596127 = validateParameter(valid_596127, JArray, required = false,
                                 default = nil)
  if valid_596127 != nil:
    section.add "ids", valid_596127
  var valid_596128 = query.getOrDefault("key")
  valid_596128 = validateParameter(valid_596128, JString, required = false,
                                 default = nil)
  if valid_596128 != nil:
    section.add "key", valid_596128
  var valid_596129 = query.getOrDefault("prettyPrint")
  valid_596129 = validateParameter(valid_596129, JBool, required = false,
                                 default = newJBool(true))
  if valid_596129 != nil:
    section.add "prettyPrint", valid_596129
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596130: Call_DfareportingMobileAppsList_596114; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves list of available mobile apps.
  ## 
  let valid = call_596130.validator(path, query, header, formData, body)
  let scheme = call_596130.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596130.url(scheme.get, call_596130.host, call_596130.base,
                         call_596130.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596130, url, valid)

proc call*(call_596131: Call_DfareportingMobileAppsList_596114; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          alt: string = "json"; searchString: string = ""; oauthToken: string = "";
          userIp: string = ""; maxResults: int = 1000; directories: JsonNode = nil;
          ids: JsonNode = nil; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingMobileAppsList
  ## Retrieves list of available mobile apps.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "app*2015" will return objects with names like "app Jan 2018", "app Jan 2018", or simply "app 2018". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "app" will match objects with name "my app", "app 2018", or simply "app".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   directories: JArray
  ##              : Select only apps from these directories.
  ##   ids: JArray
  ##      : Select only apps with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596132 = newJObject()
  var query_596133 = newJObject()
  add(path_596132, "profileId", newJString(profileId))
  add(query_596133, "fields", newJString(fields))
  add(query_596133, "pageToken", newJString(pageToken))
  add(query_596133, "quotaUser", newJString(quotaUser))
  add(query_596133, "alt", newJString(alt))
  add(query_596133, "searchString", newJString(searchString))
  add(query_596133, "oauth_token", newJString(oauthToken))
  add(query_596133, "userIp", newJString(userIp))
  add(query_596133, "maxResults", newJInt(maxResults))
  if directories != nil:
    query_596133.add "directories", directories
  if ids != nil:
    query_596133.add "ids", ids
  add(query_596133, "key", newJString(key))
  add(query_596133, "prettyPrint", newJBool(prettyPrint))
  result = call_596131.call(path_596132, query_596133, nil, nil, nil)

var dfareportingMobileAppsList* = Call_DfareportingMobileAppsList_596114(
    name: "dfareportingMobileAppsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/mobileApps",
    validator: validate_DfareportingMobileAppsList_596115,
    base: "/dfareporting/v3.2", url: url_DfareportingMobileAppsList_596116,
    schemes: {Scheme.Https})
type
  Call_DfareportingMobileAppsGet_596134 = ref object of OpenApiRestCall_593437
proc url_DfareportingMobileAppsGet_596136(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/mobileApps/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMobileAppsGet_596135(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one mobile app by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Mobile app ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596137 = path.getOrDefault("profileId")
  valid_596137 = validateParameter(valid_596137, JString, required = true,
                                 default = nil)
  if valid_596137 != nil:
    section.add "profileId", valid_596137
  var valid_596138 = path.getOrDefault("id")
  valid_596138 = validateParameter(valid_596138, JString, required = true,
                                 default = nil)
  if valid_596138 != nil:
    section.add "id", valid_596138
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596139 = query.getOrDefault("fields")
  valid_596139 = validateParameter(valid_596139, JString, required = false,
                                 default = nil)
  if valid_596139 != nil:
    section.add "fields", valid_596139
  var valid_596140 = query.getOrDefault("quotaUser")
  valid_596140 = validateParameter(valid_596140, JString, required = false,
                                 default = nil)
  if valid_596140 != nil:
    section.add "quotaUser", valid_596140
  var valid_596141 = query.getOrDefault("alt")
  valid_596141 = validateParameter(valid_596141, JString, required = false,
                                 default = newJString("json"))
  if valid_596141 != nil:
    section.add "alt", valid_596141
  var valid_596142 = query.getOrDefault("oauth_token")
  valid_596142 = validateParameter(valid_596142, JString, required = false,
                                 default = nil)
  if valid_596142 != nil:
    section.add "oauth_token", valid_596142
  var valid_596143 = query.getOrDefault("userIp")
  valid_596143 = validateParameter(valid_596143, JString, required = false,
                                 default = nil)
  if valid_596143 != nil:
    section.add "userIp", valid_596143
  var valid_596144 = query.getOrDefault("key")
  valid_596144 = validateParameter(valid_596144, JString, required = false,
                                 default = nil)
  if valid_596144 != nil:
    section.add "key", valid_596144
  var valid_596145 = query.getOrDefault("prettyPrint")
  valid_596145 = validateParameter(valid_596145, JBool, required = false,
                                 default = newJBool(true))
  if valid_596145 != nil:
    section.add "prettyPrint", valid_596145
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596146: Call_DfareportingMobileAppsGet_596134; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one mobile app by ID.
  ## 
  let valid = call_596146.validator(path, query, header, formData, body)
  let scheme = call_596146.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596146.url(scheme.get, call_596146.host, call_596146.base,
                         call_596146.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596146, url, valid)

proc call*(call_596147: Call_DfareportingMobileAppsGet_596134; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingMobileAppsGet
  ## Gets one mobile app by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Mobile app ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596148 = newJObject()
  var query_596149 = newJObject()
  add(path_596148, "profileId", newJString(profileId))
  add(query_596149, "fields", newJString(fields))
  add(query_596149, "quotaUser", newJString(quotaUser))
  add(query_596149, "alt", newJString(alt))
  add(query_596149, "oauth_token", newJString(oauthToken))
  add(query_596149, "userIp", newJString(userIp))
  add(path_596148, "id", newJString(id))
  add(query_596149, "key", newJString(key))
  add(query_596149, "prettyPrint", newJBool(prettyPrint))
  result = call_596147.call(path_596148, query_596149, nil, nil, nil)

var dfareportingMobileAppsGet* = Call_DfareportingMobileAppsGet_596134(
    name: "dfareportingMobileAppsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/mobileApps/{id}",
    validator: validate_DfareportingMobileAppsGet_596135,
    base: "/dfareporting/v3.2", url: url_DfareportingMobileAppsGet_596136,
    schemes: {Scheme.Https})
type
  Call_DfareportingMobileCarriersList_596150 = ref object of OpenApiRestCall_593437
proc url_DfareportingMobileCarriersList_596152(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/mobileCarriers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMobileCarriersList_596151(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of mobile carriers.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596153 = path.getOrDefault("profileId")
  valid_596153 = validateParameter(valid_596153, JString, required = true,
                                 default = nil)
  if valid_596153 != nil:
    section.add "profileId", valid_596153
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596154 = query.getOrDefault("fields")
  valid_596154 = validateParameter(valid_596154, JString, required = false,
                                 default = nil)
  if valid_596154 != nil:
    section.add "fields", valid_596154
  var valid_596155 = query.getOrDefault("quotaUser")
  valid_596155 = validateParameter(valid_596155, JString, required = false,
                                 default = nil)
  if valid_596155 != nil:
    section.add "quotaUser", valid_596155
  var valid_596156 = query.getOrDefault("alt")
  valid_596156 = validateParameter(valid_596156, JString, required = false,
                                 default = newJString("json"))
  if valid_596156 != nil:
    section.add "alt", valid_596156
  var valid_596157 = query.getOrDefault("oauth_token")
  valid_596157 = validateParameter(valid_596157, JString, required = false,
                                 default = nil)
  if valid_596157 != nil:
    section.add "oauth_token", valid_596157
  var valid_596158 = query.getOrDefault("userIp")
  valid_596158 = validateParameter(valid_596158, JString, required = false,
                                 default = nil)
  if valid_596158 != nil:
    section.add "userIp", valid_596158
  var valid_596159 = query.getOrDefault("key")
  valid_596159 = validateParameter(valid_596159, JString, required = false,
                                 default = nil)
  if valid_596159 != nil:
    section.add "key", valid_596159
  var valid_596160 = query.getOrDefault("prettyPrint")
  valid_596160 = validateParameter(valid_596160, JBool, required = false,
                                 default = newJBool(true))
  if valid_596160 != nil:
    section.add "prettyPrint", valid_596160
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596161: Call_DfareportingMobileCarriersList_596150; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of mobile carriers.
  ## 
  let valid = call_596161.validator(path, query, header, formData, body)
  let scheme = call_596161.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596161.url(scheme.get, call_596161.host, call_596161.base,
                         call_596161.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596161, url, valid)

proc call*(call_596162: Call_DfareportingMobileCarriersList_596150;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingMobileCarriersList
  ## Retrieves a list of mobile carriers.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596163 = newJObject()
  var query_596164 = newJObject()
  add(path_596163, "profileId", newJString(profileId))
  add(query_596164, "fields", newJString(fields))
  add(query_596164, "quotaUser", newJString(quotaUser))
  add(query_596164, "alt", newJString(alt))
  add(query_596164, "oauth_token", newJString(oauthToken))
  add(query_596164, "userIp", newJString(userIp))
  add(query_596164, "key", newJString(key))
  add(query_596164, "prettyPrint", newJBool(prettyPrint))
  result = call_596162.call(path_596163, query_596164, nil, nil, nil)

var dfareportingMobileCarriersList* = Call_DfareportingMobileCarriersList_596150(
    name: "dfareportingMobileCarriersList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/mobileCarriers",
    validator: validate_DfareportingMobileCarriersList_596151,
    base: "/dfareporting/v3.2", url: url_DfareportingMobileCarriersList_596152,
    schemes: {Scheme.Https})
type
  Call_DfareportingMobileCarriersGet_596165 = ref object of OpenApiRestCall_593437
proc url_DfareportingMobileCarriersGet_596167(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/mobileCarriers/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingMobileCarriersGet_596166(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one mobile carrier by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Mobile carrier ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596168 = path.getOrDefault("profileId")
  valid_596168 = validateParameter(valid_596168, JString, required = true,
                                 default = nil)
  if valid_596168 != nil:
    section.add "profileId", valid_596168
  var valid_596169 = path.getOrDefault("id")
  valid_596169 = validateParameter(valid_596169, JString, required = true,
                                 default = nil)
  if valid_596169 != nil:
    section.add "id", valid_596169
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596170 = query.getOrDefault("fields")
  valid_596170 = validateParameter(valid_596170, JString, required = false,
                                 default = nil)
  if valid_596170 != nil:
    section.add "fields", valid_596170
  var valid_596171 = query.getOrDefault("quotaUser")
  valid_596171 = validateParameter(valid_596171, JString, required = false,
                                 default = nil)
  if valid_596171 != nil:
    section.add "quotaUser", valid_596171
  var valid_596172 = query.getOrDefault("alt")
  valid_596172 = validateParameter(valid_596172, JString, required = false,
                                 default = newJString("json"))
  if valid_596172 != nil:
    section.add "alt", valid_596172
  var valid_596173 = query.getOrDefault("oauth_token")
  valid_596173 = validateParameter(valid_596173, JString, required = false,
                                 default = nil)
  if valid_596173 != nil:
    section.add "oauth_token", valid_596173
  var valid_596174 = query.getOrDefault("userIp")
  valid_596174 = validateParameter(valid_596174, JString, required = false,
                                 default = nil)
  if valid_596174 != nil:
    section.add "userIp", valid_596174
  var valid_596175 = query.getOrDefault("key")
  valid_596175 = validateParameter(valid_596175, JString, required = false,
                                 default = nil)
  if valid_596175 != nil:
    section.add "key", valid_596175
  var valid_596176 = query.getOrDefault("prettyPrint")
  valid_596176 = validateParameter(valid_596176, JBool, required = false,
                                 default = newJBool(true))
  if valid_596176 != nil:
    section.add "prettyPrint", valid_596176
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596177: Call_DfareportingMobileCarriersGet_596165; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one mobile carrier by ID.
  ## 
  let valid = call_596177.validator(path, query, header, formData, body)
  let scheme = call_596177.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596177.url(scheme.get, call_596177.host, call_596177.base,
                         call_596177.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596177, url, valid)

proc call*(call_596178: Call_DfareportingMobileCarriersGet_596165;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingMobileCarriersGet
  ## Gets one mobile carrier by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Mobile carrier ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596179 = newJObject()
  var query_596180 = newJObject()
  add(path_596179, "profileId", newJString(profileId))
  add(query_596180, "fields", newJString(fields))
  add(query_596180, "quotaUser", newJString(quotaUser))
  add(query_596180, "alt", newJString(alt))
  add(query_596180, "oauth_token", newJString(oauthToken))
  add(query_596180, "userIp", newJString(userIp))
  add(path_596179, "id", newJString(id))
  add(query_596180, "key", newJString(key))
  add(query_596180, "prettyPrint", newJBool(prettyPrint))
  result = call_596178.call(path_596179, query_596180, nil, nil, nil)

var dfareportingMobileCarriersGet* = Call_DfareportingMobileCarriersGet_596165(
    name: "dfareportingMobileCarriersGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/mobileCarriers/{id}",
    validator: validate_DfareportingMobileCarriersGet_596166,
    base: "/dfareporting/v3.2", url: url_DfareportingMobileCarriersGet_596167,
    schemes: {Scheme.Https})
type
  Call_DfareportingOperatingSystemVersionsList_596181 = ref object of OpenApiRestCall_593437
proc url_DfareportingOperatingSystemVersionsList_596183(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/operatingSystemVersions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOperatingSystemVersionsList_596182(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of operating system versions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596184 = path.getOrDefault("profileId")
  valid_596184 = validateParameter(valid_596184, JString, required = true,
                                 default = nil)
  if valid_596184 != nil:
    section.add "profileId", valid_596184
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596185 = query.getOrDefault("fields")
  valid_596185 = validateParameter(valid_596185, JString, required = false,
                                 default = nil)
  if valid_596185 != nil:
    section.add "fields", valid_596185
  var valid_596186 = query.getOrDefault("quotaUser")
  valid_596186 = validateParameter(valid_596186, JString, required = false,
                                 default = nil)
  if valid_596186 != nil:
    section.add "quotaUser", valid_596186
  var valid_596187 = query.getOrDefault("alt")
  valid_596187 = validateParameter(valid_596187, JString, required = false,
                                 default = newJString("json"))
  if valid_596187 != nil:
    section.add "alt", valid_596187
  var valid_596188 = query.getOrDefault("oauth_token")
  valid_596188 = validateParameter(valid_596188, JString, required = false,
                                 default = nil)
  if valid_596188 != nil:
    section.add "oauth_token", valid_596188
  var valid_596189 = query.getOrDefault("userIp")
  valid_596189 = validateParameter(valid_596189, JString, required = false,
                                 default = nil)
  if valid_596189 != nil:
    section.add "userIp", valid_596189
  var valid_596190 = query.getOrDefault("key")
  valid_596190 = validateParameter(valid_596190, JString, required = false,
                                 default = nil)
  if valid_596190 != nil:
    section.add "key", valid_596190
  var valid_596191 = query.getOrDefault("prettyPrint")
  valid_596191 = validateParameter(valid_596191, JBool, required = false,
                                 default = newJBool(true))
  if valid_596191 != nil:
    section.add "prettyPrint", valid_596191
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596192: Call_DfareportingOperatingSystemVersionsList_596181;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of operating system versions.
  ## 
  let valid = call_596192.validator(path, query, header, formData, body)
  let scheme = call_596192.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596192.url(scheme.get, call_596192.host, call_596192.base,
                         call_596192.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596192, url, valid)

proc call*(call_596193: Call_DfareportingOperatingSystemVersionsList_596181;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingOperatingSystemVersionsList
  ## Retrieves a list of operating system versions.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596194 = newJObject()
  var query_596195 = newJObject()
  add(path_596194, "profileId", newJString(profileId))
  add(query_596195, "fields", newJString(fields))
  add(query_596195, "quotaUser", newJString(quotaUser))
  add(query_596195, "alt", newJString(alt))
  add(query_596195, "oauth_token", newJString(oauthToken))
  add(query_596195, "userIp", newJString(userIp))
  add(query_596195, "key", newJString(key))
  add(query_596195, "prettyPrint", newJBool(prettyPrint))
  result = call_596193.call(path_596194, query_596195, nil, nil, nil)

var dfareportingOperatingSystemVersionsList* = Call_DfareportingOperatingSystemVersionsList_596181(
    name: "dfareportingOperatingSystemVersionsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/operatingSystemVersions",
    validator: validate_DfareportingOperatingSystemVersionsList_596182,
    base: "/dfareporting/v3.2", url: url_DfareportingOperatingSystemVersionsList_596183,
    schemes: {Scheme.Https})
type
  Call_DfareportingOperatingSystemVersionsGet_596196 = ref object of OpenApiRestCall_593437
proc url_DfareportingOperatingSystemVersionsGet_596198(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/operatingSystemVersions/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOperatingSystemVersionsGet_596197(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one operating system version by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Operating system version ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596199 = path.getOrDefault("profileId")
  valid_596199 = validateParameter(valid_596199, JString, required = true,
                                 default = nil)
  if valid_596199 != nil:
    section.add "profileId", valid_596199
  var valid_596200 = path.getOrDefault("id")
  valid_596200 = validateParameter(valid_596200, JString, required = true,
                                 default = nil)
  if valid_596200 != nil:
    section.add "id", valid_596200
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596201 = query.getOrDefault("fields")
  valid_596201 = validateParameter(valid_596201, JString, required = false,
                                 default = nil)
  if valid_596201 != nil:
    section.add "fields", valid_596201
  var valid_596202 = query.getOrDefault("quotaUser")
  valid_596202 = validateParameter(valid_596202, JString, required = false,
                                 default = nil)
  if valid_596202 != nil:
    section.add "quotaUser", valid_596202
  var valid_596203 = query.getOrDefault("alt")
  valid_596203 = validateParameter(valid_596203, JString, required = false,
                                 default = newJString("json"))
  if valid_596203 != nil:
    section.add "alt", valid_596203
  var valid_596204 = query.getOrDefault("oauth_token")
  valid_596204 = validateParameter(valid_596204, JString, required = false,
                                 default = nil)
  if valid_596204 != nil:
    section.add "oauth_token", valid_596204
  var valid_596205 = query.getOrDefault("userIp")
  valid_596205 = validateParameter(valid_596205, JString, required = false,
                                 default = nil)
  if valid_596205 != nil:
    section.add "userIp", valid_596205
  var valid_596206 = query.getOrDefault("key")
  valid_596206 = validateParameter(valid_596206, JString, required = false,
                                 default = nil)
  if valid_596206 != nil:
    section.add "key", valid_596206
  var valid_596207 = query.getOrDefault("prettyPrint")
  valid_596207 = validateParameter(valid_596207, JBool, required = false,
                                 default = newJBool(true))
  if valid_596207 != nil:
    section.add "prettyPrint", valid_596207
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596208: Call_DfareportingOperatingSystemVersionsGet_596196;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one operating system version by ID.
  ## 
  let valid = call_596208.validator(path, query, header, formData, body)
  let scheme = call_596208.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596208.url(scheme.get, call_596208.host, call_596208.base,
                         call_596208.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596208, url, valid)

proc call*(call_596209: Call_DfareportingOperatingSystemVersionsGet_596196;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingOperatingSystemVersionsGet
  ## Gets one operating system version by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Operating system version ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596210 = newJObject()
  var query_596211 = newJObject()
  add(path_596210, "profileId", newJString(profileId))
  add(query_596211, "fields", newJString(fields))
  add(query_596211, "quotaUser", newJString(quotaUser))
  add(query_596211, "alt", newJString(alt))
  add(query_596211, "oauth_token", newJString(oauthToken))
  add(query_596211, "userIp", newJString(userIp))
  add(path_596210, "id", newJString(id))
  add(query_596211, "key", newJString(key))
  add(query_596211, "prettyPrint", newJBool(prettyPrint))
  result = call_596209.call(path_596210, query_596211, nil, nil, nil)

var dfareportingOperatingSystemVersionsGet* = Call_DfareportingOperatingSystemVersionsGet_596196(
    name: "dfareportingOperatingSystemVersionsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/operatingSystemVersions/{id}",
    validator: validate_DfareportingOperatingSystemVersionsGet_596197,
    base: "/dfareporting/v3.2", url: url_DfareportingOperatingSystemVersionsGet_596198,
    schemes: {Scheme.Https})
type
  Call_DfareportingOperatingSystemsList_596212 = ref object of OpenApiRestCall_593437
proc url_DfareportingOperatingSystemsList_596214(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/operatingSystems")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOperatingSystemsList_596213(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of operating systems.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596215 = path.getOrDefault("profileId")
  valid_596215 = validateParameter(valid_596215, JString, required = true,
                                 default = nil)
  if valid_596215 != nil:
    section.add "profileId", valid_596215
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596216 = query.getOrDefault("fields")
  valid_596216 = validateParameter(valid_596216, JString, required = false,
                                 default = nil)
  if valid_596216 != nil:
    section.add "fields", valid_596216
  var valid_596217 = query.getOrDefault("quotaUser")
  valid_596217 = validateParameter(valid_596217, JString, required = false,
                                 default = nil)
  if valid_596217 != nil:
    section.add "quotaUser", valid_596217
  var valid_596218 = query.getOrDefault("alt")
  valid_596218 = validateParameter(valid_596218, JString, required = false,
                                 default = newJString("json"))
  if valid_596218 != nil:
    section.add "alt", valid_596218
  var valid_596219 = query.getOrDefault("oauth_token")
  valid_596219 = validateParameter(valid_596219, JString, required = false,
                                 default = nil)
  if valid_596219 != nil:
    section.add "oauth_token", valid_596219
  var valid_596220 = query.getOrDefault("userIp")
  valid_596220 = validateParameter(valid_596220, JString, required = false,
                                 default = nil)
  if valid_596220 != nil:
    section.add "userIp", valid_596220
  var valid_596221 = query.getOrDefault("key")
  valid_596221 = validateParameter(valid_596221, JString, required = false,
                                 default = nil)
  if valid_596221 != nil:
    section.add "key", valid_596221
  var valid_596222 = query.getOrDefault("prettyPrint")
  valid_596222 = validateParameter(valid_596222, JBool, required = false,
                                 default = newJBool(true))
  if valid_596222 != nil:
    section.add "prettyPrint", valid_596222
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596223: Call_DfareportingOperatingSystemsList_596212;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of operating systems.
  ## 
  let valid = call_596223.validator(path, query, header, formData, body)
  let scheme = call_596223.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596223.url(scheme.get, call_596223.host, call_596223.base,
                         call_596223.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596223, url, valid)

proc call*(call_596224: Call_DfareportingOperatingSystemsList_596212;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingOperatingSystemsList
  ## Retrieves a list of operating systems.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596225 = newJObject()
  var query_596226 = newJObject()
  add(path_596225, "profileId", newJString(profileId))
  add(query_596226, "fields", newJString(fields))
  add(query_596226, "quotaUser", newJString(quotaUser))
  add(query_596226, "alt", newJString(alt))
  add(query_596226, "oauth_token", newJString(oauthToken))
  add(query_596226, "userIp", newJString(userIp))
  add(query_596226, "key", newJString(key))
  add(query_596226, "prettyPrint", newJBool(prettyPrint))
  result = call_596224.call(path_596225, query_596226, nil, nil, nil)

var dfareportingOperatingSystemsList* = Call_DfareportingOperatingSystemsList_596212(
    name: "dfareportingOperatingSystemsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/operatingSystems",
    validator: validate_DfareportingOperatingSystemsList_596213,
    base: "/dfareporting/v3.2", url: url_DfareportingOperatingSystemsList_596214,
    schemes: {Scheme.Https})
type
  Call_DfareportingOperatingSystemsGet_596227 = ref object of OpenApiRestCall_593437
proc url_DfareportingOperatingSystemsGet_596229(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "dartId" in path, "`dartId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/operatingSystems/"),
               (kind: VariableSegment, value: "dartId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOperatingSystemsGet_596228(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one operating system by DART ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   dartId: JString (required)
  ##         : Operating system DART ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596230 = path.getOrDefault("profileId")
  valid_596230 = validateParameter(valid_596230, JString, required = true,
                                 default = nil)
  if valid_596230 != nil:
    section.add "profileId", valid_596230
  var valid_596231 = path.getOrDefault("dartId")
  valid_596231 = validateParameter(valid_596231, JString, required = true,
                                 default = nil)
  if valid_596231 != nil:
    section.add "dartId", valid_596231
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596232 = query.getOrDefault("fields")
  valid_596232 = validateParameter(valid_596232, JString, required = false,
                                 default = nil)
  if valid_596232 != nil:
    section.add "fields", valid_596232
  var valid_596233 = query.getOrDefault("quotaUser")
  valid_596233 = validateParameter(valid_596233, JString, required = false,
                                 default = nil)
  if valid_596233 != nil:
    section.add "quotaUser", valid_596233
  var valid_596234 = query.getOrDefault("alt")
  valid_596234 = validateParameter(valid_596234, JString, required = false,
                                 default = newJString("json"))
  if valid_596234 != nil:
    section.add "alt", valid_596234
  var valid_596235 = query.getOrDefault("oauth_token")
  valid_596235 = validateParameter(valid_596235, JString, required = false,
                                 default = nil)
  if valid_596235 != nil:
    section.add "oauth_token", valid_596235
  var valid_596236 = query.getOrDefault("userIp")
  valid_596236 = validateParameter(valid_596236, JString, required = false,
                                 default = nil)
  if valid_596236 != nil:
    section.add "userIp", valid_596236
  var valid_596237 = query.getOrDefault("key")
  valid_596237 = validateParameter(valid_596237, JString, required = false,
                                 default = nil)
  if valid_596237 != nil:
    section.add "key", valid_596237
  var valid_596238 = query.getOrDefault("prettyPrint")
  valid_596238 = validateParameter(valid_596238, JBool, required = false,
                                 default = newJBool(true))
  if valid_596238 != nil:
    section.add "prettyPrint", valid_596238
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596239: Call_DfareportingOperatingSystemsGet_596227;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one operating system by DART ID.
  ## 
  let valid = call_596239.validator(path, query, header, formData, body)
  let scheme = call_596239.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596239.url(scheme.get, call_596239.host, call_596239.base,
                         call_596239.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596239, url, valid)

proc call*(call_596240: Call_DfareportingOperatingSystemsGet_596227;
          profileId: string; dartId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingOperatingSystemsGet
  ## Gets one operating system by DART ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   dartId: string (required)
  ##         : Operating system DART ID.
  var path_596241 = newJObject()
  var query_596242 = newJObject()
  add(path_596241, "profileId", newJString(profileId))
  add(query_596242, "fields", newJString(fields))
  add(query_596242, "quotaUser", newJString(quotaUser))
  add(query_596242, "alt", newJString(alt))
  add(query_596242, "oauth_token", newJString(oauthToken))
  add(query_596242, "userIp", newJString(userIp))
  add(query_596242, "key", newJString(key))
  add(query_596242, "prettyPrint", newJBool(prettyPrint))
  add(path_596241, "dartId", newJString(dartId))
  result = call_596240.call(path_596241, query_596242, nil, nil, nil)

var dfareportingOperatingSystemsGet* = Call_DfareportingOperatingSystemsGet_596227(
    name: "dfareportingOperatingSystemsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/operatingSystems/{dartId}",
    validator: validate_DfareportingOperatingSystemsGet_596228,
    base: "/dfareporting/v3.2", url: url_DfareportingOperatingSystemsGet_596229,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsUpdate_596277 = ref object of OpenApiRestCall_593437
proc url_DfareportingPlacementGroupsUpdate_596279(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsUpdate_596278(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596280 = path.getOrDefault("profileId")
  valid_596280 = validateParameter(valid_596280, JString, required = true,
                                 default = nil)
  if valid_596280 != nil:
    section.add "profileId", valid_596280
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596281 = query.getOrDefault("fields")
  valid_596281 = validateParameter(valid_596281, JString, required = false,
                                 default = nil)
  if valid_596281 != nil:
    section.add "fields", valid_596281
  var valid_596282 = query.getOrDefault("quotaUser")
  valid_596282 = validateParameter(valid_596282, JString, required = false,
                                 default = nil)
  if valid_596282 != nil:
    section.add "quotaUser", valid_596282
  var valid_596283 = query.getOrDefault("alt")
  valid_596283 = validateParameter(valid_596283, JString, required = false,
                                 default = newJString("json"))
  if valid_596283 != nil:
    section.add "alt", valid_596283
  var valid_596284 = query.getOrDefault("oauth_token")
  valid_596284 = validateParameter(valid_596284, JString, required = false,
                                 default = nil)
  if valid_596284 != nil:
    section.add "oauth_token", valid_596284
  var valid_596285 = query.getOrDefault("userIp")
  valid_596285 = validateParameter(valid_596285, JString, required = false,
                                 default = nil)
  if valid_596285 != nil:
    section.add "userIp", valid_596285
  var valid_596286 = query.getOrDefault("key")
  valid_596286 = validateParameter(valid_596286, JString, required = false,
                                 default = nil)
  if valid_596286 != nil:
    section.add "key", valid_596286
  var valid_596287 = query.getOrDefault("prettyPrint")
  valid_596287 = validateParameter(valid_596287, JBool, required = false,
                                 default = newJBool(true))
  if valid_596287 != nil:
    section.add "prettyPrint", valid_596287
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596289: Call_DfareportingPlacementGroupsUpdate_596277;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing placement group.
  ## 
  let valid = call_596289.validator(path, query, header, formData, body)
  let scheme = call_596289.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596289.url(scheme.get, call_596289.host, call_596289.base,
                         call_596289.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596289, url, valid)

proc call*(call_596290: Call_DfareportingPlacementGroupsUpdate_596277;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementGroupsUpdate
  ## Updates an existing placement group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596291 = newJObject()
  var query_596292 = newJObject()
  var body_596293 = newJObject()
  add(path_596291, "profileId", newJString(profileId))
  add(query_596292, "fields", newJString(fields))
  add(query_596292, "quotaUser", newJString(quotaUser))
  add(query_596292, "alt", newJString(alt))
  add(query_596292, "oauth_token", newJString(oauthToken))
  add(query_596292, "userIp", newJString(userIp))
  add(query_596292, "key", newJString(key))
  if body != nil:
    body_596293 = body
  add(query_596292, "prettyPrint", newJBool(prettyPrint))
  result = call_596290.call(path_596291, query_596292, nil, nil, body_596293)

var dfareportingPlacementGroupsUpdate* = Call_DfareportingPlacementGroupsUpdate_596277(
    name: "dfareportingPlacementGroupsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups",
    validator: validate_DfareportingPlacementGroupsUpdate_596278,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementGroupsUpdate_596279,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsInsert_596294 = ref object of OpenApiRestCall_593437
proc url_DfareportingPlacementGroupsInsert_596296(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsInsert_596295(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new placement group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596297 = path.getOrDefault("profileId")
  valid_596297 = validateParameter(valid_596297, JString, required = true,
                                 default = nil)
  if valid_596297 != nil:
    section.add "profileId", valid_596297
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596298 = query.getOrDefault("fields")
  valid_596298 = validateParameter(valid_596298, JString, required = false,
                                 default = nil)
  if valid_596298 != nil:
    section.add "fields", valid_596298
  var valid_596299 = query.getOrDefault("quotaUser")
  valid_596299 = validateParameter(valid_596299, JString, required = false,
                                 default = nil)
  if valid_596299 != nil:
    section.add "quotaUser", valid_596299
  var valid_596300 = query.getOrDefault("alt")
  valid_596300 = validateParameter(valid_596300, JString, required = false,
                                 default = newJString("json"))
  if valid_596300 != nil:
    section.add "alt", valid_596300
  var valid_596301 = query.getOrDefault("oauth_token")
  valid_596301 = validateParameter(valid_596301, JString, required = false,
                                 default = nil)
  if valid_596301 != nil:
    section.add "oauth_token", valid_596301
  var valid_596302 = query.getOrDefault("userIp")
  valid_596302 = validateParameter(valid_596302, JString, required = false,
                                 default = nil)
  if valid_596302 != nil:
    section.add "userIp", valid_596302
  var valid_596303 = query.getOrDefault("key")
  valid_596303 = validateParameter(valid_596303, JString, required = false,
                                 default = nil)
  if valid_596303 != nil:
    section.add "key", valid_596303
  var valid_596304 = query.getOrDefault("prettyPrint")
  valid_596304 = validateParameter(valid_596304, JBool, required = false,
                                 default = newJBool(true))
  if valid_596304 != nil:
    section.add "prettyPrint", valid_596304
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596306: Call_DfareportingPlacementGroupsInsert_596294;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new placement group.
  ## 
  let valid = call_596306.validator(path, query, header, formData, body)
  let scheme = call_596306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596306.url(scheme.get, call_596306.host, call_596306.base,
                         call_596306.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596306, url, valid)

proc call*(call_596307: Call_DfareportingPlacementGroupsInsert_596294;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementGroupsInsert
  ## Inserts a new placement group.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596308 = newJObject()
  var query_596309 = newJObject()
  var body_596310 = newJObject()
  add(path_596308, "profileId", newJString(profileId))
  add(query_596309, "fields", newJString(fields))
  add(query_596309, "quotaUser", newJString(quotaUser))
  add(query_596309, "alt", newJString(alt))
  add(query_596309, "oauth_token", newJString(oauthToken))
  add(query_596309, "userIp", newJString(userIp))
  add(query_596309, "key", newJString(key))
  if body != nil:
    body_596310 = body
  add(query_596309, "prettyPrint", newJBool(prettyPrint))
  result = call_596307.call(path_596308, query_596309, nil, nil, body_596310)

var dfareportingPlacementGroupsInsert* = Call_DfareportingPlacementGroupsInsert_596294(
    name: "dfareportingPlacementGroupsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups",
    validator: validate_DfareportingPlacementGroupsInsert_596295,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementGroupsInsert_596296,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsList_596243 = ref object of OpenApiRestCall_593437
proc url_DfareportingPlacementGroupsList_596245(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsList_596244(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of placement groups, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596246 = path.getOrDefault("profileId")
  valid_596246 = validateParameter(valid_596246, JString, required = true,
                                 default = nil)
  if valid_596246 != nil:
    section.add "profileId", valid_596246
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   contentCategoryIds: JArray
  ##                     : Select only placement groups that are associated with these content categories.
  ##   alt: JString
  ##      : Data format for the response.
  ##   placementGroupType: JString
  ##                     : Select only placement groups belonging with this group type. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting.
  ##   searchString: JString
  ##               : Allows searching for placement groups by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placement groups with names like "placement group June 2015", "placement group May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementgroup" will match placement groups with name "my placementgroup", "placementgroup 2015", or simply "placementgroup".
  ##   minEndDate: JString
  ##             : Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   siteIds: JArray
  ##          : Select only placement groups that are associated with these sites.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   maxStartDate: JString
  ##               : Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   campaignIds: JArray
  ##              : Select only placement groups that belong to these campaigns.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived placements. Don't set this field to select both archived and non-archived placements.
  ##   maxEndDate: JString
  ##             : Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only placement groups with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only placement groups that belong to these advertisers.
  ##   minStartDate: JString
  ##               : Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   directorySiteIds: JArray
  ##                   : Select only placement groups that are associated with these directory sites.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   placementStrategyIds: JArray
  ##                       : Select only placement groups that are associated with these placement strategies.
  ##   pricingTypes: JArray
  ##               : Select only placement groups with these pricing types.
  section = newJObject()
  var valid_596247 = query.getOrDefault("fields")
  valid_596247 = validateParameter(valid_596247, JString, required = false,
                                 default = nil)
  if valid_596247 != nil:
    section.add "fields", valid_596247
  var valid_596248 = query.getOrDefault("pageToken")
  valid_596248 = validateParameter(valid_596248, JString, required = false,
                                 default = nil)
  if valid_596248 != nil:
    section.add "pageToken", valid_596248
  var valid_596249 = query.getOrDefault("quotaUser")
  valid_596249 = validateParameter(valid_596249, JString, required = false,
                                 default = nil)
  if valid_596249 != nil:
    section.add "quotaUser", valid_596249
  var valid_596250 = query.getOrDefault("sortField")
  valid_596250 = validateParameter(valid_596250, JString, required = false,
                                 default = newJString("ID"))
  if valid_596250 != nil:
    section.add "sortField", valid_596250
  var valid_596251 = query.getOrDefault("contentCategoryIds")
  valid_596251 = validateParameter(valid_596251, JArray, required = false,
                                 default = nil)
  if valid_596251 != nil:
    section.add "contentCategoryIds", valid_596251
  var valid_596252 = query.getOrDefault("alt")
  valid_596252 = validateParameter(valid_596252, JString, required = false,
                                 default = newJString("json"))
  if valid_596252 != nil:
    section.add "alt", valid_596252
  var valid_596253 = query.getOrDefault("placementGroupType")
  valid_596253 = validateParameter(valid_596253, JString, required = false,
                                 default = newJString("PLACEMENT_PACKAGE"))
  if valid_596253 != nil:
    section.add "placementGroupType", valid_596253
  var valid_596254 = query.getOrDefault("searchString")
  valid_596254 = validateParameter(valid_596254, JString, required = false,
                                 default = nil)
  if valid_596254 != nil:
    section.add "searchString", valid_596254
  var valid_596255 = query.getOrDefault("minEndDate")
  valid_596255 = validateParameter(valid_596255, JString, required = false,
                                 default = nil)
  if valid_596255 != nil:
    section.add "minEndDate", valid_596255
  var valid_596256 = query.getOrDefault("siteIds")
  valid_596256 = validateParameter(valid_596256, JArray, required = false,
                                 default = nil)
  if valid_596256 != nil:
    section.add "siteIds", valid_596256
  var valid_596257 = query.getOrDefault("oauth_token")
  valid_596257 = validateParameter(valid_596257, JString, required = false,
                                 default = nil)
  if valid_596257 != nil:
    section.add "oauth_token", valid_596257
  var valid_596258 = query.getOrDefault("maxStartDate")
  valid_596258 = validateParameter(valid_596258, JString, required = false,
                                 default = nil)
  if valid_596258 != nil:
    section.add "maxStartDate", valid_596258
  var valid_596259 = query.getOrDefault("campaignIds")
  valid_596259 = validateParameter(valid_596259, JArray, required = false,
                                 default = nil)
  if valid_596259 != nil:
    section.add "campaignIds", valid_596259
  var valid_596260 = query.getOrDefault("userIp")
  valid_596260 = validateParameter(valid_596260, JString, required = false,
                                 default = nil)
  if valid_596260 != nil:
    section.add "userIp", valid_596260
  var valid_596261 = query.getOrDefault("archived")
  valid_596261 = validateParameter(valid_596261, JBool, required = false, default = nil)
  if valid_596261 != nil:
    section.add "archived", valid_596261
  var valid_596262 = query.getOrDefault("maxEndDate")
  valid_596262 = validateParameter(valid_596262, JString, required = false,
                                 default = nil)
  if valid_596262 != nil:
    section.add "maxEndDate", valid_596262
  var valid_596263 = query.getOrDefault("maxResults")
  valid_596263 = validateParameter(valid_596263, JInt, required = false,
                                 default = newJInt(800))
  if valid_596263 != nil:
    section.add "maxResults", valid_596263
  var valid_596264 = query.getOrDefault("ids")
  valid_596264 = validateParameter(valid_596264, JArray, required = false,
                                 default = nil)
  if valid_596264 != nil:
    section.add "ids", valid_596264
  var valid_596265 = query.getOrDefault("key")
  valid_596265 = validateParameter(valid_596265, JString, required = false,
                                 default = nil)
  if valid_596265 != nil:
    section.add "key", valid_596265
  var valid_596266 = query.getOrDefault("advertiserIds")
  valid_596266 = validateParameter(valid_596266, JArray, required = false,
                                 default = nil)
  if valid_596266 != nil:
    section.add "advertiserIds", valid_596266
  var valid_596267 = query.getOrDefault("minStartDate")
  valid_596267 = validateParameter(valid_596267, JString, required = false,
                                 default = nil)
  if valid_596267 != nil:
    section.add "minStartDate", valid_596267
  var valid_596268 = query.getOrDefault("sortOrder")
  valid_596268 = validateParameter(valid_596268, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_596268 != nil:
    section.add "sortOrder", valid_596268
  var valid_596269 = query.getOrDefault("directorySiteIds")
  valid_596269 = validateParameter(valid_596269, JArray, required = false,
                                 default = nil)
  if valid_596269 != nil:
    section.add "directorySiteIds", valid_596269
  var valid_596270 = query.getOrDefault("prettyPrint")
  valid_596270 = validateParameter(valid_596270, JBool, required = false,
                                 default = newJBool(true))
  if valid_596270 != nil:
    section.add "prettyPrint", valid_596270
  var valid_596271 = query.getOrDefault("placementStrategyIds")
  valid_596271 = validateParameter(valid_596271, JArray, required = false,
                                 default = nil)
  if valid_596271 != nil:
    section.add "placementStrategyIds", valid_596271
  var valid_596272 = query.getOrDefault("pricingTypes")
  valid_596272 = validateParameter(valid_596272, JArray, required = false,
                                 default = nil)
  if valid_596272 != nil:
    section.add "pricingTypes", valid_596272
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596273: Call_DfareportingPlacementGroupsList_596243;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of placement groups, possibly filtered. This method supports paging.
  ## 
  let valid = call_596273.validator(path, query, header, formData, body)
  let scheme = call_596273.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596273.url(scheme.get, call_596273.host, call_596273.base,
                         call_596273.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596273, url, valid)

proc call*(call_596274: Call_DfareportingPlacementGroupsList_596243;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID";
          contentCategoryIds: JsonNode = nil; alt: string = "json";
          placementGroupType: string = "PLACEMENT_PACKAGE";
          searchString: string = ""; minEndDate: string = ""; siteIds: JsonNode = nil;
          oauthToken: string = ""; maxStartDate: string = "";
          campaignIds: JsonNode = nil; userIp: string = ""; archived: bool = false;
          maxEndDate: string = ""; maxResults: int = 800; ids: JsonNode = nil;
          key: string = ""; advertiserIds: JsonNode = nil; minStartDate: string = "";
          sortOrder: string = "ASCENDING"; directorySiteIds: JsonNode = nil;
          prettyPrint: bool = true; placementStrategyIds: JsonNode = nil;
          pricingTypes: JsonNode = nil): Recallable =
  ## dfareportingPlacementGroupsList
  ## Retrieves a list of placement groups, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   contentCategoryIds: JArray
  ##                     : Select only placement groups that are associated with these content categories.
  ##   alt: string
  ##      : Data format for the response.
  ##   placementGroupType: string
  ##                     : Select only placement groups belonging with this group type. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting.
  ##   searchString: string
  ##               : Allows searching for placement groups by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placement groups with names like "placement group June 2015", "placement group May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementgroup" will match placement groups with name "my placementgroup", "placementgroup 2015", or simply "placementgroup".
  ##   minEndDate: string
  ##             : Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   siteIds: JArray
  ##          : Select only placement groups that are associated with these sites.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   maxStartDate: string
  ##               : Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   campaignIds: JArray
  ##              : Select only placement groups that belong to these campaigns.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived placements. Don't set this field to select both archived and non-archived placements.
  ##   maxEndDate: string
  ##             : Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only placement groups with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only placement groups that belong to these advertisers.
  ##   minStartDate: string
  ##               : Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   directorySiteIds: JArray
  ##                   : Select only placement groups that are associated with these directory sites.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   placementStrategyIds: JArray
  ##                       : Select only placement groups that are associated with these placement strategies.
  ##   pricingTypes: JArray
  ##               : Select only placement groups with these pricing types.
  var path_596275 = newJObject()
  var query_596276 = newJObject()
  add(path_596275, "profileId", newJString(profileId))
  add(query_596276, "fields", newJString(fields))
  add(query_596276, "pageToken", newJString(pageToken))
  add(query_596276, "quotaUser", newJString(quotaUser))
  add(query_596276, "sortField", newJString(sortField))
  if contentCategoryIds != nil:
    query_596276.add "contentCategoryIds", contentCategoryIds
  add(query_596276, "alt", newJString(alt))
  add(query_596276, "placementGroupType", newJString(placementGroupType))
  add(query_596276, "searchString", newJString(searchString))
  add(query_596276, "minEndDate", newJString(minEndDate))
  if siteIds != nil:
    query_596276.add "siteIds", siteIds
  add(query_596276, "oauth_token", newJString(oauthToken))
  add(query_596276, "maxStartDate", newJString(maxStartDate))
  if campaignIds != nil:
    query_596276.add "campaignIds", campaignIds
  add(query_596276, "userIp", newJString(userIp))
  add(query_596276, "archived", newJBool(archived))
  add(query_596276, "maxEndDate", newJString(maxEndDate))
  add(query_596276, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_596276.add "ids", ids
  add(query_596276, "key", newJString(key))
  if advertiserIds != nil:
    query_596276.add "advertiserIds", advertiserIds
  add(query_596276, "minStartDate", newJString(minStartDate))
  add(query_596276, "sortOrder", newJString(sortOrder))
  if directorySiteIds != nil:
    query_596276.add "directorySiteIds", directorySiteIds
  add(query_596276, "prettyPrint", newJBool(prettyPrint))
  if placementStrategyIds != nil:
    query_596276.add "placementStrategyIds", placementStrategyIds
  if pricingTypes != nil:
    query_596276.add "pricingTypes", pricingTypes
  result = call_596274.call(path_596275, query_596276, nil, nil, nil)

var dfareportingPlacementGroupsList* = Call_DfareportingPlacementGroupsList_596243(
    name: "dfareportingPlacementGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups",
    validator: validate_DfareportingPlacementGroupsList_596244,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementGroupsList_596245,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsPatch_596311 = ref object of OpenApiRestCall_593437
proc url_DfareportingPlacementGroupsPatch_596313(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsPatch_596312(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement group. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596314 = path.getOrDefault("profileId")
  valid_596314 = validateParameter(valid_596314, JString, required = true,
                                 default = nil)
  if valid_596314 != nil:
    section.add "profileId", valid_596314
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Placement group ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596315 = query.getOrDefault("fields")
  valid_596315 = validateParameter(valid_596315, JString, required = false,
                                 default = nil)
  if valid_596315 != nil:
    section.add "fields", valid_596315
  var valid_596316 = query.getOrDefault("quotaUser")
  valid_596316 = validateParameter(valid_596316, JString, required = false,
                                 default = nil)
  if valid_596316 != nil:
    section.add "quotaUser", valid_596316
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_596317 = query.getOrDefault("id")
  valid_596317 = validateParameter(valid_596317, JString, required = true,
                                 default = nil)
  if valid_596317 != nil:
    section.add "id", valid_596317
  var valid_596318 = query.getOrDefault("alt")
  valid_596318 = validateParameter(valid_596318, JString, required = false,
                                 default = newJString("json"))
  if valid_596318 != nil:
    section.add "alt", valid_596318
  var valid_596319 = query.getOrDefault("oauth_token")
  valid_596319 = validateParameter(valid_596319, JString, required = false,
                                 default = nil)
  if valid_596319 != nil:
    section.add "oauth_token", valid_596319
  var valid_596320 = query.getOrDefault("userIp")
  valid_596320 = validateParameter(valid_596320, JString, required = false,
                                 default = nil)
  if valid_596320 != nil:
    section.add "userIp", valid_596320
  var valid_596321 = query.getOrDefault("key")
  valid_596321 = validateParameter(valid_596321, JString, required = false,
                                 default = nil)
  if valid_596321 != nil:
    section.add "key", valid_596321
  var valid_596322 = query.getOrDefault("prettyPrint")
  valid_596322 = validateParameter(valid_596322, JBool, required = false,
                                 default = newJBool(true))
  if valid_596322 != nil:
    section.add "prettyPrint", valid_596322
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596324: Call_DfareportingPlacementGroupsPatch_596311;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing placement group. This method supports patch semantics.
  ## 
  let valid = call_596324.validator(path, query, header, formData, body)
  let scheme = call_596324.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596324.url(scheme.get, call_596324.host, call_596324.base,
                         call_596324.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596324, url, valid)

proc call*(call_596325: Call_DfareportingPlacementGroupsPatch_596311;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementGroupsPatch
  ## Updates an existing placement group. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Placement group ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596326 = newJObject()
  var query_596327 = newJObject()
  var body_596328 = newJObject()
  add(path_596326, "profileId", newJString(profileId))
  add(query_596327, "fields", newJString(fields))
  add(query_596327, "quotaUser", newJString(quotaUser))
  add(query_596327, "id", newJString(id))
  add(query_596327, "alt", newJString(alt))
  add(query_596327, "oauth_token", newJString(oauthToken))
  add(query_596327, "userIp", newJString(userIp))
  add(query_596327, "key", newJString(key))
  if body != nil:
    body_596328 = body
  add(query_596327, "prettyPrint", newJBool(prettyPrint))
  result = call_596325.call(path_596326, query_596327, nil, nil, body_596328)

var dfareportingPlacementGroupsPatch* = Call_DfareportingPlacementGroupsPatch_596311(
    name: "dfareportingPlacementGroupsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups",
    validator: validate_DfareportingPlacementGroupsPatch_596312,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementGroupsPatch_596313,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementGroupsGet_596329 = ref object of OpenApiRestCall_593437
proc url_DfareportingPlacementGroupsGet_596331(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementGroupsGet_596330(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one placement group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Placement group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596332 = path.getOrDefault("profileId")
  valid_596332 = validateParameter(valid_596332, JString, required = true,
                                 default = nil)
  if valid_596332 != nil:
    section.add "profileId", valid_596332
  var valid_596333 = path.getOrDefault("id")
  valid_596333 = validateParameter(valid_596333, JString, required = true,
                                 default = nil)
  if valid_596333 != nil:
    section.add "id", valid_596333
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596334 = query.getOrDefault("fields")
  valid_596334 = validateParameter(valid_596334, JString, required = false,
                                 default = nil)
  if valid_596334 != nil:
    section.add "fields", valid_596334
  var valid_596335 = query.getOrDefault("quotaUser")
  valid_596335 = validateParameter(valid_596335, JString, required = false,
                                 default = nil)
  if valid_596335 != nil:
    section.add "quotaUser", valid_596335
  var valid_596336 = query.getOrDefault("alt")
  valid_596336 = validateParameter(valid_596336, JString, required = false,
                                 default = newJString("json"))
  if valid_596336 != nil:
    section.add "alt", valid_596336
  var valid_596337 = query.getOrDefault("oauth_token")
  valid_596337 = validateParameter(valid_596337, JString, required = false,
                                 default = nil)
  if valid_596337 != nil:
    section.add "oauth_token", valid_596337
  var valid_596338 = query.getOrDefault("userIp")
  valid_596338 = validateParameter(valid_596338, JString, required = false,
                                 default = nil)
  if valid_596338 != nil:
    section.add "userIp", valid_596338
  var valid_596339 = query.getOrDefault("key")
  valid_596339 = validateParameter(valid_596339, JString, required = false,
                                 default = nil)
  if valid_596339 != nil:
    section.add "key", valid_596339
  var valid_596340 = query.getOrDefault("prettyPrint")
  valid_596340 = validateParameter(valid_596340, JBool, required = false,
                                 default = newJBool(true))
  if valid_596340 != nil:
    section.add "prettyPrint", valid_596340
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596341: Call_DfareportingPlacementGroupsGet_596329; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one placement group by ID.
  ## 
  let valid = call_596341.validator(path, query, header, formData, body)
  let scheme = call_596341.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596341.url(scheme.get, call_596341.host, call_596341.base,
                         call_596341.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596341, url, valid)

proc call*(call_596342: Call_DfareportingPlacementGroupsGet_596329;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementGroupsGet
  ## Gets one placement group by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Placement group ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596343 = newJObject()
  var query_596344 = newJObject()
  add(path_596343, "profileId", newJString(profileId))
  add(query_596344, "fields", newJString(fields))
  add(query_596344, "quotaUser", newJString(quotaUser))
  add(query_596344, "alt", newJString(alt))
  add(query_596344, "oauth_token", newJString(oauthToken))
  add(query_596344, "userIp", newJString(userIp))
  add(path_596343, "id", newJString(id))
  add(query_596344, "key", newJString(key))
  add(query_596344, "prettyPrint", newJBool(prettyPrint))
  result = call_596342.call(path_596343, query_596344, nil, nil, nil)

var dfareportingPlacementGroupsGet* = Call_DfareportingPlacementGroupsGet_596329(
    name: "dfareportingPlacementGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementGroups/{id}",
    validator: validate_DfareportingPlacementGroupsGet_596330,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementGroupsGet_596331,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesUpdate_596366 = ref object of OpenApiRestCall_593437
proc url_DfareportingPlacementStrategiesUpdate_596368(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesUpdate_596367(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement strategy.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596369 = path.getOrDefault("profileId")
  valid_596369 = validateParameter(valid_596369, JString, required = true,
                                 default = nil)
  if valid_596369 != nil:
    section.add "profileId", valid_596369
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596370 = query.getOrDefault("fields")
  valid_596370 = validateParameter(valid_596370, JString, required = false,
                                 default = nil)
  if valid_596370 != nil:
    section.add "fields", valid_596370
  var valid_596371 = query.getOrDefault("quotaUser")
  valid_596371 = validateParameter(valid_596371, JString, required = false,
                                 default = nil)
  if valid_596371 != nil:
    section.add "quotaUser", valid_596371
  var valid_596372 = query.getOrDefault("alt")
  valid_596372 = validateParameter(valid_596372, JString, required = false,
                                 default = newJString("json"))
  if valid_596372 != nil:
    section.add "alt", valid_596372
  var valid_596373 = query.getOrDefault("oauth_token")
  valid_596373 = validateParameter(valid_596373, JString, required = false,
                                 default = nil)
  if valid_596373 != nil:
    section.add "oauth_token", valid_596373
  var valid_596374 = query.getOrDefault("userIp")
  valid_596374 = validateParameter(valid_596374, JString, required = false,
                                 default = nil)
  if valid_596374 != nil:
    section.add "userIp", valid_596374
  var valid_596375 = query.getOrDefault("key")
  valid_596375 = validateParameter(valid_596375, JString, required = false,
                                 default = nil)
  if valid_596375 != nil:
    section.add "key", valid_596375
  var valid_596376 = query.getOrDefault("prettyPrint")
  valid_596376 = validateParameter(valid_596376, JBool, required = false,
                                 default = newJBool(true))
  if valid_596376 != nil:
    section.add "prettyPrint", valid_596376
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596378: Call_DfareportingPlacementStrategiesUpdate_596366;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing placement strategy.
  ## 
  let valid = call_596378.validator(path, query, header, formData, body)
  let scheme = call_596378.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596378.url(scheme.get, call_596378.host, call_596378.base,
                         call_596378.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596378, url, valid)

proc call*(call_596379: Call_DfareportingPlacementStrategiesUpdate_596366;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementStrategiesUpdate
  ## Updates an existing placement strategy.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596380 = newJObject()
  var query_596381 = newJObject()
  var body_596382 = newJObject()
  add(path_596380, "profileId", newJString(profileId))
  add(query_596381, "fields", newJString(fields))
  add(query_596381, "quotaUser", newJString(quotaUser))
  add(query_596381, "alt", newJString(alt))
  add(query_596381, "oauth_token", newJString(oauthToken))
  add(query_596381, "userIp", newJString(userIp))
  add(query_596381, "key", newJString(key))
  if body != nil:
    body_596382 = body
  add(query_596381, "prettyPrint", newJBool(prettyPrint))
  result = call_596379.call(path_596380, query_596381, nil, nil, body_596382)

var dfareportingPlacementStrategiesUpdate* = Call_DfareportingPlacementStrategiesUpdate_596366(
    name: "dfareportingPlacementStrategiesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies",
    validator: validate_DfareportingPlacementStrategiesUpdate_596367,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesUpdate_596368,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesInsert_596383 = ref object of OpenApiRestCall_593437
proc url_DfareportingPlacementStrategiesInsert_596385(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesInsert_596384(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new placement strategy.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596386 = path.getOrDefault("profileId")
  valid_596386 = validateParameter(valid_596386, JString, required = true,
                                 default = nil)
  if valid_596386 != nil:
    section.add "profileId", valid_596386
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596387 = query.getOrDefault("fields")
  valid_596387 = validateParameter(valid_596387, JString, required = false,
                                 default = nil)
  if valid_596387 != nil:
    section.add "fields", valid_596387
  var valid_596388 = query.getOrDefault("quotaUser")
  valid_596388 = validateParameter(valid_596388, JString, required = false,
                                 default = nil)
  if valid_596388 != nil:
    section.add "quotaUser", valid_596388
  var valid_596389 = query.getOrDefault("alt")
  valid_596389 = validateParameter(valid_596389, JString, required = false,
                                 default = newJString("json"))
  if valid_596389 != nil:
    section.add "alt", valid_596389
  var valid_596390 = query.getOrDefault("oauth_token")
  valid_596390 = validateParameter(valid_596390, JString, required = false,
                                 default = nil)
  if valid_596390 != nil:
    section.add "oauth_token", valid_596390
  var valid_596391 = query.getOrDefault("userIp")
  valid_596391 = validateParameter(valid_596391, JString, required = false,
                                 default = nil)
  if valid_596391 != nil:
    section.add "userIp", valid_596391
  var valid_596392 = query.getOrDefault("key")
  valid_596392 = validateParameter(valid_596392, JString, required = false,
                                 default = nil)
  if valid_596392 != nil:
    section.add "key", valid_596392
  var valid_596393 = query.getOrDefault("prettyPrint")
  valid_596393 = validateParameter(valid_596393, JBool, required = false,
                                 default = newJBool(true))
  if valid_596393 != nil:
    section.add "prettyPrint", valid_596393
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596395: Call_DfareportingPlacementStrategiesInsert_596383;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new placement strategy.
  ## 
  let valid = call_596395.validator(path, query, header, formData, body)
  let scheme = call_596395.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596395.url(scheme.get, call_596395.host, call_596395.base,
                         call_596395.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596395, url, valid)

proc call*(call_596396: Call_DfareportingPlacementStrategiesInsert_596383;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementStrategiesInsert
  ## Inserts a new placement strategy.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596397 = newJObject()
  var query_596398 = newJObject()
  var body_596399 = newJObject()
  add(path_596397, "profileId", newJString(profileId))
  add(query_596398, "fields", newJString(fields))
  add(query_596398, "quotaUser", newJString(quotaUser))
  add(query_596398, "alt", newJString(alt))
  add(query_596398, "oauth_token", newJString(oauthToken))
  add(query_596398, "userIp", newJString(userIp))
  add(query_596398, "key", newJString(key))
  if body != nil:
    body_596399 = body
  add(query_596398, "prettyPrint", newJBool(prettyPrint))
  result = call_596396.call(path_596397, query_596398, nil, nil, body_596399)

var dfareportingPlacementStrategiesInsert* = Call_DfareportingPlacementStrategiesInsert_596383(
    name: "dfareportingPlacementStrategiesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies",
    validator: validate_DfareportingPlacementStrategiesInsert_596384,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesInsert_596385,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesList_596345 = ref object of OpenApiRestCall_593437
proc url_DfareportingPlacementStrategiesList_596347(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesList_596346(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of placement strategies, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596348 = path.getOrDefault("profileId")
  valid_596348 = validateParameter(valid_596348, JString, required = true,
                                 default = nil)
  if valid_596348 != nil:
    section.add "profileId", valid_596348
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "placementstrategy*2015" will return objects with names like "placementstrategy June 2015", "placementstrategy April 2015", or simply "placementstrategy 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementstrategy" will match objects with name "my placementstrategy", "placementstrategy 2015", or simply "placementstrategy".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only placement strategies with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596349 = query.getOrDefault("fields")
  valid_596349 = validateParameter(valid_596349, JString, required = false,
                                 default = nil)
  if valid_596349 != nil:
    section.add "fields", valid_596349
  var valid_596350 = query.getOrDefault("pageToken")
  valid_596350 = validateParameter(valid_596350, JString, required = false,
                                 default = nil)
  if valid_596350 != nil:
    section.add "pageToken", valid_596350
  var valid_596351 = query.getOrDefault("quotaUser")
  valid_596351 = validateParameter(valid_596351, JString, required = false,
                                 default = nil)
  if valid_596351 != nil:
    section.add "quotaUser", valid_596351
  var valid_596352 = query.getOrDefault("sortField")
  valid_596352 = validateParameter(valid_596352, JString, required = false,
                                 default = newJString("ID"))
  if valid_596352 != nil:
    section.add "sortField", valid_596352
  var valid_596353 = query.getOrDefault("alt")
  valid_596353 = validateParameter(valid_596353, JString, required = false,
                                 default = newJString("json"))
  if valid_596353 != nil:
    section.add "alt", valid_596353
  var valid_596354 = query.getOrDefault("searchString")
  valid_596354 = validateParameter(valid_596354, JString, required = false,
                                 default = nil)
  if valid_596354 != nil:
    section.add "searchString", valid_596354
  var valid_596355 = query.getOrDefault("oauth_token")
  valid_596355 = validateParameter(valid_596355, JString, required = false,
                                 default = nil)
  if valid_596355 != nil:
    section.add "oauth_token", valid_596355
  var valid_596356 = query.getOrDefault("userIp")
  valid_596356 = validateParameter(valid_596356, JString, required = false,
                                 default = nil)
  if valid_596356 != nil:
    section.add "userIp", valid_596356
  var valid_596357 = query.getOrDefault("maxResults")
  valid_596357 = validateParameter(valid_596357, JInt, required = false,
                                 default = newJInt(1000))
  if valid_596357 != nil:
    section.add "maxResults", valid_596357
  var valid_596358 = query.getOrDefault("ids")
  valid_596358 = validateParameter(valid_596358, JArray, required = false,
                                 default = nil)
  if valid_596358 != nil:
    section.add "ids", valid_596358
  var valid_596359 = query.getOrDefault("key")
  valid_596359 = validateParameter(valid_596359, JString, required = false,
                                 default = nil)
  if valid_596359 != nil:
    section.add "key", valid_596359
  var valid_596360 = query.getOrDefault("sortOrder")
  valid_596360 = validateParameter(valid_596360, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_596360 != nil:
    section.add "sortOrder", valid_596360
  var valid_596361 = query.getOrDefault("prettyPrint")
  valid_596361 = validateParameter(valid_596361, JBool, required = false,
                                 default = newJBool(true))
  if valid_596361 != nil:
    section.add "prettyPrint", valid_596361
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596362: Call_DfareportingPlacementStrategiesList_596345;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of placement strategies, possibly filtered. This method supports paging.
  ## 
  let valid = call_596362.validator(path, query, header, formData, body)
  let scheme = call_596362.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596362.url(scheme.get, call_596362.host, call_596362.base,
                         call_596362.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596362, url, valid)

proc call*(call_596363: Call_DfareportingPlacementStrategiesList_596345;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementStrategiesList
  ## Retrieves a list of placement strategies, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "placementstrategy*2015" will return objects with names like "placementstrategy June 2015", "placementstrategy April 2015", or simply "placementstrategy 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placementstrategy" will match objects with name "my placementstrategy", "placementstrategy 2015", or simply "placementstrategy".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only placement strategies with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596364 = newJObject()
  var query_596365 = newJObject()
  add(path_596364, "profileId", newJString(profileId))
  add(query_596365, "fields", newJString(fields))
  add(query_596365, "pageToken", newJString(pageToken))
  add(query_596365, "quotaUser", newJString(quotaUser))
  add(query_596365, "sortField", newJString(sortField))
  add(query_596365, "alt", newJString(alt))
  add(query_596365, "searchString", newJString(searchString))
  add(query_596365, "oauth_token", newJString(oauthToken))
  add(query_596365, "userIp", newJString(userIp))
  add(query_596365, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_596365.add "ids", ids
  add(query_596365, "key", newJString(key))
  add(query_596365, "sortOrder", newJString(sortOrder))
  add(query_596365, "prettyPrint", newJBool(prettyPrint))
  result = call_596363.call(path_596364, query_596365, nil, nil, nil)

var dfareportingPlacementStrategiesList* = Call_DfareportingPlacementStrategiesList_596345(
    name: "dfareportingPlacementStrategiesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies",
    validator: validate_DfareportingPlacementStrategiesList_596346,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesList_596347,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesPatch_596400 = ref object of OpenApiRestCall_593437
proc url_DfareportingPlacementStrategiesPatch_596402(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesPatch_596401(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement strategy. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596403 = path.getOrDefault("profileId")
  valid_596403 = validateParameter(valid_596403, JString, required = true,
                                 default = nil)
  if valid_596403 != nil:
    section.add "profileId", valid_596403
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Placement strategy ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596404 = query.getOrDefault("fields")
  valid_596404 = validateParameter(valid_596404, JString, required = false,
                                 default = nil)
  if valid_596404 != nil:
    section.add "fields", valid_596404
  var valid_596405 = query.getOrDefault("quotaUser")
  valid_596405 = validateParameter(valid_596405, JString, required = false,
                                 default = nil)
  if valid_596405 != nil:
    section.add "quotaUser", valid_596405
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_596406 = query.getOrDefault("id")
  valid_596406 = validateParameter(valid_596406, JString, required = true,
                                 default = nil)
  if valid_596406 != nil:
    section.add "id", valid_596406
  var valid_596407 = query.getOrDefault("alt")
  valid_596407 = validateParameter(valid_596407, JString, required = false,
                                 default = newJString("json"))
  if valid_596407 != nil:
    section.add "alt", valid_596407
  var valid_596408 = query.getOrDefault("oauth_token")
  valid_596408 = validateParameter(valid_596408, JString, required = false,
                                 default = nil)
  if valid_596408 != nil:
    section.add "oauth_token", valid_596408
  var valid_596409 = query.getOrDefault("userIp")
  valid_596409 = validateParameter(valid_596409, JString, required = false,
                                 default = nil)
  if valid_596409 != nil:
    section.add "userIp", valid_596409
  var valid_596410 = query.getOrDefault("key")
  valid_596410 = validateParameter(valid_596410, JString, required = false,
                                 default = nil)
  if valid_596410 != nil:
    section.add "key", valid_596410
  var valid_596411 = query.getOrDefault("prettyPrint")
  valid_596411 = validateParameter(valid_596411, JBool, required = false,
                                 default = newJBool(true))
  if valid_596411 != nil:
    section.add "prettyPrint", valid_596411
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596413: Call_DfareportingPlacementStrategiesPatch_596400;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing placement strategy. This method supports patch semantics.
  ## 
  let valid = call_596413.validator(path, query, header, formData, body)
  let scheme = call_596413.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596413.url(scheme.get, call_596413.host, call_596413.base,
                         call_596413.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596413, url, valid)

proc call*(call_596414: Call_DfareportingPlacementStrategiesPatch_596400;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementStrategiesPatch
  ## Updates an existing placement strategy. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Placement strategy ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596415 = newJObject()
  var query_596416 = newJObject()
  var body_596417 = newJObject()
  add(path_596415, "profileId", newJString(profileId))
  add(query_596416, "fields", newJString(fields))
  add(query_596416, "quotaUser", newJString(quotaUser))
  add(query_596416, "id", newJString(id))
  add(query_596416, "alt", newJString(alt))
  add(query_596416, "oauth_token", newJString(oauthToken))
  add(query_596416, "userIp", newJString(userIp))
  add(query_596416, "key", newJString(key))
  if body != nil:
    body_596417 = body
  add(query_596416, "prettyPrint", newJBool(prettyPrint))
  result = call_596414.call(path_596415, query_596416, nil, nil, body_596417)

var dfareportingPlacementStrategiesPatch* = Call_DfareportingPlacementStrategiesPatch_596400(
    name: "dfareportingPlacementStrategiesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies",
    validator: validate_DfareportingPlacementStrategiesPatch_596401,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesPatch_596402,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesGet_596418 = ref object of OpenApiRestCall_593437
proc url_DfareportingPlacementStrategiesGet_596420(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesGet_596419(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one placement strategy by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Placement strategy ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596421 = path.getOrDefault("profileId")
  valid_596421 = validateParameter(valid_596421, JString, required = true,
                                 default = nil)
  if valid_596421 != nil:
    section.add "profileId", valid_596421
  var valid_596422 = path.getOrDefault("id")
  valid_596422 = validateParameter(valid_596422, JString, required = true,
                                 default = nil)
  if valid_596422 != nil:
    section.add "id", valid_596422
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596423 = query.getOrDefault("fields")
  valid_596423 = validateParameter(valid_596423, JString, required = false,
                                 default = nil)
  if valid_596423 != nil:
    section.add "fields", valid_596423
  var valid_596424 = query.getOrDefault("quotaUser")
  valid_596424 = validateParameter(valid_596424, JString, required = false,
                                 default = nil)
  if valid_596424 != nil:
    section.add "quotaUser", valid_596424
  var valid_596425 = query.getOrDefault("alt")
  valid_596425 = validateParameter(valid_596425, JString, required = false,
                                 default = newJString("json"))
  if valid_596425 != nil:
    section.add "alt", valid_596425
  var valid_596426 = query.getOrDefault("oauth_token")
  valid_596426 = validateParameter(valid_596426, JString, required = false,
                                 default = nil)
  if valid_596426 != nil:
    section.add "oauth_token", valid_596426
  var valid_596427 = query.getOrDefault("userIp")
  valid_596427 = validateParameter(valid_596427, JString, required = false,
                                 default = nil)
  if valid_596427 != nil:
    section.add "userIp", valid_596427
  var valid_596428 = query.getOrDefault("key")
  valid_596428 = validateParameter(valid_596428, JString, required = false,
                                 default = nil)
  if valid_596428 != nil:
    section.add "key", valid_596428
  var valid_596429 = query.getOrDefault("prettyPrint")
  valid_596429 = validateParameter(valid_596429, JBool, required = false,
                                 default = newJBool(true))
  if valid_596429 != nil:
    section.add "prettyPrint", valid_596429
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596430: Call_DfareportingPlacementStrategiesGet_596418;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one placement strategy by ID.
  ## 
  let valid = call_596430.validator(path, query, header, formData, body)
  let scheme = call_596430.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596430.url(scheme.get, call_596430.host, call_596430.base,
                         call_596430.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596430, url, valid)

proc call*(call_596431: Call_DfareportingPlacementStrategiesGet_596418;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementStrategiesGet
  ## Gets one placement strategy by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Placement strategy ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596432 = newJObject()
  var query_596433 = newJObject()
  add(path_596432, "profileId", newJString(profileId))
  add(query_596433, "fields", newJString(fields))
  add(query_596433, "quotaUser", newJString(quotaUser))
  add(query_596433, "alt", newJString(alt))
  add(query_596433, "oauth_token", newJString(oauthToken))
  add(query_596433, "userIp", newJString(userIp))
  add(path_596432, "id", newJString(id))
  add(query_596433, "key", newJString(key))
  add(query_596433, "prettyPrint", newJBool(prettyPrint))
  result = call_596431.call(path_596432, query_596433, nil, nil, nil)

var dfareportingPlacementStrategiesGet* = Call_DfareportingPlacementStrategiesGet_596418(
    name: "dfareportingPlacementStrategiesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies/{id}",
    validator: validate_DfareportingPlacementStrategiesGet_596419,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesGet_596420,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementStrategiesDelete_596434 = ref object of OpenApiRestCall_593437
proc url_DfareportingPlacementStrategiesDelete_596436(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placementStrategies/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementStrategiesDelete_596435(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing placement strategy.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Placement strategy ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596437 = path.getOrDefault("profileId")
  valid_596437 = validateParameter(valid_596437, JString, required = true,
                                 default = nil)
  if valid_596437 != nil:
    section.add "profileId", valid_596437
  var valid_596438 = path.getOrDefault("id")
  valid_596438 = validateParameter(valid_596438, JString, required = true,
                                 default = nil)
  if valid_596438 != nil:
    section.add "id", valid_596438
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596439 = query.getOrDefault("fields")
  valid_596439 = validateParameter(valid_596439, JString, required = false,
                                 default = nil)
  if valid_596439 != nil:
    section.add "fields", valid_596439
  var valid_596440 = query.getOrDefault("quotaUser")
  valid_596440 = validateParameter(valid_596440, JString, required = false,
                                 default = nil)
  if valid_596440 != nil:
    section.add "quotaUser", valid_596440
  var valid_596441 = query.getOrDefault("alt")
  valid_596441 = validateParameter(valid_596441, JString, required = false,
                                 default = newJString("json"))
  if valid_596441 != nil:
    section.add "alt", valid_596441
  var valid_596442 = query.getOrDefault("oauth_token")
  valid_596442 = validateParameter(valid_596442, JString, required = false,
                                 default = nil)
  if valid_596442 != nil:
    section.add "oauth_token", valid_596442
  var valid_596443 = query.getOrDefault("userIp")
  valid_596443 = validateParameter(valid_596443, JString, required = false,
                                 default = nil)
  if valid_596443 != nil:
    section.add "userIp", valid_596443
  var valid_596444 = query.getOrDefault("key")
  valid_596444 = validateParameter(valid_596444, JString, required = false,
                                 default = nil)
  if valid_596444 != nil:
    section.add "key", valid_596444
  var valid_596445 = query.getOrDefault("prettyPrint")
  valid_596445 = validateParameter(valid_596445, JBool, required = false,
                                 default = newJBool(true))
  if valid_596445 != nil:
    section.add "prettyPrint", valid_596445
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596446: Call_DfareportingPlacementStrategiesDelete_596434;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes an existing placement strategy.
  ## 
  let valid = call_596446.validator(path, query, header, formData, body)
  let scheme = call_596446.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596446.url(scheme.get, call_596446.host, call_596446.base,
                         call_596446.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596446, url, valid)

proc call*(call_596447: Call_DfareportingPlacementStrategiesDelete_596434;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementStrategiesDelete
  ## Deletes an existing placement strategy.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Placement strategy ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596448 = newJObject()
  var query_596449 = newJObject()
  add(path_596448, "profileId", newJString(profileId))
  add(query_596449, "fields", newJString(fields))
  add(query_596449, "quotaUser", newJString(quotaUser))
  add(query_596449, "alt", newJString(alt))
  add(query_596449, "oauth_token", newJString(oauthToken))
  add(query_596449, "userIp", newJString(userIp))
  add(path_596448, "id", newJString(id))
  add(query_596449, "key", newJString(key))
  add(query_596449, "prettyPrint", newJBool(prettyPrint))
  result = call_596447.call(path_596448, query_596449, nil, nil, nil)

var dfareportingPlacementStrategiesDelete* = Call_DfareportingPlacementStrategiesDelete_596434(
    name: "dfareportingPlacementStrategiesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placementStrategies/{id}",
    validator: validate_DfareportingPlacementStrategiesDelete_596435,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementStrategiesDelete_596436,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsUpdate_596487 = ref object of OpenApiRestCall_593437
proc url_DfareportingPlacementsUpdate_596489(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsUpdate_596488(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596490 = path.getOrDefault("profileId")
  valid_596490 = validateParameter(valid_596490, JString, required = true,
                                 default = nil)
  if valid_596490 != nil:
    section.add "profileId", valid_596490
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596491 = query.getOrDefault("fields")
  valid_596491 = validateParameter(valid_596491, JString, required = false,
                                 default = nil)
  if valid_596491 != nil:
    section.add "fields", valid_596491
  var valid_596492 = query.getOrDefault("quotaUser")
  valid_596492 = validateParameter(valid_596492, JString, required = false,
                                 default = nil)
  if valid_596492 != nil:
    section.add "quotaUser", valid_596492
  var valid_596493 = query.getOrDefault("alt")
  valid_596493 = validateParameter(valid_596493, JString, required = false,
                                 default = newJString("json"))
  if valid_596493 != nil:
    section.add "alt", valid_596493
  var valid_596494 = query.getOrDefault("oauth_token")
  valid_596494 = validateParameter(valid_596494, JString, required = false,
                                 default = nil)
  if valid_596494 != nil:
    section.add "oauth_token", valid_596494
  var valid_596495 = query.getOrDefault("userIp")
  valid_596495 = validateParameter(valid_596495, JString, required = false,
                                 default = nil)
  if valid_596495 != nil:
    section.add "userIp", valid_596495
  var valid_596496 = query.getOrDefault("key")
  valid_596496 = validateParameter(valid_596496, JString, required = false,
                                 default = nil)
  if valid_596496 != nil:
    section.add "key", valid_596496
  var valid_596497 = query.getOrDefault("prettyPrint")
  valid_596497 = validateParameter(valid_596497, JBool, required = false,
                                 default = newJBool(true))
  if valid_596497 != nil:
    section.add "prettyPrint", valid_596497
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596499: Call_DfareportingPlacementsUpdate_596487; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing placement.
  ## 
  let valid = call_596499.validator(path, query, header, formData, body)
  let scheme = call_596499.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596499.url(scheme.get, call_596499.host, call_596499.base,
                         call_596499.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596499, url, valid)

proc call*(call_596500: Call_DfareportingPlacementsUpdate_596487;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementsUpdate
  ## Updates an existing placement.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596501 = newJObject()
  var query_596502 = newJObject()
  var body_596503 = newJObject()
  add(path_596501, "profileId", newJString(profileId))
  add(query_596502, "fields", newJString(fields))
  add(query_596502, "quotaUser", newJString(quotaUser))
  add(query_596502, "alt", newJString(alt))
  add(query_596502, "oauth_token", newJString(oauthToken))
  add(query_596502, "userIp", newJString(userIp))
  add(query_596502, "key", newJString(key))
  if body != nil:
    body_596503 = body
  add(query_596502, "prettyPrint", newJBool(prettyPrint))
  result = call_596500.call(path_596501, query_596502, nil, nil, body_596503)

var dfareportingPlacementsUpdate* = Call_DfareportingPlacementsUpdate_596487(
    name: "dfareportingPlacementsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/placements",
    validator: validate_DfareportingPlacementsUpdate_596488,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsUpdate_596489,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsInsert_596504 = ref object of OpenApiRestCall_593437
proc url_DfareportingPlacementsInsert_596506(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsInsert_596505(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new placement.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596507 = path.getOrDefault("profileId")
  valid_596507 = validateParameter(valid_596507, JString, required = true,
                                 default = nil)
  if valid_596507 != nil:
    section.add "profileId", valid_596507
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596508 = query.getOrDefault("fields")
  valid_596508 = validateParameter(valid_596508, JString, required = false,
                                 default = nil)
  if valid_596508 != nil:
    section.add "fields", valid_596508
  var valid_596509 = query.getOrDefault("quotaUser")
  valid_596509 = validateParameter(valid_596509, JString, required = false,
                                 default = nil)
  if valid_596509 != nil:
    section.add "quotaUser", valid_596509
  var valid_596510 = query.getOrDefault("alt")
  valid_596510 = validateParameter(valid_596510, JString, required = false,
                                 default = newJString("json"))
  if valid_596510 != nil:
    section.add "alt", valid_596510
  var valid_596511 = query.getOrDefault("oauth_token")
  valid_596511 = validateParameter(valid_596511, JString, required = false,
                                 default = nil)
  if valid_596511 != nil:
    section.add "oauth_token", valid_596511
  var valid_596512 = query.getOrDefault("userIp")
  valid_596512 = validateParameter(valid_596512, JString, required = false,
                                 default = nil)
  if valid_596512 != nil:
    section.add "userIp", valid_596512
  var valid_596513 = query.getOrDefault("key")
  valid_596513 = validateParameter(valid_596513, JString, required = false,
                                 default = nil)
  if valid_596513 != nil:
    section.add "key", valid_596513
  var valid_596514 = query.getOrDefault("prettyPrint")
  valid_596514 = validateParameter(valid_596514, JBool, required = false,
                                 default = newJBool(true))
  if valid_596514 != nil:
    section.add "prettyPrint", valid_596514
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596516: Call_DfareportingPlacementsInsert_596504; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new placement.
  ## 
  let valid = call_596516.validator(path, query, header, formData, body)
  let scheme = call_596516.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596516.url(scheme.get, call_596516.host, call_596516.base,
                         call_596516.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596516, url, valid)

proc call*(call_596517: Call_DfareportingPlacementsInsert_596504;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementsInsert
  ## Inserts a new placement.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596518 = newJObject()
  var query_596519 = newJObject()
  var body_596520 = newJObject()
  add(path_596518, "profileId", newJString(profileId))
  add(query_596519, "fields", newJString(fields))
  add(query_596519, "quotaUser", newJString(quotaUser))
  add(query_596519, "alt", newJString(alt))
  add(query_596519, "oauth_token", newJString(oauthToken))
  add(query_596519, "userIp", newJString(userIp))
  add(query_596519, "key", newJString(key))
  if body != nil:
    body_596520 = body
  add(query_596519, "prettyPrint", newJBool(prettyPrint))
  result = call_596517.call(path_596518, query_596519, nil, nil, body_596520)

var dfareportingPlacementsInsert* = Call_DfareportingPlacementsInsert_596504(
    name: "dfareportingPlacementsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/placements",
    validator: validate_DfareportingPlacementsInsert_596505,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsInsert_596506,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsList_596450 = ref object of OpenApiRestCall_593437
proc url_DfareportingPlacementsList_596452(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsList_596451(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of placements, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596453 = path.getOrDefault("profileId")
  valid_596453 = validateParameter(valid_596453, JString, required = true,
                                 default = nil)
  if valid_596453 != nil:
    section.add "profileId", valid_596453
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   contentCategoryIds: JArray
  ##                     : Select only placements that are associated with these content categories.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for placements by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placements with names like "placement June 2015", "placement May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placement" will match placements with name "my placement", "placement 2015", or simply "placement".
  ##   minEndDate: JString
  ##             : Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   sizeIds: JArray
  ##          : Select only placements that are associated with these sizes.
  ##   siteIds: JArray
  ##          : Select only placements that are associated with these sites.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   maxStartDate: JString
  ##               : Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   campaignIds: JArray
  ##              : Select only placements that belong to these campaigns.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: JBool
  ##           : Select only archived placements. Don't set this field to select both archived and non-archived placements.
  ##   maxEndDate: JString
  ##             : Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only placements with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only placements that belong to these advertisers.
  ##   minStartDate: JString
  ##               : Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   paymentSource: JString
  ##                : Select only placements with this payment source.
  ##   compatibilities: JArray
  ##                  : Select only placements that are associated with these compatibilities. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   directorySiteIds: JArray
  ##                   : Select only placements that are associated with these directory sites.
  ##   groupIds: JArray
  ##           : Select only placements that belong to these placement groups.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   placementStrategyIds: JArray
  ##                       : Select only placements that are associated with these placement strategies.
  ##   pricingTypes: JArray
  ##               : Select only placements with these pricing types.
  section = newJObject()
  var valid_596454 = query.getOrDefault("fields")
  valid_596454 = validateParameter(valid_596454, JString, required = false,
                                 default = nil)
  if valid_596454 != nil:
    section.add "fields", valid_596454
  var valid_596455 = query.getOrDefault("pageToken")
  valid_596455 = validateParameter(valid_596455, JString, required = false,
                                 default = nil)
  if valid_596455 != nil:
    section.add "pageToken", valid_596455
  var valid_596456 = query.getOrDefault("quotaUser")
  valid_596456 = validateParameter(valid_596456, JString, required = false,
                                 default = nil)
  if valid_596456 != nil:
    section.add "quotaUser", valid_596456
  var valid_596457 = query.getOrDefault("sortField")
  valid_596457 = validateParameter(valid_596457, JString, required = false,
                                 default = newJString("ID"))
  if valid_596457 != nil:
    section.add "sortField", valid_596457
  var valid_596458 = query.getOrDefault("contentCategoryIds")
  valid_596458 = validateParameter(valid_596458, JArray, required = false,
                                 default = nil)
  if valid_596458 != nil:
    section.add "contentCategoryIds", valid_596458
  var valid_596459 = query.getOrDefault("alt")
  valid_596459 = validateParameter(valid_596459, JString, required = false,
                                 default = newJString("json"))
  if valid_596459 != nil:
    section.add "alt", valid_596459
  var valid_596460 = query.getOrDefault("searchString")
  valid_596460 = validateParameter(valid_596460, JString, required = false,
                                 default = nil)
  if valid_596460 != nil:
    section.add "searchString", valid_596460
  var valid_596461 = query.getOrDefault("minEndDate")
  valid_596461 = validateParameter(valid_596461, JString, required = false,
                                 default = nil)
  if valid_596461 != nil:
    section.add "minEndDate", valid_596461
  var valid_596462 = query.getOrDefault("sizeIds")
  valid_596462 = validateParameter(valid_596462, JArray, required = false,
                                 default = nil)
  if valid_596462 != nil:
    section.add "sizeIds", valid_596462
  var valid_596463 = query.getOrDefault("siteIds")
  valid_596463 = validateParameter(valid_596463, JArray, required = false,
                                 default = nil)
  if valid_596463 != nil:
    section.add "siteIds", valid_596463
  var valid_596464 = query.getOrDefault("oauth_token")
  valid_596464 = validateParameter(valid_596464, JString, required = false,
                                 default = nil)
  if valid_596464 != nil:
    section.add "oauth_token", valid_596464
  var valid_596465 = query.getOrDefault("maxStartDate")
  valid_596465 = validateParameter(valid_596465, JString, required = false,
                                 default = nil)
  if valid_596465 != nil:
    section.add "maxStartDate", valid_596465
  var valid_596466 = query.getOrDefault("campaignIds")
  valid_596466 = validateParameter(valid_596466, JArray, required = false,
                                 default = nil)
  if valid_596466 != nil:
    section.add "campaignIds", valid_596466
  var valid_596467 = query.getOrDefault("userIp")
  valid_596467 = validateParameter(valid_596467, JString, required = false,
                                 default = nil)
  if valid_596467 != nil:
    section.add "userIp", valid_596467
  var valid_596468 = query.getOrDefault("archived")
  valid_596468 = validateParameter(valid_596468, JBool, required = false, default = nil)
  if valid_596468 != nil:
    section.add "archived", valid_596468
  var valid_596469 = query.getOrDefault("maxEndDate")
  valid_596469 = validateParameter(valid_596469, JString, required = false,
                                 default = nil)
  if valid_596469 != nil:
    section.add "maxEndDate", valid_596469
  var valid_596470 = query.getOrDefault("maxResults")
  valid_596470 = validateParameter(valid_596470, JInt, required = false,
                                 default = newJInt(1000))
  if valid_596470 != nil:
    section.add "maxResults", valid_596470
  var valid_596471 = query.getOrDefault("ids")
  valid_596471 = validateParameter(valid_596471, JArray, required = false,
                                 default = nil)
  if valid_596471 != nil:
    section.add "ids", valid_596471
  var valid_596472 = query.getOrDefault("key")
  valid_596472 = validateParameter(valid_596472, JString, required = false,
                                 default = nil)
  if valid_596472 != nil:
    section.add "key", valid_596472
  var valid_596473 = query.getOrDefault("advertiserIds")
  valid_596473 = validateParameter(valid_596473, JArray, required = false,
                                 default = nil)
  if valid_596473 != nil:
    section.add "advertiserIds", valid_596473
  var valid_596474 = query.getOrDefault("minStartDate")
  valid_596474 = validateParameter(valid_596474, JString, required = false,
                                 default = nil)
  if valid_596474 != nil:
    section.add "minStartDate", valid_596474
  var valid_596475 = query.getOrDefault("paymentSource")
  valid_596475 = validateParameter(valid_596475, JString, required = false,
                                 default = newJString("PLACEMENT_AGENCY_PAID"))
  if valid_596475 != nil:
    section.add "paymentSource", valid_596475
  var valid_596476 = query.getOrDefault("compatibilities")
  valid_596476 = validateParameter(valid_596476, JArray, required = false,
                                 default = nil)
  if valid_596476 != nil:
    section.add "compatibilities", valid_596476
  var valid_596477 = query.getOrDefault("sortOrder")
  valid_596477 = validateParameter(valid_596477, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_596477 != nil:
    section.add "sortOrder", valid_596477
  var valid_596478 = query.getOrDefault("directorySiteIds")
  valid_596478 = validateParameter(valid_596478, JArray, required = false,
                                 default = nil)
  if valid_596478 != nil:
    section.add "directorySiteIds", valid_596478
  var valid_596479 = query.getOrDefault("groupIds")
  valid_596479 = validateParameter(valid_596479, JArray, required = false,
                                 default = nil)
  if valid_596479 != nil:
    section.add "groupIds", valid_596479
  var valid_596480 = query.getOrDefault("prettyPrint")
  valid_596480 = validateParameter(valid_596480, JBool, required = false,
                                 default = newJBool(true))
  if valid_596480 != nil:
    section.add "prettyPrint", valid_596480
  var valid_596481 = query.getOrDefault("placementStrategyIds")
  valid_596481 = validateParameter(valid_596481, JArray, required = false,
                                 default = nil)
  if valid_596481 != nil:
    section.add "placementStrategyIds", valid_596481
  var valid_596482 = query.getOrDefault("pricingTypes")
  valid_596482 = validateParameter(valid_596482, JArray, required = false,
                                 default = nil)
  if valid_596482 != nil:
    section.add "pricingTypes", valid_596482
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596483: Call_DfareportingPlacementsList_596450; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of placements, possibly filtered. This method supports paging.
  ## 
  let valid = call_596483.validator(path, query, header, formData, body)
  let scheme = call_596483.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596483.url(scheme.get, call_596483.host, call_596483.base,
                         call_596483.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596483, url, valid)

proc call*(call_596484: Call_DfareportingPlacementsList_596450; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "ID"; contentCategoryIds: JsonNode = nil;
          alt: string = "json"; searchString: string = ""; minEndDate: string = "";
          sizeIds: JsonNode = nil; siteIds: JsonNode = nil; oauthToken: string = "";
          maxStartDate: string = ""; campaignIds: JsonNode = nil; userIp: string = "";
          archived: bool = false; maxEndDate: string = ""; maxResults: int = 1000;
          ids: JsonNode = nil; key: string = ""; advertiserIds: JsonNode = nil;
          minStartDate: string = "";
          paymentSource: string = "PLACEMENT_AGENCY_PAID";
          compatibilities: JsonNode = nil; sortOrder: string = "ASCENDING";
          directorySiteIds: JsonNode = nil; groupIds: JsonNode = nil;
          prettyPrint: bool = true; placementStrategyIds: JsonNode = nil;
          pricingTypes: JsonNode = nil): Recallable =
  ## dfareportingPlacementsList
  ## Retrieves a list of placements, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   contentCategoryIds: JArray
  ##                     : Select only placements that are associated with these content categories.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for placements by name or ID. Wildcards (*) are allowed. For example, "placement*2015" will return placements with names like "placement June 2015", "placement May 2015", or simply "placements 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "placement" will match placements with name "my placement", "placement 2015", or simply "placement".
  ##   minEndDate: string
  ##             : Select only placements or placement groups whose end date is on or after the specified minEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   sizeIds: JArray
  ##          : Select only placements that are associated with these sizes.
  ##   siteIds: JArray
  ##          : Select only placements that are associated with these sites.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   maxStartDate: string
  ##               : Select only placements or placement groups whose start date is on or before the specified maxStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   campaignIds: JArray
  ##              : Select only placements that belong to these campaigns.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   archived: bool
  ##           : Select only archived placements. Don't set this field to select both archived and non-archived placements.
  ##   maxEndDate: string
  ##             : Select only placements or placement groups whose end date is on or before the specified maxEndDate. The date should be formatted as "yyyy-MM-dd".
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only placements with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only placements that belong to these advertisers.
  ##   minStartDate: string
  ##               : Select only placements or placement groups whose start date is on or after the specified minStartDate. The date should be formatted as "yyyy-MM-dd".
  ##   paymentSource: string
  ##                : Select only placements with this payment source.
  ##   compatibilities: JArray
  ##                  : Select only placements that are associated with these compatibilities. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   directorySiteIds: JArray
  ##                   : Select only placements that are associated with these directory sites.
  ##   groupIds: JArray
  ##           : Select only placements that belong to these placement groups.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   placementStrategyIds: JArray
  ##                       : Select only placements that are associated with these placement strategies.
  ##   pricingTypes: JArray
  ##               : Select only placements with these pricing types.
  var path_596485 = newJObject()
  var query_596486 = newJObject()
  add(path_596485, "profileId", newJString(profileId))
  add(query_596486, "fields", newJString(fields))
  add(query_596486, "pageToken", newJString(pageToken))
  add(query_596486, "quotaUser", newJString(quotaUser))
  add(query_596486, "sortField", newJString(sortField))
  if contentCategoryIds != nil:
    query_596486.add "contentCategoryIds", contentCategoryIds
  add(query_596486, "alt", newJString(alt))
  add(query_596486, "searchString", newJString(searchString))
  add(query_596486, "minEndDate", newJString(minEndDate))
  if sizeIds != nil:
    query_596486.add "sizeIds", sizeIds
  if siteIds != nil:
    query_596486.add "siteIds", siteIds
  add(query_596486, "oauth_token", newJString(oauthToken))
  add(query_596486, "maxStartDate", newJString(maxStartDate))
  if campaignIds != nil:
    query_596486.add "campaignIds", campaignIds
  add(query_596486, "userIp", newJString(userIp))
  add(query_596486, "archived", newJBool(archived))
  add(query_596486, "maxEndDate", newJString(maxEndDate))
  add(query_596486, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_596486.add "ids", ids
  add(query_596486, "key", newJString(key))
  if advertiserIds != nil:
    query_596486.add "advertiserIds", advertiserIds
  add(query_596486, "minStartDate", newJString(minStartDate))
  add(query_596486, "paymentSource", newJString(paymentSource))
  if compatibilities != nil:
    query_596486.add "compatibilities", compatibilities
  add(query_596486, "sortOrder", newJString(sortOrder))
  if directorySiteIds != nil:
    query_596486.add "directorySiteIds", directorySiteIds
  if groupIds != nil:
    query_596486.add "groupIds", groupIds
  add(query_596486, "prettyPrint", newJBool(prettyPrint))
  if placementStrategyIds != nil:
    query_596486.add "placementStrategyIds", placementStrategyIds
  if pricingTypes != nil:
    query_596486.add "pricingTypes", pricingTypes
  result = call_596484.call(path_596485, query_596486, nil, nil, nil)

var dfareportingPlacementsList* = Call_DfareportingPlacementsList_596450(
    name: "dfareportingPlacementsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/placements",
    validator: validate_DfareportingPlacementsList_596451,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsList_596452,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsPatch_596521 = ref object of OpenApiRestCall_593437
proc url_DfareportingPlacementsPatch_596523(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsPatch_596522(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing placement. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596524 = path.getOrDefault("profileId")
  valid_596524 = validateParameter(valid_596524, JString, required = true,
                                 default = nil)
  if valid_596524 != nil:
    section.add "profileId", valid_596524
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Placement ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596525 = query.getOrDefault("fields")
  valid_596525 = validateParameter(valid_596525, JString, required = false,
                                 default = nil)
  if valid_596525 != nil:
    section.add "fields", valid_596525
  var valid_596526 = query.getOrDefault("quotaUser")
  valid_596526 = validateParameter(valid_596526, JString, required = false,
                                 default = nil)
  if valid_596526 != nil:
    section.add "quotaUser", valid_596526
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_596527 = query.getOrDefault("id")
  valid_596527 = validateParameter(valid_596527, JString, required = true,
                                 default = nil)
  if valid_596527 != nil:
    section.add "id", valid_596527
  var valid_596528 = query.getOrDefault("alt")
  valid_596528 = validateParameter(valid_596528, JString, required = false,
                                 default = newJString("json"))
  if valid_596528 != nil:
    section.add "alt", valid_596528
  var valid_596529 = query.getOrDefault("oauth_token")
  valid_596529 = validateParameter(valid_596529, JString, required = false,
                                 default = nil)
  if valid_596529 != nil:
    section.add "oauth_token", valid_596529
  var valid_596530 = query.getOrDefault("userIp")
  valid_596530 = validateParameter(valid_596530, JString, required = false,
                                 default = nil)
  if valid_596530 != nil:
    section.add "userIp", valid_596530
  var valid_596531 = query.getOrDefault("key")
  valid_596531 = validateParameter(valid_596531, JString, required = false,
                                 default = nil)
  if valid_596531 != nil:
    section.add "key", valid_596531
  var valid_596532 = query.getOrDefault("prettyPrint")
  valid_596532 = validateParameter(valid_596532, JBool, required = false,
                                 default = newJBool(true))
  if valid_596532 != nil:
    section.add "prettyPrint", valid_596532
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596534: Call_DfareportingPlacementsPatch_596521; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing placement. This method supports patch semantics.
  ## 
  let valid = call_596534.validator(path, query, header, formData, body)
  let scheme = call_596534.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596534.url(scheme.get, call_596534.host, call_596534.base,
                         call_596534.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596534, url, valid)

proc call*(call_596535: Call_DfareportingPlacementsPatch_596521; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementsPatch
  ## Updates an existing placement. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Placement ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596536 = newJObject()
  var query_596537 = newJObject()
  var body_596538 = newJObject()
  add(path_596536, "profileId", newJString(profileId))
  add(query_596537, "fields", newJString(fields))
  add(query_596537, "quotaUser", newJString(quotaUser))
  add(query_596537, "id", newJString(id))
  add(query_596537, "alt", newJString(alt))
  add(query_596537, "oauth_token", newJString(oauthToken))
  add(query_596537, "userIp", newJString(userIp))
  add(query_596537, "key", newJString(key))
  if body != nil:
    body_596538 = body
  add(query_596537, "prettyPrint", newJBool(prettyPrint))
  result = call_596535.call(path_596536, query_596537, nil, nil, body_596538)

var dfareportingPlacementsPatch* = Call_DfareportingPlacementsPatch_596521(
    name: "dfareportingPlacementsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/placements",
    validator: validate_DfareportingPlacementsPatch_596522,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsPatch_596523,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsGeneratetags_596539 = ref object of OpenApiRestCall_593437
proc url_DfareportingPlacementsGeneratetags_596541(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements/generatetags")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsGeneratetags_596540(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates tags for a placement.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596542 = path.getOrDefault("profileId")
  valid_596542 = validateParameter(valid_596542, JString, required = true,
                                 default = nil)
  if valid_596542 != nil:
    section.add "profileId", valid_596542
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  ##   campaignId: JString
  ##             : Generate placements belonging to this campaign. This is a required field.
  ##   tagFormats: JArray
  ##             : Tag formats to generate for these placements.
  ## 
  ## Note: PLACEMENT_TAG_STANDARD can only be generated for 1x1 placements.
  ##   placementIds: JArray
  ##               : Generate tags for these placements.
  section = newJObject()
  var valid_596543 = query.getOrDefault("fields")
  valid_596543 = validateParameter(valid_596543, JString, required = false,
                                 default = nil)
  if valid_596543 != nil:
    section.add "fields", valid_596543
  var valid_596544 = query.getOrDefault("quotaUser")
  valid_596544 = validateParameter(valid_596544, JString, required = false,
                                 default = nil)
  if valid_596544 != nil:
    section.add "quotaUser", valid_596544
  var valid_596545 = query.getOrDefault("alt")
  valid_596545 = validateParameter(valid_596545, JString, required = false,
                                 default = newJString("json"))
  if valid_596545 != nil:
    section.add "alt", valid_596545
  var valid_596546 = query.getOrDefault("oauth_token")
  valid_596546 = validateParameter(valid_596546, JString, required = false,
                                 default = nil)
  if valid_596546 != nil:
    section.add "oauth_token", valid_596546
  var valid_596547 = query.getOrDefault("userIp")
  valid_596547 = validateParameter(valid_596547, JString, required = false,
                                 default = nil)
  if valid_596547 != nil:
    section.add "userIp", valid_596547
  var valid_596548 = query.getOrDefault("key")
  valid_596548 = validateParameter(valid_596548, JString, required = false,
                                 default = nil)
  if valid_596548 != nil:
    section.add "key", valid_596548
  var valid_596549 = query.getOrDefault("prettyPrint")
  valid_596549 = validateParameter(valid_596549, JBool, required = false,
                                 default = newJBool(true))
  if valid_596549 != nil:
    section.add "prettyPrint", valid_596549
  var valid_596550 = query.getOrDefault("campaignId")
  valid_596550 = validateParameter(valid_596550, JString, required = false,
                                 default = nil)
  if valid_596550 != nil:
    section.add "campaignId", valid_596550
  var valid_596551 = query.getOrDefault("tagFormats")
  valid_596551 = validateParameter(valid_596551, JArray, required = false,
                                 default = nil)
  if valid_596551 != nil:
    section.add "tagFormats", valid_596551
  var valid_596552 = query.getOrDefault("placementIds")
  valid_596552 = validateParameter(valid_596552, JArray, required = false,
                                 default = nil)
  if valid_596552 != nil:
    section.add "placementIds", valid_596552
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596553: Call_DfareportingPlacementsGeneratetags_596539;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates tags for a placement.
  ## 
  let valid = call_596553.validator(path, query, header, formData, body)
  let scheme = call_596553.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596553.url(scheme.get, call_596553.host, call_596553.base,
                         call_596553.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596553, url, valid)

proc call*(call_596554: Call_DfareportingPlacementsGeneratetags_596539;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true; campaignId: string = "";
          tagFormats: JsonNode = nil; placementIds: JsonNode = nil): Recallable =
  ## dfareportingPlacementsGeneratetags
  ## Generates tags for a placement.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  ##   campaignId: string
  ##             : Generate placements belonging to this campaign. This is a required field.
  ##   tagFormats: JArray
  ##             : Tag formats to generate for these placements.
  ## 
  ## Note: PLACEMENT_TAG_STANDARD can only be generated for 1x1 placements.
  ##   placementIds: JArray
  ##               : Generate tags for these placements.
  var path_596555 = newJObject()
  var query_596556 = newJObject()
  add(path_596555, "profileId", newJString(profileId))
  add(query_596556, "fields", newJString(fields))
  add(query_596556, "quotaUser", newJString(quotaUser))
  add(query_596556, "alt", newJString(alt))
  add(query_596556, "oauth_token", newJString(oauthToken))
  add(query_596556, "userIp", newJString(userIp))
  add(query_596556, "key", newJString(key))
  add(query_596556, "prettyPrint", newJBool(prettyPrint))
  add(query_596556, "campaignId", newJString(campaignId))
  if tagFormats != nil:
    query_596556.add "tagFormats", tagFormats
  if placementIds != nil:
    query_596556.add "placementIds", placementIds
  result = call_596554.call(path_596555, query_596556, nil, nil, nil)

var dfareportingPlacementsGeneratetags* = Call_DfareportingPlacementsGeneratetags_596539(
    name: "dfareportingPlacementsGeneratetags", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placements/generatetags",
    validator: validate_DfareportingPlacementsGeneratetags_596540,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsGeneratetags_596541,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlacementsGet_596557 = ref object of OpenApiRestCall_593437
proc url_DfareportingPlacementsGet_596559(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/placements/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlacementsGet_596558(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one placement by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Placement ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596560 = path.getOrDefault("profileId")
  valid_596560 = validateParameter(valid_596560, JString, required = true,
                                 default = nil)
  if valid_596560 != nil:
    section.add "profileId", valid_596560
  var valid_596561 = path.getOrDefault("id")
  valid_596561 = validateParameter(valid_596561, JString, required = true,
                                 default = nil)
  if valid_596561 != nil:
    section.add "id", valid_596561
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596562 = query.getOrDefault("fields")
  valid_596562 = validateParameter(valid_596562, JString, required = false,
                                 default = nil)
  if valid_596562 != nil:
    section.add "fields", valid_596562
  var valid_596563 = query.getOrDefault("quotaUser")
  valid_596563 = validateParameter(valid_596563, JString, required = false,
                                 default = nil)
  if valid_596563 != nil:
    section.add "quotaUser", valid_596563
  var valid_596564 = query.getOrDefault("alt")
  valid_596564 = validateParameter(valid_596564, JString, required = false,
                                 default = newJString("json"))
  if valid_596564 != nil:
    section.add "alt", valid_596564
  var valid_596565 = query.getOrDefault("oauth_token")
  valid_596565 = validateParameter(valid_596565, JString, required = false,
                                 default = nil)
  if valid_596565 != nil:
    section.add "oauth_token", valid_596565
  var valid_596566 = query.getOrDefault("userIp")
  valid_596566 = validateParameter(valid_596566, JString, required = false,
                                 default = nil)
  if valid_596566 != nil:
    section.add "userIp", valid_596566
  var valid_596567 = query.getOrDefault("key")
  valid_596567 = validateParameter(valid_596567, JString, required = false,
                                 default = nil)
  if valid_596567 != nil:
    section.add "key", valid_596567
  var valid_596568 = query.getOrDefault("prettyPrint")
  valid_596568 = validateParameter(valid_596568, JBool, required = false,
                                 default = newJBool(true))
  if valid_596568 != nil:
    section.add "prettyPrint", valid_596568
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596569: Call_DfareportingPlacementsGet_596557; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one placement by ID.
  ## 
  let valid = call_596569.validator(path, query, header, formData, body)
  let scheme = call_596569.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596569.url(scheme.get, call_596569.host, call_596569.base,
                         call_596569.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596569, url, valid)

proc call*(call_596570: Call_DfareportingPlacementsGet_596557; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingPlacementsGet
  ## Gets one placement by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Placement ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596571 = newJObject()
  var query_596572 = newJObject()
  add(path_596571, "profileId", newJString(profileId))
  add(query_596572, "fields", newJString(fields))
  add(query_596572, "quotaUser", newJString(quotaUser))
  add(query_596572, "alt", newJString(alt))
  add(query_596572, "oauth_token", newJString(oauthToken))
  add(query_596572, "userIp", newJString(userIp))
  add(path_596571, "id", newJString(id))
  add(query_596572, "key", newJString(key))
  add(query_596572, "prettyPrint", newJBool(prettyPrint))
  result = call_596570.call(path_596571, query_596572, nil, nil, nil)

var dfareportingPlacementsGet* = Call_DfareportingPlacementsGet_596557(
    name: "dfareportingPlacementsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/placements/{id}",
    validator: validate_DfareportingPlacementsGet_596558,
    base: "/dfareporting/v3.2", url: url_DfareportingPlacementsGet_596559,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlatformTypesList_596573 = ref object of OpenApiRestCall_593437
proc url_DfareportingPlatformTypesList_596575(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/platformTypes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlatformTypesList_596574(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of platform types.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596576 = path.getOrDefault("profileId")
  valid_596576 = validateParameter(valid_596576, JString, required = true,
                                 default = nil)
  if valid_596576 != nil:
    section.add "profileId", valid_596576
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596577 = query.getOrDefault("fields")
  valid_596577 = validateParameter(valid_596577, JString, required = false,
                                 default = nil)
  if valid_596577 != nil:
    section.add "fields", valid_596577
  var valid_596578 = query.getOrDefault("quotaUser")
  valid_596578 = validateParameter(valid_596578, JString, required = false,
                                 default = nil)
  if valid_596578 != nil:
    section.add "quotaUser", valid_596578
  var valid_596579 = query.getOrDefault("alt")
  valid_596579 = validateParameter(valid_596579, JString, required = false,
                                 default = newJString("json"))
  if valid_596579 != nil:
    section.add "alt", valid_596579
  var valid_596580 = query.getOrDefault("oauth_token")
  valid_596580 = validateParameter(valid_596580, JString, required = false,
                                 default = nil)
  if valid_596580 != nil:
    section.add "oauth_token", valid_596580
  var valid_596581 = query.getOrDefault("userIp")
  valid_596581 = validateParameter(valid_596581, JString, required = false,
                                 default = nil)
  if valid_596581 != nil:
    section.add "userIp", valid_596581
  var valid_596582 = query.getOrDefault("key")
  valid_596582 = validateParameter(valid_596582, JString, required = false,
                                 default = nil)
  if valid_596582 != nil:
    section.add "key", valid_596582
  var valid_596583 = query.getOrDefault("prettyPrint")
  valid_596583 = validateParameter(valid_596583, JBool, required = false,
                                 default = newJBool(true))
  if valid_596583 != nil:
    section.add "prettyPrint", valid_596583
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596584: Call_DfareportingPlatformTypesList_596573; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of platform types.
  ## 
  let valid = call_596584.validator(path, query, header, formData, body)
  let scheme = call_596584.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596584.url(scheme.get, call_596584.host, call_596584.base,
                         call_596584.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596584, url, valid)

proc call*(call_596585: Call_DfareportingPlatformTypesList_596573;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingPlatformTypesList
  ## Retrieves a list of platform types.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596586 = newJObject()
  var query_596587 = newJObject()
  add(path_596586, "profileId", newJString(profileId))
  add(query_596587, "fields", newJString(fields))
  add(query_596587, "quotaUser", newJString(quotaUser))
  add(query_596587, "alt", newJString(alt))
  add(query_596587, "oauth_token", newJString(oauthToken))
  add(query_596587, "userIp", newJString(userIp))
  add(query_596587, "key", newJString(key))
  add(query_596587, "prettyPrint", newJBool(prettyPrint))
  result = call_596585.call(path_596586, query_596587, nil, nil, nil)

var dfareportingPlatformTypesList* = Call_DfareportingPlatformTypesList_596573(
    name: "dfareportingPlatformTypesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/platformTypes",
    validator: validate_DfareportingPlatformTypesList_596574,
    base: "/dfareporting/v3.2", url: url_DfareportingPlatformTypesList_596575,
    schemes: {Scheme.Https})
type
  Call_DfareportingPlatformTypesGet_596588 = ref object of OpenApiRestCall_593437
proc url_DfareportingPlatformTypesGet_596590(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/platformTypes/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPlatformTypesGet_596589(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one platform type by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Platform type ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596591 = path.getOrDefault("profileId")
  valid_596591 = validateParameter(valid_596591, JString, required = true,
                                 default = nil)
  if valid_596591 != nil:
    section.add "profileId", valid_596591
  var valid_596592 = path.getOrDefault("id")
  valid_596592 = validateParameter(valid_596592, JString, required = true,
                                 default = nil)
  if valid_596592 != nil:
    section.add "id", valid_596592
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596593 = query.getOrDefault("fields")
  valid_596593 = validateParameter(valid_596593, JString, required = false,
                                 default = nil)
  if valid_596593 != nil:
    section.add "fields", valid_596593
  var valid_596594 = query.getOrDefault("quotaUser")
  valid_596594 = validateParameter(valid_596594, JString, required = false,
                                 default = nil)
  if valid_596594 != nil:
    section.add "quotaUser", valid_596594
  var valid_596595 = query.getOrDefault("alt")
  valid_596595 = validateParameter(valid_596595, JString, required = false,
                                 default = newJString("json"))
  if valid_596595 != nil:
    section.add "alt", valid_596595
  var valid_596596 = query.getOrDefault("oauth_token")
  valid_596596 = validateParameter(valid_596596, JString, required = false,
                                 default = nil)
  if valid_596596 != nil:
    section.add "oauth_token", valid_596596
  var valid_596597 = query.getOrDefault("userIp")
  valid_596597 = validateParameter(valid_596597, JString, required = false,
                                 default = nil)
  if valid_596597 != nil:
    section.add "userIp", valid_596597
  var valid_596598 = query.getOrDefault("key")
  valid_596598 = validateParameter(valid_596598, JString, required = false,
                                 default = nil)
  if valid_596598 != nil:
    section.add "key", valid_596598
  var valid_596599 = query.getOrDefault("prettyPrint")
  valid_596599 = validateParameter(valid_596599, JBool, required = false,
                                 default = newJBool(true))
  if valid_596599 != nil:
    section.add "prettyPrint", valid_596599
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596600: Call_DfareportingPlatformTypesGet_596588; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one platform type by ID.
  ## 
  let valid = call_596600.validator(path, query, header, formData, body)
  let scheme = call_596600.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596600.url(scheme.get, call_596600.host, call_596600.base,
                         call_596600.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596600, url, valid)

proc call*(call_596601: Call_DfareportingPlatformTypesGet_596588;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingPlatformTypesGet
  ## Gets one platform type by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Platform type ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596602 = newJObject()
  var query_596603 = newJObject()
  add(path_596602, "profileId", newJString(profileId))
  add(query_596603, "fields", newJString(fields))
  add(query_596603, "quotaUser", newJString(quotaUser))
  add(query_596603, "alt", newJString(alt))
  add(query_596603, "oauth_token", newJString(oauthToken))
  add(query_596603, "userIp", newJString(userIp))
  add(path_596602, "id", newJString(id))
  add(query_596603, "key", newJString(key))
  add(query_596603, "prettyPrint", newJBool(prettyPrint))
  result = call_596601.call(path_596602, query_596603, nil, nil, nil)

var dfareportingPlatformTypesGet* = Call_DfareportingPlatformTypesGet_596588(
    name: "dfareportingPlatformTypesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/platformTypes/{id}",
    validator: validate_DfareportingPlatformTypesGet_596589,
    base: "/dfareporting/v3.2", url: url_DfareportingPlatformTypesGet_596590,
    schemes: {Scheme.Https})
type
  Call_DfareportingPostalCodesList_596604 = ref object of OpenApiRestCall_593437
proc url_DfareportingPostalCodesList_596606(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/postalCodes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPostalCodesList_596605(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of postal codes.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596607 = path.getOrDefault("profileId")
  valid_596607 = validateParameter(valid_596607, JString, required = true,
                                 default = nil)
  if valid_596607 != nil:
    section.add "profileId", valid_596607
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596608 = query.getOrDefault("fields")
  valid_596608 = validateParameter(valid_596608, JString, required = false,
                                 default = nil)
  if valid_596608 != nil:
    section.add "fields", valid_596608
  var valid_596609 = query.getOrDefault("quotaUser")
  valid_596609 = validateParameter(valid_596609, JString, required = false,
                                 default = nil)
  if valid_596609 != nil:
    section.add "quotaUser", valid_596609
  var valid_596610 = query.getOrDefault("alt")
  valid_596610 = validateParameter(valid_596610, JString, required = false,
                                 default = newJString("json"))
  if valid_596610 != nil:
    section.add "alt", valid_596610
  var valid_596611 = query.getOrDefault("oauth_token")
  valid_596611 = validateParameter(valid_596611, JString, required = false,
                                 default = nil)
  if valid_596611 != nil:
    section.add "oauth_token", valid_596611
  var valid_596612 = query.getOrDefault("userIp")
  valid_596612 = validateParameter(valid_596612, JString, required = false,
                                 default = nil)
  if valid_596612 != nil:
    section.add "userIp", valid_596612
  var valid_596613 = query.getOrDefault("key")
  valid_596613 = validateParameter(valid_596613, JString, required = false,
                                 default = nil)
  if valid_596613 != nil:
    section.add "key", valid_596613
  var valid_596614 = query.getOrDefault("prettyPrint")
  valid_596614 = validateParameter(valid_596614, JBool, required = false,
                                 default = newJBool(true))
  if valid_596614 != nil:
    section.add "prettyPrint", valid_596614
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596615: Call_DfareportingPostalCodesList_596604; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of postal codes.
  ## 
  let valid = call_596615.validator(path, query, header, formData, body)
  let scheme = call_596615.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596615.url(scheme.get, call_596615.host, call_596615.base,
                         call_596615.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596615, url, valid)

proc call*(call_596616: Call_DfareportingPostalCodesList_596604; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingPostalCodesList
  ## Retrieves a list of postal codes.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596617 = newJObject()
  var query_596618 = newJObject()
  add(path_596617, "profileId", newJString(profileId))
  add(query_596618, "fields", newJString(fields))
  add(query_596618, "quotaUser", newJString(quotaUser))
  add(query_596618, "alt", newJString(alt))
  add(query_596618, "oauth_token", newJString(oauthToken))
  add(query_596618, "userIp", newJString(userIp))
  add(query_596618, "key", newJString(key))
  add(query_596618, "prettyPrint", newJBool(prettyPrint))
  result = call_596616.call(path_596617, query_596618, nil, nil, nil)

var dfareportingPostalCodesList* = Call_DfareportingPostalCodesList_596604(
    name: "dfareportingPostalCodesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/postalCodes",
    validator: validate_DfareportingPostalCodesList_596605,
    base: "/dfareporting/v3.2", url: url_DfareportingPostalCodesList_596606,
    schemes: {Scheme.Https})
type
  Call_DfareportingPostalCodesGet_596619 = ref object of OpenApiRestCall_593437
proc url_DfareportingPostalCodesGet_596621(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "code" in path, "`code` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/postalCodes/"),
               (kind: VariableSegment, value: "code")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingPostalCodesGet_596620(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one postal code by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   code: JString (required)
  ##       : Postal code ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596622 = path.getOrDefault("profileId")
  valid_596622 = validateParameter(valid_596622, JString, required = true,
                                 default = nil)
  if valid_596622 != nil:
    section.add "profileId", valid_596622
  var valid_596623 = path.getOrDefault("code")
  valid_596623 = validateParameter(valid_596623, JString, required = true,
                                 default = nil)
  if valid_596623 != nil:
    section.add "code", valid_596623
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596624 = query.getOrDefault("fields")
  valid_596624 = validateParameter(valid_596624, JString, required = false,
                                 default = nil)
  if valid_596624 != nil:
    section.add "fields", valid_596624
  var valid_596625 = query.getOrDefault("quotaUser")
  valid_596625 = validateParameter(valid_596625, JString, required = false,
                                 default = nil)
  if valid_596625 != nil:
    section.add "quotaUser", valid_596625
  var valid_596626 = query.getOrDefault("alt")
  valid_596626 = validateParameter(valid_596626, JString, required = false,
                                 default = newJString("json"))
  if valid_596626 != nil:
    section.add "alt", valid_596626
  var valid_596627 = query.getOrDefault("oauth_token")
  valid_596627 = validateParameter(valid_596627, JString, required = false,
                                 default = nil)
  if valid_596627 != nil:
    section.add "oauth_token", valid_596627
  var valid_596628 = query.getOrDefault("userIp")
  valid_596628 = validateParameter(valid_596628, JString, required = false,
                                 default = nil)
  if valid_596628 != nil:
    section.add "userIp", valid_596628
  var valid_596629 = query.getOrDefault("key")
  valid_596629 = validateParameter(valid_596629, JString, required = false,
                                 default = nil)
  if valid_596629 != nil:
    section.add "key", valid_596629
  var valid_596630 = query.getOrDefault("prettyPrint")
  valid_596630 = validateParameter(valid_596630, JBool, required = false,
                                 default = newJBool(true))
  if valid_596630 != nil:
    section.add "prettyPrint", valid_596630
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596631: Call_DfareportingPostalCodesGet_596619; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one postal code by ID.
  ## 
  let valid = call_596631.validator(path, query, header, formData, body)
  let scheme = call_596631.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596631.url(scheme.get, call_596631.host, call_596631.base,
                         call_596631.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596631, url, valid)

proc call*(call_596632: Call_DfareportingPostalCodesGet_596619; profileId: string;
          code: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingPostalCodesGet
  ## Gets one postal code by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   code: string (required)
  ##       : Postal code ID.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596633 = newJObject()
  var query_596634 = newJObject()
  add(path_596633, "profileId", newJString(profileId))
  add(query_596634, "fields", newJString(fields))
  add(query_596634, "quotaUser", newJString(quotaUser))
  add(query_596634, "alt", newJString(alt))
  add(query_596634, "oauth_token", newJString(oauthToken))
  add(query_596634, "userIp", newJString(userIp))
  add(query_596634, "key", newJString(key))
  add(path_596633, "code", newJString(code))
  add(query_596634, "prettyPrint", newJBool(prettyPrint))
  result = call_596632.call(path_596633, query_596634, nil, nil, nil)

var dfareportingPostalCodesGet* = Call_DfareportingPostalCodesGet_596619(
    name: "dfareportingPostalCodesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/postalCodes/{code}",
    validator: validate_DfareportingPostalCodesGet_596620,
    base: "/dfareporting/v3.2", url: url_DfareportingPostalCodesGet_596621,
    schemes: {Scheme.Https})
type
  Call_DfareportingProjectsList_596635 = ref object of OpenApiRestCall_593437
proc url_DfareportingProjectsList_596637(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingProjectsList_596636(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of projects, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596638 = path.getOrDefault("profileId")
  valid_596638 = validateParameter(valid_596638, JString, required = true,
                                 default = nil)
  if valid_596638 != nil:
    section.add "profileId", valid_596638
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for projects by name or ID. Wildcards (*) are allowed. For example, "project*2015" will return projects with names like "project June 2015", "project April 2015", or simply "project 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "project" will match projects with name "my project", "project 2015", or simply "project".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only projects with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only projects with these advertiser IDs.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596639 = query.getOrDefault("fields")
  valid_596639 = validateParameter(valid_596639, JString, required = false,
                                 default = nil)
  if valid_596639 != nil:
    section.add "fields", valid_596639
  var valid_596640 = query.getOrDefault("pageToken")
  valid_596640 = validateParameter(valid_596640, JString, required = false,
                                 default = nil)
  if valid_596640 != nil:
    section.add "pageToken", valid_596640
  var valid_596641 = query.getOrDefault("quotaUser")
  valid_596641 = validateParameter(valid_596641, JString, required = false,
                                 default = nil)
  if valid_596641 != nil:
    section.add "quotaUser", valid_596641
  var valid_596642 = query.getOrDefault("sortField")
  valid_596642 = validateParameter(valid_596642, JString, required = false,
                                 default = newJString("ID"))
  if valid_596642 != nil:
    section.add "sortField", valid_596642
  var valid_596643 = query.getOrDefault("alt")
  valid_596643 = validateParameter(valid_596643, JString, required = false,
                                 default = newJString("json"))
  if valid_596643 != nil:
    section.add "alt", valid_596643
  var valid_596644 = query.getOrDefault("searchString")
  valid_596644 = validateParameter(valid_596644, JString, required = false,
                                 default = nil)
  if valid_596644 != nil:
    section.add "searchString", valid_596644
  var valid_596645 = query.getOrDefault("oauth_token")
  valid_596645 = validateParameter(valid_596645, JString, required = false,
                                 default = nil)
  if valid_596645 != nil:
    section.add "oauth_token", valid_596645
  var valid_596646 = query.getOrDefault("userIp")
  valid_596646 = validateParameter(valid_596646, JString, required = false,
                                 default = nil)
  if valid_596646 != nil:
    section.add "userIp", valid_596646
  var valid_596647 = query.getOrDefault("maxResults")
  valid_596647 = validateParameter(valid_596647, JInt, required = false,
                                 default = newJInt(1000))
  if valid_596647 != nil:
    section.add "maxResults", valid_596647
  var valid_596648 = query.getOrDefault("ids")
  valid_596648 = validateParameter(valid_596648, JArray, required = false,
                                 default = nil)
  if valid_596648 != nil:
    section.add "ids", valid_596648
  var valid_596649 = query.getOrDefault("key")
  valid_596649 = validateParameter(valid_596649, JString, required = false,
                                 default = nil)
  if valid_596649 != nil:
    section.add "key", valid_596649
  var valid_596650 = query.getOrDefault("advertiserIds")
  valid_596650 = validateParameter(valid_596650, JArray, required = false,
                                 default = nil)
  if valid_596650 != nil:
    section.add "advertiserIds", valid_596650
  var valid_596651 = query.getOrDefault("sortOrder")
  valid_596651 = validateParameter(valid_596651, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_596651 != nil:
    section.add "sortOrder", valid_596651
  var valid_596652 = query.getOrDefault("prettyPrint")
  valid_596652 = validateParameter(valid_596652, JBool, required = false,
                                 default = newJBool(true))
  if valid_596652 != nil:
    section.add "prettyPrint", valid_596652
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596653: Call_DfareportingProjectsList_596635; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of projects, possibly filtered. This method supports paging.
  ## 
  let valid = call_596653.validator(path, query, header, formData, body)
  let scheme = call_596653.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596653.url(scheme.get, call_596653.host, call_596653.base,
                         call_596653.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596653, url, valid)

proc call*(call_596654: Call_DfareportingProjectsList_596635; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "ID"; alt: string = "json"; searchString: string = "";
          oauthToken: string = ""; userIp: string = ""; maxResults: int = 1000;
          ids: JsonNode = nil; key: string = ""; advertiserIds: JsonNode = nil;
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingProjectsList
  ## Retrieves a list of projects, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for projects by name or ID. Wildcards (*) are allowed. For example, "project*2015" will return projects with names like "project June 2015", "project April 2015", or simply "project 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "project" will match projects with name "my project", "project 2015", or simply "project".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only projects with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   advertiserIds: JArray
  ##                : Select only projects with these advertiser IDs.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596655 = newJObject()
  var query_596656 = newJObject()
  add(path_596655, "profileId", newJString(profileId))
  add(query_596656, "fields", newJString(fields))
  add(query_596656, "pageToken", newJString(pageToken))
  add(query_596656, "quotaUser", newJString(quotaUser))
  add(query_596656, "sortField", newJString(sortField))
  add(query_596656, "alt", newJString(alt))
  add(query_596656, "searchString", newJString(searchString))
  add(query_596656, "oauth_token", newJString(oauthToken))
  add(query_596656, "userIp", newJString(userIp))
  add(query_596656, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_596656.add "ids", ids
  add(query_596656, "key", newJString(key))
  if advertiserIds != nil:
    query_596656.add "advertiserIds", advertiserIds
  add(query_596656, "sortOrder", newJString(sortOrder))
  add(query_596656, "prettyPrint", newJBool(prettyPrint))
  result = call_596654.call(path_596655, query_596656, nil, nil, nil)

var dfareportingProjectsList* = Call_DfareportingProjectsList_596635(
    name: "dfareportingProjectsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/projects",
    validator: validate_DfareportingProjectsList_596636,
    base: "/dfareporting/v3.2", url: url_DfareportingProjectsList_596637,
    schemes: {Scheme.Https})
type
  Call_DfareportingProjectsGet_596657 = ref object of OpenApiRestCall_593437
proc url_DfareportingProjectsGet_596659(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingProjectsGet_596658(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one project by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Project ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596660 = path.getOrDefault("profileId")
  valid_596660 = validateParameter(valid_596660, JString, required = true,
                                 default = nil)
  if valid_596660 != nil:
    section.add "profileId", valid_596660
  var valid_596661 = path.getOrDefault("id")
  valid_596661 = validateParameter(valid_596661, JString, required = true,
                                 default = nil)
  if valid_596661 != nil:
    section.add "id", valid_596661
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596662 = query.getOrDefault("fields")
  valid_596662 = validateParameter(valid_596662, JString, required = false,
                                 default = nil)
  if valid_596662 != nil:
    section.add "fields", valid_596662
  var valid_596663 = query.getOrDefault("quotaUser")
  valid_596663 = validateParameter(valid_596663, JString, required = false,
                                 default = nil)
  if valid_596663 != nil:
    section.add "quotaUser", valid_596663
  var valid_596664 = query.getOrDefault("alt")
  valid_596664 = validateParameter(valid_596664, JString, required = false,
                                 default = newJString("json"))
  if valid_596664 != nil:
    section.add "alt", valid_596664
  var valid_596665 = query.getOrDefault("oauth_token")
  valid_596665 = validateParameter(valid_596665, JString, required = false,
                                 default = nil)
  if valid_596665 != nil:
    section.add "oauth_token", valid_596665
  var valid_596666 = query.getOrDefault("userIp")
  valid_596666 = validateParameter(valid_596666, JString, required = false,
                                 default = nil)
  if valid_596666 != nil:
    section.add "userIp", valid_596666
  var valid_596667 = query.getOrDefault("key")
  valid_596667 = validateParameter(valid_596667, JString, required = false,
                                 default = nil)
  if valid_596667 != nil:
    section.add "key", valid_596667
  var valid_596668 = query.getOrDefault("prettyPrint")
  valid_596668 = validateParameter(valid_596668, JBool, required = false,
                                 default = newJBool(true))
  if valid_596668 != nil:
    section.add "prettyPrint", valid_596668
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596669: Call_DfareportingProjectsGet_596657; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one project by ID.
  ## 
  let valid = call_596669.validator(path, query, header, formData, body)
  let scheme = call_596669.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596669.url(scheme.get, call_596669.host, call_596669.base,
                         call_596669.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596669, url, valid)

proc call*(call_596670: Call_DfareportingProjectsGet_596657; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingProjectsGet
  ## Gets one project by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Project ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596671 = newJObject()
  var query_596672 = newJObject()
  add(path_596671, "profileId", newJString(profileId))
  add(query_596672, "fields", newJString(fields))
  add(query_596672, "quotaUser", newJString(quotaUser))
  add(query_596672, "alt", newJString(alt))
  add(query_596672, "oauth_token", newJString(oauthToken))
  add(query_596672, "userIp", newJString(userIp))
  add(path_596671, "id", newJString(id))
  add(query_596672, "key", newJString(key))
  add(query_596672, "prettyPrint", newJBool(prettyPrint))
  result = call_596670.call(path_596671, query_596672, nil, nil, nil)

var dfareportingProjectsGet* = Call_DfareportingProjectsGet_596657(
    name: "dfareportingProjectsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/projects/{id}",
    validator: validate_DfareportingProjectsGet_596658,
    base: "/dfareporting/v3.2", url: url_DfareportingProjectsGet_596659,
    schemes: {Scheme.Https})
type
  Call_DfareportingInventoryItemsList_596673 = ref object of OpenApiRestCall_593437
proc url_DfareportingInventoryItemsList_596675(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/inventoryItems")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingInventoryItemsList_596674(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of inventory items, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   projectId: JString (required)
  ##            : Project ID for order documents.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596676 = path.getOrDefault("profileId")
  valid_596676 = validateParameter(valid_596676, JString, required = true,
                                 default = nil)
  if valid_596676 != nil:
    section.add "profileId", valid_596676
  var valid_596677 = path.getOrDefault("projectId")
  valid_596677 = validateParameter(valid_596677, JString, required = true,
                                 default = nil)
  if valid_596677 != nil:
    section.add "projectId", valid_596677
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   inPlan: JBool
  ##         : Select only inventory items that are in plan.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   orderId: JArray
  ##          : Select only inventory items that belong to specified orders.
  ##   type: JString
  ##       : Select only inventory items with this type.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   siteId: JArray
  ##         : Select only inventory items that are associated with these sites.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only inventory items with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596678 = query.getOrDefault("fields")
  valid_596678 = validateParameter(valid_596678, JString, required = false,
                                 default = nil)
  if valid_596678 != nil:
    section.add "fields", valid_596678
  var valid_596679 = query.getOrDefault("inPlan")
  valid_596679 = validateParameter(valid_596679, JBool, required = false, default = nil)
  if valid_596679 != nil:
    section.add "inPlan", valid_596679
  var valid_596680 = query.getOrDefault("quotaUser")
  valid_596680 = validateParameter(valid_596680, JString, required = false,
                                 default = nil)
  if valid_596680 != nil:
    section.add "quotaUser", valid_596680
  var valid_596681 = query.getOrDefault("pageToken")
  valid_596681 = validateParameter(valid_596681, JString, required = false,
                                 default = nil)
  if valid_596681 != nil:
    section.add "pageToken", valid_596681
  var valid_596682 = query.getOrDefault("sortField")
  valid_596682 = validateParameter(valid_596682, JString, required = false,
                                 default = newJString("ID"))
  if valid_596682 != nil:
    section.add "sortField", valid_596682
  var valid_596683 = query.getOrDefault("alt")
  valid_596683 = validateParameter(valid_596683, JString, required = false,
                                 default = newJString("json"))
  if valid_596683 != nil:
    section.add "alt", valid_596683
  var valid_596684 = query.getOrDefault("orderId")
  valid_596684 = validateParameter(valid_596684, JArray, required = false,
                                 default = nil)
  if valid_596684 != nil:
    section.add "orderId", valid_596684
  var valid_596685 = query.getOrDefault("type")
  valid_596685 = validateParameter(valid_596685, JString, required = false, default = newJString(
      "PLANNING_PLACEMENT_TYPE_CREDIT"))
  if valid_596685 != nil:
    section.add "type", valid_596685
  var valid_596686 = query.getOrDefault("oauth_token")
  valid_596686 = validateParameter(valid_596686, JString, required = false,
                                 default = nil)
  if valid_596686 != nil:
    section.add "oauth_token", valid_596686
  var valid_596687 = query.getOrDefault("userIp")
  valid_596687 = validateParameter(valid_596687, JString, required = false,
                                 default = nil)
  if valid_596687 != nil:
    section.add "userIp", valid_596687
  var valid_596688 = query.getOrDefault("siteId")
  valid_596688 = validateParameter(valid_596688, JArray, required = false,
                                 default = nil)
  if valid_596688 != nil:
    section.add "siteId", valid_596688
  var valid_596689 = query.getOrDefault("maxResults")
  valid_596689 = validateParameter(valid_596689, JInt, required = false,
                                 default = newJInt(1000))
  if valid_596689 != nil:
    section.add "maxResults", valid_596689
  var valid_596690 = query.getOrDefault("ids")
  valid_596690 = validateParameter(valid_596690, JArray, required = false,
                                 default = nil)
  if valid_596690 != nil:
    section.add "ids", valid_596690
  var valid_596691 = query.getOrDefault("key")
  valid_596691 = validateParameter(valid_596691, JString, required = false,
                                 default = nil)
  if valid_596691 != nil:
    section.add "key", valid_596691
  var valid_596692 = query.getOrDefault("sortOrder")
  valid_596692 = validateParameter(valid_596692, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_596692 != nil:
    section.add "sortOrder", valid_596692
  var valid_596693 = query.getOrDefault("prettyPrint")
  valid_596693 = validateParameter(valid_596693, JBool, required = false,
                                 default = newJBool(true))
  if valid_596693 != nil:
    section.add "prettyPrint", valid_596693
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596694: Call_DfareportingInventoryItemsList_596673; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of inventory items, possibly filtered. This method supports paging.
  ## 
  let valid = call_596694.validator(path, query, header, formData, body)
  let scheme = call_596694.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596694.url(scheme.get, call_596694.host, call_596694.base,
                         call_596694.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596694, url, valid)

proc call*(call_596695: Call_DfareportingInventoryItemsList_596673;
          profileId: string; projectId: string; fields: string = "";
          inPlan: bool = false; quotaUser: string = ""; pageToken: string = "";
          sortField: string = "ID"; alt: string = "json"; orderId: JsonNode = nil;
          `type`: string = "PLANNING_PLACEMENT_TYPE_CREDIT";
          oauthToken: string = ""; userIp: string = ""; siteId: JsonNode = nil;
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingInventoryItemsList
  ## Retrieves a list of inventory items, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   inPlan: bool
  ##         : Select only inventory items that are in plan.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   orderId: JArray
  ##          : Select only inventory items that belong to specified orders.
  ##   type: string
  ##       : Select only inventory items with this type.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   siteId: JArray
  ##         : Select only inventory items that are associated with these sites.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only inventory items with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   projectId: string (required)
  ##            : Project ID for order documents.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596696 = newJObject()
  var query_596697 = newJObject()
  add(path_596696, "profileId", newJString(profileId))
  add(query_596697, "fields", newJString(fields))
  add(query_596697, "inPlan", newJBool(inPlan))
  add(query_596697, "quotaUser", newJString(quotaUser))
  add(query_596697, "pageToken", newJString(pageToken))
  add(query_596697, "sortField", newJString(sortField))
  add(query_596697, "alt", newJString(alt))
  if orderId != nil:
    query_596697.add "orderId", orderId
  add(query_596697, "type", newJString(`type`))
  add(query_596697, "oauth_token", newJString(oauthToken))
  add(query_596697, "userIp", newJString(userIp))
  if siteId != nil:
    query_596697.add "siteId", siteId
  add(query_596697, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_596697.add "ids", ids
  add(query_596697, "key", newJString(key))
  add(path_596696, "projectId", newJString(projectId))
  add(query_596697, "sortOrder", newJString(sortOrder))
  add(query_596697, "prettyPrint", newJBool(prettyPrint))
  result = call_596695.call(path_596696, query_596697, nil, nil, nil)

var dfareportingInventoryItemsList* = Call_DfareportingInventoryItemsList_596673(
    name: "dfareportingInventoryItemsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/projects/{projectId}/inventoryItems",
    validator: validate_DfareportingInventoryItemsList_596674,
    base: "/dfareporting/v3.2", url: url_DfareportingInventoryItemsList_596675,
    schemes: {Scheme.Https})
type
  Call_DfareportingInventoryItemsGet_596698 = ref object of OpenApiRestCall_593437
proc url_DfareportingInventoryItemsGet_596700(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/inventoryItems/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingInventoryItemsGet_596699(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one inventory item by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Inventory item ID.
  ##   projectId: JString (required)
  ##            : Project ID for order documents.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596701 = path.getOrDefault("profileId")
  valid_596701 = validateParameter(valid_596701, JString, required = true,
                                 default = nil)
  if valid_596701 != nil:
    section.add "profileId", valid_596701
  var valid_596702 = path.getOrDefault("id")
  valid_596702 = validateParameter(valid_596702, JString, required = true,
                                 default = nil)
  if valid_596702 != nil:
    section.add "id", valid_596702
  var valid_596703 = path.getOrDefault("projectId")
  valid_596703 = validateParameter(valid_596703, JString, required = true,
                                 default = nil)
  if valid_596703 != nil:
    section.add "projectId", valid_596703
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596704 = query.getOrDefault("fields")
  valid_596704 = validateParameter(valid_596704, JString, required = false,
                                 default = nil)
  if valid_596704 != nil:
    section.add "fields", valid_596704
  var valid_596705 = query.getOrDefault("quotaUser")
  valid_596705 = validateParameter(valid_596705, JString, required = false,
                                 default = nil)
  if valid_596705 != nil:
    section.add "quotaUser", valid_596705
  var valid_596706 = query.getOrDefault("alt")
  valid_596706 = validateParameter(valid_596706, JString, required = false,
                                 default = newJString("json"))
  if valid_596706 != nil:
    section.add "alt", valid_596706
  var valid_596707 = query.getOrDefault("oauth_token")
  valid_596707 = validateParameter(valid_596707, JString, required = false,
                                 default = nil)
  if valid_596707 != nil:
    section.add "oauth_token", valid_596707
  var valid_596708 = query.getOrDefault("userIp")
  valid_596708 = validateParameter(valid_596708, JString, required = false,
                                 default = nil)
  if valid_596708 != nil:
    section.add "userIp", valid_596708
  var valid_596709 = query.getOrDefault("key")
  valid_596709 = validateParameter(valid_596709, JString, required = false,
                                 default = nil)
  if valid_596709 != nil:
    section.add "key", valid_596709
  var valid_596710 = query.getOrDefault("prettyPrint")
  valid_596710 = validateParameter(valid_596710, JBool, required = false,
                                 default = newJBool(true))
  if valid_596710 != nil:
    section.add "prettyPrint", valid_596710
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596711: Call_DfareportingInventoryItemsGet_596698; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one inventory item by ID.
  ## 
  let valid = call_596711.validator(path, query, header, formData, body)
  let scheme = call_596711.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596711.url(scheme.get, call_596711.host, call_596711.base,
                         call_596711.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596711, url, valid)

proc call*(call_596712: Call_DfareportingInventoryItemsGet_596698;
          profileId: string; id: string; projectId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingInventoryItemsGet
  ## Gets one inventory item by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Inventory item ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   projectId: string (required)
  ##            : Project ID for order documents.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596713 = newJObject()
  var query_596714 = newJObject()
  add(path_596713, "profileId", newJString(profileId))
  add(query_596714, "fields", newJString(fields))
  add(query_596714, "quotaUser", newJString(quotaUser))
  add(query_596714, "alt", newJString(alt))
  add(query_596714, "oauth_token", newJString(oauthToken))
  add(query_596714, "userIp", newJString(userIp))
  add(path_596713, "id", newJString(id))
  add(query_596714, "key", newJString(key))
  add(path_596713, "projectId", newJString(projectId))
  add(query_596714, "prettyPrint", newJBool(prettyPrint))
  result = call_596712.call(path_596713, query_596714, nil, nil, nil)

var dfareportingInventoryItemsGet* = Call_DfareportingInventoryItemsGet_596698(
    name: "dfareportingInventoryItemsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/projects/{projectId}/inventoryItems/{id}",
    validator: validate_DfareportingInventoryItemsGet_596699,
    base: "/dfareporting/v3.2", url: url_DfareportingInventoryItemsGet_596700,
    schemes: {Scheme.Https})
type
  Call_DfareportingOrderDocumentsList_596715 = ref object of OpenApiRestCall_593437
proc url_DfareportingOrderDocumentsList_596717(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/orderDocuments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOrderDocumentsList_596716(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of order documents, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   projectId: JString (required)
  ##            : Project ID for order documents.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596718 = path.getOrDefault("profileId")
  valid_596718 = validateParameter(valid_596718, JString, required = true,
                                 default = nil)
  if valid_596718 != nil:
    section.add "profileId", valid_596718
  var valid_596719 = path.getOrDefault("projectId")
  valid_596719 = validateParameter(valid_596719, JString, required = true,
                                 default = nil)
  if valid_596719 != nil:
    section.add "projectId", valid_596719
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for order documents by name or ID. Wildcards (*) are allowed. For example, "orderdocument*2015" will return order documents with names like "orderdocument June 2015", "orderdocument April 2015", or simply "orderdocument 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "orderdocument" will match order documents with name "my orderdocument", "orderdocument 2015", or simply "orderdocument".
  ##   orderId: JArray
  ##          : Select only order documents for specified orders.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   siteId: JArray
  ##         : Select only order documents that are associated with these sites.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only order documents with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   approved: JBool
  ##           : Select only order documents that have been approved by at least one user.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596720 = query.getOrDefault("fields")
  valid_596720 = validateParameter(valid_596720, JString, required = false,
                                 default = nil)
  if valid_596720 != nil:
    section.add "fields", valid_596720
  var valid_596721 = query.getOrDefault("pageToken")
  valid_596721 = validateParameter(valid_596721, JString, required = false,
                                 default = nil)
  if valid_596721 != nil:
    section.add "pageToken", valid_596721
  var valid_596722 = query.getOrDefault("quotaUser")
  valid_596722 = validateParameter(valid_596722, JString, required = false,
                                 default = nil)
  if valid_596722 != nil:
    section.add "quotaUser", valid_596722
  var valid_596723 = query.getOrDefault("sortField")
  valid_596723 = validateParameter(valid_596723, JString, required = false,
                                 default = newJString("ID"))
  if valid_596723 != nil:
    section.add "sortField", valid_596723
  var valid_596724 = query.getOrDefault("alt")
  valid_596724 = validateParameter(valid_596724, JString, required = false,
                                 default = newJString("json"))
  if valid_596724 != nil:
    section.add "alt", valid_596724
  var valid_596725 = query.getOrDefault("searchString")
  valid_596725 = validateParameter(valid_596725, JString, required = false,
                                 default = nil)
  if valid_596725 != nil:
    section.add "searchString", valid_596725
  var valid_596726 = query.getOrDefault("orderId")
  valid_596726 = validateParameter(valid_596726, JArray, required = false,
                                 default = nil)
  if valid_596726 != nil:
    section.add "orderId", valid_596726
  var valid_596727 = query.getOrDefault("oauth_token")
  valid_596727 = validateParameter(valid_596727, JString, required = false,
                                 default = nil)
  if valid_596727 != nil:
    section.add "oauth_token", valid_596727
  var valid_596728 = query.getOrDefault("userIp")
  valid_596728 = validateParameter(valid_596728, JString, required = false,
                                 default = nil)
  if valid_596728 != nil:
    section.add "userIp", valid_596728
  var valid_596729 = query.getOrDefault("siteId")
  valid_596729 = validateParameter(valid_596729, JArray, required = false,
                                 default = nil)
  if valid_596729 != nil:
    section.add "siteId", valid_596729
  var valid_596730 = query.getOrDefault("maxResults")
  valid_596730 = validateParameter(valid_596730, JInt, required = false,
                                 default = newJInt(1000))
  if valid_596730 != nil:
    section.add "maxResults", valid_596730
  var valid_596731 = query.getOrDefault("ids")
  valid_596731 = validateParameter(valid_596731, JArray, required = false,
                                 default = nil)
  if valid_596731 != nil:
    section.add "ids", valid_596731
  var valid_596732 = query.getOrDefault("key")
  valid_596732 = validateParameter(valid_596732, JString, required = false,
                                 default = nil)
  if valid_596732 != nil:
    section.add "key", valid_596732
  var valid_596733 = query.getOrDefault("sortOrder")
  valid_596733 = validateParameter(valid_596733, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_596733 != nil:
    section.add "sortOrder", valid_596733
  var valid_596734 = query.getOrDefault("approved")
  valid_596734 = validateParameter(valid_596734, JBool, required = false, default = nil)
  if valid_596734 != nil:
    section.add "approved", valid_596734
  var valid_596735 = query.getOrDefault("prettyPrint")
  valid_596735 = validateParameter(valid_596735, JBool, required = false,
                                 default = newJBool(true))
  if valid_596735 != nil:
    section.add "prettyPrint", valid_596735
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596736: Call_DfareportingOrderDocumentsList_596715; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of order documents, possibly filtered. This method supports paging.
  ## 
  let valid = call_596736.validator(path, query, header, formData, body)
  let scheme = call_596736.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596736.url(scheme.get, call_596736.host, call_596736.base,
                         call_596736.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596736, url, valid)

proc call*(call_596737: Call_DfareportingOrderDocumentsList_596715;
          profileId: string; projectId: string; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; sortField: string = "ID";
          alt: string = "json"; searchString: string = ""; orderId: JsonNode = nil;
          oauthToken: string = ""; userIp: string = ""; siteId: JsonNode = nil;
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; approved: bool = false;
          prettyPrint: bool = true): Recallable =
  ## dfareportingOrderDocumentsList
  ## Retrieves a list of order documents, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for order documents by name or ID. Wildcards (*) are allowed. For example, "orderdocument*2015" will return order documents with names like "orderdocument June 2015", "orderdocument April 2015", or simply "orderdocument 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "orderdocument" will match order documents with name "my orderdocument", "orderdocument 2015", or simply "orderdocument".
  ##   orderId: JArray
  ##          : Select only order documents for specified orders.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   siteId: JArray
  ##         : Select only order documents that are associated with these sites.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only order documents with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   projectId: string (required)
  ##            : Project ID for order documents.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   approved: bool
  ##           : Select only order documents that have been approved by at least one user.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596738 = newJObject()
  var query_596739 = newJObject()
  add(path_596738, "profileId", newJString(profileId))
  add(query_596739, "fields", newJString(fields))
  add(query_596739, "pageToken", newJString(pageToken))
  add(query_596739, "quotaUser", newJString(quotaUser))
  add(query_596739, "sortField", newJString(sortField))
  add(query_596739, "alt", newJString(alt))
  add(query_596739, "searchString", newJString(searchString))
  if orderId != nil:
    query_596739.add "orderId", orderId
  add(query_596739, "oauth_token", newJString(oauthToken))
  add(query_596739, "userIp", newJString(userIp))
  if siteId != nil:
    query_596739.add "siteId", siteId
  add(query_596739, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_596739.add "ids", ids
  add(query_596739, "key", newJString(key))
  add(path_596738, "projectId", newJString(projectId))
  add(query_596739, "sortOrder", newJString(sortOrder))
  add(query_596739, "approved", newJBool(approved))
  add(query_596739, "prettyPrint", newJBool(prettyPrint))
  result = call_596737.call(path_596738, query_596739, nil, nil, nil)

var dfareportingOrderDocumentsList* = Call_DfareportingOrderDocumentsList_596715(
    name: "dfareportingOrderDocumentsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/projects/{projectId}/orderDocuments",
    validator: validate_DfareportingOrderDocumentsList_596716,
    base: "/dfareporting/v3.2", url: url_DfareportingOrderDocumentsList_596717,
    schemes: {Scheme.Https})
type
  Call_DfareportingOrderDocumentsGet_596740 = ref object of OpenApiRestCall_593437
proc url_DfareportingOrderDocumentsGet_596742(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/orderDocuments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOrderDocumentsGet_596741(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one order document by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Order document ID.
  ##   projectId: JString (required)
  ##            : Project ID for order documents.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596743 = path.getOrDefault("profileId")
  valid_596743 = validateParameter(valid_596743, JString, required = true,
                                 default = nil)
  if valid_596743 != nil:
    section.add "profileId", valid_596743
  var valid_596744 = path.getOrDefault("id")
  valid_596744 = validateParameter(valid_596744, JString, required = true,
                                 default = nil)
  if valid_596744 != nil:
    section.add "id", valid_596744
  var valid_596745 = path.getOrDefault("projectId")
  valid_596745 = validateParameter(valid_596745, JString, required = true,
                                 default = nil)
  if valid_596745 != nil:
    section.add "projectId", valid_596745
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596746 = query.getOrDefault("fields")
  valid_596746 = validateParameter(valid_596746, JString, required = false,
                                 default = nil)
  if valid_596746 != nil:
    section.add "fields", valid_596746
  var valid_596747 = query.getOrDefault("quotaUser")
  valid_596747 = validateParameter(valid_596747, JString, required = false,
                                 default = nil)
  if valid_596747 != nil:
    section.add "quotaUser", valid_596747
  var valid_596748 = query.getOrDefault("alt")
  valid_596748 = validateParameter(valid_596748, JString, required = false,
                                 default = newJString("json"))
  if valid_596748 != nil:
    section.add "alt", valid_596748
  var valid_596749 = query.getOrDefault("oauth_token")
  valid_596749 = validateParameter(valid_596749, JString, required = false,
                                 default = nil)
  if valid_596749 != nil:
    section.add "oauth_token", valid_596749
  var valid_596750 = query.getOrDefault("userIp")
  valid_596750 = validateParameter(valid_596750, JString, required = false,
                                 default = nil)
  if valid_596750 != nil:
    section.add "userIp", valid_596750
  var valid_596751 = query.getOrDefault("key")
  valid_596751 = validateParameter(valid_596751, JString, required = false,
                                 default = nil)
  if valid_596751 != nil:
    section.add "key", valid_596751
  var valid_596752 = query.getOrDefault("prettyPrint")
  valid_596752 = validateParameter(valid_596752, JBool, required = false,
                                 default = newJBool(true))
  if valid_596752 != nil:
    section.add "prettyPrint", valid_596752
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596753: Call_DfareportingOrderDocumentsGet_596740; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one order document by ID.
  ## 
  let valid = call_596753.validator(path, query, header, formData, body)
  let scheme = call_596753.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596753.url(scheme.get, call_596753.host, call_596753.base,
                         call_596753.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596753, url, valid)

proc call*(call_596754: Call_DfareportingOrderDocumentsGet_596740;
          profileId: string; id: string; projectId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingOrderDocumentsGet
  ## Gets one order document by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Order document ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   projectId: string (required)
  ##            : Project ID for order documents.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596755 = newJObject()
  var query_596756 = newJObject()
  add(path_596755, "profileId", newJString(profileId))
  add(query_596756, "fields", newJString(fields))
  add(query_596756, "quotaUser", newJString(quotaUser))
  add(query_596756, "alt", newJString(alt))
  add(query_596756, "oauth_token", newJString(oauthToken))
  add(query_596756, "userIp", newJString(userIp))
  add(path_596755, "id", newJString(id))
  add(query_596756, "key", newJString(key))
  add(path_596755, "projectId", newJString(projectId))
  add(query_596756, "prettyPrint", newJBool(prettyPrint))
  result = call_596754.call(path_596755, query_596756, nil, nil, nil)

var dfareportingOrderDocumentsGet* = Call_DfareportingOrderDocumentsGet_596740(
    name: "dfareportingOrderDocumentsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/projects/{projectId}/orderDocuments/{id}",
    validator: validate_DfareportingOrderDocumentsGet_596741,
    base: "/dfareporting/v3.2", url: url_DfareportingOrderDocumentsGet_596742,
    schemes: {Scheme.Https})
type
  Call_DfareportingOrdersList_596757 = ref object of OpenApiRestCall_593437
proc url_DfareportingOrdersList_596759(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/orders")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOrdersList_596758(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of orders, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   projectId: JString (required)
  ##            : Project ID for orders.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596760 = path.getOrDefault("profileId")
  valid_596760 = validateParameter(valid_596760, JString, required = true,
                                 default = nil)
  if valid_596760 != nil:
    section.add "profileId", valid_596760
  var valid_596761 = path.getOrDefault("projectId")
  valid_596761 = validateParameter(valid_596761, JString, required = true,
                                 default = nil)
  if valid_596761 != nil:
    section.add "projectId", valid_596761
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for orders by name or ID. Wildcards (*) are allowed. For example, "order*2015" will return orders with names like "order June 2015", "order April 2015", or simply "order 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "order" will match orders with name "my order", "order 2015", or simply "order".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   siteId: JArray
  ##         : Select only orders that are associated with these site IDs.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only orders with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596762 = query.getOrDefault("fields")
  valid_596762 = validateParameter(valid_596762, JString, required = false,
                                 default = nil)
  if valid_596762 != nil:
    section.add "fields", valid_596762
  var valid_596763 = query.getOrDefault("pageToken")
  valid_596763 = validateParameter(valid_596763, JString, required = false,
                                 default = nil)
  if valid_596763 != nil:
    section.add "pageToken", valid_596763
  var valid_596764 = query.getOrDefault("quotaUser")
  valid_596764 = validateParameter(valid_596764, JString, required = false,
                                 default = nil)
  if valid_596764 != nil:
    section.add "quotaUser", valid_596764
  var valid_596765 = query.getOrDefault("sortField")
  valid_596765 = validateParameter(valid_596765, JString, required = false,
                                 default = newJString("ID"))
  if valid_596765 != nil:
    section.add "sortField", valid_596765
  var valid_596766 = query.getOrDefault("alt")
  valid_596766 = validateParameter(valid_596766, JString, required = false,
                                 default = newJString("json"))
  if valid_596766 != nil:
    section.add "alt", valid_596766
  var valid_596767 = query.getOrDefault("searchString")
  valid_596767 = validateParameter(valid_596767, JString, required = false,
                                 default = nil)
  if valid_596767 != nil:
    section.add "searchString", valid_596767
  var valid_596768 = query.getOrDefault("oauth_token")
  valid_596768 = validateParameter(valid_596768, JString, required = false,
                                 default = nil)
  if valid_596768 != nil:
    section.add "oauth_token", valid_596768
  var valid_596769 = query.getOrDefault("userIp")
  valid_596769 = validateParameter(valid_596769, JString, required = false,
                                 default = nil)
  if valid_596769 != nil:
    section.add "userIp", valid_596769
  var valid_596770 = query.getOrDefault("siteId")
  valid_596770 = validateParameter(valid_596770, JArray, required = false,
                                 default = nil)
  if valid_596770 != nil:
    section.add "siteId", valid_596770
  var valid_596771 = query.getOrDefault("maxResults")
  valid_596771 = validateParameter(valid_596771, JInt, required = false,
                                 default = newJInt(1000))
  if valid_596771 != nil:
    section.add "maxResults", valid_596771
  var valid_596772 = query.getOrDefault("ids")
  valid_596772 = validateParameter(valid_596772, JArray, required = false,
                                 default = nil)
  if valid_596772 != nil:
    section.add "ids", valid_596772
  var valid_596773 = query.getOrDefault("key")
  valid_596773 = validateParameter(valid_596773, JString, required = false,
                                 default = nil)
  if valid_596773 != nil:
    section.add "key", valid_596773
  var valid_596774 = query.getOrDefault("sortOrder")
  valid_596774 = validateParameter(valid_596774, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_596774 != nil:
    section.add "sortOrder", valid_596774
  var valid_596775 = query.getOrDefault("prettyPrint")
  valid_596775 = validateParameter(valid_596775, JBool, required = false,
                                 default = newJBool(true))
  if valid_596775 != nil:
    section.add "prettyPrint", valid_596775
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596776: Call_DfareportingOrdersList_596757; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of orders, possibly filtered. This method supports paging.
  ## 
  let valid = call_596776.validator(path, query, header, formData, body)
  let scheme = call_596776.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596776.url(scheme.get, call_596776.host, call_596776.base,
                         call_596776.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596776, url, valid)

proc call*(call_596777: Call_DfareportingOrdersList_596757; profileId: string;
          projectId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = ""; userIp: string = "";
          siteId: JsonNode = nil; maxResults: int = 1000; ids: JsonNode = nil;
          key: string = ""; sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingOrdersList
  ## Retrieves a list of orders, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for orders by name or ID. Wildcards (*) are allowed. For example, "order*2015" will return orders with names like "order June 2015", "order April 2015", or simply "order 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "order" will match orders with name "my order", "order 2015", or simply "order".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   siteId: JArray
  ##         : Select only orders that are associated with these site IDs.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only orders with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   projectId: string (required)
  ##            : Project ID for orders.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596778 = newJObject()
  var query_596779 = newJObject()
  add(path_596778, "profileId", newJString(profileId))
  add(query_596779, "fields", newJString(fields))
  add(query_596779, "pageToken", newJString(pageToken))
  add(query_596779, "quotaUser", newJString(quotaUser))
  add(query_596779, "sortField", newJString(sortField))
  add(query_596779, "alt", newJString(alt))
  add(query_596779, "searchString", newJString(searchString))
  add(query_596779, "oauth_token", newJString(oauthToken))
  add(query_596779, "userIp", newJString(userIp))
  if siteId != nil:
    query_596779.add "siteId", siteId
  add(query_596779, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_596779.add "ids", ids
  add(query_596779, "key", newJString(key))
  add(path_596778, "projectId", newJString(projectId))
  add(query_596779, "sortOrder", newJString(sortOrder))
  add(query_596779, "prettyPrint", newJBool(prettyPrint))
  result = call_596777.call(path_596778, query_596779, nil, nil, nil)

var dfareportingOrdersList* = Call_DfareportingOrdersList_596757(
    name: "dfareportingOrdersList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/projects/{projectId}/orders",
    validator: validate_DfareportingOrdersList_596758, base: "/dfareporting/v3.2",
    url: url_DfareportingOrdersList_596759, schemes: {Scheme.Https})
type
  Call_DfareportingOrdersGet_596780 = ref object of OpenApiRestCall_593437
proc url_DfareportingOrdersGet_596782(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "projectId" in path, "`projectId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/projects/"),
               (kind: VariableSegment, value: "projectId"),
               (kind: ConstantSegment, value: "/orders/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingOrdersGet_596781(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one order by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Order ID.
  ##   projectId: JString (required)
  ##            : Project ID for orders.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596783 = path.getOrDefault("profileId")
  valid_596783 = validateParameter(valid_596783, JString, required = true,
                                 default = nil)
  if valid_596783 != nil:
    section.add "profileId", valid_596783
  var valid_596784 = path.getOrDefault("id")
  valid_596784 = validateParameter(valid_596784, JString, required = true,
                                 default = nil)
  if valid_596784 != nil:
    section.add "id", valid_596784
  var valid_596785 = path.getOrDefault("projectId")
  valid_596785 = validateParameter(valid_596785, JString, required = true,
                                 default = nil)
  if valid_596785 != nil:
    section.add "projectId", valid_596785
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596786 = query.getOrDefault("fields")
  valid_596786 = validateParameter(valid_596786, JString, required = false,
                                 default = nil)
  if valid_596786 != nil:
    section.add "fields", valid_596786
  var valid_596787 = query.getOrDefault("quotaUser")
  valid_596787 = validateParameter(valid_596787, JString, required = false,
                                 default = nil)
  if valid_596787 != nil:
    section.add "quotaUser", valid_596787
  var valid_596788 = query.getOrDefault("alt")
  valid_596788 = validateParameter(valid_596788, JString, required = false,
                                 default = newJString("json"))
  if valid_596788 != nil:
    section.add "alt", valid_596788
  var valid_596789 = query.getOrDefault("oauth_token")
  valid_596789 = validateParameter(valid_596789, JString, required = false,
                                 default = nil)
  if valid_596789 != nil:
    section.add "oauth_token", valid_596789
  var valid_596790 = query.getOrDefault("userIp")
  valid_596790 = validateParameter(valid_596790, JString, required = false,
                                 default = nil)
  if valid_596790 != nil:
    section.add "userIp", valid_596790
  var valid_596791 = query.getOrDefault("key")
  valid_596791 = validateParameter(valid_596791, JString, required = false,
                                 default = nil)
  if valid_596791 != nil:
    section.add "key", valid_596791
  var valid_596792 = query.getOrDefault("prettyPrint")
  valid_596792 = validateParameter(valid_596792, JBool, required = false,
                                 default = newJBool(true))
  if valid_596792 != nil:
    section.add "prettyPrint", valid_596792
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596793: Call_DfareportingOrdersGet_596780; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one order by ID.
  ## 
  let valid = call_596793.validator(path, query, header, formData, body)
  let scheme = call_596793.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596793.url(scheme.get, call_596793.host, call_596793.base,
                         call_596793.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596793, url, valid)

proc call*(call_596794: Call_DfareportingOrdersGet_596780; profileId: string;
          id: string; projectId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingOrdersGet
  ## Gets one order by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Order ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   projectId: string (required)
  ##            : Project ID for orders.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596795 = newJObject()
  var query_596796 = newJObject()
  add(path_596795, "profileId", newJString(profileId))
  add(query_596796, "fields", newJString(fields))
  add(query_596796, "quotaUser", newJString(quotaUser))
  add(query_596796, "alt", newJString(alt))
  add(query_596796, "oauth_token", newJString(oauthToken))
  add(query_596796, "userIp", newJString(userIp))
  add(path_596795, "id", newJString(id))
  add(query_596796, "key", newJString(key))
  add(path_596795, "projectId", newJString(projectId))
  add(query_596796, "prettyPrint", newJBool(prettyPrint))
  result = call_596794.call(path_596795, query_596796, nil, nil, nil)

var dfareportingOrdersGet* = Call_DfareportingOrdersGet_596780(
    name: "dfareportingOrdersGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/projects/{projectId}/orders/{id}",
    validator: validate_DfareportingOrdersGet_596781, base: "/dfareporting/v3.2",
    url: url_DfareportingOrdersGet_596782, schemes: {Scheme.Https})
type
  Call_DfareportingRegionsList_596797 = ref object of OpenApiRestCall_593437
proc url_DfareportingRegionsList_596799(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/regions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRegionsList_596798(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of regions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596800 = path.getOrDefault("profileId")
  valid_596800 = validateParameter(valid_596800, JString, required = true,
                                 default = nil)
  if valid_596800 != nil:
    section.add "profileId", valid_596800
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596801 = query.getOrDefault("fields")
  valid_596801 = validateParameter(valid_596801, JString, required = false,
                                 default = nil)
  if valid_596801 != nil:
    section.add "fields", valid_596801
  var valid_596802 = query.getOrDefault("quotaUser")
  valid_596802 = validateParameter(valid_596802, JString, required = false,
                                 default = nil)
  if valid_596802 != nil:
    section.add "quotaUser", valid_596802
  var valid_596803 = query.getOrDefault("alt")
  valid_596803 = validateParameter(valid_596803, JString, required = false,
                                 default = newJString("json"))
  if valid_596803 != nil:
    section.add "alt", valid_596803
  var valid_596804 = query.getOrDefault("oauth_token")
  valid_596804 = validateParameter(valid_596804, JString, required = false,
                                 default = nil)
  if valid_596804 != nil:
    section.add "oauth_token", valid_596804
  var valid_596805 = query.getOrDefault("userIp")
  valid_596805 = validateParameter(valid_596805, JString, required = false,
                                 default = nil)
  if valid_596805 != nil:
    section.add "userIp", valid_596805
  var valid_596806 = query.getOrDefault("key")
  valid_596806 = validateParameter(valid_596806, JString, required = false,
                                 default = nil)
  if valid_596806 != nil:
    section.add "key", valid_596806
  var valid_596807 = query.getOrDefault("prettyPrint")
  valid_596807 = validateParameter(valid_596807, JBool, required = false,
                                 default = newJBool(true))
  if valid_596807 != nil:
    section.add "prettyPrint", valid_596807
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596808: Call_DfareportingRegionsList_596797; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of regions.
  ## 
  let valid = call_596808.validator(path, query, header, formData, body)
  let scheme = call_596808.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596808.url(scheme.get, call_596808.host, call_596808.base,
                         call_596808.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596808, url, valid)

proc call*(call_596809: Call_DfareportingRegionsList_596797; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingRegionsList
  ## Retrieves a list of regions.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596810 = newJObject()
  var query_596811 = newJObject()
  add(path_596810, "profileId", newJString(profileId))
  add(query_596811, "fields", newJString(fields))
  add(query_596811, "quotaUser", newJString(quotaUser))
  add(query_596811, "alt", newJString(alt))
  add(query_596811, "oauth_token", newJString(oauthToken))
  add(query_596811, "userIp", newJString(userIp))
  add(query_596811, "key", newJString(key))
  add(query_596811, "prettyPrint", newJBool(prettyPrint))
  result = call_596809.call(path_596810, query_596811, nil, nil, nil)

var dfareportingRegionsList* = Call_DfareportingRegionsList_596797(
    name: "dfareportingRegionsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/regions",
    validator: validate_DfareportingRegionsList_596798,
    base: "/dfareporting/v3.2", url: url_DfareportingRegionsList_596799,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListSharesUpdate_596812 = ref object of OpenApiRestCall_593437
proc url_DfareportingRemarketingListSharesUpdate_596814(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingListShares")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListSharesUpdate_596813(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing remarketing list share.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596815 = path.getOrDefault("profileId")
  valid_596815 = validateParameter(valid_596815, JString, required = true,
                                 default = nil)
  if valid_596815 != nil:
    section.add "profileId", valid_596815
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596816 = query.getOrDefault("fields")
  valid_596816 = validateParameter(valid_596816, JString, required = false,
                                 default = nil)
  if valid_596816 != nil:
    section.add "fields", valid_596816
  var valid_596817 = query.getOrDefault("quotaUser")
  valid_596817 = validateParameter(valid_596817, JString, required = false,
                                 default = nil)
  if valid_596817 != nil:
    section.add "quotaUser", valid_596817
  var valid_596818 = query.getOrDefault("alt")
  valid_596818 = validateParameter(valid_596818, JString, required = false,
                                 default = newJString("json"))
  if valid_596818 != nil:
    section.add "alt", valid_596818
  var valid_596819 = query.getOrDefault("oauth_token")
  valid_596819 = validateParameter(valid_596819, JString, required = false,
                                 default = nil)
  if valid_596819 != nil:
    section.add "oauth_token", valid_596819
  var valid_596820 = query.getOrDefault("userIp")
  valid_596820 = validateParameter(valid_596820, JString, required = false,
                                 default = nil)
  if valid_596820 != nil:
    section.add "userIp", valid_596820
  var valid_596821 = query.getOrDefault("key")
  valid_596821 = validateParameter(valid_596821, JString, required = false,
                                 default = nil)
  if valid_596821 != nil:
    section.add "key", valid_596821
  var valid_596822 = query.getOrDefault("prettyPrint")
  valid_596822 = validateParameter(valid_596822, JBool, required = false,
                                 default = newJBool(true))
  if valid_596822 != nil:
    section.add "prettyPrint", valid_596822
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596824: Call_DfareportingRemarketingListSharesUpdate_596812;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing remarketing list share.
  ## 
  let valid = call_596824.validator(path, query, header, formData, body)
  let scheme = call_596824.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596824.url(scheme.get, call_596824.host, call_596824.base,
                         call_596824.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596824, url, valid)

proc call*(call_596825: Call_DfareportingRemarketingListSharesUpdate_596812;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListSharesUpdate
  ## Updates an existing remarketing list share.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596826 = newJObject()
  var query_596827 = newJObject()
  var body_596828 = newJObject()
  add(path_596826, "profileId", newJString(profileId))
  add(query_596827, "fields", newJString(fields))
  add(query_596827, "quotaUser", newJString(quotaUser))
  add(query_596827, "alt", newJString(alt))
  add(query_596827, "oauth_token", newJString(oauthToken))
  add(query_596827, "userIp", newJString(userIp))
  add(query_596827, "key", newJString(key))
  if body != nil:
    body_596828 = body
  add(query_596827, "prettyPrint", newJBool(prettyPrint))
  result = call_596825.call(path_596826, query_596827, nil, nil, body_596828)

var dfareportingRemarketingListSharesUpdate* = Call_DfareportingRemarketingListSharesUpdate_596812(
    name: "dfareportingRemarketingListSharesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingListShares",
    validator: validate_DfareportingRemarketingListSharesUpdate_596813,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListSharesUpdate_596814,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListSharesPatch_596829 = ref object of OpenApiRestCall_593437
proc url_DfareportingRemarketingListSharesPatch_596831(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingListShares")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListSharesPatch_596830(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing remarketing list share. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596832 = path.getOrDefault("profileId")
  valid_596832 = validateParameter(valid_596832, JString, required = true,
                                 default = nil)
  if valid_596832 != nil:
    section.add "profileId", valid_596832
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   remarketingListId: JString (required)
  ##                    : Remarketing list ID.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596833 = query.getOrDefault("fields")
  valid_596833 = validateParameter(valid_596833, JString, required = false,
                                 default = nil)
  if valid_596833 != nil:
    section.add "fields", valid_596833
  var valid_596834 = query.getOrDefault("quotaUser")
  valid_596834 = validateParameter(valid_596834, JString, required = false,
                                 default = nil)
  if valid_596834 != nil:
    section.add "quotaUser", valid_596834
  var valid_596835 = query.getOrDefault("alt")
  valid_596835 = validateParameter(valid_596835, JString, required = false,
                                 default = newJString("json"))
  if valid_596835 != nil:
    section.add "alt", valid_596835
  var valid_596836 = query.getOrDefault("oauth_token")
  valid_596836 = validateParameter(valid_596836, JString, required = false,
                                 default = nil)
  if valid_596836 != nil:
    section.add "oauth_token", valid_596836
  var valid_596837 = query.getOrDefault("userIp")
  valid_596837 = validateParameter(valid_596837, JString, required = false,
                                 default = nil)
  if valid_596837 != nil:
    section.add "userIp", valid_596837
  var valid_596838 = query.getOrDefault("key")
  valid_596838 = validateParameter(valid_596838, JString, required = false,
                                 default = nil)
  if valid_596838 != nil:
    section.add "key", valid_596838
  assert query != nil,
        "query argument is necessary due to required `remarketingListId` field"
  var valid_596839 = query.getOrDefault("remarketingListId")
  valid_596839 = validateParameter(valid_596839, JString, required = true,
                                 default = nil)
  if valid_596839 != nil:
    section.add "remarketingListId", valid_596839
  var valid_596840 = query.getOrDefault("prettyPrint")
  valid_596840 = validateParameter(valid_596840, JBool, required = false,
                                 default = newJBool(true))
  if valid_596840 != nil:
    section.add "prettyPrint", valid_596840
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596842: Call_DfareportingRemarketingListSharesPatch_596829;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing remarketing list share. This method supports patch semantics.
  ## 
  let valid = call_596842.validator(path, query, header, formData, body)
  let scheme = call_596842.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596842.url(scheme.get, call_596842.host, call_596842.base,
                         call_596842.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596842, url, valid)

proc call*(call_596843: Call_DfareportingRemarketingListSharesPatch_596829;
          profileId: string; remarketingListId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; body: JsonNode = nil;
          prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListSharesPatch
  ## Updates an existing remarketing list share. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   remarketingListId: string (required)
  ##                    : Remarketing list ID.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596844 = newJObject()
  var query_596845 = newJObject()
  var body_596846 = newJObject()
  add(path_596844, "profileId", newJString(profileId))
  add(query_596845, "fields", newJString(fields))
  add(query_596845, "quotaUser", newJString(quotaUser))
  add(query_596845, "alt", newJString(alt))
  add(query_596845, "oauth_token", newJString(oauthToken))
  add(query_596845, "userIp", newJString(userIp))
  add(query_596845, "key", newJString(key))
  add(query_596845, "remarketingListId", newJString(remarketingListId))
  if body != nil:
    body_596846 = body
  add(query_596845, "prettyPrint", newJBool(prettyPrint))
  result = call_596843.call(path_596844, query_596845, nil, nil, body_596846)

var dfareportingRemarketingListSharesPatch* = Call_DfareportingRemarketingListSharesPatch_596829(
    name: "dfareportingRemarketingListSharesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingListShares",
    validator: validate_DfareportingRemarketingListSharesPatch_596830,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListSharesPatch_596831,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListSharesGet_596847 = ref object of OpenApiRestCall_593437
proc url_DfareportingRemarketingListSharesGet_596849(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "remarketingListId" in path,
        "`remarketingListId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingListShares/"),
               (kind: VariableSegment, value: "remarketingListId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListSharesGet_596848(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one remarketing list share by remarketing list ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   remarketingListId: JString (required)
  ##                    : Remarketing list ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596850 = path.getOrDefault("profileId")
  valid_596850 = validateParameter(valid_596850, JString, required = true,
                                 default = nil)
  if valid_596850 != nil:
    section.add "profileId", valid_596850
  var valid_596851 = path.getOrDefault("remarketingListId")
  valid_596851 = validateParameter(valid_596851, JString, required = true,
                                 default = nil)
  if valid_596851 != nil:
    section.add "remarketingListId", valid_596851
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596852 = query.getOrDefault("fields")
  valid_596852 = validateParameter(valid_596852, JString, required = false,
                                 default = nil)
  if valid_596852 != nil:
    section.add "fields", valid_596852
  var valid_596853 = query.getOrDefault("quotaUser")
  valid_596853 = validateParameter(valid_596853, JString, required = false,
                                 default = nil)
  if valid_596853 != nil:
    section.add "quotaUser", valid_596853
  var valid_596854 = query.getOrDefault("alt")
  valid_596854 = validateParameter(valid_596854, JString, required = false,
                                 default = newJString("json"))
  if valid_596854 != nil:
    section.add "alt", valid_596854
  var valid_596855 = query.getOrDefault("oauth_token")
  valid_596855 = validateParameter(valid_596855, JString, required = false,
                                 default = nil)
  if valid_596855 != nil:
    section.add "oauth_token", valid_596855
  var valid_596856 = query.getOrDefault("userIp")
  valid_596856 = validateParameter(valid_596856, JString, required = false,
                                 default = nil)
  if valid_596856 != nil:
    section.add "userIp", valid_596856
  var valid_596857 = query.getOrDefault("key")
  valid_596857 = validateParameter(valid_596857, JString, required = false,
                                 default = nil)
  if valid_596857 != nil:
    section.add "key", valid_596857
  var valid_596858 = query.getOrDefault("prettyPrint")
  valid_596858 = validateParameter(valid_596858, JBool, required = false,
                                 default = newJBool(true))
  if valid_596858 != nil:
    section.add "prettyPrint", valid_596858
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596859: Call_DfareportingRemarketingListSharesGet_596847;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one remarketing list share by remarketing list ID.
  ## 
  let valid = call_596859.validator(path, query, header, formData, body)
  let scheme = call_596859.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596859.url(scheme.get, call_596859.host, call_596859.base,
                         call_596859.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596859, url, valid)

proc call*(call_596860: Call_DfareportingRemarketingListSharesGet_596847;
          profileId: string; remarketingListId: string; fields: string = "";
          quotaUser: string = ""; alt: string = "json"; oauthToken: string = "";
          userIp: string = ""; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListSharesGet
  ## Gets one remarketing list share by remarketing list ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   remarketingListId: string (required)
  ##                    : Remarketing list ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596861 = newJObject()
  var query_596862 = newJObject()
  add(path_596861, "profileId", newJString(profileId))
  add(query_596862, "fields", newJString(fields))
  add(query_596862, "quotaUser", newJString(quotaUser))
  add(query_596862, "alt", newJString(alt))
  add(query_596862, "oauth_token", newJString(oauthToken))
  add(query_596862, "userIp", newJString(userIp))
  add(path_596861, "remarketingListId", newJString(remarketingListId))
  add(query_596862, "key", newJString(key))
  add(query_596862, "prettyPrint", newJBool(prettyPrint))
  result = call_596860.call(path_596861, query_596862, nil, nil, nil)

var dfareportingRemarketingListSharesGet* = Call_DfareportingRemarketingListSharesGet_596847(
    name: "dfareportingRemarketingListSharesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/remarketingListShares/{remarketingListId}",
    validator: validate_DfareportingRemarketingListSharesGet_596848,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListSharesGet_596849,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsUpdate_596886 = ref object of OpenApiRestCall_593437
proc url_DfareportingRemarketingListsUpdate_596888(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsUpdate_596887(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing remarketing list.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596889 = path.getOrDefault("profileId")
  valid_596889 = validateParameter(valid_596889, JString, required = true,
                                 default = nil)
  if valid_596889 != nil:
    section.add "profileId", valid_596889
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596890 = query.getOrDefault("fields")
  valid_596890 = validateParameter(valid_596890, JString, required = false,
                                 default = nil)
  if valid_596890 != nil:
    section.add "fields", valid_596890
  var valid_596891 = query.getOrDefault("quotaUser")
  valid_596891 = validateParameter(valid_596891, JString, required = false,
                                 default = nil)
  if valid_596891 != nil:
    section.add "quotaUser", valid_596891
  var valid_596892 = query.getOrDefault("alt")
  valid_596892 = validateParameter(valid_596892, JString, required = false,
                                 default = newJString("json"))
  if valid_596892 != nil:
    section.add "alt", valid_596892
  var valid_596893 = query.getOrDefault("oauth_token")
  valid_596893 = validateParameter(valid_596893, JString, required = false,
                                 default = nil)
  if valid_596893 != nil:
    section.add "oauth_token", valid_596893
  var valid_596894 = query.getOrDefault("userIp")
  valid_596894 = validateParameter(valid_596894, JString, required = false,
                                 default = nil)
  if valid_596894 != nil:
    section.add "userIp", valid_596894
  var valid_596895 = query.getOrDefault("key")
  valid_596895 = validateParameter(valid_596895, JString, required = false,
                                 default = nil)
  if valid_596895 != nil:
    section.add "key", valid_596895
  var valid_596896 = query.getOrDefault("prettyPrint")
  valid_596896 = validateParameter(valid_596896, JBool, required = false,
                                 default = newJBool(true))
  if valid_596896 != nil:
    section.add "prettyPrint", valid_596896
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596898: Call_DfareportingRemarketingListsUpdate_596886;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing remarketing list.
  ## 
  let valid = call_596898.validator(path, query, header, formData, body)
  let scheme = call_596898.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596898.url(scheme.get, call_596898.host, call_596898.base,
                         call_596898.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596898, url, valid)

proc call*(call_596899: Call_DfareportingRemarketingListsUpdate_596886;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListsUpdate
  ## Updates an existing remarketing list.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596900 = newJObject()
  var query_596901 = newJObject()
  var body_596902 = newJObject()
  add(path_596900, "profileId", newJString(profileId))
  add(query_596901, "fields", newJString(fields))
  add(query_596901, "quotaUser", newJString(quotaUser))
  add(query_596901, "alt", newJString(alt))
  add(query_596901, "oauth_token", newJString(oauthToken))
  add(query_596901, "userIp", newJString(userIp))
  add(query_596901, "key", newJString(key))
  if body != nil:
    body_596902 = body
  add(query_596901, "prettyPrint", newJBool(prettyPrint))
  result = call_596899.call(path_596900, query_596901, nil, nil, body_596902)

var dfareportingRemarketingListsUpdate* = Call_DfareportingRemarketingListsUpdate_596886(
    name: "dfareportingRemarketingListsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists",
    validator: validate_DfareportingRemarketingListsUpdate_596887,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListsUpdate_596888,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsInsert_596903 = ref object of OpenApiRestCall_593437
proc url_DfareportingRemarketingListsInsert_596905(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsInsert_596904(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new remarketing list.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596906 = path.getOrDefault("profileId")
  valid_596906 = validateParameter(valid_596906, JString, required = true,
                                 default = nil)
  if valid_596906 != nil:
    section.add "profileId", valid_596906
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596907 = query.getOrDefault("fields")
  valid_596907 = validateParameter(valid_596907, JString, required = false,
                                 default = nil)
  if valid_596907 != nil:
    section.add "fields", valid_596907
  var valid_596908 = query.getOrDefault("quotaUser")
  valid_596908 = validateParameter(valid_596908, JString, required = false,
                                 default = nil)
  if valid_596908 != nil:
    section.add "quotaUser", valid_596908
  var valid_596909 = query.getOrDefault("alt")
  valid_596909 = validateParameter(valid_596909, JString, required = false,
                                 default = newJString("json"))
  if valid_596909 != nil:
    section.add "alt", valid_596909
  var valid_596910 = query.getOrDefault("oauth_token")
  valid_596910 = validateParameter(valid_596910, JString, required = false,
                                 default = nil)
  if valid_596910 != nil:
    section.add "oauth_token", valid_596910
  var valid_596911 = query.getOrDefault("userIp")
  valid_596911 = validateParameter(valid_596911, JString, required = false,
                                 default = nil)
  if valid_596911 != nil:
    section.add "userIp", valid_596911
  var valid_596912 = query.getOrDefault("key")
  valid_596912 = validateParameter(valid_596912, JString, required = false,
                                 default = nil)
  if valid_596912 != nil:
    section.add "key", valid_596912
  var valid_596913 = query.getOrDefault("prettyPrint")
  valid_596913 = validateParameter(valid_596913, JBool, required = false,
                                 default = newJBool(true))
  if valid_596913 != nil:
    section.add "prettyPrint", valid_596913
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596915: Call_DfareportingRemarketingListsInsert_596903;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new remarketing list.
  ## 
  let valid = call_596915.validator(path, query, header, formData, body)
  let scheme = call_596915.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596915.url(scheme.get, call_596915.host, call_596915.base,
                         call_596915.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596915, url, valid)

proc call*(call_596916: Call_DfareportingRemarketingListsInsert_596903;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListsInsert
  ## Inserts a new remarketing list.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596917 = newJObject()
  var query_596918 = newJObject()
  var body_596919 = newJObject()
  add(path_596917, "profileId", newJString(profileId))
  add(query_596918, "fields", newJString(fields))
  add(query_596918, "quotaUser", newJString(quotaUser))
  add(query_596918, "alt", newJString(alt))
  add(query_596918, "oauth_token", newJString(oauthToken))
  add(query_596918, "userIp", newJString(userIp))
  add(query_596918, "key", newJString(key))
  if body != nil:
    body_596919 = body
  add(query_596918, "prettyPrint", newJBool(prettyPrint))
  result = call_596916.call(path_596917, query_596918, nil, nil, body_596919)

var dfareportingRemarketingListsInsert* = Call_DfareportingRemarketingListsInsert_596903(
    name: "dfareportingRemarketingListsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists",
    validator: validate_DfareportingRemarketingListsInsert_596904,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListsInsert_596905,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsList_596863 = ref object of OpenApiRestCall_593437
proc url_DfareportingRemarketingListsList_596865(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsList_596864(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of remarketing lists, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596866 = path.getOrDefault("profileId")
  valid_596866 = validateParameter(valid_596866, JString, required = true,
                                 default = nil)
  if valid_596866 != nil:
    section.add "profileId", valid_596866
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   advertiserId: JString (required)
  ##               : Select only remarketing lists owned by this advertiser.
  ##   active: JBool
  ##         : Select only active or only inactive remarketing lists.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   floodlightActivityId: JString
  ##                       : Select only remarketing lists that have this floodlight activity ID.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   name: JString
  ##       : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596867 = query.getOrDefault("fields")
  valid_596867 = validateParameter(valid_596867, JString, required = false,
                                 default = nil)
  if valid_596867 != nil:
    section.add "fields", valid_596867
  var valid_596868 = query.getOrDefault("pageToken")
  valid_596868 = validateParameter(valid_596868, JString, required = false,
                                 default = nil)
  if valid_596868 != nil:
    section.add "pageToken", valid_596868
  var valid_596869 = query.getOrDefault("quotaUser")
  valid_596869 = validateParameter(valid_596869, JString, required = false,
                                 default = nil)
  if valid_596869 != nil:
    section.add "quotaUser", valid_596869
  var valid_596870 = query.getOrDefault("sortField")
  valid_596870 = validateParameter(valid_596870, JString, required = false,
                                 default = newJString("ID"))
  if valid_596870 != nil:
    section.add "sortField", valid_596870
  var valid_596871 = query.getOrDefault("alt")
  valid_596871 = validateParameter(valid_596871, JString, required = false,
                                 default = newJString("json"))
  if valid_596871 != nil:
    section.add "alt", valid_596871
  assert query != nil,
        "query argument is necessary due to required `advertiserId` field"
  var valid_596872 = query.getOrDefault("advertiserId")
  valid_596872 = validateParameter(valid_596872, JString, required = true,
                                 default = nil)
  if valid_596872 != nil:
    section.add "advertiserId", valid_596872
  var valid_596873 = query.getOrDefault("active")
  valid_596873 = validateParameter(valid_596873, JBool, required = false, default = nil)
  if valid_596873 != nil:
    section.add "active", valid_596873
  var valid_596874 = query.getOrDefault("oauth_token")
  valid_596874 = validateParameter(valid_596874, JString, required = false,
                                 default = nil)
  if valid_596874 != nil:
    section.add "oauth_token", valid_596874
  var valid_596875 = query.getOrDefault("floodlightActivityId")
  valid_596875 = validateParameter(valid_596875, JString, required = false,
                                 default = nil)
  if valid_596875 != nil:
    section.add "floodlightActivityId", valid_596875
  var valid_596876 = query.getOrDefault("userIp")
  valid_596876 = validateParameter(valid_596876, JString, required = false,
                                 default = nil)
  if valid_596876 != nil:
    section.add "userIp", valid_596876
  var valid_596877 = query.getOrDefault("maxResults")
  valid_596877 = validateParameter(valid_596877, JInt, required = false,
                                 default = newJInt(1000))
  if valid_596877 != nil:
    section.add "maxResults", valid_596877
  var valid_596878 = query.getOrDefault("key")
  valid_596878 = validateParameter(valid_596878, JString, required = false,
                                 default = nil)
  if valid_596878 != nil:
    section.add "key", valid_596878
  var valid_596879 = query.getOrDefault("name")
  valid_596879 = validateParameter(valid_596879, JString, required = false,
                                 default = nil)
  if valid_596879 != nil:
    section.add "name", valid_596879
  var valid_596880 = query.getOrDefault("sortOrder")
  valid_596880 = validateParameter(valid_596880, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_596880 != nil:
    section.add "sortOrder", valid_596880
  var valid_596881 = query.getOrDefault("prettyPrint")
  valid_596881 = validateParameter(valid_596881, JBool, required = false,
                                 default = newJBool(true))
  if valid_596881 != nil:
    section.add "prettyPrint", valid_596881
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596882: Call_DfareportingRemarketingListsList_596863;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of remarketing lists, possibly filtered. This method supports paging.
  ## 
  let valid = call_596882.validator(path, query, header, formData, body)
  let scheme = call_596882.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596882.url(scheme.get, call_596882.host, call_596882.base,
                         call_596882.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596882, url, valid)

proc call*(call_596883: Call_DfareportingRemarketingListsList_596863;
          profileId: string; advertiserId: string; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; sortField: string = "ID";
          alt: string = "json"; active: bool = false; oauthToken: string = "";
          floodlightActivityId: string = ""; userIp: string = "";
          maxResults: int = 1000; key: string = ""; name: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListsList
  ## Retrieves a list of remarketing lists, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   advertiserId: string (required)
  ##               : Select only remarketing lists owned by this advertiser.
  ##   active: bool
  ##         : Select only active or only inactive remarketing lists.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   floodlightActivityId: string
  ##                       : Select only remarketing lists that have this floodlight activity ID.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   name: string
  ##       : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596884 = newJObject()
  var query_596885 = newJObject()
  add(path_596884, "profileId", newJString(profileId))
  add(query_596885, "fields", newJString(fields))
  add(query_596885, "pageToken", newJString(pageToken))
  add(query_596885, "quotaUser", newJString(quotaUser))
  add(query_596885, "sortField", newJString(sortField))
  add(query_596885, "alt", newJString(alt))
  add(query_596885, "advertiserId", newJString(advertiserId))
  add(query_596885, "active", newJBool(active))
  add(query_596885, "oauth_token", newJString(oauthToken))
  add(query_596885, "floodlightActivityId", newJString(floodlightActivityId))
  add(query_596885, "userIp", newJString(userIp))
  add(query_596885, "maxResults", newJInt(maxResults))
  add(query_596885, "key", newJString(key))
  add(query_596885, "name", newJString(name))
  add(query_596885, "sortOrder", newJString(sortOrder))
  add(query_596885, "prettyPrint", newJBool(prettyPrint))
  result = call_596883.call(path_596884, query_596885, nil, nil, nil)

var dfareportingRemarketingListsList* = Call_DfareportingRemarketingListsList_596863(
    name: "dfareportingRemarketingListsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists",
    validator: validate_DfareportingRemarketingListsList_596864,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListsList_596865,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsPatch_596920 = ref object of OpenApiRestCall_593437
proc url_DfareportingRemarketingListsPatch_596922(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsPatch_596921(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing remarketing list. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596923 = path.getOrDefault("profileId")
  valid_596923 = validateParameter(valid_596923, JString, required = true,
                                 default = nil)
  if valid_596923 != nil:
    section.add "profileId", valid_596923
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Remarketing list ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596924 = query.getOrDefault("fields")
  valid_596924 = validateParameter(valid_596924, JString, required = false,
                                 default = nil)
  if valid_596924 != nil:
    section.add "fields", valid_596924
  var valid_596925 = query.getOrDefault("quotaUser")
  valid_596925 = validateParameter(valid_596925, JString, required = false,
                                 default = nil)
  if valid_596925 != nil:
    section.add "quotaUser", valid_596925
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_596926 = query.getOrDefault("id")
  valid_596926 = validateParameter(valid_596926, JString, required = true,
                                 default = nil)
  if valid_596926 != nil:
    section.add "id", valid_596926
  var valid_596927 = query.getOrDefault("alt")
  valid_596927 = validateParameter(valid_596927, JString, required = false,
                                 default = newJString("json"))
  if valid_596927 != nil:
    section.add "alt", valid_596927
  var valid_596928 = query.getOrDefault("oauth_token")
  valid_596928 = validateParameter(valid_596928, JString, required = false,
                                 default = nil)
  if valid_596928 != nil:
    section.add "oauth_token", valid_596928
  var valid_596929 = query.getOrDefault("userIp")
  valid_596929 = validateParameter(valid_596929, JString, required = false,
                                 default = nil)
  if valid_596929 != nil:
    section.add "userIp", valid_596929
  var valid_596930 = query.getOrDefault("key")
  valid_596930 = validateParameter(valid_596930, JString, required = false,
                                 default = nil)
  if valid_596930 != nil:
    section.add "key", valid_596930
  var valid_596931 = query.getOrDefault("prettyPrint")
  valid_596931 = validateParameter(valid_596931, JBool, required = false,
                                 default = newJBool(true))
  if valid_596931 != nil:
    section.add "prettyPrint", valid_596931
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596933: Call_DfareportingRemarketingListsPatch_596920;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing remarketing list. This method supports patch semantics.
  ## 
  let valid = call_596933.validator(path, query, header, formData, body)
  let scheme = call_596933.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596933.url(scheme.get, call_596933.host, call_596933.base,
                         call_596933.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596933, url, valid)

proc call*(call_596934: Call_DfareportingRemarketingListsPatch_596920;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListsPatch
  ## Updates an existing remarketing list. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Remarketing list ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596935 = newJObject()
  var query_596936 = newJObject()
  var body_596937 = newJObject()
  add(path_596935, "profileId", newJString(profileId))
  add(query_596936, "fields", newJString(fields))
  add(query_596936, "quotaUser", newJString(quotaUser))
  add(query_596936, "id", newJString(id))
  add(query_596936, "alt", newJString(alt))
  add(query_596936, "oauth_token", newJString(oauthToken))
  add(query_596936, "userIp", newJString(userIp))
  add(query_596936, "key", newJString(key))
  if body != nil:
    body_596937 = body
  add(query_596936, "prettyPrint", newJBool(prettyPrint))
  result = call_596934.call(path_596935, query_596936, nil, nil, body_596937)

var dfareportingRemarketingListsPatch* = Call_DfareportingRemarketingListsPatch_596920(
    name: "dfareportingRemarketingListsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists",
    validator: validate_DfareportingRemarketingListsPatch_596921,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListsPatch_596922,
    schemes: {Scheme.Https})
type
  Call_DfareportingRemarketingListsGet_596938 = ref object of OpenApiRestCall_593437
proc url_DfareportingRemarketingListsGet_596940(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/remarketingLists/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingRemarketingListsGet_596939(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one remarketing list by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Remarketing list ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596941 = path.getOrDefault("profileId")
  valid_596941 = validateParameter(valid_596941, JString, required = true,
                                 default = nil)
  if valid_596941 != nil:
    section.add "profileId", valid_596941
  var valid_596942 = path.getOrDefault("id")
  valid_596942 = validateParameter(valid_596942, JString, required = true,
                                 default = nil)
  if valid_596942 != nil:
    section.add "id", valid_596942
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596943 = query.getOrDefault("fields")
  valid_596943 = validateParameter(valid_596943, JString, required = false,
                                 default = nil)
  if valid_596943 != nil:
    section.add "fields", valid_596943
  var valid_596944 = query.getOrDefault("quotaUser")
  valid_596944 = validateParameter(valid_596944, JString, required = false,
                                 default = nil)
  if valid_596944 != nil:
    section.add "quotaUser", valid_596944
  var valid_596945 = query.getOrDefault("alt")
  valid_596945 = validateParameter(valid_596945, JString, required = false,
                                 default = newJString("json"))
  if valid_596945 != nil:
    section.add "alt", valid_596945
  var valid_596946 = query.getOrDefault("oauth_token")
  valid_596946 = validateParameter(valid_596946, JString, required = false,
                                 default = nil)
  if valid_596946 != nil:
    section.add "oauth_token", valid_596946
  var valid_596947 = query.getOrDefault("userIp")
  valid_596947 = validateParameter(valid_596947, JString, required = false,
                                 default = nil)
  if valid_596947 != nil:
    section.add "userIp", valid_596947
  var valid_596948 = query.getOrDefault("key")
  valid_596948 = validateParameter(valid_596948, JString, required = false,
                                 default = nil)
  if valid_596948 != nil:
    section.add "key", valid_596948
  var valid_596949 = query.getOrDefault("prettyPrint")
  valid_596949 = validateParameter(valid_596949, JBool, required = false,
                                 default = newJBool(true))
  if valid_596949 != nil:
    section.add "prettyPrint", valid_596949
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596950: Call_DfareportingRemarketingListsGet_596938;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one remarketing list by ID.
  ## 
  let valid = call_596950.validator(path, query, header, formData, body)
  let scheme = call_596950.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596950.url(scheme.get, call_596950.host, call_596950.base,
                         call_596950.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596950, url, valid)

proc call*(call_596951: Call_DfareportingRemarketingListsGet_596938;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingRemarketingListsGet
  ## Gets one remarketing list by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Remarketing list ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596952 = newJObject()
  var query_596953 = newJObject()
  add(path_596952, "profileId", newJString(profileId))
  add(query_596953, "fields", newJString(fields))
  add(query_596953, "quotaUser", newJString(quotaUser))
  add(query_596953, "alt", newJString(alt))
  add(query_596953, "oauth_token", newJString(oauthToken))
  add(query_596953, "userIp", newJString(userIp))
  add(path_596952, "id", newJString(id))
  add(query_596953, "key", newJString(key))
  add(query_596953, "prettyPrint", newJBool(prettyPrint))
  result = call_596951.call(path_596952, query_596953, nil, nil, nil)

var dfareportingRemarketingListsGet* = Call_DfareportingRemarketingListsGet_596938(
    name: "dfareportingRemarketingListsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/remarketingLists/{id}",
    validator: validate_DfareportingRemarketingListsGet_596939,
    base: "/dfareporting/v3.2", url: url_DfareportingRemarketingListsGet_596940,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsInsert_596974 = ref object of OpenApiRestCall_593437
proc url_DfareportingReportsInsert_596976(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsInsert_596975(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a report.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596977 = path.getOrDefault("profileId")
  valid_596977 = validateParameter(valid_596977, JString, required = true,
                                 default = nil)
  if valid_596977 != nil:
    section.add "profileId", valid_596977
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596978 = query.getOrDefault("fields")
  valid_596978 = validateParameter(valid_596978, JString, required = false,
                                 default = nil)
  if valid_596978 != nil:
    section.add "fields", valid_596978
  var valid_596979 = query.getOrDefault("quotaUser")
  valid_596979 = validateParameter(valid_596979, JString, required = false,
                                 default = nil)
  if valid_596979 != nil:
    section.add "quotaUser", valid_596979
  var valid_596980 = query.getOrDefault("alt")
  valid_596980 = validateParameter(valid_596980, JString, required = false,
                                 default = newJString("json"))
  if valid_596980 != nil:
    section.add "alt", valid_596980
  var valid_596981 = query.getOrDefault("oauth_token")
  valid_596981 = validateParameter(valid_596981, JString, required = false,
                                 default = nil)
  if valid_596981 != nil:
    section.add "oauth_token", valid_596981
  var valid_596982 = query.getOrDefault("userIp")
  valid_596982 = validateParameter(valid_596982, JString, required = false,
                                 default = nil)
  if valid_596982 != nil:
    section.add "userIp", valid_596982
  var valid_596983 = query.getOrDefault("key")
  valid_596983 = validateParameter(valid_596983, JString, required = false,
                                 default = nil)
  if valid_596983 != nil:
    section.add "key", valid_596983
  var valid_596984 = query.getOrDefault("prettyPrint")
  valid_596984 = validateParameter(valid_596984, JBool, required = false,
                                 default = newJBool(true))
  if valid_596984 != nil:
    section.add "prettyPrint", valid_596984
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_596986: Call_DfareportingReportsInsert_596974; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a report.
  ## 
  let valid = call_596986.validator(path, query, header, formData, body)
  let scheme = call_596986.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596986.url(scheme.get, call_596986.host, call_596986.base,
                         call_596986.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596986, url, valid)

proc call*(call_596987: Call_DfareportingReportsInsert_596974; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsInsert
  ## Creates a report.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596988 = newJObject()
  var query_596989 = newJObject()
  var body_596990 = newJObject()
  add(path_596988, "profileId", newJString(profileId))
  add(query_596989, "fields", newJString(fields))
  add(query_596989, "quotaUser", newJString(quotaUser))
  add(query_596989, "alt", newJString(alt))
  add(query_596989, "oauth_token", newJString(oauthToken))
  add(query_596989, "userIp", newJString(userIp))
  add(query_596989, "key", newJString(key))
  if body != nil:
    body_596990 = body
  add(query_596989, "prettyPrint", newJBool(prettyPrint))
  result = call_596987.call(path_596988, query_596989, nil, nil, body_596990)

var dfareportingReportsInsert* = Call_DfareportingReportsInsert_596974(
    name: "dfareportingReportsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/reports",
    validator: validate_DfareportingReportsInsert_596975,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsInsert_596976,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsList_596954 = ref object of OpenApiRestCall_593437
proc url_DfareportingReportsList_596956(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsList_596955(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves list of reports.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596957 = path.getOrDefault("profileId")
  valid_596957 = validateParameter(valid_596957, JString, required = true,
                                 default = nil)
  if valid_596957 != nil:
    section.add "profileId", valid_596957
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : The field by which to sort the list.
  ##   scope: JString
  ##        : The scope that defines which results are returned.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596958 = query.getOrDefault("fields")
  valid_596958 = validateParameter(valid_596958, JString, required = false,
                                 default = nil)
  if valid_596958 != nil:
    section.add "fields", valid_596958
  var valid_596959 = query.getOrDefault("pageToken")
  valid_596959 = validateParameter(valid_596959, JString, required = false,
                                 default = nil)
  if valid_596959 != nil:
    section.add "pageToken", valid_596959
  var valid_596960 = query.getOrDefault("quotaUser")
  valid_596960 = validateParameter(valid_596960, JString, required = false,
                                 default = nil)
  if valid_596960 != nil:
    section.add "quotaUser", valid_596960
  var valid_596961 = query.getOrDefault("sortField")
  valid_596961 = validateParameter(valid_596961, JString, required = false,
                                 default = newJString("LAST_MODIFIED_TIME"))
  if valid_596961 != nil:
    section.add "sortField", valid_596961
  var valid_596962 = query.getOrDefault("scope")
  valid_596962 = validateParameter(valid_596962, JString, required = false,
                                 default = newJString("MINE"))
  if valid_596962 != nil:
    section.add "scope", valid_596962
  var valid_596963 = query.getOrDefault("alt")
  valid_596963 = validateParameter(valid_596963, JString, required = false,
                                 default = newJString("json"))
  if valid_596963 != nil:
    section.add "alt", valid_596963
  var valid_596964 = query.getOrDefault("oauth_token")
  valid_596964 = validateParameter(valid_596964, JString, required = false,
                                 default = nil)
  if valid_596964 != nil:
    section.add "oauth_token", valid_596964
  var valid_596965 = query.getOrDefault("userIp")
  valid_596965 = validateParameter(valid_596965, JString, required = false,
                                 default = nil)
  if valid_596965 != nil:
    section.add "userIp", valid_596965
  var valid_596966 = query.getOrDefault("maxResults")
  valid_596966 = validateParameter(valid_596966, JInt, required = false,
                                 default = newJInt(10))
  if valid_596966 != nil:
    section.add "maxResults", valid_596966
  var valid_596967 = query.getOrDefault("key")
  valid_596967 = validateParameter(valid_596967, JString, required = false,
                                 default = nil)
  if valid_596967 != nil:
    section.add "key", valid_596967
  var valid_596968 = query.getOrDefault("sortOrder")
  valid_596968 = validateParameter(valid_596968, JString, required = false,
                                 default = newJString("DESCENDING"))
  if valid_596968 != nil:
    section.add "sortOrder", valid_596968
  var valid_596969 = query.getOrDefault("prettyPrint")
  valid_596969 = validateParameter(valid_596969, JBool, required = false,
                                 default = newJBool(true))
  if valid_596969 != nil:
    section.add "prettyPrint", valid_596969
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_596970: Call_DfareportingReportsList_596954; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves list of reports.
  ## 
  let valid = call_596970.validator(path, query, header, formData, body)
  let scheme = call_596970.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_596970.url(scheme.get, call_596970.host, call_596970.base,
                         call_596970.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_596970, url, valid)

proc call*(call_596971: Call_DfareportingReportsList_596954; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "LAST_MODIFIED_TIME"; scope: string = "MINE";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          maxResults: int = 10; key: string = ""; sortOrder: string = "DESCENDING";
          prettyPrint: bool = true): Recallable =
  ## dfareportingReportsList
  ## Retrieves list of reports.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : The field by which to sort the list.
  ##   scope: string
  ##        : The scope that defines which results are returned.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_596972 = newJObject()
  var query_596973 = newJObject()
  add(path_596972, "profileId", newJString(profileId))
  add(query_596973, "fields", newJString(fields))
  add(query_596973, "pageToken", newJString(pageToken))
  add(query_596973, "quotaUser", newJString(quotaUser))
  add(query_596973, "sortField", newJString(sortField))
  add(query_596973, "scope", newJString(scope))
  add(query_596973, "alt", newJString(alt))
  add(query_596973, "oauth_token", newJString(oauthToken))
  add(query_596973, "userIp", newJString(userIp))
  add(query_596973, "maxResults", newJInt(maxResults))
  add(query_596973, "key", newJString(key))
  add(query_596973, "sortOrder", newJString(sortOrder))
  add(query_596973, "prettyPrint", newJBool(prettyPrint))
  result = call_596971.call(path_596972, query_596973, nil, nil, nil)

var dfareportingReportsList* = Call_DfareportingReportsList_596954(
    name: "dfareportingReportsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/reports",
    validator: validate_DfareportingReportsList_596955,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsList_596956,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsCompatibleFieldsQuery_596991 = ref object of OpenApiRestCall_593437
proc url_DfareportingReportsCompatibleFieldsQuery_596993(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"), (kind: ConstantSegment,
        value: "/reports/compatiblefields/query")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsCompatibleFieldsQuery_596992(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_596994 = path.getOrDefault("profileId")
  valid_596994 = validateParameter(valid_596994, JString, required = true,
                                 default = nil)
  if valid_596994 != nil:
    section.add "profileId", valid_596994
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_596995 = query.getOrDefault("fields")
  valid_596995 = validateParameter(valid_596995, JString, required = false,
                                 default = nil)
  if valid_596995 != nil:
    section.add "fields", valid_596995
  var valid_596996 = query.getOrDefault("quotaUser")
  valid_596996 = validateParameter(valid_596996, JString, required = false,
                                 default = nil)
  if valid_596996 != nil:
    section.add "quotaUser", valid_596996
  var valid_596997 = query.getOrDefault("alt")
  valid_596997 = validateParameter(valid_596997, JString, required = false,
                                 default = newJString("json"))
  if valid_596997 != nil:
    section.add "alt", valid_596997
  var valid_596998 = query.getOrDefault("oauth_token")
  valid_596998 = validateParameter(valid_596998, JString, required = false,
                                 default = nil)
  if valid_596998 != nil:
    section.add "oauth_token", valid_596998
  var valid_596999 = query.getOrDefault("userIp")
  valid_596999 = validateParameter(valid_596999, JString, required = false,
                                 default = nil)
  if valid_596999 != nil:
    section.add "userIp", valid_596999
  var valid_597000 = query.getOrDefault("key")
  valid_597000 = validateParameter(valid_597000, JString, required = false,
                                 default = nil)
  if valid_597000 != nil:
    section.add "key", valid_597000
  var valid_597001 = query.getOrDefault("prettyPrint")
  valid_597001 = validateParameter(valid_597001, JBool, required = false,
                                 default = newJBool(true))
  if valid_597001 != nil:
    section.add "prettyPrint", valid_597001
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597003: Call_DfareportingReportsCompatibleFieldsQuery_596991;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.
  ## 
  let valid = call_597003.validator(path, query, header, formData, body)
  let scheme = call_597003.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597003.url(scheme.get, call_597003.host, call_597003.base,
                         call_597003.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597003, url, valid)

proc call*(call_597004: Call_DfareportingReportsCompatibleFieldsQuery_596991;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsCompatibleFieldsQuery
  ## Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597005 = newJObject()
  var query_597006 = newJObject()
  var body_597007 = newJObject()
  add(path_597005, "profileId", newJString(profileId))
  add(query_597006, "fields", newJString(fields))
  add(query_597006, "quotaUser", newJString(quotaUser))
  add(query_597006, "alt", newJString(alt))
  add(query_597006, "oauth_token", newJString(oauthToken))
  add(query_597006, "userIp", newJString(userIp))
  add(query_597006, "key", newJString(key))
  if body != nil:
    body_597007 = body
  add(query_597006, "prettyPrint", newJBool(prettyPrint))
  result = call_597004.call(path_597005, query_597006, nil, nil, body_597007)

var dfareportingReportsCompatibleFieldsQuery* = Call_DfareportingReportsCompatibleFieldsQuery_596991(
    name: "dfareportingReportsCompatibleFieldsQuery", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/compatiblefields/query",
    validator: validate_DfareportingReportsCompatibleFieldsQuery_596992,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsCompatibleFieldsQuery_596993,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsUpdate_597024 = ref object of OpenApiRestCall_593437
proc url_DfareportingReportsUpdate_597026(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsUpdate_597025(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a report.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597027 = path.getOrDefault("profileId")
  valid_597027 = validateParameter(valid_597027, JString, required = true,
                                 default = nil)
  if valid_597027 != nil:
    section.add "profileId", valid_597027
  var valid_597028 = path.getOrDefault("reportId")
  valid_597028 = validateParameter(valid_597028, JString, required = true,
                                 default = nil)
  if valid_597028 != nil:
    section.add "reportId", valid_597028
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597029 = query.getOrDefault("fields")
  valid_597029 = validateParameter(valid_597029, JString, required = false,
                                 default = nil)
  if valid_597029 != nil:
    section.add "fields", valid_597029
  var valid_597030 = query.getOrDefault("quotaUser")
  valid_597030 = validateParameter(valid_597030, JString, required = false,
                                 default = nil)
  if valid_597030 != nil:
    section.add "quotaUser", valid_597030
  var valid_597031 = query.getOrDefault("alt")
  valid_597031 = validateParameter(valid_597031, JString, required = false,
                                 default = newJString("json"))
  if valid_597031 != nil:
    section.add "alt", valid_597031
  var valid_597032 = query.getOrDefault("oauth_token")
  valid_597032 = validateParameter(valid_597032, JString, required = false,
                                 default = nil)
  if valid_597032 != nil:
    section.add "oauth_token", valid_597032
  var valid_597033 = query.getOrDefault("userIp")
  valid_597033 = validateParameter(valid_597033, JString, required = false,
                                 default = nil)
  if valid_597033 != nil:
    section.add "userIp", valid_597033
  var valid_597034 = query.getOrDefault("key")
  valid_597034 = validateParameter(valid_597034, JString, required = false,
                                 default = nil)
  if valid_597034 != nil:
    section.add "key", valid_597034
  var valid_597035 = query.getOrDefault("prettyPrint")
  valid_597035 = validateParameter(valid_597035, JBool, required = false,
                                 default = newJBool(true))
  if valid_597035 != nil:
    section.add "prettyPrint", valid_597035
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597037: Call_DfareportingReportsUpdate_597024; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a report.
  ## 
  let valid = call_597037.validator(path, query, header, formData, body)
  let scheme = call_597037.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597037.url(scheme.get, call_597037.host, call_597037.base,
                         call_597037.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597037, url, valid)

proc call*(call_597038: Call_DfareportingReportsUpdate_597024; profileId: string;
          reportId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsUpdate
  ## Updates a report.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597039 = newJObject()
  var query_597040 = newJObject()
  var body_597041 = newJObject()
  add(path_597039, "profileId", newJString(profileId))
  add(query_597040, "fields", newJString(fields))
  add(query_597040, "quotaUser", newJString(quotaUser))
  add(query_597040, "alt", newJString(alt))
  add(query_597040, "oauth_token", newJString(oauthToken))
  add(query_597040, "userIp", newJString(userIp))
  add(query_597040, "key", newJString(key))
  add(path_597039, "reportId", newJString(reportId))
  if body != nil:
    body_597041 = body
  add(query_597040, "prettyPrint", newJBool(prettyPrint))
  result = call_597038.call(path_597039, query_597040, nil, nil, body_597041)

var dfareportingReportsUpdate* = Call_DfareportingReportsUpdate_597024(
    name: "dfareportingReportsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}",
    validator: validate_DfareportingReportsUpdate_597025,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsUpdate_597026,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsGet_597008 = ref object of OpenApiRestCall_593437
proc url_DfareportingReportsGet_597010(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsGet_597009(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a report by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597011 = path.getOrDefault("profileId")
  valid_597011 = validateParameter(valid_597011, JString, required = true,
                                 default = nil)
  if valid_597011 != nil:
    section.add "profileId", valid_597011
  var valid_597012 = path.getOrDefault("reportId")
  valid_597012 = validateParameter(valid_597012, JString, required = true,
                                 default = nil)
  if valid_597012 != nil:
    section.add "reportId", valid_597012
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597013 = query.getOrDefault("fields")
  valid_597013 = validateParameter(valid_597013, JString, required = false,
                                 default = nil)
  if valid_597013 != nil:
    section.add "fields", valid_597013
  var valid_597014 = query.getOrDefault("quotaUser")
  valid_597014 = validateParameter(valid_597014, JString, required = false,
                                 default = nil)
  if valid_597014 != nil:
    section.add "quotaUser", valid_597014
  var valid_597015 = query.getOrDefault("alt")
  valid_597015 = validateParameter(valid_597015, JString, required = false,
                                 default = newJString("json"))
  if valid_597015 != nil:
    section.add "alt", valid_597015
  var valid_597016 = query.getOrDefault("oauth_token")
  valid_597016 = validateParameter(valid_597016, JString, required = false,
                                 default = nil)
  if valid_597016 != nil:
    section.add "oauth_token", valid_597016
  var valid_597017 = query.getOrDefault("userIp")
  valid_597017 = validateParameter(valid_597017, JString, required = false,
                                 default = nil)
  if valid_597017 != nil:
    section.add "userIp", valid_597017
  var valid_597018 = query.getOrDefault("key")
  valid_597018 = validateParameter(valid_597018, JString, required = false,
                                 default = nil)
  if valid_597018 != nil:
    section.add "key", valid_597018
  var valid_597019 = query.getOrDefault("prettyPrint")
  valid_597019 = validateParameter(valid_597019, JBool, required = false,
                                 default = newJBool(true))
  if valid_597019 != nil:
    section.add "prettyPrint", valid_597019
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597020: Call_DfareportingReportsGet_597008; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a report by its ID.
  ## 
  let valid = call_597020.validator(path, query, header, formData, body)
  let scheme = call_597020.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597020.url(scheme.get, call_597020.host, call_597020.base,
                         call_597020.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597020, url, valid)

proc call*(call_597021: Call_DfareportingReportsGet_597008; profileId: string;
          reportId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsGet
  ## Retrieves a report by its ID.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597022 = newJObject()
  var query_597023 = newJObject()
  add(path_597022, "profileId", newJString(profileId))
  add(query_597023, "fields", newJString(fields))
  add(query_597023, "quotaUser", newJString(quotaUser))
  add(query_597023, "alt", newJString(alt))
  add(query_597023, "oauth_token", newJString(oauthToken))
  add(query_597023, "userIp", newJString(userIp))
  add(query_597023, "key", newJString(key))
  add(path_597022, "reportId", newJString(reportId))
  add(query_597023, "prettyPrint", newJBool(prettyPrint))
  result = call_597021.call(path_597022, query_597023, nil, nil, nil)

var dfareportingReportsGet* = Call_DfareportingReportsGet_597008(
    name: "dfareportingReportsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}",
    validator: validate_DfareportingReportsGet_597009, base: "/dfareporting/v3.2",
    url: url_DfareportingReportsGet_597010, schemes: {Scheme.Https})
type
  Call_DfareportingReportsPatch_597058 = ref object of OpenApiRestCall_593437
proc url_DfareportingReportsPatch_597060(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsPatch_597059(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a report. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597061 = path.getOrDefault("profileId")
  valid_597061 = validateParameter(valid_597061, JString, required = true,
                                 default = nil)
  if valid_597061 != nil:
    section.add "profileId", valid_597061
  var valid_597062 = path.getOrDefault("reportId")
  valid_597062 = validateParameter(valid_597062, JString, required = true,
                                 default = nil)
  if valid_597062 != nil:
    section.add "reportId", valid_597062
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597063 = query.getOrDefault("fields")
  valid_597063 = validateParameter(valid_597063, JString, required = false,
                                 default = nil)
  if valid_597063 != nil:
    section.add "fields", valid_597063
  var valid_597064 = query.getOrDefault("quotaUser")
  valid_597064 = validateParameter(valid_597064, JString, required = false,
                                 default = nil)
  if valid_597064 != nil:
    section.add "quotaUser", valid_597064
  var valid_597065 = query.getOrDefault("alt")
  valid_597065 = validateParameter(valid_597065, JString, required = false,
                                 default = newJString("json"))
  if valid_597065 != nil:
    section.add "alt", valid_597065
  var valid_597066 = query.getOrDefault("oauth_token")
  valid_597066 = validateParameter(valid_597066, JString, required = false,
                                 default = nil)
  if valid_597066 != nil:
    section.add "oauth_token", valid_597066
  var valid_597067 = query.getOrDefault("userIp")
  valid_597067 = validateParameter(valid_597067, JString, required = false,
                                 default = nil)
  if valid_597067 != nil:
    section.add "userIp", valid_597067
  var valid_597068 = query.getOrDefault("key")
  valid_597068 = validateParameter(valid_597068, JString, required = false,
                                 default = nil)
  if valid_597068 != nil:
    section.add "key", valid_597068
  var valid_597069 = query.getOrDefault("prettyPrint")
  valid_597069 = validateParameter(valid_597069, JBool, required = false,
                                 default = newJBool(true))
  if valid_597069 != nil:
    section.add "prettyPrint", valid_597069
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597071: Call_DfareportingReportsPatch_597058; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a report. This method supports patch semantics.
  ## 
  let valid = call_597071.validator(path, query, header, formData, body)
  let scheme = call_597071.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597071.url(scheme.get, call_597071.host, call_597071.base,
                         call_597071.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597071, url, valid)

proc call*(call_597072: Call_DfareportingReportsPatch_597058; profileId: string;
          reportId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsPatch
  ## Updates a report. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597073 = newJObject()
  var query_597074 = newJObject()
  var body_597075 = newJObject()
  add(path_597073, "profileId", newJString(profileId))
  add(query_597074, "fields", newJString(fields))
  add(query_597074, "quotaUser", newJString(quotaUser))
  add(query_597074, "alt", newJString(alt))
  add(query_597074, "oauth_token", newJString(oauthToken))
  add(query_597074, "userIp", newJString(userIp))
  add(query_597074, "key", newJString(key))
  add(path_597073, "reportId", newJString(reportId))
  if body != nil:
    body_597075 = body
  add(query_597074, "prettyPrint", newJBool(prettyPrint))
  result = call_597072.call(path_597073, query_597074, nil, nil, body_597075)

var dfareportingReportsPatch* = Call_DfareportingReportsPatch_597058(
    name: "dfareportingReportsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}",
    validator: validate_DfareportingReportsPatch_597059,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsPatch_597060,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsDelete_597042 = ref object of OpenApiRestCall_593437
proc url_DfareportingReportsDelete_597044(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsDelete_597043(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a report by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA user profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597045 = path.getOrDefault("profileId")
  valid_597045 = validateParameter(valid_597045, JString, required = true,
                                 default = nil)
  if valid_597045 != nil:
    section.add "profileId", valid_597045
  var valid_597046 = path.getOrDefault("reportId")
  valid_597046 = validateParameter(valid_597046, JString, required = true,
                                 default = nil)
  if valid_597046 != nil:
    section.add "reportId", valid_597046
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597047 = query.getOrDefault("fields")
  valid_597047 = validateParameter(valid_597047, JString, required = false,
                                 default = nil)
  if valid_597047 != nil:
    section.add "fields", valid_597047
  var valid_597048 = query.getOrDefault("quotaUser")
  valid_597048 = validateParameter(valid_597048, JString, required = false,
                                 default = nil)
  if valid_597048 != nil:
    section.add "quotaUser", valid_597048
  var valid_597049 = query.getOrDefault("alt")
  valid_597049 = validateParameter(valid_597049, JString, required = false,
                                 default = newJString("json"))
  if valid_597049 != nil:
    section.add "alt", valid_597049
  var valid_597050 = query.getOrDefault("oauth_token")
  valid_597050 = validateParameter(valid_597050, JString, required = false,
                                 default = nil)
  if valid_597050 != nil:
    section.add "oauth_token", valid_597050
  var valid_597051 = query.getOrDefault("userIp")
  valid_597051 = validateParameter(valid_597051, JString, required = false,
                                 default = nil)
  if valid_597051 != nil:
    section.add "userIp", valid_597051
  var valid_597052 = query.getOrDefault("key")
  valid_597052 = validateParameter(valid_597052, JString, required = false,
                                 default = nil)
  if valid_597052 != nil:
    section.add "key", valid_597052
  var valid_597053 = query.getOrDefault("prettyPrint")
  valid_597053 = validateParameter(valid_597053, JBool, required = false,
                                 default = newJBool(true))
  if valid_597053 != nil:
    section.add "prettyPrint", valid_597053
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597054: Call_DfareportingReportsDelete_597042; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a report by its ID.
  ## 
  let valid = call_597054.validator(path, query, header, formData, body)
  let scheme = call_597054.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597054.url(scheme.get, call_597054.host, call_597054.base,
                         call_597054.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597054, url, valid)

proc call*(call_597055: Call_DfareportingReportsDelete_597042; profileId: string;
          reportId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsDelete
  ## Deletes a report by its ID.
  ##   profileId: string (required)
  ##            : The DFA user profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597056 = newJObject()
  var query_597057 = newJObject()
  add(path_597056, "profileId", newJString(profileId))
  add(query_597057, "fields", newJString(fields))
  add(query_597057, "quotaUser", newJString(quotaUser))
  add(query_597057, "alt", newJString(alt))
  add(query_597057, "oauth_token", newJString(oauthToken))
  add(query_597057, "userIp", newJString(userIp))
  add(query_597057, "key", newJString(key))
  add(path_597056, "reportId", newJString(reportId))
  add(query_597057, "prettyPrint", newJBool(prettyPrint))
  result = call_597055.call(path_597056, query_597057, nil, nil, nil)

var dfareportingReportsDelete* = Call_DfareportingReportsDelete_597042(
    name: "dfareportingReportsDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}",
    validator: validate_DfareportingReportsDelete_597043,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsDelete_597044,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsFilesList_597076 = ref object of OpenApiRestCall_593437
proc url_DfareportingReportsFilesList_597078(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId"),
               (kind: ConstantSegment, value: "/files")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsFilesList_597077(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists files for a report.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the parent report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597079 = path.getOrDefault("profileId")
  valid_597079 = validateParameter(valid_597079, JString, required = true,
                                 default = nil)
  if valid_597079 != nil:
    section.add "profileId", valid_597079
  var valid_597080 = path.getOrDefault("reportId")
  valid_597080 = validateParameter(valid_597080, JString, required = true,
                                 default = nil)
  if valid_597080 != nil:
    section.add "reportId", valid_597080
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : The field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597081 = query.getOrDefault("fields")
  valid_597081 = validateParameter(valid_597081, JString, required = false,
                                 default = nil)
  if valid_597081 != nil:
    section.add "fields", valid_597081
  var valid_597082 = query.getOrDefault("pageToken")
  valid_597082 = validateParameter(valid_597082, JString, required = false,
                                 default = nil)
  if valid_597082 != nil:
    section.add "pageToken", valid_597082
  var valid_597083 = query.getOrDefault("quotaUser")
  valid_597083 = validateParameter(valid_597083, JString, required = false,
                                 default = nil)
  if valid_597083 != nil:
    section.add "quotaUser", valid_597083
  var valid_597084 = query.getOrDefault("sortField")
  valid_597084 = validateParameter(valid_597084, JString, required = false,
                                 default = newJString("LAST_MODIFIED_TIME"))
  if valid_597084 != nil:
    section.add "sortField", valid_597084
  var valid_597085 = query.getOrDefault("alt")
  valid_597085 = validateParameter(valid_597085, JString, required = false,
                                 default = newJString("json"))
  if valid_597085 != nil:
    section.add "alt", valid_597085
  var valid_597086 = query.getOrDefault("oauth_token")
  valid_597086 = validateParameter(valid_597086, JString, required = false,
                                 default = nil)
  if valid_597086 != nil:
    section.add "oauth_token", valid_597086
  var valid_597087 = query.getOrDefault("userIp")
  valid_597087 = validateParameter(valid_597087, JString, required = false,
                                 default = nil)
  if valid_597087 != nil:
    section.add "userIp", valid_597087
  var valid_597088 = query.getOrDefault("maxResults")
  valid_597088 = validateParameter(valid_597088, JInt, required = false,
                                 default = newJInt(10))
  if valid_597088 != nil:
    section.add "maxResults", valid_597088
  var valid_597089 = query.getOrDefault("key")
  valid_597089 = validateParameter(valid_597089, JString, required = false,
                                 default = nil)
  if valid_597089 != nil:
    section.add "key", valid_597089
  var valid_597090 = query.getOrDefault("sortOrder")
  valid_597090 = validateParameter(valid_597090, JString, required = false,
                                 default = newJString("DESCENDING"))
  if valid_597090 != nil:
    section.add "sortOrder", valid_597090
  var valid_597091 = query.getOrDefault("prettyPrint")
  valid_597091 = validateParameter(valid_597091, JBool, required = false,
                                 default = newJBool(true))
  if valid_597091 != nil:
    section.add "prettyPrint", valid_597091
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597092: Call_DfareportingReportsFilesList_597076; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists files for a report.
  ## 
  let valid = call_597092.validator(path, query, header, formData, body)
  let scheme = call_597092.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597092.url(scheme.get, call_597092.host, call_597092.base,
                         call_597092.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597092, url, valid)

proc call*(call_597093: Call_DfareportingReportsFilesList_597076;
          profileId: string; reportId: string; fields: string = "";
          pageToken: string = ""; quotaUser: string = "";
          sortField: string = "LAST_MODIFIED_TIME"; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; maxResults: int = 10;
          key: string = ""; sortOrder: string = "DESCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsFilesList
  ## Lists files for a report.
  ##   profileId: string (required)
  ##            : The DFA profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : The value of the nextToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : The field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   reportId: string (required)
  ##           : The ID of the parent report.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597094 = newJObject()
  var query_597095 = newJObject()
  add(path_597094, "profileId", newJString(profileId))
  add(query_597095, "fields", newJString(fields))
  add(query_597095, "pageToken", newJString(pageToken))
  add(query_597095, "quotaUser", newJString(quotaUser))
  add(query_597095, "sortField", newJString(sortField))
  add(query_597095, "alt", newJString(alt))
  add(query_597095, "oauth_token", newJString(oauthToken))
  add(query_597095, "userIp", newJString(userIp))
  add(query_597095, "maxResults", newJInt(maxResults))
  add(query_597095, "key", newJString(key))
  add(query_597095, "sortOrder", newJString(sortOrder))
  add(path_597094, "reportId", newJString(reportId))
  add(query_597095, "prettyPrint", newJBool(prettyPrint))
  result = call_597093.call(path_597094, query_597095, nil, nil, nil)

var dfareportingReportsFilesList* = Call_DfareportingReportsFilesList_597076(
    name: "dfareportingReportsFilesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}/files",
    validator: validate_DfareportingReportsFilesList_597077,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsFilesList_597078,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsFilesGet_597096 = ref object of OpenApiRestCall_593437
proc url_DfareportingReportsFilesGet_597098(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  assert "fileId" in path, "`fileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId"),
               (kind: ConstantSegment, value: "/files/"),
               (kind: VariableSegment, value: "fileId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsFilesGet_597097(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a report file. This method supports media download.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA profile ID.
  ##   fileId: JString (required)
  ##         : The ID of the report file.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597099 = path.getOrDefault("profileId")
  valid_597099 = validateParameter(valid_597099, JString, required = true,
                                 default = nil)
  if valid_597099 != nil:
    section.add "profileId", valid_597099
  var valid_597100 = path.getOrDefault("fileId")
  valid_597100 = validateParameter(valid_597100, JString, required = true,
                                 default = nil)
  if valid_597100 != nil:
    section.add "fileId", valid_597100
  var valid_597101 = path.getOrDefault("reportId")
  valid_597101 = validateParameter(valid_597101, JString, required = true,
                                 default = nil)
  if valid_597101 != nil:
    section.add "reportId", valid_597101
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597102 = query.getOrDefault("fields")
  valid_597102 = validateParameter(valid_597102, JString, required = false,
                                 default = nil)
  if valid_597102 != nil:
    section.add "fields", valid_597102
  var valid_597103 = query.getOrDefault("quotaUser")
  valid_597103 = validateParameter(valid_597103, JString, required = false,
                                 default = nil)
  if valid_597103 != nil:
    section.add "quotaUser", valid_597103
  var valid_597104 = query.getOrDefault("alt")
  valid_597104 = validateParameter(valid_597104, JString, required = false,
                                 default = newJString("json"))
  if valid_597104 != nil:
    section.add "alt", valid_597104
  var valid_597105 = query.getOrDefault("oauth_token")
  valid_597105 = validateParameter(valid_597105, JString, required = false,
                                 default = nil)
  if valid_597105 != nil:
    section.add "oauth_token", valid_597105
  var valid_597106 = query.getOrDefault("userIp")
  valid_597106 = validateParameter(valid_597106, JString, required = false,
                                 default = nil)
  if valid_597106 != nil:
    section.add "userIp", valid_597106
  var valid_597107 = query.getOrDefault("key")
  valid_597107 = validateParameter(valid_597107, JString, required = false,
                                 default = nil)
  if valid_597107 != nil:
    section.add "key", valid_597107
  var valid_597108 = query.getOrDefault("prettyPrint")
  valid_597108 = validateParameter(valid_597108, JBool, required = false,
                                 default = newJBool(true))
  if valid_597108 != nil:
    section.add "prettyPrint", valid_597108
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597109: Call_DfareportingReportsFilesGet_597096; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a report file. This method supports media download.
  ## 
  let valid = call_597109.validator(path, query, header, formData, body)
  let scheme = call_597109.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597109.url(scheme.get, call_597109.host, call_597109.base,
                         call_597109.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597109, url, valid)

proc call*(call_597110: Call_DfareportingReportsFilesGet_597096; profileId: string;
          fileId: string; reportId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsFilesGet
  ## Retrieves a report file. This method supports media download.
  ##   profileId: string (required)
  ##            : The DFA profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   fileId: string (required)
  ##         : The ID of the report file.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597111 = newJObject()
  var query_597112 = newJObject()
  add(path_597111, "profileId", newJString(profileId))
  add(query_597112, "fields", newJString(fields))
  add(query_597112, "quotaUser", newJString(quotaUser))
  add(path_597111, "fileId", newJString(fileId))
  add(query_597112, "alt", newJString(alt))
  add(query_597112, "oauth_token", newJString(oauthToken))
  add(query_597112, "userIp", newJString(userIp))
  add(query_597112, "key", newJString(key))
  add(path_597111, "reportId", newJString(reportId))
  add(query_597112, "prettyPrint", newJBool(prettyPrint))
  result = call_597110.call(path_597111, query_597112, nil, nil, nil)

var dfareportingReportsFilesGet* = Call_DfareportingReportsFilesGet_597096(
    name: "dfareportingReportsFilesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}/files/{fileId}",
    validator: validate_DfareportingReportsFilesGet_597097,
    base: "/dfareporting/v3.2", url: url_DfareportingReportsFilesGet_597098,
    schemes: {Scheme.Https})
type
  Call_DfareportingReportsRun_597113 = ref object of OpenApiRestCall_593437
proc url_DfareportingReportsRun_597115(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "reportId" in path, "`reportId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/reports/"),
               (kind: VariableSegment, value: "reportId"),
               (kind: ConstantSegment, value: "/run")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingReportsRun_597114(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Runs a report.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : The DFA profile ID.
  ##   reportId: JString (required)
  ##           : The ID of the report.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597116 = path.getOrDefault("profileId")
  valid_597116 = validateParameter(valid_597116, JString, required = true,
                                 default = nil)
  if valid_597116 != nil:
    section.add "profileId", valid_597116
  var valid_597117 = path.getOrDefault("reportId")
  valid_597117 = validateParameter(valid_597117, JString, required = true,
                                 default = nil)
  if valid_597117 != nil:
    section.add "reportId", valid_597117
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   synchronous: JBool
  ##              : If set and true, tries to run the report synchronously.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597118 = query.getOrDefault("fields")
  valid_597118 = validateParameter(valid_597118, JString, required = false,
                                 default = nil)
  if valid_597118 != nil:
    section.add "fields", valid_597118
  var valid_597119 = query.getOrDefault("quotaUser")
  valid_597119 = validateParameter(valid_597119, JString, required = false,
                                 default = nil)
  if valid_597119 != nil:
    section.add "quotaUser", valid_597119
  var valid_597120 = query.getOrDefault("alt")
  valid_597120 = validateParameter(valid_597120, JString, required = false,
                                 default = newJString("json"))
  if valid_597120 != nil:
    section.add "alt", valid_597120
  var valid_597121 = query.getOrDefault("oauth_token")
  valid_597121 = validateParameter(valid_597121, JString, required = false,
                                 default = nil)
  if valid_597121 != nil:
    section.add "oauth_token", valid_597121
  var valid_597122 = query.getOrDefault("userIp")
  valid_597122 = validateParameter(valid_597122, JString, required = false,
                                 default = nil)
  if valid_597122 != nil:
    section.add "userIp", valid_597122
  var valid_597123 = query.getOrDefault("synchronous")
  valid_597123 = validateParameter(valid_597123, JBool, required = false,
                                 default = newJBool(false))
  if valid_597123 != nil:
    section.add "synchronous", valid_597123
  var valid_597124 = query.getOrDefault("key")
  valid_597124 = validateParameter(valid_597124, JString, required = false,
                                 default = nil)
  if valid_597124 != nil:
    section.add "key", valid_597124
  var valid_597125 = query.getOrDefault("prettyPrint")
  valid_597125 = validateParameter(valid_597125, JBool, required = false,
                                 default = newJBool(true))
  if valid_597125 != nil:
    section.add "prettyPrint", valid_597125
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597126: Call_DfareportingReportsRun_597113; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Runs a report.
  ## 
  let valid = call_597126.validator(path, query, header, formData, body)
  let scheme = call_597126.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597126.url(scheme.get, call_597126.host, call_597126.base,
                         call_597126.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597126, url, valid)

proc call*(call_597127: Call_DfareportingReportsRun_597113; profileId: string;
          reportId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          synchronous: bool = false; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingReportsRun
  ## Runs a report.
  ##   profileId: string (required)
  ##            : The DFA profile ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   synchronous: bool
  ##              : If set and true, tries to run the report synchronously.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   reportId: string (required)
  ##           : The ID of the report.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597128 = newJObject()
  var query_597129 = newJObject()
  add(path_597128, "profileId", newJString(profileId))
  add(query_597129, "fields", newJString(fields))
  add(query_597129, "quotaUser", newJString(quotaUser))
  add(query_597129, "alt", newJString(alt))
  add(query_597129, "oauth_token", newJString(oauthToken))
  add(query_597129, "userIp", newJString(userIp))
  add(query_597129, "synchronous", newJBool(synchronous))
  add(query_597129, "key", newJString(key))
  add(path_597128, "reportId", newJString(reportId))
  add(query_597129, "prettyPrint", newJBool(prettyPrint))
  result = call_597127.call(path_597128, query_597129, nil, nil, nil)

var dfareportingReportsRun* = Call_DfareportingReportsRun_597113(
    name: "dfareportingReportsRun", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/reports/{reportId}/run",
    validator: validate_DfareportingReportsRun_597114, base: "/dfareporting/v3.2",
    url: url_DfareportingReportsRun_597115, schemes: {Scheme.Https})
type
  Call_DfareportingSitesUpdate_597160 = ref object of OpenApiRestCall_593437
proc url_DfareportingSitesUpdate_597162(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesUpdate_597161(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597163 = path.getOrDefault("profileId")
  valid_597163 = validateParameter(valid_597163, JString, required = true,
                                 default = nil)
  if valid_597163 != nil:
    section.add "profileId", valid_597163
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597164 = query.getOrDefault("fields")
  valid_597164 = validateParameter(valid_597164, JString, required = false,
                                 default = nil)
  if valid_597164 != nil:
    section.add "fields", valid_597164
  var valid_597165 = query.getOrDefault("quotaUser")
  valid_597165 = validateParameter(valid_597165, JString, required = false,
                                 default = nil)
  if valid_597165 != nil:
    section.add "quotaUser", valid_597165
  var valid_597166 = query.getOrDefault("alt")
  valid_597166 = validateParameter(valid_597166, JString, required = false,
                                 default = newJString("json"))
  if valid_597166 != nil:
    section.add "alt", valid_597166
  var valid_597167 = query.getOrDefault("oauth_token")
  valid_597167 = validateParameter(valid_597167, JString, required = false,
                                 default = nil)
  if valid_597167 != nil:
    section.add "oauth_token", valid_597167
  var valid_597168 = query.getOrDefault("userIp")
  valid_597168 = validateParameter(valid_597168, JString, required = false,
                                 default = nil)
  if valid_597168 != nil:
    section.add "userIp", valid_597168
  var valid_597169 = query.getOrDefault("key")
  valid_597169 = validateParameter(valid_597169, JString, required = false,
                                 default = nil)
  if valid_597169 != nil:
    section.add "key", valid_597169
  var valid_597170 = query.getOrDefault("prettyPrint")
  valid_597170 = validateParameter(valid_597170, JBool, required = false,
                                 default = newJBool(true))
  if valid_597170 != nil:
    section.add "prettyPrint", valid_597170
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597172: Call_DfareportingSitesUpdate_597160; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing site.
  ## 
  let valid = call_597172.validator(path, query, header, formData, body)
  let scheme = call_597172.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597172.url(scheme.get, call_597172.host, call_597172.base,
                         call_597172.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597172, url, valid)

proc call*(call_597173: Call_DfareportingSitesUpdate_597160; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSitesUpdate
  ## Updates an existing site.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597174 = newJObject()
  var query_597175 = newJObject()
  var body_597176 = newJObject()
  add(path_597174, "profileId", newJString(profileId))
  add(query_597175, "fields", newJString(fields))
  add(query_597175, "quotaUser", newJString(quotaUser))
  add(query_597175, "alt", newJString(alt))
  add(query_597175, "oauth_token", newJString(oauthToken))
  add(query_597175, "userIp", newJString(userIp))
  add(query_597175, "key", newJString(key))
  if body != nil:
    body_597176 = body
  add(query_597175, "prettyPrint", newJBool(prettyPrint))
  result = call_597173.call(path_597174, query_597175, nil, nil, body_597176)

var dfareportingSitesUpdate* = Call_DfareportingSitesUpdate_597160(
    name: "dfareportingSitesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites",
    validator: validate_DfareportingSitesUpdate_597161,
    base: "/dfareporting/v3.2", url: url_DfareportingSitesUpdate_597162,
    schemes: {Scheme.Https})
type
  Call_DfareportingSitesInsert_597177 = ref object of OpenApiRestCall_593437
proc url_DfareportingSitesInsert_597179(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesInsert_597178(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597180 = path.getOrDefault("profileId")
  valid_597180 = validateParameter(valid_597180, JString, required = true,
                                 default = nil)
  if valid_597180 != nil:
    section.add "profileId", valid_597180
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597181 = query.getOrDefault("fields")
  valid_597181 = validateParameter(valid_597181, JString, required = false,
                                 default = nil)
  if valid_597181 != nil:
    section.add "fields", valid_597181
  var valid_597182 = query.getOrDefault("quotaUser")
  valid_597182 = validateParameter(valid_597182, JString, required = false,
                                 default = nil)
  if valid_597182 != nil:
    section.add "quotaUser", valid_597182
  var valid_597183 = query.getOrDefault("alt")
  valid_597183 = validateParameter(valid_597183, JString, required = false,
                                 default = newJString("json"))
  if valid_597183 != nil:
    section.add "alt", valid_597183
  var valid_597184 = query.getOrDefault("oauth_token")
  valid_597184 = validateParameter(valid_597184, JString, required = false,
                                 default = nil)
  if valid_597184 != nil:
    section.add "oauth_token", valid_597184
  var valid_597185 = query.getOrDefault("userIp")
  valid_597185 = validateParameter(valid_597185, JString, required = false,
                                 default = nil)
  if valid_597185 != nil:
    section.add "userIp", valid_597185
  var valid_597186 = query.getOrDefault("key")
  valid_597186 = validateParameter(valid_597186, JString, required = false,
                                 default = nil)
  if valid_597186 != nil:
    section.add "key", valid_597186
  var valid_597187 = query.getOrDefault("prettyPrint")
  valid_597187 = validateParameter(valid_597187, JBool, required = false,
                                 default = newJBool(true))
  if valid_597187 != nil:
    section.add "prettyPrint", valid_597187
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597189: Call_DfareportingSitesInsert_597177; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new site.
  ## 
  let valid = call_597189.validator(path, query, header, formData, body)
  let scheme = call_597189.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597189.url(scheme.get, call_597189.host, call_597189.base,
                         call_597189.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597189, url, valid)

proc call*(call_597190: Call_DfareportingSitesInsert_597177; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSitesInsert
  ## Inserts a new site.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597191 = newJObject()
  var query_597192 = newJObject()
  var body_597193 = newJObject()
  add(path_597191, "profileId", newJString(profileId))
  add(query_597192, "fields", newJString(fields))
  add(query_597192, "quotaUser", newJString(quotaUser))
  add(query_597192, "alt", newJString(alt))
  add(query_597192, "oauth_token", newJString(oauthToken))
  add(query_597192, "userIp", newJString(userIp))
  add(query_597192, "key", newJString(key))
  if body != nil:
    body_597193 = body
  add(query_597192, "prettyPrint", newJBool(prettyPrint))
  result = call_597190.call(path_597191, query_597192, nil, nil, body_597193)

var dfareportingSitesInsert* = Call_DfareportingSitesInsert_597177(
    name: "dfareportingSitesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites",
    validator: validate_DfareportingSitesInsert_597178,
    base: "/dfareporting/v3.2", url: url_DfareportingSitesInsert_597179,
    schemes: {Scheme.Https})
type
  Call_DfareportingSitesList_597130 = ref object of OpenApiRestCall_593437
proc url_DfareportingSitesList_597132(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesList_597131(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of sites, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597133 = path.getOrDefault("profileId")
  valid_597133 = validateParameter(valid_597133, JString, required = true,
                                 default = nil)
  if valid_597133 != nil:
    section.add "profileId", valid_597133
  result.add "path", section
  ## parameters in `query` object:
  ##   subaccountId: JString
  ##               : Select only sites with this subaccount ID.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name, ID or keyName. Wildcards (*) are allowed. For example, "site*2015" will return objects with names like "site June 2015", "site April 2015", or simply "site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "site" will match objects with name "my site", "site 2015", or simply "site".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   campaignIds: JArray
  ##              : Select only sites with these campaign IDs.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only sites with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   acceptsInterstitialPlacements: JBool
  ##                                : This search filter is no longer supported and will have no effect on the results returned.
  ##   acceptsInStreamVideoPlacements: JBool
  ##                                 : This search filter is no longer supported and will have no effect on the results returned.
  ##   adWordsSite: JBool
  ##              : Select only AdWords sites.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   approved: JBool
  ##           : Select only approved sites.
  ##   unmappedSite: JBool
  ##               : Select only sites that have not been mapped to a directory site.
  ##   acceptsPublisherPaidPlacements: JBool
  ##                                 : Select only sites that accept publisher paid placements.
  ##   directorySiteIds: JArray
  ##                   : Select only sites with these directory site IDs.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597134 = query.getOrDefault("subaccountId")
  valid_597134 = validateParameter(valid_597134, JString, required = false,
                                 default = nil)
  if valid_597134 != nil:
    section.add "subaccountId", valid_597134
  var valid_597135 = query.getOrDefault("fields")
  valid_597135 = validateParameter(valid_597135, JString, required = false,
                                 default = nil)
  if valid_597135 != nil:
    section.add "fields", valid_597135
  var valid_597136 = query.getOrDefault("pageToken")
  valid_597136 = validateParameter(valid_597136, JString, required = false,
                                 default = nil)
  if valid_597136 != nil:
    section.add "pageToken", valid_597136
  var valid_597137 = query.getOrDefault("quotaUser")
  valid_597137 = validateParameter(valid_597137, JString, required = false,
                                 default = nil)
  if valid_597137 != nil:
    section.add "quotaUser", valid_597137
  var valid_597138 = query.getOrDefault("sortField")
  valid_597138 = validateParameter(valid_597138, JString, required = false,
                                 default = newJString("ID"))
  if valid_597138 != nil:
    section.add "sortField", valid_597138
  var valid_597139 = query.getOrDefault("alt")
  valid_597139 = validateParameter(valid_597139, JString, required = false,
                                 default = newJString("json"))
  if valid_597139 != nil:
    section.add "alt", valid_597139
  var valid_597140 = query.getOrDefault("searchString")
  valid_597140 = validateParameter(valid_597140, JString, required = false,
                                 default = nil)
  if valid_597140 != nil:
    section.add "searchString", valid_597140
  var valid_597141 = query.getOrDefault("oauth_token")
  valid_597141 = validateParameter(valid_597141, JString, required = false,
                                 default = nil)
  if valid_597141 != nil:
    section.add "oauth_token", valid_597141
  var valid_597142 = query.getOrDefault("campaignIds")
  valid_597142 = validateParameter(valid_597142, JArray, required = false,
                                 default = nil)
  if valid_597142 != nil:
    section.add "campaignIds", valid_597142
  var valid_597143 = query.getOrDefault("userIp")
  valid_597143 = validateParameter(valid_597143, JString, required = false,
                                 default = nil)
  if valid_597143 != nil:
    section.add "userIp", valid_597143
  var valid_597144 = query.getOrDefault("maxResults")
  valid_597144 = validateParameter(valid_597144, JInt, required = false,
                                 default = newJInt(1000))
  if valid_597144 != nil:
    section.add "maxResults", valid_597144
  var valid_597145 = query.getOrDefault("ids")
  valid_597145 = validateParameter(valid_597145, JArray, required = false,
                                 default = nil)
  if valid_597145 != nil:
    section.add "ids", valid_597145
  var valid_597146 = query.getOrDefault("key")
  valid_597146 = validateParameter(valid_597146, JString, required = false,
                                 default = nil)
  if valid_597146 != nil:
    section.add "key", valid_597146
  var valid_597147 = query.getOrDefault("acceptsInterstitialPlacements")
  valid_597147 = validateParameter(valid_597147, JBool, required = false, default = nil)
  if valid_597147 != nil:
    section.add "acceptsInterstitialPlacements", valid_597147
  var valid_597148 = query.getOrDefault("acceptsInStreamVideoPlacements")
  valid_597148 = validateParameter(valid_597148, JBool, required = false, default = nil)
  if valid_597148 != nil:
    section.add "acceptsInStreamVideoPlacements", valid_597148
  var valid_597149 = query.getOrDefault("adWordsSite")
  valid_597149 = validateParameter(valid_597149, JBool, required = false, default = nil)
  if valid_597149 != nil:
    section.add "adWordsSite", valid_597149
  var valid_597150 = query.getOrDefault("sortOrder")
  valid_597150 = validateParameter(valid_597150, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_597150 != nil:
    section.add "sortOrder", valid_597150
  var valid_597151 = query.getOrDefault("approved")
  valid_597151 = validateParameter(valid_597151, JBool, required = false, default = nil)
  if valid_597151 != nil:
    section.add "approved", valid_597151
  var valid_597152 = query.getOrDefault("unmappedSite")
  valid_597152 = validateParameter(valid_597152, JBool, required = false, default = nil)
  if valid_597152 != nil:
    section.add "unmappedSite", valid_597152
  var valid_597153 = query.getOrDefault("acceptsPublisherPaidPlacements")
  valid_597153 = validateParameter(valid_597153, JBool, required = false, default = nil)
  if valid_597153 != nil:
    section.add "acceptsPublisherPaidPlacements", valid_597153
  var valid_597154 = query.getOrDefault("directorySiteIds")
  valid_597154 = validateParameter(valid_597154, JArray, required = false,
                                 default = nil)
  if valid_597154 != nil:
    section.add "directorySiteIds", valid_597154
  var valid_597155 = query.getOrDefault("prettyPrint")
  valid_597155 = validateParameter(valid_597155, JBool, required = false,
                                 default = newJBool(true))
  if valid_597155 != nil:
    section.add "prettyPrint", valid_597155
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597156: Call_DfareportingSitesList_597130; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of sites, possibly filtered. This method supports paging.
  ## 
  let valid = call_597156.validator(path, query, header, formData, body)
  let scheme = call_597156.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597156.url(scheme.get, call_597156.host, call_597156.base,
                         call_597156.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597156, url, valid)

proc call*(call_597157: Call_DfareportingSitesList_597130; profileId: string;
          subaccountId: string = ""; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = "";
          campaignIds: JsonNode = nil; userIp: string = ""; maxResults: int = 1000;
          ids: JsonNode = nil; key: string = "";
          acceptsInterstitialPlacements: bool = false;
          acceptsInStreamVideoPlacements: bool = false; adWordsSite: bool = false;
          sortOrder: string = "ASCENDING"; approved: bool = false;
          unmappedSite: bool = false; acceptsPublisherPaidPlacements: bool = false;
          directorySiteIds: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSitesList
  ## Retrieves a list of sites, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   subaccountId: string
  ##               : Select only sites with this subaccount ID.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name, ID or keyName. Wildcards (*) are allowed. For example, "site*2015" will return objects with names like "site June 2015", "site April 2015", or simply "site 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "site" will match objects with name "my site", "site 2015", or simply "site".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   campaignIds: JArray
  ##              : Select only sites with these campaign IDs.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only sites with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   acceptsInterstitialPlacements: bool
  ##                                : This search filter is no longer supported and will have no effect on the results returned.
  ##   acceptsInStreamVideoPlacements: bool
  ##                                 : This search filter is no longer supported and will have no effect on the results returned.
  ##   adWordsSite: bool
  ##              : Select only AdWords sites.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   approved: bool
  ##           : Select only approved sites.
  ##   unmappedSite: bool
  ##               : Select only sites that have not been mapped to a directory site.
  ##   acceptsPublisherPaidPlacements: bool
  ##                                 : Select only sites that accept publisher paid placements.
  ##   directorySiteIds: JArray
  ##                   : Select only sites with these directory site IDs.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597158 = newJObject()
  var query_597159 = newJObject()
  add(path_597158, "profileId", newJString(profileId))
  add(query_597159, "subaccountId", newJString(subaccountId))
  add(query_597159, "fields", newJString(fields))
  add(query_597159, "pageToken", newJString(pageToken))
  add(query_597159, "quotaUser", newJString(quotaUser))
  add(query_597159, "sortField", newJString(sortField))
  add(query_597159, "alt", newJString(alt))
  add(query_597159, "searchString", newJString(searchString))
  add(query_597159, "oauth_token", newJString(oauthToken))
  if campaignIds != nil:
    query_597159.add "campaignIds", campaignIds
  add(query_597159, "userIp", newJString(userIp))
  add(query_597159, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_597159.add "ids", ids
  add(query_597159, "key", newJString(key))
  add(query_597159, "acceptsInterstitialPlacements",
      newJBool(acceptsInterstitialPlacements))
  add(query_597159, "acceptsInStreamVideoPlacements",
      newJBool(acceptsInStreamVideoPlacements))
  add(query_597159, "adWordsSite", newJBool(adWordsSite))
  add(query_597159, "sortOrder", newJString(sortOrder))
  add(query_597159, "approved", newJBool(approved))
  add(query_597159, "unmappedSite", newJBool(unmappedSite))
  add(query_597159, "acceptsPublisherPaidPlacements",
      newJBool(acceptsPublisherPaidPlacements))
  if directorySiteIds != nil:
    query_597159.add "directorySiteIds", directorySiteIds
  add(query_597159, "prettyPrint", newJBool(prettyPrint))
  result = call_597157.call(path_597158, query_597159, nil, nil, nil)

var dfareportingSitesList* = Call_DfareportingSitesList_597130(
    name: "dfareportingSitesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites",
    validator: validate_DfareportingSitesList_597131, base: "/dfareporting/v3.2",
    url: url_DfareportingSitesList_597132, schemes: {Scheme.Https})
type
  Call_DfareportingSitesPatch_597194 = ref object of OpenApiRestCall_593437
proc url_DfareportingSitesPatch_597196(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesPatch_597195(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing site. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597197 = path.getOrDefault("profileId")
  valid_597197 = validateParameter(valid_597197, JString, required = true,
                                 default = nil)
  if valid_597197 != nil:
    section.add "profileId", valid_597197
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Site ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597198 = query.getOrDefault("fields")
  valid_597198 = validateParameter(valid_597198, JString, required = false,
                                 default = nil)
  if valid_597198 != nil:
    section.add "fields", valid_597198
  var valid_597199 = query.getOrDefault("quotaUser")
  valid_597199 = validateParameter(valid_597199, JString, required = false,
                                 default = nil)
  if valid_597199 != nil:
    section.add "quotaUser", valid_597199
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_597200 = query.getOrDefault("id")
  valid_597200 = validateParameter(valid_597200, JString, required = true,
                                 default = nil)
  if valid_597200 != nil:
    section.add "id", valid_597200
  var valid_597201 = query.getOrDefault("alt")
  valid_597201 = validateParameter(valid_597201, JString, required = false,
                                 default = newJString("json"))
  if valid_597201 != nil:
    section.add "alt", valid_597201
  var valid_597202 = query.getOrDefault("oauth_token")
  valid_597202 = validateParameter(valid_597202, JString, required = false,
                                 default = nil)
  if valid_597202 != nil:
    section.add "oauth_token", valid_597202
  var valid_597203 = query.getOrDefault("userIp")
  valid_597203 = validateParameter(valid_597203, JString, required = false,
                                 default = nil)
  if valid_597203 != nil:
    section.add "userIp", valid_597203
  var valid_597204 = query.getOrDefault("key")
  valid_597204 = validateParameter(valid_597204, JString, required = false,
                                 default = nil)
  if valid_597204 != nil:
    section.add "key", valid_597204
  var valid_597205 = query.getOrDefault("prettyPrint")
  valid_597205 = validateParameter(valid_597205, JBool, required = false,
                                 default = newJBool(true))
  if valid_597205 != nil:
    section.add "prettyPrint", valid_597205
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597207: Call_DfareportingSitesPatch_597194; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing site. This method supports patch semantics.
  ## 
  let valid = call_597207.validator(path, query, header, formData, body)
  let scheme = call_597207.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597207.url(scheme.get, call_597207.host, call_597207.base,
                         call_597207.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597207, url, valid)

proc call*(call_597208: Call_DfareportingSitesPatch_597194; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSitesPatch
  ## Updates an existing site. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Site ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597209 = newJObject()
  var query_597210 = newJObject()
  var body_597211 = newJObject()
  add(path_597209, "profileId", newJString(profileId))
  add(query_597210, "fields", newJString(fields))
  add(query_597210, "quotaUser", newJString(quotaUser))
  add(query_597210, "id", newJString(id))
  add(query_597210, "alt", newJString(alt))
  add(query_597210, "oauth_token", newJString(oauthToken))
  add(query_597210, "userIp", newJString(userIp))
  add(query_597210, "key", newJString(key))
  if body != nil:
    body_597211 = body
  add(query_597210, "prettyPrint", newJBool(prettyPrint))
  result = call_597208.call(path_597209, query_597210, nil, nil, body_597211)

var dfareportingSitesPatch* = Call_DfareportingSitesPatch_597194(
    name: "dfareportingSitesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites",
    validator: validate_DfareportingSitesPatch_597195, base: "/dfareporting/v3.2",
    url: url_DfareportingSitesPatch_597196, schemes: {Scheme.Https})
type
  Call_DfareportingSitesGet_597212 = ref object of OpenApiRestCall_593437
proc url_DfareportingSitesGet_597214(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sites/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSitesGet_597213(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one site by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Site ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597215 = path.getOrDefault("profileId")
  valid_597215 = validateParameter(valid_597215, JString, required = true,
                                 default = nil)
  if valid_597215 != nil:
    section.add "profileId", valid_597215
  var valid_597216 = path.getOrDefault("id")
  valid_597216 = validateParameter(valid_597216, JString, required = true,
                                 default = nil)
  if valid_597216 != nil:
    section.add "id", valid_597216
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597217 = query.getOrDefault("fields")
  valid_597217 = validateParameter(valid_597217, JString, required = false,
                                 default = nil)
  if valid_597217 != nil:
    section.add "fields", valid_597217
  var valid_597218 = query.getOrDefault("quotaUser")
  valid_597218 = validateParameter(valid_597218, JString, required = false,
                                 default = nil)
  if valid_597218 != nil:
    section.add "quotaUser", valid_597218
  var valid_597219 = query.getOrDefault("alt")
  valid_597219 = validateParameter(valid_597219, JString, required = false,
                                 default = newJString("json"))
  if valid_597219 != nil:
    section.add "alt", valid_597219
  var valid_597220 = query.getOrDefault("oauth_token")
  valid_597220 = validateParameter(valid_597220, JString, required = false,
                                 default = nil)
  if valid_597220 != nil:
    section.add "oauth_token", valid_597220
  var valid_597221 = query.getOrDefault("userIp")
  valid_597221 = validateParameter(valid_597221, JString, required = false,
                                 default = nil)
  if valid_597221 != nil:
    section.add "userIp", valid_597221
  var valid_597222 = query.getOrDefault("key")
  valid_597222 = validateParameter(valid_597222, JString, required = false,
                                 default = nil)
  if valid_597222 != nil:
    section.add "key", valid_597222
  var valid_597223 = query.getOrDefault("prettyPrint")
  valid_597223 = validateParameter(valid_597223, JBool, required = false,
                                 default = newJBool(true))
  if valid_597223 != nil:
    section.add "prettyPrint", valid_597223
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597224: Call_DfareportingSitesGet_597212; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one site by ID.
  ## 
  let valid = call_597224.validator(path, query, header, formData, body)
  let scheme = call_597224.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597224.url(scheme.get, call_597224.host, call_597224.base,
                         call_597224.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597224, url, valid)

proc call*(call_597225: Call_DfareportingSitesGet_597212; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingSitesGet
  ## Gets one site by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Site ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597226 = newJObject()
  var query_597227 = newJObject()
  add(path_597226, "profileId", newJString(profileId))
  add(query_597227, "fields", newJString(fields))
  add(query_597227, "quotaUser", newJString(quotaUser))
  add(query_597227, "alt", newJString(alt))
  add(query_597227, "oauth_token", newJString(oauthToken))
  add(query_597227, "userIp", newJString(userIp))
  add(path_597226, "id", newJString(id))
  add(query_597227, "key", newJString(key))
  add(query_597227, "prettyPrint", newJBool(prettyPrint))
  result = call_597225.call(path_597226, query_597227, nil, nil, nil)

var dfareportingSitesGet* = Call_DfareportingSitesGet_597212(
    name: "dfareportingSitesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sites/{id}",
    validator: validate_DfareportingSitesGet_597213, base: "/dfareporting/v3.2",
    url: url_DfareportingSitesGet_597214, schemes: {Scheme.Https})
type
  Call_DfareportingSizesInsert_597247 = ref object of OpenApiRestCall_593437
proc url_DfareportingSizesInsert_597249(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sizes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSizesInsert_597248(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new size.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597250 = path.getOrDefault("profileId")
  valid_597250 = validateParameter(valid_597250, JString, required = true,
                                 default = nil)
  if valid_597250 != nil:
    section.add "profileId", valid_597250
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597251 = query.getOrDefault("fields")
  valid_597251 = validateParameter(valid_597251, JString, required = false,
                                 default = nil)
  if valid_597251 != nil:
    section.add "fields", valid_597251
  var valid_597252 = query.getOrDefault("quotaUser")
  valid_597252 = validateParameter(valid_597252, JString, required = false,
                                 default = nil)
  if valid_597252 != nil:
    section.add "quotaUser", valid_597252
  var valid_597253 = query.getOrDefault("alt")
  valid_597253 = validateParameter(valid_597253, JString, required = false,
                                 default = newJString("json"))
  if valid_597253 != nil:
    section.add "alt", valid_597253
  var valid_597254 = query.getOrDefault("oauth_token")
  valid_597254 = validateParameter(valid_597254, JString, required = false,
                                 default = nil)
  if valid_597254 != nil:
    section.add "oauth_token", valid_597254
  var valid_597255 = query.getOrDefault("userIp")
  valid_597255 = validateParameter(valid_597255, JString, required = false,
                                 default = nil)
  if valid_597255 != nil:
    section.add "userIp", valid_597255
  var valid_597256 = query.getOrDefault("key")
  valid_597256 = validateParameter(valid_597256, JString, required = false,
                                 default = nil)
  if valid_597256 != nil:
    section.add "key", valid_597256
  var valid_597257 = query.getOrDefault("prettyPrint")
  valid_597257 = validateParameter(valid_597257, JBool, required = false,
                                 default = newJBool(true))
  if valid_597257 != nil:
    section.add "prettyPrint", valid_597257
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597259: Call_DfareportingSizesInsert_597247; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new size.
  ## 
  let valid = call_597259.validator(path, query, header, formData, body)
  let scheme = call_597259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597259.url(scheme.get, call_597259.host, call_597259.base,
                         call_597259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597259, url, valid)

proc call*(call_597260: Call_DfareportingSizesInsert_597247; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSizesInsert
  ## Inserts a new size.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597261 = newJObject()
  var query_597262 = newJObject()
  var body_597263 = newJObject()
  add(path_597261, "profileId", newJString(profileId))
  add(query_597262, "fields", newJString(fields))
  add(query_597262, "quotaUser", newJString(quotaUser))
  add(query_597262, "alt", newJString(alt))
  add(query_597262, "oauth_token", newJString(oauthToken))
  add(query_597262, "userIp", newJString(userIp))
  add(query_597262, "key", newJString(key))
  if body != nil:
    body_597263 = body
  add(query_597262, "prettyPrint", newJBool(prettyPrint))
  result = call_597260.call(path_597261, query_597262, nil, nil, body_597263)

var dfareportingSizesInsert* = Call_DfareportingSizesInsert_597247(
    name: "dfareportingSizesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sizes",
    validator: validate_DfareportingSizesInsert_597248,
    base: "/dfareporting/v3.2", url: url_DfareportingSizesInsert_597249,
    schemes: {Scheme.Https})
type
  Call_DfareportingSizesList_597228 = ref object of OpenApiRestCall_593437
proc url_DfareportingSizesList_597230(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sizes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSizesList_597229(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of sizes, possibly filtered. Retrieved sizes are globally unique and may include values not currently in use by your account. Due to this, the list of sizes returned by this method may differ from the list seen in the Trafficking UI.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597231 = path.getOrDefault("profileId")
  valid_597231 = validateParameter(valid_597231, JString, required = true,
                                 default = nil)
  if valid_597231 != nil:
    section.add "profileId", valid_597231
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   height: JInt
  ##         : Select only sizes with this height.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   ids: JArray
  ##      : Select only sizes with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   iabStandard: JBool
  ##              : Select only IAB standard sizes.
  ##   width: JInt
  ##        : Select only sizes with this width.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597232 = query.getOrDefault("fields")
  valid_597232 = validateParameter(valid_597232, JString, required = false,
                                 default = nil)
  if valid_597232 != nil:
    section.add "fields", valid_597232
  var valid_597233 = query.getOrDefault("quotaUser")
  valid_597233 = validateParameter(valid_597233, JString, required = false,
                                 default = nil)
  if valid_597233 != nil:
    section.add "quotaUser", valid_597233
  var valid_597234 = query.getOrDefault("alt")
  valid_597234 = validateParameter(valid_597234, JString, required = false,
                                 default = newJString("json"))
  if valid_597234 != nil:
    section.add "alt", valid_597234
  var valid_597235 = query.getOrDefault("oauth_token")
  valid_597235 = validateParameter(valid_597235, JString, required = false,
                                 default = nil)
  if valid_597235 != nil:
    section.add "oauth_token", valid_597235
  var valid_597236 = query.getOrDefault("height")
  valid_597236 = validateParameter(valid_597236, JInt, required = false, default = nil)
  if valid_597236 != nil:
    section.add "height", valid_597236
  var valid_597237 = query.getOrDefault("userIp")
  valid_597237 = validateParameter(valid_597237, JString, required = false,
                                 default = nil)
  if valid_597237 != nil:
    section.add "userIp", valid_597237
  var valid_597238 = query.getOrDefault("ids")
  valid_597238 = validateParameter(valid_597238, JArray, required = false,
                                 default = nil)
  if valid_597238 != nil:
    section.add "ids", valid_597238
  var valid_597239 = query.getOrDefault("key")
  valid_597239 = validateParameter(valid_597239, JString, required = false,
                                 default = nil)
  if valid_597239 != nil:
    section.add "key", valid_597239
  var valid_597240 = query.getOrDefault("iabStandard")
  valid_597240 = validateParameter(valid_597240, JBool, required = false, default = nil)
  if valid_597240 != nil:
    section.add "iabStandard", valid_597240
  var valid_597241 = query.getOrDefault("width")
  valid_597241 = validateParameter(valid_597241, JInt, required = false, default = nil)
  if valid_597241 != nil:
    section.add "width", valid_597241
  var valid_597242 = query.getOrDefault("prettyPrint")
  valid_597242 = validateParameter(valid_597242, JBool, required = false,
                                 default = newJBool(true))
  if valid_597242 != nil:
    section.add "prettyPrint", valid_597242
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597243: Call_DfareportingSizesList_597228; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of sizes, possibly filtered. Retrieved sizes are globally unique and may include values not currently in use by your account. Due to this, the list of sizes returned by this method may differ from the list seen in the Trafficking UI.
  ## 
  let valid = call_597243.validator(path, query, header, formData, body)
  let scheme = call_597243.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597243.url(scheme.get, call_597243.host, call_597243.base,
                         call_597243.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597243, url, valid)

proc call*(call_597244: Call_DfareportingSizesList_597228; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; height: int = 0; userIp: string = "";
          ids: JsonNode = nil; key: string = ""; iabStandard: bool = false; width: int = 0;
          prettyPrint: bool = true): Recallable =
  ## dfareportingSizesList
  ## Retrieves a list of sizes, possibly filtered. Retrieved sizes are globally unique and may include values not currently in use by your account. Due to this, the list of sizes returned by this method may differ from the list seen in the Trafficking UI.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   height: int
  ##         : Select only sizes with this height.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   ids: JArray
  ##      : Select only sizes with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   iabStandard: bool
  ##              : Select only IAB standard sizes.
  ##   width: int
  ##        : Select only sizes with this width.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597245 = newJObject()
  var query_597246 = newJObject()
  add(path_597245, "profileId", newJString(profileId))
  add(query_597246, "fields", newJString(fields))
  add(query_597246, "quotaUser", newJString(quotaUser))
  add(query_597246, "alt", newJString(alt))
  add(query_597246, "oauth_token", newJString(oauthToken))
  add(query_597246, "height", newJInt(height))
  add(query_597246, "userIp", newJString(userIp))
  if ids != nil:
    query_597246.add "ids", ids
  add(query_597246, "key", newJString(key))
  add(query_597246, "iabStandard", newJBool(iabStandard))
  add(query_597246, "width", newJInt(width))
  add(query_597246, "prettyPrint", newJBool(prettyPrint))
  result = call_597244.call(path_597245, query_597246, nil, nil, nil)

var dfareportingSizesList* = Call_DfareportingSizesList_597228(
    name: "dfareportingSizesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sizes",
    validator: validate_DfareportingSizesList_597229, base: "/dfareporting/v3.2",
    url: url_DfareportingSizesList_597230, schemes: {Scheme.Https})
type
  Call_DfareportingSizesGet_597264 = ref object of OpenApiRestCall_593437
proc url_DfareportingSizesGet_597266(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/sizes/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSizesGet_597265(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one size by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Size ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597267 = path.getOrDefault("profileId")
  valid_597267 = validateParameter(valid_597267, JString, required = true,
                                 default = nil)
  if valid_597267 != nil:
    section.add "profileId", valid_597267
  var valid_597268 = path.getOrDefault("id")
  valid_597268 = validateParameter(valid_597268, JString, required = true,
                                 default = nil)
  if valid_597268 != nil:
    section.add "id", valid_597268
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597269 = query.getOrDefault("fields")
  valid_597269 = validateParameter(valid_597269, JString, required = false,
                                 default = nil)
  if valid_597269 != nil:
    section.add "fields", valid_597269
  var valid_597270 = query.getOrDefault("quotaUser")
  valid_597270 = validateParameter(valid_597270, JString, required = false,
                                 default = nil)
  if valid_597270 != nil:
    section.add "quotaUser", valid_597270
  var valid_597271 = query.getOrDefault("alt")
  valid_597271 = validateParameter(valid_597271, JString, required = false,
                                 default = newJString("json"))
  if valid_597271 != nil:
    section.add "alt", valid_597271
  var valid_597272 = query.getOrDefault("oauth_token")
  valid_597272 = validateParameter(valid_597272, JString, required = false,
                                 default = nil)
  if valid_597272 != nil:
    section.add "oauth_token", valid_597272
  var valid_597273 = query.getOrDefault("userIp")
  valid_597273 = validateParameter(valid_597273, JString, required = false,
                                 default = nil)
  if valid_597273 != nil:
    section.add "userIp", valid_597273
  var valid_597274 = query.getOrDefault("key")
  valid_597274 = validateParameter(valid_597274, JString, required = false,
                                 default = nil)
  if valid_597274 != nil:
    section.add "key", valid_597274
  var valid_597275 = query.getOrDefault("prettyPrint")
  valid_597275 = validateParameter(valid_597275, JBool, required = false,
                                 default = newJBool(true))
  if valid_597275 != nil:
    section.add "prettyPrint", valid_597275
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597276: Call_DfareportingSizesGet_597264; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one size by ID.
  ## 
  let valid = call_597276.validator(path, query, header, formData, body)
  let scheme = call_597276.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597276.url(scheme.get, call_597276.host, call_597276.base,
                         call_597276.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597276, url, valid)

proc call*(call_597277: Call_DfareportingSizesGet_597264; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingSizesGet
  ## Gets one size by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Size ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597278 = newJObject()
  var query_597279 = newJObject()
  add(path_597278, "profileId", newJString(profileId))
  add(query_597279, "fields", newJString(fields))
  add(query_597279, "quotaUser", newJString(quotaUser))
  add(query_597279, "alt", newJString(alt))
  add(query_597279, "oauth_token", newJString(oauthToken))
  add(query_597279, "userIp", newJString(userIp))
  add(path_597278, "id", newJString(id))
  add(query_597279, "key", newJString(key))
  add(query_597279, "prettyPrint", newJBool(prettyPrint))
  result = call_597277.call(path_597278, query_597279, nil, nil, nil)

var dfareportingSizesGet* = Call_DfareportingSizesGet_597264(
    name: "dfareportingSizesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/sizes/{id}",
    validator: validate_DfareportingSizesGet_597265, base: "/dfareporting/v3.2",
    url: url_DfareportingSizesGet_597266, schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsUpdate_597301 = ref object of OpenApiRestCall_593437
proc url_DfareportingSubaccountsUpdate_597303(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsUpdate_597302(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing subaccount.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597304 = path.getOrDefault("profileId")
  valid_597304 = validateParameter(valid_597304, JString, required = true,
                                 default = nil)
  if valid_597304 != nil:
    section.add "profileId", valid_597304
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597305 = query.getOrDefault("fields")
  valid_597305 = validateParameter(valid_597305, JString, required = false,
                                 default = nil)
  if valid_597305 != nil:
    section.add "fields", valid_597305
  var valid_597306 = query.getOrDefault("quotaUser")
  valid_597306 = validateParameter(valid_597306, JString, required = false,
                                 default = nil)
  if valid_597306 != nil:
    section.add "quotaUser", valid_597306
  var valid_597307 = query.getOrDefault("alt")
  valid_597307 = validateParameter(valid_597307, JString, required = false,
                                 default = newJString("json"))
  if valid_597307 != nil:
    section.add "alt", valid_597307
  var valid_597308 = query.getOrDefault("oauth_token")
  valid_597308 = validateParameter(valid_597308, JString, required = false,
                                 default = nil)
  if valid_597308 != nil:
    section.add "oauth_token", valid_597308
  var valid_597309 = query.getOrDefault("userIp")
  valid_597309 = validateParameter(valid_597309, JString, required = false,
                                 default = nil)
  if valid_597309 != nil:
    section.add "userIp", valid_597309
  var valid_597310 = query.getOrDefault("key")
  valid_597310 = validateParameter(valid_597310, JString, required = false,
                                 default = nil)
  if valid_597310 != nil:
    section.add "key", valid_597310
  var valid_597311 = query.getOrDefault("prettyPrint")
  valid_597311 = validateParameter(valid_597311, JBool, required = false,
                                 default = newJBool(true))
  if valid_597311 != nil:
    section.add "prettyPrint", valid_597311
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597313: Call_DfareportingSubaccountsUpdate_597301; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing subaccount.
  ## 
  let valid = call_597313.validator(path, query, header, formData, body)
  let scheme = call_597313.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597313.url(scheme.get, call_597313.host, call_597313.base,
                         call_597313.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597313, url, valid)

proc call*(call_597314: Call_DfareportingSubaccountsUpdate_597301;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSubaccountsUpdate
  ## Updates an existing subaccount.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597315 = newJObject()
  var query_597316 = newJObject()
  var body_597317 = newJObject()
  add(path_597315, "profileId", newJString(profileId))
  add(query_597316, "fields", newJString(fields))
  add(query_597316, "quotaUser", newJString(quotaUser))
  add(query_597316, "alt", newJString(alt))
  add(query_597316, "oauth_token", newJString(oauthToken))
  add(query_597316, "userIp", newJString(userIp))
  add(query_597316, "key", newJString(key))
  if body != nil:
    body_597317 = body
  add(query_597316, "prettyPrint", newJBool(prettyPrint))
  result = call_597314.call(path_597315, query_597316, nil, nil, body_597317)

var dfareportingSubaccountsUpdate* = Call_DfareportingSubaccountsUpdate_597301(
    name: "dfareportingSubaccountsUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/subaccounts",
    validator: validate_DfareportingSubaccountsUpdate_597302,
    base: "/dfareporting/v3.2", url: url_DfareportingSubaccountsUpdate_597303,
    schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsInsert_597318 = ref object of OpenApiRestCall_593437
proc url_DfareportingSubaccountsInsert_597320(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsInsert_597319(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new subaccount.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597321 = path.getOrDefault("profileId")
  valid_597321 = validateParameter(valid_597321, JString, required = true,
                                 default = nil)
  if valid_597321 != nil:
    section.add "profileId", valid_597321
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597322 = query.getOrDefault("fields")
  valid_597322 = validateParameter(valid_597322, JString, required = false,
                                 default = nil)
  if valid_597322 != nil:
    section.add "fields", valid_597322
  var valid_597323 = query.getOrDefault("quotaUser")
  valid_597323 = validateParameter(valid_597323, JString, required = false,
                                 default = nil)
  if valid_597323 != nil:
    section.add "quotaUser", valid_597323
  var valid_597324 = query.getOrDefault("alt")
  valid_597324 = validateParameter(valid_597324, JString, required = false,
                                 default = newJString("json"))
  if valid_597324 != nil:
    section.add "alt", valid_597324
  var valid_597325 = query.getOrDefault("oauth_token")
  valid_597325 = validateParameter(valid_597325, JString, required = false,
                                 default = nil)
  if valid_597325 != nil:
    section.add "oauth_token", valid_597325
  var valid_597326 = query.getOrDefault("userIp")
  valid_597326 = validateParameter(valid_597326, JString, required = false,
                                 default = nil)
  if valid_597326 != nil:
    section.add "userIp", valid_597326
  var valid_597327 = query.getOrDefault("key")
  valid_597327 = validateParameter(valid_597327, JString, required = false,
                                 default = nil)
  if valid_597327 != nil:
    section.add "key", valid_597327
  var valid_597328 = query.getOrDefault("prettyPrint")
  valid_597328 = validateParameter(valid_597328, JBool, required = false,
                                 default = newJBool(true))
  if valid_597328 != nil:
    section.add "prettyPrint", valid_597328
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597330: Call_DfareportingSubaccountsInsert_597318; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new subaccount.
  ## 
  let valid = call_597330.validator(path, query, header, formData, body)
  let scheme = call_597330.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597330.url(scheme.get, call_597330.host, call_597330.base,
                         call_597330.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597330, url, valid)

proc call*(call_597331: Call_DfareportingSubaccountsInsert_597318;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSubaccountsInsert
  ## Inserts a new subaccount.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597332 = newJObject()
  var query_597333 = newJObject()
  var body_597334 = newJObject()
  add(path_597332, "profileId", newJString(profileId))
  add(query_597333, "fields", newJString(fields))
  add(query_597333, "quotaUser", newJString(quotaUser))
  add(query_597333, "alt", newJString(alt))
  add(query_597333, "oauth_token", newJString(oauthToken))
  add(query_597333, "userIp", newJString(userIp))
  add(query_597333, "key", newJString(key))
  if body != nil:
    body_597334 = body
  add(query_597333, "prettyPrint", newJBool(prettyPrint))
  result = call_597331.call(path_597332, query_597333, nil, nil, body_597334)

var dfareportingSubaccountsInsert* = Call_DfareportingSubaccountsInsert_597318(
    name: "dfareportingSubaccountsInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/subaccounts",
    validator: validate_DfareportingSubaccountsInsert_597319,
    base: "/dfareporting/v3.2", url: url_DfareportingSubaccountsInsert_597320,
    schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsList_597280 = ref object of OpenApiRestCall_593437
proc url_DfareportingSubaccountsList_597282(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsList_597281(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of subaccounts, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597283 = path.getOrDefault("profileId")
  valid_597283 = validateParameter(valid_597283, JString, required = true,
                                 default = nil)
  if valid_597283 != nil:
    section.add "profileId", valid_597283
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "subaccount*2015" will return objects with names like "subaccount June 2015", "subaccount April 2015", or simply "subaccount 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "subaccount" will match objects with name "my subaccount", "subaccount 2015", or simply "subaccount".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only subaccounts with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597284 = query.getOrDefault("fields")
  valid_597284 = validateParameter(valid_597284, JString, required = false,
                                 default = nil)
  if valid_597284 != nil:
    section.add "fields", valid_597284
  var valid_597285 = query.getOrDefault("pageToken")
  valid_597285 = validateParameter(valid_597285, JString, required = false,
                                 default = nil)
  if valid_597285 != nil:
    section.add "pageToken", valid_597285
  var valid_597286 = query.getOrDefault("quotaUser")
  valid_597286 = validateParameter(valid_597286, JString, required = false,
                                 default = nil)
  if valid_597286 != nil:
    section.add "quotaUser", valid_597286
  var valid_597287 = query.getOrDefault("sortField")
  valid_597287 = validateParameter(valid_597287, JString, required = false,
                                 default = newJString("ID"))
  if valid_597287 != nil:
    section.add "sortField", valid_597287
  var valid_597288 = query.getOrDefault("alt")
  valid_597288 = validateParameter(valid_597288, JString, required = false,
                                 default = newJString("json"))
  if valid_597288 != nil:
    section.add "alt", valid_597288
  var valid_597289 = query.getOrDefault("searchString")
  valid_597289 = validateParameter(valid_597289, JString, required = false,
                                 default = nil)
  if valid_597289 != nil:
    section.add "searchString", valid_597289
  var valid_597290 = query.getOrDefault("oauth_token")
  valid_597290 = validateParameter(valid_597290, JString, required = false,
                                 default = nil)
  if valid_597290 != nil:
    section.add "oauth_token", valid_597290
  var valid_597291 = query.getOrDefault("userIp")
  valid_597291 = validateParameter(valid_597291, JString, required = false,
                                 default = nil)
  if valid_597291 != nil:
    section.add "userIp", valid_597291
  var valid_597292 = query.getOrDefault("maxResults")
  valid_597292 = validateParameter(valid_597292, JInt, required = false,
                                 default = newJInt(1000))
  if valid_597292 != nil:
    section.add "maxResults", valid_597292
  var valid_597293 = query.getOrDefault("ids")
  valid_597293 = validateParameter(valid_597293, JArray, required = false,
                                 default = nil)
  if valid_597293 != nil:
    section.add "ids", valid_597293
  var valid_597294 = query.getOrDefault("key")
  valid_597294 = validateParameter(valid_597294, JString, required = false,
                                 default = nil)
  if valid_597294 != nil:
    section.add "key", valid_597294
  var valid_597295 = query.getOrDefault("sortOrder")
  valid_597295 = validateParameter(valid_597295, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_597295 != nil:
    section.add "sortOrder", valid_597295
  var valid_597296 = query.getOrDefault("prettyPrint")
  valid_597296 = validateParameter(valid_597296, JBool, required = false,
                                 default = newJBool(true))
  if valid_597296 != nil:
    section.add "prettyPrint", valid_597296
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597297: Call_DfareportingSubaccountsList_597280; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a list of subaccounts, possibly filtered. This method supports paging.
  ## 
  let valid = call_597297.validator(path, query, header, formData, body)
  let scheme = call_597297.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597297.url(scheme.get, call_597297.host, call_597297.base,
                         call_597297.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597297, url, valid)

proc call*(call_597298: Call_DfareportingSubaccountsList_597280; profileId: string;
          fields: string = ""; pageToken: string = ""; quotaUser: string = "";
          sortField: string = "ID"; alt: string = "json"; searchString: string = "";
          oauthToken: string = ""; userIp: string = ""; maxResults: int = 1000;
          ids: JsonNode = nil; key: string = ""; sortOrder: string = "ASCENDING";
          prettyPrint: bool = true): Recallable =
  ## dfareportingSubaccountsList
  ## Gets a list of subaccounts, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "subaccount*2015" will return objects with names like "subaccount June 2015", "subaccount April 2015", or simply "subaccount 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "subaccount" will match objects with name "my subaccount", "subaccount 2015", or simply "subaccount".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only subaccounts with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597299 = newJObject()
  var query_597300 = newJObject()
  add(path_597299, "profileId", newJString(profileId))
  add(query_597300, "fields", newJString(fields))
  add(query_597300, "pageToken", newJString(pageToken))
  add(query_597300, "quotaUser", newJString(quotaUser))
  add(query_597300, "sortField", newJString(sortField))
  add(query_597300, "alt", newJString(alt))
  add(query_597300, "searchString", newJString(searchString))
  add(query_597300, "oauth_token", newJString(oauthToken))
  add(query_597300, "userIp", newJString(userIp))
  add(query_597300, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_597300.add "ids", ids
  add(query_597300, "key", newJString(key))
  add(query_597300, "sortOrder", newJString(sortOrder))
  add(query_597300, "prettyPrint", newJBool(prettyPrint))
  result = call_597298.call(path_597299, query_597300, nil, nil, nil)

var dfareportingSubaccountsList* = Call_DfareportingSubaccountsList_597280(
    name: "dfareportingSubaccountsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/subaccounts",
    validator: validate_DfareportingSubaccountsList_597281,
    base: "/dfareporting/v3.2", url: url_DfareportingSubaccountsList_597282,
    schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsPatch_597335 = ref object of OpenApiRestCall_593437
proc url_DfareportingSubaccountsPatch_597337(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsPatch_597336(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing subaccount. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597338 = path.getOrDefault("profileId")
  valid_597338 = validateParameter(valid_597338, JString, required = true,
                                 default = nil)
  if valid_597338 != nil:
    section.add "profileId", valid_597338
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Subaccount ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597339 = query.getOrDefault("fields")
  valid_597339 = validateParameter(valid_597339, JString, required = false,
                                 default = nil)
  if valid_597339 != nil:
    section.add "fields", valid_597339
  var valid_597340 = query.getOrDefault("quotaUser")
  valid_597340 = validateParameter(valid_597340, JString, required = false,
                                 default = nil)
  if valid_597340 != nil:
    section.add "quotaUser", valid_597340
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_597341 = query.getOrDefault("id")
  valid_597341 = validateParameter(valid_597341, JString, required = true,
                                 default = nil)
  if valid_597341 != nil:
    section.add "id", valid_597341
  var valid_597342 = query.getOrDefault("alt")
  valid_597342 = validateParameter(valid_597342, JString, required = false,
                                 default = newJString("json"))
  if valid_597342 != nil:
    section.add "alt", valid_597342
  var valid_597343 = query.getOrDefault("oauth_token")
  valid_597343 = validateParameter(valid_597343, JString, required = false,
                                 default = nil)
  if valid_597343 != nil:
    section.add "oauth_token", valid_597343
  var valid_597344 = query.getOrDefault("userIp")
  valid_597344 = validateParameter(valid_597344, JString, required = false,
                                 default = nil)
  if valid_597344 != nil:
    section.add "userIp", valid_597344
  var valid_597345 = query.getOrDefault("key")
  valid_597345 = validateParameter(valid_597345, JString, required = false,
                                 default = nil)
  if valid_597345 != nil:
    section.add "key", valid_597345
  var valid_597346 = query.getOrDefault("prettyPrint")
  valid_597346 = validateParameter(valid_597346, JBool, required = false,
                                 default = newJBool(true))
  if valid_597346 != nil:
    section.add "prettyPrint", valid_597346
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597348: Call_DfareportingSubaccountsPatch_597335; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing subaccount. This method supports patch semantics.
  ## 
  let valid = call_597348.validator(path, query, header, formData, body)
  let scheme = call_597348.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597348.url(scheme.get, call_597348.host, call_597348.base,
                         call_597348.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597348, url, valid)

proc call*(call_597349: Call_DfareportingSubaccountsPatch_597335;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingSubaccountsPatch
  ## Updates an existing subaccount. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Subaccount ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597350 = newJObject()
  var query_597351 = newJObject()
  var body_597352 = newJObject()
  add(path_597350, "profileId", newJString(profileId))
  add(query_597351, "fields", newJString(fields))
  add(query_597351, "quotaUser", newJString(quotaUser))
  add(query_597351, "id", newJString(id))
  add(query_597351, "alt", newJString(alt))
  add(query_597351, "oauth_token", newJString(oauthToken))
  add(query_597351, "userIp", newJString(userIp))
  add(query_597351, "key", newJString(key))
  if body != nil:
    body_597352 = body
  add(query_597351, "prettyPrint", newJBool(prettyPrint))
  result = call_597349.call(path_597350, query_597351, nil, nil, body_597352)

var dfareportingSubaccountsPatch* = Call_DfareportingSubaccountsPatch_597335(
    name: "dfareportingSubaccountsPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/subaccounts",
    validator: validate_DfareportingSubaccountsPatch_597336,
    base: "/dfareporting/v3.2", url: url_DfareportingSubaccountsPatch_597337,
    schemes: {Scheme.Https})
type
  Call_DfareportingSubaccountsGet_597353 = ref object of OpenApiRestCall_593437
proc url_DfareportingSubaccountsGet_597355(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/subaccounts/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingSubaccountsGet_597354(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one subaccount by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Subaccount ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597356 = path.getOrDefault("profileId")
  valid_597356 = validateParameter(valid_597356, JString, required = true,
                                 default = nil)
  if valid_597356 != nil:
    section.add "profileId", valid_597356
  var valid_597357 = path.getOrDefault("id")
  valid_597357 = validateParameter(valid_597357, JString, required = true,
                                 default = nil)
  if valid_597357 != nil:
    section.add "id", valid_597357
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597358 = query.getOrDefault("fields")
  valid_597358 = validateParameter(valid_597358, JString, required = false,
                                 default = nil)
  if valid_597358 != nil:
    section.add "fields", valid_597358
  var valid_597359 = query.getOrDefault("quotaUser")
  valid_597359 = validateParameter(valid_597359, JString, required = false,
                                 default = nil)
  if valid_597359 != nil:
    section.add "quotaUser", valid_597359
  var valid_597360 = query.getOrDefault("alt")
  valid_597360 = validateParameter(valid_597360, JString, required = false,
                                 default = newJString("json"))
  if valid_597360 != nil:
    section.add "alt", valid_597360
  var valid_597361 = query.getOrDefault("oauth_token")
  valid_597361 = validateParameter(valid_597361, JString, required = false,
                                 default = nil)
  if valid_597361 != nil:
    section.add "oauth_token", valid_597361
  var valid_597362 = query.getOrDefault("userIp")
  valid_597362 = validateParameter(valid_597362, JString, required = false,
                                 default = nil)
  if valid_597362 != nil:
    section.add "userIp", valid_597362
  var valid_597363 = query.getOrDefault("key")
  valid_597363 = validateParameter(valid_597363, JString, required = false,
                                 default = nil)
  if valid_597363 != nil:
    section.add "key", valid_597363
  var valid_597364 = query.getOrDefault("prettyPrint")
  valid_597364 = validateParameter(valid_597364, JBool, required = false,
                                 default = newJBool(true))
  if valid_597364 != nil:
    section.add "prettyPrint", valid_597364
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597365: Call_DfareportingSubaccountsGet_597353; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one subaccount by ID.
  ## 
  let valid = call_597365.validator(path, query, header, formData, body)
  let scheme = call_597365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597365.url(scheme.get, call_597365.host, call_597365.base,
                         call_597365.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597365, url, valid)

proc call*(call_597366: Call_DfareportingSubaccountsGet_597353; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingSubaccountsGet
  ## Gets one subaccount by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Subaccount ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597367 = newJObject()
  var query_597368 = newJObject()
  add(path_597367, "profileId", newJString(profileId))
  add(query_597368, "fields", newJString(fields))
  add(query_597368, "quotaUser", newJString(quotaUser))
  add(query_597368, "alt", newJString(alt))
  add(query_597368, "oauth_token", newJString(oauthToken))
  add(query_597368, "userIp", newJString(userIp))
  add(path_597367, "id", newJString(id))
  add(query_597368, "key", newJString(key))
  add(query_597368, "prettyPrint", newJBool(prettyPrint))
  result = call_597366.call(path_597367, query_597368, nil, nil, nil)

var dfareportingSubaccountsGet* = Call_DfareportingSubaccountsGet_597353(
    name: "dfareportingSubaccountsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/subaccounts/{id}",
    validator: validate_DfareportingSubaccountsGet_597354,
    base: "/dfareporting/v3.2", url: url_DfareportingSubaccountsGet_597355,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetableRemarketingListsList_597369 = ref object of OpenApiRestCall_593437
proc url_DfareportingTargetableRemarketingListsList_597371(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetableRemarketingLists")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetableRemarketingListsList_597370(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597372 = path.getOrDefault("profileId")
  valid_597372 = validateParameter(valid_597372, JString, required = true,
                                 default = nil)
  if valid_597372 != nil:
    section.add "profileId", valid_597372
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   advertiserId: JString (required)
  ##               : Select only targetable remarketing lists targetable by these advertisers.
  ##   active: JBool
  ##         : Select only active or only inactive targetable remarketing lists.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   name: JString
  ##       : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597373 = query.getOrDefault("fields")
  valid_597373 = validateParameter(valid_597373, JString, required = false,
                                 default = nil)
  if valid_597373 != nil:
    section.add "fields", valid_597373
  var valid_597374 = query.getOrDefault("pageToken")
  valid_597374 = validateParameter(valid_597374, JString, required = false,
                                 default = nil)
  if valid_597374 != nil:
    section.add "pageToken", valid_597374
  var valid_597375 = query.getOrDefault("quotaUser")
  valid_597375 = validateParameter(valid_597375, JString, required = false,
                                 default = nil)
  if valid_597375 != nil:
    section.add "quotaUser", valid_597375
  var valid_597376 = query.getOrDefault("sortField")
  valid_597376 = validateParameter(valid_597376, JString, required = false,
                                 default = newJString("ID"))
  if valid_597376 != nil:
    section.add "sortField", valid_597376
  var valid_597377 = query.getOrDefault("alt")
  valid_597377 = validateParameter(valid_597377, JString, required = false,
                                 default = newJString("json"))
  if valid_597377 != nil:
    section.add "alt", valid_597377
  assert query != nil,
        "query argument is necessary due to required `advertiserId` field"
  var valid_597378 = query.getOrDefault("advertiserId")
  valid_597378 = validateParameter(valid_597378, JString, required = true,
                                 default = nil)
  if valid_597378 != nil:
    section.add "advertiserId", valid_597378
  var valid_597379 = query.getOrDefault("active")
  valid_597379 = validateParameter(valid_597379, JBool, required = false, default = nil)
  if valid_597379 != nil:
    section.add "active", valid_597379
  var valid_597380 = query.getOrDefault("oauth_token")
  valid_597380 = validateParameter(valid_597380, JString, required = false,
                                 default = nil)
  if valid_597380 != nil:
    section.add "oauth_token", valid_597380
  var valid_597381 = query.getOrDefault("userIp")
  valid_597381 = validateParameter(valid_597381, JString, required = false,
                                 default = nil)
  if valid_597381 != nil:
    section.add "userIp", valid_597381
  var valid_597382 = query.getOrDefault("maxResults")
  valid_597382 = validateParameter(valid_597382, JInt, required = false,
                                 default = newJInt(1000))
  if valid_597382 != nil:
    section.add "maxResults", valid_597382
  var valid_597383 = query.getOrDefault("key")
  valid_597383 = validateParameter(valid_597383, JString, required = false,
                                 default = nil)
  if valid_597383 != nil:
    section.add "key", valid_597383
  var valid_597384 = query.getOrDefault("name")
  valid_597384 = validateParameter(valid_597384, JString, required = false,
                                 default = nil)
  if valid_597384 != nil:
    section.add "name", valid_597384
  var valid_597385 = query.getOrDefault("sortOrder")
  valid_597385 = validateParameter(valid_597385, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_597385 != nil:
    section.add "sortOrder", valid_597385
  var valid_597386 = query.getOrDefault("prettyPrint")
  valid_597386 = validateParameter(valid_597386, JBool, required = false,
                                 default = newJBool(true))
  if valid_597386 != nil:
    section.add "prettyPrint", valid_597386
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597387: Call_DfareportingTargetableRemarketingListsList_597369;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging.
  ## 
  let valid = call_597387.validator(path, query, header, formData, body)
  let scheme = call_597387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597387.url(scheme.get, call_597387.host, call_597387.base,
                         call_597387.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597387, url, valid)

proc call*(call_597388: Call_DfareportingTargetableRemarketingListsList_597369;
          profileId: string; advertiserId: string; fields: string = "";
          pageToken: string = ""; quotaUser: string = ""; sortField: string = "ID";
          alt: string = "json"; active: bool = false; oauthToken: string = "";
          userIp: string = ""; maxResults: int = 1000; key: string = ""; name: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingTargetableRemarketingListsList
  ## Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   advertiserId: string (required)
  ##               : Select only targetable remarketing lists targetable by these advertisers.
  ##   active: bool
  ##         : Select only active or only inactive targetable remarketing lists.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   name: string
  ##       : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "remarketing list*2015" will return objects with names like "remarketing list June 2015", "remarketing list April 2015", or simply "remarketing list 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "remarketing list" will match objects with name "my remarketing list", "remarketing list 2015", or simply "remarketing list".
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597389 = newJObject()
  var query_597390 = newJObject()
  add(path_597389, "profileId", newJString(profileId))
  add(query_597390, "fields", newJString(fields))
  add(query_597390, "pageToken", newJString(pageToken))
  add(query_597390, "quotaUser", newJString(quotaUser))
  add(query_597390, "sortField", newJString(sortField))
  add(query_597390, "alt", newJString(alt))
  add(query_597390, "advertiserId", newJString(advertiserId))
  add(query_597390, "active", newJBool(active))
  add(query_597390, "oauth_token", newJString(oauthToken))
  add(query_597390, "userIp", newJString(userIp))
  add(query_597390, "maxResults", newJInt(maxResults))
  add(query_597390, "key", newJString(key))
  add(query_597390, "name", newJString(name))
  add(query_597390, "sortOrder", newJString(sortOrder))
  add(query_597390, "prettyPrint", newJBool(prettyPrint))
  result = call_597388.call(path_597389, query_597390, nil, nil, nil)

var dfareportingTargetableRemarketingListsList* = Call_DfareportingTargetableRemarketingListsList_597369(
    name: "dfareportingTargetableRemarketingListsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetableRemarketingLists",
    validator: validate_DfareportingTargetableRemarketingListsList_597370,
    base: "/dfareporting/v3.2",
    url: url_DfareportingTargetableRemarketingListsList_597371,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetableRemarketingListsGet_597391 = ref object of OpenApiRestCall_593437
proc url_DfareportingTargetableRemarketingListsGet_597393(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetableRemarketingLists/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetableRemarketingListsGet_597392(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one remarketing list by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Remarketing list ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597394 = path.getOrDefault("profileId")
  valid_597394 = validateParameter(valid_597394, JString, required = true,
                                 default = nil)
  if valid_597394 != nil:
    section.add "profileId", valid_597394
  var valid_597395 = path.getOrDefault("id")
  valid_597395 = validateParameter(valid_597395, JString, required = true,
                                 default = nil)
  if valid_597395 != nil:
    section.add "id", valid_597395
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597396 = query.getOrDefault("fields")
  valid_597396 = validateParameter(valid_597396, JString, required = false,
                                 default = nil)
  if valid_597396 != nil:
    section.add "fields", valid_597396
  var valid_597397 = query.getOrDefault("quotaUser")
  valid_597397 = validateParameter(valid_597397, JString, required = false,
                                 default = nil)
  if valid_597397 != nil:
    section.add "quotaUser", valid_597397
  var valid_597398 = query.getOrDefault("alt")
  valid_597398 = validateParameter(valid_597398, JString, required = false,
                                 default = newJString("json"))
  if valid_597398 != nil:
    section.add "alt", valid_597398
  var valid_597399 = query.getOrDefault("oauth_token")
  valid_597399 = validateParameter(valid_597399, JString, required = false,
                                 default = nil)
  if valid_597399 != nil:
    section.add "oauth_token", valid_597399
  var valid_597400 = query.getOrDefault("userIp")
  valid_597400 = validateParameter(valid_597400, JString, required = false,
                                 default = nil)
  if valid_597400 != nil:
    section.add "userIp", valid_597400
  var valid_597401 = query.getOrDefault("key")
  valid_597401 = validateParameter(valid_597401, JString, required = false,
                                 default = nil)
  if valid_597401 != nil:
    section.add "key", valid_597401
  var valid_597402 = query.getOrDefault("prettyPrint")
  valid_597402 = validateParameter(valid_597402, JBool, required = false,
                                 default = newJBool(true))
  if valid_597402 != nil:
    section.add "prettyPrint", valid_597402
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597403: Call_DfareportingTargetableRemarketingListsGet_597391;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one remarketing list by ID.
  ## 
  let valid = call_597403.validator(path, query, header, formData, body)
  let scheme = call_597403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597403.url(scheme.get, call_597403.host, call_597403.base,
                         call_597403.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597403, url, valid)

proc call*(call_597404: Call_DfareportingTargetableRemarketingListsGet_597391;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingTargetableRemarketingListsGet
  ## Gets one remarketing list by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Remarketing list ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597405 = newJObject()
  var query_597406 = newJObject()
  add(path_597405, "profileId", newJString(profileId))
  add(query_597406, "fields", newJString(fields))
  add(query_597406, "quotaUser", newJString(quotaUser))
  add(query_597406, "alt", newJString(alt))
  add(query_597406, "oauth_token", newJString(oauthToken))
  add(query_597406, "userIp", newJString(userIp))
  add(path_597405, "id", newJString(id))
  add(query_597406, "key", newJString(key))
  add(query_597406, "prettyPrint", newJBool(prettyPrint))
  result = call_597404.call(path_597405, query_597406, nil, nil, nil)

var dfareportingTargetableRemarketingListsGet* = Call_DfareportingTargetableRemarketingListsGet_597391(
    name: "dfareportingTargetableRemarketingListsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetableRemarketingLists/{id}",
    validator: validate_DfareportingTargetableRemarketingListsGet_597392,
    base: "/dfareporting/v3.2",
    url: url_DfareportingTargetableRemarketingListsGet_597393,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesUpdate_597429 = ref object of OpenApiRestCall_593437
proc url_DfareportingTargetingTemplatesUpdate_597431(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesUpdate_597430(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing targeting template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597432 = path.getOrDefault("profileId")
  valid_597432 = validateParameter(valid_597432, JString, required = true,
                                 default = nil)
  if valid_597432 != nil:
    section.add "profileId", valid_597432
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597433 = query.getOrDefault("fields")
  valid_597433 = validateParameter(valid_597433, JString, required = false,
                                 default = nil)
  if valid_597433 != nil:
    section.add "fields", valid_597433
  var valid_597434 = query.getOrDefault("quotaUser")
  valid_597434 = validateParameter(valid_597434, JString, required = false,
                                 default = nil)
  if valid_597434 != nil:
    section.add "quotaUser", valid_597434
  var valid_597435 = query.getOrDefault("alt")
  valid_597435 = validateParameter(valid_597435, JString, required = false,
                                 default = newJString("json"))
  if valid_597435 != nil:
    section.add "alt", valid_597435
  var valid_597436 = query.getOrDefault("oauth_token")
  valid_597436 = validateParameter(valid_597436, JString, required = false,
                                 default = nil)
  if valid_597436 != nil:
    section.add "oauth_token", valid_597436
  var valid_597437 = query.getOrDefault("userIp")
  valid_597437 = validateParameter(valid_597437, JString, required = false,
                                 default = nil)
  if valid_597437 != nil:
    section.add "userIp", valid_597437
  var valid_597438 = query.getOrDefault("key")
  valid_597438 = validateParameter(valid_597438, JString, required = false,
                                 default = nil)
  if valid_597438 != nil:
    section.add "key", valid_597438
  var valid_597439 = query.getOrDefault("prettyPrint")
  valid_597439 = validateParameter(valid_597439, JBool, required = false,
                                 default = newJBool(true))
  if valid_597439 != nil:
    section.add "prettyPrint", valid_597439
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597441: Call_DfareportingTargetingTemplatesUpdate_597429;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing targeting template.
  ## 
  let valid = call_597441.validator(path, query, header, formData, body)
  let scheme = call_597441.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597441.url(scheme.get, call_597441.host, call_597441.base,
                         call_597441.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597441, url, valid)

proc call*(call_597442: Call_DfareportingTargetingTemplatesUpdate_597429;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingTargetingTemplatesUpdate
  ## Updates an existing targeting template.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597443 = newJObject()
  var query_597444 = newJObject()
  var body_597445 = newJObject()
  add(path_597443, "profileId", newJString(profileId))
  add(query_597444, "fields", newJString(fields))
  add(query_597444, "quotaUser", newJString(quotaUser))
  add(query_597444, "alt", newJString(alt))
  add(query_597444, "oauth_token", newJString(oauthToken))
  add(query_597444, "userIp", newJString(userIp))
  add(query_597444, "key", newJString(key))
  if body != nil:
    body_597445 = body
  add(query_597444, "prettyPrint", newJBool(prettyPrint))
  result = call_597442.call(path_597443, query_597444, nil, nil, body_597445)

var dfareportingTargetingTemplatesUpdate* = Call_DfareportingTargetingTemplatesUpdate_597429(
    name: "dfareportingTargetingTemplatesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates",
    validator: validate_DfareportingTargetingTemplatesUpdate_597430,
    base: "/dfareporting/v3.2", url: url_DfareportingTargetingTemplatesUpdate_597431,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesInsert_597446 = ref object of OpenApiRestCall_593437
proc url_DfareportingTargetingTemplatesInsert_597448(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesInsert_597447(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new targeting template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597449 = path.getOrDefault("profileId")
  valid_597449 = validateParameter(valid_597449, JString, required = true,
                                 default = nil)
  if valid_597449 != nil:
    section.add "profileId", valid_597449
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597450 = query.getOrDefault("fields")
  valid_597450 = validateParameter(valid_597450, JString, required = false,
                                 default = nil)
  if valid_597450 != nil:
    section.add "fields", valid_597450
  var valid_597451 = query.getOrDefault("quotaUser")
  valid_597451 = validateParameter(valid_597451, JString, required = false,
                                 default = nil)
  if valid_597451 != nil:
    section.add "quotaUser", valid_597451
  var valid_597452 = query.getOrDefault("alt")
  valid_597452 = validateParameter(valid_597452, JString, required = false,
                                 default = newJString("json"))
  if valid_597452 != nil:
    section.add "alt", valid_597452
  var valid_597453 = query.getOrDefault("oauth_token")
  valid_597453 = validateParameter(valid_597453, JString, required = false,
                                 default = nil)
  if valid_597453 != nil:
    section.add "oauth_token", valid_597453
  var valid_597454 = query.getOrDefault("userIp")
  valid_597454 = validateParameter(valid_597454, JString, required = false,
                                 default = nil)
  if valid_597454 != nil:
    section.add "userIp", valid_597454
  var valid_597455 = query.getOrDefault("key")
  valid_597455 = validateParameter(valid_597455, JString, required = false,
                                 default = nil)
  if valid_597455 != nil:
    section.add "key", valid_597455
  var valid_597456 = query.getOrDefault("prettyPrint")
  valid_597456 = validateParameter(valid_597456, JBool, required = false,
                                 default = newJBool(true))
  if valid_597456 != nil:
    section.add "prettyPrint", valid_597456
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597458: Call_DfareportingTargetingTemplatesInsert_597446;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Inserts a new targeting template.
  ## 
  let valid = call_597458.validator(path, query, header, formData, body)
  let scheme = call_597458.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597458.url(scheme.get, call_597458.host, call_597458.base,
                         call_597458.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597458, url, valid)

proc call*(call_597459: Call_DfareportingTargetingTemplatesInsert_597446;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingTargetingTemplatesInsert
  ## Inserts a new targeting template.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597460 = newJObject()
  var query_597461 = newJObject()
  var body_597462 = newJObject()
  add(path_597460, "profileId", newJString(profileId))
  add(query_597461, "fields", newJString(fields))
  add(query_597461, "quotaUser", newJString(quotaUser))
  add(query_597461, "alt", newJString(alt))
  add(query_597461, "oauth_token", newJString(oauthToken))
  add(query_597461, "userIp", newJString(userIp))
  add(query_597461, "key", newJString(key))
  if body != nil:
    body_597462 = body
  add(query_597461, "prettyPrint", newJBool(prettyPrint))
  result = call_597459.call(path_597460, query_597461, nil, nil, body_597462)

var dfareportingTargetingTemplatesInsert* = Call_DfareportingTargetingTemplatesInsert_597446(
    name: "dfareportingTargetingTemplatesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates",
    validator: validate_DfareportingTargetingTemplatesInsert_597447,
    base: "/dfareporting/v3.2", url: url_DfareportingTargetingTemplatesInsert_597448,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesList_597407 = ref object of OpenApiRestCall_593437
proc url_DfareportingTargetingTemplatesList_597409(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesList_597408(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of targeting templates, optionally filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597410 = path.getOrDefault("profileId")
  valid_597410 = validateParameter(valid_597410, JString, required = true,
                                 default = nil)
  if valid_597410 != nil:
    section.add "profileId", valid_597410
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "template*2015" will return objects with names like "template June 2015", "template April 2015", or simply "template 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "template" will match objects with name "my template", "template 2015", or simply "template".
  ##   advertiserId: JString
  ##               : Select only targeting templates with this advertiser ID.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only targeting templates with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597411 = query.getOrDefault("fields")
  valid_597411 = validateParameter(valid_597411, JString, required = false,
                                 default = nil)
  if valid_597411 != nil:
    section.add "fields", valid_597411
  var valid_597412 = query.getOrDefault("pageToken")
  valid_597412 = validateParameter(valid_597412, JString, required = false,
                                 default = nil)
  if valid_597412 != nil:
    section.add "pageToken", valid_597412
  var valid_597413 = query.getOrDefault("quotaUser")
  valid_597413 = validateParameter(valid_597413, JString, required = false,
                                 default = nil)
  if valid_597413 != nil:
    section.add "quotaUser", valid_597413
  var valid_597414 = query.getOrDefault("sortField")
  valid_597414 = validateParameter(valid_597414, JString, required = false,
                                 default = newJString("ID"))
  if valid_597414 != nil:
    section.add "sortField", valid_597414
  var valid_597415 = query.getOrDefault("alt")
  valid_597415 = validateParameter(valid_597415, JString, required = false,
                                 default = newJString("json"))
  if valid_597415 != nil:
    section.add "alt", valid_597415
  var valid_597416 = query.getOrDefault("searchString")
  valid_597416 = validateParameter(valid_597416, JString, required = false,
                                 default = nil)
  if valid_597416 != nil:
    section.add "searchString", valid_597416
  var valid_597417 = query.getOrDefault("advertiserId")
  valid_597417 = validateParameter(valid_597417, JString, required = false,
                                 default = nil)
  if valid_597417 != nil:
    section.add "advertiserId", valid_597417
  var valid_597418 = query.getOrDefault("oauth_token")
  valid_597418 = validateParameter(valid_597418, JString, required = false,
                                 default = nil)
  if valid_597418 != nil:
    section.add "oauth_token", valid_597418
  var valid_597419 = query.getOrDefault("userIp")
  valid_597419 = validateParameter(valid_597419, JString, required = false,
                                 default = nil)
  if valid_597419 != nil:
    section.add "userIp", valid_597419
  var valid_597420 = query.getOrDefault("maxResults")
  valid_597420 = validateParameter(valid_597420, JInt, required = false,
                                 default = newJInt(1000))
  if valid_597420 != nil:
    section.add "maxResults", valid_597420
  var valid_597421 = query.getOrDefault("ids")
  valid_597421 = validateParameter(valid_597421, JArray, required = false,
                                 default = nil)
  if valid_597421 != nil:
    section.add "ids", valid_597421
  var valid_597422 = query.getOrDefault("key")
  valid_597422 = validateParameter(valid_597422, JString, required = false,
                                 default = nil)
  if valid_597422 != nil:
    section.add "key", valid_597422
  var valid_597423 = query.getOrDefault("sortOrder")
  valid_597423 = validateParameter(valid_597423, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_597423 != nil:
    section.add "sortOrder", valid_597423
  var valid_597424 = query.getOrDefault("prettyPrint")
  valid_597424 = validateParameter(valid_597424, JBool, required = false,
                                 default = newJBool(true))
  if valid_597424 != nil:
    section.add "prettyPrint", valid_597424
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597425: Call_DfareportingTargetingTemplatesList_597407;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves a list of targeting templates, optionally filtered. This method supports paging.
  ## 
  let valid = call_597425.validator(path, query, header, formData, body)
  let scheme = call_597425.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597425.url(scheme.get, call_597425.host, call_597425.base,
                         call_597425.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597425, url, valid)

proc call*(call_597426: Call_DfareportingTargetingTemplatesList_597407;
          profileId: string; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; advertiserId: string = ""; oauthToken: string = "";
          userIp: string = ""; maxResults: int = 1000; ids: JsonNode = nil;
          key: string = ""; sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingTargetingTemplatesList
  ## Retrieves a list of targeting templates, optionally filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "template*2015" will return objects with names like "template June 2015", "template April 2015", or simply "template 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "template" will match objects with name "my template", "template 2015", or simply "template".
  ##   advertiserId: string
  ##               : Select only targeting templates with this advertiser ID.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only targeting templates with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597427 = newJObject()
  var query_597428 = newJObject()
  add(path_597427, "profileId", newJString(profileId))
  add(query_597428, "fields", newJString(fields))
  add(query_597428, "pageToken", newJString(pageToken))
  add(query_597428, "quotaUser", newJString(quotaUser))
  add(query_597428, "sortField", newJString(sortField))
  add(query_597428, "alt", newJString(alt))
  add(query_597428, "searchString", newJString(searchString))
  add(query_597428, "advertiserId", newJString(advertiserId))
  add(query_597428, "oauth_token", newJString(oauthToken))
  add(query_597428, "userIp", newJString(userIp))
  add(query_597428, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_597428.add "ids", ids
  add(query_597428, "key", newJString(key))
  add(query_597428, "sortOrder", newJString(sortOrder))
  add(query_597428, "prettyPrint", newJBool(prettyPrint))
  result = call_597426.call(path_597427, query_597428, nil, nil, nil)

var dfareportingTargetingTemplatesList* = Call_DfareportingTargetingTemplatesList_597407(
    name: "dfareportingTargetingTemplatesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates",
    validator: validate_DfareportingTargetingTemplatesList_597408,
    base: "/dfareporting/v3.2", url: url_DfareportingTargetingTemplatesList_597409,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesPatch_597463 = ref object of OpenApiRestCall_593437
proc url_DfareportingTargetingTemplatesPatch_597465(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesPatch_597464(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing targeting template. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597466 = path.getOrDefault("profileId")
  valid_597466 = validateParameter(valid_597466, JString, required = true,
                                 default = nil)
  if valid_597466 != nil:
    section.add "profileId", valid_597466
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : Targeting template ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597467 = query.getOrDefault("fields")
  valid_597467 = validateParameter(valid_597467, JString, required = false,
                                 default = nil)
  if valid_597467 != nil:
    section.add "fields", valid_597467
  var valid_597468 = query.getOrDefault("quotaUser")
  valid_597468 = validateParameter(valid_597468, JString, required = false,
                                 default = nil)
  if valid_597468 != nil:
    section.add "quotaUser", valid_597468
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_597469 = query.getOrDefault("id")
  valid_597469 = validateParameter(valid_597469, JString, required = true,
                                 default = nil)
  if valid_597469 != nil:
    section.add "id", valid_597469
  var valid_597470 = query.getOrDefault("alt")
  valid_597470 = validateParameter(valid_597470, JString, required = false,
                                 default = newJString("json"))
  if valid_597470 != nil:
    section.add "alt", valid_597470
  var valid_597471 = query.getOrDefault("oauth_token")
  valid_597471 = validateParameter(valid_597471, JString, required = false,
                                 default = nil)
  if valid_597471 != nil:
    section.add "oauth_token", valid_597471
  var valid_597472 = query.getOrDefault("userIp")
  valid_597472 = validateParameter(valid_597472, JString, required = false,
                                 default = nil)
  if valid_597472 != nil:
    section.add "userIp", valid_597472
  var valid_597473 = query.getOrDefault("key")
  valid_597473 = validateParameter(valid_597473, JString, required = false,
                                 default = nil)
  if valid_597473 != nil:
    section.add "key", valid_597473
  var valid_597474 = query.getOrDefault("prettyPrint")
  valid_597474 = validateParameter(valid_597474, JBool, required = false,
                                 default = newJBool(true))
  if valid_597474 != nil:
    section.add "prettyPrint", valid_597474
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597476: Call_DfareportingTargetingTemplatesPatch_597463;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates an existing targeting template. This method supports patch semantics.
  ## 
  let valid = call_597476.validator(path, query, header, formData, body)
  let scheme = call_597476.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597476.url(scheme.get, call_597476.host, call_597476.base,
                         call_597476.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597476, url, valid)

proc call*(call_597477: Call_DfareportingTargetingTemplatesPatch_597463;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingTargetingTemplatesPatch
  ## Updates an existing targeting template. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : Targeting template ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597478 = newJObject()
  var query_597479 = newJObject()
  var body_597480 = newJObject()
  add(path_597478, "profileId", newJString(profileId))
  add(query_597479, "fields", newJString(fields))
  add(query_597479, "quotaUser", newJString(quotaUser))
  add(query_597479, "id", newJString(id))
  add(query_597479, "alt", newJString(alt))
  add(query_597479, "oauth_token", newJString(oauthToken))
  add(query_597479, "userIp", newJString(userIp))
  add(query_597479, "key", newJString(key))
  if body != nil:
    body_597480 = body
  add(query_597479, "prettyPrint", newJBool(prettyPrint))
  result = call_597477.call(path_597478, query_597479, nil, nil, body_597480)

var dfareportingTargetingTemplatesPatch* = Call_DfareportingTargetingTemplatesPatch_597463(
    name: "dfareportingTargetingTemplatesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates",
    validator: validate_DfareportingTargetingTemplatesPatch_597464,
    base: "/dfareporting/v3.2", url: url_DfareportingTargetingTemplatesPatch_597465,
    schemes: {Scheme.Https})
type
  Call_DfareportingTargetingTemplatesGet_597481 = ref object of OpenApiRestCall_593437
proc url_DfareportingTargetingTemplatesGet_597483(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/targetingTemplates/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingTargetingTemplatesGet_597482(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one targeting template by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : Targeting template ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597484 = path.getOrDefault("profileId")
  valid_597484 = validateParameter(valid_597484, JString, required = true,
                                 default = nil)
  if valid_597484 != nil:
    section.add "profileId", valid_597484
  var valid_597485 = path.getOrDefault("id")
  valid_597485 = validateParameter(valid_597485, JString, required = true,
                                 default = nil)
  if valid_597485 != nil:
    section.add "id", valid_597485
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597486 = query.getOrDefault("fields")
  valid_597486 = validateParameter(valid_597486, JString, required = false,
                                 default = nil)
  if valid_597486 != nil:
    section.add "fields", valid_597486
  var valid_597487 = query.getOrDefault("quotaUser")
  valid_597487 = validateParameter(valid_597487, JString, required = false,
                                 default = nil)
  if valid_597487 != nil:
    section.add "quotaUser", valid_597487
  var valid_597488 = query.getOrDefault("alt")
  valid_597488 = validateParameter(valid_597488, JString, required = false,
                                 default = newJString("json"))
  if valid_597488 != nil:
    section.add "alt", valid_597488
  var valid_597489 = query.getOrDefault("oauth_token")
  valid_597489 = validateParameter(valid_597489, JString, required = false,
                                 default = nil)
  if valid_597489 != nil:
    section.add "oauth_token", valid_597489
  var valid_597490 = query.getOrDefault("userIp")
  valid_597490 = validateParameter(valid_597490, JString, required = false,
                                 default = nil)
  if valid_597490 != nil:
    section.add "userIp", valid_597490
  var valid_597491 = query.getOrDefault("key")
  valid_597491 = validateParameter(valid_597491, JString, required = false,
                                 default = nil)
  if valid_597491 != nil:
    section.add "key", valid_597491
  var valid_597492 = query.getOrDefault("prettyPrint")
  valid_597492 = validateParameter(valid_597492, JBool, required = false,
                                 default = newJBool(true))
  if valid_597492 != nil:
    section.add "prettyPrint", valid_597492
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597493: Call_DfareportingTargetingTemplatesGet_597481;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one targeting template by ID.
  ## 
  let valid = call_597493.validator(path, query, header, formData, body)
  let scheme = call_597493.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597493.url(scheme.get, call_597493.host, call_597493.base,
                         call_597493.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597493, url, valid)

proc call*(call_597494: Call_DfareportingTargetingTemplatesGet_597481;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingTargetingTemplatesGet
  ## Gets one targeting template by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : Targeting template ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597495 = newJObject()
  var query_597496 = newJObject()
  add(path_597495, "profileId", newJString(profileId))
  add(query_597496, "fields", newJString(fields))
  add(query_597496, "quotaUser", newJString(quotaUser))
  add(query_597496, "alt", newJString(alt))
  add(query_597496, "oauth_token", newJString(oauthToken))
  add(query_597496, "userIp", newJString(userIp))
  add(path_597495, "id", newJString(id))
  add(query_597496, "key", newJString(key))
  add(query_597496, "prettyPrint", newJBool(prettyPrint))
  result = call_597494.call(path_597495, query_597496, nil, nil, nil)

var dfareportingTargetingTemplatesGet* = Call_DfareportingTargetingTemplatesGet_597481(
    name: "dfareportingTargetingTemplatesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/targetingTemplates/{id}",
    validator: validate_DfareportingTargetingTemplatesGet_597482,
    base: "/dfareporting/v3.2", url: url_DfareportingTargetingTemplatesGet_597483,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolePermissionGroupsList_597497 = ref object of OpenApiRestCall_593437
proc url_DfareportingUserRolePermissionGroupsList_597499(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRolePermissionGroups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolePermissionGroupsList_597498(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of all supported user role permission groups.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597500 = path.getOrDefault("profileId")
  valid_597500 = validateParameter(valid_597500, JString, required = true,
                                 default = nil)
  if valid_597500 != nil:
    section.add "profileId", valid_597500
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597501 = query.getOrDefault("fields")
  valid_597501 = validateParameter(valid_597501, JString, required = false,
                                 default = nil)
  if valid_597501 != nil:
    section.add "fields", valid_597501
  var valid_597502 = query.getOrDefault("quotaUser")
  valid_597502 = validateParameter(valid_597502, JString, required = false,
                                 default = nil)
  if valid_597502 != nil:
    section.add "quotaUser", valid_597502
  var valid_597503 = query.getOrDefault("alt")
  valid_597503 = validateParameter(valid_597503, JString, required = false,
                                 default = newJString("json"))
  if valid_597503 != nil:
    section.add "alt", valid_597503
  var valid_597504 = query.getOrDefault("oauth_token")
  valid_597504 = validateParameter(valid_597504, JString, required = false,
                                 default = nil)
  if valid_597504 != nil:
    section.add "oauth_token", valid_597504
  var valid_597505 = query.getOrDefault("userIp")
  valid_597505 = validateParameter(valid_597505, JString, required = false,
                                 default = nil)
  if valid_597505 != nil:
    section.add "userIp", valid_597505
  var valid_597506 = query.getOrDefault("key")
  valid_597506 = validateParameter(valid_597506, JString, required = false,
                                 default = nil)
  if valid_597506 != nil:
    section.add "key", valid_597506
  var valid_597507 = query.getOrDefault("prettyPrint")
  valid_597507 = validateParameter(valid_597507, JBool, required = false,
                                 default = newJBool(true))
  if valid_597507 != nil:
    section.add "prettyPrint", valid_597507
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597508: Call_DfareportingUserRolePermissionGroupsList_597497;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of all supported user role permission groups.
  ## 
  let valid = call_597508.validator(path, query, header, formData, body)
  let scheme = call_597508.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597508.url(scheme.get, call_597508.host, call_597508.base,
                         call_597508.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597508, url, valid)

proc call*(call_597509: Call_DfareportingUserRolePermissionGroupsList_597497;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolePermissionGroupsList
  ## Gets a list of all supported user role permission groups.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597510 = newJObject()
  var query_597511 = newJObject()
  add(path_597510, "profileId", newJString(profileId))
  add(query_597511, "fields", newJString(fields))
  add(query_597511, "quotaUser", newJString(quotaUser))
  add(query_597511, "alt", newJString(alt))
  add(query_597511, "oauth_token", newJString(oauthToken))
  add(query_597511, "userIp", newJString(userIp))
  add(query_597511, "key", newJString(key))
  add(query_597511, "prettyPrint", newJBool(prettyPrint))
  result = call_597509.call(path_597510, query_597511, nil, nil, nil)

var dfareportingUserRolePermissionGroupsList* = Call_DfareportingUserRolePermissionGroupsList_597497(
    name: "dfareportingUserRolePermissionGroupsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/userRolePermissionGroups",
    validator: validate_DfareportingUserRolePermissionGroupsList_597498,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolePermissionGroupsList_597499,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolePermissionGroupsGet_597512 = ref object of OpenApiRestCall_593437
proc url_DfareportingUserRolePermissionGroupsGet_597514(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRolePermissionGroups/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolePermissionGroupsGet_597513(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one user role permission group by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User role permission group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597515 = path.getOrDefault("profileId")
  valid_597515 = validateParameter(valid_597515, JString, required = true,
                                 default = nil)
  if valid_597515 != nil:
    section.add "profileId", valid_597515
  var valid_597516 = path.getOrDefault("id")
  valid_597516 = validateParameter(valid_597516, JString, required = true,
                                 default = nil)
  if valid_597516 != nil:
    section.add "id", valid_597516
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597517 = query.getOrDefault("fields")
  valid_597517 = validateParameter(valid_597517, JString, required = false,
                                 default = nil)
  if valid_597517 != nil:
    section.add "fields", valid_597517
  var valid_597518 = query.getOrDefault("quotaUser")
  valid_597518 = validateParameter(valid_597518, JString, required = false,
                                 default = nil)
  if valid_597518 != nil:
    section.add "quotaUser", valid_597518
  var valid_597519 = query.getOrDefault("alt")
  valid_597519 = validateParameter(valid_597519, JString, required = false,
                                 default = newJString("json"))
  if valid_597519 != nil:
    section.add "alt", valid_597519
  var valid_597520 = query.getOrDefault("oauth_token")
  valid_597520 = validateParameter(valid_597520, JString, required = false,
                                 default = nil)
  if valid_597520 != nil:
    section.add "oauth_token", valid_597520
  var valid_597521 = query.getOrDefault("userIp")
  valid_597521 = validateParameter(valid_597521, JString, required = false,
                                 default = nil)
  if valid_597521 != nil:
    section.add "userIp", valid_597521
  var valid_597522 = query.getOrDefault("key")
  valid_597522 = validateParameter(valid_597522, JString, required = false,
                                 default = nil)
  if valid_597522 != nil:
    section.add "key", valid_597522
  var valid_597523 = query.getOrDefault("prettyPrint")
  valid_597523 = validateParameter(valid_597523, JBool, required = false,
                                 default = newJBool(true))
  if valid_597523 != nil:
    section.add "prettyPrint", valid_597523
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597524: Call_DfareportingUserRolePermissionGroupsGet_597512;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one user role permission group by ID.
  ## 
  let valid = call_597524.validator(path, query, header, formData, body)
  let scheme = call_597524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597524.url(scheme.get, call_597524.host, call_597524.base,
                         call_597524.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597524, url, valid)

proc call*(call_597525: Call_DfareportingUserRolePermissionGroupsGet_597512;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolePermissionGroupsGet
  ## Gets one user role permission group by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : User role permission group ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597526 = newJObject()
  var query_597527 = newJObject()
  add(path_597526, "profileId", newJString(profileId))
  add(query_597527, "fields", newJString(fields))
  add(query_597527, "quotaUser", newJString(quotaUser))
  add(query_597527, "alt", newJString(alt))
  add(query_597527, "oauth_token", newJString(oauthToken))
  add(query_597527, "userIp", newJString(userIp))
  add(path_597526, "id", newJString(id))
  add(query_597527, "key", newJString(key))
  add(query_597527, "prettyPrint", newJBool(prettyPrint))
  result = call_597525.call(path_597526, query_597527, nil, nil, nil)

var dfareportingUserRolePermissionGroupsGet* = Call_DfareportingUserRolePermissionGroupsGet_597512(
    name: "dfareportingUserRolePermissionGroupsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/userRolePermissionGroups/{id}",
    validator: validate_DfareportingUserRolePermissionGroupsGet_597513,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolePermissionGroupsGet_597514,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolePermissionsList_597528 = ref object of OpenApiRestCall_593437
proc url_DfareportingUserRolePermissionsList_597530(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRolePermissions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolePermissionsList_597529(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of user role permissions, possibly filtered.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597531 = path.getOrDefault("profileId")
  valid_597531 = validateParameter(valid_597531, JString, required = true,
                                 default = nil)
  if valid_597531 != nil:
    section.add "profileId", valid_597531
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   ids: JArray
  ##      : Select only user role permissions with these IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597532 = query.getOrDefault("fields")
  valid_597532 = validateParameter(valid_597532, JString, required = false,
                                 default = nil)
  if valid_597532 != nil:
    section.add "fields", valid_597532
  var valid_597533 = query.getOrDefault("quotaUser")
  valid_597533 = validateParameter(valid_597533, JString, required = false,
                                 default = nil)
  if valid_597533 != nil:
    section.add "quotaUser", valid_597533
  var valid_597534 = query.getOrDefault("alt")
  valid_597534 = validateParameter(valid_597534, JString, required = false,
                                 default = newJString("json"))
  if valid_597534 != nil:
    section.add "alt", valid_597534
  var valid_597535 = query.getOrDefault("oauth_token")
  valid_597535 = validateParameter(valid_597535, JString, required = false,
                                 default = nil)
  if valid_597535 != nil:
    section.add "oauth_token", valid_597535
  var valid_597536 = query.getOrDefault("userIp")
  valid_597536 = validateParameter(valid_597536, JString, required = false,
                                 default = nil)
  if valid_597536 != nil:
    section.add "userIp", valid_597536
  var valid_597537 = query.getOrDefault("ids")
  valid_597537 = validateParameter(valid_597537, JArray, required = false,
                                 default = nil)
  if valid_597537 != nil:
    section.add "ids", valid_597537
  var valid_597538 = query.getOrDefault("key")
  valid_597538 = validateParameter(valid_597538, JString, required = false,
                                 default = nil)
  if valid_597538 != nil:
    section.add "key", valid_597538
  var valid_597539 = query.getOrDefault("prettyPrint")
  valid_597539 = validateParameter(valid_597539, JBool, required = false,
                                 default = newJBool(true))
  if valid_597539 != nil:
    section.add "prettyPrint", valid_597539
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597540: Call_DfareportingUserRolePermissionsList_597528;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of user role permissions, possibly filtered.
  ## 
  let valid = call_597540.validator(path, query, header, formData, body)
  let scheme = call_597540.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597540.url(scheme.get, call_597540.host, call_597540.base,
                         call_597540.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597540, url, valid)

proc call*(call_597541: Call_DfareportingUserRolePermissionsList_597528;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          ids: JsonNode = nil; key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolePermissionsList
  ## Gets a list of user role permissions, possibly filtered.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   ids: JArray
  ##      : Select only user role permissions with these IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597542 = newJObject()
  var query_597543 = newJObject()
  add(path_597542, "profileId", newJString(profileId))
  add(query_597543, "fields", newJString(fields))
  add(query_597543, "quotaUser", newJString(quotaUser))
  add(query_597543, "alt", newJString(alt))
  add(query_597543, "oauth_token", newJString(oauthToken))
  add(query_597543, "userIp", newJString(userIp))
  if ids != nil:
    query_597543.add "ids", ids
  add(query_597543, "key", newJString(key))
  add(query_597543, "prettyPrint", newJBool(prettyPrint))
  result = call_597541.call(path_597542, query_597543, nil, nil, nil)

var dfareportingUserRolePermissionsList* = Call_DfareportingUserRolePermissionsList_597528(
    name: "dfareportingUserRolePermissionsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/userRolePermissions",
    validator: validate_DfareportingUserRolePermissionsList_597529,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolePermissionsList_597530,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolePermissionsGet_597544 = ref object of OpenApiRestCall_593437
proc url_DfareportingUserRolePermissionsGet_597546(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRolePermissions/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolePermissionsGet_597545(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one user role permission by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User role permission ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597547 = path.getOrDefault("profileId")
  valid_597547 = validateParameter(valid_597547, JString, required = true,
                                 default = nil)
  if valid_597547 != nil:
    section.add "profileId", valid_597547
  var valid_597548 = path.getOrDefault("id")
  valid_597548 = validateParameter(valid_597548, JString, required = true,
                                 default = nil)
  if valid_597548 != nil:
    section.add "id", valid_597548
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597549 = query.getOrDefault("fields")
  valid_597549 = validateParameter(valid_597549, JString, required = false,
                                 default = nil)
  if valid_597549 != nil:
    section.add "fields", valid_597549
  var valid_597550 = query.getOrDefault("quotaUser")
  valid_597550 = validateParameter(valid_597550, JString, required = false,
                                 default = nil)
  if valid_597550 != nil:
    section.add "quotaUser", valid_597550
  var valid_597551 = query.getOrDefault("alt")
  valid_597551 = validateParameter(valid_597551, JString, required = false,
                                 default = newJString("json"))
  if valid_597551 != nil:
    section.add "alt", valid_597551
  var valid_597552 = query.getOrDefault("oauth_token")
  valid_597552 = validateParameter(valid_597552, JString, required = false,
                                 default = nil)
  if valid_597552 != nil:
    section.add "oauth_token", valid_597552
  var valid_597553 = query.getOrDefault("userIp")
  valid_597553 = validateParameter(valid_597553, JString, required = false,
                                 default = nil)
  if valid_597553 != nil:
    section.add "userIp", valid_597553
  var valid_597554 = query.getOrDefault("key")
  valid_597554 = validateParameter(valid_597554, JString, required = false,
                                 default = nil)
  if valid_597554 != nil:
    section.add "key", valid_597554
  var valid_597555 = query.getOrDefault("prettyPrint")
  valid_597555 = validateParameter(valid_597555, JBool, required = false,
                                 default = newJBool(true))
  if valid_597555 != nil:
    section.add "prettyPrint", valid_597555
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597556: Call_DfareportingUserRolePermissionsGet_597544;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets one user role permission by ID.
  ## 
  let valid = call_597556.validator(path, query, header, formData, body)
  let scheme = call_597556.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597556.url(scheme.get, call_597556.host, call_597556.base,
                         call_597556.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597556, url, valid)

proc call*(call_597557: Call_DfareportingUserRolePermissionsGet_597544;
          profileId: string; id: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolePermissionsGet
  ## Gets one user role permission by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : User role permission ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597558 = newJObject()
  var query_597559 = newJObject()
  add(path_597558, "profileId", newJString(profileId))
  add(query_597559, "fields", newJString(fields))
  add(query_597559, "quotaUser", newJString(quotaUser))
  add(query_597559, "alt", newJString(alt))
  add(query_597559, "oauth_token", newJString(oauthToken))
  add(query_597559, "userIp", newJString(userIp))
  add(path_597558, "id", newJString(id))
  add(query_597559, "key", newJString(key))
  add(query_597559, "prettyPrint", newJBool(prettyPrint))
  result = call_597557.call(path_597558, query_597559, nil, nil, nil)

var dfareportingUserRolePermissionsGet* = Call_DfareportingUserRolePermissionsGet_597544(
    name: "dfareportingUserRolePermissionsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/userRolePermissions/{id}",
    validator: validate_DfareportingUserRolePermissionsGet_597545,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolePermissionsGet_597546,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesUpdate_597583 = ref object of OpenApiRestCall_593437
proc url_DfareportingUserRolesUpdate_597585(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesUpdate_597584(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing user role.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597586 = path.getOrDefault("profileId")
  valid_597586 = validateParameter(valid_597586, JString, required = true,
                                 default = nil)
  if valid_597586 != nil:
    section.add "profileId", valid_597586
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597587 = query.getOrDefault("fields")
  valid_597587 = validateParameter(valid_597587, JString, required = false,
                                 default = nil)
  if valid_597587 != nil:
    section.add "fields", valid_597587
  var valid_597588 = query.getOrDefault("quotaUser")
  valid_597588 = validateParameter(valid_597588, JString, required = false,
                                 default = nil)
  if valid_597588 != nil:
    section.add "quotaUser", valid_597588
  var valid_597589 = query.getOrDefault("alt")
  valid_597589 = validateParameter(valid_597589, JString, required = false,
                                 default = newJString("json"))
  if valid_597589 != nil:
    section.add "alt", valid_597589
  var valid_597590 = query.getOrDefault("oauth_token")
  valid_597590 = validateParameter(valid_597590, JString, required = false,
                                 default = nil)
  if valid_597590 != nil:
    section.add "oauth_token", valid_597590
  var valid_597591 = query.getOrDefault("userIp")
  valid_597591 = validateParameter(valid_597591, JString, required = false,
                                 default = nil)
  if valid_597591 != nil:
    section.add "userIp", valid_597591
  var valid_597592 = query.getOrDefault("key")
  valid_597592 = validateParameter(valid_597592, JString, required = false,
                                 default = nil)
  if valid_597592 != nil:
    section.add "key", valid_597592
  var valid_597593 = query.getOrDefault("prettyPrint")
  valid_597593 = validateParameter(valid_597593, JBool, required = false,
                                 default = newJBool(true))
  if valid_597593 != nil:
    section.add "prettyPrint", valid_597593
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597595: Call_DfareportingUserRolesUpdate_597583; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing user role.
  ## 
  let valid = call_597595.validator(path, query, header, formData, body)
  let scheme = call_597595.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597595.url(scheme.get, call_597595.host, call_597595.base,
                         call_597595.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597595, url, valid)

proc call*(call_597596: Call_DfareportingUserRolesUpdate_597583; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolesUpdate
  ## Updates an existing user role.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597597 = newJObject()
  var query_597598 = newJObject()
  var body_597599 = newJObject()
  add(path_597597, "profileId", newJString(profileId))
  add(query_597598, "fields", newJString(fields))
  add(query_597598, "quotaUser", newJString(quotaUser))
  add(query_597598, "alt", newJString(alt))
  add(query_597598, "oauth_token", newJString(oauthToken))
  add(query_597598, "userIp", newJString(userIp))
  add(query_597598, "key", newJString(key))
  if body != nil:
    body_597599 = body
  add(query_597598, "prettyPrint", newJBool(prettyPrint))
  result = call_597596.call(path_597597, query_597598, nil, nil, body_597599)

var dfareportingUserRolesUpdate* = Call_DfareportingUserRolesUpdate_597583(
    name: "dfareportingUserRolesUpdate", meth: HttpMethod.HttpPut,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles",
    validator: validate_DfareportingUserRolesUpdate_597584,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesUpdate_597585,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesInsert_597600 = ref object of OpenApiRestCall_593437
proc url_DfareportingUserRolesInsert_597602(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesInsert_597601(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Inserts a new user role.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597603 = path.getOrDefault("profileId")
  valid_597603 = validateParameter(valid_597603, JString, required = true,
                                 default = nil)
  if valid_597603 != nil:
    section.add "profileId", valid_597603
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597604 = query.getOrDefault("fields")
  valid_597604 = validateParameter(valid_597604, JString, required = false,
                                 default = nil)
  if valid_597604 != nil:
    section.add "fields", valid_597604
  var valid_597605 = query.getOrDefault("quotaUser")
  valid_597605 = validateParameter(valid_597605, JString, required = false,
                                 default = nil)
  if valid_597605 != nil:
    section.add "quotaUser", valid_597605
  var valid_597606 = query.getOrDefault("alt")
  valid_597606 = validateParameter(valid_597606, JString, required = false,
                                 default = newJString("json"))
  if valid_597606 != nil:
    section.add "alt", valid_597606
  var valid_597607 = query.getOrDefault("oauth_token")
  valid_597607 = validateParameter(valid_597607, JString, required = false,
                                 default = nil)
  if valid_597607 != nil:
    section.add "oauth_token", valid_597607
  var valid_597608 = query.getOrDefault("userIp")
  valid_597608 = validateParameter(valid_597608, JString, required = false,
                                 default = nil)
  if valid_597608 != nil:
    section.add "userIp", valid_597608
  var valid_597609 = query.getOrDefault("key")
  valid_597609 = validateParameter(valid_597609, JString, required = false,
                                 default = nil)
  if valid_597609 != nil:
    section.add "key", valid_597609
  var valid_597610 = query.getOrDefault("prettyPrint")
  valid_597610 = validateParameter(valid_597610, JBool, required = false,
                                 default = newJBool(true))
  if valid_597610 != nil:
    section.add "prettyPrint", valid_597610
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597612: Call_DfareportingUserRolesInsert_597600; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Inserts a new user role.
  ## 
  let valid = call_597612.validator(path, query, header, formData, body)
  let scheme = call_597612.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597612.url(scheme.get, call_597612.host, call_597612.base,
                         call_597612.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597612, url, valid)

proc call*(call_597613: Call_DfareportingUserRolesInsert_597600; profileId: string;
          fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolesInsert
  ## Inserts a new user role.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597614 = newJObject()
  var query_597615 = newJObject()
  var body_597616 = newJObject()
  add(path_597614, "profileId", newJString(profileId))
  add(query_597615, "fields", newJString(fields))
  add(query_597615, "quotaUser", newJString(quotaUser))
  add(query_597615, "alt", newJString(alt))
  add(query_597615, "oauth_token", newJString(oauthToken))
  add(query_597615, "userIp", newJString(userIp))
  add(query_597615, "key", newJString(key))
  if body != nil:
    body_597616 = body
  add(query_597615, "prettyPrint", newJBool(prettyPrint))
  result = call_597613.call(path_597614, query_597615, nil, nil, body_597616)

var dfareportingUserRolesInsert* = Call_DfareportingUserRolesInsert_597600(
    name: "dfareportingUserRolesInsert", meth: HttpMethod.HttpPost,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles",
    validator: validate_DfareportingUserRolesInsert_597601,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesInsert_597602,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesList_597560 = ref object of OpenApiRestCall_593437
proc url_DfareportingUserRolesList_597562(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesList_597561(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a list of user roles, possibly filtered. This method supports paging.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597563 = path.getOrDefault("profileId")
  valid_597563 = validateParameter(valid_597563, JString, required = true,
                                 default = nil)
  if valid_597563 != nil:
    section.add "profileId", valid_597563
  result.add "path", section
  ## parameters in `query` object:
  ##   subaccountId: JString
  ##               : Select only user roles that belong to this subaccount.
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: JString
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: JString
  ##            : Field by which to sort the list.
  ##   alt: JString
  ##      : Data format for the response.
  ##   searchString: JString
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "userrole*2015" will return objects with names like "userrole June 2015", "userrole April 2015", or simply "userrole 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "userrole" will match objects with name "my userrole", "userrole 2015", or simply "userrole".
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   accountUserRoleOnly: JBool
  ##                      : Select only account level user roles not associated with any specific subaccount.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: JInt
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only user roles with the specified IDs.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: JString
  ##            : Order of sorted results.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597564 = query.getOrDefault("subaccountId")
  valid_597564 = validateParameter(valid_597564, JString, required = false,
                                 default = nil)
  if valid_597564 != nil:
    section.add "subaccountId", valid_597564
  var valid_597565 = query.getOrDefault("fields")
  valid_597565 = validateParameter(valid_597565, JString, required = false,
                                 default = nil)
  if valid_597565 != nil:
    section.add "fields", valid_597565
  var valid_597566 = query.getOrDefault("pageToken")
  valid_597566 = validateParameter(valid_597566, JString, required = false,
                                 default = nil)
  if valid_597566 != nil:
    section.add "pageToken", valid_597566
  var valid_597567 = query.getOrDefault("quotaUser")
  valid_597567 = validateParameter(valid_597567, JString, required = false,
                                 default = nil)
  if valid_597567 != nil:
    section.add "quotaUser", valid_597567
  var valid_597568 = query.getOrDefault("sortField")
  valid_597568 = validateParameter(valid_597568, JString, required = false,
                                 default = newJString("ID"))
  if valid_597568 != nil:
    section.add "sortField", valid_597568
  var valid_597569 = query.getOrDefault("alt")
  valid_597569 = validateParameter(valid_597569, JString, required = false,
                                 default = newJString("json"))
  if valid_597569 != nil:
    section.add "alt", valid_597569
  var valid_597570 = query.getOrDefault("searchString")
  valid_597570 = validateParameter(valid_597570, JString, required = false,
                                 default = nil)
  if valid_597570 != nil:
    section.add "searchString", valid_597570
  var valid_597571 = query.getOrDefault("oauth_token")
  valid_597571 = validateParameter(valid_597571, JString, required = false,
                                 default = nil)
  if valid_597571 != nil:
    section.add "oauth_token", valid_597571
  var valid_597572 = query.getOrDefault("accountUserRoleOnly")
  valid_597572 = validateParameter(valid_597572, JBool, required = false, default = nil)
  if valid_597572 != nil:
    section.add "accountUserRoleOnly", valid_597572
  var valid_597573 = query.getOrDefault("userIp")
  valid_597573 = validateParameter(valid_597573, JString, required = false,
                                 default = nil)
  if valid_597573 != nil:
    section.add "userIp", valid_597573
  var valid_597574 = query.getOrDefault("maxResults")
  valid_597574 = validateParameter(valid_597574, JInt, required = false,
                                 default = newJInt(1000))
  if valid_597574 != nil:
    section.add "maxResults", valid_597574
  var valid_597575 = query.getOrDefault("ids")
  valid_597575 = validateParameter(valid_597575, JArray, required = false,
                                 default = nil)
  if valid_597575 != nil:
    section.add "ids", valid_597575
  var valid_597576 = query.getOrDefault("key")
  valid_597576 = validateParameter(valid_597576, JString, required = false,
                                 default = nil)
  if valid_597576 != nil:
    section.add "key", valid_597576
  var valid_597577 = query.getOrDefault("sortOrder")
  valid_597577 = validateParameter(valid_597577, JString, required = false,
                                 default = newJString("ASCENDING"))
  if valid_597577 != nil:
    section.add "sortOrder", valid_597577
  var valid_597578 = query.getOrDefault("prettyPrint")
  valid_597578 = validateParameter(valid_597578, JBool, required = false,
                                 default = newJBool(true))
  if valid_597578 != nil:
    section.add "prettyPrint", valid_597578
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597579: Call_DfareportingUserRolesList_597560; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a list of user roles, possibly filtered. This method supports paging.
  ## 
  let valid = call_597579.validator(path, query, header, formData, body)
  let scheme = call_597579.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597579.url(scheme.get, call_597579.host, call_597579.base,
                         call_597579.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597579, url, valid)

proc call*(call_597580: Call_DfareportingUserRolesList_597560; profileId: string;
          subaccountId: string = ""; fields: string = ""; pageToken: string = "";
          quotaUser: string = ""; sortField: string = "ID"; alt: string = "json";
          searchString: string = ""; oauthToken: string = "";
          accountUserRoleOnly: bool = false; userIp: string = "";
          maxResults: int = 1000; ids: JsonNode = nil; key: string = "";
          sortOrder: string = "ASCENDING"; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolesList
  ## Retrieves a list of user roles, possibly filtered. This method supports paging.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   subaccountId: string
  ##               : Select only user roles that belong to this subaccount.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   pageToken: string
  ##            : Value of the nextPageToken from the previous result page.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   sortField: string
  ##            : Field by which to sort the list.
  ##   alt: string
  ##      : Data format for the response.
  ##   searchString: string
  ##               : Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "userrole*2015" will return objects with names like "userrole June 2015", "userrole April 2015", or simply "userrole 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "userrole" will match objects with name "my userrole", "userrole 2015", or simply "userrole".
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   accountUserRoleOnly: bool
  ##                      : Select only account level user roles not associated with any specific subaccount.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   maxResults: int
  ##             : Maximum number of results to return.
  ##   ids: JArray
  ##      : Select only user roles with the specified IDs.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   sortOrder: string
  ##            : Order of sorted results.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597581 = newJObject()
  var query_597582 = newJObject()
  add(path_597581, "profileId", newJString(profileId))
  add(query_597582, "subaccountId", newJString(subaccountId))
  add(query_597582, "fields", newJString(fields))
  add(query_597582, "pageToken", newJString(pageToken))
  add(query_597582, "quotaUser", newJString(quotaUser))
  add(query_597582, "sortField", newJString(sortField))
  add(query_597582, "alt", newJString(alt))
  add(query_597582, "searchString", newJString(searchString))
  add(query_597582, "oauth_token", newJString(oauthToken))
  add(query_597582, "accountUserRoleOnly", newJBool(accountUserRoleOnly))
  add(query_597582, "userIp", newJString(userIp))
  add(query_597582, "maxResults", newJInt(maxResults))
  if ids != nil:
    query_597582.add "ids", ids
  add(query_597582, "key", newJString(key))
  add(query_597582, "sortOrder", newJString(sortOrder))
  add(query_597582, "prettyPrint", newJBool(prettyPrint))
  result = call_597580.call(path_597581, query_597582, nil, nil, nil)

var dfareportingUserRolesList* = Call_DfareportingUserRolesList_597560(
    name: "dfareportingUserRolesList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles",
    validator: validate_DfareportingUserRolesList_597561,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesList_597562,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesPatch_597617 = ref object of OpenApiRestCall_593437
proc url_DfareportingUserRolesPatch_597619(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesPatch_597618(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing user role. This method supports patch semantics.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597620 = path.getOrDefault("profileId")
  valid_597620 = validateParameter(valid_597620, JString, required = true,
                                 default = nil)
  if valid_597620 != nil:
    section.add "profileId", valid_597620
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: JString (required)
  ##     : User role ID.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597621 = query.getOrDefault("fields")
  valid_597621 = validateParameter(valid_597621, JString, required = false,
                                 default = nil)
  if valid_597621 != nil:
    section.add "fields", valid_597621
  var valid_597622 = query.getOrDefault("quotaUser")
  valid_597622 = validateParameter(valid_597622, JString, required = false,
                                 default = nil)
  if valid_597622 != nil:
    section.add "quotaUser", valid_597622
  assert query != nil, "query argument is necessary due to required `id` field"
  var valid_597623 = query.getOrDefault("id")
  valid_597623 = validateParameter(valid_597623, JString, required = true,
                                 default = nil)
  if valid_597623 != nil:
    section.add "id", valid_597623
  var valid_597624 = query.getOrDefault("alt")
  valid_597624 = validateParameter(valid_597624, JString, required = false,
                                 default = newJString("json"))
  if valid_597624 != nil:
    section.add "alt", valid_597624
  var valid_597625 = query.getOrDefault("oauth_token")
  valid_597625 = validateParameter(valid_597625, JString, required = false,
                                 default = nil)
  if valid_597625 != nil:
    section.add "oauth_token", valid_597625
  var valid_597626 = query.getOrDefault("userIp")
  valid_597626 = validateParameter(valid_597626, JString, required = false,
                                 default = nil)
  if valid_597626 != nil:
    section.add "userIp", valid_597626
  var valid_597627 = query.getOrDefault("key")
  valid_597627 = validateParameter(valid_597627, JString, required = false,
                                 default = nil)
  if valid_597627 != nil:
    section.add "key", valid_597627
  var valid_597628 = query.getOrDefault("prettyPrint")
  valid_597628 = validateParameter(valid_597628, JBool, required = false,
                                 default = newJBool(true))
  if valid_597628 != nil:
    section.add "prettyPrint", valid_597628
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject
  section = validateParameter(body, JObject, required = false, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_597630: Call_DfareportingUserRolesPatch_597617; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing user role. This method supports patch semantics.
  ## 
  let valid = call_597630.validator(path, query, header, formData, body)
  let scheme = call_597630.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597630.url(scheme.get, call_597630.host, call_597630.base,
                         call_597630.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597630, url, valid)

proc call*(call_597631: Call_DfareportingUserRolesPatch_597617; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          body: JsonNode = nil; prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolesPatch
  ## Updates an existing user role. This method supports patch semantics.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   id: string (required)
  ##     : User role ID.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   body: JObject
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597632 = newJObject()
  var query_597633 = newJObject()
  var body_597634 = newJObject()
  add(path_597632, "profileId", newJString(profileId))
  add(query_597633, "fields", newJString(fields))
  add(query_597633, "quotaUser", newJString(quotaUser))
  add(query_597633, "id", newJString(id))
  add(query_597633, "alt", newJString(alt))
  add(query_597633, "oauth_token", newJString(oauthToken))
  add(query_597633, "userIp", newJString(userIp))
  add(query_597633, "key", newJString(key))
  if body != nil:
    body_597634 = body
  add(query_597633, "prettyPrint", newJBool(prettyPrint))
  result = call_597631.call(path_597632, query_597633, nil, nil, body_597634)

var dfareportingUserRolesPatch* = Call_DfareportingUserRolesPatch_597617(
    name: "dfareportingUserRolesPatch", meth: HttpMethod.HttpPatch,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles",
    validator: validate_DfareportingUserRolesPatch_597618,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesPatch_597619,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesGet_597635 = ref object of OpenApiRestCall_593437
proc url_DfareportingUserRolesGet_597637(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesGet_597636(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one user role by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User role ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597638 = path.getOrDefault("profileId")
  valid_597638 = validateParameter(valid_597638, JString, required = true,
                                 default = nil)
  if valid_597638 != nil:
    section.add "profileId", valid_597638
  var valid_597639 = path.getOrDefault("id")
  valid_597639 = validateParameter(valid_597639, JString, required = true,
                                 default = nil)
  if valid_597639 != nil:
    section.add "id", valid_597639
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597640 = query.getOrDefault("fields")
  valid_597640 = validateParameter(valid_597640, JString, required = false,
                                 default = nil)
  if valid_597640 != nil:
    section.add "fields", valid_597640
  var valid_597641 = query.getOrDefault("quotaUser")
  valid_597641 = validateParameter(valid_597641, JString, required = false,
                                 default = nil)
  if valid_597641 != nil:
    section.add "quotaUser", valid_597641
  var valid_597642 = query.getOrDefault("alt")
  valid_597642 = validateParameter(valid_597642, JString, required = false,
                                 default = newJString("json"))
  if valid_597642 != nil:
    section.add "alt", valid_597642
  var valid_597643 = query.getOrDefault("oauth_token")
  valid_597643 = validateParameter(valid_597643, JString, required = false,
                                 default = nil)
  if valid_597643 != nil:
    section.add "oauth_token", valid_597643
  var valid_597644 = query.getOrDefault("userIp")
  valid_597644 = validateParameter(valid_597644, JString, required = false,
                                 default = nil)
  if valid_597644 != nil:
    section.add "userIp", valid_597644
  var valid_597645 = query.getOrDefault("key")
  valid_597645 = validateParameter(valid_597645, JString, required = false,
                                 default = nil)
  if valid_597645 != nil:
    section.add "key", valid_597645
  var valid_597646 = query.getOrDefault("prettyPrint")
  valid_597646 = validateParameter(valid_597646, JBool, required = false,
                                 default = newJBool(true))
  if valid_597646 != nil:
    section.add "prettyPrint", valid_597646
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597647: Call_DfareportingUserRolesGet_597635; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one user role by ID.
  ## 
  let valid = call_597647.validator(path, query, header, formData, body)
  let scheme = call_597647.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597647.url(scheme.get, call_597647.host, call_597647.base,
                         call_597647.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597647, url, valid)

proc call*(call_597648: Call_DfareportingUserRolesGet_597635; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolesGet
  ## Gets one user role by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : User role ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597649 = newJObject()
  var query_597650 = newJObject()
  add(path_597649, "profileId", newJString(profileId))
  add(query_597650, "fields", newJString(fields))
  add(query_597650, "quotaUser", newJString(quotaUser))
  add(query_597650, "alt", newJString(alt))
  add(query_597650, "oauth_token", newJString(oauthToken))
  add(query_597650, "userIp", newJString(userIp))
  add(path_597649, "id", newJString(id))
  add(query_597650, "key", newJString(key))
  add(query_597650, "prettyPrint", newJBool(prettyPrint))
  result = call_597648.call(path_597649, query_597650, nil, nil, nil)

var dfareportingUserRolesGet* = Call_DfareportingUserRolesGet_597635(
    name: "dfareportingUserRolesGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles/{id}",
    validator: validate_DfareportingUserRolesGet_597636,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesGet_597637,
    schemes: {Scheme.Https})
type
  Call_DfareportingUserRolesDelete_597651 = ref object of OpenApiRestCall_593437
proc url_DfareportingUserRolesDelete_597653(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/userRoles/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingUserRolesDelete_597652(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing user role.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JString (required)
  ##     : User role ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597654 = path.getOrDefault("profileId")
  valid_597654 = validateParameter(valid_597654, JString, required = true,
                                 default = nil)
  if valid_597654 != nil:
    section.add "profileId", valid_597654
  var valid_597655 = path.getOrDefault("id")
  valid_597655 = validateParameter(valid_597655, JString, required = true,
                                 default = nil)
  if valid_597655 != nil:
    section.add "id", valid_597655
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597656 = query.getOrDefault("fields")
  valid_597656 = validateParameter(valid_597656, JString, required = false,
                                 default = nil)
  if valid_597656 != nil:
    section.add "fields", valid_597656
  var valid_597657 = query.getOrDefault("quotaUser")
  valid_597657 = validateParameter(valid_597657, JString, required = false,
                                 default = nil)
  if valid_597657 != nil:
    section.add "quotaUser", valid_597657
  var valid_597658 = query.getOrDefault("alt")
  valid_597658 = validateParameter(valid_597658, JString, required = false,
                                 default = newJString("json"))
  if valid_597658 != nil:
    section.add "alt", valid_597658
  var valid_597659 = query.getOrDefault("oauth_token")
  valid_597659 = validateParameter(valid_597659, JString, required = false,
                                 default = nil)
  if valid_597659 != nil:
    section.add "oauth_token", valid_597659
  var valid_597660 = query.getOrDefault("userIp")
  valid_597660 = validateParameter(valid_597660, JString, required = false,
                                 default = nil)
  if valid_597660 != nil:
    section.add "userIp", valid_597660
  var valid_597661 = query.getOrDefault("key")
  valid_597661 = validateParameter(valid_597661, JString, required = false,
                                 default = nil)
  if valid_597661 != nil:
    section.add "key", valid_597661
  var valid_597662 = query.getOrDefault("prettyPrint")
  valid_597662 = validateParameter(valid_597662, JBool, required = false,
                                 default = newJBool(true))
  if valid_597662 != nil:
    section.add "prettyPrint", valid_597662
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597663: Call_DfareportingUserRolesDelete_597651; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing user role.
  ## 
  let valid = call_597663.validator(path, query, header, formData, body)
  let scheme = call_597663.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597663.url(scheme.get, call_597663.host, call_597663.base,
                         call_597663.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597663, url, valid)

proc call*(call_597664: Call_DfareportingUserRolesDelete_597651; profileId: string;
          id: string; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingUserRolesDelete
  ## Deletes an existing user role.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: string (required)
  ##     : User role ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597665 = newJObject()
  var query_597666 = newJObject()
  add(path_597665, "profileId", newJString(profileId))
  add(query_597666, "fields", newJString(fields))
  add(query_597666, "quotaUser", newJString(quotaUser))
  add(query_597666, "alt", newJString(alt))
  add(query_597666, "oauth_token", newJString(oauthToken))
  add(query_597666, "userIp", newJString(userIp))
  add(path_597665, "id", newJString(id))
  add(query_597666, "key", newJString(key))
  add(query_597666, "prettyPrint", newJBool(prettyPrint))
  result = call_597664.call(path_597665, query_597666, nil, nil, nil)

var dfareportingUserRolesDelete* = Call_DfareportingUserRolesDelete_597651(
    name: "dfareportingUserRolesDelete", meth: HttpMethod.HttpDelete,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/userRoles/{id}",
    validator: validate_DfareportingUserRolesDelete_597652,
    base: "/dfareporting/v3.2", url: url_DfareportingUserRolesDelete_597653,
    schemes: {Scheme.Https})
type
  Call_DfareportingVideoFormatsList_597667 = ref object of OpenApiRestCall_593437
proc url_DfareportingVideoFormatsList_597669(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/videoFormats")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingVideoFormatsList_597668(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available video formats.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597670 = path.getOrDefault("profileId")
  valid_597670 = validateParameter(valid_597670, JString, required = true,
                                 default = nil)
  if valid_597670 != nil:
    section.add "profileId", valid_597670
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597671 = query.getOrDefault("fields")
  valid_597671 = validateParameter(valid_597671, JString, required = false,
                                 default = nil)
  if valid_597671 != nil:
    section.add "fields", valid_597671
  var valid_597672 = query.getOrDefault("quotaUser")
  valid_597672 = validateParameter(valid_597672, JString, required = false,
                                 default = nil)
  if valid_597672 != nil:
    section.add "quotaUser", valid_597672
  var valid_597673 = query.getOrDefault("alt")
  valid_597673 = validateParameter(valid_597673, JString, required = false,
                                 default = newJString("json"))
  if valid_597673 != nil:
    section.add "alt", valid_597673
  var valid_597674 = query.getOrDefault("oauth_token")
  valid_597674 = validateParameter(valid_597674, JString, required = false,
                                 default = nil)
  if valid_597674 != nil:
    section.add "oauth_token", valid_597674
  var valid_597675 = query.getOrDefault("userIp")
  valid_597675 = validateParameter(valid_597675, JString, required = false,
                                 default = nil)
  if valid_597675 != nil:
    section.add "userIp", valid_597675
  var valid_597676 = query.getOrDefault("key")
  valid_597676 = validateParameter(valid_597676, JString, required = false,
                                 default = nil)
  if valid_597676 != nil:
    section.add "key", valid_597676
  var valid_597677 = query.getOrDefault("prettyPrint")
  valid_597677 = validateParameter(valid_597677, JBool, required = false,
                                 default = newJBool(true))
  if valid_597677 != nil:
    section.add "prettyPrint", valid_597677
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597678: Call_DfareportingVideoFormatsList_597667; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists available video formats.
  ## 
  let valid = call_597678.validator(path, query, header, formData, body)
  let scheme = call_597678.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597678.url(scheme.get, call_597678.host, call_597678.base,
                         call_597678.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597678, url, valid)

proc call*(call_597679: Call_DfareportingVideoFormatsList_597667;
          profileId: string; fields: string = ""; quotaUser: string = "";
          alt: string = "json"; oauthToken: string = ""; userIp: string = "";
          key: string = ""; prettyPrint: bool = true): Recallable =
  ## dfareportingVideoFormatsList
  ## Lists available video formats.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597680 = newJObject()
  var query_597681 = newJObject()
  add(path_597680, "profileId", newJString(profileId))
  add(query_597681, "fields", newJString(fields))
  add(query_597681, "quotaUser", newJString(quotaUser))
  add(query_597681, "alt", newJString(alt))
  add(query_597681, "oauth_token", newJString(oauthToken))
  add(query_597681, "userIp", newJString(userIp))
  add(query_597681, "key", newJString(key))
  add(query_597681, "prettyPrint", newJBool(prettyPrint))
  result = call_597679.call(path_597680, query_597681, nil, nil, nil)

var dfareportingVideoFormatsList* = Call_DfareportingVideoFormatsList_597667(
    name: "dfareportingVideoFormatsList", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com", route: "/userprofiles/{profileId}/videoFormats",
    validator: validate_DfareportingVideoFormatsList_597668,
    base: "/dfareporting/v3.2", url: url_DfareportingVideoFormatsList_597669,
    schemes: {Scheme.Https})
type
  Call_DfareportingVideoFormatsGet_597682 = ref object of OpenApiRestCall_593437
proc url_DfareportingVideoFormatsGet_597684(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "profileId" in path, "`profileId` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/userprofiles/"),
               (kind: VariableSegment, value: "profileId"),
               (kind: ConstantSegment, value: "/videoFormats/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DfareportingVideoFormatsGet_597683(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets one video format by ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   profileId: JString (required)
  ##            : User profile ID associated with this request.
  ##   id: JInt (required)
  ##     : Video format ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `profileId` field"
  var valid_597685 = path.getOrDefault("profileId")
  valid_597685 = validateParameter(valid_597685, JString, required = true,
                                 default = nil)
  if valid_597685 != nil:
    section.add "profileId", valid_597685
  var valid_597686 = path.getOrDefault("id")
  valid_597686 = validateParameter(valid_597686, JInt, required = true, default = nil)
  if valid_597686 != nil:
    section.add "id", valid_597686
  result.add "path", section
  ## parameters in `query` object:
  ##   fields: JString
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: JString
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: JString
  ##      : Data format for the response.
  ##   oauth_token: JString
  ##              : OAuth 2.0 token for the current user.
  ##   userIp: JString
  ##         : Deprecated. Please use quotaUser instead.
  ##   key: JString
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: JBool
  ##              : Returns response with indentations and line breaks.
  section = newJObject()
  var valid_597687 = query.getOrDefault("fields")
  valid_597687 = validateParameter(valid_597687, JString, required = false,
                                 default = nil)
  if valid_597687 != nil:
    section.add "fields", valid_597687
  var valid_597688 = query.getOrDefault("quotaUser")
  valid_597688 = validateParameter(valid_597688, JString, required = false,
                                 default = nil)
  if valid_597688 != nil:
    section.add "quotaUser", valid_597688
  var valid_597689 = query.getOrDefault("alt")
  valid_597689 = validateParameter(valid_597689, JString, required = false,
                                 default = newJString("json"))
  if valid_597689 != nil:
    section.add "alt", valid_597689
  var valid_597690 = query.getOrDefault("oauth_token")
  valid_597690 = validateParameter(valid_597690, JString, required = false,
                                 default = nil)
  if valid_597690 != nil:
    section.add "oauth_token", valid_597690
  var valid_597691 = query.getOrDefault("userIp")
  valid_597691 = validateParameter(valid_597691, JString, required = false,
                                 default = nil)
  if valid_597691 != nil:
    section.add "userIp", valid_597691
  var valid_597692 = query.getOrDefault("key")
  valid_597692 = validateParameter(valid_597692, JString, required = false,
                                 default = nil)
  if valid_597692 != nil:
    section.add "key", valid_597692
  var valid_597693 = query.getOrDefault("prettyPrint")
  valid_597693 = validateParameter(valid_597693, JBool, required = false,
                                 default = newJBool(true))
  if valid_597693 != nil:
    section.add "prettyPrint", valid_597693
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_597694: Call_DfareportingVideoFormatsGet_597682; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets one video format by ID.
  ## 
  let valid = call_597694.validator(path, query, header, formData, body)
  let scheme = call_597694.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_597694.url(scheme.get, call_597694.host, call_597694.base,
                         call_597694.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_597694, url, valid)

proc call*(call_597695: Call_DfareportingVideoFormatsGet_597682; profileId: string;
          id: int; fields: string = ""; quotaUser: string = ""; alt: string = "json";
          oauthToken: string = ""; userIp: string = ""; key: string = "";
          prettyPrint: bool = true): Recallable =
  ## dfareportingVideoFormatsGet
  ## Gets one video format by ID.
  ##   profileId: string (required)
  ##            : User profile ID associated with this request.
  ##   fields: string
  ##         : Selector specifying which fields to include in a partial response.
  ##   quotaUser: string
  ##            : An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
  ##   alt: string
  ##      : Data format for the response.
  ##   oauthToken: string
  ##             : OAuth 2.0 token for the current user.
  ##   userIp: string
  ##         : Deprecated. Please use quotaUser instead.
  ##   id: int (required)
  ##     : Video format ID.
  ##   key: string
  ##      : API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
  ##   prettyPrint: bool
  ##              : Returns response with indentations and line breaks.
  var path_597696 = newJObject()
  var query_597697 = newJObject()
  add(path_597696, "profileId", newJString(profileId))
  add(query_597697, "fields", newJString(fields))
  add(query_597697, "quotaUser", newJString(quotaUser))
  add(query_597697, "alt", newJString(alt))
  add(query_597697, "oauth_token", newJString(oauthToken))
  add(query_597697, "userIp", newJString(userIp))
  add(path_597696, "id", newJInt(id))
  add(query_597697, "key", newJString(key))
  add(query_597697, "prettyPrint", newJBool(prettyPrint))
  result = call_597695.call(path_597696, query_597697, nil, nil, nil)

var dfareportingVideoFormatsGet* = Call_DfareportingVideoFormatsGet_597682(
    name: "dfareportingVideoFormatsGet", meth: HttpMethod.HttpGet,
    host: "www.googleapis.com",
    route: "/userprofiles/{profileId}/videoFormats/{id}",
    validator: validate_DfareportingVideoFormatsGet_597683,
    base: "/dfareporting/v3.2", url: url_DfareportingVideoFormatsGet_597684,
    schemes: {Scheme.Https})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
